webpackJsonp([2],{696:function(e,t,s){e.exports=s(697)},697:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var t=s(3),i=s.n(t),n=s(698);s(702);new i.a({el:"#statamic",mixins:[n.a],data:{isPublishPage:!1,isPreviewing:!1,showShortcuts:!1,navVisible:!1,version:Statamic.version,draggingNonFile:!1,sneakPeekViewport:null,sneakPeekFields:null,windowWidth:null,modalOpen:!1,showLoginModal:!1},computed:{hasSearchResults:function(){return this.$refs.search.hasItems}},methods:{preview:function(){var t=this,s=this;s.$broadcast("previewing"),this.sneakPeekViewport=e(".sneak-peek-viewport")[0],this.sneakPeekFields=e(".page-wrapper")[0],e(".sneak-peek-wrapper").addClass("animating on"),this.wait(200).then(function(){s.isPreviewing=!0;var i=localStorage.getItem("statamic.sneakpeek.width")||400;return t.sneakPeekViewport.style.left=i+"px",t.sneakPeekFields.style.width=i+"px",e(t.$el).addClass("sneak-peeking"),t.$emit("livepreview.opened"),t.wait(200)}).then(function(){return e("#sneak-peek-iframe").show(),e(t.$el).addClass("sneak-peek-editing sneak-peek-animating"),t.wait(500)}).then(function(){e(t.$el).removeClass("sneak-peek-animating")})},stopPreviewing:function(){var t=this;this.$broadcast("previewing.stopped"),e(".sneak-peek-wrapper").addClass("animating"),e(this.$el).addClass("sneak-peek-animating"),e(this.$el).removeClass("sneak-peek-editing"),e("#sneak-peek-iframe").fadeOut(),e(".sneak-peek-wrapper .icon").hide(),this.wait(500).then(function(){return t.sneakPeekViewport.style.left=null,t.sneakPeekFields.style.width=null,e(t.$el).removeClass("sneak-peek-animating"),e(t.$el).removeClass("sneak-peeking"),t.wait(200)}).then(function(){return t.isPreviewing=!1,t.$emit("livepreview.closed"),e(".sneak-peek-wrapper").removeClass("on"),t.wait(200)}).then(function(){e(".sneak-peek-wrapper").removeClass("animating")})},wait:function(e){return new Promise(function(t){setTimeout(t,e)})},toggleNav:function(){this.navVisible=!this.navVisible},dragStart:function(){this.draggingNonFile=!0},dragEnd:function(){this.draggingNonFile=!1},sneakPeekResizeStart:function(t){window.addEventListener("mousemove",this.sneakPeekResizing),window.addEventListener("mouseup",this.sneakPeekResizeEnd),e(".sneak-peek-iframe-wrap").css("pointer-events","none")},sneakPeekResizeEnd:function(t){window.removeEventListener("mousemove",this.sneakPeekResizing,!1),window.removeEventListener("mouseup",this.sneakPeekResizeEnd,!1),e(".sneak-peek-iframe-wrap").css("pointer-events","auto")},sneakPeekResizing:function(e){e.preventDefault();var t=e.clientX;t=t<350?350:t,this.sneakPeekViewport.style.left=t+"px",this.sneakPeekFields.style.width=t+"px",localStorage.setItem("statamic.sneakpeek.width",t),this.$emit("livepreview.resizing",t)}},ready:function(){var t=this;Mousetrap.bind(["/","ctrl+f"],function(t){e("#global-search").focus()},"keyup"),Mousetrap.bind("?",function(e){this.showShortcuts=!0}.bind(this),"keyup"),Mousetrap.bind("escape",function(e){this.$broadcast("close-modal"),this.$broadcast("close-editor"),this.$broadcast("close-selector"),this.$broadcast("close-dropdown",null)}.bind(this),"keyup"),window.addEventListener("dragstart",this.dragStart),window.addEventListener("dragend",this.dragEnd),this.windowWidth=document.documentElement.clientWidth,window.addEventListener("resize",function(){return t.windowWidth=document.documentElement.clientWidth})},events:{changesMade:function(e){window.onbeforeunload=e?function(){return""}:null},"modal.open":function(){this.modalOpen=!0},"modal.close":function(){this.modalOpen=!1}}})}.call(t,s(2))},698:function(e,t,s){"use strict";s(699);var i=s(700),n=s.n(i),o=s(701),a={theme:"default",timeLife:5e3,closeBtn:!1},r={template:s.n(o).a,props:{message:{required:!0},position:{type:Number,required:!0},destroyed:{twoWay:!0,type:Boolean,required:!0},options:{type:Object,coerce:function(e){return Object.assign({},a,e)}}},data:function(){return{isShow:!1}},computed:{styles:function(){return["alert-"+this.options.theme,this.options.closeBtn?"alert-dismissible":null]},style:function(){return"transform: translateY("+this.options.directionOfJumping+100*this.position+"%)"}},ready:function(){var e=this;setTimeout(function(){e.isShow=!0},50),this.options.timeLife&&this._startLazyAutoDestroy()},detached:function(){clearTimeout(this.timerDestroy)},methods:{remove:function(){return this._clearTimer(),this.destroyed=!0,this.$remove().$destroy(),this},_startLazyAutoDestroy:function(){var e=this;this._clearTimer(),this.timerDestroy=setTimeout(function(){e.$remove().$destroy()},this.options.timeLife)},_clearTimer:function(){this.timerDestroy&&clearTimeout(this.timerDestroy)},_startTimer:function(){this.options.timeLife&&this._startLazyAutoDestroy()},_stopTimer:function(){this.options.timeLife&&this._clearTimer()}}};var u={maxToasts:6,position:"left bottom"},c={template:n.a,data:function(){return{toasts:[],options:u}},computed:{classesOfPosition:function(){return this._updateClassesOfPosition(this.options.position)},directionOfJumping:function(){return this._updateDirectionOfJumping(this.options.position)}},methods:{showToast:function(e,t){return this._addToast(e,t),this._moveToast(),this},setOptions:function(e){return this.options=Object.assign(this.options,e||{}),this},_addToast:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e&&(t.directionOfJumping=this.directionOfJumping,this.toasts.unshift({message:e,options:t,isDestroyed:!1}))},_moveToast:function(e){var t=this.options.maxToasts>0?this.options.maxToasts:9999;this.toasts=this.toasts.reduceRight(function(e,s,i){return s.isDestroyed?e:i+1>=t?e:[s].concat(e)},[])},_updateClassesOfPosition:function(e){return e.split(" ").reduce(function(e,t){return e["--"+t.toLowerCase()]=!0,e},{})},_updateDirectionOfJumping:function(e){return e.match(/top/i)?"+":"-"}},components:{"vue-toast":r}};t.a={components:{VueToast:c},data:{toast:null,flash:Statamic.flash},methods:{flashExistingMessages:function(){var e=this;this.flash.forEach(function(t){var s=t.type,i=t.message;return e.setFlashMessage(i,{theme:s})})},bindToastNotifications:function(){this.toast=this.$refs.toast,this.toast&&this.toast.setOptions({position:"bottom right"})},setFlashMessage:function(e,t){this.toast.showToast(e,{theme:t.theme,timeLife:t.timeout||5e3,closeBtn:!t.hasOwnProperty("dismissible")||t.dismissible})}},events:{setFlashSuccess:function(e,t){(t=t||{}).theme="success",this.setFlashMessage(e,t)},setFlashError:function(e,t){(t=t||{}).theme="danger",this.setFlashMessage(e,t)}},ready:function(){this.bindToastNotifications(),this.flashExistingMessages()}}},699:function(e,t){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){"use strict";if(void 0===e||null===e)throw new TypeError("Cannot convert first argument to object");for(var s=Object(e),i=1;i<arguments.length;i++){var n=arguments[i];if(void 0!==n&&null!==n)for(var o=Object.keys(Object(n)),a=0,r=o.length;a<r;a++){var u=o[a],c=Object.getOwnPropertyDescriptor(n,u);void 0!==c&&c.enumerable&&(s[u]=n[u])}}return s}})},700:function(e,t){e.exports='<div class=vue-toast-manager_container :class=classesOfPosition> <vue-toast v-for="toast in toasts" :message=toast.message :options=toast.options :destroyed.sync=toast.isDestroyed :position=$index></vue-toast> </div> '},701:function(e,t){e.exports='<div class=vue-toast_container @mouseover=_stopTimer @mouseleave=_startTimer :style=style v-show=isShow transition> <div class="vue-toast_message alert" :class=styles> <button type=button class=close aria-label=Close v-if=options.closeBtn @click=remove> <span aria-hidden=true>Ã—</span> </button> <span v-html=message></span> </div> </div> '},702:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(3),n=s.n(i),o=function(){function e(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,s,i){return s&&e(t.prototype,s),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.instance=t}return o(e,[{key:"success",value:function(e,t){this.instance.$dispatch("setFlashSuccess",e,t)}},{key:"error",value:function(e,t){this.instance.$dispatch("setFlashError",e,t)}}]),e}();Object.defineProperties(n.a.prototype,{$notify:{get:function(){return new a(this)}}})}},[696]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,