webpackJsonp([0],[,,,,,function(e,t,i){var n,s,a={};n=i(569),s=i(570),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},,,,function(e,t,i){var n,s,a={};n=i(277),s=i(296),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";t.a={props:["config"],computed:{formData:function(){return this.$parent.$parent.$parent.$parent.formData}}}},function(e,t,i){var n,s,a={};n=i(545),s=i(546),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},,,,function(e,t,i){var n,s,a={};n=i(263),s=i(264),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(function(e){var i=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();var n=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.fieldset=e,this.name=e.name,this.sections=this.parseSections(e.sections),this.metaFields=[]}return i(t,[{key:"parseSections",value:function(t){var i=this;return e.chain(t).mapObject(function(e,t){return e.handle=t,e.fields=i.parseFields(e.fields),e}).values().value()}},{key:"parseFields",value:function(t){return e.chain(t).mapObject(function(e,t){return e.name=t,e}).values().value()}},{key:"showSlug",value:function(e){return e&&this.metaFields.push("slug"),this}},{key:"showDate",value:function(e){return e&&this.metaFields.push("date"),this}},{key:"prependTitle",value:function(){return this.fieldsInSections().includes("title")||this.firstSectionFields().unshift({name:"title",type:"text",instructions:null,width:100}),this}},{key:"prependMeta",value:function(){var t=this;this.ensureSidebar();var i=this.fieldsInSections();return e.each(this.metaFields,function(e){i.includes(e)||t.pushSidebarField({name:e,type:e})}),this.removeEmptySidebar(),this}},{key:"pushSidebarField",value:function(e){var t=this.sidebarSectionFields(),i=Object.assign({isMeta:!0,width:100,localizable:!0},e||{});t.unshift(i)}},{key:"ensureSidebar",value:function(){e.find(this.sections,{handle:"sidebar"})||this.sections.push({handle:"sidebar",display:translate("cp.meta"),fields:[]})}},{key:"removeEmptySidebar",value:function(){this.sidebarSectionFields().length>0||(this.sections=e.reject(this.sections,function(e){return"sidebar"==e.handle}))}},{key:"fieldsInSections",value:function(){return e.chain(this.sections).map(function(e){return e.fields}).flatten().pluck("name").value()}},{key:"firstSectionFields",value:function(){return this.sections[0].fields}},{key:"sidebarSectionFields",value:function(){return e.find(this.sections,{handle:"sidebar"}).fields}},{key:"fields",value:function(){return e.chain(this.sections).pluck("fields").flatten().value()}}]),t}();t.a=n}).call(t,i(1))},,,,function(e,t,i){(function(e){"use strict";var t={autoSelfClosers:{area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0,menuitem:!0},implicitlyClosed:{dd:!0,li:!0,optgroup:!0,option:!0,p:!0,rp:!0,rt:!0,tbody:!0,td:!0,tfoot:!0,th:!0,tr:!0},contextGrabbers:{dd:{dd:!0,dt:!0},dt:{dd:!0,dt:!0},li:{li:!0},option:{option:!0,optgroup:!0},optgroup:{optgroup:!0},p:{address:!0,article:!0,aside:!0,blockquote:!0,dir:!0,div:!0,dl:!0,fieldset:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,menu:!0,nav:!0,ol:!0,p:!0,pre:!0,section:!0,table:!0,ul:!0},rp:{rp:!0,rt:!0},rt:{rp:!0,rt:!0},tbody:{tbody:!0,tfoot:!0},td:{td:!0,th:!0},tfoot:{tbody:!0},th:{td:!0,th:!0},thead:{tbody:!0,tfoot:!0},tr:{tr:!0}},doNotIndent:{pre:!0},allowUnquoted:!0,allowMissing:!0,caseFold:!0},i={autoSelfClosers:{},implicitlyClosed:{},contextGrabbers:{},doNotIndent:{},allowUnquoted:!1,allowMissing:!1,allowMissingTagName:!1,caseFold:!1};e.defineMode("xml",function(n,s){var a,o,r=n.indentUnit,l={},c=s.htmlMode?t:i;for(var d in c)l[d]=c[d];for(var d in s)l[d]=s[d];function u(e,t){function i(i){return t.tokenize=i,i(e,t)}var n=e.next();return"<"==n?e.eat("!")?e.eat("[")?e.match("CDATA[")?i(f("atom","]]>")):null:e.match("--")?i(f("comment","--\x3e")):e.match("DOCTYPE",!0,!0)?(e.eatWhile(/[\w\._\-]/),i(function e(t){return function(i,n){for(var s;null!=(s=i.next());){if("<"==s)return n.tokenize=e(t+1),n.tokenize(i,n);if(">"==s){if(1==t){n.tokenize=u;break}return n.tokenize=e(t-1),n.tokenize(i,n)}}return"meta"}}(1))):null:e.eat("?")?(e.eatWhile(/[\w\._\-]/),t.tokenize=f("meta","?>"),"meta"):(a=e.eat("/")?"closeTag":"openTag",t.tokenize=p,"tag bracket"):"&"==n?(e.eat("#")?e.eat("x")?e.eatWhile(/[a-fA-F\d]/)&&e.eat(";"):e.eatWhile(/[\d]/)&&e.eat(";"):e.eatWhile(/[\w\.\-:]/)&&e.eat(";"))?"atom":"error":(e.eatWhile(/[^&<]/),null)}function p(e,t){var i,n,s=e.next();if(">"==s||"/"==s&&e.eat(">"))return t.tokenize=u,a=">"==s?"endTag":"selfcloseTag","tag bracket";if("="==s)return a="equals",null;if("<"==s){t.tokenize=u,t.state=g,t.tagName=t.tagStart=null;var o=t.tokenize(e,t);return o?o+" tag error":"tag error"}return/[\'\"]/.test(s)?(t.tokenize=(i=s,(n=function(e,t){for(;!e.eol();)if(e.next()==i){t.tokenize=p;break}return"string"}).isInAttribute=!0,n),t.stringStartCol=e.column(),t.tokenize(e,t)):(e.match(/^[^\s\u00a0=<>\"\']*[^\s\u00a0=<>\"\'\/]/),"word")}function f(e,t){return function(i,n){for(;!i.eol();){if(i.match(t)){n.tokenize=u;break}i.next()}return e}}function h(e){e.context&&(e.context=e.context.prev)}function m(e,t){for(var i;;){if(!e.context)return;if(i=e.context.tagName,!l.contextGrabbers.hasOwnProperty(i)||!l.contextGrabbers[i].hasOwnProperty(t))return;h(e)}}function g(e,t,i){return"openTag"==e?(i.tagStart=t.column(),v):"closeTag"==e?x:g}function v(e,t,i){return"word"==e?(i.tagName=t.current(),o="tag",w):l.allowMissingTagName&&"endTag"==e?(o="tag bracket",w(e,t,i)):(o="error",v)}function x(e,t,i){if("word"==e){var n=t.current();return i.context&&i.context.tagName!=n&&l.implicitlyClosed.hasOwnProperty(i.context.tagName)&&h(i),i.context&&i.context.tagName==n||!1===l.matchClosing?(o="tag",y):(o="tag error",b)}return l.allowMissingTagName&&"endTag"==e?(o="tag bracket",y(e,t,i)):(o="error",b)}function y(e,t,i){return"endTag"!=e?(o="error",y):(h(i),g)}function b(e,t,i){return o="error",y(e,0,i)}function w(e,t,i){if("word"==e)return o="attribute",k;if("endTag"==e||"selfcloseTag"==e){var n=i.tagName,s=i.tagStart;return i.tagName=i.tagStart=null,"selfcloseTag"==e||l.autoSelfClosers.hasOwnProperty(n)?m(i,n):(m(i,n),i.context=new function(e,t,i){this.prev=e.context,this.tagName=t,this.indent=e.indented,this.startOfLine=i,(l.doNotIndent.hasOwnProperty(t)||e.context&&e.context.noIndent)&&(this.noIndent=!0)}(i,n,s==i.indented)),g}return o="error",w}function k(e,t,i){return"equals"==e?_:(l.allowMissing||(o="error"),w(e,0,i))}function _(e,t,i){return"string"==e?C:"word"==e&&l.allowUnquoted?(o="string",w):(o="error",w(e,0,i))}function C(e,t,i){return"string"==e?C:w(e,0,i)}return u.isInText=!0,{startState:function(e){var t={tokenize:u,state:g,indented:e||0,tagName:null,tagStart:null,context:null};return null!=e&&(t.baseIndent=e),t},token:function(e,t){if(!t.tagName&&e.sol()&&(t.indented=e.indentation()),e.eatSpace())return null;a=null;var i=t.tokenize(e,t);return(i||a)&&"comment"!=i&&(o=null,t.state=t.state(a||i,e,t),o&&(i="error"==o?i+" error":o)),i},indent:function(t,i,n){var s=t.context;if(t.tokenize.isInAttribute)return t.tagStart==t.indented?t.stringStartCol+1:t.indented+r;if(s&&s.noIndent)return e.Pass;if(t.tokenize!=p&&t.tokenize!=u)return n?n.match(/^(\s*)/)[0].length:0;if(t.tagName)return!1!==l.multilineTagIndentPastTag?t.tagStart+t.tagName.length+2:t.tagStart+r*(l.multilineTagIndentFactor||1);if(l.alignCDATA&&/<!\[CDATA\[/.test(i))return 0;var a=i&&/^<(\/)?([\w_:\.-]*)/.exec(i);if(a&&a[1])for(;s;){if(s.tagName==a[2]){s=s.prev;break}if(!l.implicitlyClosed.hasOwnProperty(s.tagName))break;s=s.prev}else if(a)for(;s;){var o=l.contextGrabbers[s.tagName];if(!o||!o.hasOwnProperty(a[2]))break;s=s.prev}for(;s&&s.prev&&!s.startOfLine;)s=s.prev;return s?s.indent+r:t.baseIndent||0},electricInput:/<\/[\s\w:]+>$/,blockCommentStart:"\x3c!--",blockCommentEnd:"--\x3e",configuration:l.htmlMode?"html":"xml",helperType:l.htmlMode?"html":"xml",skipAttribute:function(e){e.state==_&&(e.state=w)}}}),e.defineMIME("text/xml","xml"),e.defineMIME("application/xml","xml"),e.mimeModes.hasOwnProperty("text/html")||e.defineMIME("text/html",{name:"xml",htmlMode:!0})})(i(4))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,i){"use strict";(function(e){t.a={data:function(){return{locale:null}},computed:{locales:function(){return e.map(Statamic.locales,function(e,t){return{text:e.name,value:t}})}},ready:function(){this.locale=this.getInitialLocale()},methods:{getInitialLocale:function(){var e=Object.keys(Statamic.locales)[0];if(1===Object.keys(Statamic.locales).length)return e;var t=this.getLocaleLocalStorageKey();return t&&localStorage.getItem(t)||e},getLocaleLocalStorageKey:function(){return"statamic.locale"},onLocaleChanged:function(){},bindLocaleWatcher:function(){var e=this;this.$watch("locale",function(t){e.onLocaleChanged();var i=e.getLocaleLocalStorageKey();i&&localStorage.setItem(i,t)})}}}}).call(t,i(1))},function(e,t,i){"use strict";t.a={data:function(){return{showDrafts:!0}},computed:{draftOptions:function(){return[{value:!0,text:translate("cp.show_drafts")},{value:!1,text:translate("cp.hide_drafts")}]}},ready:function(){this.showDrafts=this.getInitialShowDrafts()},methods:{getInitialShowDrafts:function(){var e=this.getShowDraftsLocalStorageKey();return!e||"false"!==localStorage.getItem(e)},getShowDraftsLocalStorageKey:function(){return"statamic.drafts"},onShowDraftsChanged:function(){},bindShowDraftsWatcher:function(){var e=this;this.$watch("showDrafts",function(t){e.onShowDraftsChanged();var i=e.getShowDraftsLocalStorageKey();i&&localStorage.setItem(i,t)})}}}},function(e,t,i){var n,s,a={};n=i(240),s=i(241),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";t.a={data:function(){return{draggingFile:!1}},methods:{dragOver:function(){this.$root.draggingNonFile||(this.draggingFile=!0)},dragStop:function(){this.draggingFile=!1}}}},function(e,t,i){"use strict";t.a={props:["container","assets","folder","subfolders","loading","selectedAssets","restrictNavigation","isSearching"],computed:{hasResults:function(){return this.assets.length||this.subfolders.length},hasParent:function(){return!!this.folder&&null!==this.folder.parent_path}},methods:{selectFolder:function(e){this.$emit("folder-selected",e)},selectAsset:function(e){this.can("assets:"+this.container+":edit")&&this.$emit("asset-selected",e)},deselectAsset:function(e){this.$emit("asset-deselected",e)},editAsset:function(e){this.$emit("asset-editing",e)},deleteAsset:function(e){this.$emit("asset-deselected",e),this.$emit("asset-deleting",e)},assetDoubleclicked:function(e){this.$emit("asset-doubleclicked")},editFolder:function(e){this.$emit("folder-editing",e)},deleteFolder:function(e){var t=this,i=cp_url("assets/folders/delete");swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_folder"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.$http.delete(i,{container:t.container,folders:e}).success(function(i){t.$emit("folder-deleted",e),t.saving=!1})})},assetDragStart:function(e){this.selectAsset(e),this.draggingAssets=!0}}}},function(e,t,i){"use strict";(function(e){t.a={props:["asset","selectedAssets"],computed:{isSelected:function(){return e.contains(this.selectedAssets,this.asset.id)},canShowSvg:function(){return"svg"===this.asset.extension&&!this.asset.url.includes(":")},svgBackgroundStyle:function(){return'background-image: url("'+this.asset.url+'")'}},methods:{toggle:function(){this.isSelected?this.deselect():this.select()},select:function(){this.$emit("selected",this.asset.id)},deselect:function(){this.$emit("deselected",this.asset.id)},editAsset:function(){this.$emit("editing",this.asset.id)},deleteAsset:function(){this.$emit("deleting",this.asset.id)},assetDragStart:function(e){e.dataTransfer.setData("asset",this.asset.id),e.dataTransfer.effectAllowed="move",this.$emit("assetdragstart",this.asset.id)},doubleClicked:function(){"assets"===document.location.pathname.split("/")[2]?this.editAsset():(this.select(),this.$emit("doubleclicked",this.asset.id))}}}}).call(t,i(1))},function(e,t,i){"use strict";t.a={props:["folder"],methods:{selectFolder:function(){this.$emit("selected",this.folder.path)},editFolder:function(){this.$emit("editing",this.folder.path),this.showActionsDropdown=!1},deleteFolder:function(){this.$emit("deleting",this.folder.path),this.showActionsDropdown=!1},drop:function(e){this.$emit("dropped-on-folder",this.folder.path,e)}}}},function(e,t,i){"use strict";var n=i(14);i.n(n);t.a={mixins:[n.mixin],data:function(){return{showActionsDropdown:!1}},events:{"close-dropdown":function(e){this!=e&&(this.showActionsDropdown=!1)}},methods:{toggleActions:function(){this.$emit("open-dropdown",this),this.showActionsDropdown=!this.showActionsDropdown},away:function(){this.showActionsDropdown=!1}}}},function(e,t,i){var n,s,a={};n=i(265),s=i(269),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var n,s,a={};n=i(270),s=i(297),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(function(e){var i=Object.keys(Statamic.locales)[0],n=(Statamic.Publish&&Statamic.Publish.locale||i)===i;t.a={props:["field","data","config","autofocus","env"],computed:{isVisible:function(){return!this.$parent.hiddenFields.includes(this.field.name)},isReadOnly:function(){return!n&&!this.isLocalizable},hasError:function(){return e.has(this.$parent.errors,"fields."+this.field.name)},classes:function(){return["form-group",this.fieldtypeClass,tailwind_width_class(this.field.width),this.config.classes||"",{"has-error":this.hasError}]},fieldtypeClass:function(){return this.field.type+"-fieldtype"}},watch:{isVisible:function(e){e&&window.dispatchEvent(new Event("resize"))}}}}).call(t,i(1))},function(e,t,i){var n,s,a={};i(307),n=i(308),s=i(309),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var n,s,a={};n=i(310),s=i(311),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var n,s,a={};n=i(350),s=i(351),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){var n,s,a={};n=i(352),s=i(353),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){e.exports={template:i(364),props:["username","status"],methods:{sendResetEmail:function(){var e=translate("cp.password_reset_email_not_sent");this.$http.get(cp_url("users/"+this.username+"/send-reset-email")).success(function(t){t.success?this.$dispatch("setFlashSuccess",translate("cp.email_sent")):this.$dispatch("setFlashError",e)}).error(function(t){this.$dispatch("setFlashError",e)})},copyResetLink:function(){var e=translate("cp.copy_password_reset_link_failed");this.$http.get(cp_url("users/"+this.username+"/reset-url")).success(function(t){t.success?prompt("",t.url):this.$dispatch("setFlashError",e)}).error(function(t){this.$dispatch("setFlashError",e)})}}}},function(e,t,i){var n,s,a={};n=i(483),s=i(512),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(e.exports={}).forEach=function(e,t){for(var i=0;i<e.length;i++){var n=t(e[i]);if(n)return n}}},function(e,t,i){"use strict";var n=e.exports={};n.isIE=function(e){return(-1!==(t=navigator.userAgent.toLowerCase()).indexOf("msie")||-1!==t.indexOf("trident")||-1!==t.indexOf(" edge/"))&&(!e||e===function(){var e=3,t=document.createElement("div"),i=t.getElementsByTagName("i");do{t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e"}while(i[0]);return e>4?e:void 0}());var t},n.isLegacyOpera=function(){return!!window.opera}},function(e,t,i){var n,s,a={};n=i(497),s=i(498),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";(function(e){var n=i(172),s=i.n(n);t.a={components:{AssetEditor:i(160)},props:{asset:Object},data:function(){return{editing:!1}},computed:{isImage:function(){return this.asset.is_image},canShowSvg:function(){return"svg"===this.asset.extension&&!this.asset.url.includes(":")},thumbnail:function(){return this.asset.thumbnail},toenail:function(){return this.asset.toenail},label:function(){return this.asset.title||this.asset.basename}},methods:{edit:function(){this.editing=!0},remove:function(){this.$emit("removed",this.asset)},makeZoomable:function(){var t=e(this.$el).find("a.zoom")[0];t&&this.isImage&&new s.a(t,{closeOnScroll:!0,captionAttribute:"title"})},closeEditor:function(){this.editing=!1},assetSaved:function(e){this.asset=e,this.closeEditor()}},ready:function(){this.makeZoomable()}}}).call(t,i(2))},,function(e,t,i){"use strict";(function(e){t.a={data:function(){return{blank:{},sortableOptions:{},autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,accordionMode:!0}},ready:function(){this.accordionMode=this.getAccordionModeFromStorage(),this.accordionMode&&this.collapseAll()},methods:{setConfig:function(t){return e.findWhere(this.config.sets,{name:t})},deleteSet:function(e){this.data.splice(e,1)},expandAll:function(){e.each(this.$refs.set,function(e){"function"==typeof e.expand&&e.expand(!0)}),this.setAccordionMode(!1)},collapseAll:function(){e.each(this.$refs.set,function(e){"function"==typeof e.collapse&&e.collapse(!0)}),this.setAccordionMode(!0)},getAccordionModeFromStorage:function(){var e=this.accordionMode,t=localStorage.getItem("statamic.replicator.accordion");return"true"===t?e=!0:"false"===t&&(e=!1),e},setAccordionMode:function(e){this.accordionMode=e,localStorage.setItem("statamic.replicator.accordion",e)}}}}).call(t,i(1))},function(e,t,i){"use strict";(function(e,i){t.a={props:["data","index","config","parentName","sets"],data:function(){return{collapsedPreview:null}},computed:{display:function(){return this.config.display||this.data.type},instructions:function(){return this.config.instructions},hasMultipleFields:function(){return this.config.fields.length>1},isHidden:function(){return!0===this.data["#hidden"]}},ready:function(){this.collapsedPreview=this.getCollapsedPreview()},watch:{data:{deep:!0,handler:function(){this.collapsedPreview=this.getCollapsedPreview()}}},methods:{delete:function(){var e=this;swal({type:"warning",title:translate("cp.are_you_sure"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){e.$emit("deleted",e.index)})},toggle:function(){this.isHidden?this.expand():this.collapse()},expand:function(t){e.set(this.data,"#hidden",!1),this.$emit("expanded",this,t)},collapse:function(){e.set(this.data,"#hidden",!0)},getCollapsedPreview:function(){return i.map(this.$children,function(e){if(!1!==e.config.replicator_preview)return void 0!==e.getReplicatorPreviewText?e.getReplicatorPreviewText():JSON.stringify(e.data)}).filter(function(e){return null!==e&&""!==e&&void 0!==e}).join(" / ")},focus:function(){var e=this.$children[0];"function"==typeof e.focus&&e.focus()},fieldClasses:function(e){return["form-group p-2 m-0 "+e.type+"-fieldtype",tailwind_width_class(e.width)]},componentName:function(e){return e.replace(".","-")+"-fieldtype"}}}}).call(t,i(3),i(1))},,function(e,t,i){"use strict";t.a={data:function(){return{selectedAssets:[],selectorViewMode:null,showAssetSelector:!1}},computed:{assetsEnabled:function(){return this.getFieldtypeConfig()&&void 0!==this.getFieldtypeConfig().container},container:function(){return this.getFieldtypeConfig().container},folder:function(){return this.getFieldtypeConfig().folder||"/"},restrictAssetNavigation:function(){return this.getFieldtypeConfig().restrict_assets||!1}},ready:function(){this.selectorViewMode=Cookies.get("statamic.assets.listing_view_mode")||"grid"},methods:{addAsset:function(){this.showAssetSelector=!0},closeAssetSelector:function(){this.showAssetSelector=!1}}}},,,function(e,t,i){(function(e){"use strict";var t={script:[["lang",/(javascript|babel)/i,"javascript"],["type",/^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i,"javascript"],["type",/./,"text/plain"],[null,null,"javascript"]],style:[["lang",/^css$/i,"css"],["type",/^(text\/)?(x-)?(stylesheet|css)$/i,"css"],["type",/./,"text/plain"],[null,null,"css"]]};var i={};function n(e,t){var n=e.match(function(e){var t=i[e];return t||(i[e]=new RegExp("\\s+"+e+"\\s*=\\s*('|\")?([^'\"]+)('|\")?\\s*"))}(t));return n?/^\s*(.*?)\s*$/.exec(n[2])[1]:""}function s(e,t){return new RegExp((t?"^":"")+"</s*"+e+"s*>","i")}function a(e,t){for(var i in e)for(var n=t[i]||(t[i]=[]),s=e[i],a=s.length-1;a>=0;a--)n.unshift(s[a])}e.defineMode("htmlmixed",function(i,o){var r=e.getMode(i,{name:"xml",htmlMode:!0,multilineTagIndentFactor:o.multilineTagIndentFactor,multilineTagIndentPastTag:o.multilineTagIndentPastTag}),l={},c=o&&o.tags,d=o&&o.scriptTypes;if(a(t,l),c&&a(c,l),d)for(var u=d.length-1;u>=0;u--)l.script.unshift(["type",d[u].matches,d[u].mode]);function p(t,a){var o,c=r.token(t,a.htmlState),d=/\btag\b/.test(c);if(d&&!/[<>\s\/]/.test(t.current())&&(o=a.htmlState.tagName&&a.htmlState.tagName.toLowerCase())&&l.hasOwnProperty(o))a.inTag=o+" ";else if(a.inTag&&d&&/>$/.test(t.current())){var u=/^([\S]+) (.*)/.exec(a.inTag);a.inTag=null;var f=">"==t.current()&&function(e,t){for(var i=0;i<e.length;i++){var s=e[i];if(!s[0]||s[1].test(n(t,s[0])))return s[2]}}(l[u[1]],u[2]),h=e.getMode(i,f),m=s(u[1],!0),g=s(u[1],!1);a.token=function(e,t){return e.match(m,!1)?(t.token=p,t.localState=t.localMode=null,null):function(e,t,i){var n=e.current(),s=n.search(t);return s>-1?e.backUp(n.length-s):n.match(/<\/?$/)&&(e.backUp(n.length),e.match(t,!1)||e.match(n)),i}(e,g,t.localMode.token(e,t.localState))},a.localMode=h,a.localState=e.startState(h,r.indent(a.htmlState,""))}else a.inTag&&(a.inTag+=t.current(),t.eol()&&(a.inTag+=" "));return c}return{startState:function(){return{token:p,inTag:null,localMode:null,localState:null,htmlState:e.startState(r)}},copyState:function(t){var i;return t.localState&&(i=e.copyState(t.localMode,t.localState)),{token:t.token,inTag:t.inTag,localMode:t.localMode,localState:i,htmlState:e.copyState(r,t.htmlState)}},token:function(e,t){return t.token(e,t)},indent:function(t,i,n){return!t.localMode||/^\s*<\//.test(i)?r.indent(t.htmlState,i):t.localMode.indent?t.localMode.indent(t.localState,i,n):e.Pass},innerMode:function(e){return{state:e.localState||e.htmlState,mode:e.localMode||r}}}},"xml","javascript","css"),e.defineMIME("text/html","htmlmixed")})(i(4),i(20),i(180),i(181))},function(e,t,i){(function(e){"use strict";e.defineMode("javascript",function(t,i){var n,s,a=t.indentUnit,o=i.statementIndent,r=i.jsonld,l=i.json||r,c=i.typescript,d=i.wordCharacters||/[\w$\xa1-\uffff]/,u=function(){function e(e){return{type:e,style:"keyword"}}var t=e("keyword a"),i=e("keyword b"),n=e("keyword c"),s=e("keyword d"),a=e("operator"),o={type:"atom",style:"atom"};return{if:e("if"),while:t,with:t,else:i,do:i,try:i,finally:i,return:s,break:s,continue:s,new:e("new"),delete:n,void:n,throw:n,debugger:e("debugger"),var:e("var"),const:e("var"),let:e("var"),function:e("function"),catch:e("catch"),for:e("for"),switch:e("switch"),case:e("case"),default:e("default"),in:a,typeof:a,instanceof:a,true:o,false:o,null:o,undefined:o,NaN:o,Infinity:o,this:e("this"),class:e("class"),super:e("atom"),yield:n,export:e("export"),import:e("import"),extends:n,await:n}}(),p=/[+\-*&%=<>!?|~^@]/,f=/^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;function h(e,t,i){return n=e,s=i,t}function m(e,t){var i,n=e.next();if('"'==n||"'"==n)return t.tokenize=(i=n,function(e,t){var n,s=!1;if(r&&"@"==e.peek()&&e.match(f))return t.tokenize=m,h("jsonld-keyword","meta");for(;null!=(n=e.next())&&(n!=i||s);)s=!s&&"\\"==n;return s||(t.tokenize=m),h("string","string")}),t.tokenize(e,t);if("."==n&&e.match(/^\d+(?:[eE][+\-]?\d+)?/))return h("number","number");if("."==n&&e.match(".."))return h("spread","meta");if(/[\[\]{}\(\),;\:\.]/.test(n))return h(n);if("="==n&&e.eat(">"))return h("=>","operator");if("0"==n&&e.eat(/x/i))return e.eatWhile(/[\da-f]/i),h("number","number");if("0"==n&&e.eat(/o/i))return e.eatWhile(/[0-7]/i),h("number","number");if("0"==n&&e.eat(/b/i))return e.eatWhile(/[01]/i),h("number","number");if(/\d/.test(n))return e.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/),h("number","number");if("/"==n)return e.eat("*")?(t.tokenize=g,g(e,t)):e.eat("/")?(e.skipToEnd(),h("comment","comment")):ze(e,t,1)?(function(e){for(var t,i=!1,n=!1;null!=(t=e.next());){if(!i){if("/"==t&&!n)return;"["==t?n=!0:n&&"]"==t&&(n=!1)}i=!i&&"\\"==t}}(e),e.match(/^\b(([gimyu])(?![gimyu]*\2))+\b/),h("regexp","string-2")):(e.eat("="),h("operator","operator",e.current()));if("`"==n)return t.tokenize=v,v(e,t);if("#"==n)return e.skipToEnd(),h("error","error");if(p.test(n))return">"==n&&t.lexical&&">"==t.lexical.type||(e.eat("=")?"!"!=n&&"="!=n||e.eat("="):/[<>*+\-]/.test(n)&&(e.eat(n),">"==n&&e.eat(n))),h("operator","operator",e.current());if(d.test(n)){e.eatWhile(d);var s=e.current();if("."!=t.lastType){if(u.propertyIsEnumerable(s)){var a=u[s];return h(a.type,a.style,s)}if("async"==s&&e.match(/^(\s|\/\*.*?\*\/)*[\[\(\w]/,!1))return h("async","keyword",s)}return h("variable","variable",s)}}function g(e,t){for(var i,n=!1;i=e.next();){if("/"==i&&n){t.tokenize=m;break}n="*"==i}return h("comment","comment")}function v(e,t){for(var i,n=!1;null!=(i=e.next());){if(!n&&("`"==i||"$"==i&&e.eat("{"))){t.tokenize=m;break}n=!n&&"\\"==i}return h("quasi","string-2",e.current())}var x="([{}])";function y(e,t){t.fatArrowAt&&(t.fatArrowAt=null);var i=e.string.indexOf("=>",e.start);if(!(i<0)){if(c){var n=/:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(e.string.slice(e.start,i));n&&(i=n.index)}for(var s=0,a=!1,o=i-1;o>=0;--o){var r=e.string.charAt(o),l=x.indexOf(r);if(l>=0&&l<3){if(!s){++o;break}if(0==--s){"("==r&&(a=!0);break}}else if(l>=3&&l<6)++s;else if(d.test(r))a=!0;else{if(/["'\/]/.test(r))return;if(a&&!s){++o;break}}}a&&!s&&(t.fatArrowAt=o)}}var b={atom:!0,number:!0,variable:!0,string:!0,regexp:!0,this:!0,"jsonld-keyword":!0};function w(e,t,i,n,s,a){this.indented=e,this.column=t,this.type=i,this.prev=s,this.info=a,null!=n&&(this.align=n)}function k(e,t){for(var i=e.localVars;i;i=i.next)if(i.name==t)return!0;for(var n=e.context;n;n=n.prev)for(i=n.vars;i;i=i.next)if(i.name==t)return!0}var _={state:null,column:null,marked:null,cc:null};function C(){for(var e=arguments.length-1;e>=0;e--)_.cc.push(arguments[e])}function S(){return C.apply(null,arguments),!0}function A(e){function t(t){for(var i=t;i;i=i.next)if(i.name==e)return!0;return!1}var n=_.state;if(_.marked="def",n.context){if(t(n.localVars))return;n.localVars={name:e,next:n.localVars}}else{if(t(n.globalVars))return;i.globalVars&&(n.globalVars={name:e,next:n.globalVars})}}function M(e){return"public"==e||"private"==e||"protected"==e||"abstract"==e||"readonly"==e}var E={name:"this",next:{name:"arguments"}};function F(){_.state.context={prev:_.state.context,vars:_.state.localVars},_.state.localVars=E}function T(){_.state.localVars=_.state.context.vars,_.state.context=_.state.context.prev}function O(e,t){var i=function(){var i=_.state,n=i.indented;if("stat"==i.lexical.type)n=i.lexical.indented;else for(var s=i.lexical;s&&")"==s.type&&s.align;s=s.prev)n=s.indented;i.lexical=new w(n,_.stream.column(),e,null,i.lexical,t)};return i.lex=!0,i}function L(){var e=_.state;e.lexical.prev&&(")"==e.lexical.type&&(e.indented=e.lexical.indented),e.lexical=e.lexical.prev)}function P(e){return function t(i){return i==e?S():";"==e?C():S(t)}}function $(e,t){return"var"==e?S(O("vardef",t.length),fe,P(";"),L):"keyword a"==e?S(O("form"),R,$,L):"keyword b"==e?S(O("form"),$,L):"keyword d"==e?_.stream.match(/^\s*$/,!1)?S():S(O("stat"),N,P(";"),L):"debugger"==e?S(P(";")):"{"==e?S(O("}"),te,L):";"==e?S():"if"==e?("else"==_.state.lexical.info&&_.state.cc[_.state.cc.length-1]==L&&_.state.cc.pop()(),S(O("form"),R,$,L,xe)):"function"==e?S(Ce):"for"==e?S(O("form"),ye,$,L):"class"==e||c&&"interface"==t?(_.marked="keyword",S(O("form"),Me,L)):"variable"==e?c&&"declare"==t?(_.marked="keyword",S($)):c&&("module"==t||"enum"==t||"type"==t)&&_.stream.match(/^\s*\w/,!1)?(_.marked="keyword","enum"==t?S(Ne):"type"==t?S(ae,P("operator"),ae,P(";")):S(O("form"),he,P("{"),O("}"),te,L,L)):c&&"namespace"==t?(_.marked="keyword",S(O("form"),D,te,L)):c&&"abstract"==t?(_.marked="keyword",S($)):S(O("stat"),K):"switch"==e?S(O("form"),R,P("{"),O("}","switch"),te,L,L):"case"==e?S(D,P(":")):"default"==e?S(P(":")):"catch"==e?S(O("form"),F,P("("),Se,P(")"),$,L,T):"export"==e?S(O("stat"),Oe,L):"import"==e?S(O("stat"),Pe,L):"async"==e?S($):"@"==t?S(D,$):C(O("stat"),D,P(";"),L)}function D(e,t){return B(e,t,!1)}function j(e,t){return B(e,t,!0)}function R(e){return"("!=e?C():S(O(")"),D,P(")"),L)}function B(e,t,i){if(_.state.fatArrowAt==_.stream.start){var n=i?W:V;if("("==e)return S(F,O(")"),X(Se,")"),L,P("=>"),n,T);if("variable"==e)return C(F,he,P("=>"),n,T)}var s=i?z:I;return b.hasOwnProperty(e)?S(s):"function"==e?S(Ce,s):"class"==e||c&&"interface"==t?(_.marked="keyword",S(O("form"),Ae,L)):"keyword c"==e||"async"==e?S(i?j:D):"("==e?S(O(")"),N,P(")"),L,s):"operator"==e||"spread"==e?S(i?j:D):"["==e?S(O("]"),Be,L,s):"{"==e?ee(Z,"}",null,s):"quasi"==e?C(q,s):"new"==e?S(function(e){return function(t){return"."==t?S(e?G:U):"variable"==t&&c?S(de,e?z:I):C(e?j:D)}}(i)):"import"==e?S(D):S()}function N(e){return e.match(/[;\}\)\],]/)?C():C(D)}function I(e,t){return","==e?S(D):z(e,t,!1)}function z(e,t,i){var n=0==i?I:z,s=0==i?D:j;return"=>"==e?S(F,i?W:V,T):"operator"==e?/\+\+|--/.test(t)||c&&"!"==t?S(n):c&&"<"==t&&_.stream.match(/^([^>]|<.*?>)*>\s*\(/,!1)?S(O(">"),X(ae,">"),L,n):"?"==t?S(D,P(":"),s):S(s):"quasi"==e?C(q,n):";"!=e?"("==e?ee(j,")","call",n):"."==e?S(Y,n):"["==e?S(O("]"),N,P("]"),L,n):c&&"as"==t?(_.marked="keyword",S(ae,n)):"regexp"==e?(_.state.lastType=_.marked="operator",_.stream.backUp(_.stream.pos-_.stream.start-1),S(s)):void 0:void 0}function q(e,t){return"quasi"!=e?C():"${"!=t.slice(t.length-2)?S(q):S(D,H)}function H(e){if("}"==e)return _.marked="string-2",_.state.tokenize=v,S(q)}function V(e){return y(_.stream,_.state),C("{"==e?$:D)}function W(e){return y(_.stream,_.state),C("{"==e?$:j)}function U(e,t){if("target"==t)return _.marked="keyword",S(I)}function G(e,t){if("target"==t)return _.marked="keyword",S(z)}function K(e){return":"==e?S(L,$):C(I,P(";"),L)}function Y(e){if("variable"==e)return _.marked="property",S()}function Z(e,t){if("async"==e)return _.marked="property",S(Z);if("variable"==e||"keyword"==_.style){return _.marked="property","get"==t||"set"==t?S(J):(c&&_.state.fatArrowAt==_.stream.start&&(i=_.stream.match(/^\s*:\s*/,!1))&&(_.state.fatArrowAt=_.stream.pos+i[0].length),S(Q));var i}else{if("number"==e||"string"==e)return _.marked=r?"property":_.style+" property",S(Q);if("jsonld-keyword"==e)return S(Q);if(c&&M(t))return _.marked="keyword",S(Z);if("["==e)return S(D,ie,P("]"),Q);if("spread"==e)return S(j,Q);if("*"==t)return _.marked="keyword",S(Z);if(":"==e)return C(Q)}}function J(e){return"variable"!=e?C(Q):(_.marked="property",S(Ce))}function Q(e){return":"==e?S(j):"("==e?C(Ce):void 0}function X(e,t,i){function n(s,a){if(i?i.indexOf(s)>-1:","==s){var o=_.state.lexical;return"call"==o.info&&(o.pos=(o.pos||0)+1),S(function(i,n){return i==t||n==t?C():C(e)},n)}return s==t||a==t?S():S(P(t))}return function(i,s){return i==t||s==t?S():C(e,n)}}function ee(e,t,i){for(var n=3;n<arguments.length;n++)_.cc.push(arguments[n]);return S(O(t,i),X(e,t),L)}function te(e){return"}"==e?S():C($,te)}function ie(e,t){if(c){if(":"==e)return S(ae);if("?"==t)return S(ie)}}function ne(e){if(c&&":"==e)return _.stream.match(/^\s*\w+\s+is\b/,!1)?S(D,se,ae):S(ae)}function se(e,t){if("is"==t)return _.marked="keyword",S()}function ae(e,t){return"keyof"==t||"typeof"==t?(_.marked="keyword",S("keyof"==t?ae:j)):"variable"==e||"void"==t?(_.marked="type",S(ce)):"string"==e||"number"==e||"atom"==e?S(ce):"["==e?S(O("]"),X(ae,"]",","),L,ce):"{"==e?S(O("}"),X(re,"}",",;"),L,ce):"("==e?S(X(le,")"),oe):"<"==e?S(X(ae,">"),ae):void 0}function oe(e){if("=>"==e)return S(ae)}function re(e,t){return"variable"==e||"keyword"==_.style?(_.marked="property",S(re)):"?"==t?S(re):":"==e?S(ae):"["==e?S(D,ie,P("]"),re):void 0}function le(e,t){return"variable"==e&&_.stream.match(/^\s*[?:]/,!1)||"?"==t?S(le):":"==e?S(ae):C(ae)}function ce(e,t){return"<"==t?S(O(">"),X(ae,">"),L,ce):"|"==t||"."==e||"&"==t?S(ae):"["==e?S(P("]"),ce):"extends"==t||"implements"==t?(_.marked="keyword",S(ae)):void 0}function de(e,t){if("<"==t)return S(O(">"),X(ae,">"),L,ce)}function ue(){return C(ae,pe)}function pe(e,t){if("="==t)return S(ae)}function fe(e,t){return"enum"==t?(_.marked="keyword",S(Ne)):C(he,ie,ge,ve)}function he(e,t){return c&&M(t)?(_.marked="keyword",S(he)):"variable"==e?(A(t),S()):"spread"==e?S(he):"["==e?ee(he,"]"):"{"==e?ee(me,"}"):void 0}function me(e,t){return"variable"!=e||_.stream.match(/^\s*:/,!1)?("variable"==e&&(_.marked="property"),"spread"==e?S(he):"}"==e?C():S(P(":"),he,ge)):(A(t),S(ge))}function ge(e,t){if("="==t)return S(j)}function ve(e){if(","==e)return S(fe)}function xe(e,t){if("keyword b"==e&&"else"==t)return S(O("form","else"),$,L)}function ye(e,t){return"await"==t?S(ye):"("==e?S(O(")"),be,P(")"),L):void 0}function be(e){return"var"==e?S(fe,P(";"),ke):";"==e?S(ke):"variable"==e?S(we):C(D,P(";"),ke)}function we(e,t){return"in"==t||"of"==t?(_.marked="keyword",S(D)):S(I,ke)}function ke(e,t){return";"==e?S(_e):"in"==t||"of"==t?(_.marked="keyword",S(D)):C(D,P(";"),_e)}function _e(e){")"!=e&&S(D)}function Ce(e,t){return"*"==t?(_.marked="keyword",S(Ce)):"variable"==e?(A(t),S(Ce)):"("==e?S(F,O(")"),X(Se,")"),L,ne,$,T):c&&"<"==t?S(O(">"),X(ue,">"),L,Ce):void 0}function Se(e,t){return"@"==t&&S(D,Se),"spread"==e?S(Se):c&&M(t)?(_.marked="keyword",S(Se)):C(he,ie,ge)}function Ae(e,t){return"variable"==e?Me(e,t):Ee(e,t)}function Me(e,t){if("variable"==e)return A(t),S(Ee)}function Ee(e,t){return"<"==t?S(O(">"),X(ue,">"),L,Ee):"extends"==t||"implements"==t||c&&","==e?("implements"==t&&(_.marked="keyword"),S(c?ae:D,Ee)):"{"==e?S(O("}"),Fe,L):void 0}function Fe(e,t){return"async"==e||"variable"==e&&("static"==t||"get"==t||"set"==t||c&&M(t))&&_.stream.match(/^\s+[\w$\xa1-\uffff]/,!1)?(_.marked="keyword",S(Fe)):"variable"==e||"keyword"==_.style?(_.marked="property",S(c?Te:Ce,Fe)):"["==e?S(D,ie,P("]"),c?Te:Ce,Fe):"*"==t?(_.marked="keyword",S(Fe)):";"==e?S(Fe):"}"==e?S():"@"==t?S(D,Fe):void 0}function Te(e,t){return"?"==t?S(Te):":"==e?S(ae,ge):"="==t?S(j):C(Ce)}function Oe(e,t){return"*"==t?(_.marked="keyword",S(Re,P(";"))):"default"==t?(_.marked="keyword",S(D,P(";"))):"{"==e?S(X(Le,"}"),Re,P(";")):C($)}function Le(e,t){return"as"==t?(_.marked="keyword",S(P("variable"))):"variable"==e?C(j,Le):void 0}function Pe(e){return"string"==e?S():"("==e?C(D):C($e,De,Re)}function $e(e,t){return"{"==e?ee($e,"}"):("variable"==e&&A(t),"*"==t&&(_.marked="keyword"),S(je))}function De(e){if(","==e)return S($e,De)}function je(e,t){if("as"==t)return _.marked="keyword",S($e)}function Re(e,t){if("from"==t)return _.marked="keyword",S(D)}function Be(e){return"]"==e?S():C(X(j,"]"))}function Ne(){return C(O("form"),he,P("{"),O("}"),X(Ie,"}"),L,L)}function Ie(){return C(he,ge)}function ze(e,t,i){return t.tokenize==m&&/^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(t.lastType)||"quasi"==t.lastType&&/\{\s*$/.test(e.string.slice(0,e.pos-(i||0)))}return L.lex=!0,{startState:function(e){var t={tokenize:m,lastType:"sof",cc:[],lexical:new w((e||0)-a,0,"block",!1),localVars:i.localVars,context:i.localVars&&{vars:i.localVars},indented:e||0};return i.globalVars&&"object"==typeof i.globalVars&&(t.globalVars=i.globalVars),t},token:function(e,t){if(e.sol()&&(t.lexical.hasOwnProperty("align")||(t.lexical.align=!1),t.indented=e.indentation(),y(e,t)),t.tokenize!=g&&e.eatSpace())return null;var i=t.tokenize(e,t);return"comment"==n?i:(t.lastType="operator"!=n||"++"!=s&&"--"!=s?n:"incdec",function(e,t,i,n,s){var a=e.cc;for(_.state=e,_.stream=s,_.marked=null,_.cc=a,_.style=t,e.lexical.hasOwnProperty("align")||(e.lexical.align=!0);;)if((a.length?a.pop():l?D:$)(i,n)){for(;a.length&&a[a.length-1].lex;)a.pop()();return _.marked?_.marked:"variable"==i&&k(e,n)?"variable-2":t}}(t,i,n,s,e))},indent:function(t,n){if(t.tokenize==g)return e.Pass;if(t.tokenize!=m)return 0;var s,r=n&&n.charAt(0),l=t.lexical;if(!/^\s*else\b/.test(n))for(var c=t.cc.length-1;c>=0;--c){var d=t.cc[c];if(d==L)l=l.prev;else if(d!=xe)break}for(;("stat"==l.type||"form"==l.type)&&("}"==r||(s=t.cc[t.cc.length-1])&&(s==I||s==z)&&!/^[,\.=+\-*:?[\(]/.test(n));)l=l.prev;o&&")"==l.type&&"stat"==l.prev.type&&(l=l.prev);var u=l.type,f=r==u;return"vardef"==u?l.indented+("operator"==t.lastType||","==t.lastType?l.info+1:0):"form"==u&&"{"==r?l.indented:"form"==u?l.indented+a:"stat"==u?l.indented+(function(e,t){return"operator"==e.lastType||","==e.lastType||p.test(t.charAt(0))||/[,.]/.test(t.charAt(0))}(t,n)?o||a:0):"switch"!=l.info||f||0==i.doubleIndentSwitch?l.align?l.column+(f?0:1):l.indented+(f?0:a):l.indented+(/^(?:case|default)\b/.test(n)?a:2*a)},electricInput:/^\s*(?:case .*?:|default:|\{|\})$/,blockCommentStart:l?null:"/*",blockCommentEnd:l?null:"*/",blockCommentContinue:l?null:" * ",lineComment:l?null:"//",fold:"brace",closeBrackets:"()[]{}''\"\"``",helperType:l?"json":"javascript",jsonldMode:r,jsonMode:l,expressionAllowed:ze,skipExpression:function(e){var t=e.cc[e.cc.length-1];t!=D&&t!=j||e.cc.pop()}}}),e.registerHelper("wordChars","javascript",/[\w$]/),e.defineMIME("text/javascript","javascript"),e.defineMIME("text/ecmascript","javascript"),e.defineMIME("application/javascript","javascript"),e.defineMIME("application/x-javascript","javascript"),e.defineMIME("application/ecmascript","javascript"),e.defineMIME("application/json",{name:"javascript",json:!0}),e.defineMIME("application/x-json",{name:"javascript",json:!0}),e.defineMIME("application/ld+json",{name:"javascript",jsonld:!0}),e.defineMIME("text/typescript",{name:"javascript",typescript:!0}),e.defineMIME("application/typescript",{name:"javascript",typescript:!0})})(i(4))},function(e,t,i){(function(e){"use strict";function t(e){for(var t={},i=0;i<e.length;++i)t[e[i].toLowerCase()]=!0;return t}e.defineMode("css",function(t,i){var n=i.inline;i.propertyKeywords||(i=e.resolveMode("text/css"));var s,a,o=t.indentUnit,r=i.tokenHooks,l=i.documentTypes||{},c=i.mediaTypes||{},d=i.mediaFeatures||{},u=i.mediaValueKeywords||{},p=i.propertyKeywords||{},f=i.nonStandardPropertyKeywords||{},h=i.fontProperties||{},m=i.counterDescriptors||{},g=i.colorKeywords||{},v=i.valueKeywords||{},x=i.allowNested,y=i.lineComment,b=!0===i.supportsAtComponent;function w(e,t){return s=t,e}function k(e){return function(t,i){for(var n,s=!1;null!=(n=t.next());){if(n==e&&!s){")"==e&&t.backUp(1);break}s=!s&&"\\"==n}return(n==e||!s&&")"!=e)&&(i.tokenize=null),w("string","string")}}function _(e,t){return e.next(),e.match(/\s*[\"\')]/,!1)?t.tokenize=null:t.tokenize=k(")"),w(null,"(")}function C(e,t,i){this.type=e,this.indent=t,this.prev=i}function S(e,t,i,n){return e.context=new C(i,t.indentation()+(!1===n?0:o),e.context),i}function A(e){return e.context.prev&&(e.context=e.context.prev),e.context.type}function M(e,t,i){return T[i.context.type](e,t,i)}function E(e,t,i,n){for(var s=n||1;s>0;s--)i.context=i.context.prev;return M(e,t,i)}function F(e){var t=e.current().toLowerCase();a=v.hasOwnProperty(t)?"atom":g.hasOwnProperty(t)?"keyword":"variable"}var T={top:function(e,t,i){if("{"==e)return S(i,t,"block");if("}"==e&&i.context.prev)return A(i);if(b&&/@component/i.test(e))return S(i,t,"atComponentBlock");if(/^@(-moz-)?document$/i.test(e))return S(i,t,"documentTypes");if(/^@(media|supports|(-moz-)?document|import)$/i.test(e))return S(i,t,"atBlock");if(/^@(font-face|counter-style)/i.test(e))return i.stateArg=e,"restricted_atBlock_before";if(/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(e))return"keyframes";if(e&&"@"==e.charAt(0))return S(i,t,"at");if("hash"==e)a="builtin";else if("word"==e)a="tag";else{if("variable-definition"==e)return"maybeprop";if("interpolation"==e)return S(i,t,"interpolation");if(":"==e)return"pseudo";if(x&&"("==e)return S(i,t,"parens")}return i.context.type},block:function(e,t,i){if("word"==e){var n=t.current().toLowerCase();return p.hasOwnProperty(n)?(a="property","maybeprop"):f.hasOwnProperty(n)?(a="string-2","maybeprop"):x?(a=t.match(/^\s*:(?:\s|$)/,!1)?"property":"tag","block"):(a+=" error","maybeprop")}return"meta"==e?"block":x||"hash"!=e&&"qualifier"!=e?T.top(e,t,i):(a="error","block")},maybeprop:function(e,t,i){return":"==e?S(i,t,"prop"):M(e,t,i)},prop:function(e,t,i){if(";"==e)return A(i);if("{"==e&&x)return S(i,t,"propBlock");if("}"==e||"{"==e)return E(e,t,i);if("("==e)return S(i,t,"parens");if("hash"!=e||/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(t.current())){if("word"==e)F(t);else if("interpolation"==e)return S(i,t,"interpolation")}else a+=" error";return"prop"},propBlock:function(e,t,i){return"}"==e?A(i):"word"==e?(a="property","maybeprop"):i.context.type},parens:function(e,t,i){return"{"==e||"}"==e?E(e,t,i):")"==e?A(i):"("==e?S(i,t,"parens"):"interpolation"==e?S(i,t,"interpolation"):("word"==e&&F(t),"parens")},pseudo:function(e,t,i){return"meta"==e?"pseudo":"word"==e?(a="variable-3",i.context.type):M(e,t,i)},documentTypes:function(e,t,i){return"word"==e&&l.hasOwnProperty(t.current())?(a="tag",i.context.type):T.atBlock(e,t,i)},atBlock:function(e,t,i){if("("==e)return S(i,t,"atBlock_parens");if("}"==e||";"==e)return E(e,t,i);if("{"==e)return A(i)&&S(i,t,x?"block":"top");if("interpolation"==e)return S(i,t,"interpolation");if("word"==e){var n=t.current().toLowerCase();a="only"==n||"not"==n||"and"==n||"or"==n?"keyword":c.hasOwnProperty(n)?"attribute":d.hasOwnProperty(n)?"property":u.hasOwnProperty(n)?"keyword":p.hasOwnProperty(n)?"property":f.hasOwnProperty(n)?"string-2":v.hasOwnProperty(n)?"atom":g.hasOwnProperty(n)?"keyword":"error"}return i.context.type},atComponentBlock:function(e,t,i){return"}"==e?E(e,t,i):"{"==e?A(i)&&S(i,t,x?"block":"top",!1):("word"==e&&(a="error"),i.context.type)},atBlock_parens:function(e,t,i){return")"==e?A(i):"{"==e||"}"==e?E(e,t,i,2):T.atBlock(e,t,i)},restricted_atBlock_before:function(e,t,i){return"{"==e?S(i,t,"restricted_atBlock"):"word"==e&&"@counter-style"==i.stateArg?(a="variable","restricted_atBlock_before"):M(e,t,i)},restricted_atBlock:function(e,t,i){return"}"==e?(i.stateArg=null,A(i)):"word"==e?(a="@font-face"==i.stateArg&&!h.hasOwnProperty(t.current().toLowerCase())||"@counter-style"==i.stateArg&&!m.hasOwnProperty(t.current().toLowerCase())?"error":"property","maybeprop"):"restricted_atBlock"},keyframes:function(e,t,i){return"word"==e?(a="variable","keyframes"):"{"==e?S(i,t,"top"):M(e,t,i)},at:function(e,t,i){return";"==e?A(i):"{"==e||"}"==e?E(e,t,i):("word"==e?a="tag":"hash"==e&&(a="builtin"),"at")},interpolation:function(e,t,i){return"}"==e?A(i):"{"==e||";"==e?E(e,t,i):("word"==e?a="variable":"variable"!=e&&"("!=e&&")"!=e&&(a="error"),"interpolation")}};return{startState:function(e){return{tokenize:null,state:n?"block":"top",stateArg:null,context:new C(n?"block":"top",e||0,null)}},token:function(e,t){if(!t.tokenize&&e.eatSpace())return null;var i=(t.tokenize||function(e,t){var i=e.next();if(r[i]){var n=r[i](e,t);if(!1!==n)return n}return"@"==i?(e.eatWhile(/[\w\\\-]/),w("def",e.current())):"="==i||("~"==i||"|"==i)&&e.eat("=")?w(null,"compare"):'"'==i||"'"==i?(t.tokenize=k(i),t.tokenize(e,t)):"#"==i?(e.eatWhile(/[\w\\\-]/),w("atom","hash")):"!"==i?(e.match(/^\s*\w*/),w("keyword","important")):/\d/.test(i)||"."==i&&e.eat(/\d/)?(e.eatWhile(/[\w.%]/),w("number","unit")):"-"!==i?/[,+>*\/]/.test(i)?w(null,"select-op"):"."==i&&e.match(/^-?[_a-z][_a-z0-9-]*/i)?w("qualifier","qualifier"):/[:;{}\[\]\(\)]/.test(i)?w(null,i):("u"==i||"U"==i)&&e.match(/rl(-prefix)?\(/i)||("d"==i||"D"==i)&&e.match("omain(",!0,!0)||("r"==i||"R"==i)&&e.match("egexp(",!0,!0)?(e.backUp(1),t.tokenize=_,w("property","word")):/[\w\\\-]/.test(i)?(e.eatWhile(/[\w\\\-]/),w("property","word")):w(null,null):/[\d.]/.test(e.peek())?(e.eatWhile(/[\w.%]/),w("number","unit")):e.match(/^-[\w\\\-]+/)?(e.eatWhile(/[\w\\\-]/),e.match(/^\s*:/,!1)?w("variable-2","variable-definition"):w("variable-2","variable")):e.match(/^\w+-/)?w("meta","meta"):void 0})(e,t);return i&&"object"==typeof i&&(s=i[1],i=i[0]),a=i,"comment"!=s&&(t.state=T[t.state](s,e,t)),a},indent:function(e,t){var i=e.context,n=t&&t.charAt(0),s=i.indent;return"prop"!=i.type||"}"!=n&&")"!=n||(i=i.prev),i.prev&&("}"!=n||"block"!=i.type&&"top"!=i.type&&"interpolation"!=i.type&&"restricted_atBlock"!=i.type?(")"!=n||"parens"!=i.type&&"atBlock_parens"!=i.type)&&("{"!=n||"at"!=i.type&&"atBlock"!=i.type)||(s=Math.max(0,i.indent-o)):s=(i=i.prev).indent),s},electricChars:"}",blockCommentStart:"/*",blockCommentEnd:"*/",blockCommentContinue:" * ",lineComment:y,fold:"brace"}});var i=["domain","regexp","url","url-prefix"],n=t(i),s=["all","aural","braille","handheld","print","projection","screen","tty","tv","embossed"],a=t(s),o=["width","min-width","max-width","height","min-height","max-height","device-width","min-device-width","max-device-width","device-height","min-device-height","max-device-height","aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio","color","min-color","max-color","color-index","min-color-index","max-color-index","monochrome","min-monochrome","max-monochrome","resolution","min-resolution","max-resolution","scan","grid","orientation","device-pixel-ratio","min-device-pixel-ratio","max-device-pixel-ratio","pointer","any-pointer","hover","any-hover"],r=t(o),l=["landscape","portrait","none","coarse","fine","on-demand","hover","interlace","progressive"],c=t(l),d=["align-content","align-items","align-self","alignment-adjust","alignment-baseline","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","azimuth","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","color","color-profile","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","flow-from","flow-into","font","font-feature-settings","font-family","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-gap","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-gap","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","justify-items","justify-self","left","letter-spacing","line-break","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","marquee-direction","marquee-loop","marquee-play-count","marquee-speed","marquee-style","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","place-content","place-items","place-self","play-during","position","presentation-level","punctuation-trim","quotes","region-break-after","region-break-before","region-break-inside","region-fragment","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","shape-image-threshold","shape-inside","shape-margin","shape-outside","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","target","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-outline","text-overflow","text-shadow","text-size-adjust","text-space-collapse","text-transform","text-underline-position","text-wrap","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","user-select","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","z-index","clip-path","clip-rule","mask","enable-background","filter","flood-color","flood-opacity","lighting-color","stop-color","stop-opacity","pointer-events","color-interpolation","color-interpolation-filters","color-rendering","fill","fill-opacity","fill-rule","image-rendering","marker","marker-end","marker-mid","marker-start","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-rendering","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","text-anchor","writing-mode"],u=t(d),p=["scrollbar-arrow-color","scrollbar-base-color","scrollbar-dark-shadow-color","scrollbar-face-color","scrollbar-highlight-color","scrollbar-shadow-color","scrollbar-3d-light-color","scrollbar-track-color","shape-inside","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","zoom"],f=t(p),h=t(["font-family","src","unicode-range","font-variant","font-feature-settings","font-stretch","font-weight","font-style"]),m=t(["additive-symbols","fallback","negative","pad","prefix","range","speak-as","suffix","symbols","system"]),g=["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],v=t(g),x=["above","absolute","activeborder","additive","activecaption","afar","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","amharic","amharic-abegede","antialiased","appworkspace","arabic-indic","armenian","asterisks","attr","auto","auto-flow","avoid","avoid-column","avoid-page","avoid-region","background","backwards","baseline","below","bidi-override","binary","bengali","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","button-bevel","buttonface","buttonhighlight","buttonshadow","buttontext","calc","cambodian","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","cjk-earthly-branch","cjk-heavenly-stem","cjk-ideographic","clear","clip","close-quote","col-resize","collapse","color","color-burn","color-dodge","column","column-reverse","compact","condensed","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","darken","dashed","decimal","decimal-leading-zero","default","default-button","dense","destination-atop","destination-in","destination-out","destination-over","devanagari","difference","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic","ethiopic-abegede","ethiopic-abegede-am-et","ethiopic-abegede-gez","ethiopic-abegede-ti-er","ethiopic-abegede-ti-et","ethiopic-halehame-aa-er","ethiopic-halehame-aa-et","ethiopic-halehame-am-et","ethiopic-halehame-gez","ethiopic-halehame-om-et","ethiopic-halehame-sid-et","ethiopic-halehame-so-et","ethiopic-halehame-ti-er","ethiopic-halehame-ti-et","ethiopic-halehame-tig","ethiopic-numeric","ew-resize","exclusion","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fixed","flat","flex","flex-end","flex-start","footnotes","forwards","from","geometricPrecision","georgian","graytext","grid","groove","gujarati","gurmukhi","hand","hangul","hangul-consonant","hard-light","hebrew","help","hidden","hide","higher","highlight","highlighttext","hiragana","hiragana-iroha","horizontal","hsl","hsla","hue","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-grid","inline-table","inset","inside","intrinsic","invert","italic","japanese-formal","japanese-informal","justify","kannada","katakana","katakana-iroha","keep-all","khmer","korean-hangul-formal","korean-hanja-formal","korean-hanja-informal","landscape","lao","large","larger","left","level","lighter","lighten","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-alpha","lower-armenian","lower-greek","lower-hexadecimal","lower-latin","lower-norwegian","lower-roman","lowercase","ltr","luminosity","malayalam","match","matrix","matrix3d","media-controls-background","media-current-time-display","media-fullscreen-button","media-mute-button","media-play-button","media-return-to-realtime-button","media-rewind-button","media-seek-back-button","media-seek-forward-button","media-slider","media-sliderthumb","media-time-remaining-display","media-volume-slider","media-volume-slider-container","media-volume-sliderthumb","medium","menu","menulist","menulist-button","menulist-text","menulist-textfield","menutext","message-box","middle","min-intrinsic","mix","mongolian","monospace","move","multiple","multiply","myanmar","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","octal","opacity","open-quote","optimizeLegibility","optimizeSpeed","oriya","oromo","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","persian","perspective","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row","row-resize","row-reverse","rtl","run-in","running","s-resize","sans-serif","saturation","scale","scale3d","scaleX","scaleY","scaleZ","screen","scroll","scrollbar","scroll-position","se-resize","searchfield","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","self-start","self-end","semi-condensed","semi-expanded","separate","serif","show","sidama","simp-chinese-formal","simp-chinese-informal","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","soft-light","solid","somali","source-atop","source-in","source-out","source-over","space","space-around","space-between","space-evenly","spell-out","square","square-button","start","static","status-bar","stretch","stroke","sub","subpixel-antialiased","super","sw-resize","symbolic","symbols","system-ui","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","tamil","telugu","text","text-bottom","text-top","textarea","textfield","thai","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","tibetan","tigre","tigrinya-er","tigrinya-er-abegede","tigrinya-et","tigrinya-et-abegede","to","top","trad-chinese-formal","trad-chinese-informal","transform","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","unset","up","upper-alpha","upper-armenian","upper-greek","upper-hexadecimal","upper-latin","upper-norwegian","upper-roman","uppercase","urdu","url","var","vertical","vertical-text","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","wrap","wrap-reverse","x-large","x-small","xor","xx-large","xx-small"],y=t(x),b=i.concat(s).concat(o).concat(l).concat(d).concat(p).concat(g).concat(x);function w(e,t){for(var i,n=!1;null!=(i=e.next());){if(n&&"/"==i){t.tokenize=null;break}n="*"==i}return["comment","comment"]}e.registerHelper("hintWords","css",b),e.defineMIME("text/css",{documentTypes:n,mediaTypes:a,mediaFeatures:r,mediaValueKeywords:c,propertyKeywords:u,nonStandardPropertyKeywords:f,fontProperties:h,counterDescriptors:m,colorKeywords:v,valueKeywords:y,tokenHooks:{"/":function(e,t){return!!e.eat("*")&&(t.tokenize=w,w(e,t))}},name:"css"}),e.defineMIME("text/x-scss",{mediaTypes:a,mediaFeatures:r,mediaValueKeywords:c,propertyKeywords:u,nonStandardPropertyKeywords:f,colorKeywords:v,valueKeywords:y,fontProperties:h,allowNested:!0,lineComment:"//",tokenHooks:{"/":function(e,t){return e.eat("/")?(e.skipToEnd(),["comment","comment"]):e.eat("*")?(t.tokenize=w,w(e,t)):["operator","operator"]},":":function(e){return!!e.match(/\s*\{/,!1)&&[null,null]},$:function(e){return e.match(/^[\w-]+/),e.match(/^\s*:/,!1)?["variable-2","variable-definition"]:["variable-2","variable"]},"#":function(e){return!!e.eat("{")&&[null,"interpolation"]}},name:"css",helperType:"scss"}),e.defineMIME("text/x-less",{mediaTypes:a,mediaFeatures:r,mediaValueKeywords:c,propertyKeywords:u,nonStandardPropertyKeywords:f,colorKeywords:v,valueKeywords:y,fontProperties:h,allowNested:!0,lineComment:"//",tokenHooks:{"/":function(e,t){return e.eat("/")?(e.skipToEnd(),["comment","comment"]):e.eat("*")?(t.tokenize=w,w(e,t)):["operator","operator"]},"@":function(e){return e.eat("{")?[null,"interpolation"]:!e.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i,!1)&&(e.eatWhile(/[\w\\\-]/),e.match(/^\s*:/,!1)?["variable-2","variable-definition"]:["variable-2","variable"])},"&":function(){return["atom","atom"]}},name:"css",helperType:"less"}),e.defineMIME("text/x-gss",{documentTypes:n,mediaTypes:a,mediaFeatures:r,propertyKeywords:u,nonStandardPropertyKeywords:f,fontProperties:h,counterDescriptors:m,colorKeywords:v,valueKeywords:y,supportsAtComponent:!0,tokenHooks:{"/":function(e,t){return!!e.eat("*")&&(t.tokenize=w,w(e,t))}},name:"css",helperType:"gss"})})(i(4))},function(e,t,i){(function(e){"use strict";e.defineMode("markdown",function(t,i){var n=e.getMode(t,"text/html"),s="null"==n.name;void 0===i.highlightFormatting&&(i.highlightFormatting=!1),void 0===i.maxBlockquoteDepth&&(i.maxBlockquoteDepth=0),void 0===i.taskLists&&(i.taskLists=!1),void 0===i.strikethrough&&(i.strikethrough=!1),void 0===i.emoji&&(i.emoji=!1),void 0===i.fencedCodeBlockHighlighting&&(i.fencedCodeBlockHighlighting=!0),void 0===i.xml&&(i.xml=!0),void 0===i.tokenTypeOverrides&&(i.tokenTypeOverrides={});var a={header:"header",code:"comment",quote:"quote",list1:"variable-2",list2:"variable-3",list3:"keyword",hr:"hr",image:"image",imageAltText:"image-alt-text",imageMarker:"image-marker",formatting:"formatting",linkInline:"link",linkEmail:"link",linkText:"link",linkHref:"string",em:"em",strong:"strong",strikethrough:"strikethrough",emoji:"builtin"};for(var o in a)a.hasOwnProperty(o)&&i.tokenTypeOverrides[o]&&(a[o]=i.tokenTypeOverrides[o]);var r=/^([*\-_])(?:\s*\1){2,}\s*$/,l=/^(?:[*\-+]|^[0-9]+([.)]))\s+/,c=/^\[(x| )\](?=\s)/i,d=i.allowAtxHeaderWithoutSpace?/^(#+)/:/^(#+)(?: |$)/,u=/^ *(?:\={1,}|-{1,})\s*$/,p=/^[^#!\[\]*_\\<>` "'(~:]+/,f=/^(~~~+|```+)[ \t]*([\w+#-]*)[^\n`]*$/,h=/^\s*\[[^\]]+?\]:.*$/,m=/[!\"#$%&\'()*+,\-\.\/:;<=>?@\[\\\]^_`{|}~—]/;function g(e,t,i){return t.f=t.inline=i,i(e,t)}function v(e,t,i){return t.f=t.block=i,i(e,t)}function x(e){return e.linkTitle=!1,e.linkHref=!1,e.linkText=!1,e.em=!1,e.strong=!1,e.strikethrough=!1,e.quote=0,e.indentedCode=!1,e.f==b&&(e.f=C,e.block=y),e.trailingSpace=0,e.trailingSpaceNewLine=!1,e.prevLine=e.thisLine,e.thisLine={stream:null},null}function y(n,s){var o,p=n.column()===s.indentation,m=!(o=s.prevLine.stream)||!/\S/.test(o.string),v=s.indentedCode,x=s.prevLine.hr,y=!1!==s.list,b=(s.listStack[s.listStack.length-1]||0)+3;s.indentedCode=!1;var _=s.indentation;if(null===s.indentationDiff&&(s.indentationDiff=s.indentation,y)){for(s.em=!1,s.strong=!1,s.code=!1,s.strikethrough=!1,s.list=null;_<s.listStack[s.listStack.length-1];)s.listStack.pop(),s.listStack.length?s.indentation=s.listStack[s.listStack.length-1]:s.list=!1;!1!==s.list&&(s.indentationDiff=_-s.listStack[s.listStack.length-1])}var C=!(m||x||s.prevLine.header||y&&v||s.prevLine.fencedCodeEnd),S=(!1===s.list||x||m)&&s.indentation<=b&&n.match(r),A=null;if(s.indentationDiff>=4&&(v||s.prevLine.fencedCodeEnd||s.prevLine.header||m))return n.skipToEnd(),s.indentedCode=!0,a.code;if(n.eatSpace())return null;if(p&&s.indentation<=b&&(A=n.match(d))&&A[1].length<=6)return s.quote=0,s.header=A[1].length,s.thisLine.header=!0,i.highlightFormatting&&(s.formatting="header"),s.f=s.inline,k(s);if(s.indentation<=b&&n.eat(">"))return s.quote=p?1:s.quote+1,i.highlightFormatting&&(s.formatting="quote"),n.eatSpace(),k(s);if(!S&&!s.setext&&p&&s.indentation<=b&&(A=n.match(l))){var M=A[1]?"ol":"ul";return s.indentation=_+n.current().length,s.list=!0,s.quote=0,s.listStack.push(s.indentation),i.taskLists&&n.match(c,!1)&&(s.taskList=!0),s.f=s.inline,i.highlightFormatting&&(s.formatting=["list","list-"+M]),k(s)}return p&&s.indentation<=b&&(A=n.match(f,!0))?(s.quote=0,s.fencedEndRE=new RegExp(A[1]+"+ *$"),s.localMode=i.fencedCodeBlockHighlighting&&function(i){if(e.findModeByName){var n=e.findModeByName(i);n&&(i=n.mime||n.mimes[0])}var s=e.getMode(t,i);return"null"==s.name?null:s}(A[2]),s.localMode&&(s.localState=e.startState(s.localMode)),s.f=s.block=w,i.highlightFormatting&&(s.formatting="code-block"),s.code=-1,k(s)):s.setext||!(C&&y||s.quote||!1!==s.list||s.code||S||h.test(n.string))&&(A=n.lookAhead(1))&&(A=A.match(u))?(s.setext?(s.header=s.setext,s.setext=0,n.skipToEnd(),i.highlightFormatting&&(s.formatting="header")):(s.header="="==A[0].charAt(0)?1:2,s.setext=s.header),s.thisLine.header=!0,s.f=s.inline,k(s)):S?(n.skipToEnd(),s.hr=!0,s.thisLine.hr=!0,a.hr):"["===n.peek()?g(n,s,E):g(n,s,s.inline)}function b(t,i){var a=n.token(t,i.htmlState);if(!s){var o=e.innerMode(n,i.htmlState);("xml"==o.mode.name&&null===o.state.tagStart&&!o.state.context&&o.state.tokenize.isInText||i.md_inside&&t.current().indexOf(">")>-1)&&(i.f=C,i.block=y,i.htmlState=null)}return a}function w(e,t){var n,s=t.listStack[t.listStack.length-1]||0,o=t.indentation<s,r=s+3;return t.fencedEndRE&&t.indentation<=r&&(o||e.match(t.fencedEndRE))?(i.highlightFormatting&&(t.formatting="code-block"),o||(n=k(t)),t.localMode=t.localState=null,t.block=y,t.f=C,t.fencedEndRE=null,t.code=0,t.thisLine.fencedCodeEnd=!0,o?v(e,t,t.block):n):t.localMode?t.localMode.token(e,t.localState):(e.skipToEnd(),a.code)}function k(e){var t=[];if(e.formatting){t.push(a.formatting),"string"==typeof e.formatting&&(e.formatting=[e.formatting]);for(var n=0;n<e.formatting.length;n++)t.push(a.formatting+"-"+e.formatting[n]),"header"===e.formatting[n]&&t.push(a.formatting+"-"+e.formatting[n]+"-"+e.header),"quote"===e.formatting[n]&&(!i.maxBlockquoteDepth||i.maxBlockquoteDepth>=e.quote?t.push(a.formatting+"-"+e.formatting[n]+"-"+e.quote):t.push("error"))}if(e.taskOpen)return t.push("meta"),t.length?t.join(" "):null;if(e.taskClosed)return t.push("property"),t.length?t.join(" "):null;if(e.linkHref?t.push(a.linkHref,"url"):(e.strong&&t.push(a.strong),e.em&&t.push(a.em),e.strikethrough&&t.push(a.strikethrough),e.emoji&&t.push(a.emoji),e.linkText&&t.push(a.linkText),e.code&&t.push(a.code),e.image&&t.push(a.image),e.imageAltText&&t.push(a.imageAltText,"link"),e.imageMarker&&t.push(a.imageMarker)),e.header&&t.push(a.header,a.header+"-"+e.header),e.quote&&(t.push(a.quote),!i.maxBlockquoteDepth||i.maxBlockquoteDepth>=e.quote?t.push(a.quote+"-"+e.quote):t.push(a.quote+"-"+i.maxBlockquoteDepth)),!1!==e.list){var s=(e.listStack.length-1)%3;s?1===s?t.push(a.list2):t.push(a.list3):t.push(a.list1)}return e.trailingSpaceNewLine?t.push("trailing-space-new-line"):e.trailingSpace&&t.push("trailing-space-"+(e.trailingSpace%2?"a":"b")),t.length?t.join(" "):null}function _(e,t){if(e.match(p,!0))return k(t)}function C(t,s){var o=s.text(t,s);if(void 0!==o)return o;if(s.list)return s.list=null,k(s);if(s.taskList)return" "===t.match(c,!0)[1]?s.taskOpen=!0:s.taskClosed=!0,i.highlightFormatting&&(s.formatting="task"),s.taskList=!1,k(s);if(s.taskOpen=!1,s.taskClosed=!1,s.header&&t.match(/^#+$/,!0))return i.highlightFormatting&&(s.formatting="header"),k(s);var r=t.next();if(s.linkTitle){s.linkTitle=!1;var l=r;"("===r&&(l=")");var d="^\\s*(?:[^"+(l=(l+"").replace(/([.?*+^\[\]\\(){}|-])/g,"\\$1"))+"\\\\]+|\\\\\\\\|\\\\.)"+l;if(t.match(new RegExp(d),!0))return a.linkHref}if("`"===r){var u=s.formatting;i.highlightFormatting&&(s.formatting="code"),t.eatWhile("`");var p=t.current().length;if(0!=s.code||s.quote&&1!=p){if(p==s.code){var f=k(s);return s.code=0,f}return s.formatting=u,k(s)}return s.code=p,k(s)}if(s.code)return k(s);if("\\"===r&&(t.next(),i.highlightFormatting)){var h=k(s),g=a.formatting+"-escape";return h?h+" "+g:g}if("!"===r&&t.match(/\[[^\]]*\] ?(?:\(|\[)/,!1))return s.imageMarker=!0,s.image=!0,i.highlightFormatting&&(s.formatting="image"),k(s);if("["===r&&s.imageMarker&&t.match(/[^\]]*\](\(.*?\)| ?\[.*?\])/,!1))return s.imageMarker=!1,s.imageAltText=!0,i.highlightFormatting&&(s.formatting="image"),k(s);if("]"===r&&s.imageAltText){i.highlightFormatting&&(s.formatting="image");var h=k(s);return s.imageAltText=!1,s.image=!1,s.inline=s.f=A,h}if("["===r&&!s.image)return s.linkText=!0,i.highlightFormatting&&(s.formatting="link"),k(s);if("]"===r&&s.linkText){i.highlightFormatting&&(s.formatting="link");var h=k(s);return s.linkText=!1,s.inline=s.f=t.match(/\(.*?\)| ?\[.*?\]/,!1)?A:C,h}if("<"===r&&t.match(/^(https?|ftps?):\/\/(?:[^\\>]|\\.)+>/,!1))return s.f=s.inline=S,i.highlightFormatting&&(s.formatting="link"),(h=k(s))?h+=" ":h="",h+a.linkInline;if("<"===r&&t.match(/^[^> \\]+@(?:[^\\>]|\\.)+>/,!1))return s.f=s.inline=S,i.highlightFormatting&&(s.formatting="link"),(h=k(s))?h+=" ":h="",h+a.linkEmail;if(i.xml&&"<"===r&&t.match(/^(!--|[a-z][a-z0-9-]*(?:\s+[a-z_:.\-]+(?:\s*=\s*[^>]+)?)*\s*>)/i,!1)){var x=t.string.indexOf(">",t.pos);if(-1!=x){var y=t.string.substring(t.start,x);/markdown\s*=\s*('|"){0,1}1('|"){0,1}/.test(y)&&(s.md_inside=!0)}return t.backUp(1),s.htmlState=e.startState(n),v(t,s,b)}if(i.xml&&"<"===r&&t.match(/^\/\w*?>/))return s.md_inside=!1,"tag";if("*"===r||"_"===r){for(var w=1,_=1==t.pos?" ":t.string.charAt(t.pos-2);w<3&&t.eat(r);)w++;var M=t.peek()||" ",E=!/\s/.test(M)&&(!m.test(M)||/\s/.test(_)||m.test(_)),F=!/\s/.test(_)&&(!m.test(_)||/\s/.test(M)||m.test(M)),T=null,O=null;if(w%2&&(s.em||!E||"*"!==r&&F&&!m.test(_)?s.em!=r||!F||"*"!==r&&E&&!m.test(M)||(T=!1):T=!0),w>1&&(s.strong||!E||"*"!==r&&F&&!m.test(_)?s.strong!=r||!F||"*"!==r&&E&&!m.test(M)||(O=!1):O=!0),null!=O||null!=T){i.highlightFormatting&&(s.formatting=null==T?"strong":null==O?"em":"strong em"),!0===T&&(s.em=r),!0===O&&(s.strong=r);f=k(s);return!1===T&&(s.em=!1),!1===O&&(s.strong=!1),f}}else if(" "===r&&(t.eat("*")||t.eat("_"))){if(" "===t.peek())return k(s);t.backUp(1)}if(i.strikethrough)if("~"===r&&t.eatWhile(r)){if(s.strikethrough){i.highlightFormatting&&(s.formatting="strikethrough");f=k(s);return s.strikethrough=!1,f}if(t.match(/^[^\s]/,!1))return s.strikethrough=!0,i.highlightFormatting&&(s.formatting="strikethrough"),k(s)}else if(" "===r&&t.match(/^~~/,!0)){if(" "===t.peek())return k(s);t.backUp(2)}if(i.emoji&&":"===r&&t.match(/^[a-z_\d+-]+:/)){s.emoji=!0,i.highlightFormatting&&(s.formatting="emoji");var L=k(s);return s.emoji=!1,L}return" "===r&&(t.match(/ +$/,!1)?s.trailingSpace++:s.trailingSpace&&(s.trailingSpaceNewLine=!0)),k(s)}function S(e,t){if(">"===e.next()){t.f=t.inline=C,i.highlightFormatting&&(t.formatting="link");var n=k(t);return n?n+=" ":n="",n+a.linkInline}return e.match(/^[^>]+/,!0),a.linkInline}function A(e,t){if(e.eatSpace())return null;var n,s=e.next();return"("===s||"["===s?(t.f=t.inline=(n="("===s?")":"]",function(e,t){var s=e.next();if(s===n){t.f=t.inline=C,i.highlightFormatting&&(t.formatting="link-string");var a=k(t);return t.linkHref=!1,a}return e.match(M[n]),t.linkHref=!0,k(t)}),i.highlightFormatting&&(t.formatting="link-string"),t.linkHref=!0,k(t)):"error"}var M={")":/^(?:[^\\\(\)]|\\.|\((?:[^\\\(\)]|\\.)*\))*?(?=\))/,"]":/^(?:[^\\\[\]]|\\.|\[(?:[^\\\[\]]|\\.)*\])*?(?=\])/};function E(e,t){return e.match(/^([^\]\\]|\\.)*\]:/,!1)?(t.f=F,e.next(),i.highlightFormatting&&(t.formatting="link"),t.linkText=!0,k(t)):g(e,t,C)}function F(e,t){if(e.match(/^\]:/,!0)){t.f=t.inline=T,i.highlightFormatting&&(t.formatting="link");var n=k(t);return t.linkText=!1,n}return e.match(/^([^\]\\]|\\.)+/,!0),a.linkText}function T(e,t){return e.eatSpace()?null:(e.match(/^[^\s]+/,!0),void 0===e.peek()?t.linkTitle=!0:e.match(/^(?:\s+(?:"(?:[^"\\]|\\\\|\\.)+"|'(?:[^'\\]|\\\\|\\.)+'|\((?:[^)\\]|\\\\|\\.)+\)))?/,!0),t.f=t.inline=C,a.linkHref+" url")}var O={startState:function(){return{f:y,prevLine:{stream:null},thisLine:{stream:null},block:y,htmlState:null,indentation:0,inline:C,text:_,formatting:!1,linkText:!1,linkHref:!1,linkTitle:!1,code:0,em:!1,strong:!1,header:0,setext:0,hr:!1,taskList:!1,list:!1,listStack:[],quote:0,trailingSpace:0,trailingSpaceNewLine:!1,strikethrough:!1,emoji:!1,fencedEndRE:null}},copyState:function(t){return{f:t.f,prevLine:t.prevLine,thisLine:t.thisLine,block:t.block,htmlState:t.htmlState&&e.copyState(n,t.htmlState),indentation:t.indentation,localMode:t.localMode,localState:t.localMode?e.copyState(t.localMode,t.localState):null,inline:t.inline,text:t.text,formatting:!1,linkText:t.linkText,linkTitle:t.linkTitle,linkHref:t.linkHref,code:t.code,em:t.em,strong:t.strong,strikethrough:t.strikethrough,emoji:t.emoji,header:t.header,setext:t.setext,hr:t.hr,taskList:t.taskList,list:t.list,listStack:t.listStack.slice(0),quote:t.quote,indentedCode:t.indentedCode,trailingSpace:t.trailingSpace,trailingSpaceNewLine:t.trailingSpaceNewLine,md_inside:t.md_inside,fencedEndRE:t.fencedEndRE}},token:function(e,t){if(t.formatting=!1,e!=t.thisLine.stream){if(t.header=0,t.hr=!1,e.match(/^\s*$/,!0))return x(t),null;if(t.prevLine=t.thisLine,t.thisLine={stream:e},t.taskList=!1,t.trailingSpace=0,t.trailingSpaceNewLine=!1,!t.localState&&(t.f=t.block,t.f!=b)){var i=e.match(/^\s*/,!0)[0].replace(/\t/g,"    ").length;if(t.indentation=i,t.indentationDiff=null,i>0)return null}}return t.f(e,t)},innerMode:function(e){return e.block==b?{state:e.htmlState,mode:n}:e.localState?{state:e.localState,mode:e.localMode}:{state:e,mode:O}},indent:function(t,i,s){return t.block==b&&n.indent?n.indent(t.htmlState,i,s):t.localState&&t.localMode.indent?t.localMode.indent(t.localState,i,s):e.Pass},blankLine:x,getType:k,closeBrackets:"()[]{}''\"\"``",fold:"markdown"};return O},"xml"),e.defineMIME("text/markdown","markdown"),e.defineMIME("text/x-markdown","markdown")})(i(4),i(20),i(601))},function(e,t,i){(function(e){"use strict";function t(e,t,i,n,s,a){this.indented=e,this.column=t,this.type=i,this.info=n,this.align=s,this.prev=a}function i(e,i,n,s){var a=e.indented;return e.context&&"statement"==e.context.type&&"statement"!=n&&(a=e.context.indented),e.context=new t(a,i,n,s,null,e.context)}function n(e){var t=e.context.type;return")"!=t&&"]"!=t&&"}"!=t||(e.indented=e.context.indented),e.context=e.context.prev}function s(e,t,i){return"variable"==t.prevToken||"type"==t.prevToken||(!!/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(e.string.slice(0,i))||(!(!t.typeAtEndOfLine||e.column()!=e.indentation())||void 0))}function a(e){for(;;){if(!e||"top"==e.type)return!0;if("}"==e.type&&"namespace"!=e.prev.info)return!1;e=e.prev}}function o(e){for(var t={},i=e.split(" "),n=0;n<i.length;++n)t[i[n]]=!0;return t}function r(e,t){return"function"==typeof e?e(t):e.propertyIsEnumerable(t)}e.defineMode("clike",function(o,l){var c,d,u=o.indentUnit,p=l.statementIndentUnit||u,f=l.dontAlignCalls,h=l.keywords||{},m=l.types||{},g=l.builtin||{},v=l.blockKeywords||{},x=l.defKeywords||{},y=l.atoms||{},b=l.hooks||{},w=l.multiLineStrings,k=!1!==l.indentStatements,_=!1!==l.indentSwitch,C=l.namespaceSeparator,S=l.isPunctuationChar||/[\[\]{}\(\),;\:\.]/,A=l.numberStart||/[\d\.]/,M=l.number||/^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i,E=l.isOperatorChar||/[+\-*&%=<>!?|\/]/,F=l.isIdentifierChar||/[\w\$_\xa1-\uffff]/;function T(e,t){var i,n=e.next();if(b[n]){var s=b[n](e,t);if(!1!==s)return s}if('"'==n||"'"==n)return t.tokenize=(i=n,function(e,t){for(var n,s=!1,a=!1;null!=(n=e.next());){if(n==i&&!s){a=!0;break}s=!s&&"\\"==n}return(a||!s&&!w)&&(t.tokenize=null),"string"}),t.tokenize(e,t);if(S.test(n))return c=n,null;if(A.test(n)){if(e.backUp(1),e.match(M))return"number";e.next()}if("/"==n){if(e.eat("*"))return t.tokenize=O,O(e,t);if(e.eat("/"))return e.skipToEnd(),"comment"}if(E.test(n)){for(;!e.match(/^\/[\/*]/,!1)&&e.eat(E););return"operator"}if(e.eatWhile(F),C)for(;e.match(C);)e.eatWhile(F);var a=e.current();return r(h,a)?(r(v,a)&&(c="newstatement"),r(x,a)&&(d=!0),"keyword"):r(m,a)?"type":r(g,a)?(r(v,a)&&(c="newstatement"),"builtin"):r(y,a)?"atom":"variable"}function O(e,t){for(var i,n=!1;i=e.next();){if("/"==i&&n){t.tokenize=null;break}n="*"==i}return"comment"}function L(e,t){l.typeFirstDefinitions&&e.eol()&&a(t.context)&&(t.typeAtEndOfLine=s(e,t,e.pos))}return{startState:function(e){return{tokenize:null,context:new t((e||0)-u,0,"top",null,!1),indented:0,startOfLine:!0,prevToken:null}},token:function(e,t){var o=t.context;if(e.sol()&&(null==o.align&&(o.align=!1),t.indented=e.indentation(),t.startOfLine=!0),e.eatSpace())return L(e,t),null;c=d=null;var r=(t.tokenize||T)(e,t);if("comment"==r||"meta"==r)return r;if(null==o.align&&(o.align=!0),";"==c||":"==c||","==c&&e.match(/^\s*(?:\/\/.*)?$/,!1))for(;"statement"==t.context.type;)n(t);else if("{"==c)i(t,e.column(),"}");else if("["==c)i(t,e.column(),"]");else if("("==c)i(t,e.column(),")");else if("}"==c){for(;"statement"==o.type;)o=n(t);for("}"==o.type&&(o=n(t));"statement"==o.type;)o=n(t)}else c==o.type?n(t):k&&(("}"==o.type||"top"==o.type)&&";"!=c||"statement"==o.type&&"newstatement"==c)&&i(t,e.column(),"statement",e.current());if("variable"==r&&("def"==t.prevToken||l.typeFirstDefinitions&&s(e,t,e.start)&&a(t.context)&&e.match(/^\s*\(/,!1))&&(r="def"),b.token){var u=b.token(e,t,r);void 0!==u&&(r=u)}return"def"==r&&!1===l.styleDefs&&(r="variable"),t.startOfLine=!1,t.prevToken=d?"def":r||c,L(e,t),r},indent:function(t,i){if(t.tokenize!=T&&null!=t.tokenize||t.typeAtEndOfLine)return e.Pass;var n=t.context,s=i&&i.charAt(0);if("statement"==n.type&&"}"==s&&(n=n.prev),l.dontIndentStatements)for(;"statement"==n.type&&l.dontIndentStatements.test(n.info);)n=n.prev;if(b.indent){var a=b.indent(t,n,i);if("number"==typeof a)return a}var o=s==n.type,r=n.prev&&"switch"==n.prev.info;if(l.allmanIndentation&&/[{(]/.test(s)){for(;"top"!=n.type&&"}"!=n.type;)n=n.prev;return n.indented}return"statement"==n.type?n.indented+("{"==s?0:p):!n.align||f&&")"==n.type?")"!=n.type||o?n.indented+(o?0:u)+(o||!r||/^(?:case|default)\b/.test(i)?0:u):n.indented+p:n.column+(o?0:1)},electricInput:_?/^\s*(?:case .*?:|default:|\{\}?|\})$/:/^\s*[{}]$/,blockCommentStart:"/*",blockCommentEnd:"*/",blockCommentContinue:" * ",lineComment:"//",fold:"brace"}});var l="auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile",c="int long char short double float unsigned signed void size_t ptrdiff_t";function d(e,t){if(!t.startOfLine)return!1;for(var i,n=null;i=e.peek();){if("\\"==i&&e.match(/^.$/)){n=d;break}if("/"==i&&e.match(/^\/[\/\*]/,!1))break;e.next()}return t.tokenize=n,"meta"}function u(e,t){return"type"==t.prevToken&&"type"}function p(e){return e.eatWhile(/[\w\.']/),"number"}function f(e,t){if(e.backUp(1),e.match(/(R|u8R|uR|UR|LR)/)){var i=e.match(/"([^\s\\()]{0,16})\(/);return!!i&&(t.cpp11RawStringDelim=i[1],t.tokenize=m,m(e,t))}return e.match(/(u8|u|U|L)/)?!!e.match(/["']/,!1)&&"string":(e.next(),!1)}function h(e,t){for(var i;null!=(i=e.next());)if('"'==i&&!e.eat('"')){t.tokenize=null;break}return"string"}function m(e,t){var i=t.cpp11RawStringDelim.replace(/[^\w\s]/g,"\\$&");return e.match(new RegExp(".*?\\)"+i+'"'))?t.tokenize=null:e.skipToEnd(),"string"}function g(t,i){"string"==typeof t&&(t=[t]);var n=[];function s(e){if(e)for(var t in e)e.hasOwnProperty(t)&&n.push(t)}s(i.keywords),s(i.types),s(i.builtin),s(i.atoms),n.length&&(i.helperType=t[0],e.registerHelper("hintWords",t[0],n));for(var a=0;a<t.length;++a)e.defineMIME(t[a],i)}function v(e,t){for(var i=!1;!e.eol();){if(!i&&e.match('"""')){t.tokenize=null;break}i="\\"==e.next()&&!i}return"string"}g(["text/x-csrc","text/x-c","text/x-chdr"],{name:"clike",keywords:o(l),types:o(c+" bool _Complex _Bool float_t double_t intptr_t intmax_t int8_t int16_t int32_t int64_t uintptr_t uintmax_t uint8_t uint16_t uint32_t uint64_t"),blockKeywords:o("case do else for if switch while struct"),defKeywords:o("struct"),typeFirstDefinitions:!0,atoms:o("NULL true false"),hooks:{"#":d,"*":u},modeProps:{fold:["brace","include"]}}),g(["text/x-c++src","text/x-c++hdr"],{name:"clike",keywords:o(l+" asm dynamic_cast namespace reinterpret_cast try explicit new static_cast typeid catch operator template typename class friend private this using const_cast inline public throw virtual delete mutable protected alignas alignof constexpr decltype nullptr noexcept thread_local final static_assert override"),types:o(c+" bool wchar_t"),blockKeywords:o("catch class do else finally for if struct switch try while"),defKeywords:o("class namespace struct enum union"),typeFirstDefinitions:!0,atoms:o("true false NULL"),dontIndentStatements:/^template$/,isIdentifierChar:/[\w\$_~\xa1-\uffff]/,hooks:{"#":d,"*":u,u:f,U:f,L:f,R:f,0:p,1:p,2:p,3:p,4:p,5:p,6:p,7:p,8:p,9:p,token:function(e,t,i){if("variable"==i&&"("==e.peek()&&(";"==t.prevToken||null==t.prevToken||"}"==t.prevToken)&&(n=e.current(),(s=/(\w+)::~?(\w+)$/.exec(n))&&s[1]==s[2]))return"def";var n,s}},namespaceSeparator:"::",modeProps:{fold:["brace","include"]}}),g("text/x-java",{name:"clike",keywords:o("abstract assert break case catch class const continue default do else enum extends final finally float for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),types:o("byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),blockKeywords:o("catch class do else finally for if switch try while"),defKeywords:o("class interface enum @interface"),typeFirstDefinitions:!0,atoms:o("true false null"),number:/^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,hooks:{"@":function(e){return!e.match("interface",!1)&&(e.eatWhile(/[\w\$_]/),"meta")}},modeProps:{fold:["brace","import"]}}),g("text/x-csharp",{name:"clike",keywords:o("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in interface internal is lock namespace new operator out override params private protected public readonly ref return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),types:o("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),blockKeywords:o("catch class do else finally for foreach if struct switch try while"),defKeywords:o("class interface namespace struct var"),typeFirstDefinitions:!0,atoms:o("true false null"),hooks:{"@":function(e,t){return e.eat('"')?(t.tokenize=h,h(e,t)):(e.eatWhile(/[\w\$_]/),"meta")}}}),g("text/x-scala",{name:"clike",keywords:o("abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"),types:o("AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"),multiLineStrings:!0,blockKeywords:o("catch class enum do else finally for forSome if match switch try while"),defKeywords:o("class enum def object package trait type val var"),atoms:o("true false null"),indentStatements:!1,indentSwitch:!1,isOperatorChar:/[+\-*&%=<>!?|\/#:@]/,hooks:{"@":function(e){return e.eatWhile(/[\w\$_]/),"meta"},'"':function(e,t){return!!e.match('""')&&(t.tokenize=v,t.tokenize(e,t))},"'":function(e){return e.eatWhile(/[\w\$_\xa1-\uffff]/),"atom"},"=":function(e,i){var n=i.context;return!("}"!=n.type||!n.align||!e.eat(">"))&&(i.context=new t(n.indented,n.column,n.type,n.info,null,n.prev),"operator")},"/":function(e,t){return!!e.eat("*")&&(t.tokenize=function e(t){return function(i,n){for(var s;s=i.next();){if("*"==s&&i.eat("/")){if(1==t){n.tokenize=null;break}return n.tokenize=e(t-1),n.tokenize(i,n)}if("/"==s&&i.eat("*"))return n.tokenize=e(t+1),n.tokenize(i,n)}return"comment"}}(1),t.tokenize(e,t))}},modeProps:{closeBrackets:{triples:'"'}}}),g("text/x-kotlin",{name:"clike",keywords:o("package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"),types:o("Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"),intendSwitch:!1,indentStatements:!1,multiLineStrings:!0,number:/^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,blockKeywords:o("catch class do else finally for if where try while enum"),defKeywords:o("class val var object interface fun"),atoms:o("true false null this"),hooks:{"@":function(e){return e.eatWhile(/[\w\$_]/),"meta"},'"':function(e,t){var i;return t.tokenize=(i=e.match('""'),function(e,t){for(var n,s=!1,a=!1;!e.eol();){if(!i&&!s&&e.match('"')){a=!0;break}if(i&&e.match('"""')){a=!0;break}n=e.next(),!s&&"$"==n&&e.match("{")&&e.skipTo("}"),s=!s&&"\\"==n&&!i}return!a&&i||(t.tokenize=null),"string"}),t.tokenize(e,t)}},modeProps:{closeBrackets:{triples:'"'}}}),g(["x-shader/x-vertex","x-shader/x-fragment"],{name:"clike",keywords:o("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),types:o("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),blockKeywords:o("for while do if else struct"),builtin:o("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),atoms:o("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TexureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),indentSwitch:!1,hooks:{"#":d},modeProps:{fold:["brace","include"]}}),g("text/x-nesc",{name:"clike",keywords:o(l+"as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),types:o(c),blockKeywords:o("case do else for if switch while struct"),atoms:o("null true false"),hooks:{"#":d},modeProps:{fold:["brace","include"]}}),g("text/x-objectivec",{name:"clike",keywords:o(l+"inline restrict _Bool _Complex _Imaginary BOOL Class bycopy byref id IMP in inout nil oneway out Protocol SEL self super atomic nonatomic retain copy readwrite readonly"),types:o(c),atoms:o("YES NO NULL NILL ON OFF true false"),hooks:{"@":function(e){return e.eatWhile(/[\w\$]/),"keyword"},"#":d,indent:function(e,t,i){if("statement"==t.type&&/^@\w/.test(i))return t.indented}},modeProps:{fold:"brace"}}),g("text/x-squirrel",{name:"clike",keywords:o("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),types:o(c),blockKeywords:o("case catch class else for foreach if switch try while"),defKeywords:o("function local class"),typeFirstDefinitions:!0,atoms:o("true false null"),hooks:{"#":d},modeProps:{fold:["brace","include"]}});var x=null;g("text/x-ceylon",{name:"clike",keywords:o("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),types:function(e){var t=e.charAt(0);return t===t.toUpperCase()&&t!==t.toLowerCase()},blockKeywords:o("case catch class dynamic else finally for function if interface module new object switch try while"),defKeywords:o("class dynamic function interface module object package value"),builtin:o("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),isPunctuationChar:/[\[\]{}\(\),;\:\.`]/,isOperatorChar:/[+\-*&%=<>!?|^~:\/]/,numberStart:/[\d#$]/,number:/^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,multiLineStrings:!0,typeFirstDefinitions:!0,atoms:o("true false null larger smaller equal empty finished"),indentSwitch:!1,styleDefs:!1,hooks:{"@":function(e){return e.eatWhile(/[\w\$_]/),"meta"},'"':function(e,t){return t.tokenize=function e(t){return function(i,n){for(var s,a=!1,o=!1;!i.eol();){if(!a&&i.match('"')&&("single"==t||i.match('""'))){o=!0;break}if(!a&&i.match("``")){x=e(t),o=!0;break}s=i.next(),a="single"==t&&!a&&"\\"==s}return o&&(n.tokenize=null),"string"}}(e.match('""')?"triple":"single"),t.tokenize(e,t)},"`":function(e,t){return!(!x||!e.match("`"))&&(t.tokenize=x,x=null,t.tokenize(e,t))},"'":function(e){return e.eatWhile(/[\w\$_\xa1-\uffff]/),"atom"},token:function(e,t,i){if(("variable"==i||"type"==i)&&"."==t.prevToken)return"variable-2"}},modeProps:{fold:["brace","import"],closeBrackets:{triples:'"'}}})})(i(4))},function(e,t,i){(function(e){"use strict";e.defineMode("yaml",function(){var e=new RegExp("\\b(("+["true","false","on","off","yes","no"].join(")|(")+"))$","i");return{token:function(t,i){var n=t.peek(),s=i.escaped;if(i.escaped=!1,"#"==n&&(0==t.pos||/\s/.test(t.string.charAt(t.pos-1))))return t.skipToEnd(),"comment";if(t.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))return"string";if(i.literal&&t.indentation()>i.keyCol)return t.skipToEnd(),"string";if(i.literal&&(i.literal=!1),t.sol()){if(i.keyCol=0,i.pair=!1,i.pairStart=!1,t.match(/---/))return"def";if(t.match(/\.\.\./))return"def";if(t.match(/\s*-\s+/))return"meta"}if(t.match(/^(\{|\}|\[|\])/))return"{"==n?i.inlinePairs++:"}"==n?i.inlinePairs--:"["==n?i.inlineList++:i.inlineList--,"meta";if(i.inlineList>0&&!s&&","==n)return t.next(),"meta";if(i.inlinePairs>0&&!s&&","==n)return i.keyCol=0,i.pair=!1,i.pairStart=!1,t.next(),"meta";if(i.pairStart){if(t.match(/^\s*(\||\>)\s*/))return i.literal=!0,"meta";if(t.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i))return"variable-2";if(0==i.inlinePairs&&t.match(/^\s*-?[0-9\.\,]+\s?$/))return"number";if(i.inlinePairs>0&&t.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/))return"number";if(t.match(e))return"keyword"}return!i.pair&&t.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)?(i.pair=!0,i.keyCol=t.indentation(),"atom"):i.pair&&t.match(/^:\s*/)?(i.pairStart=!0,"meta"):(i.pairStart=!1,i.escaped="\\"==n,t.next(),null)},startState:function(){return{pair:!1,pairStart:!1,keyCol:0,inlinePairs:0,inlineList:0,literal:!1,escaped:!1}},lineComment:"#"}}),e.defineMIME("text/x-yaml","yaml"),e.defineMIME("text/yaml","yaml")})(i(4))},function(e,t,i){"use strict";(function(e){t.a={computed:{suggestKey:function(){var t=e.omit(this.config,["display","instructions","max_items","localizable","required","name","placeholder"]);return JSON.stringify(t)}}}}).call(t,i(1))},,function(e,t,i){i(188),e.exports=i(695)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),s=i.n(n);s.a.config.debug=!1,s.a.config.silent=!0,s.a.config.devtools=!0,window.Vue=s.a,window._=i(1),window.$=window.jQuery=i(2),window.MediumEditor=i(12),window.moment=i(0),window.rangy=i(191),i(192),i(209),i(210),i(211),i(212),i(213),i(214),i(215),i(219),i(229),i(236),i(532),i(692)},,,function(e,t,i){var n,s;void 0===(s="function"==typeof(n=function(){var e="object",t="function",i="undefined",n=["startContainer","startOffset","endContainer","endOffset","collapsed","commonAncestorContainer"],s=["setStart","setStartBefore","setStartAfter","setEnd","setEndBefore","setEndAfter","collapse","selectNode","selectNodeContents","compareBoundaryPoints","deleteContents","extractContents","cloneContents","insertNode","surroundContents","cloneRange","toString","detach"],a=["boundingHeight","boundingLeft","boundingTop","boundingWidth","htmlText","text"],o=["collapse","compareEndPoints","duplicate","moveToElementText","parentElement","select","setEndPoint","getBoundingClientRect"];function r(i,n){var s=typeof i[n];return s==t||!(s!=e||!i[n])||"unknown"==s}function l(t,i){return!(typeof t[i]!=e||!t[i])}function c(e,t){return typeof e[t]!=i}function d(e){return function(t,i){for(var n=i.length;n--;)if(!e(t,i[n]))return!1;return!0}}var u=d(r),p=d(l),f=d(c);function h(e){return e&&u(e,o)&&f(e,a)}function m(e){return l(e,"body")?e.body:e.getElementsByTagName("body")[0]}var g,v,x={},y=typeof window!=i&&typeof document!=i,b={isHostMethod:r,isHostObject:l,isHostProperty:c,areHostMethods:u,areHostObjects:p,areHostProperties:f,isTextRange:h,getBody:m,forEach:[].forEach?function(e,t){e.forEach(t)}:function(e,t){for(var i=0,n=e.length;i<n;++i)t(e[i],i)}},w={version:"1.3.0",initialized:!1,isBrowser:y,supported:!0,util:b,features:{},modules:x,config:{alertOnFail:!1,alertOnWarn:!1,preferTextRange:!1,autoInitialize:typeof rangyAutoInitialize==i||rangyAutoInitialize}};function k(e){typeof console!=i&&r(console,"log")&&console.log(e)}function _(e,t){y&&t?alert(e):k(e)}function C(e){w.initialized=!0,w.supported=!1,_("Rangy is not supported in this environment. Reason: "+e,w.config.alertOnFail)}w.fail=C,w.warn=function(e){_("Rangy warning: "+e,w.config.alertOnWarn)},!{}.hasOwnProperty?C("hasOwnProperty not supported"):(b.extend=g=function(e,t,i){var n,s;for(var a in t)t.hasOwnProperty(a)&&(n=e[a],s=t[a],i&&null!==n&&"object"==typeof n&&null!==s&&"object"==typeof s&&g(n,s,!0),e[a]=s);return t.hasOwnProperty("toString")&&(e.toString=t.toString),e},b.createOptions=function(e,t){var i={};return g(i,t),e&&g(i,e),i}),y||C("Rangy can only run in a browser"),function(){var e;if(y){var t=document.createElement("div");t.appendChild(document.createElement("span"));var i=[].slice;try{1==i.call(t.childNodes,0)[0].nodeType&&(e=function(e){return i.call(e,0)})}catch(e){}}e||(e=function(e){for(var t=[],i=0,n=e.length;i<n;++i)t[i]=e[i];return t}),b.toArray=e}(),y&&(r(document,"addEventListener")?v=function(e,t,i){e.addEventListener(t,i,!1)}:r(document,"attachEvent")?v=function(e,t,i){e.attachEvent("on"+t,i)}:C("Document does not have required addEventListener or attachEvent method"),b.addListener=v);var S=[];function A(e){return e.message||e.description||String(e)}function M(){if(y&&!w.initialized){var e,t=!1,i=!1;r(document,"createRange")&&(e=document.createRange(),u(e,s)&&f(e,n)&&(t=!0));var a=m(document);if(a&&"body"==a.nodeName.toLowerCase())if(a&&r(a,"createTextRange")&&h(e=a.createTextRange())&&(i=!0),t||i){var o;for(var l in w.initialized=!0,w.features={implementsDomRange:t,implementsTextRange:i},x)(o=x[l])instanceof O&&o.init(o,w);for(var c=0,d=S.length;c<d;++c)try{S[c](w)}catch(e){k("Rangy init listener threw an exception. Continuing. Detail: "+A(e))}}else C("Neither Range nor TextRange are available");else C("No body element found")}}function E(e,t,i){i&&(e+=" in module "+i.name),w.warn("DEPRECATED: "+e+" is deprecated. Please use "+t+" instead.")}function F(e,t,i,n){e[t]=function(){return E(t,i,n),e[i].apply(e,b.toArray(arguments))}}b.deprecationNotice=E,b.createAliasForDeprecatedMethod=F,w.init=M,w.addInitListener=function(e){w.initialized?e(w):S.push(e)};var T=[];function O(e,t,i){this.name=e,this.dependencies=t,this.initialized=!1,this.supported=!1,this.initializer=i}function L(e,t,i){var n=new O(e,t,function(t){if(!t.initialized){t.initialized=!0;try{i(w,t),t.supported=!0}catch(t){k("Module '"+e+"' failed to load: "+A(t)),t.stack&&k(t.stack)}}});return x[e]=n,n}function P(){}w.addShimListener=function(e){T.push(e)},y&&(w.shim=w.createMissingNativeApi=function(e){e=e||window,M();for(var t=0,i=T.length;t<i;++t)T[t](e)},F(w,"createMissingNativeApi","shim")),O.prototype={init:function(){for(var e,t,i=this.dependencies||[],n=0,s=i.length;n<s;++n){if(t=i[n],!((e=x[t])&&e instanceof O))throw new Error("required module '"+t+"' not found");if(e.init(),!e.supported)throw new Error("required module '"+t+"' not supported")}this.initializer(this)},fail:function(e){throw this.initialized=!0,this.supported=!1,new Error(e)},warn:function(e){w.warn("Module "+this.name+": "+e)},deprecationNotice:function(e,t){w.warn("DEPRECATED: "+e+" in module "+this.name+" is deprecated. Please use "+t+" instead")},createError:function(e){return new Error("Error in Rangy "+this.name+" module: "+e)}},w.createModule=function(e){var t,i;2==arguments.length?(t=arguments[1],i=[]):(t=arguments[2],i=arguments[1]);var n=L(e,i,t);w.initialized&&w.supported&&n.init()},w.createCoreModule=function(e,t,i){L(e,t,i)},w.RangePrototype=P,w.rangePrototype=new P,w.selectionPrototype=new function(){},w.createCoreModule("DomUtil",[],function(e,t){var i="undefined",n=e.util,s=n.getBody;n.areHostMethods(document,["createDocumentFragment","createElement","createTextNode"])||t.fail("document missing a Node creation method"),n.isHostMethod(document,"getElementsByTagName")||t.fail("document missing getElementsByTagName method");var a=document.createElement("div");n.areHostMethods(a,["insertBefore","appendChild","cloneNode"]||!n.areHostObjects(a,["previousSibling","nextSibling","childNodes","parentNode"]))||t.fail("Incomplete Element implementation"),n.isHostProperty(a,"innerHTML")||t.fail("Element is missing innerHTML property");var o=document.createTextNode("test");n.areHostMethods(o,["splitText","deleteData","insertData","appendData","cloneNode"]||!n.areHostObjects(a,["previousSibling","nextSibling","childNodes","parentNode"])||!n.areHostProperties(o,["data"]))||t.fail("Incomplete Text Node implementation");var r=function(e,t){for(var i=e.length;i--;)if(e[i]===t)return!0;return!1};function l(e){for(var t=0;e=e.previousSibling;)++t;return t}function c(e,t){var i,n=[];for(i=e;i;i=i.parentNode)n.push(i);for(i=t;i;i=i.parentNode)if(r(n,i))return i;return null}function d(e,t,i){for(var n=i?t:t.parentNode;n;){if(n===e)return!0;n=n.parentNode}return!1}function u(e,t,i){for(var n,s=i?e:e.parentNode;s;){if((n=s.parentNode)===t)return s;s=n}return null}function p(e){var t=e.nodeType;return 3==t||4==t||8==t}function f(e,t){var i=t.nextSibling,n=t.parentNode;return i?n.insertBefore(e,i):n.appendChild(e),e}function h(e){if(9==e.nodeType)return e;if(typeof e.ownerDocument!=i)return e.ownerDocument;if(typeof e.document!=i)return e.document;if(e.parentNode)return h(e.parentNode);throw t.createError("getDocument: no document found for node")}function m(e){var n=h(e);if(typeof n.defaultView!=i)return n.defaultView;if(typeof n.parentWindow!=i)return n.parentWindow;throw t.createError("Cannot get a window object for node")}function g(e){if(typeof e.contentDocument!=i)return e.contentDocument;if(typeof e.contentWindow!=i)return e.contentWindow.document;throw t.createError("getIframeDocument: No Document object found for iframe element")}function v(e){return e&&n.isHostMethod(e,"setTimeout")&&n.isHostObject(e,"document")}var x,y=!1;function b(e){try{return e.parentNode,!1}catch(e){return!0}}function w(e){if(!e)return"[No node]";if(y&&b(e))return"[Broken node]";if(p(e))return'"'+e.data+'"';if(1==e.nodeType){var t=e.id?' id="'+e.id+'"':"";return"<"+e.nodeName+t+">[index:"+l(e)+",length:"+e.childNodes.length+"]["+(e.innerHTML||"[innerHTML not supported]").slice(0,25)+"]"}return e.nodeName}function k(e){this.root=e,this._next=e}function _(e,t){this.node=e,this.offset=t}function C(e){this.code=this[e],this.codeName=e,this.message="DOMException: "+this.codeName}!function(){var t=document.createElement("b");t.innerHTML="1";var i=t.firstChild;t.innerHTML="<br />",y=b(i),e.features.crashyTextNodes=y}(),typeof window.getComputedStyle!=i?x=function(e,t){return m(e).getComputedStyle(e,null)[t]}:typeof document.documentElement.currentStyle!=i?x=function(e,t){return e.currentStyle?e.currentStyle[t]:""}:t.fail("No means of obtaining computed style properties found"),k.prototype={_current:null,hasNext:function(){return!!this._next},next:function(){var e,t,i=this._current=this._next;if(this._current)if(e=i.firstChild)this._next=e;else{for(t=null;i!==this.root&&!(t=i.nextSibling);)i=i.parentNode;this._next=t}return this._current},detach:function(){this._current=this._next=this.root=null}},_.prototype={equals:function(e){return!!e&&this.node===e.node&&this.offset==e.offset},inspect:function(){return"[DomPosition("+w(this.node)+":"+this.offset+")]"},toString:function(){return this.inspect()}},C.prototype={INDEX_SIZE_ERR:1,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INVALID_STATE_ERR:11,INVALID_NODE_TYPE_ERR:24},C.prototype.toString=function(){return this.message},e.dom={arrayContains:r,isHtmlNamespace:function(e){var t;return typeof e.namespaceURI==i||null===(t=e.namespaceURI)||"http://www.w3.org/1999/xhtml"==t},parentElement:function(e){var t=e.parentNode;return 1==t.nodeType?t:null},getNodeIndex:l,getNodeLength:function(e){switch(e.nodeType){case 7:case 10:return 0;case 3:case 8:return e.length;default:return e.childNodes.length}},getCommonAncestor:c,isAncestorOf:d,isOrIsAncestorOf:function(e,t){return d(e,t,!0)},getClosestAncestorIn:u,isCharacterDataNode:p,isTextOrCommentNode:function(e){if(!e)return!1;var t=e.nodeType;return 3==t||8==t},insertAfter:f,splitDataNode:function(e,t,i){var n=e.cloneNode(!1);if(n.deleteData(0,t),e.deleteData(t,e.length-t),f(n,e),i)for(var s,a=0;s=i[a++];)s.node==e&&s.offset>t?(s.node=n,s.offset-=t):s.node==e.parentNode&&s.offset>l(e)&&++s.offset;return n},getDocument:h,getWindow:m,getIframeWindow:function(e){if(typeof e.contentWindow!=i)return e.contentWindow;if(typeof e.contentDocument!=i)return e.contentDocument.defaultView;throw t.createError("getIframeWindow: No Window object found for iframe element")},getIframeDocument:g,getBody:s,isWindow:v,getContentDocument:function(e,t,i){var s;if(e?n.isHostProperty(e,"nodeType")?s=1==e.nodeType&&"iframe"==e.tagName.toLowerCase()?g(e):h(e):v(e)&&(s=e.document):s=document,!s)throw t.createError(i+"(): Parameter must be a Window object or DOM node");return s},getRootContainer:function(e){for(var t;t=e.parentNode;)e=t;return e},comparePoints:function(e,i,n,s){var a,o,r,d,p;if(e==n)return i===s?0:i<s?-1:1;if(a=u(n,e,!0))return i<=l(a)?-1:1;if(a=u(e,n,!0))return l(a)<s?-1:1;if(!(o=c(e,n)))throw new Error("comparePoints error: nodes have no common ancestor");if((r=e===o?o:u(e,o,!0))===(d=n===o?o:u(n,o,!0)))throw t.createError("comparePoints got to case 4 and childA and childB are the same!");for(p=o.firstChild;p;){if(p===r)return-1;if(p===d)return 1;p=p.nextSibling}},isBrokenNode:b,inspectNode:w,getComputedStyleProperty:x,createTestElement:function(e,t,i){var n=s(e),a=e.createElement("div");a.contentEditable=""+!!i,t&&(a.innerHTML=t);var o=n.firstChild;return o?n.insertBefore(a,o):n.appendChild(a),a},removeNode:function(e){return e.parentNode.removeChild(e)},fragmentFromNodeChildren:function(e){for(var t,i=h(e).createDocumentFragment();t=e.firstChild;)i.appendChild(t);return i},createIterator:function(e){return new k(e)},DomPosition:_},e.DOMException=C}),w.createCoreModule("DomRange",["DomUtil"],function(e,t){var i=e.dom,n=e.util,s=i.DomPosition,a=e.DOMException,o=i.isCharacterDataNode,r=i.getNodeIndex,l=i.isOrIsAncestorOf,c=i.getDocument,d=i.comparePoints,u=i.splitDataNode,p=i.getClosestAncestorIn,f=i.getNodeLength,h=i.arrayContains,m=i.getRootContainer,g=e.features.crashyTextNodes,v=i.removeNode;function x(e,t){return 3!=e.nodeType&&(l(e,t.startContainer)||l(e,t.endContainer))}function y(e){return e.document||c(e.startContainer)}function b(e){return new s(e.parentNode,r(e))}function w(e){return new s(e.parentNode,r(e)+1)}function k(e,t,n){var s=11==e.nodeType?e.firstChild:e;return o(t)?n==t.length?i.insertAfter(e,t):t.parentNode.insertBefore(e,0==n?t:u(t,n)):n>=t.childNodes.length?t.appendChild(e):t.insertBefore(e,t.childNodes[n]),s}function _(e,t,i){if(W(e),W(t),y(t)!=y(e))throw new a("WRONG_DOCUMENT_ERR");var n=d(e.startContainer,e.startOffset,t.endContainer,t.endOffset),s=d(e.endContainer,e.endOffset,t.startContainer,t.startOffset);return i?n<=0&&s>=0:n<0&&s>0}function C(e,t,n){var s,a,o,r;for(n=n||{stop:!1};o=e.next();)if(e.isPartiallySelectedSubtree()){if(!1===t(o))return void(n.stop=!0);if(C(r=e.getSubtreeIterator(),t,n),r.detach(),n.stop)return}else for(s=i.createIterator(o);a=s.next();)if(!1===t(a))return void(n.stop=!0)}function S(e){for(var t;e.next();)e.isPartiallySelectedSubtree()?(S(t=e.getSubtreeIterator()),t.detach()):e.remove()}function A(e){for(var t,i,n=y(e.range).createDocumentFragment();t=e.next();){if(e.isPartiallySelectedSubtree()?(t=t.cloneNode(!1),i=e.getSubtreeIterator(),t.appendChild(A(i)),i.detach()):e.remove(),10==t.nodeType)throw new a("HIERARCHY_REQUEST_ERR");n.appendChild(t)}return n}function M(e){return"["+(void 0===e.getName?"Range":e.getName())+"("+i.inspectNode(e.startContainer)+":"+e.startOffset+", "+i.inspectNode(e.endContainer)+":"+e.endOffset+")]"}function E(e,t){if(this.range=e,this.clonePartiallySelectedTextNodes=t,!e.collapsed){this.sc=e.startContainer,this.so=e.startOffset,this.ec=e.endContainer,this.eo=e.endOffset;var i=e.commonAncestorContainer;this.sc===this.ec&&o(this.sc)?(this.isSingleCharacterDataNode=!0,this._first=this._last=this._next=this.sc):(this._first=this._next=this.sc!==i||o(this.sc)?p(this.sc,i,!0):this.sc.childNodes[this.so],this._last=this.ec!==i||o(this.ec)?p(this.ec,i,!0):this.ec.childNodes[this.eo-1])}}E.prototype={_current:null,_next:null,_first:null,_last:null,isSingleCharacterDataNode:!1,reset:function(){this._current=null,this._next=this._first},hasNext:function(){return!!this._next},next:function(){var e=this._current=this._next;return e&&(this._next=e!==this._last?e.nextSibling:null,o(e)&&this.clonePartiallySelectedTextNodes&&(e===this.ec&&(e=e.cloneNode(!0)).deleteData(this.eo,e.length-this.eo),this._current===this.sc&&(e=e.cloneNode(!0)).deleteData(0,this.so))),e},remove:function(){var e,t,i=this._current;!o(i)||i!==this.sc&&i!==this.ec?i.parentNode&&v(i):(e=i===this.sc?this.so:0)!=(t=i===this.ec?this.eo:i.length)&&i.deleteData(e,t-e)},isPartiallySelectedSubtree:function(){return x(this._current,this.range)},getSubtreeIterator:function(){var e;if(this.isSingleCharacterDataNode)(e=this.range.cloneRange()).collapse(!1);else{e=new pe(y(this.range));var t=this._current,i=t,n=0,s=t,a=f(t);l(t,this.sc)&&(i=this.sc,n=this.so),l(t,this.ec)&&(s=this.ec,a=this.eo),ue(e,i,n,s,a)}return new E(e,this.clonePartiallySelectedTextNodes)},detach:function(){this.range=this._current=this._next=this._first=this._last=this.sc=this.so=this.ec=this.eo=null}};var F=[1,3,4,5,7,8,10],T=[2,9,11],O=[1,3,4,5,7,8,10,11],L=[1,3,4,5,7,8];function P(e){return function(t,i){for(var n,s=i?t:t.parentNode;s;){if(n=s.nodeType,h(e,n))return s;s=s.parentNode}return null}}var $=P([9,11]),D=P([5,6,10,12]),j=P([6,10,12]);function R(e,t){if(j(e,t))throw new a("INVALID_NODE_TYPE_ERR")}function B(e,t){if(!h(t,e.nodeType))throw new a("INVALID_NODE_TYPE_ERR")}function N(e,t){if(t<0||t>(o(e)?e.length:e.childNodes.length))throw new a("INDEX_SIZE_ERR")}function I(e,t){if($(e,!0)!==$(t,!0))throw new a("WRONG_DOCUMENT_ERR")}function z(e){if(D(e,!0))throw new a("NO_MODIFICATION_ALLOWED_ERR")}function q(e,t){if(!e)throw new a(t)}function H(e,t){return t<=(o(e)?e.length:e.childNodes.length)}function V(e){return!!e.startContainer&&!!e.endContainer&&!(g&&(i.isBrokenNode(e.startContainer)||i.isBrokenNode(e.endContainer)))&&m(e.startContainer)==m(e.endContainer)&&H(e.startContainer,e.startOffset)&&H(e.endContainer,e.endOffset)}function W(e){if(!V(e))throw new Error("Range error: Range is not valid. This usually happens after DOM mutation. Range: ("+e.inspect()+")")}var U=document.createElement("style"),G=!1;try{U.innerHTML="<b>x</b>",G=3==U.firstChild.nodeType}catch(e){}e.features.htmlParsingConforms=G;var K=G?function(e){var t=this.startContainer,n=c(t);if(!t)throw new a("INVALID_STATE_ERR");var s=null;return 1==t.nodeType?s=t:o(t)&&(s=i.parentElement(t)),(s=null===s||"HTML"==s.nodeName&&i.isHtmlNamespace(c(s).documentElement)&&i.isHtmlNamespace(s)?n.createElement("body"):s.cloneNode(!1)).innerHTML=e,i.fragmentFromNodeChildren(s)}:function(e){var t=y(this).createElement("body");return t.innerHTML=e,i.fragmentFromNodeChildren(t)};function Y(e,t){W(e);var i=e.startContainer,n=e.startOffset,s=e.endContainer,a=e.endOffset,l=i===s;o(s)&&a>0&&a<s.length&&u(s,a,t),o(i)&&n>0&&n<i.length&&(i=u(i,n,t),l?(a-=n,s=i):s==i.parentNode&&a>=r(i)&&a++,n=0),e.setStartAndEnd(i,n,s,a)}function Z(e){W(e);var t=e.commonAncestorContainer.parentNode.cloneNode(!1);return t.appendChild(e.cloneContents()),t.innerHTML}var J=["startContainer","startOffset","endContainer","endOffset","collapsed","commonAncestorContainer"],Q=0,X=1,ee=2,te=3,ie=0,ne=1,se=2,ae=3;function oe(e){e.START_TO_START=Q,e.START_TO_END=X,e.END_TO_END=ee,e.END_TO_START=te,e.NODE_BEFORE=ie,e.NODE_AFTER=ne,e.NODE_BEFORE_AND_AFTER=se,e.NODE_INSIDE=ae}function re(e){oe(e),oe(e.prototype)}function le(e,t){return function(){W(this);var i,n=this.startContainer,s=this.startOffset,a=this.commonAncestorContainer,o=new E(this,!0);n!==a&&(n=(i=w(p(n,a,!0))).node,s=i.offset),C(o,z),o.reset();var r=e(o);return o.detach(),t(this,n,s,n,s),r}}function ce(t,i){function s(e,t){return function(i){B(i,F),B(m(i),T);var n=(e?b:w)(i);(t?a:l)(this,n.node,n.offset)}}function a(e,t,n){var s=e.endContainer,a=e.endOffset;t===e.startContainer&&n===e.startOffset||(m(t)==m(s)&&1!=d(t,n,s,a)||(s=t,a=n),i(e,t,n,s,a))}function l(e,t,n){var s=e.startContainer,a=e.startOffset;t===e.endContainer&&n===e.endOffset||(m(t)==m(s)&&-1!=d(t,n,s,a)||(s=t,a=n),i(e,s,a,t,n))}var c=function(){};c.prototype=e.rangePrototype,t.prototype=new c,n.extend(t.prototype,{setStart:function(e,t){R(e,!0),N(e,t),a(this,e,t)},setEnd:function(e,t){R(e,!0),N(e,t),l(this,e,t)},setStartAndEnd:function(){var e=arguments,t=e[0],n=e[1],s=t,a=n;switch(e.length){case 3:a=e[2];break;case 4:s=e[2],a=e[3]}i(this,t,n,s,a)},setBoundary:function(e,t,i){this["set"+(i?"Start":"End")](e,t)},setStartBefore:s(!0,!0),setStartAfter:s(!1,!0),setEndBefore:s(!0,!1),setEndAfter:s(!1,!1),collapse:function(e){W(this),e?i(this,this.startContainer,this.startOffset,this.startContainer,this.startOffset):i(this,this.endContainer,this.endOffset,this.endContainer,this.endOffset)},selectNodeContents:function(e){R(e,!0),i(this,e,0,e,f(e))},selectNode:function(e){R(e,!1),B(e,F);var t=b(e),n=w(e);i(this,t.node,t.offset,n.node,n.offset)},extractContents:le(A,i),deleteContents:le(S,i),canSurroundContents:function(){W(this),z(this.startContainer),z(this.endContainer);var e=new E(this,!0),t=e._first&&x(e._first,this)||e._last&&x(e._last,this);return e.detach(),!t},splitBoundaries:function(){Y(this)},splitBoundariesPreservingPositions:function(e){Y(this,e)},normalizeBoundaries:function(){W(this);var e,t=this.startContainer,n=this.startOffset,s=this.endContainer,a=this.endOffset,l=function(e){var t=e.nextSibling;t&&t.nodeType==e.nodeType&&(s=e,a=e.length,e.appendData(t.data),v(t))},c=function(e){var i=e.previousSibling;if(i&&i.nodeType==e.nodeType){t=e;var o=e.length;if(n=i.length,e.insertData(0,i.data),v(i),t==s)a+=n,s=t;else if(s==e.parentNode){var l=r(e);a==l?(s=e,a=o):a>l&&a--}}},d=!0;if(o(s))a==s.length?l(s):0==a&&(e=s.previousSibling)&&e.nodeType==s.nodeType&&(a=e.length,t==s&&(d=!1),e.appendData(s.data),v(s),s=e);else{if(a>0){var u=s.childNodes[a-1];u&&o(u)&&l(u)}d=!this.collapsed}if(d){if(o(t))0==n?c(t):n==t.length&&(e=t.nextSibling)&&e.nodeType==t.nodeType&&(s==e&&(s=t,a+=t.length),t.appendData(e.data),v(e));else if(n<t.childNodes.length){var p=t.childNodes[n];p&&o(p)&&c(p)}}else t=s,n=a;i(this,t,n,s,a)},collapseToPoint:function(e,t){R(e,!0),N(e,t),this.setStartAndEnd(e,t)}}),re(t)}function de(e){e.collapsed=e.startContainer===e.endContainer&&e.startOffset===e.endOffset,e.commonAncestorContainer=e.collapsed?e.startContainer:i.getCommonAncestor(e.startContainer,e.endContainer)}function ue(e,t,n,s,a){e.startContainer=t,e.startOffset=n,e.endContainer=s,e.endOffset=a,e.document=i.getDocument(t),de(e)}function pe(e){this.startContainer=e,this.startOffset=0,this.endContainer=e,this.endOffset=0,this.document=e,de(this)}n.extend(e.rangePrototype,{compareBoundaryPoints:function(e,t){var i,n,s,a;W(this),I(this.startContainer,t.startContainer);var o=e==te||e==Q?"start":"end",r=e==X||e==Q?"start":"end";return i=this[o+"Container"],n=this[o+"Offset"],s=t[r+"Container"],a=t[r+"Offset"],d(i,n,s,a)},insertNode:function(e){if(W(this),B(e,O),z(this.startContainer),l(e,this.startContainer))throw new a("HIERARCHY_REQUEST_ERR");var t=k(e,this.startContainer,this.startOffset);this.setStartBefore(t)},cloneContents:function(){var e,t;if(W(this),this.collapsed)return y(this).createDocumentFragment();if(this.startContainer===this.endContainer&&o(this.startContainer))return(e=this.startContainer.cloneNode(!0)).data=e.data.slice(this.startOffset,this.endOffset),(t=y(this).createDocumentFragment()).appendChild(e),t;var i=new E(this,!0);return e=function e(t){for(var i,n,s,o=y(t.range).createDocumentFragment();n=t.next();){if(i=t.isPartiallySelectedSubtree(),n=n.cloneNode(!i),i&&(s=t.getSubtreeIterator(),n.appendChild(e(s)),s.detach()),10==n.nodeType)throw new a("HIERARCHY_REQUEST_ERR");o.appendChild(n)}return o}(i),i.detach(),e},canSurroundContents:function(){W(this),z(this.startContainer),z(this.endContainer);var e=new E(this,!0),t=e._first&&x(e._first,this)||e._last&&x(e._last,this);return e.detach(),!t},surroundContents:function(e){if(B(e,L),!this.canSurroundContents())throw new a("INVALID_STATE_ERR");var t=this.extractContents();if(e.hasChildNodes())for(;e.lastChild;)e.removeChild(e.lastChild);k(e,this.startContainer,this.startOffset),e.appendChild(t),this.selectNode(e)},cloneRange:function(){W(this);for(var e,t=new pe(y(this)),i=J.length;i--;)t[e=J[i]]=this[e];return t},toString:function(){W(this);var e=this.startContainer;if(e===this.endContainer&&o(e))return 3==e.nodeType||4==e.nodeType?e.data.slice(this.startOffset,this.endOffset):"";var t=[],i=new E(this,!0);return C(i,function(e){3!=e.nodeType&&4!=e.nodeType||t.push(e.data)}),i.detach(),t.join("")},compareNode:function(e){W(this);var t=e.parentNode,i=r(e);if(!t)throw new a("NOT_FOUND_ERR");var n=this.comparePoint(t,i),s=this.comparePoint(t,i+1);return n<0?s>0?se:ie:s>0?ne:ae},comparePoint:function(e,t){return W(this),q(e,"HIERARCHY_REQUEST_ERR"),I(e,this.startContainer),d(e,t,this.startContainer,this.startOffset)<0?-1:d(e,t,this.endContainer,this.endOffset)>0?1:0},createContextualFragment:K,toHtml:function(){return Z(this)},intersectsNode:function(e,t){if(W(this),m(e)!=m(this.startContainer))return!1;var i=e.parentNode,n=r(e);if(!i)return!0;var s=d(i,n,this.endContainer,this.endOffset),a=d(i,n+1,this.startContainer,this.startOffset);return t?s<=0&&a>=0:s<0&&a>0},isPointInRange:function(e,t){return W(this),q(e,"HIERARCHY_REQUEST_ERR"),I(e,this.startContainer),d(e,t,this.startContainer,this.startOffset)>=0&&d(e,t,this.endContainer,this.endOffset)<=0},intersectsRange:function(e){return _(this,e,!1)},intersectsOrTouchesRange:function(e){return _(this,e,!0)},intersection:function(e){if(this.intersectsRange(e)){var t=d(this.startContainer,this.startOffset,e.startContainer,e.startOffset),i=d(this.endContainer,this.endOffset,e.endContainer,e.endOffset),n=this.cloneRange();return-1==t&&n.setStart(e.startContainer,e.startOffset),1==i&&n.setEnd(e.endContainer,e.endOffset),n}return null},union:function(e){if(this.intersectsOrTouchesRange(e)){var t=this.cloneRange();return-1==d(e.startContainer,e.startOffset,this.startContainer,this.startOffset)&&t.setStart(e.startContainer,e.startOffset),1==d(e.endContainer,e.endOffset,this.endContainer,this.endOffset)&&t.setEnd(e.endContainer,e.endOffset),t}throw new a("Ranges do not intersect")},containsNode:function(e,t){return t?this.intersectsNode(e,!1):this.compareNode(e)==ae},containsNodeContents:function(e){return this.comparePoint(e,0)>=0&&this.comparePoint(e,f(e))<=0},containsRange:function(e){var t=this.intersection(e);return null!==t&&e.equals(t)},containsNodeText:function(e){var t=this.cloneRange();t.selectNode(e);var i=t.getNodes([3]);if(i.length>0){t.setStart(i[0],0);var n=i.pop();return t.setEnd(n,n.length),this.containsRange(t)}return this.containsNodeContents(e)},getNodes:function(e,t){return W(this),function(e,t,i){var n,s=!(!t||!t.length),a=!!i;s&&(n=new RegExp("^("+t.join("|")+")$"));var r=[];return C(new E(e,!1),function(t){if((!s||n.test(t.nodeType))&&(!a||i(t))){var l=e.startContainer;if(t!=l||!o(l)||e.startOffset!=l.length){var c=e.endContainer;t==c&&o(c)&&0==e.endOffset||r.push(t)}}}),r}(this,e,t)},getDocument:function(){return y(this)},collapseBefore:function(e){this.setEndBefore(e),this.collapse(!1)},collapseAfter:function(e){this.setStartAfter(e),this.collapse(!0)},getBookmark:function(t){var n=y(this),s=e.createRange(n);t=t||i.getBody(n),s.selectNodeContents(t);var a=this.intersection(s),o=0,r=0;return a&&(s.setEnd(a.startContainer,a.startOffset),r=(o=s.toString().length)+a.toString().length),{start:o,end:r,containerNode:t}},moveToBookmark:function(e){var t=e.containerNode,i=0;this.setStart(t,0),this.collapse(!0);for(var n,s,a,o,r=[t],l=!1,c=!1;!c&&(n=r.pop());)if(3==n.nodeType)s=i+n.length,!l&&e.start>=i&&e.start<=s&&(this.setStart(n,e.start-i),l=!0),l&&e.end>=i&&e.end<=s&&(this.setEnd(n,e.end-i),c=!0),i=s;else for(a=(o=n.childNodes).length;a--;)r.push(o[a])},getName:function(){return"DomRange"},equals:function(e){return pe.rangesEqual(this,e)},isValid:function(){return V(this)},inspect:function(){return M(this)},detach:function(){}}),ce(pe,ue),n.extend(pe,{rangeProperties:J,RangeIterator:E,copyComparisonConstants:re,createPrototypeRange:ce,inspect:M,toHtml:Z,getRangeDocument:y,rangesEqual:function(e,t){return e.startContainer===t.startContainer&&e.startOffset===t.startOffset&&e.endContainer===t.endContainer&&e.endOffset===t.endOffset}}),e.DomRange=pe}),w.createCoreModule("WrappedRange",["DomRange"],function(e,t){var i,n,s=e.dom,a=e.util,o=s.DomPosition,r=e.DomRange,l=s.getBody,c=s.getContentDocument,d=s.isCharacterDataNode;if(e.features.implementsDomRange&&function(){var n,o,d=r.rangeProperties;function u(e){for(var t,i=d.length;i--;)e[t=d[i]]=e.nativeRange[t];e.collapsed=e.startContainer===e.endContainer&&e.startOffset===e.endOffset}i=function(e){if(!e)throw t.createError("WrappedRange: Range must be specified");this.nativeRange=e,u(this)},r.createPrototypeRange(i,function(e,t,i,n,s){var a=e.startContainer!==t||e.startOffset!=i,o=e.endContainer!==n||e.endOffset!=s,r=!e.equals(e.nativeRange);(a||o||r)&&(e.setEnd(n,s),e.setStart(t,i))}),(n=i.prototype).selectNode=function(e){this.nativeRange.selectNode(e),u(this)},n.cloneContents=function(){return this.nativeRange.cloneContents()},n.surroundContents=function(e){this.nativeRange.surroundContents(e),u(this)},n.collapse=function(e){this.nativeRange.collapse(e),u(this)},n.cloneRange=function(){return new i(this.nativeRange.cloneRange())},n.refresh=function(){u(this)},n.toString=function(){return this.nativeRange.toString()};var p=document.createTextNode("test");l(document).appendChild(p);var f=document.createRange();f.setStart(p,0),f.setEnd(p,0);try{f.setStart(p,1),n.setStart=function(e,t){this.nativeRange.setStart(e,t),u(this)},n.setEnd=function(e,t){this.nativeRange.setEnd(e,t),u(this)},o=function(e){return function(t){this.nativeRange[e](t),u(this)}}}catch(e){n.setStart=function(e,t){try{this.nativeRange.setStart(e,t)}catch(i){this.nativeRange.setEnd(e,t),this.nativeRange.setStart(e,t)}u(this)},n.setEnd=function(e,t){try{this.nativeRange.setEnd(e,t)}catch(i){this.nativeRange.setStart(e,t),this.nativeRange.setEnd(e,t)}u(this)},o=function(e,t){return function(i){try{this.nativeRange[e](i)}catch(n){this.nativeRange[t](i),this.nativeRange[e](i)}u(this)}}}n.setStartBefore=o("setStartBefore","setEndBefore"),n.setStartAfter=o("setStartAfter","setEndAfter"),n.setEndBefore=o("setEndBefore","setStartBefore"),n.setEndAfter=o("setEndAfter","setStartAfter"),n.selectNodeContents=function(e){this.setStartAndEnd(e,0,s.getNodeLength(e))},f.selectNodeContents(p),f.setEnd(p,3);var h=document.createRange();h.selectNodeContents(p),h.setEnd(p,4),h.setStart(p,2),-1==f.compareBoundaryPoints(f.START_TO_END,h)&&1==f.compareBoundaryPoints(f.END_TO_START,h)?n.compareBoundaryPoints=function(e,t){return e==(t=t.nativeRange||t).START_TO_END?e=t.END_TO_START:e==t.END_TO_START&&(e=t.START_TO_END),this.nativeRange.compareBoundaryPoints(e,t)}:n.compareBoundaryPoints=function(e,t){return this.nativeRange.compareBoundaryPoints(e,t.nativeRange||t)};var m=document.createElement("div");m.innerHTML="123";var g=m.firstChild,v=l(document);v.appendChild(m),f.setStart(g,1),f.setEnd(g,2),f.deleteContents(),"13"==g.data&&(n.deleteContents=function(){this.nativeRange.deleteContents(),u(this)},n.extractContents=function(){var e=this.nativeRange.extractContents();return u(this),e}),v.removeChild(m),v=null,a.isHostMethod(f,"createContextualFragment")&&(n.createContextualFragment=function(e){return this.nativeRange.createContextualFragment(e)}),l(document).removeChild(p),n.getName=function(){return"WrappedRange"},e.WrappedRange=i,e.createNativeRange=function(e){return(e=c(e,t,"createNativeRange")).createRange()}}(),e.features.implementsTextRange){var u=function(e,t,i,n,a){var r=e.duplicate();r.collapse(i);var l=r.parentElement();if(s.isOrIsAncestorOf(t,l)||(l=t),!l.canHaveHTML){var c=new o(l.parentNode,s.getNodeIndex(l));return{boundaryPosition:c,nodeInfo:{nodeIndex:c.offset,containerElement:c.node}}}var u=s.getDocument(l).createElement("span");u.parentNode&&s.removeNode(u);for(var p,f,h,m,g,v=i?"StartToStart":"StartToEnd",x=a&&a.containerElement==l?a.nodeIndex:0,y=l.childNodes.length,b=y,w=b;w==y?l.appendChild(u):l.insertBefore(u,l.childNodes[w]),r.moveToElementText(u),0!=(p=r.compareEndPoints(v,e))&&x!=b;){if(-1==p){if(b==x+1)break;x=w}else b=b==x+1?x:w;w=Math.floor((x+b)/2),l.removeChild(u)}if(g=u.nextSibling,-1==p&&g&&d(g)){var k;if(r.setEndPoint(i?"EndToStart":"EndToEnd",e),/[\r\n]/.test(g.data)){var _=r.duplicate(),C=_.text.replace(/\r\n/g,"\r").length;for(k=_.moveStart("character",C);-1==(p=_.compareEndPoints("StartToEnd",_));)k++,_.moveStart("character",1)}else k=r.text.length;m=new o(g,k)}else f=(n||!i)&&u.previousSibling,m=(h=(n||i)&&u.nextSibling)&&d(h)?new o(h,0):f&&d(f)?new o(f,f.data.length):new o(l,s.getNodeIndex(u));return s.removeNode(u),{boundaryPosition:m,nodeInfo:{nodeIndex:w,containerElement:l}}},p=function(e,t){var i,n,a,o,r=e.offset,c=s.getDocument(e.node),u=l(c).createTextRange(),p=d(e.node);return p?n=(i=e.node).parentNode:(i=r<(o=e.node.childNodes).length?o[r]:null,n=e.node),(a=c.createElement("span")).innerHTML="&#feff;",i?n.insertBefore(a,i):n.appendChild(a),u.moveToElementText(a),u.collapse(!t),n.removeChild(a),p&&u[t?"moveStart":"moveEnd"]("character",r),u};(n=function(e){this.textRange=e,this.refresh()}).prototype=new r(document),n.prototype.refresh=function(){var e,t,i,n,a=function(e){var t=e.parentElement(),i=e.duplicate();i.collapse(!0);var n=i.parentElement();(i=e.duplicate()).collapse(!1);var a=i.parentElement(),o=n==a?n:s.getCommonAncestor(n,a);return o==t?o:s.getCommonAncestor(t,o)}(this.textRange);0==(n=this.textRange).compareEndPoints("StartToEnd",n)?t=e=u(this.textRange,a,!0,!0).boundaryPosition:(e=(i=u(this.textRange,a,!0,!1)).boundaryPosition,t=u(this.textRange,a,!1,!1,i.nodeInfo).boundaryPosition),this.setStart(e.node,e.offset),this.setEnd(t.node,t.offset)},n.prototype.getName=function(){return"WrappedTextRange"},r.copyComparisonConstants(n);var f=function(e){if(e.collapsed)return p(new o(e.startContainer,e.startOffset),!0);var t=p(new o(e.startContainer,e.startOffset),!0),i=p(new o(e.endContainer,e.endOffset),!1),n=l(r.getRangeDocument(e)).createTextRange();return n.setEndPoint("StartToStart",t),n.setEndPoint("EndToEnd",i),n};if(n.rangeToTextRange=f,n.prototype.toTextRange=function(){return f(this)},e.WrappedTextRange=n,!e.features.implementsDomRange||e.config.preferTextRange){var h=Function("return this;")();void 0===h.Range&&(h.Range=n),e.createNativeRange=function(e){return e=c(e,t,"createNativeRange"),l(e).createTextRange()},e.WrappedRange=n}}e.createRange=function(i){return i=c(i,t,"createRange"),new e.WrappedRange(e.createNativeRange(i))},e.createRangyRange=function(e){return e=c(e,t,"createRangyRange"),new r(e)},a.createAliasForDeprecatedMethod(e,"createIframeRange","createRange"),a.createAliasForDeprecatedMethod(e,"createIframeRangyRange","createRangyRange"),e.addShimListener(function(t){var i=t.document;void 0===i.createRange&&(i.createRange=function(){return e.createRange(i)}),i=t=null})}),w.createCoreModule("WrappedSelection",["DomRange","WrappedRange"],function(e,t){e.config.checkSelectionRanges=!0;var i,n,s=e.dom,a=e.util,o=a.isHostMethod,r=e.DomRange,l=e.WrappedRange,c=e.DOMException,d=s.DomPosition,u=e.features,p=s.getDocument,f=s.getBody,h=r.rangesEqual;function m(e){return"string"==typeof e?/^backward(s)?$/i.test(e):!!e}function g(e,i){if(e){if(s.isWindow(e))return e;if(e instanceof q)return e.win;var n=s.getContentDocument(e,t,i);return s.getWindow(n)}return window}function v(e){return g(e,"getDocSelection").document.selection}function x(e){var t=!1;return e.anchorNode&&(t=1==s.comparePoints(e.anchorNode,e.anchorOffset,e.focusNode,e.focusOffset)),t}var y=o(window,"getSelection"),b=a.isHostObject(document,"selection");u.implementsWinGetSelection=y,u.implementsDocSelection=b;var w=b&&(!y||e.config.preferTextRange);if(w)i=v,e.isSelectionValid=function(e){var t=g(e,"isSelectionValid").document,i=t.selection;return"None"!=i.type||p(i.createRange().parentElement())==t};else{if(!y)return t.fail("Neither document.selection or window.getSelection() detected."),!1;i=function(e){return g(e,"getWinSelection").getSelection()},e.isSelectionValid=function(){return!0}}e.getNativeSelection=i;var k=i();if(!k)return t.fail("Native selection was null (possibly issue 138?)"),!1;var _=e.createNativeRange(document),C=f(document),S=a.areHostProperties(k,["anchorNode","focusNode","anchorOffset","focusOffset"]);u.selectionHasAnchorAndFocus=S;var A=o(k,"extend");u.selectionHasExtend=A;var M="number"==typeof k.rangeCount;u.selectionHasRangeCount=M;var E=!1,F=!0,T=A?function(t,i){var n=r.getRangeDocument(i),s=e.createRange(n);s.collapseToPoint(i.endContainer,i.endOffset),t.addRange(j(s)),t.extend(i.startContainer,i.startOffset)}:null;a.areHostMethods(k,["addRange","getRangeAt","removeAllRanges"])&&"number"==typeof k.rangeCount&&u.implementsDomRange&&function(){var t=window.getSelection();if(t){for(var i=t.rangeCount,n=i>1,a=[],o=x(t),r=0;r<i;++r)a[r]=t.getRangeAt(r);var l=s.createTestElement(document,"",!1),c=l.appendChild(document.createTextNode("   ")),d=document.createRange();if(d.setStart(c,1),d.collapse(!0),t.removeAllRanges(),t.addRange(d),F=1==t.rangeCount,t.removeAllRanges(),!n){var u=window.navigator.appVersion.match(/Chrome\/(.*?) /);if(u&&parseInt(u[1])>=36)E=!1;else{var p=d.cloneRange();d.setStart(c,0),p.setEnd(c,3),p.setStart(c,2),t.addRange(d),t.addRange(p),E=2==t.rangeCount}}for(s.removeNode(l),t.removeAllRanges(),r=0;r<i;++r)0==r&&o?T?T(t,a[r]):(e.warn("Rangy initialization: original selection was backwards but selection has been restored forwards because the browser does not support Selection.extend"),t.addRange(a[r])):t.addRange(a[r])}}(),u.selectionSupportsMultipleRanges=E,u.collapsedNonEditableSelectionsSupported=F;var O,L,P=!1;function $(e,t,i){var n=i?"end":"start",s=i?"start":"end";e.anchorNode=t[n+"Container"],e.anchorOffset=t[n+"Offset"],e.focusNode=t[s+"Container"],e.focusOffset=t[s+"Offset"]}function D(e){e.anchorNode=e.focusNode=null,e.anchorOffset=e.focusOffset=0,e.rangeCount=0,e.isCollapsed=!0,e._ranges.length=0}function j(t){var i;return t instanceof r?((i=e.createNativeRange(t.getDocument())).setEnd(t.endContainer,t.endOffset),i.setStart(t.startContainer,t.startOffset)):t instanceof l?i=t.nativeRange:u.implementsDomRange&&t instanceof s.getWindow(t.startContainer).Range&&(i=t),i}function R(e){var i=e.getNodes();if(!function(e){if(!e.length||1!=e[0].nodeType)return!1;for(var t=1,i=e.length;t<i;++t)if(!s.isAncestorOf(e[0],e[t]))return!1;return!0}(i))throw t.createError("getSingleElementFromRange: range "+e.inspect()+" did not consist of a single element");return i[0]}function B(e){return!!e&&void 0!==e.text}function N(e,t){var i=new l(t);e._ranges=[i],$(e,i,!1),e.rangeCount=1,e.isCollapsed=i.collapsed}function I(t){if(t._ranges.length=0,"None"==t.docSelection.type)D(t);else{var i=t.docSelection.createRange();if(B(i))N(t,i);else{t.rangeCount=i.length;for(var n,s=p(i.item(0)),a=0;a<t.rangeCount;++a)(n=e.createRange(s)).selectNode(i.item(a)),t._ranges.push(n);t.isCollapsed=1==t.rangeCount&&t._ranges[0].collapsed,$(t,t._ranges[t.rangeCount-1],!1)}}}function z(e,i){for(var n=e.docSelection.createRange(),s=R(i),a=p(n.item(0)),o=f(a).createControlRange(),r=0,l=n.length;r<l;++r)o.add(n.item(r));try{o.add(s)}catch(e){throw t.createError("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)")}o.select(),I(e)}function q(e,t,i){this.nativeSelection=e,this.docSelection=t,this._ranges=[],this.win=i,this.refresh()}function H(e){e.win=e.anchorNode=e.focusNode=e._ranges=null,e.rangeCount=e.anchorOffset=e.focusOffset=0,e.detached=!0}C&&o(C,"createControlRange")&&(O=C.createControlRange(),a.areHostProperties(O,["item","add"])&&(P=!0)),u.implementsControlRange=P,n=S?function(e){return e.anchorNode===e.focusNode&&e.anchorOffset===e.focusOffset}:function(e){return!!e.rangeCount&&e.getRangeAt(e.rangeCount-1).collapsed},o(k,"getRangeAt")?L=function(e,t){try{return e.getRangeAt(t)}catch(e){return null}}:S&&(L=function(t){var i=p(t.anchorNode),n=e.createRange(i);return n.setStartAndEnd(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),n.collapsed!==this.isCollapsed&&n.setStartAndEnd(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset),n}),q.prototype=e.selectionPrototype;var V=[];function W(e,t){for(var i,n,s=V.length;s--;)if(n=(i=V[s]).selection,"deleteAll"==t)H(n);else if(i.win==e)return"delete"==t?(V.splice(s,1),!0):n;return"deleteAll"==t&&(V.length=0),null}var U=function(e){if(e&&e instanceof q)return e.refresh(),e;var t=W(e=g(e,"getNativeSelection")),n=i(e),s=b?v(e):null;return t?(t.nativeSelection=n,t.docSelection=s,t.refresh()):(t=new q(n,s,e),V.push({win:e,selection:t})),t};e.getSelection=U,a.createAliasForDeprecatedMethod(e,"getIframeSelection","getSelection");var G,K=q.prototype;function Y(e,i){for(var n,s=p(i[0].startContainer),a=f(s).createControlRange(),o=0,r=i.length;o<r;++o){n=R(i[o]);try{a.add(n)}catch(e){throw t.createError("setRanges(): Element within one of the specified Ranges could not be added to control selection (does it have layout?)")}}a.select(),I(e)}if(!w&&S&&a.areHostMethods(k,["removeAllRanges","addRange"])){K.removeAllRanges=function(){this.nativeSelection.removeAllRanges(),D(this)};var Z=function(e,t){T(e.nativeSelection,t),e.refresh()};K.addRange=M?function(t,i){if(P&&b&&"Control"==this.docSelection.type)z(this,t);else if(m(i)&&A)Z(this,t);else{var s;E?s=this.rangeCount:(this.removeAllRanges(),s=0);var a=j(t).cloneRange();try{this.nativeSelection.addRange(a)}catch(e){}if(this.rangeCount=this.nativeSelection.rangeCount,this.rangeCount==s+1){if(e.config.checkSelectionRanges){var o=L(this.nativeSelection,this.rangeCount-1);o&&!h(o,t)&&(t=new l(o))}this._ranges[this.rangeCount-1]=t,$(this,t,J(this.nativeSelection)),this.isCollapsed=n(this)}else this.refresh()}}:function(e,t){m(t)&&A?Z(this,e):(this.nativeSelection.addRange(j(e)),this.refresh())},K.setRanges=function(e){if(P&&b&&e.length>1)Y(this,e);else{this.removeAllRanges();for(var t=0,i=e.length;t<i;++t)this.addRange(e[t])}}}else{if(!(o(k,"empty")&&o(_,"select")&&P&&w))return t.fail("No means of selecting a Range or TextRange was found"),!1;K.removeAllRanges=function(){try{if(this.docSelection.empty(),"None"!=this.docSelection.type){var e;if(this.anchorNode)e=p(this.anchorNode);else if("Control"==this.docSelection.type){var t=this.docSelection.createRange();t.length&&(e=p(t.item(0)))}if(e)f(e).createTextRange().select(),this.docSelection.empty()}}catch(e){}D(this)},K.addRange=function(t){"Control"==this.docSelection.type?z(this,t):(e.WrappedTextRange.rangeToTextRange(t).select(),this._ranges[0]=t,this.rangeCount=1,this.isCollapsed=this._ranges[0].collapsed,$(this,t,!1))},K.setRanges=function(e){this.removeAllRanges();var t=e.length;t>1?Y(this,e):t&&this.addRange(e[0])}}if(K.getRangeAt=function(e){if(e<0||e>=this.rangeCount)throw new c("INDEX_SIZE_ERR");return this._ranges[e].cloneRange()},w)G=function(t){var i;e.isSelectionValid(t.win)?i=t.docSelection.createRange():(i=f(t.win.document).createTextRange()).collapse(!0),"Control"==t.docSelection.type?I(t):B(i)?N(t,i):D(t)};else if(o(k,"getRangeAt")&&"number"==typeof k.rangeCount)G=function(t){if(P&&b&&"Control"==t.docSelection.type)I(t);else if(t._ranges.length=t.rangeCount=t.nativeSelection.rangeCount,t.rangeCount){for(var i=0,s=t.rangeCount;i<s;++i)t._ranges[i]=new e.WrappedRange(t.nativeSelection.getRangeAt(i));$(t,t._ranges[t.rangeCount-1],J(t.nativeSelection)),t.isCollapsed=n(t)}else D(t)};else{if(!S||"boolean"!=typeof k.isCollapsed||"boolean"!=typeof _.collapsed||!u.implementsDomRange)return t.fail("No means of obtaining a Range or TextRange from the user's selection was found"),!1;G=function(e){var t,i=e.nativeSelection;i.anchorNode?(t=L(i,0),e._ranges=[t],e.rangeCount=1,function(e){var t=e.nativeSelection;e.anchorNode=t.anchorNode,e.anchorOffset=t.anchorOffset,e.focusNode=t.focusNode,e.focusOffset=t.focusOffset}(e),e.isCollapsed=n(e)):D(e)}}K.refresh=function(e){var t=e?this._ranges.slice(0):null,i=this.anchorNode,n=this.anchorOffset;if(G(this),e){var s=t.length;if(s!=this._ranges.length)return!0;if(this.anchorNode!=i||this.anchorOffset!=n)return!0;for(;s--;)if(!h(t[s],this._ranges[s]))return!0;return!1}};var J,Q=function(e,t){var i=e.getAllRanges();e.removeAllRanges();for(var n=0,s=i.length;n<s;++n)h(t,i[n])||e.addRange(i[n]);e.rangeCount||D(e)};function X(e,t){if(e.win.document!=p(t))throw new c("WRONG_DOCUMENT_ERR")}function ee(t){return function(i,n){var s;this.rangeCount?(s=this.getRangeAt(0))["set"+(t?"Start":"End")](i,n):(s=e.createRange(this.win.document)).setStartAndEnd(i,n),this.setSingleRange(s,this.isBackward())}}function te(e){var t=[],i=new d(e.anchorNode,e.anchorOffset),n=new d(e.focusNode,e.focusOffset),s="function"==typeof e.getName?e.getName():"Selection";if(void 0!==e.rangeCount)for(var a=0,o=e.rangeCount;a<o;++a)t[a]=r.inspect(e.getRangeAt(a));return"["+s+"(Ranges: "+t.join(", ")+")(anchor: "+i.inspect()+", focus: "+n.inspect()+"]"}K.removeRange=P&&b?function(e){if("Control"==this.docSelection.type){for(var t=this.docSelection.createRange(),i=R(e),n=p(t.item(0)),s=f(n).createControlRange(),a=!1,o=0,r=t.length;o<r;++o)t.item(o)!==i||a?s.add(t.item(o)):a=!0;s.select(),I(this)}else Q(this,e)}:function(e){Q(this,e)},!w&&S&&u.implementsDomRange?(J=x,K.isBackward=function(){return J(this)}):J=K.isBackward=function(){return!1},K.isBackwards=K.isBackward,K.toString=function(){for(var e=[],t=0,i=this.rangeCount;t<i;++t)e[t]=""+this._ranges[t];return e.join("")},K.collapse=function(t,i){X(this,t);var n=e.createRange(t);n.collapseToPoint(t,i),this.setSingleRange(n),this.isCollapsed=!0},K.collapseToStart=function(){if(!this.rangeCount)throw new c("INVALID_STATE_ERR");var e=this._ranges[0];this.collapse(e.startContainer,e.startOffset)},K.collapseToEnd=function(){if(!this.rangeCount)throw new c("INVALID_STATE_ERR");var e=this._ranges[this.rangeCount-1];this.collapse(e.endContainer,e.endOffset)},K.selectAllChildren=function(t){X(this,t);var i=e.createRange(t);i.selectNodeContents(t),this.setSingleRange(i)},K.deleteFromDocument=function(){if(P&&b&&"Control"==this.docSelection.type){for(var e,t=this.docSelection.createRange();t.length;)e=t.item(0),t.remove(e),s.removeNode(e);this.refresh()}else if(this.rangeCount){var i=this.getAllRanges();if(i.length){this.removeAllRanges();for(var n=0,a=i.length;n<a;++n)i[n].deleteContents();this.addRange(i[a-1])}}},K.eachRange=function(e,t){for(var i=0,n=this._ranges.length;i<n;++i)if(e(this.getRangeAt(i)))return t},K.getAllRanges=function(){var e=[];return this.eachRange(function(t){e.push(t)}),e},K.setSingleRange=function(e,t){this.removeAllRanges(),this.addRange(e,t)},K.callMethodOnEachRange=function(e,t){var i=[];return this.eachRange(function(n){i.push(n[e].apply(n,t||[]))}),i},K.setStart=ee(!0),K.setEnd=ee(!1),e.rangePrototype.select=function(e){U(this.getDocument()).setSingleRange(this,e)},K.changeEachRange=function(e){var t=[],i=this.isBackward();this.eachRange(function(i){e(i),t.push(i)}),this.removeAllRanges(),i&&1==t.length?this.addRange(t[0],"backward"):this.setRanges(t)},K.containsNode=function(e,t){return this.eachRange(function(i){return i.containsNode(e,t)},!0)||!1},K.getBookmark=function(e){return{backward:this.isBackward(),rangeBookmarks:this.callMethodOnEachRange("getBookmark",[e])}},K.moveToBookmark=function(t){for(var i,n,s=[],a=0;i=t.rangeBookmarks[a++];)(n=e.createRange(this.win)).moveToBookmark(i),s.push(n);t.backward?this.setSingleRange(s[0],"backward"):this.setRanges(s)},K.saveRanges=function(){return{backward:this.isBackward(),ranges:this.callMethodOnEachRange("cloneRange")}},K.restoreRanges=function(e){this.removeAllRanges();for(var t,i=0;t=e.ranges[i];++i)this.addRange(t,e.backward&&0==i)},K.toHtml=function(){var e=[];return this.eachRange(function(t){e.push(r.toHtml(t))}),e.join("")},u.implementsTextRange&&(K.getNativeTextRange=function(){var i;if(i=this.docSelection){var n=i.createRange();if(B(n))return n;throw t.createError("getNativeTextRange: selection is a control selection")}if(this.rangeCount>0)return e.WrappedTextRange.rangeToTextRange(this.getRangeAt(0));throw t.createError("getNativeTextRange: selection contains no range")}),K.getName=function(){return"WrappedSelection"},K.inspect=function(){return te(this)},K.detach=function(){W(this.win,"delete"),H(this)},q.detachAll=function(){W(null,"deleteAll")},q.inspect=te,q.isDirectionBackward=m,e.Selection=q,e.selectionPrototype=K,e.addShimListener(function(e){void 0===e.getSelection&&(e.getSelection=function(){return U(e)}),e=null})});var $=!1,D=function(e){$||($=!0,!w.initialized&&w.config.autoInitialize&&M())};return y&&("complete"==document.readyState?D():(r(document,"addEventListener")&&document.addEventListener("DOMContentLoaded",D,!1),v(window,"load",D))),w})?n.call(t,i,t,e):n)||(e.exports=s)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),s=i.n(n);s.a.use(i(145)),s.a.http.headers.common["X-CSRF-TOKEN"]=document.querySelector("#csrf-token").getAttribute("value"),s.a.http.interceptors.push({response:function(e){return 401===e.status&&(this.$root.showLoginModal=!0),e}})},,,,,,,,,,,,,,,,,function(e,t,i){(function(e,t){e.cp_url=function(e){return(e=Statamic.cpRoot+"/"+e).replace(/\/+/g,"/")},e.resource_url=function(e){return(e=Statamic.resourceUrl+"/"+e).replace(/\/+/g,"/")},e.get_from_segment=function(e){return Statamic.urlPath.split("/").splice(e).join("/")},e.format_input_options=function(e){if("string"==typeof e[0])return e;var i=[];return t.each(e,function(e,t,n){i.push({value:t,text:e})}),i},e.file_icon=function(e){return resource_url("img/filetypes/"+e+".png")},e.dd=function(e){console.log(e)},e.data_get=function(e,t){return t.split(".").reduce(function(e,t){return void 0===e||null===e?e:e[t]},e)},e.Cookies=i(147),e.tailwind_width_class=function(e){return"w-"+({25:"1/4",33:"1/3",50:"1/2",66:"2/3",75:"3/4",100:"full"}[e]||"full")}}).call(t,i(8),i(1))},function(e,t){String.prototype.includes||(String.prototype.includes=function(e,t){"use strict";return"number"!=typeof t&&(t=0),!(t+e.length>this.length)&&-1!==this.indexOf(e,t)})},function(e,t,i){(function(e){e.mixin({objMap:function(t,i,n){return e.reduce(t,function(e,s,a){return e[a]=i.call(n,s,a,t),e},{},n)},objFilter:function(t,i,n){return e.reduce(t,function(e,s,a){return i.call(n,s,a,t)&&(e[a]=s),e},{},n)},objReject:function(t,i,n){return e.reduce(t,function(e,s,a){return i.call(n,s,a,t)||(e[a]=s),e},{},n)}})}).call(t,i(1))},function(e,t,i){(function(e,t){e.extend(e.fn,{within:function(e){return this.filter(function(){return t(this).closest(e).length})}})}).call(t,i(2),i(2))},function(e,t,i){(function(e){e.Redactor.prototype.assets=function(){return{init:function(){if(this.assets.vue().assetsEnabled){var e=this.button.add("assets",translate_choice("cp.assets",2));this.button.addCallback(e,this.assets.show)}},show:function(){this.selection.save(),this.assets.vue().addAsset()},vue:function(){return this.$editor.closest(".redactor-fieldtype-wrapper")[0].__vue__}}}}).call(t,i(2))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){};n.prototype.setMessages=function(e){this.messages=e},n.prototype.get=function(e,t){if(!this.has(e))return e;var i=this._getMessage(e,t);return null===i?e:(t&&(i=this._applyReplacements(i,t)),i)},n.prototype.has=function(e){return!("string"!=typeof e||!this.messages)&&null!==this._getMessage(e)},n.prototype.choice=function(e,t,i){(i=void 0!==i?i:{}).count=t;var n=this.get(e,i);if(null===n||void 0===n)return n;for(var s=n.split("|"),a=[],o=/{\d+}\s(.+)|\[\d+,\d+\]\s(.+)|\[\d+,Inf\]\s(.+)/,r=0;r<s.length;r++)if(s[r]=s[r].trim(),o.test(s[r])){var l=s[r].split(/\s/);a.push(l.shift()),s[r]=l.join(" ")}if(1===s.length)return n;for(r=0;r<a.length;r++)if(this._testInterval(t,a[r]))return s[r];return 1===t?s[0]:s[1]},n.prototype._parseKey=function(e){if("string"!=typeof e)return null;var t=e.split(".");return e.includes("::")?{source:t.splice(0,t.length-1).join("."),entries:t.slice(t.length-1)}:{source:t[0],entries:t.slice(1)}},n.prototype._getMessage=function(e){if(e=this._parseKey(e),void 0===this.messages[e.source])return null;for(var t=this.messages[e.source];e.entries.length&&(t=t[e.entries.shift()]););return"string"!=typeof t?null:t},n.prototype._applyReplacements=function(e,t){for(var i in t)e=e.split(":"+i).join(t[i]);return e},n.prototype._testInterval=function(e,t){return!1};var s=new n;window.translate=function(e,t){var i=s.get(e,t);return i===e?function(e){for(var t=e.split(/[-_]/),i=0;i<t.length;i++){var n=t[i];t[i]=n.charAt(0).toUpperCase()+n.slice(1)}return t.join(" ")}(i.replace("cp.","")):i},window.translate_choice=function(e,t,i){return s.choice(e,t,i)},s.setMessages(Statamic.translations)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),s=i.n(n),a={install:function(e,t){e.prototype.cp_url=function(e){return cp_url(e)}}},o={install:function(e,t){e.prototype.translate=function(e,t){return translate(e,t)},e.prototype.translate_choice=function(e,t,i){return translate_choice(e,t,i)}}},r={install:function(e,t){e.prototype.resource_url=function(e){return resource_url(e)}}},l={install:function(e,t){e.prototype.file_icon=function(e){return file_icon(e)}}},c=i(216),d=i(148),u={install:function(e,t){e.prototype.$slugify=function(e,t){return Object(d.slugify)(e,{separator:t||"-"})}}};s.a.use(a),s.a.use(o),s.a.use(r),s.a.use(l),s.a.use(c.a),s.a.use(u)},function(e,t,i){"use strict";(function(e){if(Statamic.permissions)var i=JSON.parse(atob(Statamic.permissions));var n=function(t){if(e.contains(i,"super"))return!0;if(2===t.split(":").length-1){var n=t.split(":"),s=n[0]+":";if("delete"===n[2]?s+="delete":s+="manage",e.contains(i,s))return!0}return e.contains(i,t)};t.a={install:function(e,t){e.prototype.can=function(e){return n(e)},e.can=function(e){return n(e)}}}}).call(t,i(1))},,,function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),s=i.n(n);s.a.filter("deslugify",i(220)),s.a.filter("titleize",i(221)),s.a.filter("pre",i(222)),s.a.filter("reverse",i(223)),s.a.filter("pluck",i(224)),s.a.filter("parse",i(225)),s.a.filter("optionize",i(226)),s.a.filter("markdown",i(227)),s.a.filter("caseInsensitiveOrderBy",i(228))},function(e,t){e.exports=function(e){return e.replace(/[-_]/g," ")}},function(e,t){e.exports=function(e){if(!e.split)return e;var t=[];return e.split(" ").forEach(function(e){var i;t.push((i=e).charAt(0).toUpperCase()+i.slice(1).toLowerCase())}),t.join(" ")}},function(e,t){e.exports=function(e){return"<pre><code>"+JSON.stringify(e,null,2)+"</code></pre>"}},function(e,t){e.exports=function(e){return e.split("").reverse().join("")}},function(e,t){e.exports=function(e,t){return e.map(function(e){return e[t]})}},function(e,t){e.exports=function(e){return JSON.parse(e)}},function(e,t){e.exports=function(e){return options=JSON.parse(JSON.stringify(e)),format_input_options(options)}},function(e,t,i){var n=i(13);n.setOptions({gfm:!0,breaks:Statamic.markdownHardWrap,tables:!0}),e.exports=function(e){return n(e)}},function(e,t,i){(function(t){e.exports=function(e,i,n){if(!i)return e;var s=n&&n<0?-1:1;return e.slice().sort(function(e,n){return"$key"!==i&&(t.util.isObject(e)&&"$value"in e&&(e=e.$value),t.util.isObject(n)&&"$value"in n&&(n=n.$value)),e=t.util.isObject(e)?t.parsers.path.getPath(e,i):e,n=t.util.isObject(n)?t.parsers.path.getPath(n,i):n,(e="string"==typeof e?e.toLowerCase():e)===(n="string"==typeof n?n.toLowerCase():n)?0:e>n?s:-s})}}).call(t,i(3))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});i(3);var n=i(230),s=i.n(n);window.Dossier=s.a,window.Fieldtype={props:{data:{},config:{},name:{},leaveAlert:{default:!1}},data:function(){return{autoBindChangeWatcher:!0,changeWatcherIsBound:!1,changeWatcherWatchDeep:!0}},computed:{isInsideGridField:function(){for(var e=this;;){var t=e.$parent;if(!t)return!1;if("GridFieldtype"===t.constructor.name)return!0;e=t}}},ready:function(){this.autoBindChangeWatcher&&this.bindChangeWatcher()},methods:{bindChangeWatcher:function(){this.leaveAlert&&(this.changeWatcherIsBound||(this.$watch("data",function(){this.$dispatch("changesMade",!0)},{deep:this.changeWatcherWatchDeep}),this.changeWatcherIsBound=!0))},getReplicatorPreviewText:function(){return this.data},focus:function(){this.$el.focus()}}},window.AutoSlug={data:function(){return{autoSlugOptions:{isActive:!0}}},computed:{autoSlugPublishFieldsComponent:function(){return this.$parent.$parent}},methods:{autoSlug:function(e,t){var i=this;this[t=t||"data"]||(this.$watch(t,function(t){var n=i.autoSlugPublishFieldsComponent.data[e]||"";i.autoSlugOptions.isActive=t===i.$slugify(n)}),this.autoSlugPublishFieldsComponent.$watch("data."+e,function(e){i.autoSlugOptions.isActive&&(i[t]=i.$slugify(e))}))}}}},function(e,t,i){var n,s={};n=i(231),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(232),s=i.n(n),a=i(235);t.default={mixins:[a.a],data:function(){return{loading:!0,items:[],columns:[],sort:null,sortOrder:null,reordering:!1,searchTerm:null}},computed:{hasItems:function(){return!this.loading&&this.items&&this.items.length},noItems:function(){return!this.loading&&this.items&&!this.items.length},checkedItems:function(){return this.items.filter(function(e){return e.checked}).map(function(e){return e.id})},allItemsChecked:function(){return this.items.length===this.checkedItems.length},isSearching:function(){return this.searchTerm.length>=3},getParameters:function(){return{sort:this.sort,order:this.sortOrder,page:this.selectedPage}}},ready:function(){this.getItems()},watch:{searchTerm:function(e){e.length>=3?this.performSearch():this.getItems()}},components:{"dossier-table":s.a},methods:{getItems:function(){this.$http.get(this.ajax.get,this.getParameters,function(e,t,i){this.items=e.items,this.columns=this.parseColumns(e.columns),this.loading=!1,this.pagination=e.pagination}).error(function(){this.$notify.error(translate("cp.error_fetching_data"))})},performSearch:function(){this.$http.get(this.ajax.search+"?q="+this.searchTerm,function(e,t,i){this.items=e,this.loading=!1}).error(function(){this.$notify.error(translate("cp.error_fetching_data"))})},sortBy:function(e,t){this.sort=e,this.sortOrder=t,this.getItems()},removeItemFromList:function(t){var i=e.findWhere(this.items,{id:t}),n=e.indexOf(this.items,i);this.items.splice(n,1)},deleteMultiple:function(){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",2),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.$http.delete(t.ajax.delete,{ids:t.checkedItems},function(i){e.each(t.checkedItems,function(e){t.removeItemFromList(e)})})})},deleteItem:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",1),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.$http.delete(t.ajax.delete,{ids:[e]},function(i){t.removeItemFromList(e)})})},enableReorder:function(){this.reordering=!0,this.$broadcast("reordering.start")},cancelOrder:function(){this.reordering=!1,this.$broadcast("reordering.stop")},saveOrder:function(){this.saving=!0;var t=e.map(this.items,function(e,t){return e.id});this.$http.post(this.ajax.reorder,{ids:t},function(){this.saving=!1,this.$broadcast("reordering.saved"),this.loading=!0,this.getItems(),this.reordering=!1})},parseColumns:function(t){var i=void 0===e.findWhere(t,{link:!0});return e.map(t,function(e,t){"string"==typeof e&&(e={value:e});var n=e.value;return e.value.includes(".")&&(n=e.value.split(".")[0]),{value:e.value,header:translate("cp."+(e.header||n)),extra:e.extra,width:e.width,link:e.link||i&&0==t}})}}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(233),s=i(234),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i,n){var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default={props:["options","items","isSearching"],data:function(){return{columns:this.$parent.columns,reordering:!1}},partials:{cell:'\n            <span :class="{ \'has-status-icon\': $index === 0 }">\n                <span v-if="$index === 0" class="status status-{{ (item.published) ? \'live\' : \'hidden\' }}"\n                      :title="(item.published) ? translate(\'cp.published\') : translate(\'cp.draft\')"\n                ></span>\n                <a v-if="column.link" :href="item.edit_url" class="has-status-icon">\n                    {{{ formatValue(item[column.value]) }}}\n                </a>\n                <template v-else>\n                    {{{ formatValue(item[column.value]) }}}\n                </template>\n            </span>\n        '},computed:{hasCheckboxes:function(){return!1!==this.options.checkboxes},itemsAreChecked:function(){return this.checkedItems.length>0},hasHeaders:function(){return!1!==this.options.headers},hasActions:function(){return void 0!==this.options.partials.actions&&""!==this.options.partials.actions},showBulkActions:function(){return this.hasItems&&this.hasCheckboxes&&this.itemsAreChecked&&!this.reordering},hasItems:function(){return this.$parent.hasItems},reorderable:function(){return this.options.reorderable},checkedItems:function(){return this.items.filter(function(e){return e.checked}).map(function(e){return e.id})},allItemsChecked:function(){return this.items.length===this.checkedItems.length},pagination:function(){return this.$parent.pagination},sortOrder:function(){return this.$parent.sortOrder}},beforeCompile:function(){var t=this;e.each(t.options.partials,function(e,i){t.$options.partials[i]=e})},methods:{registerPartials:function(){e.each(this.options.partials,function(e,t){i.partial(t,e)})},sortBy:function(e){if(!this.isSearching){var t=e.value,i="desc";this.$parent.sort===t&&(i="asc"===this.$parent.sortOrder?"desc":"asc"),this.$parent.sortBy(t,i)}},checkAllItems:function(){var t=!this.allItemsChecked;e.each(this.items,function(e){e.checked=t})},uncheckAllItems:function(){e.each(this.items,function(e){e.checked=!1})},toggle:function(e){e.checked=!e.checked},enableReorder:function(){var e=this;e.reordering=!0,n(this.$els.tbody).sortable({axis:"y",revert:175,placeholder:"placeholder",handle:".drag-handle",forcePlaceholderSize:!0,start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var n=i.item.data("start"),s=i.item.index();e.items.splice(s,0,e.items.splice(n,1)[0])}})},disableReorder:function(){this.reordering=!1,n(this.$els.tbody).sortable("destroy")},saveOrder:function(){this.$parent.saveOrder()},call:function(e){var t=Array.prototype.slice.call(arguments,1);this.$parent[e].apply(this,t)},paginationPageSelected:function(e){this.$parent.selectedPage=e,this.$parent.getItems()},isColumnActive:function(e){return!this.isSearching&&e.value===this.$parent.sort},tableColWidth:function(e){if(e&&100!==e)return"string"==typeof e&&e.endsWith("px")?e:e+"%"},formatValue:function(e){if(e&&"object"===(void 0===e?"undefined":s(e))&&!Array.isArray()&&e.thumbnail){var t='<span class="img"><img src="'+e.thumbnail+'" alt="'+e.value+'" />';return e.value&&(t+="<span>"+e.value+"</span>"),t+="</span>"}return Array.isArray(e)?e.join(", "):e}},events:{"reordering.start":function(){this.enableReorder()},"reordering.saved":function(){this.reordering=!1},"reordering.stop":function(){this.disableReorder()}}}}.call(t,i(1),i(3),i(2))},function(e,t){e.exports=" <div class=dossier-table-wrapper> <table :class=\"['dossier', { 'has-checkboxes': hasCheckboxes }]\"> <thead v-if=hasHeaders> <tr> <th class=checkbox-col v-if=hasCheckboxes> <input type=checkbox id=checkbox-all :checked=allItemsChecked @click=checkAllItems /> <label for=checkbox-all></label> </th> <th v-for=\"column in columns\" @click=sortBy(column) :class=\"['column-' + column.value, {'active': isColumnActive(column), 'column-sortable': !isSearching, 'extra-col': column.extra} ]\" :style=\"{ width: tableColWidth(column.width) }\"> {{ column.header }} <i v-if=isColumnActive(column) class=\"icon icon-chevron-{{ sortOrder === 'asc' ? 'up' : 'down' }}\"></i> </th> <th class=column-actions v-if=hasActions></th> </tr> </thead> <tbody v-el:tbody> <tr v-for=\"item in items\"> <td class=checkbox-col v-if=\"hasCheckboxes && !reordering\"> <input type=checkbox :id=\"'checkbox-' + $index\" :checked=item.checked @change=toggle(item) /> <label :for=\"'checkbox-' + $index\"></label> </td> <td class=checkbox-col v-if=reordering> <div class=drag-handle> <i class=\"icon icon-menu\"></i> </div> </td> <td v-for=\"(i, column) in columns\" :class=\"[\n                    `cell-${column.value}`, {\n                        'extra-col': column.extra,\n                        'empty-col': !item[column.value],\n                        'first-cell': i === 0\n                    }]\n                \"> <span class=column-label>{{ column.header }}</span> <partial name=cell></partial> </td> <td class=column-actions v-if=hasActions> <div class=\"btn-group action-more\"> <button type=button class=\"btn-more dropdown-toggle\" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class=\"icon icon-dots-three-vertical\"></i> </button> <ul class=dropdown-menu> <partial name=actions></partial> </ul> </div> </td> </tr> </tbody> </table> <div v-if=showBulkActions :class=\"{ 'bulk-actions': true, 'no-checkboxes': !hasCheckboxes }\"> <button type=button class=\"btn action\" @click=uncheckAllItems> {{ translate('cp.uncheck_all') }} </button> <button type=button class=\"btn btn-delete action\" @click.prevent=\"call('deleteMultiple', 'foo', 'bar')\"> {{ translate('cp.delete') }} {{ checkedItems.length }} {{ translate_choice('cp.items', checkedItems.length)}} </button> </div> <pagination v-if=\"!isSearching && pagination.totalPages > 1\" :total=pagination.totalPages :current=pagination.currentPage :segments=pagination.segments @selected=paginationPageSelected> </pagination> </div> "},function(e,t,i){"use strict";t.a={data:function(){return{pagination:{},selectedPage:1}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),s=i.n(n),a=i(151),o=i(152),r={mixins:[a.a,o.a,Dossier],props:["get","delete","reorder","search","canCreate","canDelete","sort","sortOrder","reorderable","collection","createEntryRoute"],data:function(){return{ajax:{get:this.get,delete:this.delete,reorder:this.reorder,search:this.search},tableOptions:{sort:this.sort,sortOrder:this.sortOrder,reorderable:this.reorderable,partials:{}}}},computed:{getParameters:function(){return{sort:this.sort,order:this.sortOrder,page:this.selectedPage,locale:this.locale,drafts:this.showDrafts?1:0}},createEntryUrl:function(){var e=this.createEntryRoute;return this.locale!==Object.keys(Statamic.locales)[0]&&(e+="?locale="+this.locale),e}},ready:function(){this.addActionPartial(),this.bindLocaleWatcher(),this.bindShowDraftsWatcher()},methods:{addActionPartial:function(){var e="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>";this.canCreate&&(e+="\n                    <li>\n                        <a href=\"#\" @click.prevent=\"call('duplicate', item.id)\">{{ translate('cp.duplicate') }}</a>\n                    </li>"),this.canDelete&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e},onLocaleChanged:function(){this.getItems()},onShowDraftsChanged:function(){this.getItems()},duplicate:function(e){var t=cp_url("collections/entries/"+this.collection+"/duplicate");this.$http.post(t,{id:e}).success(function(e){window.location=e.redirect})}}};s.a.component("addon-listing",i(237)),s.a.component("asset-manager",i(238)),s.a.component("asset-browser",i(243)),s.a.component("asset-container-form",i(305)),s.a.component("asset-container-listing",i(313)),s.a.component("asset-container-wizard",i(314)),s.a.component("collection-listing",i(326)),s.a.component("configure-asset-container-listing",i(327)),s.a.component("configure-collection-listing",i(328)),s.a.component("configure-globals-listing",i(329)),s.a.component("configure-taxonomies-listing",i(330)),s.a.component("entry-listing",r),s.a.component("formset-builder",i(331)),s.a.component("fieldset-builder",i(339)),s.a.component("page-tree",i(348)),s.a.component("publish",i(360)),s.a.component("publish-fields",i(9)),s.a.component("typeahead",i(373)),s.a.component("installer",i(379)),s.a.component("updater",i(391)),s.a.component("importer",i(392)),s.a.component("term-listing",i(393)),s.a.component("taxonomies-listing",i(394)),s.a.component("globals-listing",i(395)),s.a.component("user-listing",i(396)),s.a.component("user-options",i(166)),s.a.component("user-group-listing",i(397)),s.a.component("user-role-listing",i(398)),s.a.component("fieldset-listing",i(399)),s.a.component("form-submission-listing",i(400)),s.a.component("roles",i(401)),s.a.component("login",i(402)),s.a.component("login-modal",i(403)),s.a.component("svg-icon",i(406)),s.a.component("file-icon",i(471)),s.a.component("list",i(474)),s.a.component("alert",i(478)),s.a.component("branch",i(164)),s.a.component("branches",i(165)),s.a.component("fields-builder",i(479)),s.a.component("fieldset-fields",i(481)),s.a.component("fieldset-field",i(167)),s.a.component("fieldtype-selector",i(514)),s.a.component("modal",i(517)),s.a.component("pagination",i(520)),s.a.component("search",i(526)),s.a.component("dossier-sort-selector",i(529))},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("configure/addons/get"),delete:cp_url("configure/addons/delete")},tableOptions:{checkboxes:!1,partials:{cell:"\n                        <a :href=\"item.settings_url\" v-if=\"item.settings_url && column.value === 'name'\">{{ item[column.value] }}</a>\n                        <template v-else>\n                            <template v-if=\"column.value === 'installed'\">{{ item.installed ? '✔' : '✘' }}</template>\n                            <template v-else>{{ item[column.value] }}</template>\n                        </template>\n                    ",actions:'\n                        <li v-if="item.settings_url"><a :href="item.settings_url">Settings</a></li>\n                        <li class="warning" v-if="can(\'super\')">\n                            <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                        </li>\n                    '}}}},methods:{refresh:function(){window.location=cp_url("configure/addons/refresh")}}}},function(e,t,i){var n,s,a={};n=i(239),s=i(242),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{Mover:i(153)},props:["container","path"],data:function(){return{selectedAssets:[],showAssetMover:!1}},ready:function(){this.bindBrowserNavigation()},methods:{bindBrowserNavigation:function(){var e=this;window.history.replaceState({container:this.container,path:this.path},""),window.onpopstate=function(t){e.container=t.state.container,e.path=t.state.path}},pushState:function(){var e=cp_url("assets/browse/"+this.container);"/"!==this.path&&(e+="/"+this.path),window.history.pushState({container:this.container,path:this.path},"",e)},navigate:function(e,t){this.container=e,this.path=t,this.pushState(),this.selectedAssets=[]},updateSelections:function(e){this.selectedAssets=e},deleteSelected:function(){this.$broadcast("delete-assets",this.selectedAssets)},openAssetMover:function(){this.showAssetMover=!0},closeAssetMover:function(){this.showAssetMover=!1},assetsMoved:function(e){this.closeAssetMover(),this.navigate(this.container,e)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["assets","container","folder"],data:function(){return{show:!0,selectedFolder:null,saving:!1,errors:null,warningText:translate("cp.move_file_warning")}},computed:{hasChanged:function(){return this.selectedFolder!==this.folder},fieldtypeConfig:function(){return{container:this.container}}},ready:function(){this.selectedFolder=this.folder},watch:{show:function(e){e||this.cancel()}},methods:{save:function(){var e=this;if(this.hasChanged){this.saving=!0;var t=cp_url("/assets/move"),i={assets:this.assets,folder:this.selectedFolder,container:this.container};this.$http.post(t,i).success(function(t){e.$emit("saved",e.selectedFolder),e.cancel()}).error(function(t){e.saving=!1,e.errors=t})}},cancel:function(){this.$emit("closed")}}}},function(e,t){e.exports=' <modal :show.sync=show :saving=saving class=modal-small> <template slot=header> {{ translate(\'cp.move_file\') }} </template> <template slot=body> <div class="alert alert-warning">{{{ warningText | markdown }}}</div> <div class="alert alert-danger" v-if=errors> <p v-for="error in errors">{{ error }}</p> </div> <div class=form-group> <label>{{ translate(\'cp.folder\') }}</label> <asset_folder-fieldtype :data.sync=selectedFolder :config=fieldtypeConfig> </asset_folder-fieldtype> </div> </template> <template slot=footer> <button class="btn btn-primary" :disabled=!hasChanged @click=save>Save</button> <button type=button class=btn @click=cancel>{{ translate(\'cp.cancel\') }}</button> </template> </modal> '},function(e,t){e.exports=" <div class=asset-manager> <asset-browser :selected-container=container :selected-path=path :selected-assets=selectedAssets @navigated=navigate @selections-updated=updateSelections> <template slot=contextual-actions v-if=selectedAssets.length> <button class=\"btn btn-danger ml-16 mr-2 mb-3\" @click=deleteSelected>{{ translate('cp.delete') }}</button> <div class=\"btn-group mb-3\"> <button class=btn @click=\"selectedAssets = []\">{{ translate('cp.uncheck_all') }}</button> <button class=btn @click=openAssetMover>{{ translate('cp.move') }}</button> </div> </template> </asset-browser> <mover v-if=showAssetMover :assets=selectedAssets :container=container :folder=path @saved=assetsMoved @closed=closeAssetMover> </mover> </div> "},function(e,t,i){var n,s,a={};n=i(244),s=i(304),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(154);t.default={components:{GridListing:i(245),TableListing:i(254),Uploader:i(15),Uploads:i(159),AssetEditor:i(160),FolderEditor:i(298),Breadcrumbs:i(301)},mixins:[n.a],props:["selectedContainer","selectedPath","restrictNavigation","selectedAssets","maxFiles"],data:function(){return{loadingAssets:!0,initializedAssets:!1,loadingContainers:!0,containers:null,container:null,path:null,assets:[],folders:[],folder:{},displayMode:"table",uploads:[],draggingFile:!1,pagination:{},selectedPage:1,editedAssetId:null,showFolderCreator:!1,editedFolderPath:null,editorHasChild:!1,isSearching:!1,sort:"title",sortOrder:"asc"}},computed:{initialized:function(){return this.initializedAssets&&!this.loadingContainers},loading:function(){return this.loadingAssets||this.loadingContainers},hasAssets:function(){return this.assets.length>0},hasSubfolders:function(){return this.subfolders.length>0},isEmpty:function(){return!this.hasAssets&&!this.hasSubfolders},canEdit:function(){return this.can("assets:"+this.container.id+":edit")},showSidebar:function(){return!!this.initialized&&(!this.isSearching&&(!this.restrictNavigation&&Object.keys(this.containers).length>1))},listingComponent:function(){return"grid"===this.displayMode?"GridListing":"TableListing"},fullPath:function(){if(this.container){var e=this.container.id;return"/"!==this.path&&(e+="/"+this.path),e}},subfolders:function(){return this.restrictNavigation?[]:this.folders},uploadElement:function(){return this.$el},showAssetEditor:function(){return Boolean(this.editedAssetId)},showFolderEditor:function(){return null!==this.editedFolderPath},maxFilesReached:function(){return this.maxFiles&&this.selectedAssets.length>=this.maxFiles}},ready:function(){this.path=this.selectedPath,this.loadContainers(),this.displayMode=Cookies.get("statamic.assets.listing_view_mode")||"table"},events:{"close-editor":function(){if(this.editorHasChild)return this.$broadcast("close-child-editor");this.showFolderCreator=!1,this.editedAssetId=null,this.editedFolderPath=null},"refresh-assets":function(){this.loadAssets()},"delete-assets":function(e){this.deleteAsset(e)}},watch:{fullPath:function(){this.loadAssets()},selectedContainer:function(e){this.container=this.containers[e]},selectedPath:function(e){this.path=e},selectedAssets:function(e){this.$emit("selections-updated",e)},searchTerm:function(e){e?this.search():this.loadAssets()}},methods:{loadContainers:function(){var t=this;this.$http.get(cp_url("assets/containers/get")).success(function(i){t.containers=e.chain(i.items).map(function(t){return e.pick(t,"id","title")}).indexBy("id").value(),t.container=t.containers[t.selectedContainer],t.loadingContainers=!1})},loadAssets:function(e){var t=this;this.loadingAssets=!0,this.$http.post(cp_url("assets/browse"),{container:this.container.id,path:this.path,page:this.selectedPage,sort:this.sort,dir:this.sortOrder}).success(function(e){t.assets=e.assets,t.folders=e.folders,t.folder=e.folder,t.pagination=e.pagination,t.selectedPage=e.pagination.currentPage,t.loadingAssets=!1,t.initializedAssets=!0,t.isSearching=!1})},search:function(){var e=this;this.loadingAssets=!0,this.$http.post(cp_url("assets/search"),{term:this.searchTerm,container:this.container.id,folder:this.folder.path,restrictNavigation:this.restrictNavigation}).success(function(t){e.isSearching=!0,e.assets=t.assets,e.folders=[],e.loadingAssets=!1,e.initializedAssets=!0})},folderSelected:function(e){this.path=e,this.selectedPage=1,this.$emit("navigated",this.container.id,this.path)},selectContainer:function(e){this.container=this.containers[e],this.path="/",this.$emit("navigated",this.container.id,this.path)},assetSelected:function(t){1===this.maxFiles&&this.maxFilesReached&&(this.selectedAssets=[t]),this.maxFilesReached||e(this.selectedAssets).contains(t)||(this.selectedAssets.push(t),this.selectedAssets=e(this.selectedAssets).map(function(e){return e}))},assetDeselected:function(t){this.selectedAssets=e(this.selectedAssets).without(t)},editAsset:function(e){this.canEdit&&(this.editedAssetId=e)},deleteAsset:function(t){var i=this;t=Array.isArray(t)?t:[t],swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",t),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){var n=cp_url("assets/delete");i.$http.delete(n,{ids:t}).success(function(n){i.loadAssets(),i.selectedAssets=e(i.selectedAssets).difference(t)})})},closeAssetEditor:function(){this.$dispatch("modal.close"),this.editedAssetId=null},assetSaved:function(){this.closeAssetEditor(),this.loadAssets()},assetDeleted:function(){this.closeAssetEditor(),this.loadAssets()},assetMoved:function(e){this.closeAssetEditor(),this.folderSelected(e)},assetDoubleclicked:function(e){this.assetSelected(e),this.$emit("asset-doubleclicked")},uploadFile:function(){this.$refs.uploader.browse()},paginationPageSelected:function(e){this.selectedPage=e,this.loadAssets()},createFolder:function(){this.showFolderCreator=!0},folderCreatorClosed:function(){this.showFolderCreator=!1},folderCreated:function(e){this.folderSelected(e)},editFolder:function(e){this.editedFolderPath=e},folderEditorClosed:function(){this.editedFolderPath=null},folderDeleted:function(e){this.loadAssets()},uploadsUpdated:function(e){this.$set("uploads",e)},setDisplayMode:function(e){this.displayMode=e,Cookies.set("statamic.assets.listing_view_mode",e)},assetsDraggedToFolder:function(e){var t=this,i=cp_url("/assets/move"),n={assets:this.selectedAssets,folder:e,container:this.container.id};this.$http.post(i,n).success(function(e){t.loadAssets(),t.selectedAssets=[]})},sortBy:function(e){if(!this.isSearching){var t="asc";this.sort===e&&(t="asc"===this.sortOrder?"desc":"asc"),this.sort=e,this.sortOrder=t,this.loadAssets()}}}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(246),s=i(253),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(155);t.default={mixins:[n.a],components:{AssetTile:i(247),FolderTile:i(250)}}},function(e,t,i){var n,s,a={};n=i(248),s=i(249),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(156);t.default={mixins:[n.a],computed:{isImage:function(){return this.asset.is_image},icon:function(){return resource_url("img/filetypes/"+this.asset.extension+".png")},label:function(){return this.asset.title||this.asset.basename}}}},function(e,t){e.exports=" <div class=asset-tile :class=\"{\n         'is-image': isImage && !canShowSvg,\n         'is-svg': canShowSvg,\n         'is-file': !isImage && !canShowSvg,\n         'is-selected': isSelected\n     }\" :title=asset.filename @click=toggle @dblclick=doubleClicked @dragstart=assetDragStart> <div class=asset-thumb-container> <div v-if=canShowSvg class=svg-img :style=svgBackgroundStyle> </div> <template v-else> <div class=asset-thumb v-if=isImage> <img :src=asset.thumbnail> </div> <file-icon v-else :extension=asset.extension></file-icon> </template> </div> <div class=asset-meta :title=label>{{ label }}</div> </div> "},function(e,t,i){var n,s,a={};n=i(251),s=i(252),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(157);t.default={mixins:[n.a]}},function(e,t){e.exports=' <div class="asset-tile is-folder" @click.prevent=selectFolder(folder.path)> <div class=asset-thumb-container> <file-icon extension=folder></file-icon> </div> <div class=asset-meta> <div class=asset-filename :title=label>{{ folder.title }}</div> </div> </div> '},function(e,t){e.exports=' <div class=asset-grid-listing v-if="hasParent && !restrictNavigation || (!isSearching || (isSearching && hasResults))"> <div class="asset-tile is-folder" @click.prevent=selectFolder(folder.parent_path)> <div class=asset-thumb-container> <file-icon extension=folder></file-icon> </div> <div class=asset-meta> <div class=asset-filename>..</div> </div> </div> <folder-tile v-for="folder in subfolders" :folder=folder @selected=selectFolder @editing=editFolder @deleting=deleteFolder> </folder-tile> <asset-tile v-for="asset in assets" :asset=asset :selected-assets=selectedAssets @selected=selectAsset @deselected=deselectAsset @editing=editAsset @doubleclicked=assetDoubleclicked> </asset-tile> </div> '},function(e,t,i){var n,s,a={};n=i(255),s=i(262),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(155);t.default={mixins:[n.a],components:{AssetRow:i(256),FolderRow:i(259)},data:function(){return{columns:[{field:"title",label:translate("cp.title")},{field:"size",label:translate("cp.filesize"),extra:!0},{field:"lastModified",label:translate("cp.date_modified"),extra:!0}]}},computed:{sortOrder:function(){return this.$parent.sortOrder}},methods:{closeDropdowns:function(e){this.$broadcast("close-dropdown",e)},droppedOnFolder:function(e,t){var i=t.dataTransfer.getData("asset");t.dataTransfer.clearData("asset"),""!=i&&this.$emit("assets-dragged-to-folder",e)},isColumnActive:function(e){return!this.isSearching&&e.field===this.$parent.sort}}}},function(e,t,i){var n,s,a={};n=i(257),s=i(258),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(156),s=i(158);t.default={mixins:[n.a,s.a],computed:{canEdit:function(){return this.can("assets:"+this.asset.container+":edit")}},methods:{closeDropdownAndEditAsset:function(){this.showActionsDropdown=!1,this.editAsset()},closeDropdownAndDeleteAsset:function(){this.showActionsDropdown=!1,this.deleteAsset()}}}},function(e,t){e.exports=' <tr @click=toggle @dblclick=doubleClicked :class="{ \'selected\': isSelected }"> <td class=thumbnail-col @dragstart=assetDragStart> <div v-if=canShowSvg class="img svg-img" :style=svgBackgroundStyle> </div> <div class=img v-else> <img v-if=asset.is_image :src=asset.thumbnail /> <file-icon v-else :extension=asset.extension></file-icon> </div> </td> <td class=title-col>{{ asset.title || asset.basename }}</td> <td class="size-col extra-col">{{ asset.size_formatted }}</td> <td class="modifed-col extra-col">{{ asset.last_modified_formatted }}</td> <td class=column-actions> <div class="btn-group action-more" :class="{ open: showActionsDropdown }" v-if=canEdit v-on-clickaway=away> <button type=button class="btn-more dropdown-toggle" @click.prevent.stop=toggleActions> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <li><a @click=closeDropdownAndEditAsset>{{ translate(\'cp.edit\') }}</a></li> <li class=divider></li> <li class=warning><a href="" @click.prevent=closeDropdownAndDeleteAsset>{{ translate(\'cp.delete\') }}</a></li> </ul> </div> </td> </tr> '},function(e,t,i){var n,s,a={};n=i(260),s=i(261),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(157),s=i(158);t.default={mixins:[n.a,s.a]}},function(e,t){e.exports=' <tr @dragover=dragOver @drop=drop> <td> <div class=img> <a href="" @click.prevent=selectFolder(folder.path)> <file-icon extension=folder></file-icon> </a> </div> </td> <td> <a @click=selectFolder(folder.path)> {{ folder.title }} </a> </td> <td colspan=2 class=extra-col></td> <td class=column-actions> <div class="btn-group action-more" :class="{ open: showActionsDropdown }" v-on-clickaway=away> <button type=button class="btn-more dropdown-toggle" aria-haspopup=true aria-expanded=false @click=toggleActions> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <li> <a href="" @click.prevent=editFolder> {{ translate(\'cp.edit\') }} </a> </li> <li class=divider></li> <li class=warning> <a href=# @click.prevent=deleteFolder> {{ translate(\'cp.delete\') }} </a> </li> </ul> </div> </td> </tr> '},function(e,t){e.exports=' <div class=asset-table-listing> <table v-if="!isSearching || (isSearching && hasResults)"> <thead> <tr> <th></th> <th v-for="column in columns" :class="{\n                        \'extra-col\': column.extra,\n                        \'active\': isColumnActive(column),\n                        \'column-sortable\': !isSearching\n                    }" @click="$emit(\'sorted\', column.field)"> {{ column.label }} <i v-if=isColumnActive(column) class="icon icon-chevron-{{ sortOrder === \'asc\' ? \'up\' : \'down\' }}"></i> </th> <th class=column-actions></th> </tr> </thead> <tbody> <tr v-if="hasParent && !restrictNavigation"> <td> <div class=img> <a @click.prevent=selectFolder(folder.parent_path)> <file-icon extension=folder></file-icon> </a> </div> </td> <td> <a href="" @click.prevent=selectFolder(folder.parent_path)>..</a> </td> <td colspan=3>..</td> </tr> <tr is=folderRow v-for="folder in subfolders" :folder=folder @open-dropdown=closeDropdowns @selected=selectFolder @editing=editFolder @deleting=deleteFolder @dropped-on-folder=droppedOnFolder> </tr> <tr is=assetRow v-for="asset in assets" :asset=asset :selected-assets=selectedAssets @open-dropdown=closeDropdowns @selected=selectAsset @deselected=deselectAsset @editing=editAsset @deleting=deleteAsset @assetdragstart=assetDragStart @doubleclicked=assetDoubleclicked> </tr> </tbody> </table> </div> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["domElement","container","path"],data:function(){return{uploads:[]}},computed:{extraData:function(){return{container:this.container,folder:this.path,_token:document.querySelector("#csrf-token").getAttribute("value")}}},ready:function(){this.bindUploader()},destroyed:function(){e(this.domElement).unbind().removeData()},watch:{uploads:function(e){this.$emit("updated",e)},container:function(){this.updateExtraData()},path:function(){this.updateExtraData()}},methods:{browse:function(){e(this.$els.nativeFileField).click()},bindUploader:function(){var t=this;e(this.domElement).dmUploader({url:cp_url("assets"),extraData:this.extraData,onNewFile:function(e,i){t.uploads.push({id:e,basename:i.name,extension:i.name.split(".").pop(),percent:0,errorMessage:null})},onUploadProgress:function(e,n){var s=i(t.uploads).findWhere({id:e});s.percent=n,t.$emit("progress",s,t.uploads)},onUploadSuccess:function(e,n){t.$emit("upload-complete",n.asset,t.uploads);var s=i(t.uploads).findIndex({id:e});t.uploads.splice(s,1)},onComplete:function(){t.$emit("uploads-complete",t.uploads)},onUploadError:function(e,n,s){var a=i(t.uploads).findWhere({id:e});400==s.status?n=s.responseJSON:413==s.status&&(n="This file exceeds your server's max upload filesize limit."),a.errorMessage=n,t.$emit("error",a,t.uploads)}})},updateExtraData:function(){e(this.domElement).data("dmUploader").settings.extraData=this.extraData}}}}.call(t,i(2),i(1))},function(e,t){e.exports=" <div class=asset-uploader> <input type=file multiple=multiple class=hide v-el:native-file-field> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["uploads"],components:{Upload:i(266)},methods:{clearUpload:function(e){this.uploads.splice(e,1)}}}},function(e,t,i){var n,s,a={};n=i(267),s=i(268),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["extension","basename","percent","error"],computed:{status:function(){return this.error?"error":100===this.percent?"pending":"uploading"}},methods:{clear:function(){this.$emit("clear")}}}},function(e,t){e.exports=' <tr> <td class=column-status :class=status> <span class="icon icon-warning error" v-if="status === \'error\'"></span> <span class="icon icon-circular-graph animation-spin" v-else></span> </td> <td class=column-thumbnail> <div class=img> <file-icon :extension=extension></file-icon> </div> </td> <td class=column-filename> <span class=filename>{{ basename }}</span> </td> <td class=column-progress v-if="status !== \'error\'"> <div class=progress> <div class=progress-bar :style="{ width: percent+\'%\' }"></div> </div> </td> <td class=column-error v-else>{{ error }}</td> <td style="width: 30px"> <a href=# v-if="status == \'error\'" @click.prevent=clear> <i class="icon icon-circle-with-cross"></i> </a> </td> </tr> '},function(e,t){e.exports=" <div class=asset-upload-listing> <div class=asset-upload-listing-header> <h6>{{ translate_choice('cp.uploads', uploads.length) }}</h6> </div> <table> <tbody> <tr is=upload v-for=\"(i, upload) in uploads\" :basename=upload.basename :extension=upload.extension :percent=upload.percent :error=upload.errorMessage @clear=clearUpload(i)> </tr> </tbody> </table> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(16);t.default={components:{FocalPointEditor:i(271),Renamer:i(274),Mover:i(153),PublishFields:i(9)},props:{id:String,hasChild:!1,allowDeleting:{type:Boolean,default:function(){return!0}}},data:function(){return{loading:!0,saving:!1,asset:null,fields:null,publishFields:null,showFocalPointEditor:!1,showRenamer:!1,showMover:!1,errors:[]}},computed:{isImage:function(){return!!this.asset&&this.asset.is_image},hasErrors:function(){return 0!==e.size(this.errors)}},ready:function(){this.load()},events:{"close-child-editor":function(){this.closeFocalPointEditor(),this.closeImageEditor(),this.closeRenamer()}},methods:{load:function(){var e=this;this.loading=!0;var t=cp_url("assets/"+this.id.replace("::","/"));this.$http.get(t).success(function(t){e.asset=t.asset,e.fields=t.fields,e.getFieldset()})},getFieldset:function(){var t=this,i=cp_url("fieldsets-json/"+this.asset.fieldset);this.$http.get(i).success(function(i){var s=new n.a(i);t.publishFields=e.chain(s.sections).map(function(e){return e.fields}).flatten(!0).value(),t.loading=!1})},openFocalPointEditor:function(){this.showFocalPointEditor=!0,this.hasChild=!0},closeFocalPointEditor:function(){this.showFocalPointEditor=!1,this.hasChild=!1},selectFocalPoint:function(e){e="50-50"===e?null:e,this.$set("fields.focus",e)},save:function(){var e=this;this.saving=!0;var t=cp_url("assets/"+this.id.replace("::","/"));this.$http.post(t,this.fields).success(function(t){e.$emit("saved",t.asset),e.saving=!1}).error(function(t){e.$notify.error(translate("cp.error"),{timeout:2e3}),e.saving=!1,e.errors=t}),this.$dispatch("changesMade",!1)},delete:function(){var e=this;if(confirm(translate("cp.are_you_sure"))){this.saving=!0;var t=cp_url("assets/delete");this.$http.delete(t,{ids:this.asset.id}).success(function(t){e.$emit("deleted",e.asset.id),e.saving=!1})}},close:function(){this.$emit("closed")},openRenamer:function(){this.showRenamer=!0,this.hasChild=!0},closeRenamer:function(){this.showRenamer=!1,this.hasChild=!1},assetRenamed:function(e){this.asset=e,this.$emit("saved",e)},openMover:function(){this.showMover=!0,this.hasChild=!0},closeMover:function(){this.showMover=!1,this.hasChild=!1},assetMoved:function(e,t){this.asset=e,this.$emit("moved",e,t)},download:function(){window.open(this.asset.download_url)}}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(272),s=i(273),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","image"],data:function(){return{x:50,y:50}},computed:{bgPosition:function(){return this.x+"% "+this.y+"%"},bgImage:function(){return encodeURI(this.image)}},ready:function(){var e=(this.data||"50-50").split("-");this.x=e[0],this.y=e[1]},methods:{define:function(t){var i=e(t.target),n=i.width(),s=i.height(),a=t.pageX-i.offset().left,o=t.pageY-i.offset().top;this.x=(a/n*100).toFixed(),this.y=(o/s*100).toFixed()},select:function(){this.$emit("selected",this.x+"-"+this.y),this.close()},close:function(){this.$emit("closed")},reset:function(){this.x=50,this.y=50}}}}.call(t,i(2))},function(e,t){e.exports=' <div class=focal-point> <div class="focal-point-toolbox card"> <div class=form-group> <label>{{ translate(\'cp.focal_point_label\') }}</label> <small class=help-block>{{ translate(\'cp.focal_point_instructions\') }}</small> <div class="focal-point-image inline-block"> <img :src=image @click=define /> <div class=focal-point-reticle :style="{ top: y+\'%\', left: x+\'%\' }"></div> </div> </div> <div class="flexy apart"> <div class=btn-group> <button type=button class="btn btn-default" @click.prevent=close>{{ translate(\'cp.cancel\') }}</button> <button type=button class="btn btn-default" @click.prevent=reset>{{ translate(\'cp.reset\') }}</button> <button type=button class="btn btn-primary" @click=select>{{ translate(\'cp.select\') }}</button> </div> <div class=focal-point-coordinates> <div class=pair> <div class=axis>X</div> <div class=value>{{ x }}<sup>%</sup></div> </div> <div class=pair> <div class=axis>Y</div> <div class=value>{{ y }}<sup>%</sup></div> </div> </div> </div> </div> <div v-for="n in 9" class="frame frame-{{ n+1 }}" :style="{ backgroundImage: \'url(\'+bgImage+\')\', backgroundPosition: bgPosition }"> </div> </div> '},function(e,t,i){var n,s,a={};n=i(275),s=i(276),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["asset"],data:function(){return{show:!0,filename:null,saving:!1,errors:null,warningText:translate("cp.rename_file_warning")}},computed:{hasChanged:function(){return this.asset.filename!==this.filename}},ready:function(){this.filename=this.asset.filename},watch:{show:function(e){e||this.cancel()}},methods:{save:function(){var e=this;if(this.hasChanged){this.saving=!0;var t=cp_url("/assets/rename/"+this.asset.id.replace("::","/"));this.$http.post(t,{filename:this.filename}).success(function(t){e.$emit("saved",t),e.cancel()}).error(function(t){e.saving=!1,e.errors=t,e.$els.input.focus()})}},cancel:function(){this.$emit("closed")}}}},function(e,t){e.exports=' <modal :show.sync=show :saving=saving class=modal-small> <template slot=header> {{ translate(\'cp.rename_file\') }} </template> <template slot=body> <div class="alert alert-warning">{{{ warningText | markdown }}}</div> <div class="alert alert-danger" v-if=errors> <p v-for="error in errors">{{ error }}</p> </div> <div class=form-group> <input type=text autofocus class=form-control v-el:input v-model=filename @keyup.esc=cancel @keyup.enter=save /> </div> </template> <template slot=footer> <button class="btn btn-primary" :disabled=!hasChanged @click=save>Save</button> <button type=button class=btn @click=cancel>{{ translate(\'cp.cancel\') }}</button> </template> </modal> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={components:{MetaField:i(278),RegularField:i(293)},props:{fields:Array,data:Object,errors:Object,hiddenFields:{type:Array,default:[]},autofocus:Boolean,regularTitleField:{type:Boolean,default:!1},env:{type:Object,default:{}}},methods:{componentName:function(e){return this.isMeta(e)?"MetaField":"RegularField"},widthText:function(t){t=t||100;return e.findWhere(this.widths,{value:t}).text},hasError:function(t){return e.has(this.errors,"fields."+t.name)},isVisible:function(e){return!this.hiddenFields.includes(e.name)},isMeta:function(e){if("title"!==e.name||!this.regularTitleField)return e.isMeta||["title","slug","date"].includes(e.name)},definedInEnvironment:function(t){return e.has(this.env,t)}},ready:function(){}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(279),s=i(292),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(161),s=i(280),a=i.n(s),o=i(283),r=i.n(o),l=i(286),c=i.n(l),d=i(289),u=i.n(d);t.default={mixins:[n.a],components:{DateField:r.a,SlugField:a.a,TitleField:c.a,TaxonomyField:u.a},computed:{componentName:function(){var e="taxonomy"===this.field.type?"taxonomy":this.field.name;return""+e[0].toUpperCase()+e.slice(1)+"Field"},display:function(){return this.$refs.field.display||this.config.display||this.$refs.field.displayFallback||this.field.name},instructions:function(){return this.$refs.field.instructions||this.config.instructions},fieldtypeClass:function(){return this.field.name+"-meta-fieldtype"},isRequired:function(){var e=this.$refs.field.isRequired;return void 0!==e?e:this.field.required},isLocalizable:function(){var e=this.$refs.field.isLocalizable;return void 0!==e?e:this.config.localizable}}}},function(e,t,i){var n,s,a={};n=i(281),s=i(282),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default={mixins:[n.a,AutoSlug],computed:{slug:{get:function(){return this.formData.fields.slug},set:function(e){this.formData.fields.slug=e}},displayFallback:function(){return translate("cp.slug")},isRequired:function(){return!0},isLocalizable:function(){return!0}},ready:function(){this.autoSlug("title","slug")}}},function(e,t){e.exports=' <input type=text v-model=slug class="form-control w-full mono" placeholder="{{ translate(\'cp.new\').toLowerCase() }}-{{ contentType.toLowerCase() }}"/> '},function(e,t,i){var n,s,a={};n=i(284),s=i(285),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default={mixins:[n.a],computed:{displayFallback:function(){return translate("cp.date_and_time")},isLocalizable:function(){return!1}}}},function(e,t){e.exports=" <date-fieldtype name=date :data.sync=formData.fields.date :leave-alert=true :config=config></date-fieldtype> "},function(e,t,i){var n,s,a={};n=i(287),s=i(288),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default={mixins:[n.a],computed:{displayFallback:function(){return translate("cp.title")},isRequired:function(){return!0},isLocalizable:function(){return!0}}}},function(e,t){e.exports=' <input type=text class="form-control type-text" autofocus=autofocus v-model=formData.fields.title /> '},function(e,t,i){var n,s,a={};n=i(290),s=i(291),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10);t.default={mixins:[n.a],computed:{fieldConfig:function(){return{type:"taxonomy",taxonomy:this.config.name,width:this.config.width}}}}},function(e,t){e.exports=" <taxonomy-fieldtype name=categories :config=fieldConfig :data.sync=formData.fields[config.name] :leave-alert=true></taxonomy-fieldtype> "},function(e,t){e.exports=' <div :class=classes> <div class=field-inner> <div v-if=isReadOnly class=read-only-overlay :title="translate(\'cp.read_only\')"></div> <label class=block> {{ display }} <i class=required v-if=isRequired>*</i> </label> <small class=help-block v-if=instructions v-html="instructions | markdown"></small> <component v-ref:field :is=componentName :config=config :autofocus=autofocus></component> </div> </div> '},function(e,t,i){var n,s,a={};n=i(294),s=i(295),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(161);t.default={mixins:[n.a],computed:{componentName:function(){return this.field.type.replace(".","-")+"-fieldtype"},isLocalizable:function(){return this.config.localizable}}}},function(e,t){e.exports=' <div v-show=isVisible :class=classes> <div class=field-inner> <div v-if=isReadOnly class=read-only-overlay :title="translate(\'cp.read_only\')"></div> <label class=block :class="{\'bold\': field.bold}"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | deslugify | titleize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> <div v-if=env class=environment-field> <i class="icon icon-lock"></i> {{ translate(\'cp.defined_in_environment\') }} </div> <component v-else :is=componentName :name=field.name :data.sync=data :config=config :autofocus=autofocus :leave-alert=true> </component> </div> </div> '},function(e,t){e.exports=' <div class=publish-fields> <component v-for="(i, field) in fields" :is=componentName(field) :field=field :data.sync=data[field.name] :config=fields[$index] :autofocus="autofocus && i == 0" :env=definedInEnvironment(field.name)></component> </div> '},function(e,t){e.exports=' <div class=asset-editor-modal> <div class="asset-editor {{ isImage ? \'is-image\' : \'is-file\' }}"> <div v-if=loading class=loading> <div><span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }}</div> </div> <div v-if=saving class=loading> <div><span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.saving\') }}</div> </div> <template v-if="!loading && !saving"> <div class=editor-meta> <div class=asset-editor-meta-items> <div class="meta-item one-line"> <file-icon :extension=asset.extension></file-icon> {{ asset.path }} </div> <div class=meta-item v-if=isImage> <span class=meta-label>{{ translate(\'cp.dimensions\') }}</span> <span class=meta-value>{{ asset.width }} x {{ asset.height }}</span> </div> <div class=meta-item> <span class=meta-label>{{ translate(\'cp.size\') }}</span> <span class=meta-value>{{ asset.size }}</span> </div> <div class=meta-item> <span class=meta-label>{{ translate(\'cp.last_modified\') }}</span> <span class=meta-value :title=asset.last_modified>{{ asset.last_modified_relative }}</span> </div> </div> <div class=asset-editor-meta-actions> <a @click.prevent=download title="{{ translate(\'cp.download\') }}"> <svg xmlns=http://www.w3.org/2000/svg width=27 height=23 viewBox="0 0 27 23"> <g fill=none fill-rule=evenodd stroke=#676767 stroke-width=2 transform="translate(1 1.045)"> <path d="M21.1219828 6.85714286C21.1219828 6.85714286 20.0297414 6.69642857 18.9655172 6.85714286M3.01724138 6C3.01724138 4.10657143 4.5612069 2.57142857 6.46551724 2.57142857 8.36982759 2.57142857 9.9137931 4.10657143 9.9137931 6"/> <path d="M18.5344828 16.2857143L20.2465517 16.2857143C22.8607759 16.2857143 25 14.1591429 25 11.5594286 25 9.25757143 23.3215517 7.26942857 21.1219828 6.85714286 21.0728448 3.129 18.0219828 0 14.2603448 0 11.8642241 0 9.61465517 1.28785714 8.37241379 3.144 7.82586207 2.78271429 7.17068966 2.57142857 6.46551724 2.57142857 4.5612069 2.57142857 3.01724138 4.10657143 3.01724138 6 3.01724138 6.06557143 3.02327586 6.12985714 3.02715517 6.19457143 3.02284483 6.273 3.01724138 6.35142857 3.01724138 6.42857143 1.29784483 7.248 0 9.19585714 0 11.2092857 0 14.0014286 2.29741379 16.2857143 5.10560345 16.2857143L7.32758621 16.2857143M12.9310345 11.1428571L12.9310345 21M12.9310345 21L9.48275862 17.5714286M16.3793103 17.5714286L12.9310345 21"/> </g> </svg> </a> <a @click.prevent=close title="{{ translate(\'cp.close\') }}"> <svg xmlns=http://www.w3.org/2000/svg width=18 height=19 viewBox="0 0 18 19"> <g fill=none fill-rule=evenodd stroke=#676767 stroke-width=2 transform="translate(1 1.545)"> <path d="M16 0L.160533333 15.8389333M16 15.8389333L.160533333 0"/> </g> </svg> </a> </div> </div> <div class=editor-main> <div class=editor-preview> <div class=editor-preview-image v-if=isImage> <div class=image-wrapper> <img :src=asset.preview class=asset-thumb /> </div> </div> <div class=audio-wrapper v-if=asset.is_audio> <audio :src=asset.url controls preload=auto></audio> </div> <div class=video-wrapper v-if=asset.is_video> <video :src=asset.url controls></video> </div> <div class=full-height v-if="asset.extension == \'pdf\'"> <object data="{{ asset.url }}" type=application/pdf width=100% height=100%> </object> </div> <div class=full-height v-if=asset.is_previewable> <iframe class="full-height full-width" frameborder=0 src="https://docs.google.com/gview?url={{ asset.permalink }}&embedded=true"></iframe> </div> <div class=editor-file-actions> <button v-if=isImage type=button class=btn @click.prevent=openFocalPointEditor>{{ translate(\'cp.focal_point\') }} </button> <button type=button class=btn @click.prevent=openRenamer>{{ translate(\'cp.rename_file\') }} </button> <button type=button class=btn @click.prevent=openMover>{{ translate(\'cp.move_file\') }} </button> </div> </div> <div class=editor-form> <div class=editor-form-fields> <div class="alert alert-danger" v-if=hasErrors> <ul> <li v-for="error in errors">{{ error }}</li> </ul> </div> <publish-fields :fields=publishFields :data.sync=fields :errors=errors :autofocus=true :regular-title-field=true> </publish-fields> </div> <div class=editor-form-actions> <button type=button class="btn btn-danger" @click=delete v-if=allowDeleting> {{ translate(\'cp.delete\') }} </button> <button type=button class="btn btn-primary" @click=save> {{ translate(\'cp.save\') }} </button> </div> </div> </div> </template> <focal-point-editor v-if=showFocalPointEditor :data=fields.focus :image=asset.preview @selected=selectFocalPoint @closed=closeFocalPointEditor> </focal-point-editor> <image-editor v-if=showImageEditor :id=asset.id :container=asset.container :path=asset.path :url=asset.permalink @saved=updateThumbnail> </image-editor> <renamer v-if=showRenamer :asset=asset @saved=assetRenamed @closed=closeRenamer> </renamer> <mover v-if=showMover :assets=[asset.id] :folder=asset.folder :container=asset.container @saved=assetMoved @closed=closeMover> </mover> </div> </div> '},function(e,t,i){var n,s,a={};n=i(299),s=i(300),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{container:String,path:String,create:Boolean},data:function(){return{form:{},folder:{},loading:!0,saving:!1,errors:[],basenameModified:!1}},computed:{hasErrors:function(){return Object.keys(this.errors).length>0&&!this.saving}},methods:{reset:function(){this.path="",this.folder={},this.form={},this.loading=!0},getFolder:function(){this.create?this.getBlankFolder():this.getExistingFolder()},getBlankFolder:function(){this.folder={},this.form={container:this.container,parent:this.path,title:"",basename:""},this.loading=!1},getExistingFolder:function(){var e=cp_url("assets/folders/"+this.container+"/"+this.path);this.$http.get(e).success(function(e){this.folder=e,this.form={title:e.title},this.loading=!1})},save:function(){this.saving=!0,this.create?this.saveNewFolder():this.saveExistingFolder()},saveNewFolder:function(){var e=cp_url("assets/folders");this.$http.post(e,this.form).success(function(e){this.$emit("created",e.folder.path),this.saving=!1,this.close()}).error(function(e){this.errors=e,this.saving=!1})},saveExistingFolder:function(){var e=cp_url("assets/folders/"+this.container+"/"+this.path);this.$http.post(e,this.form).success(function(e){this.$emit("updated"),this.saving=!1,this.close()})},close:function(){this.$emit("closed")}},ready:function(){this.getFolder()}}},function(e,t){e.exports=" <modal :show=true class=\"asset-modal asset-folder-editor\" :saving=saving :loading=loading> <template slot=close> <button type=button tabindex=-1 class=close slot=close aria-label=Close @click=close><span aria-hidden=true>&times;</span> </button> </template> <template slot=header> <h1 v-if=create>{{ translate('cp.create_folder') }}</h1> <h1 v-if=!create>{{ translate('cp.edit_folder') }}</h1> </template> <template slot=body> <div class=\"alert alert-danger\" v-if=hasErrors> <p v-for=\"error in errors\">{{ error }}</p> </div> <div class=form-group v-if=create> <label class=block>{{ translate('cp.name') }}</label> <small class=help-block>{{ translate('cp.folder_directory_instructions') }}</small> <input type=text class=form-control v-model=form.basename @keyup.esc=close v-focus=create> </div> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.folder_title_instructions') }}</small> <input type=text class=form-control v-model=form.title @keyup.esc=close v-focus=\"! create\"> </div> </template> <template slot=footer> <button type=button class=btn @click=close>{{ translate('cp.close') }}</button> <button type=button class=\"btn btn-primary\" @click=save>{{ translate('cp.save') }}</button> </template> </modal> "},function(e,t,i){var n,s,a={};n=i(302),s=i(303),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["path"],computed:{pathParts:function(){var e=["/"];return"/"===this.path?e:e.concat(this.path.split("/"))}},methods:{selectFolder:function(e){var t=0===e?"/":this.pathParts.slice(1,e+1).join("/");this.$emit("navigated",t)}}}},function(e,t){e.exports=' <div class=breadcrumbs> <a href="" v-for="(i, part) in pathParts" @click.prevent=selectFolder(i)> <span class="icon icon-folder"></span> {{ part }} </a> </div> '},function(e,t){e.exports=' <div class="asset-browser card" @dragover=dragOver @dragleave=dragStop @drop=dragStop> <div v-if="! initialized" class="asset-browser-loading loading"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div class=drag-notification v-show="canEdit && draggingFile"> <i class="icon icon-download"></i> <h3>{{ translate(\'cp.drop_to_upload\') }}</h3> </div> <div v-if=showSidebar class=asset-browser-sidebar> <h4>{{ translate(\'cp.containers\') }}</h4> <div v-for="c in containers" class=sidebar-item :class="{ \'active\': container.id == c.id }"> <a @click=selectContainer(c.id)> {{ c.title }} </a> </div> </div> <div class=asset-browser-main v-if=initialized> <div class=asset-browser-header> <h1 class=mb-3> <template v-if=isSearching> {{ translate(\'cp.search_results\') }} </template> <template v-else> <template v-if=restrictNavigation> {{ folder.title || folder.path }} </template> <template v-else> {{ container.title }} </template> </template> <div class=loading-indicator v-show=loadingAssets> <span class="icon icon-circular-graph animation-spin"></span> </div> </h1> <input type=text class="search filter-control mb-3" placeholder="{{ translate(\'cp.search\') }}..." v-model=searchTerm debounce=500 /> <div class="asset-browser-actions flexy wrap"> <slot name=contextual-actions></slot> <div class="btn-group action mb-3"> <button type=button class="btn btn-icon" :class="{\'depressed\': displayMode == \'grid\'}" @click="setDisplayMode(\'grid\')"> <span class="icon icon-grid"></span> </button> <button type=button class="btn btn-icon" :class="{\'depressed\': displayMode == \'table\'}" @click="setDisplayMode(\'table\')"> <span class="icon icon-list"></span> </button> </div> <div class="btn-group action mb-3" v-if=canEdit> <button type=button class=btn v-if="!restrictNavigation && !isSearching" @click.prevent=createFolder> {{ translate(\'cp.new_folder\') }} </button> <button type=button class=btn @click.prevent=uploadFile v-if=!isSearching> {{ translate(\'cp.upload\') }} </button> </div> </div> </div> <div class=asset-browser-content> <uploader v-ref:uploader :dom-element=uploadElement :container=container.id :path=path @updated=uploadsUpdated @upload-complete=loadAssets> </uploader> <uploads v-if=uploads.length :uploads=uploads> </uploads> <component :is=listingComponent :container=container.id :assets=assets :folder=folder :subfolders=subfolders :loading=loading :selected-assets=selectedAssets :restrict-navigation=restrictNavigation :is-searching=isSearching @folder-selected=folderSelected @folder-editing=editFolder @folder-deleted=folderDeleted @asset-selected=assetSelected @asset-deselected=assetDeselected @asset-editing=editAsset @asset-deleting=deleteAsset @assets-dragged-to-folder=assetsDraggedToFolder @asset-doubleclicked=assetDoubleclicked @sorted=sortBy> </component> <div class=no-results v-if="isSearching && isEmpty"> <svg-icon name=folder-search-empty class="h-16 w-16 mx-auto"></svg-icon> <h2>{{ translate(\'cp.no_search_results\') }}</h2> </div> <pagination v-if="pagination.totalPages > 1" :total=pagination.totalPages :current=pagination.currentPage :segments=pagination.segments @selected=paginationPageSelected> </pagination> </div> <breadcrumbs v-if="!restrictNavigation && !isSearching" :path=path @navigated=folderSelected> </breadcrumbs> <asset-editor v-if=showAssetEditor :id=editedAssetId :has-child.sync=editorHasChild @closed=closeAssetEditor @saved=assetSaved @deleted=assetDeleted @moved=assetMoved> </asset-editor> <folder-editor v-if=showFolderCreator :create=true :container=container.id :path=path @closed=folderCreatorClosed @created=folderCreated> </folder-editor> <folder-editor v-if=showFolderEditor :create=false :container=container.id :path=editedFolderPath @closed=folderEditorClosed @updated=loadAssets> </folder-editor> </div> </div> '},function(e,t,i){var n,s,a={};n=i(306),s=i(312),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={components:{"driver-local":i(162),"driver-s3":i(163)},props:{isNew:Boolean,container:Object},data:function(){return{config:{title:null,handle:null,driver:"local",fieldset:null,local:{},s3:{}},drivers:[{value:"local",text:"Local"},{value:"s3",text:"Amazon S3"}],isHandleModified:!1,errors:[]}},computed:{driver:function(){return this.config.driver},hasErrors:function(){return 0!==e.size(this.errors)}},ready:function(){if(this.isNew)this.config.s3.region=e.first(this.s3Regions).value;else{var t=this.container.driver||"local";this.config.driver=t,this.config.title=this.container.title,this.config.handle=this.container.handle,this.config.fieldset=this.container.fieldset,this.config[t]=this.container}this.isNew&&this.syncTitleAndHandleFields()},methods:{save:function(){var e=this.isNew?cp_url("configure/content/assets"):cp_url("configure/content/assets/"+this.container.id);this.$http.post(e,this.config).success(function(e){e.success?window.location=e.redirect:this.errors=e.errors})},syncTitleAndHandleFields:function(){this.$watch("config.title",function(e){this.isHandleModified||(this.config.handle=this.$slugify(e))})}}}}.call(t,i(1))},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{path:String,url:String,editing:{type:Boolean,default:function(){return!1}}},data:function(){return{resolvedPath:null,resolvingPath:!1,resolvedPathExists:!1,resolvedUrl:null,resolvingUrl:!1}},computed:{showResolvedPath:function(){return this.resolvedPath||this.resolvingPath},showResolvedUrl:function(){return this.resolvedUrl||this.resolvingUrl},validUrl:function(){return"http"===this.showResolvedUrl.substr(0,4)},canContinue:function(){return this.resolvedPathExists}},ready:function(){var e=this;this.editing&&setTimeout(function(){return e.resolvePath()},0)},watch:{resolvedPathExists:function(e){e&&this.resolveUrl()}},methods:{resolvePath:function(){this.resolvingPath=!0,this.$http.post(cp_url("assets/containers/resolve-path"),{path:this.path},function(e){this.resolvingPath=!1,this.resolvedPath=e.path,this.resolvedPathExists=e.exists})},resolveUrl:function(){this.resolvingUrl=!0,this.$http.post(cp_url("assets/containers/resolve-url"),{url:this.url},function(e){this.resolvingUrl=!1,this.resolvedUrl=e.url})},submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=form-group> <label class=block>{{ translate('cp.path') }}</label> <small class=help-block>{{ translate('cp.asset_path_instructions') }}</small> <div class=input-with-loader> <input type=text class=form-control v-model=path @keyup=\"resolvePath | debounce 500\"/> <span v-show=resolvingPath class=\"icon-resolving icon icon-circular-graph animation-spin\"></span> </div> <small class=help-block v-if=showResolvedPath> <span> {{ translate('cp.path_resolves_to', { path: resolvedPath }) }} <span v-show=resolvedPathExists class=text-success>{{ translate('cp.path_exists') }}</span> <span v-else class=text-danger>{{ translate('cp.path_does_not_exist') }}</span> </span> </small> </div> <div class=form-group v-if=resolvedPathExists> <label class=block>{{ translate('cp.url') }}</label> <small class=help-block>{{ translate('cp.asset_url_instructions') }}</small> <div class=input-with-loader> <input type=text class=form-control v-model=url @keyup=\"resolveUrl | debounce 500\"/> <span v-show=resolvingUrl class=\"icon-resolving icon icon-circular-graph animation-spin\"></span> </div> <small class=help-block v-if=showResolvedUrl> {{ translate('cp.url_resolves_to', { path: resolvedUrl }) }} <span class=text-success v-show=validUrl>{{ translate('cp.valid_url') }}.</span> <span class=text-danger v-else>{{ translate('cp.invalid_url') }}</span> </small> </div> <div class=form-group v-if=!editing> <button class=\"btn btn-default\" @click=submit :disabled=!canContinue>{{ translate('cp.next_step') }}</button> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{key:String,secret:String,bucket:String,region:String,path:String,editing:{type:Boolean,default:function(){return!1}}},data:function(){return{validating:!1,validationError:null,validationSuccess:!1,filesDetected:null}},computed:{s3Regions:function(){return[{value:"us-east-1",text:"US East (N. Virginia) / US Standard / us-east-1"},{value:"us-east-2",text:"US East (Ohio) / us-east-2"},{value:"us-west-1",text:"US West (N. California) / us-west-1"},{value:"us-west-2",text:"US West (Oregon) / us-west-2"},{value:"ca-central-1",text:"Canada (Central) / ca-central-1"},{value:"ap-south-1",text:"Asia Pacific (Mumbai) / ap-south-1"},{value:"ap-northeast-2",text:"Asia Pacific (Seoul) / ap-northeast-2"},{value:"ap-southeast-1",text:"Asia Pacific (Singapore) / ap-southeast-1"},{value:"ap-southeast-2",text:"Asia Pacific (Sydney) / ap-southeast-2"},{value:"ap-northeast-1",text:"Asia Pacific (Tokyo) / ap-northeast-1"},{value:"eu-central-1",text:"EU (Frankfurt) / eu-central-1"},{value:"eu-west-1",text:"EU (Ireland) / eu-west-1"},{value:"eu-west-2",text:"EU (London) / eu-west-2"},{value:"sa-east-1",text:"South America (Sao Paulo) / sa-east-1)"}]},hasCredentials:function(){return this.key&&this.secret&&this.region&&this.bucket}},ready:function(){this.setDefaults()},methods:{setDefaults:function(){this.key=this.key||"",this.secret=this.secret||"",this.bucket=this.bucket||"",this.path=this.path||"",this.region=this.region||"us-east-1"},validateCredentials:function(){this.validationError=null,this.validating=!0,this.$http.post(cp_url("assets/containers/validate-s3"),{key:this.key,secret:this.secret,bucket:this.bucket,region:this.region,path:this.path}).success(function(e){this.validationSuccess=!0,this.filesDetected=e.files,this.validationError=null,this.validating=!1}).error(function(e){this.validationSuccess=!1,this.validationError=e.error,this.validating=!1})},submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=' <div class=form-group> <label class=block>{{ translate(\'cp.access_key_id\') }}</label> <input type=text class=form-control v-model=key /> </div> <div class=form-group> <label class=block>{{ translate(\'cp.secret_access_key\') }}</label> <input type=text class=form-control v-model=secret /> </div> <div class=form-group> <label class=block>{{ translate(\'cp.bucket\') }}</label> <input type=text class=form-control v-model=bucket /> </div> <div class=form-group> <label class=block>{{ translate(\'cp.region\') }}</label> <select-fieldtype :data.sync=region :options=s3Regions></select-fieldtype> </div> <div class=form-group> <label class=block>{{ translate(\'cp.path\') }}</label> <input type=text class=form-control v-model=path /> </div> <div class=form-group> <button class="btn btn-default" @click=validateCredentials :disabled="!hasCredentials || validating"> Validate Credentials </button> <button class="btn btn-default" v-if="validationSuccess && !editing" @click=submit> Next Step </button> </div> <div class=form-group v-if="validating || validationError || validationSuccess"> <dl> <dd v-if=validating> <span class="icon icon-circular-graph animation-spin"></span> Validating... </dd> <dd class=text-danger v-if="validationError && !validating"> <span class="icon icon-cross"></span> Invalid Credentials <br> <small>{{ validationError }}</small> </dd> <dd v-if="validationSuccess && !validating"> <span class=text-success> <span class="icon icon-check"></span> Valid credentials. </span><br> <small>Files detected: {{ filesDetected }}</small> </dd> </dl> </div> '},function(e,t){e.exports=" <div class=\"alert alert-danger\" v-if=hasErrors> <ul> <li v-for=\"error in errors\">{{ error }}</li> </ul> </div> <div class=\"flexy mb-3\"> <h1 class=fill v-if=isNew>{{ translate('cp.creating_asset_container') }}</h1> <h1 class=fill v-else>{{ translate('cp.editing_asset_container') }}</h1> <button type=submit class=\"btn btn-primary\" @click=save>{{ translate('cp.save') }}</button> </div> <div class=\"publish-fields card\"> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.asset_name_instructions') }}</small> <input type=text class=form-control v-model=config.title autofocus=autofocus /> </div> <div class=form-group v-if=isNew> <label class=block>{{ translate('cp.handle') }}</label> <div class=help-block>{{ translate('cp.asset_handle_instructions') }}</div> <input type=text class=form-control v-model=config.handle @keydown=\"isHandleModified = true\"/> </div> <div class=form-group> <label class=block>{{ translate('cp.fieldset') }}</label> <small class=help-block>{{ translate('cp.asset_fieldset_instructions') }}</small> <fieldset-fieldtype :data.sync=config.fieldset></fieldset-fieldtype> </div> <div class=form-group> <label class=block>{{ translate('cp.driver') }}</label> <small class=help-block>{{ translate('cp.asset_driver_instructions') }}</small> <select-fieldtype :data.sync=config.driver :options=drivers></select-fieldtype> </div> <driver-local v-if=\"driver === 'local'\" :editing=true :path.sync=config.local.path :url.sync=config.local.url> </driver-local> <driver-s3 v-if=\"driver === 's3'\" :editing=true :key.sync=config.s3.key :secret.sync=config.s3.secret :bucket.sync=config.s3.bucket :region.sync=config.s3.region :path.sync=config.s3.path> </driver-s3> </div> "},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("assets/containers/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-folder-images"></span>\n                            {{ item.assets }}\n                        </div>\n                        <a :href="item.browse_url">{{ item.title }}</a>'}}}}}},function(e,t,i){var n,s,a={};n=i(315),s=i(325),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{"meta-fields":i(316),"driver-fields":i(319),"fieldset-fields":i(322)},data:function(){return{step:"meta",title:null,handle:null,fieldset:null,driver:null,driverConfig:{}}},methods:{metaSubmit:function(){this.step="driver"},driverSubmit:function(){this.step="fieldset"},fieldsetSubmit:function(){this.complete()},complete:function(){var e=cp_url("configure/content/assets"),t={title:this.title,handle:this.handle,fieldset:this.fieldset,driver:this.driver,local:this.driverConfig.local,s3:this.driverConfig.s3};this.$http.post(e,t).success(function(e){e.success?window.location=e.redirect:this.errors=e.errors})}}}},function(e,t,i){var n,s,a={};n=i(317),s=i(318),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["title","handle"],data:function(){return{isHandleModified:!1}},computed:{canContinue:function(){return this.title&&this.handle}},watch:{title:function(e){this.isHandleModified||(this.handle=this.$slugify(e,"_"))}},methods:{submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=publish-fields> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.asset_name_instructions') }}</small> <input type=text class=form-control v-model=title autofocus=autofocus /> </div> <div class=form-group> <label class=block>{{ translate('cp.handle') }}</label> <div class=help-block>{{{ translate('cp.asset_handle_instructions') }}}</div> <input type=text class=form-control v-model=handle @keydown=\"isHandleModified = true\"/> </div> <div class=form-group> <button class=\"btn btn-default\" @click=submit :disabled=!canContinue>Next Step</button> </div> </div> "},function(e,t,i){var n,s,a={};n=i(320),s=i(321),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{"driver-local":i(162),"driver-s3":i(163)},props:{driver:String,config:Object},data:function(){return{}},methods:{submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=publish-fields> <div class=form-group> <label class=block>{{ translate('cp.driver') }}</label> <small class=help-block>{{ translate('cp.asset_driver_instructions') }}</small> <ul class=list-unstyled> <li> <input type=radio v-model=driver value=local id=driver-local /> <label for=driver-local>Local Filesystem</label> </li> <li> <input type=radio v-model=driver value=s3 id=driver-s3 /> <label for=driver-s3>Amazon S3</label> </li> </ul> </div> <driver-local v-if=\"driver === 'local'\" :path.sync=config.local.path :url.sync=config.local.url @submit=submit> </driver-local> <driver-s3 v-if=\"driver === 's3'\" :key.sync=config.s3.key :secret.sync=config.s3.secret :bucket.sync=config.s3.bucket :region.sync=config.s3.region :path.sync=config.s3.path @submit=submit> </driver-s3> </div> "},function(e,t,i){var n,s,a={};n=i(323),s=i(324),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["fieldset"],methods:{submit:function(){this.$emit("submit")}}}},function(e,t){e.exports=" <div class=publish-fields> <div class=form-group> <label class=block>{{ translate('cp.fieldset') }}</label> <small class=help-block>{{ translate('cp.asset_fieldset_instructions') }}</small> <fieldset-fieldtype :data.sync=fieldset></fieldset-fieldtype> </div> <div class=form-group> <button class=\"btn btn-default\" @click=submit>Next Step</button> </div> </div> "},function(e,t){e.exports=" <div> <h1 class=mb-3>{{ translate('cp.creating_asset_container') }}</h1> <div class=\"publish-form flush card\"> <div class=\"breadcrumbs wizard\"> <span class=step :class=\"{'active': step === 'meta'}\"> Meta </span> <span class=step :class=\"{'active': step === 'driver'}\"> Driver </span> <span class=step :class=\"{'active': step === 'fieldset'}\"> Fieldset </span> </div> <div class=pad> <meta-fields v-if=\"step === 'meta'\" :title.sync=title :handle.sync=handle @submit=metaSubmit> </meta-fields> <driver-fields v-if=\"step === 'driver'\" :driver.sync=driver :config.sync=driverConfig @submit=driverSubmit> </driver-fields> <fieldset-fields v-if=\"step === 'fieldset'\" :fieldset.sync=fieldset @submit=fieldsetSubmit> </fieldset-fields> </div> </div> </div> "},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("collections/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.entries }}\n                        </div>\n                        <a :href="item.entries_url">{{ item.title }}</a>\n\n                        <a href="{{ item.create_url }}" v-if="can(\'collections:\'+item.id+\':create\')"\n                           class="btn btn-icon btn-primary pull-right"><span class="icon icon-plus"></span>\n                       </a>'}}}},ready:function(){this.can("super")&&this.addActionPartial()},methods:{addActionPartial:function(){this.tableOptions.partials.actions="\n                <li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>\n            "}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("assets/containers/get"),delete:cp_url("configure/content/assets")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-folder-images"></span>\n                            {{ item.assets }}\n                        </div>\n                        <a :href="item.edit_url">{{ item.title }}</a>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("assets:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("assets:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("collections/get"),delete:cp_url("configure/content/collections/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.entries }}\n                        </div>\n                        <a :href="item.edit_url">{{ item.title }}</a>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("collections:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("collections:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("globals/get"),delete:cp_url("configure/content/globals/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:"<a :href=\"cp_url('configure/content/globals/')+item.slug\">{{ item.title }}</a>"}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("globals:manage")&&(e+="<li><a :href=\"cp_url('configure/content/globals/')+item.slug\">{{ translate('cp.edit') }}</a></li>"),this.can("globals:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("taxonomies/get"),delete:cp_url("configure/content/taxonomies/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.taxonomies }}\n                        </div>\n                        <a :href="item.edit_url">{{ item.title }}</a>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("taxonomies:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("taxonomies:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t,i){e.exports={template:i(332),components:{"formset-fields-builder":i(333),"formset-columns":i(337)},props:{formsetTitle:String,formsetName:String,create:{type:Boolean,default:!1},saveUrl:String},data:function(){return{loading:!0,errorMessage:null,slug:null,formset:{fields:[],columns:[]}}},computed:{columns:{get:function(){return this.formset.columns||[]},set:function(e){this.formset.columns=e}},metricsGridConfig:function(){return{add_row:translate("cp.formset_metrics_grid_add_row"),mode:"stacked",fields:[{name:"type",display:translate("cp.formset_metrics_grid_type_field"),width:25,type:"select",options:[{value:"sum",text:translate("cp.formset_metrics_grid_type_option_sum")},{value:"total",text:translate("cp.formset_metrics_grid_type_option_total")},{value:"average",text:translate("cp.formset_metrics_grid_type_option_average")}]},{name:"label",display:translate("cp.formset_metrics_grid_label_field"),type:"text",width:75},{name:"params",display:translate("cp.formset_metrics_grid_params_field"),type:"array"}]}},emailGridConfig:function(){return{add_row:translate("cp.formset_emails_grid_add_row"),mode:"stacked",fields:[{name:"to",display:translate("cp.formset_emails_grid_to_field"),type:"text",width:50,instructions:translate("cp.formset_emails_grid_to_instructions")},{name:"from",display:translate("cp.formset_emails_grid_from_field"),type:"text",width:50,instructions:translate("cp.formset_emails_grid_from_instructions")},{name:"reply_to",display:translate("cp.formset_emails_grid_reply_to_field"),type:"text"},{name:"subject",display:translate("cp.formset_emails_grid_subject_field"),type:"text",instructions:translate("cp.formset_emails_grid_subject_instructions")},{name:"template",display:translate("cp.formset_emails_grid_template_field"),type:"text",instructions:translate("cp.formset_emails_grid_template_instructions")}]}}},methods:{getBlankFormset:function(){this.formset={title:"",fields:[]},this.loading=!1},getFormset:function(){var e=this,t=cp_url("/forms/"+this.formsetName+"/get");e.$http.get(t).success(function(t){e.formset=t,e.loading=!1}).error(function(t){e.errorMessage=t.message})},save:function(){this.formset.title?this.$http.post(this.saveUrl,{slug:this.slug,formset:this.formset}).success(function(e){window.location=e.redirect}):this.$dispatch("setFlashError",translate("validation.required",{attribute:"title"}))}},ready:function(){this.create?this.getBlankFormset():this.getFormset()}}},function(e,t){e.exports="<div> <div class=\"sticky flexy mb-3 full-width\"> <h1 class=fill v-if=create> {{ translate('cp.create_formset') }} </h1> <h1 class=fill v-if=!create> {{ translate('cp.editing_formset') }}: <strong>{{ formsetTitle }}</strong> </h1> <button type=button class=\"btn btn-primary\" v-on:click=save()>{{ translate('cp.save') }}</button> </div> <div class=px-3> <div class=\"card p-3\"> <div v-if=\"loading && !errorMessage\" class=loading> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.loading') }} </div> <div v-if=errorMessage class=\"alert alert-danger\"> <p>{{ errorMessage }}</p> </div> <div class=fieldset-builder v-if=\"! loading\"> <div class=form-group> <label class=block>{{ translate('cp.title') }}</label> <small class=help-block>{{ translate('cp.formset_title_instructions') }}</small> <input type=text class=form-control v-model=formset.title autofocus=autofocus /> </div> <div class=form-group v-if=create> <label class=block>{{ translate('cp.slug') }}</label> <small class=help-block>{{ translate('cp.formset_slug_instructions') }}</small> <input type=text class=form-control v-model=slug /> </div> <div class=form-group> <label class=block>{{ translate_choice('cp.metrics', 2) }}</label> <small class=help-block>{{ translate('cp.formset_metrics_instructions') }}</small> <grid-fieldtype :data.sync=formset.metrics :config=metricsGridConfig></grid-fieldtype> </div> <div class=form-group> <label class=block>{{ translate_choice('cp.emails', 2) }}</label> <small class=help-block>{{ translate('cp.formset_emails_instructions') }}</small> <grid-fieldtype :data.sync=formset.email :config=emailGridConfig></grid-fieldtype> </div> <div class=form-group> <label class=block>{{ translate('cp.formset_honeypot_field') }}</label> <small class=help-block>{{ translate('cp.formset_honeypot_instructions') }} <a href=https://docs.statamic.com/forms#honeypot>{{ translate('cp.formset_honeypot_link') }}</a></small> <input type=text class=form-control v-model=formset.honeypot /> </div> <div class=form-group> <label class=block>{{ translate('cp.formset_store_field') }}</label> <small class=help-block>{{ translate('cp.formset_store_instructions') }}</small> <toggle-fieldtype :data.sync=formset.store></toggle-fieldtype> </div> </div> </div> <div class=\"card p-3\" v-if=!loading> <div class=\"head clearfix\"> <h2 class=m-0>{{ translate_choice('cp.fields', 2) }}</h2> <small class=help-block>{{ translate('cp.formset_fields_instructions') }}</small> </div> <formset-fields-builder :fields=formset.fields></formset-fields-builder> </div> </div> </div> "},function(e,t,i){(function(t){e.exports={template:i(334),components:{"field-settings":i(335)},props:{fields:{type:Array,default:[]}},data:function(){return{showEditModal:!1,selectedField:null}},methods:{selectField:function(e){this.selectedField=e},deselectField:function(){this.selectedField=null},deleteField:function(e){this.selectedField=null,this.fields.splice(e,1)},addField:function(){var e=(this.fields.length||0)+1;this.fields.push({name:"field_"+e,display:"Field "+e,isNew:!0}),this.selectedField=e-1,this.$nextTick(function(){t(this.$el).find("input").first().focus().select()})},enableSorting:function(){var e=this;t(".sortable").sortable({axis:"y",revert:175,placeholder:"placeholder",handle:".drag-handle",forcePlaceholderSize:!0,start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var n=i.item.data("start"),s=i.item.index();e.fields.splice(s,0,e.fields.splice(n,1)[0])}})}},watch:{selectedField:function(e){this.showEditModal=null!==e},showEditModal:function(e){e?t(this.$el).find(".modal-body").find("input").first().focus().select():this.deselectField()}},ready:function(){this.enableSorting()}}}).call(t,i(2))},function(e,t){e.exports='<div> <table class="fields-table bordered-table"> <thead> <tr> <th>{{ translate(\'cp.handle\') }}</th> <th>{{ translate(\'cp.label\') }}</th> <th class=col-column>{{ translate_choice(\'cp.columns\', 1) }}</th> <th class=row-controls></th> </tr> </thead> <tbody class=sortable v-el:tbody> <tr v-for="field in fields"> <td class=col-handle><input type=text class=code v-model=field.name /></td> <td class=col-display><input type=text v-model=field.display /></td> <td class=col-column> <toggle-fieldtype :data.sync=field.column></toggle-fieldtype> </td> <td class=row-controls> <span class="icon icon-edit edit" @click=selectField($index)></span> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" @click=deleteField($index)></span> </td> </tr> </tbody> </table> <modal :show.sync=showEditModal class=markdown-modal> <template slot=header>{{ translate(\'cp.edit_field\') }}</template> <template slot=body> <field-settings :field.sync=fields[selectedField]> </field-settings> </template> </modal> <button type=button class="btn btn-default" @click=addField>{{ translate_choice(\'cp.fields\', 1) }} <i class="icon icon-plus icon-right"></i></button> </div> '},function(e,t,i){e.exports={template:i(336),props:["field"],data:function(){return{isNameModified:!0}},ready:function(){this.field.isNew&&(this.isNameModified=!1,delete this.field.isNew,this.$watch("field.display",function(e){this.isNameModified||(this.field.name=this.$slugify(e,"_"))}))}}},function(e,t){e.exports="<div> <div class=form-group> <label>{{ translate('cp.display_text') }}</label> <small class=help-block>{{ translate('cp.display_text_instructions') }}</small> <input type=text class=form-control v-model=field.display v-focus=true /> </div> <div class=form-group> <label>{{ translate('cp.field_name') }}</label> <small class=help-block>{{ translate('cp.field_name_instructions') }}</small> <input type=text class=form-control v-model=field.name @keydown=\"isNameModified = true\"/> </div> <div class=form-group> <label>{{ translate('cp.validation_rules') }}</label> <small class=help-block>{{{ translate('cp.validation_rules_instructions', { url: \"https://laravel.com/docs/5.1/validation#available-validation-rules\" }) }}}</small> <input type=text class=form-control v-model=field.validate /> </div> </div> "},function(e,t,i){(function(t){e.exports={template:i(338),props:{columns:{type:Array},fields:{type:Array}},computed:{suggestions:function(){var e=[];return t.each(this.fields,function(t){e.push({text:t.display,value:t.name})}),e}}}}).call(t,i(1))},function(e,t){e.exports="<div> <relate-fieldtype :suggestions-prop=suggestions :data.sync=columns :config={}></relate-fieldtype> </div> "},function(e,t,i){var n,s,a={};n=i(340),s=i(347),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){Mousetrap=i(17),t.default={components:{SectionBuilder:i(341)},props:{fieldsetTitle:String,create:{type:Boolean,default:!1},saveUrl:String},data:function(){return{loading:!0,saving:!1,errors:[],errorMessage:null,slug:null,fieldset:{title:"",sections:null},fieldtypes:[]}},computed:{canSave:function(){return""!==this.fieldset.title},hasErrors:function(){return 0!==e.size(this.errors)}},methods:{getFieldtypes:function(){var t=this;this.$http.get(cp_url("/fieldtypes")).success(function(i){e.each(i,function(e){t.fieldtypes.push(e)}),t.getFieldset()})},getFieldset:function(){var e=this,t=cp_url("/fieldsets-json/"+get_from_segment(3)+"/edit");e.$http.get(t).success(function(t){var i=this;this.fieldset=t,e.loading=!1,this.$nextTick(function(){i.$watch("fieldset",function(){i.$dispatch("changesMade",!0)},{deep:!0})})}).error(function(t){e.errorMessage=t.message})},save:function(){var e=this;this.saving=!0,this.errors=[],this.$http.post(this.saveUrl,{slug:this.slug,fieldset:this.fieldset}).success(function(t){if(t.success){if(e.$dispatch("changesMade",!1),e.create)return void(window.location=t.redirect);e.saving=!1,e.$dispatch("setFlashSuccess",t.message,{timeout:1500})}else e.$dispatch("setFlashError",translate("cp.error")),e.saving=!1,e.errors=t.errors,n("html, body").animate({scrollTop:0})}).error(function(e){alert("There was a problem saving the fieldset. Please check your logs.")})},fieldDeleted:function(e){this.$refs.sectionBuilder.deleteField(e)}},ready:function(){var e=this;this.getFieldtypes(),Mousetrap.bindGlobal("mod+s",function(t){t.preventDefault(),e.save()})}}}.call(t,i(1),i(2))},function(e,t,i){var n,s,a={};n=i(342),s=i(346),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){i(16);var s=i(6),a=(i.n(s),i(343)),o=i.n(a);var r=null,l=null;t.default={components:{SectionsSection:o.a},props:["fieldtypes","sections"],data:function(){return{activeSection:null,isDraggingField:!1}},computed:{hasSidebar:function(){return null!=this.sidebarSection},sidebarSection:function(){return e.find(this.sections,{handle:"sidebar"})},sidebarSectionLabel:function(){return this.sidebarSection.display||this.sidebarSection.handle},sidebarSectionFields:function(){var t=this,i=e.findIndex(this.sections,{handle:"sidebar"});return-1==i?[]:e.map(this.sections[i].fields,function(e){return t.getFieldById(e)})},editingSidebar:function(){return!!this.hasSidebar&&this.activeSection===e.find(this.sections,{handle:"sidebar"}).id}},ready:function(){var e=this;this.activeSection=this.sections[0].id,this.$nextTick(function(){e.makeSectionsSortable(),e.makeFieldsSortable()})},watch:{activeSection:function(){var e=this;this.$nextTick(function(){return e.updateFieldWidths()})}},methods:{getFieldByName:function(t){return e.find(this.fieldset.fields,{name:t})},getFieldById:function(t){return e.find(this.fieldset.fields,{id:t})},getSectionFields:function(t){var i=this;return e.map(this.sections[t].fields,function(e){return i.getFieldById(e)})},makeSectionsSortable:function(){var e=this;(r=new s.Sortable(this.$els.tabs,{draggable:".tab",delay:200,mirror:{constrainDimensions:!1,cursorOffsetX:0,yAxis:!1}})).on("sortable:start",function(t){e.activeSection=e.sections[t.startIndex].id}),r.on("sortable:stop",function(t){e.sections.splice(t.newIndex,0,e.sections.splice(t.oldIndex,1)[0])})},makeFieldsSortable:function(){var t=this;(l=new s.Sortable(this.$el.querySelectorAll(".root-level-section-fields"),{draggable:".root-level-section-field",handle:".root-level-drag-handle",appendTo:this.$el,mirror:{constrainDimensions:!0}})).on("drag:start",function(e){t.isDraggingField=!0}),l.on("sortable:stop",function(i){t.isDraggingField=!1;var n=i.oldIndex,s=i.newIndex,a=e.findIndex(t.sections,{id:i.oldContainer.parentElement.__vue__.section.id}),o=e.findIndex(t.sections,{id:i.newContainer.parentElement.__vue__.section.id}),r=t.sections[a].fields[n];if(a===o){var c=t.sections[o].fields;c.splice(s,0,c.splice(n,1)[0])}else{t.sections[o].fields.splice(s,0,r),t.sections[a].fields.splice(n,1);var d=window.scrollY;t.sections=JSON.parse(JSON.stringify(t.sections)),l.destroy(),t.$nextTick(function(){t.makeFieldsSortable(),window.scroll(0,d)})}}),this.$nextTick(function(){return t.updateFieldWidths()})},addSection:function(){var e=this,t=this.sections.length+1,i={display:"Section "+t,handle:"section_"+t,id:"section_"+t,fields:[]};this.sections.push(i),this.activeSection=i.id,this.$nextTick(function(){var t=e.sections.length-1;r.destroy(),e.makeSectionsSortable(),l.destroy(),e.makeFieldsSortable(),e.$refs.sections[t].focus()})},deleteSection:function(e){var t;if(0!==e||1!==this.sections.length){var i=0===e?1:0;(t=this.sections[i].fields).splice.apply(t,[this.sections[i].fields.length,0].concat(function(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}(this.sections[e].fields))),this.sections.splice(e,1),this.activeSection=this.sections[i].id}},getSectionComponentByHandle:function(t){if("sidebar"===t)return this.$refs.sidebarSection;var i=e.findIndex(this.sections,{handle:t});return this.$refs.sections[i]},createNewField:function(t){var i=(this.fieldset.fields.length||0)+1,s=e.findWhere(this.fieldtypes,{name:t}),a=n.extend({},s);return a.type=a.name,a.name="field_"+i,a.id="field_"+i,a.display="Field "+i,a.instructions=null,a.localizable=!1,a.width=100,a.isNew=!0,delete a.config,delete a.label,delete a.canBeValidated,delete a.canBeLocalized,delete a.canHaveDefault,a},hoveredIntoTab:function(e){this.isDraggingField&&(this.activeSection=e)},updateFieldWidths:function(){e.each(this.$refs.sections,function(e){return e.updateFieldWidths()})}}}}.call(t,i(1),i(2))},function(e,t,i){var n,s,a={};n=i(344),s=i(345),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["fieldtypes","section"],data:function(){return{isAddingField:!1,isQuickAddingField:!1,handleModified:!RegExp(/^section_\d+/).test(this.section.handle)}},computed:{display:function(){return this.section.display}},watch:{display:function(e){this.handleModified||(this.section.handle=this.$slugify(e,"_"))},handle:function(e,t){t!==e&&("sidebar"===t&&this.$emit("no-longer-sidebar"),"sidebar"===e&&this.$emit("became-sidebar"))}},methods:{focus:function(){this.$els.display.select()},fieldSelectorClosed:function(){this.isAddingField=!1},updateFieldWidths:function(){this.$refs.fields.updateFieldWidths()},addField:function(){this.isAddingField=!0,this.isQuickAddingField=!1},quickAddField:function(){this.addField(),this.isQuickAddingField=!0}}}},function(e,t){e.exports=' <div class=section-layout> <div class="section-header p-3 border-b"> <div> <label>{{ translate(\'cp.section_label\') }}</label> <input type=text class="section-display form-control" v-model=section.display v-el:display/> </div> <div> <label class="flex justify-between"> <span class=mr-sm>{{ translate(\'cp.section_handle\') }}</span> <i class="icon icon-info text-xxs opacity-25 hover:opacity-75" v-tip :tip-text="translate(\'cp.section_handle_tip\')"></i> </label> <input type=text class="section-handle form-control mono" v-model=section.handle @keydown="handleModified = true"/> </div> </div> <div class=px-3> <h2>Fields</h2> </div> <fieldset-fields v-ref:fields :fields.sync=section.fields :section=section :fieldtypes=fieldtypes :is-adding=isAddingField :is-quick-adding=isQuickAddingField @selector-closed=fieldSelectorClosed @updated=fieldsUpdated classes="root-level-section-fields px-2"></fieldset-fields> <div class="p-3 border-t"> <button class="btn btn-primary mr-1" @click.prevent=addField>{{ translate(\'cp.add_field\') }}</button> <button class="btn btn-default" @click.prevent=quickAddField>{{ translate(\'cp.quick_add\') }}</button> </div> </div> '},function(e,t){e.exports=' <div class=section-builder :class="{ \'is-dragging-field\': isDraggingField }"> <div class=tabs-outer> <div class=tabs v-el:tabs> <a href="" v-for="(i, section) in sections" :class="[\'tab\', { \'active\': activeSection === section.id }]" @click.prevent="activeSection = section.id" @mouseenter=hoveredIntoTab(section.id)> {{ section.display }} <span class="icon icon-cross section-delete opacity-25 hover:opacity-75" @click.prevent=deleteSection(i) v-if="sections.length > 1"></span> </a> </div> <button @click.prevent=addSection class="py-1 px-2 opacity-50 hover:opacity-100"> <span class="icon icon-plus"></span> </button> </div> <div class=sections-container :class="{ \'has-sidebar\': hasSidebar, \'editing-sidebar\': editingSidebar }"> <sections-section v-for="(i, section) in sections" v-show="activeSection === section.id" v-ref:sections :section.sync=section :fieldtypes=fieldtypes :is-only-section="sections.length === 1" @field-added=addField @deleted=deleteSection(i) @fields-sorted=fieldsSorted></sections-section> <div class=other-section-placeholder v-if=hasSidebar v-text="editingSidebar ? translate_choice(\'cp.sections\', 2) : sidebarSectionLabel"></div> </div> </div> '},function(e,t){e.exports=' <div> <div class="flexy mb-3 sticky"> <h1 class=fill v-if=create> {{ translate(\'cp.create_fieldset\') }} </h1> <h1 class=fill v-else> {{ translate(\'cp.editing_fieldset\') }}: <strong>{{ fieldsetTitle }}</strong> </h1> <button type=button class="btn btn-primary" v-on:click=save() :disabled=!canSave>{{ translate(\'cp.save\') }}</button> </div> <div class=px-3> <div class="alert alert-danger" v-if=hasErrors> <ul> <li v-for="error in errors">{{ error }}</li> </ul> </div> <div class="card p-0"> <div v-if="loading && !errorMessage" class=loading> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if=errorMessage class="alert alert-danger"> <p>{{ errorMessage }}</p> </div> <div class="fieldset-builder flex flex-wrap" v-if="! loading"> <div class="form-group p-2 mb-0 w-full flex items-center border-b"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.title\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_title_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <input type=text class=form-control v-model=fieldset.title autofocus=autofocus /> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center border-b" v-if=create> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.handle\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_handle_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <input type=text class=form-control v-model=slug /> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center border-b"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.create_title\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_create_title_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <input type=text class=form-control v-model=fieldset.create_title /> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center border-b"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.hide\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.fieldset_hide_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <toggle-fieldtype :data.sync=fieldset.hide></toggle-fieldtype> </div> </div> <div class="form-group p-2 mb-0 w-full flex items-center"> <div class="w-2/3 pr-2"> <label class=block>{{ translate(\'cp.append_taxonomies\') }}</label> <small class="help-block mb-0">{{ translate(\'cp.append_taxonomies_instructions\') }}</small> </div> <div class="w-1/3 flex justify-end"> <toggle-fieldtype :data.sync=fieldset.taxonomies></toggle-fieldtype> </div> </div> </div> </div> <div class="text-center little-heading mx-1 opacity-50">{{ translate(\'cp.sections_and_fields\') }}</div> <section-builder v-if=!loading v-ref:section-builder :fieldtypes=fieldtypes :sections.sync=fieldset.sections> </section-builder> </div> </div> '},function(e,t,i){var n,s={};n=i(349),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n,s){var a=i(164),o=i.n(a),r=i(165),l=i.n(r),c=i(354),d=i.n(c),u=i(357),p=i.n(u),f=i(151),h=i(152);t.default={mixins:[h.a,f.a],components:{Branches:l.a,Branch:o.a,CreatePage:d.a,MountCollection:p.a},data:function(){return{loading:!0,saving:!1,changed:!1,showUrls:!1,show:"urls",pages:[],arePages:!0}},computed:{homeEditUrl:function(){var e=cp_url("pages/edit");return this.locale!==Object.keys(Statamic.locales)[0]&&(e+="?locale="+this.locale),e},hasChildren:function(){return e.some(this.pages,function(e){return e.items.length})},isSortable:function(){return n.can("pages:reorder")}},ready:function(){var e=this;this.getPages(),this.bindLocaleWatcher(),this.bindShowDraftsWatcher(),Mousetrap.bindGlobal("mod+s",function(t){t.preventDefault(),e.save()})},methods:{getPages:function(){this.pages=[],this.loading=!0;var e=cp_url("/pages/get?locale="+this.locale+"&drafts="+(this.showDrafts?1:0));this.$http.get(e,function(e){this.arePages=e.pages.length>0,this.pages=e.pages,this.loading=!1,this.$nextTick(function(){this.initSortable()})})},initSortable:function(){if(this.isSortable){var e,t,i,n=this;s(this.$el).find(".page-tree > ul + ul").nestedSortable({containerSelector:"ul",handle:".drag-handle",placeholderClass:"branch-placeholder",placeholder:'<li class="branch branch-placeholder"><div class="branch-row w-full flex items-center depth-{{ depth }}"><div class="page-move drag-handle w-6 h-full"></div><div class="flex p-1 items-center flex-1"><div class="page-text">&nbsp;</div></div></div></li>',bodyClass:"page-tree-dragging",draggedClass:"branch-dragged",onMousedown:function(e,t,i){var n=e[0].__vue__,s=parseInt(e[0].dataset.depth);return 1!==n.$parent.pages.length||1!==s},onDragStart:function(n,s,a,o){var r=n[0].__vue__;i=r,e=r.branchIndex,t=r.$parent.pages[e],a(n,s)},onDrag:function(e,i,n,a){s(".branch-placeholder").find(".page-text").text(t.title),n(e,i)},onDrop:function(s,a,o,r){n.$els.click.play(),n.changed=!0,i.$parent.pages.splice(e,1);var l=s.index(),c=s.parent()[0].__vue__;t=n.updateDroppedUrl(t,c.$parent.url),c.pages.splice(l,0,t);var d=n.pages;n.pages=[],n.$nextTick(function(){n.pages=d}),o(s,a)}})}},updateDroppedUrl:function(t,i){var n=this;return i=i||"",t.url=i+"/"+t.slug,t.items=e.map(t.items,function(e){return n.updateDroppedUrl(e,t.url)}),t},expandAll:function(){this.$els.card_set.play(),this.toggleAll(!1)},collapseAll:function(){this.$els.card_drop.play(),this.toggleAll(!0)},toggleAll:function(t,i){var s=this;i=i||s.pages,e.each(i,function(e){n.set(e,"collapsed",t),e.items.length&&s.toggleAll(t,e.items)})},toggleUrls:function(){this.showUrls=!this.showUrls,this.showUrls?this.show="titles":this.show="urls"},save:function(){var e=this;e.saving=!0;var t=JSON.parse(JSON.stringify(e.pages));t=e.updateOrderIndexes(t),this.$http.post(cp_url("/pages"),{pages:t}).success(function(t){e.getPages(),e.changed=!1,e.saving=!1,e.$dispatch("setFlashSuccess",translate("cp.pages_reordered"))})},updateOrderIndexes:function(t){var i=this;return e.map(t,function(e,t){return e.items.length&&(e.items=i.updateOrderIndexes(e.items)),e.order=t+1,e})},createPage:function(e){this.$broadcast("pages.create",e)},onShowDraftsChanged:function(){this.getPages()},onLocaleChanged:function(){this.getPages()}},events:{"pages.create":function(e){this.$broadcast("pages.create",e)},"pages.mount":function(e){this.$broadcast("pages.mount",e)},"pages.unmount":function(e){this.saving=!0,this.$broadcast("pages.unmount",e)},"page.deleted":function(){this.pages.length>1||s(this.$el).find(".page-tree > ul + ul").nestedSortable("destroy")}},watch:{changed:function(e){this.$dispatch("changesMade",e)}}}}.call(t,i(1),i(3),i(2))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{branchIndex:Number,uuid:String,title:String,url:String,published:{type:Boolean,default:!0},editUrl:String,hasEntries:Boolean,entriesUrl:String,createEntryUrl:String,childPages:{type:Array,default:function(){return[]}},collapsed:Boolean,depth:Number,home:{type:Boolean,default:!1},sortable:Boolean},computed:{hasChildren:function(){return this.childPages.length},isSingleTopLevelPage:function(){return 1===this.$parent.pages.length&&1===this.depth}},methods:{toggle:function(){this.collapsed=!this.collapsed},createPage:function(){this.$dispatch("pages.create",this.url)},deletePage:function(){var e=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_page",1),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){e.$http.post(cp_url("pages/delete"),{uuid:e.uuid}).success(function(){e.$parent.pages.splice(e.branchIndex,1),this.$dispatch("page.deleted")})})},duplicatePage:function(){this.$http.post(cp_url("pages/duplicate"),{id:this.uuid}).success(function(e){window.location=e.redirect})},mountCollection:function(){this.$dispatch("pages.mount",this.uuid)},unmountCollection:function(){this.$dispatch("pages.unmount",this.uuid)}}}},function(e,t){e.exports=' <li class=branch :class="{ draft: !published }" :data-depth=depth> <div class="branch-row w-full flex items-center"> <div v-if=home class="w-6 home-handle"> <i class="icon icon-home mx-auto opacity-25"></i> </div> <div v-if="!home && sortable" :class="[\'page-move drag-handle w-6 h-full\', {\'cursor-not-allowed opacity-50\': isSingleTopLevelPage}]"></div> <div class="flex items-center flex-1 p-1"> <div class=page-text> <a :href=editUrl class=page-title>{{ title }}</a> <a :href=editUrl class=page-url>{{ url }}</a> </div> <div class="w-6 opacity-25 hover:opacity-50 page-toggle-container ml-px" v-if=hasChildren> <div :class="{\'page-toggle\': true, toggleable: hasChildren}" v-on:click=toggle> <i :class="{ \'icon\': true, \'icon-chevron-down\': true, \'collapsed\': collapsed }"></i> </div> </div> <div class="has-collection flex items-center pl-2" v-if=hasEntries> <svg-icon name=entries class="pr-1 text-grey h-6 w-6"></svg-icon> <a :href=createEntryUrl>{{ translate(\'cp.add\') }}</a> <span class="mx-sm text-grey text-xxs">{{ translate(\'cp.or\') }}</span> <a :href=entriesUrl>{{ translate(\'cp.edit\') }}</a> </div> </div> <div class="branch-meta flex items-center pr-1"> <div class=page-actions v-if="can(\'pages:create\') || can(\'pages:delete\')"> <a :href=url :title=url class="page-action text-grey-dark px-sm bloop" target=_blank> <svg-icon name=visit class="opacity-25 hover:opacity-75 h-4 w-4"></svg-icon> </a> <div class="btn-group page-action action-more px-sm"> <i class="icon icon-dots-three-vertical opacity-25 hover:opacity-75" data-toggle=dropdown></i> <ul class=dropdown-menu> <li v-if="can(\'pages:create\')"><a href="" @click.prevent=createPage>{{ translate(\'cp.create_page_button\') }}</a></li> <li v-if="can(\'super\')"> <a href="" @click.prevent=mountCollection v-if=!hasEntries>{{ translate(\'cp.mount_collection\') }}</a> <a href="" @click.prevent=unmountCollection v-if=hasEntries>{{ translate(\'cp.unmount_collection\') }}</a> </li> <li v-if="can(\'pages:create\')"><a href="" @click.prevent=duplicatePage>{{ translate(\'cp.duplicate\') }}</a></li> <li v-if="can(\'pages:create\') && can(\'pages:delete\')" class=divider></li> <li v-if="can(\'pages:delete\')" class=warning><a href="" @click.prevent=deletePage>{{ translate(\'cp.delete\') }}</a></li> </ul> </div> </div> </div> </div> <branches :pages=childPages :depth="depth + 1" :parent-url=url :collapsed.sync=collapsed :sortable=sortable v-if=!home> </branches> </li> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{pages:Array,depth:Number,parentUrl:{type:String,default:""},collapsed:Boolean,sortable:Boolean},computed:{classes:function(){var e=["branches"];e.push("depth-"+this.depth),this.pages.length||e.push("empty");var t=this.collapsed?"collapsed":"open";return e.push("branches-"+t),e.join(" ")}},methods:{toggle:function(e){e.$set("collapsed",!e.collapsed)},buildUrl:function(e){return this.parentUrl+"/"+e}}}},function(e,t){e.exports=' <ul :class=classes> <branch v-for="page in pages" :branch-index=$index :uuid=page.id :title="page.title || page.slug" :url=buildUrl(page.slug) :published=page.published :edit-url=page.edit_url :has-entries=page.has_entries :entries-url=page.entries_url :create-entry-url=page.create_entry_url :child-pages=page.items :collapsed.sync=page.collapsed :depth=depth :sortable=sortable></branch> </ul> '},function(e,t,i){var n,s,a={};n=i(355),s=i(356),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["locale"],data:function(){return{parent:null,show:!1,saving:!1,loading:!0,fieldsets:[]}},events:{"pages.create":function(e){this.loading=!0,this.parent=e,this.getFieldsets()}},methods:{cancel:function(){this.show=!1},create:function(e){var t="/"===this.parent?"":this.parent,i=cp_url("pages/create"+t+"?fieldset="+e);this.locale!==Object.keys(Statamic.locales)[0]&&(i+="&locale="+this.locale),window.location=i},getFieldsets:function(){var t=cp_url("fieldsets-json?url="+this.parent+"&hidden=false");this.$http.get(t,function(t){var i=[];e.each(t.items,function(e){i.push({value:e.uuid,text:e.title})}),e.findWhere(i,{value:"default"})||i.push({value:"default",text:"Default"}),i=e.sortBy(i,function(e){return e.text}),this.fieldsets=i,this.loading=!1,this.fieldsets.length<=1?this.create(this.fieldsets[0].value):this.show=!0})}}}}.call(t,i(1))},function(e,t){e.exports=" <div> <modal :show.sync=show :saving=saving :loading=loading class=modal-small :dismissible=true> <template slot=header>{{ translate('cp.choose_page_type') }}</template> <template slot=body> <ul class=chooser> <li v-for=\"fieldset in fieldsets\"> <a href=\"\" @click.prevent=create(fieldset.value)>{{ fieldset.text }}</a> </li> </ul> </template> <template slot=footer> <div class=pull-left>{{ translate('cp.parent_page') }}: <code>{{ parent }}</code></div> <button type=button class=btn @click=cancel>{{ translate('cp.cancel') }}</button> </template> </modal> </div> "},function(e,t,i){var n,s,a={};n=i(358),s=i(359),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={data:function(){return{id:null,show:!1,saving:!1,loading:!0,fieldsets:[]}},events:{"pages.mount":function(e){this.loading=!0,this.show=!0,this.id=e,this.getCollections()},"pages.unmount":function(e){this.id=e,this.mount(null)}},methods:{getCollections:function(){this.$http.get(cp_url("collections/get"),function(t){var i=[];e.each(t.items,function(e){i.push({value:e.id,text:e.title})}),this.collections=i,this.loading=!1})},cancel:function(){this.show=!1},mount:function(e){this.saving=!0;var t=this.id;this.$http.post(cp_url("pages/mount"),{id:t,collection:e}).success(function(e){window.location=window.location})}}}}.call(t,i(1))},function(e,t){e.exports=" <modal :show.sync=show :saving=saving :loading=loading class=modal-small> <template slot=header>{{ translate('cp.mount_collection') }}</template> <template slot=body> <ul class=chooser> <li v-for=\"collection in collections\"> <a href=\"\" @click.prevent=mount(collection.value)>{{ collection.text }}</a> </li> </ul> </template> <template slot=footer> <button type=button class=btn @click=cancel>{{ translate('cp.cancel') }}</button> </template> </modal> "},function(e,t,i){var n,s,a={};n=i(361),s=i(372),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n,s){var a,o,r,l=i(0),c=i.n(l),d=i(362),u=i(16);Mousetrap=i(17),a=Mousetrap,o={},r=a.prototype.stopCallback,a.prototype.stopCallback=function(e,t,i,n){return!!this.paused||!o[i]&&!o[n]&&r.call(this,e,t,i)},a.prototype.bindGlobal=function(e,t,i){if(this.bind(e,t,i),e instanceof Array)for(t=0;t<e.length;t++)o[e[t]]=!0;else o[e]=!0},a.init(),t.default={components:{"publish-fields":i(9),"user-options":i(166),"status-field":i(365),"publish-section":i(369)},mixins:[d.a],deep:!0,props:{title:String,extra:{type:String,default:"{}"},isNew:Boolean,contentType:String,uuid:String,fieldsetName:String,slug:{type:String,default:""},uri:String,url:String,submitUrl:String,status:{type:Boolean,default:!0},locale:{type:String,default:function(){return Object.keys(Statamic.locales)[0]}},locales:{type:String,default:"[{}]"},isDefaultLocale:{type:Boolean,default:!0},removeTitle:{type:Boolean,default:!1},readOnly:{type:Boolean,default:!1},updateTitleOnSave:{type:Boolean,default:!0},metaFields:{type:Boolean,default:!0},allowSaveAndAddAnother:{type:Boolean,default:!1}},data:function(){return{loading:!0,saving:!1,fieldset:{},contentData:null,formData:{extra:{},fields:{}},formDataInitialized:!1,isSlugModified:!1,iframeLoading:!1,previewRequestQueued:!1,errors:[],publishType:"save",staticCachingEnabled:window.Statamic.staticCachingEnabled,activeSection:null}},computed:{isEntry:function(){return"entry"===this.contentType},isTaxonomy:function(){return"taxonomy"===this.contentType},isGlobal:function(){return"global"===this.contentType},isUser:function(){return"user"===this.contentType},isSettings:function(){return"settings"===this.contentType},isAddon:function(){return"addon"===this.contentType},isPage:function(){return"page"===this.contentType},isHomePage:function(){return this.isPage&&"/"===this.uri},canEdit:function(){return!0!==this.readOnly&&("entry"===this.contentType?this.can("collections:"+this.extra.collection+":edit"):"page"===this.contentType?this.can("pages:edit"):"taxonomy"===this.contentType?this.can("taxonomies:"+this.extra.taxonomy+":edit"):"global"===this.contentType?this.can("globals:"+this.slug+":edit"):"user"===this.contentType?Statamic.userId===this.uuid||this.can("users:edit"):!this.isAddon&&!this.isSettings||this.can("super"))},shouldShowStatus:function(){return!this.isSettings&&!this.isAddon&&!this.isUser},allowStatuses:function(){return!this.isTaxonomy&&!this.isGlobal&&!this.isHomePage},shouldShowDate:function(){return!!this.isEntry&&(!(this.isNew||!this.formData.fields.date)||!(!this.isNew||"date"!==this.formData.extra.order_type))},shouldShowSneakPeek:function(){return!(this.isGlobal||this.isSettings||this.isUser||this.isAddon)},isSneakPeeking:function(){return this.$root.isPreviewing},hasErrors:function(){return 0!==e.size(this.errors)},dateFieldConfig:function(){return this.fieldset.date||{}},filteredFormData:function(){var t=this,i=JSON.parse(JSON.stringify(this.formData));return i.fields=e.objReject(i.fields,function(e,i){return t.hiddenFields.includes(i)}),i},shouldShowSidebar:function(){return!(0==this.sidebarSection.fields.length||this.$root.isPreviewing||this.$root.windowWidth<1366)},sections:function(){return this.fieldset.sections},mainSections:function(){return this.shouldShowSidebar?e.filter(this.sections,function(e){return"sidebar"!=e.handle}):this.sections},sidebarSection:function(){return e.find(this.sections,{handle:"sidebar"})},sectionFields:function(){var e={};return this.sections.forEach(function(t){t.fields.forEach(function(i){e[i.name]=t.handle})}),e},sectionErrors:function(){var e=this,t={};return Object.keys(this.errors).forEach(function(i){i=i.substr(7),t[i]=e.sectionFields[i]}),t},sectionToFocusOnError:function(){var t=this.shouldShowSidebar?e.omit(this.sectionErrors,function(e){return"sidebar"===e}):this.sectionErrors,i=Object.keys(t);return 0===i.length?this.activeSection:t[i[0]]}},methods:{initFormData:function(){this.formData={fieldset:null,new:this.isNew,type:this.contentType,uuid:this.uuid,id:this.uuid,status:this.status,slug:this.contentData.slug,locale:this.locale,extra:this.extra,fields:this.contentData},this.formDataInitialized=!0},publish:function(){var e=this,t=this;if(t.saving=!0,t.errors=[],this.submitUrl)var i=this.submitUrl;else if(this.isSettings)i=cp_url("settings/")+this.slug;else if(this.isAddon)i=cp_url("addons/")+this.extra.addon+"/settings";var s=this.$http.post(i,this.filteredFormData);s.success(function(e){if(t.loading=!1,e.success){if(this.$dispatch("changesMade",!1),e.redirect&&("continue"!==this.publishType||this.isNew))return void(window.location=e.redirect);this.saving=!1,this.updateTitleOnSave&&(this.title=this.isUser?this.formData.fields.username:this.formData.fields.title),this.$dispatch("setFlashSuccess",e.message,{timeout:1500})}else this.$dispatch("setFlashError",translate("cp.error")),this.saving=!1,this.errors=e.errors,this.activeSection=this.sectionToFocusOnError,this.$nextTick(function(){n("html, body").animate({scrollTop:0})})}),s.error(function(t){e.saving=!1,e.errors=[];var i="TokenMismatchException"===t.exception?"session_expired_error":"publish_error";e.$notify.error(translate("cp."+i))})},publishWithoutContinuing:function(){this.publishType="save",localStorage.setItem("statamic.publish.type","save"),s.delete(this.formData,"continue"),s.delete(this.formData,"another"),this.publish()},publishAndContinue:function(){this.publishType="continue",localStorage.setItem("statamic.publish.type","continue"),this.formData.continue=!0,s.delete(this.formData,"another"),this.publish()},publishAndAnother:function(){this.publishType="another",localStorage.setItem("statamic.publish.type","another"),this.formData.another=!0,s.delete(this.formData,"continue"),this.publish()},initPreview:function(){n("#sneak-peek-iframe").length||n('<iframe frameborder="0" id="sneak-peek-iframe">').appendTo("#sneak-peek"),this.updatePreview()},updatePreview:e.debounce(function(e){if(this.iframeLoading)this.previewRequestQueued=!0;else{var t=this.formData;if(t.preview=!0,this.iframeLoading=!0,this.isNew)if(this.isPage){var i=this.formData.slug||"new-page";n=(n=this.extra.parent_url+"/"+i).replace("//","/")}else n=this.entryUrl();else var n=this.url;this.$http.post(n,t,function(e,t,i){this.updatePreviewIframe(e),this.iframeLoading=!1,this.previewRequestQueued&&(this.previewRequestQueued=!1,this.updatePreview())})}},150),updatePreviewIframe:function(e){var t=n("#sneak-peek-iframe").get(0);e+='<script type="text/javascript">window.scrollTo('+n(t.contentWindow.document).scrollLeft()+", "+n(t.contentWindow.document).scrollTop()+");<\/script>",t.contentWindow.document.open(),t.contentWindow.document.write(e),t.contentWindow.document.close()},syncTitleAndSlugFields:function(){this.isNew&&this.$watch("formData.fields.title",function(e){this.$slugify(e)==this.formData.fields.slug&&(this.isSlugModified=!1),this.isSlugModified||(this.formData.fields.slug=this.$slugify(e))})},entryUrl:function(){if(!this.isNew)return this.uri;var e=this.isTaxonomy?"new-term":"new-entry",t=this.formData.slug||e,i=this.extra.route,n=i;if("date"===this.extra.order_type)var s=this.date();for(var a,o=/{\s*([a-zA-Z0-9_\-]+)\s*}/g;null!==(a=o.exec(i));){var r=a[0],l="";switch(r){case"{year}":l=s.format("YYYY");break;case"{month}":l=s.format("MM");break;case"{day}":l=s.format("DD");break;case"{slug}":l=t;break;default:var c=r.substring(1,r.length-1);l=this.formData.fields[c]}n=n.replace(r,l)}return n},date:function(){var e=this.extra.datetime,t="YYYY-MM-DD";return e.length>10&&(t+=" HH:mm"),c()(e,t)},modifySlug:function(e){var t=this.formData.fields.title,i=this.formData.slug;this.isSlugModified=this.$slugify(t)!==i},getInitialPublishType:function(){var e=localStorage.getItem("statamic.publish.type")||"save";return this.allowSaveAndAddAnother||"another"!==e||(e="save"),e},getFieldset:function(){if(Statamic.Publish.fieldset)this.initFieldset(Statamic.Publish.fieldset);else{var e={},t=cp_url("fieldsets-json/")+this.fieldsetName;e.locale=this.locale,e.taxonomies=this.isEntry,this.$http.get(t,e).success(function(e){this.initFieldset(e)})}},initFieldset:function(e){this.fieldset=new u.a(e).showDate(this.shouldShowDate),(this.isPage||this.isEntry||this.isTaxonomy)&&this.fieldset.showSlug(!this.isHomePage).prependTitle().prependMeta(),this.activeSection=this.fieldset.sections[0].handle,this.initConditions(),this.formData.fieldset=this.fieldsetName||this.fieldset.name},sectionHasError:function(t){return e.chain(this.sectionErrors).values().contains(t).value()},sectionDisplay:function(e){return e.display||""+e.handle[0].toUpperCase()+e.handle.slice(1)}},watch:{shouldShowSidebar:function(e){e&&"sidebar"===this.activeSection&&(this.activeSection=this.sections[0].handle,"sidebar"===this.activeSection&&(this.activeSection=this.sections[1].handle))},activeSection:function(e){this.$root.$emit("publish.section.changed",e)}},ready:function(){var e=this;this.extra=JSON.parse(this.extra),this.contentData=JSON.parse(JSON.stringify(Statamic.Publish.contentData)),this.locales&&(this.locales=JSON.parse(this.locales)),this.initFormData(),this.getFieldset(),this.publishType=this.getInitialPublishType(),"continue"===this.publishType?this.formData.continue=!0:"another"===this.publishType&&(this.formData.another=!0),this.syncTitleAndSlugFields();var t=null;this.shouldShowSneakPeek&&(this.$root.isPublishPage=!0,this.$on("previewing",function(){this.initPreview(),t=this.$watch("formData",function(e){this.updatePreview()},{deep:!0})})),this.$on("previewing.stopped",function(){t()}),this.$on("fieldsetLoaded",function(e){this.fieldset=e,this.loading=!1}),this.canEdit&&(Mousetrap.bindGlobal("mod+s",function(t){t.preventDefault(),e.publishAndContinue()}),Mousetrap.bindGlobal("meta+enter",function(t){t.preventDefault(),e.publish()}))}}}.call(t,i(1),i(2),i(3))},function(e,t,i){"use strict";(function(e){var n=i(363);t.a={data:function(){return{conditions:[],hiddenFields:[]}},methods:{evaluateConditions:function(){var t=this;this.conditions.forEach(function(e){e.passes=e.validate(t.contentData)}),this.hiddenFields=e.chain(this.fieldset.fields()).filter(function(e){return!t.isVisible(e)}).map(function(e){return e.name}).value()},isVisible:function(e){var t=this.conditions.find(function(t){return t.id===e.name});return void 0===t||(void 0!==e.hide_when?!t.passes:t.passes)},initConditions:function(){var e=this;this.conditions=this.fieldset.fields().filter(function(e){return void 0!==e.show_when||void 0!==e.hide_when}).map(function(t){return new n.a(t.name,e.condition(t))}),this.evaluateConditions(),this.$watch("contentData",function(t){return e.evaluateConditions(t)},{deep:!0})},condition:function(e){return void 0!==e.show_when?e.show_when:e.hide_when}}}}).call(t,i(1))},function(e,t,i){"use strict";var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();var s=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.rule=i,this.passes=!1,this.validate=this._validate()}return n(e,[{key:"isJavascript",value:function(){return"string"==typeof this.rule}},{key:"exists",value:function(){return!!Statamic.conditions&&Statamic.conditions.hasOwnProperty(this.rule)}},{key:"_validate",value:function(){return this.isJavascript()&&!this.exists()?(console.error("Statamic.conditions."+this.rule+" hasn't been implemented."),function(){return!1}):this.isJavascript()&&this.exists()?Statamic.conditions[this.rule]:function(e){var t=[],i=Object.keys(this.rule).filter(function(e){return e.startsWith("or_")});for(var n in this.rule){if(i.includes(n))if(e[n.substr(3)]===this.rule[n])return!0;!i.includes(n)&&Array.isArray(this.rule[n])?t.push(this.rule[n].includes(e[n])):"not null"===this.rule[n]?t.push(null!==e[n]):t.push(e[n]===this.rule[n])}return!t.includes(!1)}}}]),e}();t.a=s},function(e,t){e.exports="<div class=btn-group> <button type=button class=\"btn dropdown-toggle\" data-toggle=dropdown aria-haspopup=true aria-expanded=false> {{ translate('cp.user_options') }}&nbsp; <span class=caret></span> </button> <ul class=dropdown-menu> <li> <a href=\"\" @click.prevent=sendResetEmail> {{ status == 'pending' ? translate('cp.send_activation_email') : translate('cp.send_password_reset_email') }} </a> </li> <li v-if=\"can('super')\"> <a href=\"\" @click.prevent=copyResetLink> {{ status == 'pending' ? translate('cp.copy_activation_link') : translate('cp.copy_password_reset_link') }} </a> </li> </ul> </div> "},function(e,t,i){var n,s,a={};i(366),n=i(367),s=i(368),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["locale","locales","status","allowStatuses"],data:function(){return{isShowingLocales:!1}},computed:{singleLocale:function(){return 1===this.locales.length},multipleLocales:function(){return!this.singleLocale},currentLocaleLabel:function(){return e.find(this.locales,{name:this.locale}).label}},methods:{statusClass:function(e){return this.allowStatuses?e.is_published?"icon-status-live":"icon-status-hidden":"icon-status-live"}}}}.call(t,i(1))},function(e,t){e.exports=' <div class=mr-2> <template v-if="singleLocale && allowStatuses"> <button class="btn btn-default" @click.prevent="status = !status"> <span class="mr-8 icon-status {{ status ? \'icon-status-live\' : \'icon-status-hidden\' }}"></span> {{ status ? translate(\'cp.published\') : translate(\'cp.draft\') }} </button> </template> <div class=locale-status-field :class="{ open: isShowingLocales }" v-if=multipleLocales> <button class="btn btn-default dropdown-toggle" @click.prevent="isShowingLocales = !isShowingLocales"> <span class="mr-8 icon-status {{ status ? \'icon-status-live\' : \'icon-status-hidden\' }}"></span> {{ currentLocaleLabel }} </button> <div class=dropdown-menu> <div class=locale-item v-for="locale in locales"> <template v-if=locale.is_active> <span v-if=!allowStatuses class="icon-status icon-status-live"></span> {{ locale.label }} <toggle-fieldtype v-if=allowStatuses :data.sync=status></toggle-fieldtype> </template> <template v-else> <span class="icon-status {{ statusClass(locale) }}"></span> <a :href=locale.url>{{ locale.label }}</a> </template> </div> </div> </div> </div> '},function(e,t,i){var n,s,a={};n=i(370),s=i(371),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{PublishFields:i(9)},props:{section:Object,fieldset:Object,data:Object,errors:Object,hiddenFields:Array,autofocus:Boolean,metaFields:{type:Boolean,default:!0},env:{type:Object,default:{}}},computed:{handle:function(){return this.section.handle},fields:function(){return this.section.fields}}}},function(e,t){e.exports=' <div class="card p-0"> <div class=card-body> <publish-fields :fields=fields :data.sync=data :errors=errors :hidden-fields=hiddenFields :autofocus=autofocus :regular-title-field=!metaFields :env=env></publish-fields> </div> </div> '},function(e,t){e.exports=' <div class="content-type-{{ contentType }}"> <div class=publish-form id=publish-form> <div class="publish-errors alert alert-danger" v-if=hasErrors> <ul> <li v-for="error in errors">{{ error }}</li> </ul> </div> <div class="flex flex-wrap items-center w-full sticky" id=publish-controls> <h1 class="w-full my-1 text-center lg:text-left lg:flex-1"> <span>{{ title }}</span> </h1> <div class="controls flex flex-wrap items-center w-full lg:w-auto justify-center"> <div class="mr-2 my-1 fs-13 opacity-50" v-if="! canEdit"> <span class="icon icon-lock"></span> {{ translate(\'cp.read_only_mode\') }} </div> <status-field class=my-1 v-if=shouldShowStatus :locale=locale :locales=locales :allow-statuses=allowStatuses :status.sync=formData.status></status-field> <user-options v-if="isUser && !isNew" :username=slug :status=contentData.status class=mr-2></user-options> <div class="btn-group my-1 mr-2" v-if="$parent.isPublishPage && url"> <template v-if=staticCachingEnabled> <a href="{{ url }}" target=_blank class=btn>{{ translate(\'cp.visit_url\') }}</a> </template> <template v-else> <button type=button class=btn @click.prevent=$parent.preview>{{ translate(\'cp.sneak_peek\') }}</button> <button type=button class="btn dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <span class=caret></span> <span class=sr-only>{{ translate(\'cp.toggle_dropdown\') }}</span> </button> <ul class=dropdown-menu> <li><a href="{{ url }}" target=_blank>{{ translate(\'cp.visit_url\') }}</a></li> </ul> </template> </div> <div class="btn-group btn-group-primary my-1" v-if=canEdit> <button v-if="publishType === \'save\'" type=button class="btn btn-primary" @click=publishWithoutContinuing :disabled=saving>{{ translate(\'cp.save\') }}</button> <button v-if="publishType === \'continue\'" type=button class="btn btn-primary" @click=publishAndContinue :disabled=saving>{{ translate(\'cp.save_and_continue\') }}</button> <button v-if="allowSaveAndAddAnother && publishType === \'another\'" type=button class="btn btn-primary" @click=publishAndAnother :disabled=saving>{{ translate(\'cp.save_and_another\') }}</button> <button type=button class="btn btn-primary dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false :disabled=saving> <span class=caret></span> <span class=sr-only>{{ translate(\'cp.toggle_dropdown\') }}</span> </button> <ul class=dropdown-menu> <li v-if="publishType !== \'continue\'"><a id=publish-continue @click=publishAndContinue>{{ translate(\'cp.save_and_continue\') }}</a></li> <li v-if="publishType !== \'save\'"><a @click=publishWithoutContinuing>{{ translate(\'cp.save\') }}</a></li> <li v-if="allowSaveAndAddAnother && publishType !== \'another\'"><a @click=publishAndAnother>{{ translate(\'cp.save_and_another\') }}</a></li> </ul> </div> </div> </div> <div :class="[ \'w-full\', { \'px-1 md:px-3\': !isSneakPeeking } ]"> <div :class="[ \'publish-tabs tabs\', { \'mb-2\': !isSneakPeeking } ]" v-show="mainSections.length > 1"> <a v-for="section in mainSections" :class="{ \'active\': activeSection === section.handle, \'has-error\': sectionHasError(section.handle) }" @click="activeSection = section.handle" v-text=sectionDisplay(section)> </a> </div> <div class="flex justify-between"> <div class=w-full> <publish-section v-for="(i, section) in mainSections" v-show="activeSection === section.handle" :section=section :fieldset=fieldset :errors=errors :hidden-fields=hiddenFields :data.sync=formData.fields :autofocus="i === 0" :meta-fields=metaFields :env=extra.env></publish-section> </div> <div class="publish-sidebar ml-32" v-show=shouldShowSidebar> <publish-section :section=sidebarSection :fieldset=fieldset :errors=errors :hidden-fields=hiddenFields :data.sync=formData.fields></publish-section> </div> </div> </div> </div> </div> '},function(e,t,i){var n,s,a={};n=i(374),s=i(378),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:{limit:Number,src:String},data:function(){return{items:[],query:"",current:-1,loading:!1}},components:{"typeahead-input":i(375)},computed:{hasItems:function(){return this.items.length>0},isEmpty:function(){return!this.query&&!this.loading},isDirty:function(){return!!this.query&&!this.loading}},methods:{update:function(){this.query?(this.loading=!0,this.$http.get(this.src,Object.assign({q:this.query},this.data)).success(function(e){this.query&&(this.items=this.limit?e.slice(0,this.limit):e,this.current=-1,this.loading=!1)}.bind(this))):this.reset()},reset:function(){this.items=[],this.query="",this.loading=!1},setActive:function(e){this.current=e},isActive:function(e){return this.current==e},focus:function(){e("#global-search").focus()},hit:function(){this.hasItems&&(window.location.href=this.items[this.current].edit_url)},up:function(){this.current>0&&this.current--},down:function(){this.current<this.items.length-1&&this.current++}},ready:function(){this.$watch("query",function(e,t){this.update()})}}}.call(t,i(2))},function(e,t,i){var n,s,a={};n=i(376),s=i(377),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["query","onUp","onDown","onHit","onReset"],methods:{up:function(){this.onUp()},down:function(){this.onDown()},hit:function(){this.onHit()},reset:function(){this.onReset()}}}},function(e,t){e.exports=" <input type=text autocomplete=off v-model=query @keydown.up=up @keydown.down=down @keydown.enter=hit @keydown.esc=reset @blur=reset placeholder=\"{{ translate('cp.search') }}...\"/> "},function(e,t){e.exports=' <div> <div id=typeahead v-cloak :class="{\'dirty\': isDirty}"> <div class=state-container> <i class="icon icon-magnifying-glass" @click=focus></i> </div> <typeahead-input class="search alt" id=global-search :query.sync=query :on-up=up :on-down=down :on-hit=hit :on-reset=reset @keyup.esc=reset></typeahead-input> <i class="icon icon-cross" v-show="isDirty || loading" @click=reset></i> <ul v-show=hasItems> <li v-for="item in items" :class="{\'active\': isActive($index)}" @mousedown=hit @mousemove=setActive($index)> <span class=title v-html=item.title></span> <span class=url v-html=item.url></span> </li> </ul> </div> </div> '},function(e,t,i){e.exports={components:{permissions:i(380),"license-key":i(382),settings:i(384),user:i(387),login:i(389)},props:["cpUrl"],data:function(){return{steps:{permissions:{label:"Permissions",status:"pending"},licenseKey:{label:"License Key",status:"pending"},settings:{label:"Settings",status:"pending"},user:{label:"Create a User",status:"pending"},login:{label:"Log in",status:"pending"}},currentStep:"permissions",userId:null,cleanupFailed:!1}},methods:{complete:function(){this.$http.get("/installer/complete").success(function(e){e.success?window.location=this.cpUrl:this.cleanupFailed=!0})},url:function(e){var t=Statamic.cpRoot.split("/");return t.pop(),t.join("/")+"/installer/"+e}},events:{"permissions.status":function(e){this.steps.permissions.status=e},"permissions.complete":function(){this.currentStep="licenseKey"},"licensekey.complete":function(){this.steps.licenseKey.status="success",this.currentStep="settings"},"settings.complete":function(){this.steps.settings.status="success",this.currentStep="user"},"user.complete":function(e){this.steps.user.status="success",this.userId=e,this.currentStep="login"},"login.complete":function(){this.complete()}},ready:function(){}}},function(e,t,i){e.exports={template:i(381),data:function(){return{loading:!0,success:null,unwritable:[]}},computed:{failure:function(){return!this.loading&&!this.success}},ready:function(){this.$http.get(this.$parent.url("permissions")).success(function(e){this.success=e.success,this.unwritable=e.unwritable,this.loading=!1,this.success?(this.$dispatch("permissions.status","success"),setTimeout(function(){this.$dispatch("permissions.complete")}.bind(this),1e3)):this.$dispatch("permissions.status","failure")})}}},function(e,t){e.exports="<div class=card> <div class=head> <h1>{{ translate_choice('cp.permissions', 2) }}</h1> </div> <hr> <div v-if=loading class=\"loading loading-basic\"> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.checking_folder_permissions') }} </div> <div v-if=failure> <p>{{ translate('cp.folders_unwritable') }}</p> <ul> <li v-for=\"path in unwritable\"><code>{{ path }}</code></li> </ul> </div> <template v-if=success> <p>{{ translate('cp.folders_permission_valid') }}</p> </template> </div> "},function(e,t,i){e.exports={template:i(383),data:function(){return{loading:!0,valid:!1,key:null,keySubmitted:!1}},computed:{licenseKeyInstructions:function(){return translate("cp.license_key_instructions",{licenses:"https://account.statamic.com/licenses",buy_license:"https://store.statamic.com"})}},methods:{continue:function(){this.$dispatch("licensekey.complete")},validate:function(){this.loading=!0,this.$http.post(this.$parent.url("license"),{key:this.key}).success(function(e){this.success=e.success,this.key=e.key,this.loading=!1,e.key&&(this.keySubmitted=!0),this.success&&(this.valid=!0,this.$dispatch("licensekey.status","success"),setTimeout(function(){this.continue()}.bind(this),1e3))})}},ready:function(){this.validate()}}},function(e,t){e.exports="<div class=card> <div class=head> <h1>{{ translate('cp.license_key') }}</h1> </div> <hr> <div v-if=loading class=\"loading loading-basic\"> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.checking_license_key') }} </div> <p v-if=valid>{{ translate('cp.license_valid') }}</p> <template v-if=\"!loading && !valid\"> <p v-html=licenseKeyInstructions></p> <div class=\"form-group px-0\"> <p v-if=\"!valid && keySubmitted\" class=license-error> <small class=help-block>{{ translate('cp.license_invalid') }}</small> </p> <div class=row> <div class=col-sm-9> <input type=text class=form-control v-model=key /> </div> <div class=col-sm-3> <button class=\"btn btn-primary btn-block\" @click=validate :disabled=!key>{{ translate('cp.save') }}</button> </div> </div> </div> <hr> <div class=trial> <a href=\"\" @click.prevent=continue class=btn>{{ translate('cp.continue_in_trial_mode') }}</a> <a href=https://statamic.com/try class=what target=_blank>{{ translate('cp.whats_this') }}</a> </div> </template> </div> "},function(e,t,i){(function(t){e.exports={template:i(385),props:["timezone"],data:function(){return{loading:!1,success:null,debug:!1,locales:[{locale:"en",full:"en_US",name:"English",url:document.location.origin+"/"}],timezones:this.getTimezones()}},computed:{formData:function(){return{debug:this.debug,locales:this.locales,timezone:this.timezone[0]}}},methods:{submit:function(){this.loading=!0,this.$http.post(this.$parent.url("settings"),this.formData).success(function(e){this.loading=!1,this.success=e.success,this.success&&setTimeout(function(){this.$dispatch("settings.complete")}.bind(this),1e3)})},getTimezones:function(){var e=[];return t.each(i(386),function(t){e.push({text:t,value:t})}),e}}}}).call(t,i(1))},function(e,t){e.exports="<div class=\"card install-settings\"> <div class=head> <h1>{{ translate_choice('cp.settings', 2) }}</h1> </div> <hr> <template v-if=!success> <div class=\"form-group px-0\"> <label>{{ translate('cp.locales_and_urls') }}</label> <small class=help-block> {{ translate('cp.settings_locales_instructions') }} </small> <locale_settings-fieldtype :data=locales :index-php-warning=true></locale_settings-fieldtype> </div> <div class=\"form-group px-0\"> <label>{{ translate('cp.debug_mode') }}</label> <small class=help-block> {{ translate('cp.settings_debug_mode_instructions') }} </small> <toggle-fieldtype :data.sync=debug></toggle-fieldtype> </div> <div class=\"form-group px-0\"> <label>{{ translate('cp.timezone') }}</label> <suggest-fieldtype :data.sync=timezone :suggestions-prop=timezones :config='{ \"max_items\": 1 }'></suggest-fieldtype> </div> <button class=\"btn btn-primary\" @click=submit :disabled=loading>{{ translate('cp.save') }}</button> </template> <template v-if=success> <p>{{ translate('cp.settings_updated') }}</p> </template> </div> "},function(e,t){e.exports=["UTC","Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Fort_Nelson","America/Fortaleza","America/Glace_Bay","America/Godthab","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Inuvik","America/Iqaluit","America/Jamaica","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montserrat","America/Nassau","America/New_York","America/Nipigon","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Ojinaga","America/Panama","America/Pangnirtung","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rainy_River","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Thunder_Bay","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Chita","Asia/Choibalsan","Asia/Colombo","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kathmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qyzylorda","Asia/Riyadh","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ulaanbaatar","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faroe","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Currie","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/Perth","Australia/Sydney","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kiev","Europe/Kirov","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Ulyanovsk","Europe/Uzhgorod","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zaporozhye","Europe/Zurich","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Enderbury","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Wake","Pacific/Wallis"]},function(e,t,i){e.exports={template:i(388),data:function(){return{submitted:!1,loading:!1,success:null,username:null,password:null,email:null,firstName:null,lastName:null,bio:null}},computed:{submitDisabled:function(){return!!this.loading||!(this.username&&this.password&&this.email&&this.firstName&&this.lastName)}},methods:{submit:function(){this.loading=!0,this.submitted=!0,this.$http.post(this.$parent.url("user"),{username:this.username,password:this.password,email:this.email,first_name:this.firstName,last_name:this.lastName,bio:this.bio}).success(function(e){this.loading=!1,this.success=e.success,this.success&&setTimeout(function(){this.$dispatch("user.complete",e.id)}.bind(this),1e3),this.login(e.id)})},login:function(e){this.loggingIn=!0,this.$http.post(this.$parent.url("login"),{id:e}).success(function(e){this.loggedIn=!0,e.success&&setTimeout(function(){this.$dispatch("user.complete")}.bind(this),1e3)})}}}},function(e,t){e.exports="<div class=\"card install-user\"> <div class=head> <h1>{{ translate('cp.create_a_user') }}</h1> </div> <hr> <template v-if=!success> <div class=\"alert alert-danger\" v-if=\"submitted && !loading && !success\"> <p>{{ error }}</p> </div> <div class=\"form-group px-0\"> <label>{{ translate('cp.name') }}</label> <div class=row> <div class=col-md-6> <small class=help-block>{{ translate('cp.first_name') }}</small> <input type=text class=form-control v-model=firstName /> </div> <div class=col-md-6> <small class=help-block>{{ translate('cp.last_name') }}</small> <input type=text class=form-control v-model=lastName /> </div> </div> </div> <div class=\"form-group px-0\"> <label>{{ translate('cp.username') }}</label> <input type=text class=form-control v-model=username /> </div> <div class=\"form-group px-0\"> <label>{{ translate('cp.email') }}</label> <input type=email class=form-control v-model=email /> </div> <div class=\"form-group px-0\"> <label>{{ translate_choice('cp.passwords', 1) }}</label> <input type=password class=form-control v-model=password /> </div> <div class=\"form-group px-0\"> <label>{{ translate('cp.bio') }}</label> <small class=help-block>{{ translate('cp.user_bio_instructions') }}</small> <textarea class=form-control v-model=bio></textarea> </div> <button class=\"btn btn-primary\" @click=submit :disabled=submitDisabled>{{ translate('create_user') }}</button> </template> <template v-if=success> <p>{{ translate('cp.user_account_created') }}</p> </template> </div> "},function(e,t,i){e.exports={template:i(390),props:["userId"],data:function(){return{loggedIn:!1}},ready:function(){this.$http.post(this.$parent.url("login"),{id:this.userId}).success(function(e){e.success&&(this.loggedIn=!0,setTimeout(function(){this.$dispatch("login.complete")}.bind(this),1e3))})}}},function(e,t){e.exports="<div class=card> <div class=head> <h1>{{ translate('cp.login') }}</h1> </div> <hr> <div v-if=!loggedIn class=\"loading loading-basic\"> <span class=\"icon icon-circular-graph animation-spin\"></span> {{ translate('cp.logging_in') }} </div> <p v-if=loggedIn>{{ translate('cp.logged_in_taking_you_to_cp') }}</p> </div> "},function(e,t,i){(function(t,i){e.exports={props:{versionTo:{type:String,default:null},versionFrom:{type:String,default:null}},data:function(){return{started:!1,backingUp:!1,backedUp:!1,backupFailed:!1,backupMessage:null,downloading:!1,downloaded:!1,downloadFailed:!1,downloadMessage:null,installing:!1,unzipping:!1,unzipped:!1,unzippingFailed:!1,installingDependencies:!1,installedDependencies:!1,installingDependenciesFailed:!1,swapping:!1,swapped:!1,swappingFailed:!1,updated:!1,cleaningUp:!1,cleanedUp:!1,cleanupFailed:!1,errors:[]}},computed:{readyToInstall:function(){return this.backedUp&&this.downloaded},hasErrors:function(){return this.errors.length>0}},watch:{updated:function(e){e&&this.$els.audio.play()}},methods:{start:function(){this.started=!0,this.backup(),this.download()},backup:function(){this.backingUp=!0,this.$http.post(cp_url("system/updater/backup")).success(function(e){this.backingUp=!1,this.backedUp=!0,this.backupMessage=e.message,this.install()}).error(function(e){this.backingUp=!1,this.backupFailed=!0,this.womp(e)})},download:function(){this.downloading=!0,this.$http.post(cp_url("system/updater/download"),{version:this.versionTo}).success(function(e){this.downloading=!1,this.downloaded=!0,this.downloadMessage=e.message,this.install()}).error(function(e){this.downloading=!1,this.downloadFailed=!0,this.womp(e)})},install:function(){this.readyToInstall&&(this.installing=!0,this.unzip())},unzip:function(){this.unzipping=!0,this.$http.post(cp_url("system/updater/unzip"),{version:this.versionTo}).success(function(){this.unzipping=!1,this.unzipped=!0,this.composer()}).error(function(e){this.unzipping=!1,this.unzipped=!1,this.unzippingFailed=!0,this.womp(e)})},composer:function(){this.installingDependencies=!0,this.$http.post(cp_url("system/updater/composer")).success(function(){this.installingDependencies=!1,this.installedDependencies=!0,this.swap()}).error(function(e){this.installingDependencies=!1,this.installingDependenciesFailed=!1,this.womp(e)})},swap:function(){this.swapping=!0,this.$http.post(cp_url("system/updater/swap")).success(function(){this.swapping=!1,this.swapped=!0,this.cleanUp()}).error(function(e){this.swapping=!1,this.swappingFailed=!0,this.womp(e)})},cleanUp:function(){this.updated=!0,this.cleaningUp=!0,this.$root.version=this.version,t(".nav-main .update").hide(),this.$http.post(cp_url("system/updater/clean"),{version:this.versionTo,oldVersion:this.versionFrom}).success(function(){this.cleaningUp=!1,this.cleanedUp=!0}).error(function(e){this.cleaningUp=!1,this.cleanUpFailed=!0,this.womp(e)})},womp:function(e){var t=this;i.each(e.errors,function(e){t.errors.push(e)})}}}}).call(t,i(2),i(1))},function(e,t,i){(function(t){e.exports={props:["importer"],data:function(){return{exporting:!1,exported:!1,exportFailed:!1,exportError:null,importing:!1,imported:!1,summary:null,showAllPages:!1,showCollections:[],showTaxonomies:[],showGlobals:[]}},computed:{totalPages:function(){return Object.keys(this.summary.pages).length}},ready:function(){this.summary=Statamic.ImportSummary},methods:{import:function(){this.importing=!0,this.$http.post(cp_url("import/import"),{summary:this.summary}).success(function(e){this.importing=!1,this.imported=!0,console.log(e)})},hasDuplicates:function(e){return!!this.duplicateCount(e)},duplicateCount:function(e){var i=0;return t.each(e,function(e){e.exists&&i++}),i},uncheckDuplicates:function(e){t.each(e,function(e){e.exists&&(e._checked=!1)})},size:function(e){return t.size(e)},showCollection:function(e){this.showCollections.push(e),t.uniq(this.showCollections)},hideCollection:function(e){this.showCollections=t.reject(this.showCollections,function(t){return t===e})},shouldShowCollection:function(e){return t.contains(this.showCollections,e)},showTaxonomy:function(e){this.showTaxonomies.push(e),t.uniq(this.showTaxonomies)},hideTaxonomy:function(e){this.showTaxonomies=t.reject(this.showTaxonomies,function(t){return t===e})},shouldShowTaxonomy:function(e){return t.contains(this.showTaxonomies,e)},showGlobal:function(e){this.showGlobals.push(e),t.uniq(this.showGlobals)},hideGlobal:function(e){this.showGlobals=t.reject(this.showGlobals,function(t){return t===e})},shouldShowGlobal:function(e){return t.contains(this.showGlobals,e)}}}}).call(t,i(1))},function(e,t){e.exports={mixins:[Dossier],props:["get","delete","keyword","canManage","canDelete"],data:function(){return{sort:"title",sortOrder:"asc",ajax:{get:this.get,delete:this.delete},tableOptions:{sort:this.sort,sortOrder:"asc",partials:{}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>";this.canDelete&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("taxonomies/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <div class="stat">\n                            <span class="icon icon-documents"></span>\n                            {{ item.taxonomies }}\n                        </div>\n                        <a :href="item.terms_url">{{ item.title }}</a>\n\n                        <a href="{{ item.create_url }}" v-if="can(\'taxonomies:\'+item.id+\':create\')"\n                           class="btn btn-icon btn-primary pull-right"><span class="icon icon-plus"></span>\n                        </a>'}}}},ready:function(){this.can("super")&&this.addActionPartial()},methods:{addActionPartial:function(){this.tableOptions.partials.actions="\n                <li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>\n            "}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("globals/get")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'<a :href="item.edit_url">{{ item.title }}</a>'}}}}}},function(e,t,i){(function(t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("users/get"),search:cp_url("users/search"),delete:cp_url("users/delete")},tableOptions:{sort:"name",sortOrder:"asc",partials:{cell:"\n                        <span :class=\"{ 'has-status-icon': $index === 0 }\">\n                            <span v-if=\"$index === 0\" class=\"status status-{{ (item.status === 'active') ? 'live' : 'hidden' }}\"\n                                :title=\"(item.status === 'active') ? translate('cp.status_active') : translate('cp.status_pending')\"\n                            ></span>\n                            <a v-if=\"column.link\" :href=\"item.edit_url\" class=\"has-status-icon\">\n                                {{{ formatValue(item[column.value]) }}}\n                            </a>\n                            <template v-else>\n                                {{{ formatValue(item[column.value]) }}}\n                            </template>\n                        </span>"},checkboxes:t.can("users:delete")}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("users:edit")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("users:edit-passwords")&&(e+="<li><a :href=\"item.edit_password_url\">{{ translate('cp.change_password') }}</a></li>"),this.can("users:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}}).call(t,i(3))},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("users/groups/get"),delete:cp_url("users/groups/delete")},tableOptions:{sort:"title",sortOrder:"asc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url">\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{ item[column.value] }}\n                        </template>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("users:edit")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("users:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("users/roles/get"),delete:cp_url("users/roles/delete")},tableOptions:{sort:"title",sortOrder:"asc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url">\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{ item[column.value] }}\n                        </template>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("users:edit")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("users:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],data:function(){return{ajax:{get:cp_url("fieldsets-json"),delete:cp_url("fieldsets/delete")},tableOptions:{headers:!1,search:!1,checkboxes:!1,sort:"title",sortOrder:"asc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url" class="has-status-icon">\n                            <span class="status status-{{ (item.hidden) ? \'hidden\' : \'live\' }}"\n                                  v-tip :tip-text="(item.hidden) ? translate(\'cp.hidden\') : translate(\'cp.published\')"\n                            ></span>\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{ item[column.value] }}\n                        </template>'}}}},ready:function(){this.addActionPartial()},methods:{addActionPartial:function(){var e="";this.can("fieldsets:manage")&&(e+="<li><a :href=\"item.edit_url\">{{ translate('cp.edit') }}</a></li>"),this.can("fieldsets:delete")&&(e+='\n                    <li class="warning">\n                        <a href="#" @click.prevent="call(\'deleteItem\', item.id)">{{ translate(\'cp.delete\') }}</a>\n                    </li>'),this.tableOptions.partials.actions=e}}}},function(e,t){e.exports={mixins:[Dossier],props:["get"],data:function(){return{sort:"datestamp",sortOrder:"desc",ajax:{get:this.get},tableOptions:{checkboxes:!1,sort:"datestamp",sortOrder:"desc",partials:{cell:'\n                        <a v-if="$index === 0" :href="item.edit_url">\n                            {{ item[column.value] }}\n                        </a>\n                        <template v-else>\n                            {{{ item[column.value] }}}\n                        </template>'}}}},ready:function(){this.can("super")&&this.addActionPartial()},methods:{addActionPartial:function(){this.tableOptions.partials.actions="\n                <li><a :href=\"item.delete_url\">{{ translate('cp.delete') }}</a></li>\n            "}}}},function(e,t,i){(function(t){var i={name:"permission",template:'\n        <div>\n            <input type="checkbox" :id="name" name="permissions[]" v-model="selectedPermissions" :value="name" :disabled="disabled" />\n            <label :for="name">{{ label }}</label>\n\n            <ul v-if="children" :class="{ \'disabled\': !selected }">\n                <li v-for="(key, value) in children">\n                    <permission :key="key"\n                                :value="value"\n                                :selected-permissions="selectedPermissions"\n                                :disabled="!selected"\n                    ></permission>\n                </li>\n            </ul>\n        </div>\n    ',props:["key","value","selectedPermissions","disabled"],computed:{name:function(){return this.hasChildren?this.key:this.value},label:function(){var e=this.name,t=e.match(/^.*\:(.*)\:.*$/);return t&&(e=t[0].replace(":"+t[1]+":",":*:")),translate("permissions."+e)},hasChildren:function(){return"string"!=typeof this.value},children:function(){return this.hasChildren?this.value:null},selected:function(){return t.contains(this.selectedPermissions,this.name)}},watch:{disabled:function(e){if(e){var i=t.indexOf(this.selectedPermissions,this.name);-1!==i&&this.selectedPermissions.splice(i,1)}}}};e.exports={components:{Permission:i},props:["permissions","selected","titles"],computed:{superSelected:function(){return-1!==t.indexOf(this.selected,"super")}},methods:{startsWith:function(e,t){return!e.indexOf(t)},title:function(e){var t=e.split(":");return this.titles[t[0]][t[1]]},label:function(e){return this.startsWith(e,"collections")?translate_choice("cp.collections",1)+": "+this.title(e):this.startsWith(e,"taxonomies")?translate_choice("cp.taxonomies",1)+": "+this.title(e):this.startsWith(e,"globals")?translate_choice("cp.globals",1)+": "+this.title(e):this.startsWith(e,"assets")?translate_choice("cp.asset_containers",2)+": "+this.title(e):translate("permissions.group_"+e)}}}}).call(t,i(1))},function(e,t){e.exports={props:{showEmailLogin:{default:!1},hasError:{default:!1}},ready:function(){this.hasError&&this.$el.parentElement.parentElement.classList.add("shake")}}},function(e,t,i){var n,s,a={};n=i(404),s=i(405),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["username"],data:function(){return{show:!0,errors:[],password:null}},ready:function(){this.$http.get(cp_url("auth/token")).success(function(t){e.http.headers.common["X-CSRF-TOKEN"]=t}),this.$els.password.focus()},computed:{hasErrors:function(){return!i.isEmpty(this.errors)}},methods:{submit:function(){var e=this;this.errors=[],this.$http.post(cp_url("auth/login"),{username:this.username,password:this.password}).success(function(t){e.errors=[],e.$notify.success(translate("cp.logged_in")),e.show=!1,e.$emit("closed")}).error(function(t){e.errors=t})}}}}.call(t,i(3),i(1))},function(e,t){e.exports=" <div> <modal :show=show class=modal-login :shake=hasErrors> <template slot=header> {{ translate('cp.login_to_continue') }} </template> <template slot=body> <div class=mb-2> <label :class=\"{ 'text-red': errors.password.length }\">{{ translate('cp.password_for', { username: this.username }) }} <i class=required>*</i></label> <input type=password name=password class=form-control v-model=password v-el:password @keydown.enter.prevent=submit /> <small class=\"block text-red mt-1\" v-if=errors.username.length>{{ errors.username[0] }}</small> <small class=\"block text-red mt-1\" v-if=errors.password.length>{{ errors.password[0] }}</small> </div> </template> <template slot=footer> <button @click.prevent=submit class=\"btn btn-primary\">{{ translate('cp.submit') }}</button> </template> </modal> </div> "},function(e,t,i){var n,s,a={};n=i(407),s=i(470),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{name:String,type:{type:String,default:function(){return"svg"}}},computed:{html:function(){return"div"===this.type?"<div style=\"background-image: url('"+resource_url("svg/"+this.name+".svg")+"')\"></div>":i(408)("./"+this.name+".svg")}}}},function(e,t,i){var n={"./array.svg":409,"./assets.svg":410,"./bard.svg":411,"./checkboxes.svg":412,"./collection.svg":413,"./collections.svg":414,"./date.svg":415,"./entries.svg":416,"./fieldset.svg":417,"./file-archive.svg":418,"./file-audio.svg":419,"./file-doc.svg":420,"./file-excel.svg":421,"./file-generic.svg":422,"./file-json.svg":423,"./file-layered.svg":424,"./file-pdf.svg":425,"./file-presentation.svg":426,"./file-video.svg":427,"./file-xml.svg":428,"./folder-search-empty.svg":429,"./folder.svg":430,"./form.svg":431,"./generic.svg":432,"./grid.svg":433,"./hidden.svg":434,"./integer.svg":435,"./list.svg":436,"./markdown.svg":437,"./pages.svg":438,"./partial.svg":439,"./picture.svg":440,"./radio.svg":441,"./redactor.svg":442,"./replicator.svg":443,"./revealer.svg":444,"./section.svg":445,"./select.svg":446,"./slug.svg":447,"./statamic-logo.svg":448,"./statamic-mark.svg":449,"./suggest.svg":450,"./table.svg":451,"./tabs.svg":452,"./tags.svg":453,"./taxonomy.svg":454,"./template.svg":455,"./text.svg":456,"./textarea.svg":457,"./theme.svg":458,"./time.svg":459,"./title.svg":460,"./toggle.svg":461,"./user-groups.svg":462,"./user-roles.svg":463,"./user_groups.svg":464,"./user_roles.svg":465,"./users.svg":466,"./video.svg":467,"./visit.svg":468,"./yaml.svg":469};function s(e){return i(a(e))}function a(e){var t=n[e];if(!(t+1))throw new Error("Cannot find module '"+e+"'.");return t}s.keys=function(){return Object.keys(n)},s.resolve=a,e.exports=s,s.id=408},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M15,12.5H7c-0.3,0-0.5,0.2-0.5,0.5v2c0,0.3,0.2,0.5,0.5,0.5h8c0.3,0,0.5-0.2,0.5-0.5v-2\n        C15.5,12.7,15.3,12.5,15,12.5z"/> <path class=st0 d="M15,7.5H7C6.7,7.5,6.5,7.7,6.5,8v2c0,0.3,0.2,0.5,0.5,0.5h8c0.3,0,0.5-0.2,0.5-0.5V8C15.5,7.7,15.3,7.5,15,7.5\n        z"/> <path class=st0 d=M9,0.5H1C0.7,0.5,0.5,0.7,0.5,1v2c0,0.3,0.2,0.5,0.5,0.5h8c0.3,0,0.5-0.2,0.5-0.5V1C9.5,0.7,9.3,0.5,9,0.5z /> <path class=st0 d=M4.5,3.5v1c0,0.6,0.4,1,1,1h3c0.6,0,1,0.4,1,1v1 /> <line class=st0 x1=11.5 y1=10.5 x2=11.5 y2=12.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d="M10,11.5H1c-0.3,0-0.5-0.2-0.5-0.5V1c0-0.3,0.2-0.5,0.5-0.5h9c0.3,0,0.5,0.2,0.5,0.5v10\n    C10.5,11.3,10.3,11.5,10,11.5z"/> <line class=st0 x1=10.5 y1=8.5 x2=0.5 y2=8.5 /> <path class=st0 d=M12.5,4.2L15.2,5c0.3,0.1,0.4,0.4,0.3,0.6l-3.2,9.5c-0.1,0.3-0.4,0.4-0.6,0.3l-7.2-2.4 /> <path class=st0 d=M3.5,8.5l2.8-4C6.6,4,7.4,4,7.8,4.5l2.7,3 /> <circle class=st0 cx=3.4 cy=3.4 r=1.1 /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=16px viewBox="0 0 15 16" style="enable-background:new 0 0 15 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <rect x=0.5 y=0.5 class=st0 width=2 height=15 /> <path class=st0 d="M2.5,1c3.4,1.3,7,1.3,10.7,0.4c0.3-0.1,0.6,0,0.9,0.2s0.4,0.5,0.4,0.8C14,8.3,10.8,12.8,4.9,15.3\n        c-0.2,0.1-0.5,0.2-0.8,0.2H2.5"/> <path class=st0 d="M2.5,3.5c2.4,1.1,5,1.3,7.8,0.6c0.4-0.1,0.7,0,1,0.3c0.3,0.3,0.3,0.7,0.2,1c-1.2,3.3-3.4,5.7-6.5,7.4\n        C4.7,12.9,4.3,13,4,13H2.5"/> <line class=st0 x1=4.5 y1=4.2 x2=4.5 y2=12.9 /> <line class=st0 x1=6.5 y1=4.5 x2=6.5 y2=11.8 /> <line class=st0 x1=8.5 y1=4.4 x2=8.5 y2=10.1 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M4.5,6l2.2,3.1c0.2,0.3,0.5,0.4,0.8,0.4c0.3,0,0.6-0.1,0.8-0.4l7.2-8.6 /> <path class=st0 d=M14.5,7v6.5c0,1.1-0.9,2-2,2h-10c-1.1,0-2-0.9-2-2v-10c0-1.1,0.9-2,2-2H11 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=14px height=16px viewBox="0 0 14 16" style="enable-background:new 0 0 14 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M10,15.5h3c0.3,0,0.5-0.2,0.5-0.5v-3.3c0-0.1-0.1-0.3-0.1-0.4l-0.7-0.7c-0.1-0.1-0.2-0.1-0.4-0.1H10\n        c-0.3,0-0.5,0.2-0.5,0.5v4C9.5,15.3,9.7,15.5,10,15.5z"/> <path class=st0 d="M10,6.5h3c0.3,0,0.5-0.2,0.5-0.5V2.7c0-0.1-0.1-0.3-0.1-0.4l-0.7-0.7c-0.1-0.1-0.2-0.1-0.4-0.1H10\n        C9.7,1.5,9.5,1.7,9.5,2v4C9.5,6.3,9.7,6.5,10,6.5z"/> <line class=st0 x1=0.5 y1=0.5 x2=0.5 y2=1.5 /> <line class=st0 x1=0.5 y1=3.5 x2=0.5 y2=5.5 /> <line class=st0 x1=0.5 y1=7.5 x2=0.5 y2=9.5 /> <path class=st0 d=M0.5,11.5v1c0,0.6,0.4,1,1,1h1 /> <line class=st0 x1=4.5 y1=13.5 x2=6.5 y2=13.5 /> <line class=st0 x1=8.5 y1=13.5 x2=9.5 y2=13.5 /> <line class=st0 x1=0.5 y1=4.5 x2=2.5 y2=4.5 /> <line class=st0 x1=4.5 y1=4.5 x2=6.5 y2=4.5 /> <line class=st0 x1=8.5 y1=4.5 x2=9.5 y2=4.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M15.5,9.2c0-0.4-0.3-0.7-0.7-0.7H1.2c-0.4,0-0.7,0.3-0.7,0.7v5.7c0,0.4,0.3,0.7,0.7,0.7h13.7\n        c0.4,0,0.7-0.3,0.7-0.7V9.2z"/> <path class=st0 d=M1.5,8.5V4.7C1.5,4.3,1.8,4,2.2,4h5.6C8,4,8.2,4.1,8.3,4.3l0.8,1.2h4.3c0.4,0,0.7,0.3,0.7,0.7v2.4 /> <line class=st0 x1=6 y1=10.5 x2=10 y2=10.5 /> <path class=st0 d=M13.2,3.5V2.7c0-0.4-0.3-0.7-0.7-0.7H9.1L8.3,0.8C8.2,0.6,8,0.5,7.8,0.5H3c-0.4,0-0.7,0.3-0.7,0.7v0.7 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <path class=st0 d=M15.5,14.5c0,0.6-0.4,1-1,1h-13c-0.6,0-1-0.4-1-1v-11c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1V14.5z /> <line class=st0 x1=0.5 y1=6.5 x2=15.5 y2=6.5 /> <line class=st0 x1=4.5 y1=4 x2=4.5 y2=0.5 /> <line class=st0 x1=11.5 y1=4 x2=11.5 y2=0.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg class=stroke-current width=16px height=16px viewBox="0 0 16 16" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <g stroke=none stroke-width=1 fill=none fill-rule=evenodd stroke-linecap=round stroke-linejoin=round> <path d="M15.5004,12.5003 C15.5004,13.0523 15.0524,13.5003 14.5004,13.5003 L3.5004,13.5003 C2.9474,13.5003 2.5004,13.0523 2.5004,12.5003 L2.5004,1.5003 C2.5004,0.9473 2.9474,0.5003 3.5004,0.5003 L14.5004,0.5003 C15.0524,0.5003 15.5004,0.9473 15.5004,1.5003 L15.5004,12.5003 Z" stroke=currentColor></path> <path d="M13.5004,15.5003 L1.5004,15.5003 C0.9474,15.5003 0.5004,15.0523 0.5004,14.5003 L0.5004,2.5003" stroke=currentColor></path> <path d="M5.5004,4.5003 L12.5004,4.5003" stroke=currentColor></path> <path d="M5.5004,6.5003 L12.5004,6.5003" stroke=currentColor></path> <path d="M5.5004,8.5003 L10.5004,8.5003" stroke=currentColor></path> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d=M6,15.5H1.5c-0.6,0-1-0.4-1-1V10c0-0.6,0.4-1,1-1H6c0.6,0,1,0.4,1,1v4.5C7,15.1,6.6,15.5,6,15.5z /> <line class=st0 x1=0.5 y1=13 x2=7 y2=13 /> <path class=st0 d=M6,7H1.5c-0.6,0-1-0.4-1-1V1.5c0-0.6,0.4-1,1-1H6c0.6,0,1,0.4,1,1V6C7,6.6,6.6,7,6,7z /> <line class=st0 x1=0.5 y1=4.5 x2=7 y2=4.5 /> <path class=st0 d=M14.5,7H10C9.4,7,9,6.6,9,6V1.5c0-0.6,0.4-1,1-1h4.5c0.6,0,1,0.4,1,1V6C15.5,6.6,15.1,7,14.5,7z /> <line class=st0 x1=9 y1=4.5 x2=15.5 y2=4.5 /> <path class=st0 d=M14.5,15.5H10c-0.6,0-1-0.4-1-1V10c0-0.6,0.4-1,1-1h4.5c0.6,0,1,0.4,1,1v4.5C15.5,15.1,15.1,15.5,14.5,15.5z /> <line class=st0 x1=9 y1=13 x2=15.5 y2=13 /> </svg> '},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>2 - ZIP File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-1089.000000, -719.000000)"> <g id=ZIP-File transform="translate(1089.000000, 719.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-12 fill=#E9E9E0 fill-rule=evenodd></path> <polyline id=Fill-13 fill=#D9D7CA fill-rule=evenodd points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <polygon id=Fill-271 fill=#C8BDB8 fill-rule=evenodd points="20 42 22 42 22 55.94 20 55.94"></polygon> <polyline id=Fill-272 fill=#C8BDB8 fill-rule=evenodd points="24 23 24 21 22 21 22 19 20 19 20 21 18 21 18 23 20 23 20 25 18 25 18 27 20 27 20 29 18 29 18 31 20 31 20 34 22 34 22 31 24 31 24 29 22 29 22 27 24 27 24 25 22 25 22 23 24 23"></polyline> <polygon id=Fill-304 fill=#CBB292 fill-rule=evenodd points="17 34 25 34 25 42 17 42"></polygon> <polygon id=Stroke-305 stroke=#5E5F62 stroke-width=2 points="17 34 25 34 25 42 17 42"></polygon> <polygon id=Stroke-306 stroke=#5E5F62 stroke-width=2 points="25 37 17 37"></polygon> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>67 -Music File- (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-846.000000, -1073.000000)"> <g id=67--Music-File--(Flat) transform="translate(846.000000, 1073.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-294 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-295 fill=#EFEADD></path> <path d="M18,41.014 L18,41.014 C15.791,41.014 14,39.223 14,37.014 C14,34.805 15.791,33.014 18,33.014 L22,33.014 L22,37.014 C22,39.223 20.209,41.014 18,41.014" id=Fill-517 fill=#F38774></path> <path d="M21,34.014 L20.998,34.014 C20.446,34.013 19.999,33.565 20,33.012 L20.031,14.012 C20.032,13.595 20.291,13.223 20.682,13.077 C21.073,12.932 21.513,13.043 21.786,13.359 L25.94,18.143 C27.906,20.389 28.542,23.548 27.597,26.384 L26.984,28.317 C26.818,28.842 26.26,29.137 25.729,28.967 C25.202,28.8 24.911,28.239 25.078,27.711 L25.695,25.765 C26.422,23.586 25.936,21.174 24.433,19.456 L22.027,16.686 L22,33.016 C21.999,33.568 21.552,34.014 21,34.014" id=Fill-518 fill=#F38774></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-520 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-521 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-522 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-486.000000, -953.000000)"> <g id=54--DOCX-File--(document,-paper,-write,-note,-flat) transform="translate(486.000000, 953.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-266 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-267 fill=#EFEADD></path> <path d="M8.7208,24.014 L9.9998,20.176 L11.2788,24.014 L8.7208,24.014 Z M14.9488,28.698 L10.9488,16.698 C10.8128,16.289 10.4308,16.014 9.9998,16.014 C9.5698,16.014 9.1878,16.289 9.0518,16.698 L5.0518,28.698 C4.8768,29.222 5.1598,29.788 5.6838,29.962 C6.2108,30.137 6.7738,29.854 6.9488,29.33 L8.0538,26.014 L11.9458,26.014 L13.0518,29.33 C13.1908,29.749 13.5808,30.014 13.9998,30.014 C14.1048,30.014 14.2118,29.997 14.3168,29.962 C14.8408,29.788 15.1238,29.222 14.9488,28.698 L14.9488,28.698 Z" id=Fill-417 fill=#71C385></path> <path d="M36,18.014 L18,18.014 C17.448,18.014 17,17.567 17,17.014 C17,16.461 17.448,16.014 18,16.014 L36,16.014 C36.552,16.014 37,16.461 37,17.014 C37,17.567 36.552,18.014 36,18.014" id=Fill-418 fill=#D4D0BA></path> <path d="M36,24.014 L18,24.014 C17.448,24.014 17,23.567 17,23.014 C17,22.461 17.448,22.014 18,22.014 L36,22.014 C36.552,22.014 37,22.461 37,23.014 C37,23.567 36.552,24.014 36,24.014" id=Fill-419 fill=#D4D0BA></path> <path d="M36,30.014 L18,30.014 C17.448,30.014 17,29.567 17,29.014 C17,28.461 17.448,28.014 18,28.014 L36,28.014 C36.552,28.014 37,28.461 37,29.014 C37,29.567 36.552,30.014 36,30.014" id=Fill-420 fill=#D4D0BA></path> <path d="M36,36.014 L6,36.014 C5.448,36.014 5,35.567 5,35.014 C5,34.461 5.448,34.014 6,34.014 L36,34.014 C36.552,34.014 37,34.461 37,35.014 C37,35.567 36.552,36.014 36,36.014" id=Fill-421 fill=#D4D0BA></path> <path d="M36,42.014 L6,42.014 C5.448,42.014 5,41.567 5,41.014 C5,40.461 5.448,40.014 6,40.014 L36,40.014 C36.552,40.014 37,40.461 37,41.014 C37,41.567 36.552,42.014 36,42.014" id=Fill-422 fill=#D4D0BA></path> <path d="M36,48.014 L6,48.014 C5.448,48.014 5,47.567 5,47.014 C5,46.461 5.448,46.014 6,46.014 L36,46.014 C36.552,46.014 37,46.461 37,47.014 C37,47.567 36.552,48.014 36,48.014" id=Fill-423 fill=#D4D0BA></path> </g> </g> </g> </svg> '},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>19 - XLS File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-249.000000, -599.000000)"> <g id=XLS-File transform="translate(249.000000, 599.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-72 fill=#E9E9E0></path> <polyline id=Fill-73 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-159 fill=#91CDA0></path> <polyline id=Fill-160 fill=#FFFFFF points="13.879 48.106 16.436 53 14.535 53 12.936 49.199 12.799 49.199 11.076 53 9.176 53 11.732 48.106 9.012 42.924 10.885 42.924 12.662 47.025 12.799 47.025 14.727 42.924 16.6 42.924 13.879 48.106"></polyline> <polyline id=Fill-161 fill=#FFFFFF points="20.537 42.924 20.537 51.756 25.172 51.756 25.172 53 18.869 53 18.869 42.924 20.537 42.924"></polyline> <path d="M32.541,50.238 C32.541,50.603 32.466,50.956 32.315,51.298 C32.165,51.64 31.953,51.94 31.68,52.2 C31.406,52.46 31.069,52.667 30.668,52.822 C30.267,52.977 29.811,53.055 29.301,53.055 C29.082,53.055 28.856,53.043 28.624,53.021 C28.392,52.998 28.157,52.959 27.92,52.904 C27.683,52.85 27.457,52.774 27.243,52.679 C27.029,52.583 26.844,52.467 26.69,52.33 L26.977,51.154 C27.104,51.227 27.266,51.298 27.462,51.366 C27.658,51.435 27.86,51.498 28.07,51.558 C28.28,51.617 28.489,51.665 28.699,51.701 C28.909,51.737 29.105,51.756 29.287,51.756 C29.843,51.756 30.269,51.626 30.565,51.366 C30.861,51.106 31.01,50.722 31.01,50.211 C31.01,49.901 30.905,49.637 30.695,49.418 C30.485,49.199 30.224,49.001 29.909,48.823 C29.595,48.646 29.255,48.468 28.891,48.29 C28.526,48.112 28.184,47.902 27.865,47.661 C27.546,47.42 27.282,47.135 27.072,46.807 C26.862,46.479 26.758,46.068 26.758,45.576 C26.758,45.13 26.84,44.733 27.004,44.387 C27.168,44.04 27.389,43.746 27.667,43.505 C27.945,43.264 28.269,43.079 28.638,42.951 C29.007,42.823 29.397,42.76 29.807,42.76 C30.226,42.76 30.649,42.799 31.078,42.876 C31.506,42.953 31.853,43.079 32.117,43.252 C32.063,43.37 31.999,43.5 31.926,43.642 C31.853,43.783 31.784,43.915 31.721,44.038 C31.657,44.161 31.602,44.264 31.557,44.346 C31.511,44.428 31.483,44.474 31.475,44.482 C31.42,44.455 31.358,44.419 31.29,44.373 C31.222,44.327 31.124,44.282 30.996,44.236 C30.868,44.19 30.7,44.159 30.49,44.141 C30.28,44.122 30.012,44.127 29.684,44.154 C29.501,44.173 29.328,44.225 29.164,44.312 C29,44.398 28.854,44.505 28.727,44.633 C28.599,44.761 28.499,44.904 28.426,45.063 C28.353,45.223 28.316,45.376 28.316,45.521 C28.316,45.886 28.421,46.18 28.631,46.403 C28.84,46.627 29.1,46.822 29.41,46.991 C29.72,47.16 30.057,47.324 30.422,47.483 C30.786,47.643 31.126,47.837 31.44,48.065 C31.755,48.292 32.017,48.577 32.227,48.919 C32.436,49.261 32.541,49.7 32.541,50.238" id=Fill-162 fill=#FFFFFF></path> <path d="M17,16 L17,12 L5,12 L5,34 L38,34 L38,16 L17,16 L17,16 Z M7,14 L15,14 L15,16 L7,16 L7,14 Z M7,18 L15,18 L15,20 L7,20 L7,18 Z M7,22 L15,22 L15,24 L7,24 L7,22 Z M7,26 L15,26 L15,28 L7,28 L7,26 Z M7,30 L15,30 L15,32 L7,32 L7,30 Z M17,30 L36,30 L36,32 L17,32 L17,30 Z M17,26 L36,26 L36,28 L17,28 L17,26 Z M17,22 L36,22 L36,24 L17,24 L17,22 Z M17,18 L36,18 L36,20 L17,20 L17,18 Z" id=Fill-163 fill=#C8BDB8></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>51 -File- (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-126.000000, -953.000000)"> <g id=51--File--(Flat) transform="translate(126.000000, 953.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-260 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-261 fill=#EFEADD></path> <path d="M24,13.014 L6,13.014 C5.448,13.014 5,12.567 5,12.014 C5,11.461 5.448,11.014 6,11.014 L24,11.014 C24.552,11.014 25,11.461 25,12.014 C25,12.567 24.552,13.014 24,13.014" id=Fill-393 fill=#D4D0BA></path> <path d="M36,19.014 L6,19.014 C5.448,19.014 5,18.567 5,18.014 C5,17.461 5.448,17.014 6,17.014 L36,17.014 C36.552,17.014 37,17.461 37,18.014 C37,18.567 36.552,19.014 36,19.014" id=Fill-394 fill=#D4D0BA></path> <path d="M36,25.014 L6,25.014 C5.448,25.014 5,24.567 5,24.014 C5,23.461 5.448,23.014 6,23.014 L36,23.014 C36.552,23.014 37,23.461 37,24.014 C37,24.567 36.552,25.014 36,25.014" id=Fill-395 fill=#D4D0BA></path> <path d="M36,31.014 L6,31.014 C5.448,31.014 5,30.567 5,30.014 C5,29.461 5.448,29.014 6,29.014 L36,29.014 C36.552,29.014 37,29.461 37,30.014 C37,30.567 36.552,31.014 36,31.014" id=Fill-396 fill=#D4D0BA></path> <path d="M36,37.014 L6,37.014 C5.448,37.014 5,36.567 5,36.014 C5,35.461 5.448,35.014 6,35.014 L36,35.014 C36.552,35.014 37,35.461 37,36.014 C37,36.567 36.552,37.014 36,37.014" id=Fill-397 fill=#D4D0BA></path> <path d="M36,43.014 L6,43.014 C5.448,43.014 5,42.567 5,42.014 C5,41.461 5.448,41.014 6,41.014 L36,41.014 C36.552,41.014 37,41.461 37,42.014 C37,42.567 36.552,43.014 36,43.014" id=Fill-398 fill=#D4D0BA></path> <path d="M36,49.014 L6,49.014 C5.448,49.014 5,48.567 5,48.014 C5,47.461 5.448,47.014 6,47.014 L36,47.014 C36.552,47.014 37,47.461 37,48.014 C37,48.567 36.552,49.014 36,49.014" id=Fill-399 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>25 - JSON File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-729.000000, -479.000000)"> <g id=JSON-File transform="translate(729.000000, 479.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-22 fill=#E9E9E0></path> <polyline id=Fill-23 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-109 fill=#9777A8></path> <path d="M10.522,42.719 L10.522,50.566 C10.522,51.04 10.435,51.44 10.262,51.763 C10.089,52.086 9.856,52.346 9.565,52.542 C9.273,52.738 8.938,52.875 8.56,52.952 C8.182,53.029 7.792,53.068 7.391,53.068 C7.19,53.068 6.955,53.048 6.687,53.007 C6.418,52.966 6.14,52.902 5.853,52.815 C5.565,52.728 5.29,52.631 5.025,52.522 C4.761,52.412 4.538,52.289 4.356,52.152 L5.053,51.045 C5.144,51.108 5.273,51.175 5.442,51.243 C5.611,51.311 5.796,51.375 5.996,51.435 C6.196,51.494 6.406,51.546 6.625,51.592 C6.844,51.638 7.049,51.66 7.24,51.66 C7.724,51.66 8.108,51.566 8.396,51.38 C8.683,51.193 8.835,50.876 8.854,50.43 L8.854,42.719 L10.522,42.719" id=Fill-110 fill=#FFFFFF></path> <path d="M18.684,50.238 C18.684,50.603 18.608,50.956 18.458,51.298 C18.308,51.64 18.096,51.94 17.822,52.2 C17.549,52.46 17.212,52.667 16.81,52.822 C16.409,52.978 15.954,53.055 15.443,53.055 C15.225,53.055 14.999,53.043 14.767,53.021 C14.534,52.998 14.3,52.959 14.063,52.904 C13.825,52.85 13.6,52.774 13.386,52.679 C13.172,52.583 12.987,52.467 12.832,52.33 L13.119,51.154 C13.247,51.228 13.408,51.298 13.605,51.366 C13.801,51.435 14.003,51.498 14.213,51.558 C14.423,51.617 14.632,51.665 14.842,51.701 C15.052,51.737 15.247,51.756 15.43,51.756 C15.985,51.756 16.412,51.626 16.708,51.366 C17.004,51.106 17.152,50.722 17.152,50.211 C17.152,49.901 17.048,49.637 16.838,49.418 C16.628,49.199 16.366,49.001 16.052,48.823 C15.737,48.646 15.398,48.468 15.033,48.29 C14.669,48.112 14.327,47.902 14.008,47.661 C13.689,47.42 13.425,47.135 13.215,46.807 C13.005,46.479 12.9,46.068 12.9,45.576 C12.9,45.13 12.982,44.733 13.147,44.387 C13.311,44.04 13.531,43.746 13.81,43.505 C14.088,43.264 14.411,43.079 14.78,42.951 C15.149,42.823 15.539,42.76 15.949,42.76 C16.368,42.76 16.792,42.799 17.221,42.876 C17.649,42.953 17.995,43.079 18.26,43.252 C18.205,43.37 18.142,43.5 18.068,43.642 C17.995,43.783 17.927,43.915 17.863,44.038 C17.8,44.161 17.745,44.264 17.699,44.346 C17.653,44.428 17.626,44.474 17.617,44.482 C17.563,44.455 17.501,44.419 17.433,44.373 C17.364,44.327 17.267,44.282 17.139,44.236 C17.011,44.19 16.843,44.159 16.633,44.141 C16.423,44.122 16.154,44.127 15.826,44.154 C15.644,44.173 15.471,44.225 15.307,44.311 C15.143,44.398 14.997,44.505 14.869,44.633 C14.741,44.761 14.642,44.904 14.568,45.064 C14.495,45.223 14.459,45.376 14.459,45.522 C14.459,45.886 14.564,46.18 14.773,46.403 C14.983,46.627 15.243,46.822 15.553,46.991 C15.862,47.16 16.2,47.324 16.565,47.483 C16.929,47.643 17.269,47.837 17.583,48.065 C17.898,48.292 18.159,48.577 18.369,48.919 C18.579,49.261 18.684,49.7 18.684,50.238" id=Fill-111 fill=#FFFFFF></path> <path d="M28.582,47.914 C28.582,48.762 28.475,49.509 28.261,50.156 C28.047,50.804 27.75,51.341 27.372,51.77 C26.994,52.198 26.552,52.522 26.046,52.74 C25.54,52.959 24.986,53.068 24.385,53.068 C23.783,53.068 23.23,52.959 22.724,52.74 C22.218,52.522 21.775,52.198 21.398,51.77 C21.02,51.341 20.723,50.804 20.509,50.156 C20.295,49.509 20.188,48.762 20.188,47.914 C20.188,47.066 20.295,46.321 20.509,45.679 C20.723,45.036 21.02,44.501 21.398,44.072 C21.775,43.644 22.218,43.318 22.724,43.095 C23.23,42.871 23.783,42.76 24.385,42.76 C24.986,42.76 25.54,42.871 26.046,43.095 C26.552,43.318 26.994,43.644 27.372,44.072 C27.75,44.501 28.047,45.036 28.261,45.679 C28.475,46.321 28.582,47.066 28.582,47.914 L28.582,47.914 Z M24.344,51.729 C24.681,51.729 25.002,51.662 25.308,51.53 C25.613,51.398 25.887,51.182 26.128,50.881 C26.369,50.58 26.559,50.185 26.695,49.698 C26.832,49.211 26.905,48.616 26.914,47.914 C26.905,47.23 26.834,46.649 26.702,46.171 C26.57,45.692 26.388,45.298 26.155,44.988 C25.923,44.679 25.658,44.455 25.362,44.318 C25.066,44.182 24.754,44.113 24.426,44.113 C24.089,44.113 23.768,44.177 23.462,44.305 C23.156,44.433 22.883,44.648 22.642,44.954 C22.4,45.26 22.211,45.653 22.074,46.137 C21.938,46.62 21.864,47.212 21.856,47.914 C21.864,48.598 21.936,49.181 22.067,49.664 C22.199,50.147 22.382,50.541 22.614,50.847 C22.847,51.152 23.111,51.375 23.407,51.517 C23.703,51.658 24.016,51.729 24.344,51.729 L24.344,51.729 Z" id=Fill-112 fill=#FFFFFF></path> <polyline id=Fill-113 fill=#FFFFFF points="38.18 42.924 38.18 53 36.512 53 32.561 46.055 32.561 53 30.893 53 30.893 42.924 32.561 42.924 36.512 49.869 36.512 42.924 38.18 42.924"></polyline> <path d="M13,19 L13,15 C13,14.449 13.448,14 14,14 C14.553,14 15,13.552 15,13 C15,12.448 14.553,12 14,12 C12.346,12 11,13.346 11,15 L11,19 C11,20.103 10.103,21 9,21 C8.447,21 8,21.448 8,22 C8,22.552 8.447,23 9,23 C10.103,23 11,23.897 11,25 L11,29 C11,30.654 12.346,32 14,32 C14.553,32 15,31.552 15,31 C15,30.448 14.553,30 14,30 C13.448,30 13,29.551 13,29 L13,25 C13,23.8 12.458,22.734 11.618,22 C12.458,21.266 13,20.2 13,19" id=Fill-114 fill=#9777A8></path> <path d="M21,17 C20.172,17 19.5,17.672 19.5,18.5 C19.5,19.328 20.172,20 21,20 C21.828,20 22.5,19.328 22.5,18.5 C22.5,17.672 21.828,17 21,17" id=Fill-115 fill=#9777A8></path> <path d="M33,21 C31.898,21 31,20.103 31,19 L31,15 C31,13.346 29.654,12 28,12 C27.447,12 27,12.448 27,13 C27,13.552 27.447,14 28,14 C28.552,14 29,14.449 29,15 L29,19 C29,20.2 29.542,21.266 30.382,22 C29.542,22.734 29,23.8 29,25 L29,29 C29,29.551 28.552,30 28,30 C27.447,30 27,30.448 27,31 C27,31.552 27.447,32 28,32 C29.654,32 31,30.654 31,29 L31,25 C31,23.897 31.898,23 33,23 C33.553,23 34,22.552 34,22 C34,21.448 33.553,21 33,21" id=Fill-116 fill=#9777A8></path> <path d="M21,24 C20.447,24 20,24.448 20,25 L20,28 C20,28.552 20.447,29 21,29 C21.553,29 22,28.552 22,28 L22,25 C22,24.448 21.553,24 21,24" id=Fill-117 fill=#9777A8></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>68 -PSD File- (document, paper, write, note, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-966.000000, -1073.000000)"> <g id=68--PSD-File--(document,-paper,-write,-note,-flat) transform="translate(966.000000, 1073.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-296 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-297 fill=#EFEADD></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-523 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-524 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-525 fill=#D4D0BA></path> <polygon id=Fill-526 fill=#26B999 points="26 30.014 6 30.014 16 18.014 36 18.014"></polygon> <polygon id=Fill-527 fill=#6BDDC0 points="26 30.014 11 30.014 6 36.014 26 36.014 36 24.014 31 24.014"></polygon> <polygon id=Fill-528 fill=#26B999 points="26 36.014 11 36.014 6 42.014 26 42.014 36 30.014 31 30.014"></polygon> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>28 - PDF File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-369.000000, -479.000000)"> <g id=PDF-File transform="translate(369.000000, 479.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-100 fill=#E9E9E0></path> <polyline id=Fill-101 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M13.014,33.324 L13.014,33.324 C12.666,33.324 12.332,33.211 12.047,32.998 C11.006,32.216 10.866,31.347 10.932,30.755 C11.114,29.128 13.127,27.423 16.917,25.687 C18.421,22.391 19.852,18.33 20.705,14.937 C19.707,12.764 18.738,9.947 19.444,8.293 C19.692,7.715 20.002,7.27 20.578,7.078 C20.807,7.002 21.382,6.906 21.594,6.906 C22.098,6.906 22.541,7.555 22.855,7.955 C23.15,8.332 23.819,9.129 22.482,14.758 C23.83,17.541 25.739,20.377 27.57,22.319 C28.881,22.082 30.009,21.961 30.928,21.961 C32.494,21.961 33.443,22.327 33.83,23.078 C34.15,23.7 34.018,24.427 33.439,25.238 C32.882,26.017 32.115,26.429 31.219,26.429 C30.003,26.429 28.587,25.661 27.008,24.144 C24.17,24.737 20.857,25.795 18.179,26.966 C17.343,28.74 16.542,30.169 15.796,31.217 C14.773,32.654 13.889,33.324 13.014,33.324 L13.014,33.324 Z M15.676,28.198 C13.538,29.399 12.667,30.386 12.605,30.942 C12.595,31.034 12.568,31.276 13.036,31.634 C13.185,31.587 14.055,31.19 15.676,28.198 L15.676,28.198 Z M29.313,23.756 C30.128,24.383 30.327,24.7 30.86,24.7 C31.094,24.7 31.762,24.69 32.07,24.259 C32.219,24.05 32.277,23.916 32.299,23.845 C32.177,23.779 32.014,23.648 31.124,23.648 C30.62,23.648 29.985,23.669 29.313,23.756 L29.313,23.756 Z M21.843,17.174 C21.127,19.648 20.183,22.319 19.169,24.738 C21.259,23.927 23.531,23.219 25.665,22.718 C24.315,21.15 22.966,19.192 21.843,17.174 L21.843,17.174 Z M21.236,8.712 C21.138,8.745 19.906,10.469 21.332,11.928 C22.281,9.813 21.279,8.698 21.236,8.712 L21.236,8.712 Z" id=Fill-102 fill=#CC4B4C></path> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-286 fill=#CC4B4C></path> <path d="M10.885,53 L9.244,53 L9.244,42.924 L12.143,42.924 C12.571,42.924 12.995,42.992 13.414,43.129 C13.833,43.266 14.209,43.471 14.542,43.744 C14.875,44.018 15.144,44.348 15.349,44.735 C15.554,45.123 15.656,45.558 15.656,46.041 C15.656,46.552 15.569,47.014 15.397,47.429 C15.223,47.844 14.981,48.192 14.672,48.475 C14.362,48.757 13.988,48.976 13.551,49.131 C13.113,49.286 12.63,49.363 12.102,49.363 L10.885,49.363 L10.885,53 L10.885,53 Z M10.885,44.168 L10.885,48.16 L12.389,48.16 C12.589,48.16 12.787,48.126 12.983,48.058 C13.179,47.989 13.359,47.878 13.523,47.723 C13.688,47.567 13.819,47.352 13.92,47.073 C14.02,46.795 14.07,46.451 14.07,46.041 C14.07,45.877 14.047,45.688 14.002,45.474 C13.956,45.26 13.863,45.055 13.722,44.858 C13.58,44.662 13.382,44.498 13.127,44.366 C12.872,44.234 12.534,44.168 12.115,44.168 L10.885,44.168 L10.885,44.168 Z" id=Fill-287 fill=#FFFFFF></path> <path d="M25.719,47.682 C25.719,48.511 25.63,49.22 25.452,49.808 C25.274,50.396 25.049,50.888 24.775,51.284 C24.502,51.681 24.194,51.993 23.853,52.221 C23.511,52.448 23.18,52.619 22.861,52.733 C22.542,52.848 22.251,52.92 21.986,52.952 C21.722,52.984 21.526,53 21.398,53 L17.584,53 L17.584,42.924 L20.619,42.924 C21.467,42.924 22.212,43.059 22.855,43.327 C23.497,43.596 24.03,43.954 24.454,44.4 C24.878,44.847 25.194,45.355 25.404,45.925 C25.614,46.494 25.719,47.08 25.719,47.682 L25.719,47.682 Z M20.852,51.797 C21.963,51.797 22.766,51.441 23.258,50.73 C23.75,50.02 23.996,48.989 23.996,47.641 C23.996,47.222 23.946,46.807 23.846,46.397 C23.745,45.986 23.552,45.615 23.265,45.282 C22.978,44.949 22.588,44.681 22.096,44.476 C21.604,44.271 20.965,44.168 20.182,44.168 L19.225,44.168 L19.225,51.797 L20.852,51.797 L20.852,51.797 Z" id=Fill-288 fill=#FFFFFF></path> <polyline id=Fill-289 fill=#FFFFFF points="29.766 44.168 29.766 47.34 33.977 47.34 33.977 48.461 29.766 48.461 29.766 53 28.098 53 28.098 42.924 34.4 42.924 34.4 44.168 29.766 44.168"></polyline> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>59 -PPTX File- (document, paper, write, note, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-1086.000000, -953.000000)"> <g id=59--PPTX-File--(document,-paper,-write,-note,-flat) transform="translate(1086.000000, 953.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-276 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-277 fill=#EFEADD></path> <path d="M22,13.014 L22,25.014 L34,25.014 C34,18.387 28.627,13.014 22,13.014" id=Fill-462 fill=#F38774></path> <path d="M18,29.014 L18,17.014 C13.974,17.014 10.42,19.003 8.244,22.045 L18,29.014 Z" id=Fill-463 fill=#F0C41A></path> <path d="M8.2682,22.0134 C6.8442,23.9834 6.0002,26.3974 6.0002,29.0144 C6.0002,35.6414 11.3722,41.0144 18.0002,41.0144 C24.6272,41.0144 30.0002,35.6414 30.0002,29.0144 L18.0002,29.0144 L8.2432,22.0454" id=Fill-464 fill=#26B999></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-532 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-533 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-534 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=42px height=59px viewBox="0 0 42 59" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>66 -Video File- (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-726.000000, -1073.000000)"> <g id=66--Video-File--(Flat) transform="translate(726.000000, 1073.000000)"> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L42,12.014 Z" id=Fill-292 fill=#D4D0BA></path> <path d="M42,12.014 L32,12.014 C30.895,12.014 30,11.119 30,10.014 L30,0.014 L2,0.014 C0.895,0.014 0,0.909 0,2.014 L0,56.014 C0,57.119 0.895,58.014 2,58.014 L40,58.014 C41.105,58.014 42,57.119 42,56.014 L42,12.014 Z" id=Fill-293 fill=#EFEADD></path> <path d="M24,37.014 L8,37.014 C6.895,37.014 6,36.119 6,35.014 L6,23.014 C6,21.909 6.895,21.014 8,21.014 L24,21.014 C25.105,21.014 26,21.909 26,23.014 L26,35.014 C26,36.119 25.105,37.014 24,37.014" id=Fill-513 fill=#546080></path> <path d="M33.4253,35.2416 L26.0003,33.0136 L26.0003,25.0136 L33.4253,22.7866 C34.7083,22.4016 36.0003,23.3626 36.0003,24.7016 L36.0003,33.3256 C36.0003,34.6656 34.7083,35.6266 33.4253,35.2416" id=Fill-514 fill=#374564></path> <path d="M36,49.014 L26,49.014 C25.447,49.014 25,48.567 25,48.014 C25,47.461 25.447,47.014 26,47.014 L36,47.014 C36.553,47.014 37,47.461 37,48.014 C37,48.567 36.553,49.014 36,49.014" id=Fill-515 fill=#D4D0BA></path> <path d="M31,53.014 L26,53.014 C25.447,53.014 25,52.567 25,52.014 C25,51.461 25.447,51.014 26,51.014 L31,51.014 C31.553,51.014 32,51.461 32,52.014 C32,52.567 31.553,53.014 31,53.014" id=Fill-516 fill=#D4D0BA></path> <path d="M36,53.014 L35,53.014 C34.447,53.014 34,52.567 34,52.014 C34,51.461 34.447,51.014 35,51.014 L36,51.014 C36.553,51.014 37,51.461 37,52.014 C37,52.567 36.553,53.014 36,53.014" id=Fill-519 fill=#D4D0BA></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=43px height=56px viewBox="0 0 43 56" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <title>24 - XML File (document, format, extension, file, type, flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-849.000000, -479.000000)"> <g id=XML-File transform="translate(849.000000, 479.000000)"> <path d="M30.485,0 L1.463,0 C0.655,0 0,0.655 0,1.926 L0,55 C0,55.345 0.655,56 1.463,56 L41.537,56 C42.345,56 43,55.345 43,55 L43,12.978 C43,12.282 42.907,12.058 42.743,11.893 L31.107,0.257 C30.942,0.093 30.718,0 30.485,0" id=Fill-24 fill=#E9E9E0></path> <polyline id=Fill-25 fill=#D9D7CA points="31 0.151 31 12 42.849 12 31 0.151"></polyline> <path d="M41.537,56 L1.463,56 C0.655,56 0,55.345 0,54.537 L0,39 L43,39 L43,54.537 C43,55.345 42.345,56 41.537,56" id=Fill-118 fill=#F29C1F></path> <polyline id=Fill-119 fill=#FFFFFF points="12.879 48.105 15.436 53 13.535 53 11.936 49.199 11.799 49.199 10.076 53 8.176 53 10.732 48.105 8.012 42.924 9.885 42.924 11.662 47.025 11.799 47.025 13.727 42.924 15.6 42.924 12.879 48.105"></polyline> <polyline id=Fill-120 fill=#FFFFFF points="25.498 42.924 27.166 42.924 27.166 53 25.498 53 25.498 46.068 23.242 51.674 21.793 51.674 19.523 46.068 19.523 53 17.856 53 17.856 42.924 19.523 42.924 22.518 49.815 25.498 42.924"></polyline> <polyline id=Fill-121 fill=#FFFFFF points="31.363 42.924 31.363 51.756 35.998 51.756 35.998 53 29.695 53 29.695 42.924 31.363 42.924"></polyline> <path d="M9,24 C8.744,24 8.488,23.902 8.293,23.707 C7.902,23.316 7.902,22.684 8.293,22.293 L14.293,16.293 C14.684,15.902 15.316,15.902 15.707,16.293 C16.098,16.684 16.098,17.316 15.707,17.707 L9.707,23.707 C9.512,23.902 9.256,24 9,24" id=Fill-122 fill=#F29C1F></path> <path d="M15,30 C14.744,30 14.488,29.902 14.293,29.707 L8.293,23.707 C7.902,23.316 7.902,22.684 8.293,22.293 C8.684,21.902 9.316,21.902 9.707,22.293 L15.707,28.293 C16.098,28.684 16.098,29.316 15.707,29.707 C15.512,29.902 15.256,30 15,30" id=Fill-123 fill=#F29C1F></path> <path d="M27,30 C26.744,30 26.488,29.902 26.293,29.707 C25.902,29.316 25.902,28.684 26.293,28.293 L32.293,22.293 C32.684,21.902 33.316,21.902 33.707,22.293 C34.098,22.684 34.098,23.316 33.707,23.707 L27.707,29.707 C27.512,29.902 27.256,30 27,30" id=Fill-124 fill=#F29C1F></path> <path d="M33,24 C32.744,24 32.488,23.902 32.293,23.707 L26.293,17.707 C25.902,17.316 25.902,16.684 26.293,16.293 C26.684,15.902 27.316,15.902 27.707,16.293 L33.707,22.293 C34.098,22.684 34.098,23.316 33.707,23.707 C33.512,23.902 33.256,24 33,24" id=Fill-125 fill=#F29C1F></path> <path d="M18,32 C17.89,32 17.777,31.982 17.667,31.943 C17.147,31.759 16.873,31.188 17.057,30.667 L23.057,13.667 C23.241,13.146 23.81,12.872 24.333,13.057 C24.854,13.241 25.127,13.812 24.943,14.333 L18.943,31.333 C18.798,31.744 18.412,32 18,32" id=Fill-126 fill=#F29C1F></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8"?><svg width=64 height=64 version=1.1 viewBox="0 0 64 64" xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink><g transform=scale(2.66667)><path fill=none stroke=currentColor stroke-linejoin=round stroke-width=1 d="M20.3284,14.6716c1.5621,1.5621 1.5621,4.09476 0,5.65685c-1.5621,1.5621 -4.09476,1.5621 -5.65685,0c-1.5621,-1.5621 -1.5621,-4.09476 -1.77636e-15,-5.65685c1.5621,-1.5621 4.09476,-1.5621 5.65685,-1.77636e-15"></path><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=1 d=M20.33,20.33l3.17,3.17></path><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=1 d="M18.5,4.5v-2h-13v-2h-5v15.5c0,0.829 0.67,1.5 1.5,1.5c0.828,0 1.5,-0.671 1.5,-1.5v-11.5h17v5"></path><path fill=none stroke=currentColor stroke-linecap=round stroke-linejoin=round stroke-width=1 d=M2,17.5h7.5></path><path fill=none d=M0,0h24v24h-24Z></path></g></svg> '},function(e,t){e.exports='<svg width=58px height=51px viewBox="0 0 58 51" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:sketch=http://www.bohemiancoding.com/sketch/ns> <g stroke=none stroke-width=1 fill=none fill-rule=evenodd> <g id=Icons transform="translate(-721.000000, -4081.000000)"> <g transform="translate(721.000000, 4081.000000)"> <path d="M55.981,51 L2.019,51 C0.904,51 0,50.096 0,48.981 L0,17 L58,17 L58,48.981 C58,50.096 57.096,51 55.981,51" id=Fill-1413 fill=#F0CE49 sketch:type=MSShapeGroup></path> <path d="M26.019,8 L26.019,2.019 C26.019,0.904 25.115,0 24,0 L2.019,0 C0.904,0 0,0.904 0,2.019 L0,17 L58,17 L58,10.019 C58,8.904 57.096,8 55.981,8 L26.019,8" id=Fill-1414 fill=#ECBA16 sketch:type=MSShapeGroup></path> </g> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d=M13.5,4.5v-1c0-0.6-0.4-1-1-1H9.8 /> <path class=st0 d=M4.2,2.5H1.5c-0.6,0-1,0.4-1,1v11c0,0.6,0.4,1,1,1H4 /> <path class=st0 d="M9.6,3.2C9.5,3.4,9.4,3.5,9.1,3.5H4.9c-0.2,0-0.4-0.1-0.5-0.3l-0.7-2C3.7,1,3.7,0.8,3.8,0.7\n    C3.9,0.6,4,0.5,4.2,0.5h5.6c0.2,0,0.3,0.1,0.4,0.2c0.1,0.1,0.1,0.3,0.1,0.5L9.6,3.2z"/> <path class=st0 d=M4.5,13.5H3c-0.3,0-0.5-0.2-0.5-0.5V4.5 /> <line class=st0 x1=10.5 y1=5 x2=10.5 y2=6.5 /> <line class=st0 x1=4.5 y1=6.5 x2=7.5 y2=6.5 /> <line class=st0 x1=4.5 y1=9.5 x2=5.5 y2=9.5 /> <path class=st0 d=M8.7,15.1l-2.5,0.4L6.6,13l6.4-6.4c0.6-0.6,1.5-0.6,2.1,0c0.6,0.6,0.6,1.5,0,2.1L8.7,15.1z /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d="M1.1,8.7C0.8,8.8,0.5,9.2,0.5,9.6v3.8c0,0.4,0.3,0.8,0.6,0.9l3,1.1c0.2,0.1,0.5,0.1,0.7,0l3-1.1\n    c0.4-0.1,0.6-0.5,0.6-0.9V9.6c0-0.4-0.3-0.8-0.6-0.9l-3-1.1c-0.2-0.1-0.5-0.1-0.7,0L1.1,8.7z"/> <polyline class=st0 points="0.7,9.1 4.5,10.5 8.3,9.1 "/> <line class=st0 x1=4.5 y1=10.5 x2=4.5 y2=15.5 /> <path class=st0 d=M15.3,2.6c-1,0.3-5.8,1.9-5.8,1.9L3.7,2.6 /> <line class=st0 x1=9.5 y1=4.5 x2=9.5 y2=7 /> <path class=st0 d="M3.5,5.5V3.2c0-0.4,0.3-0.8,0.7-0.9l5-1.7c0.2-0.1,0.4-0.1,0.6,0l5,1.7c0.4,0.1,0.7,0.5,0.7,0.9v5.7\n    c0,0.4-0.3,0.8-0.7,0.9l-4.3,1.4"/> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <line class=st0 x1=6.5 y1=13.5 x2=9.5 y2=13.5 /> <line class=st0 x1=8 y1=12 x2=8 y2=15 /> <path class=st0 d=M5,15.5H1.5c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13c0,0.6-0.4,1-1,1H11 /> <line class=st0 x1=0.5 y1=4.5 x2=15.5 y2=4.5 /> <g> <path d=M13,5.8c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8C13.8,6.1,13.4,5.8,13,5.8L13,5.8z /> </g> <line class=st0 x1=0.5 y1=8.5 x2=15.5 y2=8.5 /> <line class=st0 x1=11 y1=12.5 x2=15.5 y2=12.5 /> <line class=st0 x1=0.5 y1=12.5 x2=5 y2=12.5 /> <g> <path d=M13,9.7c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8C13.8,10.1,13.4,9.7,13,9.7L13,9.7z /> </g> <g> <path d=M13,1.7c-0.4,0-0.8,0.3-0.8,0.8c0,0.4,0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8C13.8,2.1,13.4,1.7,13,1.7L13,1.7z /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=13px viewBox="0 0 16 13" style="enable-background:new 0 0 16 13" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <line class=st0 x1=1.9 y1=12.5 x2=14.4 y2=0.5 /> <path class=st0 d=M6,11.2c0.7,0.2,1.3,0.3,2,0.3c2.7,0,5.5-1.9,7.2-3.8c0.4-0.4,0.4-1.1,0-1.5c-0.6-0.6-1.3-1.3-2-1.8 /> <path class=st0 d=M9.6,2.7C9.1,2.6,8.5,2.5,8,2.5c-2.7,0-5.5,1.8-7.2,3.8c-0.4,0.4-0.4,1.1,0,1.5c0.5,0.5,1.1,1.1,1.7,1.6 /> <path class=st0 d=M5.5,7c0-1.4,1.1-2.5,2.5-2.5 /> <path class=st0 d=M10.5,7L10.5,7c0,1.4-1.1,2.5-2.5,2.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=12px height=16px viewBox="0 0 12 16" style="enable-background:new 0 0 12 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <line class=st0 x1=3.5 y1=15.5 x2=3.5 y2=0.5 /> <polyline class=st0 points="0.5,12.5 3.5,15.5 6.5,12.5 \t\t"/> </g> <g> <path class=st0 d=M10.5,6.5V1c0-0.2-0.1-0.4-0.3-0.4c-0.2-0.1-0.4-0.1-0.5,0L8.5,1.5 /> <line class=st0 x1=9.5 y1=6.5 x2=11.5 y2=6.5 /> </g> <circle class=st0 cx=10 cy=11 r=1.5 /> <path class=st0 d=M9.5,15.5c1.1,0,2-0.9,2-2V11 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <circle class=st0 cx=2 cy=2 r=1.5 /> <circle class=st0 cx=2 cy=8 r=1.5 /> <circle class=st0 cx=2 cy=14 r=1.5 /> <line class=st0 x1=5.5 y1=2.5 x2=15.5 y2=2.5 /> <line class=st0 x1=5.5 y1=8.5 x2=15.5 y2=8.5 /> <line class=st0 x1=5.5 y1=14.5 x2=15.5 y2=14.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13C15.5,15.1,15.1,15.5,14.5,15.5z /> <g> <polyline class=st0 points="7.5,12 7.5,7 6,9.5 4.5,7 4.5,12 \t\t"/> </g> <g> <path class=st0 d=M9.5,12c1.1,0,2-0.9,2-2V9c0-1.1-0.9-2-2-2V12z /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M4.5,10.5h-3c-0.6,0-1,0.4-1,1v3c0,0.6,0.4,1,1,1h3c0.6,0,1-0.4,1-1v-3C5.5,10.9,5.1,10.5,4.5,10.5z /> <path class=st0 d=M9.5,0.5h-3c-0.6,0-1,0.4-1,1v3c0,0.6,0.4,1,1,1h3c0.6,0,1-0.4,1-1v-3C10.5,0.9,10.1,0.5,9.5,0.5z /> <path class=st0 d=M14.5,10.5h-3c-0.6,0-1,0.4-1,1v3c0,0.6,0.4,1,1,1h3c0.6,0,1-0.4,1-1v-3C15.5,10.9,15.1,10.5,14.5,10.5z /> <path class=st0 d=M3,10.5v-1c0-0.6,0.4-1,1-1h8c0.6,0,1,0.4,1,1v1 /> <line class=st0 x1=8 y1=5.5 x2=8 y2=8.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=14.5px viewBox="0 0 16 14.5" style="enable-background:new 0 0 16 14.5" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <path class=st0 d="M7.5,3l7.3,0c0.4,0,0.7,0.3,0.7,0.6v9.7c0,0.4-0.3,0.6-0.7,0.6H1.2c-0.4,0-0.7-0.3-0.7-0.6V3.6\n    C0.5,3.3,0.8,3,1.2,3l2.3,0"/> <line class=st0 x1=8 y1=7.5 x2=13.5 y2=7.5 /> <line class=st0 x1=4.5 y1=10.5 x2=13.5 y2=10.5 /> <path class=st0 d=M2.5,3V2c0-0.8,0.7-1.5,1.5-1.5h0c0.8,0,1.5,0.7,1.5,1.5v4.5c0,0.6-0.4,1-1,1h0c-0.6,0-1-0.4-1-1V5 /> </svg> '},function(e,t){e.exports='<?xml version="1.0" encoding="UTF-8" standalone="no"?> <svg width=50px height=52px viewBox="0 0 50 52" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:sketch=http://www.bohemiancoding.com/sketch/ns> <title>276 - Picture (Flat)</title> <desc>Created with Sketch.</desc> <defs></defs> <g id=Page-1 stroke=none stroke-width=1 fill=none fill-rule=evenodd sketch:type=MSPage> <g id=Icons sketch:type=MSArtboardGroup transform="translate(-605.000000, -1563.000000)"> <g id=276---Picture-(Flat) sketch:type=MSLayerGroup transform="translate(606.000000, 1564.000000)"> <path d="M0,0 L48,0 L48,50 L0,50 L0,0 Z" id=Fill-681 fill=#424A60 sketch:type=MSShapeGroup></path> <path d="M0,0 L48,0 L48,50 L0,50 L0,0 Z" id=Stroke-682 stroke=#E8EDEE stroke-width=2 sketch:type=MSShapeGroup></path> <path d="M16.569,12.569 C16.569,15.092 14.523,17.138 12,17.138 C9.477,17.138 7.431,15.092 7.431,12.569 C7.431,10.046 9.477,8 12,8 C14.523,8 16.569,10.046 16.569,12.569" id=Fill-1868 fill=#F0CE49 sketch:type=MSShapeGroup></path> <path d="M0,40 L48,40 L48,50 L0,50 L0,40 Z" id=Fill-1869 fill=#E8EDEE sketch:type=MSShapeGroup></path> <path d="M47,31.111 L46,30 L34,19 L23.5,30.5 L33,40 L47,40 L47,31.111" id=Fill-2555 fill=#199172 sketch:type=MSShapeGroup></path> <path d="M28.983,35.983 L18.017,25.017 L1,40 L33,40 L28.983,35.983" id=Fill-2562 fill=#25AE88 sketch:type=MSShapeGroup></path> </g> </g> </g> </svg>'},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M4,8.8l1.6,2.3c0.1,0.2,0.3,0.3,0.6,0.3c0.2,0,0.4-0.1,0.6-0.3L12,4.6 /> <circle class=st0 cx=8 cy=8 r=7.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=16px viewBox="0 0 15 16" style="enable-background:new 0 0 15 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M14.5,14.5c0,0.6-0.4,1-1,1h-12c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h10c0.3,0,0.5,0.1,0.7,0.3l2,1.9\n        c0.2,0.2,0.3,0.4,0.3,0.7V14.5z"/> <line class=st0 x1=5.5 y1=7.5 x2=5.5 y2=3.5 /> <polyline class=st0 points="3.5,4.5 3.5,3.5 7.5,3.5 7.5,4.5 \t"/> <line class=st0 x1=10 y1=6.5 x2=11.5 y2=6.5 /> <line class=st0 x1=10 y1=3.5 x2=11.5 y2=3.5 /> <line class=st0 x1=3.5 y1=9.5 x2=11.5 y2=9.5 /> <line class=st0 x1=3.5 y1=12.5 x2=11.5 y2=12.5 /> <line class=st0 x1=4.5 y1=7.5 x2=6.5 y2=7.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,3.5h-13c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v1C15.5,3.1,15.1,3.5,14.5,3.5z /> <path class=st0 d=M14.5,9.5h-13c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v1C15.5,9.1,15.1,9.5,14.5,9.5z /> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v1C15.5,15.1,15.1,15.5,14.5,15.5z /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M3,8c0,0,2-3,5-3s5,3,5,3s-2,3-5,3S3,8,3,8z /> <path class=st0 d="M8,9.2L8,9.2C7.3,9.2,6.8,8.7,6.8,8v0c0-0.7,0.6-1.2,1.2-1.2h0c0.7,0,1.2,0.6,1.2,1.2v0C9.2,8.7,8.7,9.2,8,9.2\n        z"/> <g> <path class=st0 d=M0.5,3V1.5c0-0.6,0.4-1,1-1H3 /> <path class=st0 d=M15.5,3V1.5c0-0.6-0.4-1-1-1H13 /> <path class=st0 d=M0.5,13v1.5c0,0.6,0.4,1,1,1H3 /> <path class=st0 d=M15.5,13v1.5c0,0.6-0.4,1-1,1H13 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=16px viewBox="0 0 15 16" style="enable-background:new 0 0 15 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M3,3.5H1C0.7,3.5,0.5,3.3,0.5,3V1c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2C3.5,3.3,3.3,3.5,3,3.5z /> <path class=st0 d="M3,15.5H1c-0.3,0-0.5-0.2-0.5-0.5v-2c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2\n        C3.5,15.3,3.3,15.5,3,15.5z"/> <path class=st0 d="M14,3.5h-2c-0.3,0-0.5-0.2-0.5-0.5V1c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2\n        C14.5,3.3,14.3,3.5,14,3.5z"/> <path class=st0 d="M14,15.5h-2c-0.3,0-0.5-0.2-0.5-0.5v-2c0-0.3,0.2-0.5,0.5-0.5h2c0.3,0,0.5,0.2,0.5,0.5v2\n        C14.5,15.3,14.3,15.5,14,15.5z"/> <line class=st0 x1=3.5 y1=1.5 x2=11.5 y2=1.5 /> <line class=st0 x1=13.5 y1=3.5 x2=13.5 y2=12.5 /> <line class=st0 x1=11.5 y1=14.5 x2=3.5 y2=14.5 /> <line class=st0 x1=1.5 y1=12.5 x2=1.5 y2=3.5 /> <g> <path class=st0 d=M4.5,6c0-0.8,0.7-1.5,1.5-1.5h3c0.8,0,1.5,0.7,1.5,1.5 /> <line class=st0 x1=7.5 y1=4.5 x2=7.5 y2=11.5 /> <line class=st0 x1=5.5 y1=11.5 x2=9.5 y2=11.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <polyline class=st0 points="7,13 8,13.5 9,13 \t"/> <g> <path class=st0 d=M14.5,11h-13c-0.6,0-1-0.4-1-1V1.5c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1V10C15.5,10.6,15.1,11,14.5,11z /> <path class=st0 d=M12.5,11h-9v2.5c0,1.1,0.9,2,2,2h5c1.1,0,2-0.9,2-2V11z /> <line class=st0 x1=0.5 y1=4 x2=15.5 y2=4 /> <line class=st0 x1=0.5 y1=7.5 x2=15.5 y2=7.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M15.5,13.5c0,1.1-0.9,2-2,2 /> <path class=st0 d=M13.5,2.5c1.1,0,2,0.9,2,2 /> <path class=st0 d=M4.5,15.5c-1.1,0-2-0.9-2-2 /> <line class=st0 x1=2.5 y1=8.5 x2=2.5 y2=10.5 /> <line class=st0 x1=15.5 y1=7.5 x2=15.5 y2=10.5 /> <line class=st0 x1=10.5 y1=15.5 x2=7.5 y2=15.5 /> <line class=st0 x1=10.5 y1=2.5 x2=8.5 y2=2.5 /> </g> <g> <polygon class=st0 points="0.5,0.5 2.6,6.2 3.7,3.7 6.2,2.6 \t"/> </g> <path class=st0 d=M11.5,5.5C11.5,5.5,12,5,13,5 /> <path class=st0 d=M11.5,5.5C11.5,5.5,11,5,10,5 /> <path class=st0 d=M11.5,13c0,0,0.5,0.5,1.5,0.5 /> <path class=st0 d=M11.5,13c0,0-0.5,0.5-1.5,0.5 /> <line class=st0 x1=11.5 y1=13 x2=11.5 y2=5.5 /> </svg> '},function(e,t){e.exports='<svg class=statamic-logo width=90 height=20 xmlns=http://www.w3.org/2000/svg xmlns=http://www.w3.org/1999/xlink viewBox="0 0 438.5 84.9"> <g> <path fill=#3C4858 d="M2.7,69.2c0.9-1.1,1.8-1.6,3-1.6c1.2,0,2.5,0.5,3.7,1.4c3.9,2.6,8.4,4.1,13.7,4.1c4.1,0,7.3-1.7,7.3-5.2\n            c0-9-29.9-4.1-29.9-24.2c0-10.8,8.9-16.9,20.3-16.9c8.1,0,14,2.3,18.5,5.2c1.1,0.7,1.8,2.2,1.8,3.7c0,0.9-0.2,1.7-0.7,2.5l-1.4,2\n            c-1,1.4-2.1,2-3.4,2c-1,0-2-0.4-3.1-0.9c-3.3-1.7-6.8-2.6-10.9-2.6c-4.3,0-6.9,2.3-6.9,4.8c0,9.2,29.9,4.2,29.9,23.7\n            c0,10.9-8.9,17.7-22.4,17.7c-8.6,0-14.9-2.6-20.7-7.6c-1-0.9-1.4-2-1.4-3.1c0-0.9,0.2-1.8,0.9-2.6L2.7,69.2z"/> <path fill=#3C4858 d="M88.3,75c0.4,0.6,0.6,1.4,0.6,2.1c0,1.6-0.7,3.2-2.1,3.9c-4.2,2.5-8.4,3.7-13.9,3.7\n            c-12.5,0-17.2-8.1-17.2-22.3V17.3c0-2.5,2.1-4.6,4.6-4.6h5c2.5,0,4.6,2.1,4.6,4.6v10.8h13.3c2.5,0,4.6,2.1,4.6,4.6v4.2\n            c0,2.5-2.1,4.6-4.6,4.6H69.9v20.2c0,6,2,10,6.6,10c1.5,0,2.8-0.2,3.9-0.6s2-0.6,2.8-0.6c1.6,0,2.8,0.7,3.8,2.5L88.3,75z"/> <path fill=#3C4858 d="M96.9,67.3c0-12.2,9-18,20.2-18c4.9,0,9.8,1.6,12.5,3.6c0-0.6,0-1.1,0-1.7c0-8.1-2.6-12.5-10.3-12.5\n            c-4.2,0-6.9,0.6-9.5,1.5c-0.7,0.2-1.5,0.4-2.2,0.4c-1.8,0-3.3-0.9-4.2-2.6l-0.7-1.5c-0.2-0.6-0.5-1.2-0.5-2c0-1.6,1.1-3.2,2.6-3.9\n            c4.8-2.2,10.3-3.7,16-3.7c16.4,0,22.1,8.4,22.1,23V79c0,2.5-2.1,4.6-4.6,4.6h-3.2c-2.5,0-4.6-2.1-4.6-4.6v-1.8\n            c-3,4.2-8.9,7.1-16.4,7.1C104.2,84.3,96.9,78,96.9,67.3z M129.6,61.6c-2.5-1.8-5.7-2.7-9.7-2.7c-4.7,0-8.9,2.2-8.9,6.9\n            c0,4.2,3.4,6.5,7.9,6.5c5.9,0,9-2.6,10.7-5V61.6z"/> <path fill=#3C4858 d="M188.8,75c0.4,0.6,0.6,1.4,0.6,2.1c0,1.6-0.7,3.2-2.1,3.9c-4.2,2.5-8.4,3.7-13.9,3.7\n            c-12.5,0-17.2-8.1-17.2-22.3V17.3c0-2.5,2.1-4.6,4.6-4.6h5c2.5,0,4.6,2.1,4.6,4.6v10.8h13.3c2.5,0,4.6,2.1,4.6,4.6v4.2\n            c0,2.5-2.1,4.6-4.6,4.6h-13.3v20.2c0,6,2,10,6.6,10c1.5,0,2.8-0.2,3.9-0.6s2-0.6,2.8-0.6c1.6,0,2.8,0.7,3.8,2.5L188.8,75z"/> <path fill=#3C4858 d="M197.4,67.3c0-12.2,9-18,20.2-18c4.9,0,9.8,1.6,12.5,3.6c0-0.6,0-1.1,0-1.7c0-8.1-2.6-12.5-10.3-12.5\n            c-4.2,0-6.9,0.6-9.5,1.5c-0.7,0.2-1.5,0.4-2.2,0.4c-1.8,0-3.3-0.9-4.2-2.6l-0.7-1.5c-0.2-0.6-0.5-1.2-0.5-2c0-1.6,1.1-3.2,2.6-3.9\n            c4.8-2.2,10.3-3.7,16-3.7c16.4,0,22.1,8.4,22.1,23V79c0,2.5-2.1,4.6-4.6,4.6h-3.2c-2.5,0-4.6-2.1-4.6-4.6v-1.8\n            c-3,4.2-8.9,7.1-16.4,7.1C204.7,84.3,197.4,78,197.4,67.3z M230.1,61.6c-2.5-1.8-5.7-2.7-9.7-2.7c-4.7,0-8.9,2.2-8.9,6.9\n            c0,4.2,3.4,6.5,7.9,6.5c5.9,0,9-2.6,10.7-5V61.6z"/> <path fill=#3C4858 d="M272.1,34.3c3.9-4.4,10.5-7.1,17.3-7.1c8.5,0,14.1,3.8,16.1,8.9c3.9-5.2,10.1-8.9,18.7-8.9\n            c10.1,0,17.7,5,17.7,20.2V79c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V51c0-6.9-2.8-10.6-9.5-10.6c-5.3,0-9.5,2.6-11.4,6.4\n            c0,0.9,0.1,2.8,0.1,4.1v28c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V50.1c0-5.8-3.2-9.6-9.2-9.6c-5,0-9.1,2.2-11.6,5.9V79\n            c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V32.7c0-2.5,2.1-4.6,4.6-4.6h5c2.5,0,4.6,2.1,4.6,4.6V34.3z"/> <path fill=#3C4858 d="M373.9,8.2c0,5.7-4.1,8.9-8.1,8.9c-4.8,0-8.9-3.2-8.9-8.9c0-5,4.1-8.2,8.9-8.2C369.8,0,373.9,3.2,373.9,8.2z\n             M368,28.2c2.5,0,4.6,2.1,4.6,4.6V79c0,2.5-2.1,4.6-4.6,4.6h-5c-2.5,0-4.6-2.1-4.6-4.6V32.7c0-2.5,2.1-4.6,4.6-4.6H368z"/> <path fill=#3C4858 d="M427.3,42.3c-3.3-1.6-6.2-2.2-9.8-2.2c-7.9,0-15.4,6-15.4,15.7c0,9.8,7.6,15.9,16,15.9c4.4,0,7.5-1.1,10.7-3.2\n            c1-0.6,2-1,3-1c1.5,0,2.8,0.6,3.8,1.8l2.1,2.6c0.6,0.6,0.9,1.6,0.9,2.5c0,1.5-0.6,3.1-1.7,3.9c-6.6,5.3-12.5,6.5-19.4,6.5\n            c-18.3,0-30.4-11.6-30.4-29c0-16.1,11.8-29,28.7-29c7.4,0,12.8,1.2,18.2,4.2c1.4,0.7,2.2,2.5,2.2,4.1c0,0.7-0.1,1.4-0.5,2l-1.8,3.2\n            c-1,1.6-2.5,2.6-4.2,2.6C428.9,42.8,428.1,42.7,427.3,42.3z"/> </g> </svg> '},function(e,t){e.exports='<svg version=1.0 xmlns=http://www.w3.org/2000/svg xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=95.9px height=76.4px viewBox="0 0 95.9 76.4" style="enable-background:new 0 0 95.9 76.4" xml:space=preserve> <g> <path fill=3C4858 d="M26.5,73.1c0,2.1-1.7,3.3-3.9,3.3h-2.5c-7.7,0-12-3.4-12-12.1V50.1c0-5.3-2.5-7.6-5.2-8.4\r\n        C0.8,41.1,0,40,0,38.2c0-1.9,0.7-2.9,2.9-3.6c2.6-1,5.2-3.6,5.2-9.4V12.7C8.1,4.5,11.1,0,20.5,0h2.3c2.2,0,3.7,1.3,3.7,3.2\r\n        c0,2.2-1.4,3.5-3.6,3.5h-0.7c-5.1,0-6.9,2.2-6.9,8.4v12.8c0,5.8-2.7,9.7-6.7,10.2c3.8,0.4,6.7,3.3,6.7,10.2v13\r\n        c0,5.9,2.2,8.3,7.2,8.3C25.1,69.7,26.5,70.9,26.5,73.1z"/> <path fill=3C4858 d="M33.7,48c0.6-0.8,1.3-1.2,2.2-1.2c0.9,0,1.8,0.4,2.7,1c2.9,1.9,6.1,3,10,3c3,0,5.3-1.3,5.3-3.8\r\n        c0-6.6-21.8-3-21.8-17.7C32,21.4,38.5,17,46.8,17c5.9,0,10.2,1.7,13.5,3.8c0.8,0.5,1.3,1.6,1.3,2.7c0,0.6-0.2,1.3-0.5,1.8l-1,1.4\r\n        c-0.7,1-1.5,1.4-2.5,1.4c-0.7,0-1.4-0.3-2.2-0.6c-2.4-1.3-4.9-1.9-8-1.9c-3.1,0-5,1.7-5,3.5c0,6.7,21.8,3.1,21.8,17.3\r\n        c0,8-6.5,12.9-16.4,12.9c-6.3,0-10.9-1.9-15.1-5.6c-0.7-0.6-1-1.4-1-2.2c0-0.6,0.2-1.3,0.6-1.9L33.7,48z"/> <path fill=3C4858 d="M69.4,73.1c0-2.2,1.4-3.4,4-3.4c4.9,0,7.2-2.3,7.2-8.3v-13c0-6.9,3-9.8,6.7-10.2c-4-0.5-6.7-4.4-6.7-10.2V15.1\r\n        c0-6.1-1.8-8.4-6.9-8.4H73c-2.2,0-3.6-1.3-3.6-3.5c0-2,1.5-3.2,3.7-3.2h2.3c9.3,0,12.4,4.5,12.4,12.7v12.5c0,5.8,2.6,8.4,5.2,9.4\r\n        c2.2,0.7,2.9,1.7,2.9,3.6c0,1.8-0.8,2.9-2.9,3.5c-2.7,0.8-5.2,3.1-5.2,8.4v14.1c0,8.7-4.3,12.1-12,12.1h-2.5\r\n        C71.1,76.4,69.4,75.1,69.4,73.1z"/> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=15px viewBox="0 0 16 15" style="enable-background:new 0 0 16 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <circle class=st0 cx=12.6 cy=2.6 r=2.1 /> <line class=st0 x1=14.1 y1=4.1 x2=15.5 y2=5.5 /> </g> <path class=st0 d=M8.5,4.5h-7c-0.6,0-1-0.4-1-1v-1c0-0.6,0.4-1,1-1h7 /> <g> <path d=M1.8,6.5C1.3,6.5,1,6.8,1,7.2S1.3,8,1.8,8s0.8-0.3,0.8-0.8S2.2,6.5,1.8,6.5L1.8,6.5z /> </g> <g> <line class=st0 x1=4 y1=7.5 x2=12 y2=7.5 /> </g> <g> <path d=M1.8,10C1.3,10,1,10.3,1,10.8s0.3,0.8,0.8,0.8s0.8-0.3,0.8-0.8S2.2,10,1.8,10L1.8,10z /> </g> <g> <line class=st0 x1=4 y1=11 x2=12 y2=11 /> </g> <g> <path d=M1.8,13.5c-0.4,0-0.8,0.3-0.8,0.8S1.3,15,1.8,15s0.8-0.3,0.8-0.8S2.2,13.5,1.8,13.5L1.8,13.5z /> </g> <g> <line class=st0 x1=4 y1=14.5 x2=12 y2=14.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M13.5,14.5h-12c-0.6,0-1-0.4-1-1v-12c0-0.6,0.4-1,1-1h12c0.6,0,1,0.4,1,1v12C14.5,14.1,14.1,14.5,13.5,14.5z /> <line class=st0 x1=0.5 y1=4.5 x2=14.5 y2=4.5 /> <line class=st0 x1=7.5 y1=14.5 x2=7.5 y2=4.5 /> <line class=st0 x1=0.5 y1=9.5 x2=14.5 y2=9.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M2.3,4.6L1.9,7.2c0,0.3,0.1,0.5,0.3,0.7l6.3,6.3c0.4,0.4,1,0.4,1.4,0l4.2-4.2c0.4-0.4,0.4-1,0-1.4L7.8,2.1\n        C7.6,1.9,7.3,1.8,7.1,1.8L4.5,2.2"/> <circle class=st0 cx=5.1 cy=5.1 r=1 /> <line class=st0 x1=4.4 y1=4.4 x2=0.5 y2=0.5 /> </g> <line class=st0 x1=7.1 y1=7.1 x2=8.6 y2=5.7 /> <line class=st0 x1=8.6 y1=8.6 x2=10 y2=7.1 /> <line class=st0 x1=10 y1=10 x2=11.4 y2=8.6 /> <line class=st0 x1=5.7 y1=8.6 x2=8.6 y2=11.4 /> </svg> \0 '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M2.3,4.6L1.9,7.2c0,0.3,0.1,0.5,0.3,0.7l6.3,6.3c0.4,0.4,1,0.4,1.4,0l4.2-4.2c0.4-0.4,0.4-1,0-1.4L7.8,2.1\n        C7.6,1.9,7.3,1.8,7.1,1.8L4.5,2.2"/> <circle class=st0 cx=5.1 cy=5.1 r=1 /> <line class=st0 x1=4.4 y1=4.4 x2=0.5 y2=0.5 /> </g> <line class=st0 x1=7.1 y1=7.1 x2=8.6 y2=5.7 /> <line class=st0 x1=8.6 y1=8.6 x2=10 y2=7.1 /> <line class=st0 x1=10 y1=10 x2=11.4 y2=8.6 /> <line class=st0 x1=5.7 y1=8.6 x2=8.6 y2=11.4 /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=14px height=16px viewBox="0 0 14 16" style="enable-background:new 0 0 14 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M11.5,0.5h-9C2.2,0.5,2,0.7,2,1v2c0,0.3,0.2,0.5,0.5,0.5h9C11.8,3.5,12,3.3,12,3V1C12,0.7,11.8,0.5,11.5,0.5z /> <line class=st0 x1=7 y1=3.5 x2=7 y2=12.5 /> <path class=st0 d=M2,12.5v-3c0-0.6,0.4-1,1-1h8c0.6,0,1,0.4,1,1v3 /> <circle class=st0 cx=2 cy=14 r=1.5 /> <circle class=st0 cx=7 cy=14 r=1.5 /> <circle class=st0 cx=12 cy=14 r=1.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=14px viewBox="0 0 15 14" style="enable-background:new 0 0 15 14" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <path class=st0 d=M13.5,0.5h-12c-0.6,0-1,0.4-1,1v11c0,0.6,0.4,1,1,1h12c0.6,0,1-0.4,1-1v-11C14.5,0.9,14.1,0.5,13.5,0.5z /> <line class=st0 x1=0.5 y1=3.5 x2=14.5 y2=3.5 /> </g> <g> <path class=st0 d=M6,9.5H3C2.7,9.5,2.5,9.3,2.5,9V6c0-0.3,0.2-0.5,0.5-0.5h3c0.3,0,0.5,0.2,0.5,0.5v3C6.5,9.3,6.3,9.5,6,9.5z /> <line class=st0 x1=2.5 y1=11.5 x2=6.5 y2=11.5 /> <path class=st0 d="M12,11.5H9c-0.3,0-0.5-0.2-0.5-0.5V6c0-0.3,0.2-0.5,0.5-0.5h3c0.3,0,0.5,0.2,0.5,0.5v5\n            C12.5,11.3,12.3,11.5,12,11.5z"/> <line class=st0 x1=8.5 y1=8.5 x2=12.5 y2=8.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px class=stroke-current viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,11.5h-13c-0.6,0-1-0.4-1-1v-5c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v5C15.5,11.1,15.1,11.5,14.5,11.5z /> <g> <line class=st0 x1=11.5 y1=12.5 x2=11.5 y2=3.5 /> <path class=st0 d=M8.5,15.5c1.7,0,3-1.3,3-3c0,1.7,1.3,3,3,3 /> <path class=st0 d=M8.5,0.5c1.7,0,3,1.3,3,3c0-1.7,1.3-3,3-3 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13C15.5,15.1,15.1,15.5,14.5,15.5z /> <line class=st0 x1=6.5 y1=3.5 x2=12.5 y2=3.5 /> <line class=st0 x1=3.5 y1=9.5 x2=12.5 y2=9.5 /> <line class=st0 x1=3.5 y1=6.5 x2=12.5 y2=6.5 /> <line class=st0 x1=3.5 y1=12.5 x2=8.5 y2=12.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <line class=st0 x1=5.5 y1=15.5 x2=10.5 y2=15.5 /> <line class=st0 x1=8 y1=13.5 x2=8 y2=15.5 /> <line class=st0 x1=0.5 y1=11 x2=15.5 y2=11 /> <path class=st0 d=M14.5,2c0.6,0,1,0.4,1,1v9.5c0,0.6-0.4,1-1,1h-13c-0.6,0-1-0.4-1-1V3c0-0.6,0.4-1,1-1 /> <path class=st0 d=M3.5,9V1.5c0-0.6,0.4-1,1-1h7c0.6,0,1,0.4,1,1V9 /> <rect x=5.5 y=4.5 class=st0 width=2 height=2 /> <line class=st0 x1=3.5 y1=2.5 x2=12.5 y2=2.5 /> <line class=st0 x1=9.5 y1=4.5 x2=10.5 y2=4.5 /> <line class=st0 x1=9.5 y1=6 x2=10.5 y2=6 /> <line class=st0 x1=5.5 y1=8.5 x2=10.5 y2=8.5 /> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=15px height=15px viewBox="0 0 15 15" style="enable-background:new 0 0 15 15" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <circle class=st0 cx=7.5 cy=7.5 r=7 /> <circle class=st0 cx=7.5 cy=7.5 r=1 /> <line class=st0 x1=7.5 y1=6.5 x2=7.5 y2=3 /> <line class=st0 x1=8.2 y1=8.2 x2=10 y2=10 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=11px viewBox="0 0 16 11" style="enable-background:new 0 0 16 11" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <path class=st0 d=M0.5,2c0-0.8,0.7-1.5,1.5-1.5h5 /> <line class=st0 x1=4.5 y1=0.5 x2=4.5 y2=10.5 /> <line class=st0 x1=2.5 y1=10.5 x2=6.5 y2=10.5 /> </g> <g> <path class=st0 d=M9,0.5h5c0.8,0,1.5,0.7,1.5,1.5 /> <line class=st0 x1=11.5 y1=0.5 x2=11.5 y2=10.5 /> <line class=st0 x1=9.5 y1=10.5 x2=13.5 y2=10.5 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill-rule:evenodd;clip-rule:evenodd;fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M12.2,7H3.8C2,7,0.5,5.5,0.5,3.8l0,0C0.5,2,2,0.5,3.8,0.5h8.5c1.8,0,3.2,1.5,3.2,3.2l0,0C15.5,5.5,14,7,12.2,7\n        z"/> <path class=st0 d="M12.2,15.5H3.8c-1.8,0-3.2-1.5-3.2-3.2l0,0C0.5,10.5,2,9,3.8,9h8.5c1.8,0,3.2,1.5,3.2,3.2l0,0\n        C15.5,14,14,15.5,12.2,15.5z"/> <circle class=st0 cx=3.8 cy=3.8 r=1.2 /> <circle class=st0 cx=12.2 cy=12.2 r=1.2 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=8 cy=11.2 r=1.8 /> <path class=st0 d=M10.8,15.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2 /> </g> <g> <circle class=st0 cx=3.3 cy=2.2 r=1.8 /> <path class=st0 d=M6.1,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H6.1z /> </g> <g> <circle class=st0 cx=12.7 cy=2.2 r=1.8 /> <path class=st0 d=M15.5,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H15.5z /> </g> <path class=st0 d=M2.5,8.5V11c0,0.8,0.7,1.5,1.5,1.5h0.5 /> <path class=st0 d=M13.5,8.5V11c0,0.8-0.7,1.5-1.5,1.5h-0.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=3.5 cy=2.5 r=2 /> <path class=st0 d=M5,15.5l0.5-5h1v-2c0-1.7-1.3-3-3-3c-1.7,0-3,1.3-3,3v2h1l0.5,5H5z /> </g> <g> <path class=st0 d="M13,3.5h2c0.3,0,0.5-0.2,0.5-0.5V1c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,3.3,12.7,3.5,13,3.5z"/> <path class=st0 d="M13,9.5h2c0.3,0,0.5-0.2,0.5-0.5V7c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,9.3,12.7,9.5,13,9.5z"/> <path class=st0 d="M13,15.5h2c0.3,0,0.5-0.2,0.5-0.5v-2c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,15.3,12.7,15.5,13,15.5z"/> <line class=st0 x1=12.5 y1=7.5 x2=8.5 y2=7.5 /> <path class=st0 d=M12.5,1.5h-1c-0.6,0-1,0.4-1,1v10c0,0.6,0.4,1,1,1h1 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=8 cy=11.2 r=1.8 /> <path class=st0 d=M10.8,15.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2 /> </g> <g> <circle class=st0 cx=3.3 cy=2.2 r=1.8 /> <path class=st0 d=M6.1,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H6.1z /> </g> <g> <circle class=st0 cx=12.7 cy=2.2 r=1.8 /> <path class=st0 d=M15.5,6.5c-0.4-1.2-1.5-2-2.8-2c-1.3,0-2.4,0.8-2.8,2H15.5z /> </g> <path class=st0 d=M2.5,8.5V11c0,0.8,0.7,1.5,1.5,1.5h0.5 /> <path class=st0 d=M13.5,8.5V11c0,0.8-0.7,1.5-1.5,1.5h-0.5 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=3.5 cy=2.5 r=2 /> <path class=st0 d=M5,15.5l0.5-5h1v-2c0-1.7-1.3-3-3-3c-1.7,0-3,1.3-3,3v2h1l0.5,5H5z /> </g> <g> <path class=st0 d="M13,3.5h2c0.3,0,0.5-0.2,0.5-0.5V1c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,3.3,12.7,3.5,13,3.5z"/> <path class=st0 d="M13,9.5h2c0.3,0,0.5-0.2,0.5-0.5V7c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,9.3,12.7,9.5,13,9.5z"/> <path class=st0 d="M13,15.5h2c0.3,0,0.5-0.2,0.5-0.5v-2c0-0.3-0.2-0.5-0.5-0.5h-2c-0.3,0-0.5,0.2-0.5,0.5v2\n            C12.5,15.3,12.7,15.5,13,15.5z"/> <line class=st0 x1=12.5 y1=7.5 x2=8.5 y2=7.5 /> <path class=st0 d=M12.5,1.5h-1c-0.6,0-1,0.4-1,1v10c0,0.6,0.4,1,1,1h1 /> </g> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <g> <circle class=st0 cx=5.5 cy=7.2 r=1.8 /> <path class=st0 d=M2.5,12.5c0-1.7,1.3-3,3-3c1.7,0,3,1.3,3,3H2.5z /> </g> <line class=st0 x1=9.5 y1=7.5 x2=12.5 y2=7.5 /> <line class=st0 x1=9.5 y1=9.5 x2=13.5 y2=9.5 /> <path class=st0 d="M14.5,3.5h-13c-0.6,0-1,0.4-1,1v10c0,0.6,0.4,1,1,1h2c0-0.6,0.4-1,1-1c0.6,0,1,0.4,1,1h5c0-0.6,0.4-1,1-1\n        c0.6,0,1,0.4,1,1h2c0.6,0,1-0.4,1-1v-10C15.5,3.9,15.1,3.5,14.5,3.5z"/> <path class=st0 d=M15.5,1.5c0-0.6-0.4-1-1-1h-13c-0.6,0-1,0.4-1,1 /> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=13px viewBox="0 0 16 13" style="enable-background:new 0 0 16 13" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d="M6.9,4.6c-0.2-0.1-0.4-0.1-0.6,0C6.1,4.7,6,4.9,6,5.1v2.8c0,0.2,0.1,0.4,0.3,0.5c0.2,0.1,0.4,0.1,0.6,0\n        l2.7-1.3C9.8,7.1,10,6.8,10,6.5S9.8,5.9,9.6,5.8L6.9,4.6z"/> <path class=st0 d="M12.2,12.5H3.8c-0.4,0-0.8-0.3-0.8-0.8V1.3c0-0.4,0.3-0.8,0.8-0.8h8.4c0.4,0,0.8,0.3,0.8,0.8v10.4\n        C13,12.2,12.7,12.5,12.2,12.5z"/> <path class=st0 d=M1.3,2C0.9,2,0.5,2.4,0.5,2.8v7.4c0,0.4,0.4,0.8,0.8,0.8 /> <path class=st0 d=M14.7,2c0.4,0,0.8,0.4,0.8,0.8v7.4c0,0.4-0.4,0.8-0.8,0.8 /> </g> </svg> '},function(e,t){e.exports='<svg class=stroke-current width=16px height=12px viewBox="0 0 16 12" version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink> <g stroke=none stroke-width=1 fill=none fill-rule=evenodd stroke-linecap=round stroke-linejoin=round> <path d="M15.4997,4.5 L7.9997,4.5 C6.6187,4.5 5.4997,5.619 5.4997,7" stroke=currentColor></path> <polyline stroke=currentColor points="13.4997 2.5 15.4997 4.5 13.4997 6.5"></polyline> <path d="M11.4997,1.5 C11.4997,0.947 11.0527,0.5 10.4997,0.5 L1.4997,0.5 C0.9477,0.5 0.4997,0.947 0.4997,1.5 L0.4997,10.5 C0.4997,11.053 0.9477,11.5 1.4997,11.5 L10.4997,11.5 C11.0527,11.5 11.4997,11.053 11.4997,10.5 L11.4997,7.5" stroke=currentColor></path> </g> </svg> '},function(e,t){e.exports='<svg version=1.1 xmlns=http://www.w3.org/2000/svg xmlns:xlink=http://www.w3.org/1999/xlink xmlns:a=http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/ x=0px y=0px width=16px height=16px viewBox="0 0 16 16" style="enable-background:new 0 0 16 16" xml:space=preserve> <style type=text/css>.st0{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style> <defs> </defs> <g> <path class=st0 d=M14.5,15.5h-13c-0.6,0-1-0.4-1-1v-13c0-0.6,0.4-1,1-1h13c0.6,0,1,0.4,1,1v13C15.5,15.1,15.1,15.5,14.5,15.5z /> <g> <g> <path class=st0 d=M4.5,7v1.5c0,0.6,0.4,1,1,1s1-0.4,1-1V7 /> <line class=st0 x1=5.5 y1=9.5 x2=5.5 y2=12 /> </g> <g> <polyline class=st0 points="11.5,12 11.5,7 10,9.5 8.5,7 8.5,12"/> </g> </g> </g> </svg> '},function(e,t){e.exports=" <div :class=\"[ 'svg-icon', { 'using-div': type === 'div', 'using-svg': type === 'svg' } ]\" v-html=html></div> "},function(e,t,i){var n,s,a={};n=i(472),s=i(473),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{extension:String,type:{type:String,default:function(){return"svg"}}},computed:{name:function(){switch(this.extension){case"folder":return"folder";case"7z":case"pkg":case"rar":case"tar":case"tar.zg":case"z":case"zip":return"file-archive";case"aac":case"aif":case"cda":case"flac":case"m4a":case"mp3":case"mp4a":case"mpa":case"ogg":case"mid":case"midi":case"wav":case"wma":return"file-audio";case"doc":case"docx":return"file-doc";case"xls":case"xlsx":return"file-excel";case"json":return"file-json";case"ai":case"eps":case"indb":case"psd":case"sketch":return"file-layered";case"pdf":return"file-pdf";case"key":case"odp":case"pps":case"ppt":case"pptx":return"file-presentation";case"3g2":case"3gp":case"avi":case"flv":case"h264":case"m4v":case"mvk":case"mp4":case"mpg":case"mpeg":case"mov":case"rm":case"swf":case"vob":case"wmv":return"file-video";case"xml":return"file-xml";case"bmp":case"gif":case"ico":case"jpg":case"jpeg":case"png":case"tiff":return"picture";default:return"file-generic"}}}}},function(e,t){e.exports=" <svg-icon class=file-icon :type=type :name=name></svg-icon> "},function(e,t,i){(function(t,n){i(18),e.exports={template:i(475),props:{endpoint:String,type:{type:String,default:""},no_results_heading:{type:String,default:"This group has no items."},no_results_subheading:{type:String,default:!1},no_results_button:{type:String,default:"New Item"},new_url:{type:String,default:""},deleteMultiConfirmation:{type:String,default:"You are about to delete multiple entries."},mode:{type:String,default:"normal"}},components:{"field-status":i(476),"field-default":i(477)},data:function(){return{loading:!0,list:{rows:[],actions:{}},reordering:!1,search:null}},computed:{hasActions:function(){return this.list.actions.length},checkedEntries:function(){return this.list.rows.filter(function(e){return e.checked}).map(function(e){return e.uuid})},allEntriesChecked:function(){return this.list.rows.length===this.checkedEntries.length}},methods:{deleteItem:function(e,t,i,n){n.preventDefault(),self=this,swal({title:"Are you sure?",text:"You are about to delete this entry.",type:"warning",showCancelButton:!0,confirmButtonText:"Yes I'm sure.",closeOnConfirm:!1},function(){self.$http.delete(i,{uuid:e.uuid},function(e,i,n){swal("Deleted!","Your entry has been deleted.","success"),self.list.rows.$remove(t)})})},deleteMultiple:function(){var e=this;e.$event.preventDefault(),swal({title:"Are you sure?",text:e.deleteMultiConfirmation,type:"warning",showCancelButton:!0,confirmButtonText:"Yes I'm sure.",closeOnConfirm:!1},function(){e.$http.post(e.list.actions.delete.endpoint,{uuids:e.checkedEntries},function(t,i,n){swal("Deleted!","Your entries have been deleted.","success"),e.list.rows=e.list.rows.filter(function(e){return!1===e.checked})})})},checkAllEntries:function(){var e=!this.allEntriesChecked;t.each(this.list.rows,function(t){t.checked=e})},reset:function(){this.search=""},toggleReorder:function(e){e.preventDefault(),self=this,this.reordering=!this.reordering,n(".sortable tbody").sortable({axis:"y",revert:175,placeholder:"placeholder",forcePlaceholderSize:!0,start:function(e,t){t.item.data("start",t.item.index())},update:function(e,t){var i=t.item.data("start"),n=t.item.index();self.list.rows.splice(n,0,self.list.rows.splice(i,1)[0])}}).disableSelection()},saveOrder:function(e,t){t.preventDefault(),self=this;var i=n.map(this.list.rows,function(e,t){return e.uuid});this.$http.post(e,{uuids:i},function(e,t,i){console.log("Entries Reordered"),self.reordering=!1})},resolveComponent:function(e){return"field-"+e in this.$options.components?"field-"+e:"field-default"}},ready:function(){this.$http.get(this.endpoint,function(e,t,i){this.list=e,this.loading=!1})}}}).call(t,i(1),i(2))},function(e,t){e.exports='<div> <div v-if=loading class=loading> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if="!loading && list.rows && !list.rows.length"> <div class=no-results> <span class="icon icon-documents"></span> <h2>{{ no_results_heading }}</h2> <h3 v-if=no_results_subheading>{{ no_results_subheading }}</h3> <a href="{{ new_url }}" class="btn btn-default btn-lg">{{ no_results_button }}</a> </div> </div> <div v-if="!loading && list.rows && list.rows.length" class=actions> <div class=actions-controls v-if=hasActions> <input type=checkbox id=checkbox-all :checked=allEntriesChecked v-on:click=checkAllEntries> <label for=checkbox-all></label> <template v-if=list.actions.delete> <a :href=list.actions.delete.endpoint class=btn v-on:click=deleteMultiple> {{ translate(\'cp.delete\') }} </a> </template> <template v-if=list.actions.reorder> <a href="" v-on:click=toggleReorder($event) class=btn v-show="! reordering">{{ translate(\'cp.reorder\') }}</a> <a href="" v-on:click="saveOrder(list.actions.reorder.endpoint, $event)" class=btn v-show=reordering>{{ translate(\'cp.save_order\') }}</a> </template> </div> <input type=text :placeholder="\'Search \' + type" v-on:keydown.esc=reset v-model=search name=query class="search pull-right"> </div> <table v-if="!loading && list.rows && list.rows.length" class="sortable control"> <thead> <tr> <th class=checkbox-col v-if="hasActions || reordering"></th> <th v-if=hasStatus>{{ translate_choice(\'cp.statuses\', 1) }}</th> <th v-for="key in list.columns" :class="\'column-\' + key"> {{ key }} </th> <th class=column-actions>{{ translate_choice(\'cp.actions\', 2) }}</th> </tr> </thead> <tbody> <tr v-for="entry in list.rows | filterBy search" style=background:#fff> <td class=checkbox-col v-if="hasActions || reordering"> <div v-show="! reordering"> <input type=checkbox :id="\'checkbox-\' + $index" v-model=entry.checked> <label :for="\'checkbox-\' + $index"></label> </div> <div class=drag-handle v-show=reordering> <i class="fa fa-bars"></i> </div> </td> <td v-for="key in list.columns" :class="\'column-\' + key"> <component :is=resolveComponent(key) :entry=entry :type=key :primary=list.primary> </component> </td> <td class=column-actions> <div class=btn-group> <button type=button class="btn-more dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <li v-if=list.actions> <a href=""> {{ translate(\'cp.view\') }} </a> </li> <li v-if=list.actions.delete class=warning> <a href="" v-on:click="deleteItem(entry, $index, list.actions.delete.endpoint, $event)"> {{ list.actions.delete.label }} </a> </li> </ul> </div> </td> </tr> </tbody> </table> </div> '},function(e,t){e.exports={props:["entry","key","type","primary","is"],computed:{statusClass:function(){return"status status-"+(this.entry.published?"live":"hidden")}},template:'<span :class="statusClass"></span>'}},function(e,t){e.exports={props:["entry","type","primary"],template:'<a :href="entry.publish_url" v-if="primary === type">{{ entry[type] }}</a><template v-if="primary !== type">{{ entry[type] }}</template>'}},function(e,t,i){i(18),e.exports={props:{type:{type:String,default:null},title:{type:String,default:null},timer:{type:String,default:null},text:{type:String,default:null},button:{type:Boolean,default:!0}},ready:function(){swal.setDefaults({confirmButtonColor:"#748885"}),"confirm"===this.type?swal({title:this.title,text:this.text,type:"warning",showCancelButton:!0,confirmButtonText:"Yes. Do it.",closeOnConfirm:!1}):swal({title:this.title,text:this.text,timer:this.timer,type:this.type,showConfirmButton:this.button})}}},function(e,t,i){(function(t,n){e.exports={template:i(480),props:["data","config","name","fields","fieldtypes","root"],data:function(){return{selectedField:null}},computed:{hasFields:function(){return this.fields&&this.fields.length},selectedFieldConfig:function(){if(null===this.selectedField)return[];var e=this.fields[this.selectedField].type;return t.findWhere(this.fieldtypes,{name:e}).config}},methods:{addField:function(e){var i=(this.fields.length||0)+1,s=t.findWhere(this.fieldtypes,{name:e}),a=n.extend({},s);a.type=a.name,a.name="field_"+i,a.id="field_"+i,a.display="Field "+i,a.instructions=null,a.isNew=!0,delete a.config,delete a.label,delete a.canBeValidated,delete a.canBeLocalized,delete a.canHaveDefault,"title"===a.type?(a.display=translate("cp.title"),a.name="title",this.fields.unshift(a),this.selectedField=0):(this.fields.push(a),this.selectedField=i-1),this.$emit("field-added",a)},selectField:function(e){this.selectedField=e,this.tab="edit"},deleteField:function(e){this.selectedField=null,this.$emit("field-deleted",this.fields[e].id),this.fields.splice(e,1)},sortFields:function(e,t){this.fields.splice(t,0,this.fields.splice(e,1)[0]),this.ensureTitleIsFirst()},ensureTitleIsFirst:function(){var e=t.indexOf(this.fields,t.findWhere(this.fields,{name:"title"}));-1!==e&&"title"!==this.fields[0].name&&this.sortFields(e,0)}},ready:function(){this.fields=this.fields||[],this.root=Boolean(this.root||!1),this.ensureTitleIsFirst()}}}).call(t,i(1),i(2))},function(e,t){e.exports="<div class=fields-builder> <fieldset-fields v-show=hasFields :fields.sync=fields :fieldtypes=fieldtypes :selected-field.sync=selectedField :fieldtype-config=selectedFieldConfig :on-select=selectField :on-delete=deleteField :on-sort=sortFields :root=root> </fieldset-fields> <fieldtype-selector :fieldtypes=fieldtypes @field-selected=addField> </fieldtype-selector> </div> "},function(e,t,i){var n,s,a={};n=i(482),s=i(513),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(167),s=i.n(n),a=i(6);i.n(a);t.default={components:{FieldsetField:s.a},props:{fields:{},section:{},parentKey:{},fieldtypes:{},classes:{},isAdding:{type:Boolean,default:!1},isQuickAdding:{type:Boolean,default:!1}},computed:{isRootLevel:function(){return this.$parent.$el.classList.contains("section-layout")},allowAddingTitleField:function(){return this.isRootLevel&&!e.pluck(this.fields,"name").includes("title")},allowAddingSlugField:function(){return this.isRootLevel&&!e.pluck(this.fields,"name").includes("slug")},allowAddingDateField:function(){return this.isRootLevel&&!e.pluck(this.fields,"name").includes("date")}},ready:function(){null==this.fields&&(this.fields=[]),this.sortable()},methods:{sortable:function(){var e=this;if(!this.isRootLevel){var t=this.$el;new a.Sortable(t,{draggable:".section-field--"+this.parentKey,handle:".field-drag-handle--"+this.parentKey,appendTo:t,mirror:{constrainDimensions:!0}}).on("sortable:stop",function(t){e.fields.splice(t.newIndex,0,e.fields.splice(t.oldIndex,1)[0])})}},add:function(t){var i=this,n=this.fields||[],s=n.length+1;t.isMeta||(t.name="field_"+s,t.id="field_"+s,t.display="Field "+s),n.push(t),this.fields=n,this.isSelecting=!1,this.$notify.success(translate("cp.field_added",{fieldtype:t.isMeta?t.display:e.find(this.fieldtypes,{name:t.type}).label})),this.$nextTick(function(){var e=i.$refs.fields[s-1];i.isQuickAdding?e.focus():e.edit()})},updateFieldWidths:function(){this.$refs.fields&&e.each(this.$refs.fields,function(e){return e.updateFieldWidths()})},remove:function(e){confirm(translate("cp.are_you_sure"))&&this.fields.splice(e,1)}}}}.call(t,i(1))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(484),s=i.n(n),a=i(495),o=i.n(a),r=i(170),l=i.n(r),c=i(506),d=i.n(c),u=s()({strategy:"scroll"});t.default={components:{FieldSettings:o.a,WidthSelector:l.a,ReplicatorSets:d.a},props:{field:{},fieldtypes:{},section:{},isFirstField:{},isLastField:{},parentKey:{default:""}},data:function(){return{handleModified:!1,isEditing:!1,isShowingGridFields:!1,isShowingSets:!1,isAddingGridField:!1,displayFieldWidth:"100%",nameFieldWidth:"100%",width:null,height:null}},computed:{display:function(){return this.field.display},name:function(){return this.field.name},icon:function(){if(this.isMeta){if("title"===this.field.name)return"text";if("slug"===this.field.name)return"location-pin";if("date"===this.field.name)return"calendar"}return e.find(this.fieldtypes,{name:this.field.type}).icon},fieldKey:function(){return""==this.parentKey?this.field.id:this.parentKey+"-"+this.field.id},fieldtype:function(){return e.findWhere(this.fieldtypes,{name:this.field.type})},fieldtypeConfig:function(){return this.fieldtype.config},fieldtypeLabel:function(){return this.fieldtype.label},otherSections:function(){var t=this;return e.filter(this.$parent.$parent.sections,function(e){return e.id!==t.section.id})},isRootLevel:function(){return this.$parent.isRootLevel},isGridField:function(){return"grid"===this.field.type},isReplicatorField:function(){return["replicator","bard"].includes(this.field.type)},classes:function(){return["section-field","section-field--"+this.parentKey,"w-full md:"+tailwind_width_class(this.field.width),{"is-editing":this.isEditing,"root-level-section-field":this.isRootLevel,"is-first-field":this.isFirstField,"is-last-field":this.isLastField,"is-tiny":this.isTiny}]},canBeLocalized:function(){return this.isRootLevel&&Object.keys(Statamic.locales).length>1&&this.fieldtype.canBeLocalized},isTiny:function(){return this.width<400}},watch:{display:function(e){var t=this;this.handleModified||(this.field.name=this.$slugify(e,"_")),this.$nextTick(function(){return t.updateFieldWidths()})},name:function(e){this.updateFieldWidths()},isShowingGridFields:function(e){var t=this;e&&this.$nextTick(function(){return t.$refs.fields.updateFieldWidths()})},isShowingSets:function(e){var t=this;e&&this.$nextTick(function(){return t.$refs.sets.updateFieldWidths()})}},ready:function(){var e=this;u.listenTo(this.$el,function(t){e.width=t.offsetWidth,e.height=t.offsetHeight}),this.handleModified=!this.field.isNew||this.field.isMeta,this.updateFieldWidths()},methods:{focus:function(){this.$els.display.select()},edit:function(){var e=this;this.isEditing=!0,this.$nextTick(function(){return e.$refs.settings.focus()})},addField:function(){this.isAddingGridField=!0,this.isShowingGridFields=!0},fieldSelectorClosed:function(){this.isAddingGridField=!1,0===this.field.fields.length&&(this.isShowingGridFields=!1)},updateFieldWidths:function(){this.displayFieldWidth=this.$els.fieldDisplaySizer.offsetWidth+"px",this.nameFieldWidth=this.$els.fieldNameSizer.offsetWidth+"px"},addReplicatorSet:function(){this.isShowingSets=!0,this.$refs.sets.add()}}}}.call(t,i(1))},function(e,t,i){"use strict";var n=i(168).forEach,s=i(485),a=i(486),o=i(487),r=i(488),l=i(489),c=i(169),d=i(490),u=i(492),p=i(493),f=i(494);function h(e){return Array.isArray(e)||void 0!==e.length}function m(e){if(Array.isArray(e))return e;var t=[];return n(e,function(e){t.push(e)}),t}function g(e){return e&&1===e.nodeType}function v(e,t,i){var n=e[t];return void 0!==n&&null!==n||void 0===i?n:i}e.exports=function(e){var t;if((e=e||{}).idHandler)t={get:function(t){return e.idHandler.get(t,!0)},set:e.idHandler.set};else{var i=o(),x=r({idGenerator:i,stateHandler:u});t=x}var y=e.reporter;y||(y=l(!1===y));var b=v(e,"batchProcessor",d({reporter:y})),w={};w.callOnAdd=!!v(e,"callOnAdd",!0),w.debug=!!v(e,"debug",!1);var k,_=a(t),C=s({stateHandler:u}),S=v(e,"strategy","object"),A={reporter:y,batchProcessor:b,stateHandler:u,idHandler:t};if("scroll"===S&&(c.isLegacyOpera()?(y.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),S="object"):c.isIE(9)&&(y.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),S="object")),"scroll"===S)k=f(A);else{if("object"!==S)throw new Error("Invalid strategy name: "+S);k=p(A)}var M={};return{listenTo:function(e,i,s){function a(e){var t=_.get(e);n(t,function(t){t(e)})}function o(e,t,i){_.add(t,i),e&&i(t)}if(s||(s=i,i=e,e={}),!i)throw new Error("At least one element required.");if(!s)throw new Error("Listener required.");if(g(i))i=[i];else{if(!h(i))return y.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");i=m(i)}var r=0,l=v(e,"callOnAdd",w.callOnAdd),c=v(e,"onReady",function(){}),d=v(e,"debug",w.debug);n(i,function(e){u.getState(e)||(u.initState(e),t.set(e));var p=t.get(e);if(d&&y.log("Attaching listener to element",p,e),!C.isDetectable(e))return d&&y.log(p,"Not detectable."),C.isBusy(e)?(d&&y.log(p,"System busy making it detectable"),o(l,e,s),M[p]=M[p]||[],void M[p].push(function(){++r===i.length&&c()})):(d&&y.log(p,"Making detectable..."),C.markBusy(e,!0),k.makeDetectable({debug:d},e,function(e){if(d&&y.log(p,"onElementDetectable"),u.getState(e)){C.markAsDetectable(e),C.markBusy(e,!1),k.addListener(e,a),o(l,e,s);var t=u.getState(e);if(t&&t.startSize){var f=e.offsetWidth,h=e.offsetHeight;t.startSize.width===f&&t.startSize.height===h||a(e)}M[p]&&n(M[p],function(e){e()})}else d&&y.log(p,"Element uninstalled before being detectable.");delete M[p],++r===i.length&&c()}));d&&y.log(p,"Already detecable, adding listener."),o(l,e,s),r++}),r===i.length&&c()},removeListener:_.removeListener,removeAllListeners:_.removeAllListeners,uninstall:function(e){if(!e)return y.error("At least one element is required.");if(g(e))e=[e];else{if(!h(e))return y.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");e=m(e)}n(e,function(e){_.removeAllListeners(e),k.uninstall(e),u.cleanState(e)})}}}},function(e,t,i){"use strict";e.exports=function(e){var t=e.stateHandler.getState;return{isDetectable:function(e){var i=t(e);return i&&!!i.isDetectable},markAsDetectable:function(e){t(e).isDetectable=!0},isBusy:function(e){return!!t(e).busy},markBusy:function(e,i){t(e).busy=!!i}}}},function(e,t,i){"use strict";e.exports=function(e){var t={};function i(i){var n=e.get(i);return void 0===n?[]:t[n]||[]}return{get:i,add:function(i,n){var s=e.get(i);t[s]||(t[s]=[]),t[s].push(n)},removeListener:function(e,t){for(var n=i(e),s=0,a=n.length;s<a;++s)if(n[s]===t){n.splice(s,1);break}},removeAllListeners:function(e){var t=i(e);t&&(t.length=0)}}}},function(e,t,i){"use strict";e.exports=function(){var e=1;return{generate:function(){return e++}}}},function(e,t,i){"use strict";e.exports=function(e){var t=e.idGenerator,i=e.stateHandler.getState;return{get:function(e){var t=i(e);return t&&void 0!==t.id?t.id:null},set:function(e){var n=i(e);if(!n)throw new Error("setId required the element to have a resize detection state.");var s=t.generate();return n.id=s,s}}}},function(e,t,i){"use strict";e.exports=function(e){function t(){}var i={log:t,warn:t,error:t};if(!e&&window.console){var n=function(e,t){e[t]=function(){var e=console[t];if(e.apply)e.apply(console,arguments);else for(var i=0;i<arguments.length;i++)e(arguments[i])}};n(i,"log"),n(i,"warn"),n(i,"error")}return i}},function(e,t,i){"use strict";var n=i(491);function s(){var e={},t=0,i=0,n=0;return{add:function(s,a){a||(a=s,s=0),s>i?i=s:s<n&&(n=s),e[s]||(e[s]=[]),e[s].push(a),t++},process:function(){for(var t=n;t<=i;t++)for(var s=e[t],a=0;a<s.length;a++)(0,s[a])()},size:function(){return t}}}e.exports=function(e){var t=(e=e||{}).reporter,i=n.getOption(e,"async",!0),a=n.getOption(e,"auto",!0);a&&!i&&(t&&t.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true."),i=!0);var o,r=s(),l=!1;function c(){for(l=!0;r.size();){var e=r;r=s(),e.process()}l=!1}function d(){var e;e=c,o=setTimeout(e,0)}return{add:function(e,t){!l&&a&&i&&0===r.size()&&d(),r.add(e,t)},force:function(e){l||(void 0===e&&(e=i),o&&(clearTimeout(o),o=null),e?d():c())}}}},function(e,t,i){"use strict";(e.exports={}).getOption=function(e,t,i){var n=e[t];if((void 0===n||null===n)&&void 0!==i)return i;return n}},function(e,t,i){"use strict";var n="_erd";function s(e){return e[n]}e.exports={initState:function(e){return e[n]={},s(e)},getState:s,cleanState:function(e){delete e[n]}}},function(e,t,i){"use strict";var n=i(169);e.exports=function(e){var t=(e=e||{}).reporter,i=e.batchProcessor,s=e.stateHandler.getState;if(!t)throw new Error("Missing required dependency: reporter.");function a(e){return s(e).object}return{makeDetectable:function(e,a,o){o||(o=a,a=e,e=null),(e=e||{}).debug,n.isIE(8)?o(a):function(e,a){var o="display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; padding: 0; margin: 0; opacity: 0; z-index: -1000; pointer-events: none;",r=!1,l=window.getComputedStyle(e),c=e.offsetWidth,d=e.offsetHeight;function u(){function i(){if("static"===l.position){e.style.position="relative";var i=function(e,t,i,n){var s=i[n];"auto"!==s&&"0"!==function(e){return e.replace(/[^-\d\.]/g,"")}(s)&&(e.warn("An element that is positioned static has style."+n+"="+s+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+n+" will be set to 0. Element: ",t),t.style[n]=0)};i(t,e,l,"top"),i(t,e,l,"right"),i(t,e,l,"bottom"),i(t,e,l,"left")}}""!==l.position&&(i(),r=!0);var c=document.createElement("object");c.style.cssText=o,c.tabIndex=-1,c.type="text/html",c.onload=function(){r||i(),function e(t,i){t.contentDocument?i(t.contentDocument):setTimeout(function(){e(t,i)},100)}(this,function(t){a(e)})},n.isIE()||(c.data="about:blank"),e.appendChild(c),s(e).object=c,n.isIE()&&(c.data="about:blank")}s(e).startSize={width:c,height:d},i?i.add(u):u()}(a,o)},addListener:function(e,t){if(!a(e))throw new Error("Element is not detectable by this strategy.");function i(){t(e)}n.isIE(8)?(s(e).object={proxy:i},e.attachEvent("onresize",i)):a(e).contentDocument.defaultView.addEventListener("resize",i)},uninstall:function(e){n.isIE(8)?e.detachEvent("onresize",s(e).object.proxy):e.removeChild(a(e)),delete s(e).object}}}},function(e,t,i){"use strict";var n=i(168).forEach;e.exports=function(e){var t=(e=e||{}).reporter,i=e.batchProcessor,s=e.stateHandler.getState,a=(e.stateHandler.hasState,e.idHandler);if(!i)throw new Error("Missing required dependency: batchProcessor");if(!t)throw new Error("Missing required dependency: reporter.");var o=function(){var e=document.createElement("div");e.style.cssText="position: absolute; width: 1000px; height: 1000px; visibility: hidden; margin: 0; padding: 0;";var t=document.createElement("div");t.style.cssText="position: absolute; width: 500px; height: 500px; overflow: scroll; visibility: none; top: -1500px; left: -1500px; visibility: hidden; margin: 0; padding: 0;",t.appendChild(e),document.body.insertBefore(t,document.body.firstChild);var i=500-t.clientWidth,n=500-t.clientHeight;return document.body.removeChild(t),{width:i,height:n}}(),r="erd_scroll_detection_container";function l(e,i,n){if(e.addEventListener)e.addEventListener(i,n);else{if(!e.attachEvent)return t.error("[scroll] Don't know how to add event listeners.");e.attachEvent("on"+i,n)}}function c(e,i,n){if(e.removeEventListener)e.removeEventListener(i,n);else{if(!e.detachEvent)return t.error("[scroll] Don't know how to remove event listeners.");e.detachEvent("on"+i,n)}}function d(e){return s(e).container.childNodes[0].childNodes[0].childNodes[0]}function u(e){return s(e).container.childNodes[0].childNodes[0].childNodes[1]}return function(e,t){if(!document.getElementById(e)){var i=t+"_animation",n=t+"_animation_active",s="/* Created by the element-resize-detector library. */\n";s+="."+t+" > div::-webkit-scrollbar { display: none; }\n\n",s+="."+n+" { -webkit-animation-duration: 0.1s; animation-duration: 0.1s; -webkit-animation-name: "+i+"; animation-name: "+i+"; }\n",s+="@-webkit-keyframes "+i+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n",function(t,i){i=i||function(e){document.head.appendChild(e)};var n=document.createElement("style");n.innerHTML=t,n.id=e,i(n)}(s+="@keyframes "+i+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }")}}("erd_scroll_detection_scrollbar_style",r),{makeDetectable:function(e,c,p){function f(){if(e.debug){var i=Array.prototype.slice.call(arguments);if(i.unshift(a.get(c),"Scroll: "),t.log.apply)t.log.apply(null,i);else for(var n=0;n<i.length;n++)t.log(i[n])}}function h(e){var t=s(e).container.childNodes[0],i=window.getComputedStyle(t);return!i.width||-1===i.width.indexOf("px")}function m(){var e=window.getComputedStyle(c),t={};return t.position=e.position,t.width=c.offsetWidth,t.height=c.offsetHeight,t.top=e.top,t.right=e.right,t.bottom=e.bottom,t.left=e.left,t.widthCSS=e.width,t.heightCSS=e.height,t}function g(){if(f("storeStyle invoked."),s(c)){var e=m();s(c).style=e}else f("Aborting because element has been uninstalled")}function v(e,t,i){s(e).lastWidth=t,s(e).lastHeight=i}function x(){return 2*o.width+1}function y(){return 2*o.height+1}function b(e){return e+10+x()}function w(e){return e+10+y()}function k(e,t,i){var n=d(e),s=u(e),a=b(t),o=w(i),r=function(e){return 2*e+x()}(t),l=function(e){return 2*e+y()}(i);n.scrollLeft=a,n.scrollTop=o,s.scrollLeft=r,s.scrollTop=l}function _(){var e=s(c).container;if(!e){(e=document.createElement("div")).className=r,e.style.cssText="visibility: hidden; display: inline; width: 0px; height: 0px; z-index: -1; overflow: hidden; margin: 0; padding: 0;",s(c).container=e,function(e){e.className+=" "+r+"_animation_active"}(e),c.appendChild(e);var t=function(){s(c).onRendered&&s(c).onRendered()};l(e,"animationstart",t),s(c).onAnimationStart=t}return e}function C(){if(f("Injecting elements"),s(c)){!function(){var e=s(c).style;if("static"===e.position){c.style.position="relative";var i=function(e,t,i,n){var s=i[n];"auto"!==s&&"0"!==function(e){return e.replace(/[^-\d\.]/g,"")}(s)&&(e.warn("An element that is positioned static has style."+n+"="+s+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+n+" will be set to 0. Element: ",t),t.style[n]=0)};i(t,c,e,"top"),i(t,c,e,"right"),i(t,c,e,"bottom"),i(t,c,e,"left")}}();var e=s(c).container;e||(e=_());var i,n,a,d,u=o.width,p=o.height,h="position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; "+(n=-(1+p),a=-p,d=-u,i=(i=-(1+u))?i+"px":"0",n=n?n+"px":"0",a=a?a+"px":"0","left: "+i+"; top: "+n+"; right: "+(d=d?d+"px":"0")+"; bottom: "+a+";"),m=document.createElement("div"),g=document.createElement("div"),v=document.createElement("div"),x=document.createElement("div"),y=document.createElement("div"),b=document.createElement("div");m.dir="ltr",m.style.cssText="position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; width: 100%; height: 100%; left: 0px; top: 0px;",m.className=r,g.className=r,g.style.cssText=h,v.style.cssText="position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;",x.style.cssText="position: absolute; left: 0; top: 0;",y.style.cssText="position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;",b.style.cssText="position: absolute; width: 200%; height: 200%;",v.appendChild(x),y.appendChild(b),g.appendChild(v),g.appendChild(y),m.appendChild(g),e.appendChild(m),l(v,"scroll",w),l(y,"scroll",k),s(c).onExpandScroll=w,s(c).onShrinkScroll=k}else f("Aborting because element has been uninstalled");function w(){s(c).onExpand&&s(c).onExpand()}function k(){s(c).onShrink&&s(c).onShrink()}}function S(){function o(e,t,i){var n=function(e){return d(e).childNodes[0]}(e),s=b(t),a=w(i);n.style.width=s+"px",n.style.height=a+"px"}function r(n){var r=c.offsetWidth,d=c.offsetHeight;f("Storing current size",r,d),v(c,r,d),i.add(0,function(){if(s(c))if(l()){if(e.debug){var i=c.offsetWidth,n=c.offsetHeight;i===r&&n===d||t.warn(a.get(c),"Scroll: Size changed before updating detector elements.")}o(c,r,d)}else f("Aborting because element container has not been initialized");else f("Aborting because element has been uninstalled")}),i.add(1,function(){s(c)?l()?k(c,r,d):f("Aborting because element container has not been initialized"):f("Aborting because element has been uninstalled")}),n&&i.add(2,function(){s(c)?l()?n():f("Aborting because element container has not been initialized"):f("Aborting because element has been uninstalled")})}function l(){return!!s(c).container}function p(){f("notifyListenersIfNeeded invoked");var e=s(c);return void 0===s(c).lastNotifiedWidth&&e.lastWidth===e.startSize.width&&e.lastHeight===e.startSize.height?f("Not notifying: Size is the same as the start size, and there has been no notification yet."):e.lastWidth===e.lastNotifiedWidth&&e.lastHeight===e.lastNotifiedHeight?f("Not notifying: Size already notified"):(f("Current size not notified, notifying..."),e.lastNotifiedWidth=e.lastWidth,e.lastNotifiedHeight=e.lastHeight,void n(s(c).listeners,function(e){e(c)}))}function m(){if(f("Scroll detected."),h(c))f("Scroll event fired while unrendered. Ignoring...");else{var e=c.offsetWidth,t=c.offsetHeight;e!==s(c).lastWidth||t!==s(c).lastHeight?(f("Element size changed."),r(p)):f("Element size has not changed ("+e+"x"+t+").")}}if(f("registerListenersAndPositionElements invoked."),s(c)){s(c).onRendered=function(){if(f("startanimation triggered."),h(c))f("Ignoring since element is still unrendered...");else{f("Element rendered.");var e=d(c),t=u(c);0!==e.scrollLeft&&0!==e.scrollTop&&0!==t.scrollLeft&&0!==t.scrollTop||(f("Scrollbars out of sync. Updating detector elements..."),r(p))}},s(c).onExpand=m,s(c).onShrink=m;var g=s(c).style;o(c,g.width,g.height)}else f("Aborting because element has been uninstalled")}function A(){if(f("finalizeDomMutation invoked."),s(c)){var e=s(c).style;v(c,e.width,e.height),k(c,e.width,e.height)}else f("Aborting because element has been uninstalled")}function M(){p(c)}function E(){var e;f("Installing..."),s(c).listeners=[],e=m(),s(c).startSize={width:e.width,height:e.height},f("Element start size",s(c).startSize),i.add(0,g),i.add(1,C),i.add(2,S),i.add(3,A),i.add(4,M)}p||(p=c,c=e,e=null),e=e||{},f("Making detectable..."),function(e){return!function(e){return e===e.ownerDocument.body||e.ownerDocument.body.contains(e)}(e)||null===window.getComputedStyle(e)}(c)?(f("Element is detached"),_(),f("Waiting until element is attached..."),s(c).onRendered=function(){f("Element is now attached"),E()}):E()},addListener:function(e,t){if(!s(e).listeners.push)throw new Error("Cannot add listener to an element that is not detectable.");s(e).listeners.push(t)},uninstall:function(e){var t=s(e);t&&(t.onExpandScroll&&c(d(e),"scroll",t.onExpandScroll),t.onShrinkScroll&&c(u(e),"scroll",t.onShrinkScroll),t.onAnimationStart&&c(t.container,"animationstart",t.onAnimationStart),t.container&&e.removeChild(t.container))}}}},function(e,t,i){var n,s,a={};n=i(496),s=i(505),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(170),s=i.n(n);t.default={components:{fieldConditionsBuilder:i(499),WidthSelector:s.a},props:["field","fieldtypeConfig","fieldtypes","root"],data:function(){return{isNameModified:!0,activeTab:"basics"}},computed:{selectedWidth:function(){var t=this.field.width||100;return e.findWhere(this.widths,{value:t}).text},fieldtype:function(){return e.findWhere(this.fieldtypes,{name:this.field.type})},canBeLocalized:function(){return this.root&&Object.keys(Statamic.locales).length>1&&this.fieldtype.canBeLocalized},canBeValidated:function(){return this.fieldtype.canBeValidated},canHaveDefault:function(){return this.fieldtype.canHaveDefault},hasExtras:function(){return this.filteredFieldtypeConfig.length>0},filteredFieldtypeConfig:function(){return"grid"===this.field.type?e.filter(this.fieldtypeConfig,function(e){return"fields"!==e.name}):["replicator","bard"].includes(this.field.type)?e.filter(this.fieldtypeConfig,function(e){return"sets"!==e.name}):this.fieldtypeConfig}},ready:function(){this.root=Boolean(this.root||!1),this.field.isNew&&!this.field.isMeta&&(this.isNameModified=!1,delete this.field.isNew,this.$watch("field.display",function(e){this.isNameModified||(this.field.name=this.$slugify(e,"_"))}))},methods:{focus:function(){this.$els.display.select()},configFieldClasses:function(e){return["form-group p-2 m-0 "+e.type+"-fieldtype",tailwind_width_class(e.width)]}}}}.call(t,i(1))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["value"],data:function(){return{isHovering:!1,hoveringOver:null,widths:[25,33,50,66,75,100]}},computed:{selected:function(){return this.isHovering?this.hoveringOver:this.value}},ready:function(){this.value=this.value||100},methods:{classes:function(){}}}},function(e,t){e.exports=' <div class="field-width field-width-selector" @mouseenter="isHovering = true" @mouseleave="isHovering = false"> <div class=field-width-label>{{ selected }}%</div> <div v-for="width in widths" @mouseenter.stop="hoveringOver = width" @click="value = width" :class="[\n            \'field-width-notch\',\n            \'notch-\' + width,\n            { \'filled\': selected >= width, \'selected\': selected == width }\n        ]"> </div> </div> '},function(e,t,i){var n,s,a={};n=i(500),s=i(504),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{condition:i(501)},props:["data"],data:function(){return{conditions:[],conditionSelectFieldtypeConfig:{options:[{text:translate("cp.always_show"),value:null},{text:translate("cp.show_when"),value:"show"},{text:translate("cp.hide_when"),value:"hide"}]},styleRadioFieldtypeConfig:{inline:!0,options:[{text:translate("cp.standard"),value:"standard"},{text:translate("cp.custom"),value:"custom"}]}}},computed:{hasConditions:function(){return 0!==this.conditions.length},isStandard:function(){return"standard"===this.data.style},isCustom:function(){return"custom"===this.data.style}},ready:function(){this.data||(this.data={type:null,style:"standard",custom:null,conditions:[]}),this.conditions=this.data.conditions},methods:{add:function(){this.conditions.push({handle:null,operator:"and",values:[]})},delete:function(e){this.conditions.splice(e,1)}}}},function(e,t,i){var n,s,a={};n=i(502),s=i(503),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["index","handle","operator","values"],data:function(){return{operatorSelectConfig:{options:[{text:"and",value:"and"},{text:"or",value:"or"}]}}},computed:{isFirst:function(){return 0===this.index}},ready:function(){this.selectizeHandles(),this.selectizeValues()},methods:{selectizeValues:function(){var t=this,n=e.map(this.values,function(e){return{value:e,text:e}});i(this.$els.values).selectize({items:this.values,options:n,create:!0,plugins:["remove_button"],onChange:function(e){t.values=e}})},selectizeHandles:function(){var e=this,t=this.getFields();if(!this.fieldsContainsPartial(t))return this.initSelectize(t);var i=cp_url("/fieldsets/"+get_from_segment(3)+"/get?partials=true");this.$http.get(i,function(i){t=i.fields.filter(function(e){return"partial"!==e.type}),e.initSelectize(t)})},initSelectize:function(e){i(this.$els.handle).selectize({maxItems:1,options:this.cleanFields(e),valueField:"name",labelField:"display",create:!0})},getFields:function(){return JSON.parse(JSON.stringify(this.$parent.$parent.$parent.$parent.$parent.fields))},fieldsContainsPartial:function(t){return void 0!==e.find(t,function(e){return"partial"===e.type})},cleanFields:function(t){var i=this;return t=t.map(function(e){return e.display=e.display||e.name,e}),this.handle&&!e.find(t,function(e){return i.handle===e.name})&&t.push({name:this.handle,display:this.handle}),t}}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <tr> <td v-if=!isFirst class=pl-0 width=30> <select-fieldtype :data.sync=operator :config=operatorSelectConfig> </select-fieldtype> </td> <td :colspan="isFirst ? 2 : null" class=pl-0 width=40%> <input type=text v-model=handle placeholder=Field v-el:handle/> </td> <td> <select multiple=multiple v-el:values></select> </td> <td class="row-controls text-center" width=32px> <a class="icon icon-cross delete mt-8" @click="$emit(\'deleted\')"></a> </td> </tr> '},function(e,t){e.exports=" <div> <select-fieldtype :data.sync=data.type :config=conditionSelectFieldtypeConfig> </select-fieldtype> <template v-if=data.type> <br> <br> <radio-fieldtype :data.sync=data.style :name=condition_style :config=styleRadioFieldtypeConfig></radio-fieldtype> <template v-if=isStandard> <small class=help-block>{{ translate('cp.display_standard_instructions') }}</small> <table v-if=hasConditions class=table> <tr is=condition v-for=\"(i, condition) in conditions\" :index=i :handle.sync=condition.handle :operator.sync=condition.operator :values.sync=condition.values @deleted=delete(i)></tr> </table> <button class=\"btn btn-default\" @click=add> {{ translate('cp.add_condition') }} </button> </template> <template v-if=isCustom> <small class=help-block>{{ translate('cp.display_custom_instructions') }}</small> <input type=text class=form-control v-model=data.custom /> </template> </template> </div> "},function(e,t){e.exports=" <div class=-mx-1> <div class=\"filter mx-1 mb-2\"> <a href=\"\" :class=\"{ 'active': activeTab === 'basics' }\" @click.prevent=\"activeTab = 'basics'\">{{ translate('cp.basics') }}</a> <a href=\"\" :class=\"{ 'active': activeTab === 'visibility' }\" @click.prevent=\"activeTab = 'visibility'\">{{ translate('cp.visibility') }}</a> <a href=\"\" :class=\"{ 'active': activeTab === 'extras' }\" @click.prevent=\"activeTab = 'extras'\" v-if=hasExtras>{{ translate('cp.extras') }}</a> </div> <div class=\"tab publish-fields\" v-show=\"activeTab === 'basics'\"> <div class=\"form-group p-2 m-0 w-1/2\"> <label>{{ translate('cp.display_name') }}</label> <small class=help-block>{{ translate('cp.display_name_instructions') }}</small> <input type=text class=form-control v-model=field.display v-el:display/> </div> <div class=\"form-group p-2 m-0 w-1/2\"> <label>{{ translate('cp.field_variable') }}</label> <small class=help-block>{{ translate('cp.field_variable_instructions') }}</small> <input type=text class=\"form-control mono\" v-model=field.name @keydown=\"isNameModified = true\" :disabled=field.isMeta :v-focus=true /> </div> <div class=\"form-group p-2 m-0\" v-if=canBeLocalized> <label class=block>{{ translate('cp.localizable') }}</label> <toggle-fieldtype :data.sync=field.localizable></toggle-fieldtype> </div> <div class=\"form-group p-2 m-0 markdown-fieldtype\"> <label>{{ translate('cp.instructions') }}</label> <small class=help-block>{{ translate('cp.field_instructions_instructions') }}</small> <markdown-fieldtype :data.sync=field.instructions></markdown-fieldtype> </div> <div class=\"form-group p-2 m-0\" v-if=canBeValidated> <label>{{ translate('cp.validation_rules') }}</label> <small class=help-block> {{ translate('cp.validation_instructions') }} <a href=https://laravel.com/docs/5.1/validation#available-validation-rules target=_blank>{{ translate('cp.validation_instructions_link_text') }}</a>. </small> <input type=text class=form-control v-model=field.validate /> </div> <div class=\"form-group p-2 m-0\" v-if=canHaveDefault> <label>{{ translate('cp.default_value') }}</label> <small class=help-block>{{ translate('cp.field_default_value_instructions') }}</small> <input type=text class=form-control v-model=field.default /> </div> </div> <div class=\"tab publish-fields\" v-show=\"activeTab === 'visibility'\"> <div class=\"form-group p-2 m-0\"> <label class=block>{{ translate('cp.width') }}</label> <width-selector :value.sync=field.width class=large></width-selector> </div> <div class=\"form-group p-2 m-0\" v-if=root> <label>{{ translate('cp.display_conditions') }}</label> <small class=help-block>{{ translate('cp.display_conditions_instructions') }}</small> <field-conditions-builder :data.sync=field.conditions></field-conditions-builder> </div> </div> <div class=\"tab publish-fields\" v-show=\"activeTab === 'extras'\" v-if=hasExtras> <div v-for=\"configField in filteredFieldtypeConfig\" :class=configFieldClasses(configField)> <label class=block>{{ configField.display || configField.name }}</label> <small class=help-block v-if=configField.instructions v-html=\"configField.instructions | markdown\"></small> <component :is=\"configField.type + '-fieldtype'\" :name=$key :data.sync=field[configField.name] :config=configField v-if=\"configField.name !== 'sets' && configField.name !== 'fields'\"> </component> <set-builder :sets.sync=field[configField.name] :fieldtypes=fieldtypes v-if=\"configField.name === 'sets'\"> </set-builder> </div> </div> </div> "},function(e,t,i){var n,s,a={};n=i(507),s=i(511),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(508),s=i.n(n),a=i(6);i.n(a);t.default={components:{ReplicatorSet:s.a},props:["fieldtypes","sets","section","parentKey"],ready:function(){this.sets=this.sets||[],this.makeSetsSortable()},methods:{updateFieldWidths:function(){var t=this;this.$nextTick(function(){e.each(t.$refs.sets,function(e){e.updateFieldWidths()})})},add:function(){var e=this,t=this.sets.length+1;this.sets.push({display:"Set "+t,name:"set_"+t,id:"set_"+t,instructions:null,fields:[],isNew:!0}),this.$notify.success(translate("cp.set_added")),this.$nextTick(function(){return e.$refs.sets[t-1].focus()})},remove:function(e){confirm(translate("cp.are_you_sure"))&&this.sets.splice(e,1)},makeSetsSortable:function(){var e=this,t=this.$els.sets;new a.Sortable(t,{draggable:".field-set--"+this.parentKey,handle:".set-drag-handle--"+this.parentKey,appendTo:t,mirror:{constrainDimensions:!0}}).on("sortable:stop",function(t){e.sets.splice(t.newIndex,0,e.sets.splice(t.oldIndex,1)[0])})}}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(509),s=i(510),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(6);i.n(n);t.default={props:["set","setIndex","fieldtypes","section","parentKey"],data:function(){return{isAddingField:!1,handleModified:!1,displayFieldWidth:"100%",nameFieldWidth:"100%"}},computed:{setKey:function(){return this.parentKey+"-"+this.set.id},display:function(){return this.set.display},name:function(){return this.set.name}},watch:{display:function(e){var t=this;this.handleModified||(this.set.name=this.$slugify(e,"_")),this.$nextTick(function(){return t.updateSetFieldWidths()})},name:function(e){this.updateSetFieldWidths()}},ready:function(){this.handleModified=!this.set.isNew,this.updateFieldWidths()},methods:{updateSetFieldWidths:function(){this.displayFieldWidth=this.$els.setDisplaySizer.offsetWidth+"px",this.nameFieldWidth=this.$els.setNameSizer.offsetWidth+"px"},updateFieldWidths:function(){this.updateSetFieldWidths(),this.$refs.fields.updateFieldWidths()},focus:function(){this.$els.display.select()},fieldSelectorClosed:function(){this.isAddingField=!1}}}},function(e,t){e.exports=' <div :class="[ \'field-set\', `field-set--${parentKey}` ]"> <div :class="[ \'set-drag-handle\', `set-drag-handle--${parentKey}` ]"></div> <span class=set-display-sizer v-el:set-display-sizer v-text="set.display || set.name"></span> <span class=set-name-sizer v-el:set-name-sizer v-text=set.name></span> <input type=text class="set-display mr-8" v-el:display v-model=set.display :placeholder="set.display || set.name" :style="{width: displayFieldWidth}"/> <input type=text class=set-name v-model=set.name :placeholder=set.name :style="{width: nameFieldWidth}" @input="handleModified = true"/> <input type=text class=set-instructions v-model=set.instructions :placeholder="`${translate(\'cp.instructions\')}...`"/> <fieldset-fields v-ref:fields :fields.sync=set.fields :section=section :parent-key=setKey :fieldtypes=fieldtypes :is-adding=isAddingField classes="field-fields set-fields" @selector-closed=fieldSelectorClosed></fieldset-fields> <div class="flex items-center mt-2"> <a class="btn btn-default btn-small" @click="isAddingField = true">{{ translate(\'cp.add_field\') }}</a> <a class="opacity-50 text-xxs hover:opacity-100 ml-1" @click="$emit(\'deleted\', setIndex)">{{ translate(\'cp.delete_set\') }}</a> </div> </div> '},function(e,t){e.exports=' <div class="field-nested field-sets" v-el:sets> <replicator-set v-for="(i, set) in sets" v-ref:sets :set=set :set-index=i :section=section :fieldtypes=fieldtypes :parent-key=parentKey @deleted=remove></replicator-set> </div> '},function(e,t){e.exports=' <div :class=classes> <div class=section-field-inner> <div class=section-field-main> <div :class="[\n                \'field-drag-handle\',\n                `field-drag-handle--${parentKey}`,\n                { \'root-level-drag-handle\': isRootLevel }\n            ]"></div> <div class=section-field-main-inner> <div class=field-info> <div class="flex items-center"> <div class="h-4 w-4"> <svg-icon class="h-4 w-4 opacity-50 self-center" :name=icon></svg-icon> </div> <div class=ml-2> <span class=field-display-sizer v-el:field-display-sizer v-text="field.display || field.name"></span> <span class=field-name-sizer v-el:field-name-sizer v-text=field.name></span> <input class=field-display v-el:display type=text v-model=field.display :placeholder="field.display || field.name" :style="{width: displayFieldWidth}"/> <input class=field-name v-el:name type=text v-model=field.name :style="{width: nameFieldWidth}" @input="handleModified = true" :disabled=field.isMeta /> <div class=field-type>{{ fieldtypeLabel }}</div> </div> </div> </div> <div class=field-controls> <width-selector :value.sync=field.width v-tip :tip-text="translate(\'cp.width\')"></width-selector> <template v-if=canBeLocalized> <a @click="field.localizable = !field.localizable" v-tip :tip-text="translate(\'cp.localizable\')"><span class="icon icon-globe field-localizable" :class="{ \'is-localizable\': field.localizable }"></span></a> </template> <a @click=edit v-tip :tip-text="translate(\'cp.edit\')"><span class="icon icon-pencil field-edit"></span></a> <a @click="$emit(\'removed\')" v-tip :tip-text="translate(\'cp.delete\')"><span class="field-delete icon icon-cross delete"></span></a> <template v-if=isGridField> <a @click=addField v-tip :tip-text="translate(\'cp.add_field\')"><span class="icon icon-plus field-add-grid-field"></span></a> <a @click="isShowingGridFields = !isShowingGridFields" v-tip :tip-text="translate(\'cp.toggle_fields\')" v-show=field.fields.length class=always-visible><span class="icon icon-chevron-{{ isShowingGridFields ? \'up\' : \'down\' }} field-expand"></span></a> </template> <template v-if=isReplicatorField> <a @click=addReplicatorSet v-tip :tip-text="translate(\'cp.add_set\')"><span class="icon icon-plus field-add-set"></span></a> <a @click="isShowingSets = !isShowingSets" v-tip :tip-text="translate(\'cp.toggle_sets\')" v-show=field.sets.length class=always-visible><span class="icon icon-chevron-{{ isShowingSets ? \'up\' : \'down\' }} field-expand"></span></a> </template> </div> </div> </div> <div class="field-nested field-fields" v-if=isGridField v-show=isShowingGridFields> <fieldset-fields v-ref:fields :fields.sync=field.fields :section=section :parent-key=fieldKey :fieldtypes=fieldtypes :is-adding=isAddingGridField @selector-closed=fieldSelectorClosed></fieldset-fields> <a class="btn btn-default btn-small mt-16" @click=addField>{{ translate(\'cp.add_field\') }}</a> </div> <replicator-sets v-if=isReplicatorField v-show=isShowingSets v-ref:sets :sets.sync=field.sets :section=section :fieldtypes=fieldtypes :parent-key=fieldKey></replicator-sets> </div> <modal :show.sync=isEditing class=modal-wide> <template slot=header> <div class="flex items-center"> <svg-icon class="h-6 w-6 mr-2 inline-block opacity-50" :name=icon></svg-icon> <span>{{ field.display || field.name }}</span> <span class="text-xs ml-2 font-bold uppercase opacity-25 pt-sm">{{ fieldtypeLabel }}</span> </div> </template> <template slot=body> <field-settings v-ref:settings :field.sync=field :fieldtype-config=fieldtypeConfig :fieldtypes=fieldtypes :root=isRootLevel> </field-settings> </template> </modal> </div> '},function(e,t){e.exports=' <div :class="[\n    \'section-fields\',\n    classes\n]"> <fieldset-field v-for="(i, f) in fields" v-ref:fields :field.sync=f :fieldtypes=fieldtypes :section=section :is-first-field="i === 0" :is-last-field="i === fields.length-1" :parent-key=parentKey @removed=remove(i)></fieldset-field> <fieldtype-selector :fieldtypes=fieldtypes :show=isAdding :allow-title=allowAddingTitleField :allow-slug=allowAddingSlugField :allow-date=allowAddingDateField @selected=add @closed="this.$emit(\'selector-closed\')"></fieldtype-selector> </div> '},function(e,t,i){var n,s,a={};n=i(515),s=i(516),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:{fieldtypes:{},onSelect:{},show:{},allowTitle:{default:!1},allowSlug:{default:!1},allowDate:{default:!1}},data:function(){return{isActive:!1,filterBy:"all",filters:["Text","Media","Pickable","Structured","Relationship","Special","System"],search:"",isSearchOpen:!1}},computed:{fieldtypeSelectionText:function(){return e.findWhere(this.fieldtypesSelectOptions,{value:this.fieldtypeSelection}).text},allFieldtypes:function(){var e=this.fieldtypes.map(function(e){return{text:e.label,value:e.name,categories:e.categories,icon:e.icon}});return this.allowDate&&e.unshift({text:translate("cp.publish_date"),value:"date",categories:["system"],isMeta:!0,icon:"date"}),this.allowSlug&&e.unshift({text:translate("cp.slug"),value:"slug",categories:["system"],isMeta:!0,icon:"slug"}),this.allowTitle&&e.unshift({text:translate("cp.title"),value:"title",categories:["system"],isMeta:!0,icon:"title"}),e},searchFilteredFieldtypes:function(){var e=this,t=this.allFieldtypes;return this.search&&(t=t.filter(function(t){return t.text.toLowerCase().includes(e.search.toLowerCase())})),t},fieldtypeOptions:function(){var e=this,t=this.searchFilteredFieldtypes;return"all"===this.filterBy?t:t.filter(function(t){return t.categories.includes(e.filterBy.toLowerCase())})},filteredFilters:function(){var e=this;return!this.search&&this.allowMeta?this.filters:this.filters.filter(function(t){return e.searchFilteredFieldtypes.filter(function(e){return e.categories.includes(t.toLowerCase())}).length})},allowMeta:function(){return this.allowTitle||this.allowSlug||this.allowDate},isSearching:function(){return this.search||this.isSearchOpen}},watch:{show:function(e){e&&this.$els.search.focus()}},methods:{select:function(e){if(e.isMeta)return this.selectMeta(e);var t=this.createField(e.value);this.$emit("selected",t),this.close()},selectMeta:function(e){var t=e.value;["title","slug"].includes(t)&&(t="text");var i=this.createField(t);i=Object.assign({display:translate("cp."+e.value),name:e.value,type:t,isMeta:!0},i),this.$emit("selected",i),this.close()},createField:function(t){var i=e.findWhere(this.fieldtypes,{name:t}),n={type:i.name,instructions:null,localizable:!1,width:100,isNew:!0},s={};return e.each(i.config,function(e){s[e.name]=e.default||null}),Object.assign(s,n)},close:function(){this.search="",this.filterBy="all",this.$emit("closed")},openSearch:function(){this.isSearchOpen=!0,this.$els.search.focus()},cancelSearch:function(){this.isSearchOpen=!1,this.search=""}}}}.call(t,i(1))},function(e,t){e.exports=' <div> <modal :show=show @closed=close class=modal-wide> <template slot=header>{{ translate(\'cp.select_fieldtype\')}}</template> <template slot=body> <div class=filter> <a @click="filterBy = \'all\'" :class="{\'active\': filterBy == \'all\'}">{{ translate(\'cp.all\') }}</a> <a @click="filterBy = filter" v-for="filter in filteredFilters" :class="{\'active\': filterBy == filter}"> {{ translate(`cp.fieldtype_category_${filter.toLowerCase()}`) }} </a> <a @click.prevent=openSearch :class="[\'no-dot\', {\'active\': search}]"><span class="icon icon-magnifying-glass"></span></a> </div> <div class=fieldtype-selector> <div :class="[\'search\', { \'is-searching\': isSearching }]"> <input type=text v-model=search v-el:search @keydown.esc=cancelSearch :placeholder="`${translate(\'cp.search\')}...`"/> </div> <div class="flex flex-wrap -mx-1 fieldtype-list"> <div class="w-1/2 sm:w-1/3 md:w-1/4 p-1" v-for="option in fieldtypeOptions"> <a class="border flex items-center group w-full rounded shadow-sm py-1 px-2" @click=select(option)> <svg-icon class="h-4 w-4 opacity-50 group-hover:opacity-100" :name=option.icon></svg-icon> <span class="pl-2 text-grey-dark group-hover:text-grey-darkest">{{ option.text }}</span> </a> </div> </div> </div> </template> </modal> </div> '},function(e,t,i){var n,s,a={};n=i(518),s=i(519),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(14);i.n(s);t.default={mixins:[s.mixin],props:{show:{type:Boolean,required:!0,default:!1},full:{type:Boolean,required:!1,default:!1},class:{required:!1,default:function(){return{}}},dismissible:{type:Boolean,default:!1},loading:Boolean,saving:Boolean,shake:{type:Boolean,default:!1}},computed:{classes:function(){var t={"modal-full":this.full},i={};return"string"==typeof this.class?e.each(this.class.split(" "),function(e){i[e]=!0}):i=this.class,n.extend({},t,i)}},methods:{close:function(){this.show=!1},closeIfDismissible:function(){this.dismissible&&(this.show=!1)}},watch:{show:function(e){this.$emit(!0===e?"opened":"closed"),this.$dispatch(!0===e?"modal.open":"modal.close")}},ready:function(){Mousetrap.bind("esc",function(e){this.close()}.bind(this),"keyup")},events:{"close-modal":function(){this.show=!1}}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class=modal :class=classes role=dialog tabindex=-1 v-if=show> <div class=modal-dialog> <div class="modal-content animated" :class="{\'shake\': shake}" v-on-clickaway=closeIfDismissible> <div class=saving v-if=saving> <div class=inner> <i class="icon icon-circular-graph animation-spin"></i> {{ translate(\'cp.saving\') }} </div> </div> <div class=modal-header> <slot name=close> <button type=button tabindex=-1 class=close aria-label=Close @click=close><span aria-hidden=true>&times;</span></button> </slot> <h1><slot name=header></slot></h1> </div> <div v-if=loading class=loading> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if="! loading" class=modal-body> <slot name=body></slot> </div> <div v-if="! loading" class=modal-footer> <slot name=footer> <button type=button class=btn @click=close>{{ translate(\'cp.close\') }}</button> </slot> </div> </div> </div> </div> '},function(e,t,i){var n,s,a={};n=i(521),s=i(525),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={components:{page:i(522)},props:["total","current","segments"],computed:{hasPrevious:function(){return this.current>1},hasNext:function(){return this.current<this.total},segmented:function(){return void 0!==this.segments},hasSlider:function(){return Boolean(this.segments.slider.length)},showFirstEllipsis:function(){return this.hasSlider},showLastEllipsis:function(){return!!this.hasSlider||Boolean(this.segments.last.length)}},methods:{select:function(e){this.$emit("selected",e)},selectPreviousPage:function(){this.select(this.current-1)},selectNextPage:function(){this.select(this.current+1)}}}},function(e,t,i){var n,s,a={};n=i(523),s=i(524),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["number"],computed:{isCurrent:function(){return this.number===this.$parent.current}},methods:{select:function(){this.$parent.select(this.number)}}}},function(e,t){e.exports=' <li :class="{ \'active\': isCurrent }"> <a href="" @click.prevent=select> {{ number }} </a> </li> '},function(e,t){e.exports=' <ul class=pagination> <li v-if=hasPrevious> <a href="" @click.prevent=selectPreviousPage><span>&laquo;</span></a> </li> <template v-if=segmented> <li is=page v-for="item in segments.first" :number=item.page></li> <li v-if=showFirstEllipsis class=disabled><span>...</span></li> <li is=page v-for="item in segments.slider" :number=item.page></li> <li v-if=showLastEllipsis class=disabled><span>...</span></li> <li is=page v-for="item in segments.last" :number=item.page></li> </template> <li is=page v-if=!segmented v-for="n in total" :number=n+1></li> <li v-if=hasNext> <a href="" @click.prevent=selectNextPage><span>&raquo;</span></a> </li> </ul> '},function(e,t,i){var n,s,a={};n=i(527),s=i(528),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["keyword"],methods:{reset:function(){this.keyword=""}}}},function(e,t){e.exports=' <input type=search :placeholder="translate(\'cp.search\')" @keydown.esc.prevent=reset v-model=keyword class="filter-control search" debounce=500 /> '},function(e,t,i){var n,s,a={};n=i(530),s=i(531),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={computed:{sort:function(){return this.$parent.sort},sortOrder:function(){return this.$parent.sortOrder},sortLabel:function(){return e.find(this.$parent.columns,{field:this.sort}).header}},methods:{changeSortColumn:function(e){this.$parent.sortBy(e,this.sortOrder)},changeSortOrder:function(e){this.$parent.sortBy(this.sort,e)}}}}.call(t,i(1))},function(e,t){e.exports=' <div class=dossier-sort-options> <button class="btn btn-default" data-toggle=dropdown> <span class="icon icon-list"></span> {{ sortLabel }} </button> <ul class=dropdown-menu> <li v-for="column in $parent.columns"> <a href="" @click.prevent=changeSortColumn(column.field)> {{ column.header }} <span class="icon icon-check pull-right mr-0" v-if="sort === column.field"></span> </a> </li> <li class=divider></li> <li><a href="" @click.prevent="changeSortOrder(\'asc\')"> Ascending <span class="icon icon-check pull-right mr-0" v-if="sortOrder === \'asc\'"></span> </a></li> <li><a href="" @click.prevent="changeSortOrder(\'desc\')"> Descending <span class="icon icon-check pull-right mr-0" v-if="sortOrder === \'desc\'"></span> </a></li> </ul> </div> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),s=i.n(n),a=i(533),o=i.n(a),r=i(536),l=i.n(r),c=i(548),d=i.n(c),u=i(551),p=i.n(u),f=i(554),h=i.n(f),m=i(564),g=i.n(m),v=i(567),x=i.n(v),y=i(571),b=i.n(y),w=i(573),k=i.n(w),_=i(576),C=i.n(_),S=i(579),A=i.n(S),M=i(582),E=i.n(M),F=i(584),T=i.n(F),O=i(587),L=i.n(O),P=i(590),$=i.n(P),D=i(593),j=i.n(D),R=i(596),B=i.n(R),N=i(606),I=i.n(N),z=i(608),q=i.n(z),H=i(611),V=i.n(H),W=i(614),U=i.n(W),G=i(617),K=i.n(G),Y=i(626),Z=i.n(Y),J=i(632),Q=i.n(J),X=i(635),ee=i.n(X),te=i(638),ie=i.n(te),ne=i(640),se=i.n(ne),ae=i(643),oe=i.n(ae),re=i(646),le=i.n(re),ce=i(649),de=i.n(ce),ue=i(652),pe=i.n(ue),fe=i(655),he=i.n(fe),me=i(658),ge=i.n(me),ve=i(661),xe=i.n(ve),ye=i(664),be=i.n(ye),we=i(667),ke=i.n(we),_e=i(670),Ce=i.n(_e),Se=i(673),Ae=i.n(Se),Me=i(676),Ee=i.n(Me),Fe=i(679),Te=i.n(Fe),Oe=i(682),Le=i.n(Oe),Pe=i(685),$e=i.n(Pe),De=i(689),je=i.n(De);s.a.component("array-fieldtype",o.a),s.a.component("assets-fieldtype",l.a),s.a.component("asset_container-fieldtype",p.a),s.a.component("asset_folder-fieldtype",d.a),s.a.component("bard-fieldtype",h.a),s.a.component("checkboxes-fieldtype",g.a),s.a.component("collection-fieldtype",x.a),s.a.component("collections-fieldtype",b.a),s.a.component("date-fieldtype",k.a),s.a.component("fieldset-fieldtype",A.a),s.a.component("form-fieldtype",E.a),s.a.component("grid-fieldtype",C.a),s.a.component("hidden-fieldtype",T.a),s.a.component("integer-fieldtype",L.a),s.a.component("list-fieldtype",$.a),s.a.component("locale_settings-fieldtype",j.a),s.a.component("markdown-fieldtype",B.a),s.a.component("pages-fieldtype",I.a),s.a.component("radio-fieldtype",q.a),s.a.component("redactor-fieldtype",V.a),s.a.component("redactor_settings-fieldtype",U.a),s.a.component("relate-fieldtype",K.a),s.a.component("replicator-fieldtype",Z.a),s.a.component("revealer-fieldtype",Q.a),s.a.component("routes-fieldtype",ee.a),s.a.component("section-fieldtype",ie.a),s.a.component("select-fieldtype",se.a),s.a.component("status-fieldtype",oe.a),s.a.component("suggest-fieldtype",le.a),s.a.component("table-fieldtype",de.a),s.a.component("tags-fieldtype",pe.a),s.a.component("taxonomy-fieldtype",he.a),s.a.component("template-fieldtype",ge.a),s.a.component("text-fieldtype",xe.a),s.a.component("textarea-fieldtype",be.a),s.a.component("theme-fieldtype",ke.a),s.a.component("time-fieldtype",Ce.a),s.a.component("toggle-fieldtype",Ae.a),s.a.component("users-fieldtype",je.a),s.a.component("user_groups-fieldtype",Te.a),s.a.component("user_roles-fieldtype",Le.a),s.a.component("video-fieldtype",$e.a),s.a.component("yaml-fieldtype",Ee.a)},function(e,t,i){var n,s,a={};n=i(534),s=i(535),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],ready:function(){this.data=this.data||[],"keyed"===this.componentType&&(this.data=0===this.data.length?{}:this.data),"dynamic"===this.componentType&&this.initSortable()},computed:{componentType:function(){return this.config.keys?"keyed":"dynamic"},hasRows:function(){return this.data&&this.data.length>0},addRowButton:function(){return this.config.add_row||translate_choice("cp.add_row",1)},valueHeader:function(){return this.config.value_header||"Value"},textHeader:function(){return this.config.text_header||"Text"}},methods:{addRow:function(){this.data.push({value:"",text:""})},deleteRow:function(e){this.data.splice(e,1)},initSortable:function(){var t=this,i="";e(this.$els.tbody).sortable({axis:"y",revert:175,handle:".drag-handle",placeholder:"table-row-placeholder",forcePlaceholderSize:!0,start:function(e,t){i=t.item.index(),t.placeholder.height(t.item.height())},update:function(e,n){var s=n.item.index(),a=t.data.splice(i,1)[0];t.data.splice(s,0,a)}})}}}}.call(t,i(2))},function(e,t){e.exports=' <div class=array-fieldtype-container> <div class="grid-field array-keyed" v-if="componentType === \'keyed\'"> <table class="grid-table grid-mode-table headless"> <tbody> <tr v-if=data v-for="key in config.keys"> <th>{{ key.text }}</th> <td> <input type=text class=form-control v-model=data[key.value] /> </td> </tr> </tbody> </table> </div> <template v-if="componentType === \'dynamic\'"> <div class="grid-field array-dynamic"> <table class="grid-table grid-mode-table" v-if=hasRows> <thead> <tr> <th>{{ valueHeader }}</th> <th>{{ textHeader }}</th> <th class=row-controls></th> </tr> </thead> <tbody v-el:tbody> <tr v-for="(rowIndex, row) in data"> <td> <input type=text class=form-control v-model=row.value /> </td> <td> <input type=text class=form-control v-model=row.text /> </td> <td class=row-controls> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" v-on:click=deleteRow(rowIndex)></span> </td> </tr> </tbody> </table> <button type=button class="btn btn-default" @click=addRow> {{ addRowButton }} <i class="icon icon-plus"></i> </button> </div> </template> </div> '},function(e,t,i){var n,s,a={};i(537),n=i(538),s=i(547),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(154);t.default={components:{assetTile:i(539),assetRow:i(542),selector:i(11),uploader:i(15),uploads:i(159)},mixins:[Fieldtype,s.a],data:function(){return{assets:[],loading:!0,showSelector:!1,selectorViewMode:null,draggingFile:!1,uploads:[],innerDragging:!1,autoBindChangeWatcher:!1,displayMode:"grid"}},computed:{hasAssets:function(){return Boolean(this.assets.length)},container:function(){return this.config.container},folder:function(){return this.config.folder||"/"},containerSpecified:function(){return null!=this.config.container},restrictNavigation:function(){return this.config.restrict||!1},maxFiles:function(){return this.config.max_files?parseInt(this.config.max_files):0},maxFilesReached:function(){return 0!==this.maxFiles&&this.assets.length>=this.maxFiles},soloAsset:function(){return 1===this.maxFiles},selectedAssets:function(){var t=this;return e(this.data).map(function(i){return i.includes("::")?i:e(t.assets).findWhere({url:i}).id})},expanded:function(){return this.assets.length>0},uploadElement:function(){return this.$el},isInBardField:function(){for(var e=this;;){var t=e.$parent;if(!t)return!1;if("BardFieldtype"===t.constructor.name)return!0;e=t}}},events:{"close-selector":function(){this.closeSelector()}},methods:{loadAssets:function(e){var t=this;if(this.loading=!0,!e||!e.length)return this.loading=!1,void(this.assets=[]);this.$http.post(cp_url("assets/get"),{assets:e},function(e){t.assets=e,t.loading=!1,t.$nextTick(function(){var e=t.data;t.data=[],t.data=e,t.sortable(),t.bindChangeWatcher()})})},assetsSelected:function(e){this.loadAssets(e)},openSelector:function(){this.showSelector=!0,this.$root.hideOverflow=!0},closeSelector:function(){this.showSelector=!1,this.$root.hideOverflow=!1},assetRemoved:function(t){var i=e(this.assets).findIndex({id:t.id});this.assets.splice(i,1)},uploadComplete:function(e){this.assets.push(e)},uploadsUpdated:function(e){this.$set("uploads",e)},uploadFile:function(){this.$refs.uploader.browse()},sortable:function(){var e=this;1!==this.maxFiles&&n(this.$els.assets).sortable({items:"> :not(.ghost)",start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var n=i.item.data("start"),s=i.item.index();e.assets.splice(s,0,e.assets.splice(n,1)[0])},placeholder:{element:function(e){return n("<div class='ui-sortable-placeholder asset-tile'><div class='faux-thumbnail'></div></div>")[0]},update:function(e,t){}}})},getReplicatorPreviewText:function(){return e.map(this.assets,function(e){return e.is_image?'<img src="'+e.thumbnail+'" width="20" height="20" title="'+e.basename+'" />':e.basename}).join(", ")}},watch:{assets:function(t){this.data=e.pluck(this.assets,"url")}},ready:function(){this.displayMode=this.isInsideGridField?"list":this.config.mode||"grid",this.selectorViewMode=Cookies.get("statamic.assets.listing_view_mode")||"grid",this.loadAssets(this.data)}}}.call(t,i(1),i(2))},function(e,t,i){var n,s,a={};n=i(540),s=i(541),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(171);t.default={mixins:[n.a],computed:{isInAssetBrowser:function(){for(var e=this;;){var t=e.$parent;if(!t)return!1;if("AssetBrowser"===t.constructor.name)return!0;e=t}},isInBardField:function(){return this.$parent.isInBardField}}}},function(e,t){e.exports=' <div class=asset-tile :class="{ \'is-image\': isImage && !canShowSvg, \'is-svg\': canShowSvg, \'is-file\': !isImage && !canShowSvg }" :title=asset.filename> <asset-editor v-if=editing :id=asset.id :allow-deleting=false @closed=closeEditor @saved=assetSaved> </asset-editor> <div class=asset-thumb-container> <div class=asset-thumb> <template v-if="isImage && isInBardField && !isInAssetBrowser"> <img :src=asset.url> </template> <template v-else> <a :href=toenail class=zoom v-if=isImage :title=label> <img :src=thumbnail /> </a> <template v-else> <div v-if=canShowSvg class=svg-img :style="\'background-image:url(\'+asset.url+\')\'"> </div> <file-icon v-else type=div :extension=asset.extension></file-icon> </template> </template> <div class=asset-controls> <button @click=edit class="btn btn-icon icon icon-pencil" :alt="translate(\'cp.edit\')"></button> <button @click=remove class="btn btn-icon icon icon-trash" :alt="translate(\'cp.remove\')"></button> </div> </div> </div> <div class=asset-meta> <div class=asset-filename :title=label>{{ label }}</div> <div class=asset-filesize v-if="! isInBardField">{{ asset.size }}</div> </div> </div> '},function(e,t,i){var n,s,a={};n=i(543),s=i(544),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(171);t.default={mixins:[n.a]}},function(e,t){e.exports=' <tr> <td> <div v-if=canShowSvg class="img svg-img" :style="\'background-image:url(\'+asset.url+\')\'"> </div> <template v-else> <a :href=toenail class=zoom v-if=isImage :title=label> <img :src=thumbnail /> </a> <div class=img v-else><file-icon type=div :extension=asset.extension></file-icon></div> </template> </td> <td> <span @dblclick=edit> <span v-if="asset.title !== asset.filename" :title=asset.basename>{{ asset.title || asset.filename }}</span> <span v-else>{{ asset.basename }}</span> </span> </td> <td class=pr-8 style="width: 32px"> <span class="remove-asset text-right" @click=remove></span> <asset-editor v-if=editing :id=asset.id :allow-deleting=false @closed=closeEditor @saved=assetSaved> </asset-editor> </td> </tr> '},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{container:String,folder:String,selected:Array,maxFiles:Number,restrictNavigation:{type:Boolean,default:function(){return!1}}},data:function(){return{browserSelections:this.selected}},methods:{select:function(){this.$emit("selected",this.browserSelections),this.close()},close:function(){this.$emit("closed"),this.$dispatch("modal.close")},selectionsUpdated:function(e){this.browserSelections=e}},ready:function(){this.$dispatch("modal.open")}}},function(e,t){e.exports=" <div class=asset-selector-modal> <div class=asset-selector> <asset-browser :selected-container=container :selected-path=folder :selected-assets=browserSelections :restrict-navigation=restrictNavigation :max-files=maxFiles @selections-updated=selectionsUpdated @asset-doubleclicked=select> <template slot=contextual-actions v-if=browserSelections.length> <button class=\"btn action mb-3\" @click=\"browserSelections = []\">{{ translate('cp.uncheck_all') }}</button> </template> </asset-browser> <div class=modal-footer> <div class=left v-if=browserSelections.length> {{ browserSelections.length }}<span v-if=maxFiles>/{{ maxFiles }}</span> {{ translate('cp.selected') }} </div> <button type=button class=btn @click=close> {{ translate('cp.cancel') }} </button> <button type=button class=\"btn btn-primary\" @click=select> {{ translate('cp.select') }} </button> </div> </div> </div> "},function(e,t){e.exports=' <div class=assets-fieldtype :class="{\n        \'max-files-reached\': maxFilesReached,\n        \'empty\': ! assets.length,\n        \'solo\': soloAsset,\n    }" @dragover=dragOver @dragleave=dragStop @drop=dragStop> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div class=drag-notification v-if="containerSpecified && draggingFile && !showSelector"> <i class="icon icon-download"></i> <h3>{{ translate(\'cp.drop_to_upload\') }}</h3> </div> <template v-if=!loading> <div class=manage-assets v-if=!maxFilesReached :class="{\'bard-drag-handle\': isInBardField}"> <div v-if=!containerSpecified> <i class="icon icon-warning"></i> {{ translate(\'cp.no_asset_container_specified\') }} </div> <template v-else> <button type=button class="btn btn-with-icon mr-8" @click=openSelector @keyup.space.enter=openSelector tabindex=0> <span class="icon icon-folder-images"></span> {{ translate(\'cp.browse_assets\') }} </button> <button type=button class="btn btn-with-icon" @click.prevent=uploadFile> <span class="icon icon-upload-to-cloud"></span> {{ translate(\'cp.upload\') }} </button> <p>{{ translate(\'cp.or_drag_and_drop_files\') }}</p> <button type=button class="delete-bard-set btn btn-icon pull-right" v-if=isInBardField @click.prevent="$dispatch(\'asset-field.delete-bard-set\')"> <span class="icon icon-trash"></span> </button> </template> </div> <uploader v-ref:uploader v-if="containerSpecified && !showSelector" :dom-element=uploadElement :container=container :path=folder @updated=uploadsUpdated @upload-complete=uploadComplete> </uploader> <uploads v-if=uploads.length :uploads=uploads> </uploads> <template v-if="expanded && ! soloAsset"> <div class=asset-grid-listing v-if="displayMode === \'grid\'" v-el:assets> <asset-tile v-for="asset in assets" :asset=asset @removed=assetRemoved> </asset-tile> </div> <div class=asset-table-listing v-if="displayMode === \'list\'"> <table> <tbody v-el:assets> <tr is=assetRow v-for="asset in assets" :asset=asset @removed=assetRemoved> </tr> </tbody> </table> </div> </template> <div class=asset-solo-container v-if="expanded && soloAsset" v-el:assets> <asset-tile v-for="asset in assets" :asset=asset @removed=assetRemoved> </asset-tile> </div> </template> <selector v-if=showSelector :container=container :folder=folder :restrict-navigation=restrictNavigation :selected=selectedAssets :view-mode=selectorViewMode :max-files=maxFiles @selected=assetsSelected @closed=closeSelector> </selector> </div> '},function(e,t,i){var n,s,a={};n=i(549),s=i(550),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{loading:!0,options:{},container:null,autoBindChangeWatcher:!1}},computed:{selectConfig:function(){return{options:this.options}},allowBlank:function(){return!1}},methods:{bootstrapForContainerField:function(){var e=this;this.$parent.$watch("field",function(t){if(t.container===e.container)return!1;t.container?(e.loading=!0,e.container=t.container,e.getFolders()):(e.container=null,e.data=null)},{deep:!0}),this.$parent.field.container&&(this.container=this.$parent.field.container,this.getFolders())},getFolders:function(){this.$http.get(cp_url("assets/containers/"+this.container+"/folders"),function(t){var i=this.allowBlank?[{value:null,text:""}]:[];e.each(t,function(e){var t=e.path===e.title?e.path:e.path+" ("+e.title+")";i.push({value:e.path,text:t})}),this.options=i,this.loading=!1,this.data||(this.data=i[0].value),this.bindChangeWatcher()})}},ready:function(){this.config.container?(this.container=this.config.container,this.getFolders()):this.bootstrapForContainerField()}}}.call(t,i(1))},function(e,t){e.exports=' <div class=asset-folder-fieldtype-wrapper> <small class=help-block v-if=!container>{{ translate(\'cp.select_asset_container\') }}</small> <div v-if="container && loading" class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if="container && !loading" :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var n,s,a={};n=i(552),s=i(553),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{loading:!0,options:{},autoBindChangeWatcher:!1}},computed:{selectConfig:function(){return{options:this.options}},allowBlank:function(){return this.config&&this.config.allow_blank}},ready:function(){this.$http.get(cp_url("assets/containers/get"),function(t){var i=this.allowBlank?[{value:null,text:""}]:[];e.each(t.items,function(e){i.push({value:e.id,text:e.title})}),this.options=i,this.loading=!1,this.data||(this.data=i[0].value),this.bindChangeWatcher()})}}}.call(t,i(1))},function(e,t){e.exports=' <div class=asset-container-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if=!loading :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var n,s,a={};n=i(555),s=i(563),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(173),s=i(6),a=(i.n(s),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e}),o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],n=!0,s=!1,a=void 0;try{for(var o,r=e[Symbol.iterator]();!(n=(o=r.next()).done)&&(i.push(o.value),!t||i.length!==t);n=!0);}catch(e){s=!0,a=e}finally{try{!n&&r.return&&r.return()}finally{if(s)throw a}}return i}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();function r(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}t.default={mixins:[n.a,Fieldtype],components:{BardSet:i(556),BardText:i(559)},computed:{textBlocks:function(){return this.$refs.set.filter(function(e){return"text"===e.data.type})},allowSource:function(){return!this.config.markdown&&(void 0===this.config.allow_source||this.config.allow_source)}},data:function(){return{isReady:!1,setBeingDragged:null,lastDraggedOverElement:null,hasSets:void 0!==this.config.sets,showSource:!1,fullScreenMode:!1,autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,previousScrollPosition:null}},ready:function(){var e=this;this.data||(this.data=[{type:"text",text:"<p><br></p>"}]),this.combineConsecutiveTextBlocks(),this.isReady=!0,this.$nextTick(function(){e.draggable(),e.accordionMode&&e.collapseAll(),e.bindChangeWatcher()})},watch:{data:function(e){var t=this;0===e.length&&(this.data=[{type:"text",text:"<p><br></p>"}],this.$nextTick(function(){return t.getBlock(0).focus()}))}},methods:{addTextBlock:function(e,t){var i=this;t=t||"<p><br></p>",e+=1,this.data.splice(e,0,{type:"text",text:t}),this.$nextTick(function(){var n=i.getBlock(e);t?n.focusAt(0):n.focus()})},addBlock:function(t,i){var n=this,s={type:t},a=this.setConfig(t);e.each(a.fields,function(e){s[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),void 0===i&&(i=this.data.length),this.data.splice(i,0,s),this.$nextTick(function(){return n.getBlock(i).focus()})},setSelected:function(t,i){var n=this,s={type:t},a=this.setConfig(t);e.each(a.fields,function(e){s[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),this.data.splice(i,1,s),this.$nextTick(function(){return n.getBlock(i).focus()})},setInserted:function(e,t,i,n){var s,a=[{type:"text",text:i},this.getBlankSet(e),{type:"text",text:n}].filter(function(e){return"text"!==e.type||""!==e.text});(s=this.data).splice.apply(s,[t,1].concat(r(a)))},getBlankSet:function(t){var i={type:t},n=this.setConfig(t);return e.each(n.fields,function(e){i[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),i},getBlock:function(e){return this.$refs.set[e]},canShowDividerAtStart:function(e){return 0===e},canShowDividerAtEnd:function(e){return e===this.data.length-1||"text"!==this.getBlock(e+1).data.type},draggable:function(){var e=this,t=new s.Draggable(this.$els.blocks,{draggable:".bard-block",handle:".bard-drag-handle",mirror:{xAxis:!1,constrainDimensions:!0},delay:200});t.on("drag:start",function(t,i){var n=document.documentElement;e.previousScrollPosition=(window.pageYOffset||n.scrollTop)-(n.clientTop||0),e.setBeingDragged=t.originalSource.__vue__.index,e.textBlocks.forEach(function(e){return e.addDropAreas()})}),t.on("drag:move",function(t){if(t.originalEvent){var i=t.originalEvent.target;(i.classList.contains("bard-drop-area-inner")||i.classList.contains("bard-divider"))&&(e.lastDraggedOverElement=i)}}),t.on("drag:stop",function(t){t.cancel(),e.lastDraggedOverElement?e.moveSetToNewLocation():e.removeDropAreas(),e.$nextTick(function(){window.scrollTo(0,e.previousScrollPosition),e.previousScrollPosition=null})})},moveSetToNewLocation:function(){var e=void 0;e=this.lastDraggedOverElement.classList.contains("bard-divider")?this.lastDraggedOverElement.parentNode.__vue__:this.lastDraggedOverElement.parentNode.parentNode.parentNode.__vue__,this.removeDropAreas(),e&&(this.moveSet(e),this.lastDraggedOverElement=null)},moveSet:function(e){if("text"===e.data.type)return this.moveSetIntoText(e);var t=this.setBeingDragged,i=e.index+(t>e.index?1:0);this.lastDraggedOverElement.classList.contains("bard-divider-start")&&(i=0),this.data.splice(i,0,this.data.splice(t,1)[0]),this.combineConsecutiveTextBlocks()},moveSetIntoText:function(e){var t;e.insertParagraph();var i=e.getBeforeAndAfterHtml(),n=o(i,2),s={type:"text",text:n[0]},a={type:"text",text:n[1]},l=this.data[this.setBeingDragged];this.data.splice(this.setBeingDragged,1);var c=[s,l,a].filter(function(e){return"text"!==e.type||""!==e.text}),d=this.getInsertIndex(this.setBeingDragged,e.index);(t=this.data).splice.apply(t,[d,1].concat(r(c))),this.setBeingDragged=null,this.combineConsecutiveTextBlocks()},removeDropAreas:function(){this.textBlocks.forEach(function(e){return e.removeDropAreas()})},getInsertIndex:function(e,t){return 0===e?0:e<t?t-1:t},combineConsecutiveTextBlocks:function(){var e=[],t=!1;this.data.forEach(function(i,n){return"text"!==i.type?(e.push(i),void(t=!1)):t?void(e[e.length-1].text+=i.text):(e.push(i),void(t=!0))}),this.data=e},toggleSource:function(){this.showSource=!this.showSource},toggleFullscreen:function(){this.fullScreenMode=!this.fullScreenMode,this.$root.hideOverflow=!this.$root.hideOverflow},deleteSet:function(e){var t=this,i=this.getBlock(e-1),n=i&&"text"===i.data.type?i.plainText().length:null;this.data.splice(e,1),this.combineConsecutiveTextBlocks(),i&&this.$nextTick(function(){return t.getBlock(e-1).focusAt(n)})},goToPreviousTextField:function(e){var t=this;if(0!==e)for(var i=function(){e--;var i=t.getBlock(e);if("text"===i.data.type)return setTimeout(function(){i.focusAt("end")},10),{v:void 0}};e>0;){var n=i();if("object"===(void 0===n?"undefined":a(n)))return n.v}},goToNextTextField:function(e){var t=this,i=this.$refs.set.length-1;if(e!==i)for(var n=function(){e++;var i=t.getBlock(e);if("text"===i.data.type)return setTimeout(function(){i.focusAt("start")},10),{v:void 0}};e<i;){var s=n();if("object"===(void 0===s?"undefined":a(s)))return s.v}},updateText:function(e,t){this.data[e].text=t},getReplicatorPreviewText:function(){return e.map(this.$refs.set,function(e){return"text"===e.data.type?e.plainText():e.getCollapsedPreview()}).join(", ")}}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(557),s=i(558),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(174);t.default={mixins:[n.a],methods:{focusAt:function(e){this.focus()}},computed:{goingSolo:function(){var t=e.first(this.config.fields).type;return 1===this.config.fields.length&&e.contains(["assets"],t)}},events:{"asset-field.delete-bard-set":function(){this.$emit("deleted",this.index)}}}}.call(t,i(1))},function(e,t){e.exports=' <div class="bard-block bard-set" :class="{\'bard-set-solo\': goingSolo}"> <slot name=divider-start></slot> <div class=list-group> <div class="list-group-item group-header pl-3 bard-drag-handle" :class="{\'collapsed\': isHidden}" @dblclick=toggle v-if="! goingSolo"> <div class=flexy> <div class=fill> <div class="flexy baseline"> <label @click=toggle class="cursor-pointer m-0">{{ display }}</label> <div v-if=isHidden> <small class="replicator-set-summary fill" v-html=collapsedPreview></small> </div> </div> <small class=help-block v-if="instructions && !isHidden" v-html="instructions | markdown"></small> </div> <div class="btn-group icon-group action-more"> <button type=button class="btn-more dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <slot name=expand-collapse></slot> <li class=warning><a @click=delete>{{ translate(\'cp.delete_set\') }}</a></li> </ul> </div> </div> </div> <div v-show="!isHidden || goingSolo" :class="{\'list-group-item p-0\': ! goingSolo}" v-if=config.fields.length> <div class=publish-fields> <div v-for="field in config.fields" :class=fieldClasses(field)> <div :class="{\'bard-drag-handle\': goingSolo}"> <label v-if=hasMultipleFields class=block :class="{\'bold\': field.bold}"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> </div> <component :is=componentName(field.type) :name="parentName + \'.\' + index + \'.\' + field.name" :data.sync=data[field.name] :config=field> </component> </div> </div> </div> </div> <slot name=divider-end></slot> </div> '},function(e,t,i){var n,s,a={};n=i(560),s=i(562),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(19),a=i.n(s),o=i(561),r=i(175),l=i.n(r),c=i(176),d=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],n=!0,s=!1,a=void 0;try{for(var o,r=e[Symbol.iterator]();!(n=(o=r.next()).done)&&(i.push(o.value),!t||i.length!==t);n=!0);}catch(e){s=!0,a=e}finally{try{!n&&r.return&&r.return()}finally{if(s)throw a}}return i}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.default={name:"BardText",components:{selector:i(11)},mixins:[c.a],props:["data","index","showSource"],data:function(){return{editor:null,isShowingOptions:!1,optionsTopPosition:0,focusedElement:null,dropped:{sibling:null,position:null},text:this.data.text||""}},computed:{field:function(){return this.$els.input},sourceField:function(){return this.$els.source},isBlank:function(){return""===this.text||"<p><br></p>"===this.text},optionStyles:function(){return{top:this.optionsTopPosition+"px"}},hasSets:function(){return this.$parent.hasSets}},watch:{showSource:function(e){var t=this;e?this.$nextTick(function(){a.a.update(t.sourceField)}):this.updateEditorHtml(this.text)},text:function(e){this.$emit("text-updated",this.index,e),this.$dispatch("changesMade",!0)},"data.text":function(e,t){var i=this;e!==this.text&&(this.text=e,this.$nextTick(function(){return i.updateEditorHtml(e)}))}},ready:function(){a()(this.sourceField),this.initMedium()},methods:{getFieldtypeConfig:function(){return this.$parent.config},plainText:function(){return this.editor.elements[0].textContent},addDropAreas:function(){var e=this,t=this.editor.elements[0],i=!1;Array.from(t.children).forEach(function(n){n.classList.contains("bard-drop-area")||(i||(e.addDropAreaBefore(n,t),i=!0),e.addDropAreaAfter(n,t))})},addDropAreaBefore:function(e,t){var i=this,n=document.createElement("div"),s=document.createElement("div");s.className+="bard-drop-area-inner",s.addEventListener("mouseover",function(){i.dropped.sibling=e,i.dropped.position="previous"}),n.appendChild(s),n.className+="bard-drop-area bard-drop-area-before",t.insertBefore(n,e)},addDropAreaAfter:function(e,t){var i=this,n=document.createElement("div"),s=document.createElement("div");s.className+="bard-drop-area-inner",s.addEventListener("mouseover",function(){i.dropped.sibling=e,i.dropped.position="next"}),n.appendChild(s),n.className+="bard-drop-area bard-drop-area-after",t.insertBefore(n,e.nextSibling)},removeDropAreas:function(){var e=this.editor.elements[0].getElementsByClassName("bard-drop-area");Array.from(e).forEach(function(e){return e.remove()}),this.text=this.editor.getContent()},localizeButtons:function(e){var t={bold:"bold",italic:"italic",anchor:"link",h2:"h2",h3:"h3",quote:"blockquote"};return e.map(function(e){return t.hasOwnProperty(e)?{name:e,aria:translate("cp."+t[e])}:e})},initMedium:function(){var t=this,i=this.localizeButtons(this.$parent.config.buttons||["bold","italic","anchor","unorderedlist","orderedlist","h2","h3","quote"]),s=Object.assign({imageDragging:{},autolist:new o.a,autohr:new l.a},e.map(Statamic.MediumEditorExtensions,function(e){return new e}));this.$parent.config.container&&(s.assets=this.assetButtonExtension(),i.includes("assets")||i.push("assets"));var a={toolbar:{buttons:i},buttonLabels:"fontawesome",autoLink:this.$parent.config.autolink||!1,placeholder:!1,paste:{forcePlainText:this.$parent.config.force_plain_text,cleanPastedHTML:this.$parent.config.clean_pasted_html},spellcheck:this.$parent.config.spellcheck||!0,targetBlank:this.$parent.config.target_blank||!1,linkValidation:this.$parent.config.link_validation||!1,anchor:{placeholderText:translate("cp.paste_or_type_link"),aria:translate("cp.link")},extensions:s};this.$parent.config.markdown&&(a.toolbar=!1,a.keyboardCommands={commands:[{command:!1,key:"B",meta:!0,shift:!1},{command:!1,key:"I",meta:!0,shift:!1},{command:!1,key:"U",meta:!0,shift:!1}]}),this.editor=new MediumEditor(this.field,a),this.updateEditorHtml(this.text),this.editor.subscribe("editableInput",function(e){t.editor.getFocusedElement()&&t.focusElement(t.editor.getSelectedParentElement()),n(t.field).find("span[style]").contents().unwrap(),t.text=t.editor.getContent()}),this.editor.subscribe("editableClick",function(e){t.focusElement(e.target)}),this.editor.subscribe("editableKeyup",function(e){t.focusElement(t.editor.getSelectedParentElement())}),this.editor.subscribe("editableKeydownDelete",function(e){t.isBlank&&t.$emit("deleted",t.index)}),this.editor.subscribe("editableKeydown",function(e){var i="ArrowUp"===e.key||"ArrowLeft"===e.key,n="ArrowDown"===e.key||"ArrowRight"===e.key;if(i||n){var s=t.editor.exportSelection(),a=!t.editor.getSelectedParentElement().previousSibling,o=!t.editor.getSelectedParentElement().nextSibling;i&&0===s.start&&0===s.end&&a?t.$emit("arrow-up-at-start",t.index):n&&s.start===t.plainText().length&&s.end===t.plainText().length&&o&&t.$emit("arrow-down-at-end",t.index)}})},assetButtonExtension:function(){var e=this;return new(MediumEditor.extensions.button.extend({name:"assets",tagNames:["a"],contentDefault:'<span class="icon icon-images"></span>',aria:translate("cp.nav_assets"),handleClick:function(){var t=this.base.getExtensionByName("toolbar");t&&t.hideToolbar(),this.base.saveSelection(),e.addAsset()}}))},moveOptionsToElement:function(e){this.isShowingOptions=!0,this.optionsTopPosition=e.offsetTop-2},hideOptions:function(){this.isShowingOptions=!1},elementIsEmpty:function(e){var t=e.innerHTML;return""===t||"<br>"===t},focusElement:function(e){return this.focusedElement=e,"P"!==e.nodeName?this.hideOptions():this.elementIsEmpty(e)?this.moveOptionsToElement(e):this.hideOptions()},getNextSiblings:function(e){for(var t=[];e=e.nextSibling;)t.push(e);return t},getPreviousSiblings:function(e){for(var t=[];e=e.previousSibling;)t.push(e);return t},focus:function(){this.focusAt("start")},focusAt:function(e){"start"===e?e=0:"end"===e&&(e=this.plainText().length),this.setCaret(e)},setCaret:function(e){this.editor.importSelection({start:e,end:e})},insertSet:function(e){var t=this.getBeforeAndAfterHtml(),i=d(t,2),n=i[0],s=i[1];this.$emit("set-inserted",e,this.index,n,s)},getBeforeAndAfterHtml:function(){return[this.getHtmlFromElements(this.getPreviousSiblings(this.focusedElement).reverse()),this.getHtmlFromElements(this.getNextSiblings(this.focusedElement))]},getHtmlFromElements:function(t){return e.reduce(t,function(e,t){return e+(t.outerHTML||"")},"")},insertParagraph:function(){var e=this.dropped.sibling;"next"===this.dropped.position&&(e=e.nextSibling);var t=document.createElement("p");this.field.insertBefore(t,e);t.innerHTML="%%%CARET%%%",this.setCaret(this.plainText().indexOf("%%%CARET%%%")),t.innerHTML="<br>",this.text=this.editor.getContent(),this.focusElement(t)},updateEditorHtml:function(){this.editor.setContent(this.text)},assetsSelected:function(t){var i=this;this.editor.restoreSelection(),this.$http.post(cp_url("assets/get"),{assets:t},function(t){e(t).each(function(e){return i.editor.createLink({value:e.url})})})}}}}.call(t,i(1),i(2))},function(e,t,i){"use strict";t.a=MediumEditor.Extension.extend({name:"autolist",init:function(){this.subscribe("editableInput",this.onInput.bind(this)),this.subscribe("editablePaste",this.onPaste.bind(this))},onInput:function(e){if(this.base.getFocusedElement()){var t=this.base.getSelectedParentElement().textContent;/^1\.\s$/.test(t)?(this.base.execAction("delete"),this.base.execAction("delete"),this.base.execAction("delete"),this.base.execAction("insertorderedlist")):/^[\*\-]\s$/.test(t)&&(this.base.execAction("delete"),this.base.execAction("delete"),this.base.execAction("insertunorderedlist"))}},onPaste:function(e){var t=e.target;Array.from(t.children).forEach(function(e){return function(e){var t=function(e){if(/^[\*\-]\s/.test(e.textContent))return"ul";if(/^\d+\.\s/.test(e.textContent))return"ol";return!1}(e);if(!t)return;var i=document.createElement("li"),n=new RegExp("ul"===t?/^([\*\-]\s)/:/^(\d+\.\s)/);i.textContent=e.textContent.replace(n,""),i.dataset.liType=t,function(e,t){e.parentNode.insertBefore(t,e.nextSibling),e.parentNode.removeChild(e)}(e,i)}(e)}),function(e){var t=[];return e.forEach(function(e){e.forEach(function(e){return t.push(e)})}),t}(function(e){for(var t=[[]],i=0,n=!1,s=0;s<e.length;s++){var a=e[s],o="LI"===a.nodeName,r=n&&!o||!n&&o;r&&(t[++i]=[]),n=o,t[i].push(a)}return t.filter(function(e){return e.length})}(Array.from(t.children)).map(function(e){var t=e[0];if("LI"!==t.nodeName)return e;var i=document.createElement(t.dataset.liType);return e.forEach(function(e){delete e.dataset.liType,i.appendChild(e)}),[i]})).forEach(function(e){return t.appendChild(e)}),this.base.checkContentChanged()}})},function(e,t){e.exports=' <div class="bard-block bard-text"> <div class=bard-set-selector v-show="hasSets && isShowingOptions" :style=optionStyles> <div class=blerp> <button type=button class="btn btn-round dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <span class="icon icon-plus"></span> </button> <ul class=dropdown-menu> <li v-for="set in $parent.config.sets"> <a @click.prevent=insertSet(set.name)> <i class="icon icon-add-to-list"></i> {{ set.display || set.name }} </a> </li> <li v-if=isBlank> <a @click.prevent="$emit(\'deleted\', index)"> <i class="icon icon-trash"></i> {{ translate(\'cp.delete\') }} </a> </li> </ul> </div> </div> <textarea class=bard-source v-model=text v-show=showSource v-el:source rows=1></textarea> <div class=bard-editor v-show=!showSource v-el:input></div> <selector v-if=showAssetSelector :container=container :folder=folder :selected=selectedAssets :restrict-navigation=restrictAssetNavigation :max-files=1 @selected=assetsSelected @closed=closeAssetSelector></selector> </div> '},function(e,t){e.exports=" <div class=\"bard-fieldtype-wrapper replicator\" :class=\"{'bard-fullscreen': fullScreenMode, 'no-sets': !hasSets }\"> <div class=bard-blocks v-if=isReady v-el:blocks> <component :is=\"block.type === 'text' ? 'BardText' : 'BardSet'\" v-for=\"(index, block) in data\" v-ref:set :class=\"{ 'divider-at-start': canShowDividerAtStart(index), 'divider-at-end': canShowDividerAtEnd(index) }\" :key=index :data=block :index=index :parent-name=name :config=setConfig(block.type) :show-source=showSource @set-inserted=setInserted @deleted=deleteSet @source-toggled=toggleSource @arrow-up-at-start=goToPreviousTextField @arrow-down-at-end=goToNextTextField @text-updated=updateText> <template slot=divider-start> <div v-show=canShowDividerAtStart(index) class=\"bard-divider bard-divider-start\" @click=addTextBlock(index-1)></div> </template> <template slot=divider-end> <div v-show=canShowDividerAtEnd(index) class=\"bard-divider bard-divider-end\" @click=addTextBlock(index)></div> </template> <template slot=expand-collapse> <li><a @click=collapseAll>{{ translate('cp.collapse_all') }}</a></li> <li><a @click=expandAll>{{ translate('cp.expand_all') }}</a></li> </template> </component> </div> <div class=bard-field-title v-text=config.display></div> <div class=\"bard-field-options no-select\"> <a @click=toggleSource :class=\"{ active: showSource }\" v-if=allowSource><i class=\"icon icon-code\"></i></a> <a @click=toggleFullscreen><i class=icon :class=\"{ 'icon-resize-full-screen' : ! fullScreenMode, 'icon-resize-100' : fullScreenMode }\"></i></a> </div> </div> "},function(e,t,i){var n,s,a={};n=i(565),s=i(566),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{autoBindChangeWatcher:!1}},ready:function(){"string"==typeof this.config&&(this.config=JSON.parse(this.config)),this.data||(this.data=[]),this.bindChangeWatcher()},methods:{focus:function(){document.getElementById(this.name+"-0").focus()},getReplicatorPreviewText:function(){var t=this;return this.data.map(function(i){var n=e.findWhere(t.config.options,{value:i});return n?n.text:i}).join(", ")}}}}.call(t,i(1))},function(e,t){e.exports=' <ul class=list-unstyled> <li v-for="option in config.options"> <input type=checkbox name="{{ name }}[]" :id="name + \'-\' + $index" :value=option.value v-model=data /> <label :for="name + \'-\' + $index">{{ option.text }}</label> </li> </ul> '},function(e,t,i){var n,s={};n=i(568),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5),s=i.n(n);t.default={mixins:[s.a]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name"],methods:{getReplicatorPreviewText:function(){if(this.data)return this.$refs.relate?this.$refs.relate.getReplicatorPreviewText():this.data.join(", ")},focus:function(){this.$refs.relate.focus()}}}},function(e,t){e.exports=" <div> <relate-fieldtype v-ref:relate :data.sync=data :name=name :config=config> </relate-fieldtype> </div> "},function(e,t,i){var n,s={};n=i(572),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5),s=i.n(n);t.default={mixins:[s.a]}},function(e,t,i){var n,s,a={};n=i(574),s=i(575),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(0),s=i.n(n),a=i(177),o=i.n(a);t.default={mixins:[Fieldtype],props:{name:String,data:{},config:{default:function(){return{}}}},data:function(){return{calendar:null,time:null,autoBindChangeWatcher:!1}},computed:{hasDate:function(){return!this.blankAllowed||null!==this.data},hasTime:function(){return this.data&&this.data.length>10},timeAllowed:function(){return this.timeRequired||this.allowTime},allowTime:function(){return void 0==this.config.allow_time||0!=this.config.allow_time},timeRequired:function(){return this.config.require_time},blankAllowed:function(){return!0===this.config.allow_blank}},methods:{dateString:function(){return this.data&&this.data.length>=10?this.data.substr(0,10):s()().format("YYYY-MM-DD")},updateDateString:function(e){var t=this.hasTime?" "+this.time:"";this.data=e+t},watchTime:function(){var e=this;this.$watch("time",function(t,i){e.data=null===t?e.dateString():e.dateString()+" "+t})},addTime:function(){this.time=s()().format("HH:mm"),this.$nextTick(function(){e(this.$refs.time.$els.hour).focus().select()})},removeTime:function(){this.time=null},addDate:function(){this.data=s()().format("YYYY-MM-DD"),this.$nextTick(function(){this.bindCalendar()})},removeDate:function(){this.data=null},bindCalendar:function(){var t=this,i=this.data?s()(t.dateString()):s()().format("YYYY-MM-DD");this.calendar=new o.a({element:e(t.$el).find(".daterange"),current_date:s()(i),earliest_date:this.config.earliest_date||"January 1, 1900",format:{input:this.config.input_format||Statamic.dateFormat,jump_month:"MMMM",jump_year:"YYYY"},callback:function(){var e=s()(this.current_date).format("YYYY-MM-DD");t.updateDateString(e)}})},focus:function(){var t=this;setTimeout(function(){return e(t.$els.date).find(".dr-input .dr-date").click()},200)}},ready:function(){if(this.data||this.blankAllowed)this.data&&this.timeRequired&&!this.hasTime&&(this.data+=" "+s()().format("HH:mm"));else{var e=this.timeRequired||this.config.show_time?"YYYY-MM-DD HH:mm":"YYYY-MM-DD";this.data=s()().format(e)}this.data&&(this.time=this.data.substr(11)),this.watchTime(),this.bindCalendar(),this.bindChangeWatcher()}}}.call(t,i(2))},function(e,t){e.exports=' <div class="datetime clearfix"> <button type=button class="btn btn-default add-date" v-if=!hasDate @click=addDate tabindex=0> {{ translate(\'cp.add_date\') }} </button> <div v-if=hasDate class=date-time-container> <div class=col-date> <div class="daterange daterange--single flex" :data-datetime=date v-el:date> <div class="flex items-center h-8" v-if=blankAllowed> <span class="icon icon-remove" @click=removeDate>&times;</span> </div> </div> </div> <div class=col-time v-if=timeAllowed> <div class=time-fieldtype> <time-fieldtype v-ref:time v-show=hasTime :data.sync=time :required=timeRequired></time-fieldtype> <button type=button class="btn btn-default btn-icon add-time" v-show=!hasTime @click=addTime tabindex=0> <span class="icon icon-clock"></span> </button> </div> </div> </div> </div> '},function(e,t,i){var n,s,a={};n=i(577),s=i(578),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){i(3);t.default={mixins:[Fieldtype],data:function(){return{blank:{},sortableOptions:{},min_rows:this.config.min_rows||0,max_rows:this.config.max_rows||!1,autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,containerWidth:null}},computed:{stacked:function(){return this.containerWidth<600||"stacked"===this.config.mode},hasData:function(){return this.data&&this.data.length},isNested:function(){return"grid-fieldtype"===this.$parent.$options.name},canAddRows:function(){return!this.max_rows||!this.data||this.data.length<this.max_rows},addRowButton:function(){return this.config.add_row||translate_choice("cp.rows",1)}},ready:function(){var e=this;if(this.data||(this.data=[]),this.prepareBlankRow(),this.min_rows)for(var t=this.min_rows-this.data.length,i=1;i<=t;i++)this.addRow();this.trackContainerWidth(),this.$nextTick(function(){return e.initSortable()}),this.bindChangeWatcher(),this.$watch("stacked",function(){this.initSortable()})},methods:{prepareBlankRow:function(){var t={},i=JSON.parse(JSON.stringify(this.config.fields));e.each(i,function(e){t[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),this.blank=t},addRow:function(){var t=e.clone(this.blank);this.data.push(t),this.$nextTick(function(){this.getSortable().sortable(this.getSortableOptions());var e=this.$children.length-this.$children.length/this.data.length;this.$children[e].focus()})},deleteRow:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.data.splice(e,1)})},isExcessive:function(e){return!!this.max_rows&&e+1>this.max_rows},initSortable:function(){this.getSortable().sortable(this.getSortableOptions())},getSortable:function(){return this.stacked?n(this.$el).find(".grid-stacked"):n(this.$el).find("tbody")},getSortableOptions:function(){var e=this,t="";if(this.stacked)var i="stacked-placeholder";else i="table-row-placeholder";return{axis:"y",revert:175,handle:".drag-handle",placeholder:i,forcePlaceholderSize:!0,start:function(e,i){t=i.item.index(),i.placeholder.height(i.item.height())},update:function(i,n){var s=n.item.index(),a=e.data.splice(t,1)[0];e.data.splice(s,0,a)}}},stackedFieldClasses:function(e){return["form-group p-2 m-0 "+e.type+"-fieldtype",tailwind_width_class(e.width)]},gridColWidth:function(e){return 100===e?"":e+"%"},getReplicatorPreviewText:function(){return e.map(this.$children,function(e){if(!1!==e.config.replicator_preview)return void 0!==e.getReplicatorPreviewText?e.getReplicatorPreviewText():JSON.stringify(e.data)}).join(", ")},focus:function(){this.hasData?this.$children[0].focus():this.$els.addRowButton.focus()},trackContainerWidth:function(){var t=this,i=function(){t.containerWidth=t.$el.parentElement.clientWidth},n=e.throttle(i,100);i(),this.$root.$on("livepreview.opened",n),this.$root.$on("livepreview.closed",n),this.$root.$on("livepreview.resizing",n),this.$root.$on("publish.section.changed",n),addEventListener("resize",n),this.$once("hook:beforeDestroy",function(){window.removeEventListener("resize",n),t.$root.$off("livepreview.opened",n),t.$root.$off("livepreview.closed",n),t.$root.$off("livepreview.resizing",n),t.$root.$off("publish.section.changed",n)})},componentName:function(e){return e.replace(".","-")+"-fieldtype"}}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class="grid-field grid-mode-{{ (stacked) ? \'stacked\' : \'table\' }}"> <table v-if="hasData && !stacked" class="grid-table bordered-table"> <thead> <tr> <th v-for="field in config.fields" :style="{ width: gridColWidth(field.width) }"> <div class=flexy> <label class="block fill"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <i class="icon icon-help-with-circle o5 fs-12" v-if=field.instructions v-tip :tip-text="field.instructions | markdown"></i> </div> </th> <th class=row-controls></th> </tr> </thead> <tbody> <tr v-for="(rowIndex, row) in data" :class="{excess: isExcessive(rowIndex)}"> <td v-for="field in config.fields"> <div class="{{ field.type }}-fieldtype"> <component :is=componentName(field.type) :name="name + \'.\' + rowIndex + \'.\' + field.name" :data.sync=row[field.name] :config=field> </component> </div> </td> <td class=row-controls> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" v-on:click=deleteRow(rowIndex)></span> </td> </tr> </tbody> </table> <div v-if="hasData && stacked" class=grid-stacked> <div class=list-group v-for="(rowIndex, row) in data"> <div class="list-group-item group-header pl-3 drag-handle"> <div class=flexy> <label class=fill>{{ rowIndex + 1 }}</label> <i class="icon icon-cross" v-on:click=deleteRow(rowIndex)></i> </div> </div> <div class="list-group-item p-0"> <div class=publish-fields> <div v-for="field in config.fields" :class=stackedFieldClasses(field)> <label class=block> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> <component :is=componentName(field.type) :name="name + \'.\' + rowIndex + \'.\' + field.name" :data.sync=row[field.name] :config=field> </component> </div> </div> </div> </div> </div> <template v-if=canAddRows> <button type=button class="btn btn-default add-row" @click=addRow v-el:add-row-button> {{ addRowButton }} <i class="icon icon-plus icon-right"></i> </button> </template> </div> '},function(e,t,i){var n,s,a={};n=i(580),s=i(581),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i,n){t.default={mixins:[Fieldtype],props:{required:Boolean,url:String},data:function(){return{loading:!0,creating:!1,storePending:!1,newFieldsetName:"",options:{},autoBindChangeWatcher:!1}},computed:{selectConfig:function(){return{options:this.options}},canAdd:function(){return e.can("super")}},ready:function(){this.getFieldsets()},methods:{add:function(){var e=this;this.creating=!0,this.$nextTick(function(){return e.$els.createField.focus()})},cancelAdd:function(){this.creating=!1,this.newFieldsetName=""},create:function(){var e=this;this.storePending||(this.storePending=!0,this.$http.post(cp_url("fieldsets/quick"),{name:this.newFieldsetName}).success(function(t){e.data=e.newFieldsetName,e.storePending=!1,e.cancelAdd(),e.refresh()}))},refresh:function(){this.loading=!0,this.getFieldsets()},getFieldsets:function(){var e=cp_url("fieldsets-json"),t={};this.url&&(t.url=this.url),this.config&&!this.config.hidden&&(t.hidden=!1),e+="?"+i.param(t),this.$http.get(e,function(e){var t=this.required?[]:[{value:null,text:""}];n.each(e.items,function(e){t.push({value:e.uuid,text:e.title})}),this.options=t,this.loading=!1,this.required&&!this.data&&(this.data=this.options[0].value),this.bindChangeWatcher()})}}}}.call(t,i(3),i(2),i(1))},function(e,t){e.exports=' <div class=template-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if=!loading> <div class=input-group v-show=creating> <input type=text v-el:create-field class=form-control v-model=newFieldsetName @keydown.enter.prevent=create @keydown.esc=cancelAdd /> <div class=input-group-btn> <button class="btn btn-primary" @click.prevent=create :disabled=storePending>{{ translate(\'cp.create\') }}</button> <button class="btn btn-default" @click.prevent=cancelAdd>{{ translate(\'cp.cancel\') }}</button> </div> </div> <div class=input-group v-else> <select-fieldtype :name=name :data.sync=data :config=selectConfig></select-fieldtype> <span class=input-group-btn> <button class=btn @click.prevent=add v-if=canAdd> <span class="icon icon-plus"></span> </button> <button class=btn @click.prevent=refresh> <span class="icon icon-cycle"></span> </button> </span> </div> </div> </div> '},function(e,t,i){var n,s={};n=i(583),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5),s=i.n(n);t.default={mixins:[s.a]}},function(e,t,i){var n,s,a={};n=i(585),s=i(586),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype]}},function(e,t){e.exports=" <input type=hidden :name=name v-model=data /> "},function(e,t,i){var n,s,a={};n=i(588),s=i(589),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype],props:["autofocus"],computed:{classes:function(){return"form-control"}}}},function(e,t){e.exports=" <input type=number :class=classes v-model=data tabindex=0 :autofocus=autofocus /> "},function(e,t,i){var n,s,a={};n=i(591),s=i(592),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],data:function(){return{newItem:"",editing:null,autoBindChangeWatcher:!1}},methods:{addItem:function(){""!==this.newItem&&(this.data.push(this.newItem),this.newItem="",this.editing=this.data.length)},editItem:function(t,i){i.preventDefault(),this.editing=t,this.$nextTick(function(){e(this.$el).find(".editing input").focus().select()})},goUp:function(){this.editing>0&&(this.editing=this.editing-1,this.$nextTick(function(){e(this.$el).find(".editing input").focus().select()}))},goDown:function(){this.editing===this.data.length-1?(this.editing=this.data.length,e(this.$el).find(".new-item").focus()):(this.editing=this.editing+1,this.$nextTick(function(){e(this.$el).find(".editing input").focus().select()}))},updateItem:function(t,i,n){n.preventDefault(),""==t?this.data.$remove(i):this.data[i]=t,this.editing=this.data.length,e(this.$el).find(".new-item").focus()},deleteItem:function(e){this.data.$remove(e)},getReplicatorPreviewText:function(){return this.data.join(", ")}},ready:function(){var t=this,i="";this.data||(this.data=[]),this.bindChangeWatcher(),e(this.$el).sortable({axis:"y",revert:175,items:"> li:not(:last-child)",start:function(e,t){i=t.item.index()},update:function(e,n){var s=n.item.index(),a=t.data.splice(i,1)[0];t.data.splice(s,0,a)}})}}}.call(t,i(2))},function(e,t){e.exports=' <ul> <li v-for="item in data" track-by=$index :class="{ editing: (editing == $index) }"> <span v-if="editing == $index"> <input type=text v-model=item class=form-control @keydown.enter="updateItem(item, $index, $event)" @keyup.up=goUp @keyup.down=goDown /> </span> <span v-if="editing != $index" @dblclick="editItem($index, $event)"> {{ item }} <i class=delete @click=deleteItem(item)></i> </span> </li> <li> <input type=text class="form-control new-item" v-model=newItem placeholder="{{ translate(\'cp.add_another_item\')}}..." @keydown.enter.prevent=addItem @blur=addItem @keyup.up=goUp /> </li> </ul> '},function(e,t,i){var n,s,a={};n=i(594),s=i(595),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name","indexPhpWarning"],computed:{shouldShowIndexPhpWarning:function(){return this.indexPhpWarning&&"en"!==this.firstLocale},firstLocale:function(){return this.data.length?this.data[0].locale:"en"}},data:function(){return{gridConfig:{add_row:translate("cp.add_locale"),fields:[{name:"locale",type:"text",display:translate("cp.shorthand"),instructions:translate("cp.shorthand_instructions"),width:"20%"},{name:"full",type:"text",display:translate("cp.full_locale"),instructions:translate("cp.full_locale_instructions"),width:"20%"},{name:"name",type:"text",display:translate("cp.name"),instructions:translate("cp.locale_name_instructions"),width:"20%"},{name:"url",type:"text",display:translate("cp.url"),instructions:translate("cp.locale_url_instructions")}]}}}}},function(e,t){e.exports=' <div class=locale-settings-fieldtype-wrapper> <grid-fieldtype :data=data :config=gridConfig></grid-fieldtype> <div class="alert alert-danger mt-16" v-if=shouldShowIndexPhpWarning> <small v-html="translate(\'cp.settings_locales_index_php_warning\', { locale: firstLocale })"></small> </div> </div> '},function(e,t,i){var n,s,a={};n=i(597),s=i(605),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(4),s=i(13),a=i(178);i(598),i(599),i(600),i(179),i(20),i(182),i(602),i(180),i(181),i(183),i(604),i(184),t.default={mixins:[Fieldtype],components:{selector:i(11),Uploader:i(15)},data:function(){return{mode:"write",selections:null,showAssetSelector:!1,selectedAssets:[],selectorViewMode:null,draggingFile:!1,showCheatsheet:!1,fullScreenMode:!1,codemirror:null}},methods:{toggleFullScreen:function(){this.fullScreenMode=!this.fullScreenMode,this.$root.hideOverflow=!this.$root.hideOverflow},getText:function(t){var i=e.indexOf(this.selections,t);return this.codemirror.getSelections()[i]},insertImage:function(e,t){var i=this.codemirror.doc,n="";i.somethingSelected()?n=i.getSelection():t&&(n=t);var s="!["+n+"]("+(e=e||"")+")";i.replaceSelection(s,"start");var a=i.getCursor().line,o=i.getCursor().ch+2,r=o+n.length;i.setSelection({line:a,ch:o},{line:a,ch:r}),this.codemirror.focus()},appendImage:function(e,t){t=t||"",this.data+="\n\n!["+t+"]("+e+")"},insertLink:function(e,t){var i=this.codemirror.doc,n="";i.somethingSelected()?n=i.getSelection():t&&(n=t),e||(e=prompt("Enter URL","http://"))||(e="");var s="["+n+"]("+e+")";i.replaceSelection(s,"start");var a=i.getCursor().line,o=i.getCursor().ch+1,r=o+n.length;i.setSelection({line:a,ch:o},{line:a,ch:r}),this.codemirror.focus()},appendLink:function(e,t){t=t||"",this.data+="\n\n["+t+"]("+e+")"},bold:function(){var t=this,i=[];e.each(t.selections,function(e,n){var s=t.isBold(e)?t.removeBold(e):t.makeBold(e);i.push(s)}),this.codemirror.replaceSelections(i,"around"),this.codemirror.focus()},isBold:function(e){return this.getText(e).match(/^\*{2}(.*)\*{2}$/)},makeBold:function(e){return"**"+this.getText(e)+"**"},removeBold:function(e){var t=this.getText(e);return t.substring(2,t.length-2)},italic:function(){var t=this,i=[];e.each(t.selections,function(e,n){var s=t.isItalic(e)?t.removeItalic(e):t.makeItalic(e);i.push(s)}),this.codemirror.replaceSelections(i,"around"),this.codemirror.focus()},isItalic:function(e){return this.getText(e).match(/^\_(.*)\_$/)},makeItalic:function(e){return"_"+this.getText(e)+"_"},removeItalic:function(e){var t=this.getText(e);return t.substring(1,t.length-1)},addAsset:function(){this.showAssetSelector=!0},shortcut:function(e){var t=e.keyCode,i=!0===e.metaKey;i&&66===t&&(this.bold(),e.preventDefault()),i&&73===t&&(this.italic(),e.preventDefault()),i&&75===t&&(this.insertLink(),e.preventDefault())},assetsSelected:function(t){var i=this,n=1===t.length?"insert":"append";this.closeAssetSelector(),this.selectedAssets=[],this.$http.post(cp_url("assets/get"),{assets:t},function(t){e(t).each(function(e){var t=e.alt||"",s=encodeURI(e.url);e.is_image?i[n+"Image"](s,t):i[n+"Link"](s,t)})})},closeAssetSelector:function(){this.showAssetSelector=!1},uploadComplete:function(e,t){e.is_image?this.insertImage(e.url):this.insertLink(e.url),t.length>1&&this.codemirror.setCursor(this.codemirror.lineCount(),0)},getReplicatorPreviewText:function(){return s(this.data||"",{renderer:new a}).replace(/<\/?[^>]+(>|$)/g,"")},focus:function(){this.codemirror.focus()},trackHeightUpdates:function(){var t=this,i=e.throttle(function(){window.dispatchEvent(new Event("resize"))},100);this.$root.$on("livepreview.opened",i),this.$root.$on("livepreview.closed",i),this.$root.$on("livepreview.resizing",i),this.$once("hook:beforeDestroy",function(){t.$root.$off("livepreview.opened",i),t.$root.$off("livepreview.closed",i),t.$root.$off("livepreview.resizing",i)})}},computed:{assetsEnabled:function(){return this.config&&this.config.container},container:function(){return this.config.container},folder:function(){return this.config.folder||"/"},cheatsheet:function(){return this.config&&this.config.cheatsheet},uploadElement:function(){return this.$el},restrictAssetNavigation:function(){return this.config.restrict_assets||!1}},ready:function(){var e=this;e.codemirror=n(this.$els.codemirror,{value:e.data||"",mode:"gfm",dragDrop:!1,lineWrapping:!0,viewportMargin:1/0,tabindex:0,autoRefresh:!0}),e.codemirror.on("change",function(t){e.data=t.doc.getValue()}),e.codemirror.on("beforeSelectionChange",function(t,i){e.selections=i.ranges}),this.$watch("data",function(t){t!==e.codemirror.doc.getValue()&&e.codemirror.doc.setValue(t)}),this.trackHeightUpdates()}}}.call(t,i(1))},function(e,t,i){(function(e){var t={pairs:"()[]{}''\"\"",triples:"",explode:"[]{}"},i=e.Pos;function n(e,i){return"pairs"==i&&"string"==typeof e?e:"object"==typeof e&&null!=e[i]?e[i]:t[i]}e.defineOption("autoCloseBrackets",!1,function(t,i,o){o&&o!=e.Init&&(t.removeKeyMap(s),t.state.closeBrackets=null),i&&(a(n(i,"pairs")),t.state.closeBrackets=i,t.addKeyMap(s))});var s={Backspace:function(t){var s=r(t);if(!s||t.getOption("disableInput"))return e.Pass;for(var a=n(s,"pairs"),o=t.listSelections(),l=0;l<o.length;l++){if(!o[l].empty())return e.Pass;var d=c(t,o[l].head);if(!d||a.indexOf(d)%2!=0)return e.Pass}for(var l=o.length-1;l>=0;l--){var u=o[l].head;t.replaceRange("",i(u.line,u.ch-1),i(u.line,u.ch+1),"+delete")}},Enter:function(t){var i=r(t),s=i&&n(i,"explode");if(!s||t.getOption("disableInput"))return e.Pass;for(var a=t.listSelections(),o=0;o<a.length;o++){if(!a[o].empty())return e.Pass;var l=c(t,a[o].head);if(!l||s.indexOf(l)%2!=0)return e.Pass}t.operation(function(){var e=t.lineSeparator()||"\n";t.replaceSelection(e+e,null),t.execCommand("goCharLeft"),a=t.listSelections();for(var i=0;i<a.length;i++){var n=a[i].head.line;t.indentLine(n,null,!0),t.indentLine(n+1,null,!0)}})}};function a(e){for(var t=0;t<e.length;t++){var i=e.charAt(t),n="'"+i+"'";s[n]||(s[n]=o(i))}}function o(t){return function(s){return function(t,s){var a=r(t);if(!a||t.getOption("disableInput"))return e.Pass;var o=n(a,"pairs"),c=o.indexOf(s);if(-1==c)return e.Pass;for(var u,p=n(a,"triples"),f=o.charAt(c+1)==s,h=t.listSelections(),m=c%2==0,g=0;g<h.length;g++){var v,x=h[g],y=x.head,b=t.getRange(y,i(y.line,y.ch+1));if(m&&!x.empty())v="surround";else if(!f&&m||b!=s)if(f&&y.ch>1&&p.indexOf(s)>=0&&t.getRange(i(y.line,y.ch-2),y)==s+s){if(y.ch>2&&/\bstring/.test(t.getTokenTypeAt(i(y.line,y.ch-2))))return e.Pass;v="addFour"}else if(f){var w=0==y.ch?" ":t.getRange(i(y.line,y.ch-1),y);if(e.isWordChar(b)||w==s||e.isWordChar(w))return e.Pass;v="both"}else{if(!m||t.getLine(y.line).length!=y.ch&&!l(b,o)&&!/\s/.test(b))return e.Pass;v="both"}else v=f&&d(t,y)?"both":p.indexOf(s)>=0&&t.getRange(y,i(y.line,y.ch+3))==s+s+s?"skipThree":"skip";if(u){if(u!=v)return e.Pass}else u=v}var k=c%2?o.charAt(c-1):s,_=c%2?s:o.charAt(c+1);t.operation(function(){if("skip"==u)t.execCommand("goCharRight");else if("skipThree"==u)for(var n=0;n<3;n++)t.execCommand("goCharRight");else if("surround"==u){for(var s=t.getSelections(),n=0;n<s.length;n++)s[n]=k+s[n]+_;t.replaceSelections(s,"around"),s=t.listSelections().slice();for(var n=0;n<s.length;n++)s[n]=(a=s[n],void 0,o=e.cmpPos(a.anchor,a.head)>0,{anchor:new i(a.anchor.line,a.anchor.ch+(o?-1:1)),head:new i(a.head.line,a.head.ch+(o?1:-1))});t.setSelections(s)}else"both"==u?(t.replaceSelection(k+_,null),t.triggerElectric(k+_),t.execCommand("goCharLeft")):"addFour"==u&&(t.replaceSelection(k+k+k+k,"before"),t.execCommand("goCharRight"));var a,o})}(s,t)}}function r(e){var t=e.state.closeBrackets;return!t||t.override?t:e.getModeAt(e.getCursor()).closeBrackets||t}function l(e,t){var i=t.lastIndexOf(e);return i>-1&&i%2==1}function c(e,t){var n=e.getRange(i(t.line,t.ch-1),i(t.line,t.ch+1));return 2==n.length?n:null}function d(e,t){var n=e.getTokenAt(i(t.line,t.ch+1));return/\bstring/.test(n.type)&&n.start==t.ch&&(0==t.ch||!/\bstring/.test(e.getTokenTypeAt(t)))}a(t.pairs+"`")})(i(4))},function(e,t,i){(function(e){var t=/MSIE \d/.test(navigator.userAgent)&&(null==document.documentMode||document.documentMode<8),i=e.Pos,n={"(":")>",")":"(<","[":"]>","]":"[<","{":"}>","}":"{<"};function s(e,t,s){var o=e.getLineHandle(t.line),r=t.ch-1,l=s&&s.afterCursor;null==l&&(l=/(^| )cm-fat-cursor($| )/.test(e.getWrapperElement().className));var c=!l&&r>=0&&n[o.text.charAt(r)]||n[o.text.charAt(++r)];if(!c)return null;var d=">"==c.charAt(1)?1:-1;if(s&&s.strict&&d>0!=(r==t.ch))return null;var u=e.getTokenTypeAt(i(t.line,r+1)),p=a(e,i(t.line,r+(d>0?1:0)),d,u||null,s);return null==p?null:{from:i(t.line,r),to:p&&p.pos,match:p&&p.ch==c.charAt(0),forward:d>0}}function a(e,t,s,a,o){for(var r=o&&o.maxScanLineLength||1e4,l=o&&o.maxScanLines||1e3,c=[],d=o&&o.bracketRegex?o.bracketRegex:/[(){}[\]]/,u=s>0?Math.min(t.line+l,e.lastLine()+1):Math.max(e.firstLine()-1,t.line-l),p=t.line;p!=u;p+=s){var f=e.getLine(p);if(f){var h=s>0?0:f.length-1,m=s>0?f.length:-1;if(!(f.length>r))for(p==t.line&&(h=t.ch-(s<0?1:0));h!=m;h+=s){var g=f.charAt(h);if(d.test(g)&&(void 0===a||e.getTokenTypeAt(i(p,h+1))==a))if(">"==n[g].charAt(1)==s>0)c.push(g);else{if(!c.length)return{pos:i(p,h),ch:g};c.pop()}}}}return p-s!=(s>0?e.lastLine():e.firstLine())&&null}function o(e,n,a){for(var o=e.state.matchBrackets.maxHighlightLineLength||1e3,r=[],l=e.listSelections(),c=0;c<l.length;c++){var d=l[c].empty()&&s(e,l[c].head,a);if(d&&e.getLine(d.from.line).length<=o){var u=d.match?"CodeMirror-matchingbracket":"CodeMirror-nonmatchingbracket";r.push(e.markText(d.from,i(d.from.line,d.from.ch+1),{className:u})),d.to&&e.getLine(d.to.line).length<=o&&r.push(e.markText(d.to,i(d.to.line,d.to.ch+1),{className:u}))}}if(r.length){t&&e.state.focused&&e.focus();var p=function(){e.operation(function(){for(var e=0;e<r.length;e++)r[e].clear()})};if(!n)return p;setTimeout(p,800)}}function r(e){e.operation(function(){e.state.matchBrackets.currentlyHighlighted&&(e.state.matchBrackets.currentlyHighlighted(),e.state.matchBrackets.currentlyHighlighted=null),e.state.matchBrackets.currentlyHighlighted=o(e,!1,e.state.matchBrackets)})}e.defineOption("matchBrackets",!1,function(t,i,n){n&&n!=e.Init&&(t.off("cursorActivity",r),t.state.matchBrackets&&t.state.matchBrackets.currentlyHighlighted&&(t.state.matchBrackets.currentlyHighlighted(),t.state.matchBrackets.currentlyHighlighted=null)),i&&(t.state.matchBrackets="object"==typeof i?i:{},t.on("cursorActivity",r))}),e.defineExtension("matchBrackets",function(){o(this,!0)}),e.defineExtension("findMatchingBracket",function(e,t,i){return(i||"boolean"==typeof t)&&(i?(i.strict=t,t=i):t=t?{strict:!0}:null),s(this,e,t)}),e.defineExtension("scanForBracket",function(e,t,i,n){return a(this,e,t,i,n)})})(i(4))},function(e,t,i){(function(e){"use strict";function t(t,i){clearTimeout(i.timeout),e.off(window,"mouseup",i.hurry),e.off(window,"keyup",i.hurry)}e.defineOption("autoRefresh",!1,function(i,n){i.state.autoRefresh&&(t(i,i.state.autoRefresh),i.state.autoRefresh=null),n&&0==i.display.wrapper.offsetHeight&&function(i,n){function s(){i.display.wrapper.offsetHeight?(t(i,n),i.display.lastWrapHeight!=i.display.wrapper.clientHeight&&i.refresh()):n.timeout=setTimeout(s,n.delay)}n.timeout=setTimeout(s,n.delay),n.hurry=function(){clearTimeout(n.timeout),n.timeout=setTimeout(s,50)},e.on(window,"mouseup",n.hurry),e.on(window,"keyup",n.hurry)}(i,i.state.autoRefresh={delay:n.delay||250})})})(i(4))},function(e,t,i){(function(e){"use strict";e.modeInfo=[{name:"APL",mime:"text/apl",mode:"apl",ext:["dyalog","apl"]},{name:"PGP",mimes:["application/pgp","application/pgp-encrypted","application/pgp-keys","application/pgp-signature"],mode:"asciiarmor",ext:["asc","pgp","sig"]},{name:"ASN.1",mime:"text/x-ttcn-asn",mode:"asn.1",ext:["asn","asn1"]},{name:"Asterisk",mime:"text/x-asterisk",mode:"asterisk",file:/^extensions\.conf$/i},{name:"Brainfuck",mime:"text/x-brainfuck",mode:"brainfuck",ext:["b","bf"]},{name:"C",mime:"text/x-csrc",mode:"clike",ext:["c","h","ino"]},{name:"C++",mime:"text/x-c++src",mode:"clike",ext:["cpp","c++","cc","cxx","hpp","h++","hh","hxx"],alias:["cpp"]},{name:"Cobol",mime:"text/x-cobol",mode:"cobol",ext:["cob","cpy"]},{name:"C#",mime:"text/x-csharp",mode:"clike",ext:["cs"],alias:["csharp"]},{name:"Clojure",mime:"text/x-clojure",mode:"clojure",ext:["clj","cljc","cljx"]},{name:"ClojureScript",mime:"text/x-clojurescript",mode:"clojure",ext:["cljs"]},{name:"Closure Stylesheets (GSS)",mime:"text/x-gss",mode:"css",ext:["gss"]},{name:"CMake",mime:"text/x-cmake",mode:"cmake",ext:["cmake","cmake.in"],file:/^CMakeLists.txt$/},{name:"CoffeeScript",mimes:["application/vnd.coffeescript","text/coffeescript","text/x-coffeescript"],mode:"coffeescript",ext:["coffee"],alias:["coffee","coffee-script"]},{name:"Common Lisp",mime:"text/x-common-lisp",mode:"commonlisp",ext:["cl","lisp","el"],alias:["lisp"]},{name:"Cypher",mime:"application/x-cypher-query",mode:"cypher",ext:["cyp","cypher"]},{name:"Cython",mime:"text/x-cython",mode:"python",ext:["pyx","pxd","pxi"]},{name:"Crystal",mime:"text/x-crystal",mode:"crystal",ext:["cr"]},{name:"CSS",mime:"text/css",mode:"css",ext:["css"]},{name:"CQL",mime:"text/x-cassandra",mode:"sql",ext:["cql"]},{name:"D",mime:"text/x-d",mode:"d",ext:["d"]},{name:"Dart",mimes:["application/dart","text/x-dart"],mode:"dart",ext:["dart"]},{name:"diff",mime:"text/x-diff",mode:"diff",ext:["diff","patch"]},{name:"Django",mime:"text/x-django",mode:"django"},{name:"Dockerfile",mime:"text/x-dockerfile",mode:"dockerfile",file:/^Dockerfile$/},{name:"DTD",mime:"application/xml-dtd",mode:"dtd",ext:["dtd"]},{name:"Dylan",mime:"text/x-dylan",mode:"dylan",ext:["dylan","dyl","intr"]},{name:"EBNF",mime:"text/x-ebnf",mode:"ebnf"},{name:"ECL",mime:"text/x-ecl",mode:"ecl",ext:["ecl"]},{name:"edn",mime:"application/edn",mode:"clojure",ext:["edn"]},{name:"Eiffel",mime:"text/x-eiffel",mode:"eiffel",ext:["e"]},{name:"Elm",mime:"text/x-elm",mode:"elm",ext:["elm"]},{name:"Embedded Javascript",mime:"application/x-ejs",mode:"htmlembedded",ext:["ejs"]},{name:"Embedded Ruby",mime:"application/x-erb",mode:"htmlembedded",ext:["erb"]},{name:"Erlang",mime:"text/x-erlang",mode:"erlang",ext:["erl"]},{name:"Esper",mime:"text/x-esper",mode:"sql"},{name:"Factor",mime:"text/x-factor",mode:"factor",ext:["factor"]},{name:"FCL",mime:"text/x-fcl",mode:"fcl"},{name:"Forth",mime:"text/x-forth",mode:"forth",ext:["forth","fth","4th"]},{name:"Fortran",mime:"text/x-fortran",mode:"fortran",ext:["f","for","f77","f90"]},{name:"F#",mime:"text/x-fsharp",mode:"mllike",ext:["fs"],alias:["fsharp"]},{name:"Gas",mime:"text/x-gas",mode:"gas",ext:["s"]},{name:"Gherkin",mime:"text/x-feature",mode:"gherkin",ext:["feature"]},{name:"GitHub Flavored Markdown",mime:"text/x-gfm",mode:"gfm",file:/^(readme|contributing|history).md$/i},{name:"Go",mime:"text/x-go",mode:"go",ext:["go"]},{name:"Groovy",mime:"text/x-groovy",mode:"groovy",ext:["groovy","gradle"],file:/^Jenkinsfile$/},{name:"HAML",mime:"text/x-haml",mode:"haml",ext:["haml"]},{name:"Haskell",mime:"text/x-haskell",mode:"haskell",ext:["hs"]},{name:"Haskell (Literate)",mime:"text/x-literate-haskell",mode:"haskell-literate",ext:["lhs"]},{name:"Haxe",mime:"text/x-haxe",mode:"haxe",ext:["hx"]},{name:"HXML",mime:"text/x-hxml",mode:"haxe",ext:["hxml"]},{name:"ASP.NET",mime:"application/x-aspx",mode:"htmlembedded",ext:["aspx"],alias:["asp","aspx"]},{name:"HTML",mime:"text/html",mode:"htmlmixed",ext:["html","htm","handlebars","hbs"],alias:["xhtml"]},{name:"HTTP",mime:"message/http",mode:"http"},{name:"IDL",mime:"text/x-idl",mode:"idl",ext:["pro"]},{name:"Pug",mime:"text/x-pug",mode:"pug",ext:["jade","pug"],alias:["jade"]},{name:"Java",mime:"text/x-java",mode:"clike",ext:["java"]},{name:"Java Server Pages",mime:"application/x-jsp",mode:"htmlembedded",ext:["jsp"],alias:["jsp"]},{name:"JavaScript",mimes:["text/javascript","text/ecmascript","application/javascript","application/x-javascript","application/ecmascript"],mode:"javascript",ext:["js"],alias:["ecmascript","js","node"]},{name:"JSON",mimes:["application/json","application/x-json"],mode:"javascript",ext:["json","map"],alias:["json5"]},{name:"JSON-LD",mime:"application/ld+json",mode:"javascript",ext:["jsonld"],alias:["jsonld"]},{name:"JSX",mime:"text/jsx",mode:"jsx",ext:["jsx"]},{name:"Jinja2",mime:"null",mode:"jinja2"},{name:"Julia",mime:"text/x-julia",mode:"julia",ext:["jl"]},{name:"Kotlin",mime:"text/x-kotlin",mode:"clike",ext:["kt"]},{name:"LESS",mime:"text/x-less",mode:"css",ext:["less"]},{name:"LiveScript",mime:"text/x-livescript",mode:"livescript",ext:["ls"],alias:["ls"]},{name:"Lua",mime:"text/x-lua",mode:"lua",ext:["lua"]},{name:"Markdown",mime:"text/x-markdown",mode:"markdown",ext:["markdown","md","mkd"]},{name:"mIRC",mime:"text/mirc",mode:"mirc"},{name:"MariaDB SQL",mime:"text/x-mariadb",mode:"sql"},{name:"Mathematica",mime:"text/x-mathematica",mode:"mathematica",ext:["m","nb"]},{name:"Modelica",mime:"text/x-modelica",mode:"modelica",ext:["mo"]},{name:"MUMPS",mime:"text/x-mumps",mode:"mumps",ext:["mps"]},{name:"MS SQL",mime:"text/x-mssql",mode:"sql"},{name:"mbox",mime:"application/mbox",mode:"mbox",ext:["mbox"]},{name:"MySQL",mime:"text/x-mysql",mode:"sql"},{name:"Nginx",mime:"text/x-nginx-conf",mode:"nginx",file:/nginx.*\.conf$/i},{name:"NSIS",mime:"text/x-nsis",mode:"nsis",ext:["nsh","nsi"]},{name:"NTriples",mimes:["application/n-triples","application/n-quads","text/n-triples"],mode:"ntriples",ext:["nt","nq"]},{name:"Objective-C",mime:"text/x-objectivec",mode:"clike",ext:["m","mm"],alias:["objective-c","objc"]},{name:"OCaml",mime:"text/x-ocaml",mode:"mllike",ext:["ml","mli","mll","mly"]},{name:"Octave",mime:"text/x-octave",mode:"octave",ext:["m"]},{name:"Oz",mime:"text/x-oz",mode:"oz",ext:["oz"]},{name:"Pascal",mime:"text/x-pascal",mode:"pascal",ext:["p","pas"]},{name:"PEG.js",mime:"null",mode:"pegjs",ext:["jsonld"]},{name:"Perl",mime:"text/x-perl",mode:"perl",ext:["pl","pm"]},{name:"PHP",mimes:["text/x-php","application/x-httpd-php","application/x-httpd-php-open"],mode:"php",ext:["php","php3","php4","php5","php7","phtml"]},{name:"Pig",mime:"text/x-pig",mode:"pig",ext:["pig"]},{name:"Plain Text",mime:"text/plain",mode:"null",ext:["txt","text","conf","def","list","log"]},{name:"PLSQL",mime:"text/x-plsql",mode:"sql",ext:["pls"]},{name:"PowerShell",mime:"application/x-powershell",mode:"powershell",ext:["ps1","psd1","psm1"]},{name:"Properties files",mime:"text/x-properties",mode:"properties",ext:["properties","ini","in"],alias:["ini","properties"]},{name:"ProtoBuf",mime:"text/x-protobuf",mode:"protobuf",ext:["proto"]},{name:"Python",mime:"text/x-python",mode:"python",ext:["BUILD","bzl","py","pyw"],file:/^(BUCK|BUILD)$/},{name:"Puppet",mime:"text/x-puppet",mode:"puppet",ext:["pp"]},{name:"Q",mime:"text/x-q",mode:"q",ext:["q"]},{name:"R",mime:"text/x-rsrc",mode:"r",ext:["r","R"],alias:["rscript"]},{name:"reStructuredText",mime:"text/x-rst",mode:"rst",ext:["rst"],alias:["rst"]},{name:"RPM Changes",mime:"text/x-rpm-changes",mode:"rpm"},{name:"RPM Spec",mime:"text/x-rpm-spec",mode:"rpm",ext:["spec"]},{name:"Ruby",mime:"text/x-ruby",mode:"ruby",ext:["rb"],alias:["jruby","macruby","rake","rb","rbx"]},{name:"Rust",mime:"text/x-rustsrc",mode:"rust",ext:["rs"]},{name:"SAS",mime:"text/x-sas",mode:"sas",ext:["sas"]},{name:"Sass",mime:"text/x-sass",mode:"sass",ext:["sass"]},{name:"Scala",mime:"text/x-scala",mode:"clike",ext:["scala"]},{name:"Scheme",mime:"text/x-scheme",mode:"scheme",ext:["scm","ss"]},{name:"SCSS",mime:"text/x-scss",mode:"css",ext:["scss"]},{name:"Shell",mimes:["text/x-sh","application/x-sh"],mode:"shell",ext:["sh","ksh","bash"],alias:["bash","sh","zsh"],file:/^PKGBUILD$/},{name:"Sieve",mime:"application/sieve",mode:"sieve",ext:["siv","sieve"]},{name:"Slim",mimes:["text/x-slim","application/x-slim"],mode:"slim",ext:["slim"]},{name:"Smalltalk",mime:"text/x-stsrc",mode:"smalltalk",ext:["st"]},{name:"Smarty",mime:"text/x-smarty",mode:"smarty",ext:["tpl"]},{name:"Solr",mime:"text/x-solr",mode:"solr"},{name:"SML",mime:"text/x-sml",mode:"mllike",ext:["sml","sig","fun","smackspec"]},{name:"Soy",mime:"text/x-soy",mode:"soy",ext:["soy"],alias:["closure template"]},{name:"SPARQL",mime:"application/sparql-query",mode:"sparql",ext:["rq","sparql"],alias:["sparul"]},{name:"Spreadsheet",mime:"text/x-spreadsheet",mode:"spreadsheet",alias:["excel","formula"]},{name:"SQL",mime:"text/x-sql",mode:"sql",ext:["sql"]},{name:"SQLite",mime:"text/x-sqlite",mode:"sql"},{name:"Squirrel",mime:"text/x-squirrel",mode:"clike",ext:["nut"]},{name:"Stylus",mime:"text/x-styl",mode:"stylus",ext:["styl"]},{name:"Swift",mime:"text/x-swift",mode:"swift",ext:["swift"]},{name:"sTeX",mime:"text/x-stex",mode:"stex"},{name:"LaTeX",mime:"text/x-latex",mode:"stex",ext:["text","ltx","tex"],alias:["tex"]},{name:"SystemVerilog",mime:"text/x-systemverilog",mode:"verilog",ext:["v","sv","svh"]},{name:"Tcl",mime:"text/x-tcl",mode:"tcl",ext:["tcl"]},{name:"Textile",mime:"text/x-textile",mode:"textile",ext:["textile"]},{name:"TiddlyWiki ",mime:"text/x-tiddlywiki",mode:"tiddlywiki"},{name:"Tiki wiki",mime:"text/tiki",mode:"tiki"},{name:"TOML",mime:"text/x-toml",mode:"toml",ext:["toml"]},{name:"Tornado",mime:"text/x-tornado",mode:"tornado"},{name:"troff",mime:"text/troff",mode:"troff",ext:["1","2","3","4","5","6","7","8","9"]},{name:"TTCN",mime:"text/x-ttcn",mode:"ttcn",ext:["ttcn","ttcn3","ttcnpp"]},{name:"TTCN_CFG",mime:"text/x-ttcn-cfg",mode:"ttcn-cfg",ext:["cfg"]},{name:"Turtle",mime:"text/turtle",mode:"turtle",ext:["ttl"]},{name:"TypeScript",mime:"application/typescript",mode:"javascript",ext:["ts"],alias:["ts"]},{name:"TypeScript-JSX",mime:"text/typescript-jsx",mode:"jsx",ext:["tsx"],alias:["tsx"]},{name:"Twig",mime:"text/x-twig",mode:"twig"},{name:"Web IDL",mime:"text/x-webidl",mode:"webidl",ext:["webidl"]},{name:"VB.NET",mime:"text/x-vb",mode:"vb",ext:["vb"]},{name:"VBScript",mime:"text/vbscript",mode:"vbscript",ext:["vbs"]},{name:"Velocity",mime:"text/velocity",mode:"velocity",ext:["vtl"]},{name:"Verilog",mime:"text/x-verilog",mode:"verilog",ext:["v"]},{name:"VHDL",mime:"text/x-vhdl",mode:"vhdl",ext:["vhd","vhdl"]},{name:"Vue.js Component",mimes:["script/x-vue","text/x-vue"],mode:"vue",ext:["vue"]},{name:"XML",mimes:["application/xml","text/xml"],mode:"xml",ext:["xml","xsl","xsd","svg"],alias:["rss","wsdl","xsd"]},{name:"XQuery",mime:"application/xquery",mode:"xquery",ext:["xy","xquery"]},{name:"Yacas",mime:"text/x-yacas",mode:"yacas",ext:["ys"]},{name:"YAML",mimes:["text/x-yaml","text/yaml"],mode:"yaml",ext:["yaml","yml"],alias:["yml"]},{name:"Z80",mime:"text/x-z80",mode:"z80",ext:["z80"]},{name:"mscgen",mime:"text/x-mscgen",mode:"mscgen",ext:["mscgen","mscin","msc"]},{name:"xu",mime:"text/x-xu",mode:"mscgen",ext:["xu"]},{name:"msgenny",mime:"text/x-msgenny",mode:"mscgen",ext:["msgenny"]}];for(var t=0;t<e.modeInfo.length;t++){var i=e.modeInfo[t];i.mimes&&(i.mime=i.mimes[0])}e.findModeByMIME=function(t){t=t.toLowerCase();for(var i=0;i<e.modeInfo.length;i++){var n=e.modeInfo[i];if(n.mime==t)return n;if(n.mimes)for(var s=0;s<n.mimes.length;s++)if(n.mimes[s]==t)return n}return/\+xml$/.test(t)?e.findModeByMIME("application/xml"):/\+json$/.test(t)?e.findModeByMIME("application/json"):void 0},e.findModeByExtension=function(t){for(var i=0;i<e.modeInfo.length;i++){var n=e.modeInfo[i];if(n.ext)for(var s=0;s<n.ext.length;s++)if(n.ext[s]==t)return n}},e.findModeByFileName=function(t){for(var i=0;i<e.modeInfo.length;i++){var n=e.modeInfo[i];if(n.file&&n.file.test(t))return n}var s=t.lastIndexOf("."),a=s>-1&&t.substring(s+1,t.length);if(a)return e.findModeByExtension(a)},e.findModeByName=function(t){t=t.toLowerCase();for(var i=0;i<e.modeInfo.length;i++){var n=e.modeInfo[i];if(n.name.toLowerCase()==t)return n;if(n.alias)for(var s=0;s<n.alias.length;s++)if(n.alias[s].toLowerCase()==t)return n}}})(i(4))},function(e,t,i){(function(e){"use strict";var t=/^((?:(?:aaas?|about|acap|adiumxtra|af[ps]|aim|apt|attachment|aw|beshare|bitcoin|bolo|callto|cap|chrome(?:-extension)?|cid|coap|com-eventbrite-attendee|content|crid|cvs|data|dav|dict|dlna-(?:playcontainer|playsingle)|dns|doi|dtn|dvb|ed2k|facetime|feed|file|finger|fish|ftp|geo|gg|git|gizmoproject|go|gopher|gtalk|h323|hcp|https?|iax|icap|icon|im|imap|info|ipn|ipp|irc[6s]?|iris(?:\.beep|\.lwz|\.xpc|\.xpcs)?|itms|jar|javascript|jms|keyparc|lastfm|ldaps?|magnet|mailto|maps|market|message|mid|mms|ms-help|msnim|msrps?|mtqp|mumble|mupdate|mvn|news|nfs|nih?|nntp|notes|oid|opaquelocktoken|palm|paparazzi|platform|pop|pres|proxy|psyc|query|res(?:ource)?|rmi|rsync|rtmp|rtsp|secondlife|service|session|sftp|sgn|shttp|sieve|sips?|skype|sm[bs]|snmp|soap\.beeps?|soldat|spotify|ssh|steam|svn|tag|teamspeak|tel(?:net)?|tftp|things|thismessage|tip|tn3270|tv|udp|unreal|urn|ut2004|vemmi|ventrilo|view-source|webcal|wss?|wtai|wyciwyg|xcon(?:-userid)?|xfire|xmlrpc\.beeps?|xmpp|xri|ymsgr|z39\.50[rs]?):(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]|\([^\s()<>]*\))+(?:\([^\s()<>]*\)|[^\s`*!()\[\]{};:'".,<>?«»“”‘’]))/i;e.defineMode("gfm",function(i,n){var s=0;var a={startState:function(){return{code:!1,codeBlock:!1,ateSpace:!1}},copyState:function(e){return{code:e.code,codeBlock:e.codeBlock,ateSpace:e.ateSpace}},token:function(e,i){if(i.combineTokens=null,i.codeBlock)return e.match(/^```+/)?(i.codeBlock=!1,null):(e.skipToEnd(),null);if(e.sol()&&(i.code=!1),e.sol()&&e.match(/^```+/))return e.skipToEnd(),i.codeBlock=!0,null;if("`"===e.peek()){e.next();var a=e.pos;e.eatWhile("`");var o=1+e.pos-a;return i.code?o===s&&(i.code=!1):(s=o,i.code=!0),null}if(i.code)return e.next(),null;if(e.eatSpace())return i.ateSpace=!0,null;if((e.sol()||i.ateSpace)&&(i.ateSpace=!1,!1!==n.gitHubSpice)){if(e.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+@)?(?=.{0,6}\d)(?:[a-f0-9]{7,40}\b)/))return i.combineTokens=!0,"link";if(e.match(/^(?:[a-zA-Z0-9\-_]+\/)?(?:[a-zA-Z0-9\-_]+)?#[0-9]+\b/))return i.combineTokens=!0,"link"}return e.match(t)&&"]("!=e.string.slice(e.start-2,e.start)&&(0==e.start||/\W/.test(e.string.charAt(e.start-1)))?(i.combineTokens=!0,"link"):(e.next(),null)},blankLine:function(e){return e.code=!1,null}},o={taskLists:!0,strikethrough:!0,emoji:!0};for(var r in n)o[r]=n[r];return o.name="markdown",e.overlayMode(e.getMode(i,o),a)},"markdown"),e.defineMIME("text/x-gfm","gfm")})(i(4),i(182),i(603))},function(e,t,i){(function(e){"use strict";e.overlayMode=function(t,i,n){return{startState:function(){return{base:e.startState(t),overlay:e.startState(i),basePos:0,baseCur:null,overlayPos:0,overlayCur:null,streamSeen:null}},copyState:function(n){return{base:e.copyState(t,n.base),overlay:e.copyState(i,n.overlay),basePos:n.basePos,baseCur:null,overlayPos:n.overlayPos,overlayCur:null}},token:function(e,s){return(e!=s.streamSeen||Math.min(s.basePos,s.overlayPos)<e.start)&&(s.streamSeen=e,s.basePos=s.overlayPos=e.start),e.start==s.basePos&&(s.baseCur=t.token(e,s.base),s.basePos=e.pos),e.start==s.overlayPos&&(e.pos=e.start,s.overlayCur=i.token(e,s.overlay),s.overlayPos=e.pos),e.pos=Math.min(s.basePos,s.overlayPos),null==s.overlayCur?s.baseCur:null!=s.baseCur&&s.overlay.combineTokens||n&&null==s.overlay.combineTokens?s.baseCur+" "+s.overlayCur:s.overlayCur},indent:t.indent&&function(e,i){return t.indent(e.base,i)},electricChars:t.electricChars,innerMode:function(e){return{state:e.base,mode:t}},blankLine:function(e){var s,a;return t.blankLine&&(s=t.blankLine(e.base)),i.blankLine&&(a=i.blankLine(e.overlay)),null==a?s:n&&null!=s?s+" "+a:a}}}})(i(4))},function(e,t,i){(function(e){"use strict";function t(e){for(var t={},i=e.split(" "),n=0;n<i.length;++n)t[i[n]]=!0;return t}function i(e,t,s){return 0==e.length?n(t):function(a,o){for(var r=e[0],l=0;l<r.length;l++)if(a.match(r[l][0]))return o.tokenize=i(e.slice(1),t),r[l][1];return o.tokenize=n(t,s),"string"}}function n(e,t){return function(n,s){return function(e,t,n,s){if(!1!==s&&e.match("${",!1)||e.match("{$",!1))return t.tokenize=null,"string";if(!1!==s&&e.match(/^\$[a-zA-Z_][a-zA-Z0-9_]*/))return e.match("[",!1)&&(t.tokenize=i([[["[",null]],[[/\d[\w\.]*/,"number"],[/\$[a-zA-Z_][a-zA-Z0-9_]*/,"variable-2"],[/[\w\$]+/,"variable"]],[["]",null]]],n,s)),e.match(/\-\>\w/,!1)&&(t.tokenize=i([[["->",null]],[[/[\w]+/,"variable"]]],n,s)),"variable-2";var a=!1;for(;!e.eol()&&(a||!1===s||!e.match("{$",!1)&&!e.match(/^(\$[a-zA-Z_][a-zA-Z0-9_]*|\$\{)/,!1));){if(!a&&e.match(n)){t.tokenize=null,t.tokStack.pop(),t.tokStack.pop();break}a="\\"==e.next()&&!a}return"string"}(n,s,e,t)}}var s="abstract and array as break case catch class clone const continue declare default do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final for foreach function global goto if implements interface instanceof namespace new or private protected public static switch throw trait try use var while xor die echo empty exit eval include include_once isset list require require_once return print unset __halt_compiler self static parent yield insteadof finally",a="true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__ __TRAIT__",o="func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex hex2bin sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents file_put_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists array_intersect_key array_combine array_column pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport http_response_code get_declared_traits getimagesizefromstring socket_import_stream stream_set_chunk_size trait_exists header_register_callback class_uses session_status session_register_shutdown echo print global static exit array empty eval isset unset die include require include_once require_once json_decode json_encode json_last_error json_last_error_msg curl_close curl_copy_handle curl_errno curl_error curl_escape curl_exec curl_file_create curl_getinfo curl_init curl_multi_add_handle curl_multi_close curl_multi_exec curl_multi_getcontent curl_multi_info_read curl_multi_init curl_multi_remove_handle curl_multi_select curl_multi_setopt curl_multi_strerror curl_pause curl_reset curl_setopt_array curl_setopt curl_share_close curl_share_init curl_share_setopt curl_strerror curl_unescape curl_version mysqli_affected_rows mysqli_autocommit mysqli_change_user mysqli_character_set_name mysqli_close mysqli_commit mysqli_connect_errno mysqli_connect_error mysqli_connect mysqli_data_seek mysqli_debug mysqli_dump_debug_info mysqli_errno mysqli_error_list mysqli_error mysqli_fetch_all mysqli_fetch_array mysqli_fetch_assoc mysqli_fetch_field_direct mysqli_fetch_field mysqli_fetch_fields mysqli_fetch_lengths mysqli_fetch_object mysqli_fetch_row mysqli_field_count mysqli_field_seek mysqli_field_tell mysqli_free_result mysqli_get_charset mysqli_get_client_info mysqli_get_client_stats mysqli_get_client_version mysqli_get_connection_stats mysqli_get_host_info mysqli_get_proto_info mysqli_get_server_info mysqli_get_server_version mysqli_info mysqli_init mysqli_insert_id mysqli_kill mysqli_more_results mysqli_multi_query mysqli_next_result mysqli_num_fields mysqli_num_rows mysqli_options mysqli_ping mysqli_prepare mysqli_query mysqli_real_connect mysqli_real_escape_string mysqli_real_query mysqli_reap_async_query mysqli_refresh mysqli_rollback mysqli_select_db mysqli_set_charset mysqli_set_local_infile_default mysqli_set_local_infile_handler mysqli_sqlstate mysqli_ssl_set mysqli_stat mysqli_stmt_init mysqli_store_result mysqli_thread_id mysqli_thread_safe mysqli_use_result mysqli_warning_count";e.registerHelper("hintWords","php",[s,a,o].join(" ").split(" ")),e.registerHelper("wordChars","php",/[\w$]/);var r={name:"clike",helperType:"php",keywords:t(s),blockKeywords:t("catch do else elseif for foreach if switch try while finally"),defKeywords:t("class function interface namespace trait"),atoms:t(a),builtin:t(o),multiLineStrings:!0,hooks:{$:function(e){return e.eatWhile(/[\w\$_]/),"variable-2"},"<":function(e,t){var i;if(i=e.match(/<<\s*/)){var s=e.eat(/['"]/);e.eatWhile(/[\w\.]/);var a=e.current().slice(i[0].length+(s?2:1));if(s&&e.eat(s),a)return(t.tokStack||(t.tokStack=[])).push(a,0),t.tokenize=n(a,"'"!=s),"string"}return!1},"#":function(e){for(;!e.eol()&&!e.match("?>",!1);)e.next();return"comment"},"/":function(e){if(e.eat("/")){for(;!e.eol()&&!e.match("?>",!1);)e.next();return"comment"}return!1},'"':function(e,t){return(t.tokStack||(t.tokStack=[])).push('"',0),t.tokenize=n('"'),"string"},"{":function(e,t){return t.tokStack&&t.tokStack.length&&t.tokStack[t.tokStack.length-1]++,!1},"}":function(e,t){return t.tokStack&&t.tokStack.length>0&&!--t.tokStack[t.tokStack.length-1]&&(t.tokenize=n(t.tokStack[t.tokStack.length-2])),!1}}};e.defineMode("php",function(t,i){var n=e.getMode(t,i&&i.htmlMode||"text/html"),s=e.getMode(t,r);return{startState:function(){var t=e.startState(n),a=i.startOpen?e.startState(s):null;return{html:t,php:a,curMode:i.startOpen?s:n,curState:i.startOpen?a:t,pending:null}},copyState:function(t){var i,a=t.html,o=e.copyState(n,a),r=t.php,l=r&&e.copyState(s,r);return i=t.curMode==n?o:l,{html:o,php:l,curMode:t.curMode,curState:i,pending:t.pending}},token:function(t,i){var a=i.curMode==s;if(t.sol()&&i.pending&&'"'!=i.pending&&"'"!=i.pending&&(i.pending=null),a)return a&&null==i.php.tokenize&&t.match("?>")?(i.curMode=n,i.curState=i.html,i.php.context.prev||(i.php=null),"meta"):s.token(t,i.curState);if(t.match(/^<\?\w*/))return i.curMode=s,i.php||(i.php=e.startState(s,n.indent(i.html,""))),i.curState=i.php,"meta";if('"'==i.pending||"'"==i.pending){for(;!t.eol()&&t.next()!=i.pending;);var o="string"}else i.pending&&t.pos<i.pending.end?(t.pos=i.pending.end,o=i.pending.style):o=n.token(t,i.curState);i.pending&&(i.pending=null);var r,l=t.current(),c=l.search(/<\?/);return-1!=c&&("string"==o&&(r=l.match(/[\'\"]$/))&&!/\?>/.test(l)?i.pending=r[0]:i.pending={end:t.pos,style:o},t.backUp(l.length-c)),o},indent:function(e,t){return e.curMode!=s&&/^\s*<\//.test(t)||e.curMode==s&&/^\?>/.test(t)?n.indent(e.html,t):e.curMode.indent(e.curState,t)},blockCommentStart:"/*",blockCommentEnd:"*/",lineComment:"//",innerMode:function(e){return{state:e.curState,mode:e.curMode}}}},"htmlmixed","clike"),e.defineMIME("application/x-httpd-php","php"),e.defineMIME("application/x-httpd-php-open",{name:"php",startOpen:!0}),e.defineMIME("text/x-php",r)})(i(4),i(179),i(183))},function(e,t){e.exports=' <div class=markdown-fieldtype-wrapper :class="{\'markdown-fullscreen\': fullScreenMode}"> <div class="markdown-toolbar clearfix"> <ul class=markdown-modes> <li :class="{ \'active\': mode == \'write\' }"> <a href="" @click.prevent="mode = \'write\'" tabindex=-1>{{ translate(\'cp.write\') }}</a> </li> <li :class="{ \'active\': mode == \'preview\' }"> <a href="" @click.prevent="mode = \'preview\'" tabindex=-1>{{ translate(\'cp.preview\') }}</a> </li> </ul> <ul class=markdown-buttons> <li><a @click=bold tabindex=-1><b>B</b></a></li> <li><a @click=italic tabindex=-1><i>i</i></a></li> <li><a @click="insertLink(\'\')" tabindex=-1> <span class="icon icon-link"></span> </a></li> <li><a @click="insertImage(\'\')" tabindex=-1> <span class="icon icon-image"></span> </a></li> <li><a @click=toggleFullScreen tabindex=-1> <span class=icon :class="{\n                    \'icon-resize-full-screen\' : ! fullScreenMode,\n                    \'icon-resize-100\' : fullScreenMode\n                    }"></span> </a></li> </ul> </div> <div class="mode-wrap mode-{{ mode }}"> <div class=markdown-writer v-el:writer v-show="mode == \'write\'" @dragover="draggingFile = true" @dragleave="draggingFile = false" @drop="draggingFile = false" @keydown=shortcut> <div class=editor v-el:codemirror></div> <div class=helpers v-if="cheatsheet || assetsEnabled"> <div class=markdown-cheatsheet-helper v-if=cheatsheet> <a href="" @click.prevent="showCheatsheet = true"> <svg xmlns=http://www.w3.org/2000/svg width=208 height=128 viewBox="0 0 208 128"><mask id=a><rect width=100% height=100% fill=#fff /><path d="M30 98v-68h20l20 25 20-25h20v68h-20v-39l-20 25-20-25v39zM155 98l-30-33h20v-35h20v35h20z"/></mask><rect width=100% height=100% ry=15 mask=url(#a) /></svg> {{ translate(\'cp.markdown_cheatsheet\') }} </a> </div> <div class=markdown-asset-helper v-if=assetsEnabled> <a href="" @click.prevent=addAsset><span class="icon icon-image"></span> {{ translate(\'cp.add_asset\') }}</a> (or drag &amp; drop) </div> </div> <div class=drag-notification v-if="assetsEnabled && draggingFile"> <i class="icon icon-download"></i> <h3>{{ translate(\'cp.drop_to_upload\') }}</h3> </div> </div> <div v-show="mode == \'preview\'" v-html="data || \'\' | markdown" class=markdown-preview></div> </div> <selector v-if=showAssetSelector :container=container :folder=folder :selected=selectedAssets :restrict-navigation=restrictAssetNavigation @selected=assetsSelected @closed=closeAssetSelector></selector> <uploader v-ref:uploader v-if="! showAssetSelector" :dom-element=uploadElement :container=container :path=folder @upload-complete=uploadComplete> </uploader> <modal :show.sync=showCheatsheet class=markdown-modal> <template slot=header>{{ translate(\'cp.markdown_cheatsheet\') }}</template> <template slot=body> {{{ translate(\'markdown.cheatsheet\') }}} </template> </modal> </div> '},function(e,t,i){var n,s={};n=i(607),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5),s=i.n(n);t.default={mixins:[s.a]}},function(e,t,i){var n,s,a={};n=i(609),s=i(610),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],methods:{focus:function(){document.getElementById(this.name+"-0").focus()},getReplicatorPreviewText:function(){var t=e.findWhere(this.config.options,{value:this.data});return t?t.text:this.data}}}}.call(t,i(1))},function(e,t){e.exports=" <div class=radio-fieldtype-wrapper> <ul :class=\"[\n        'list-unstyled',\n        config.inline ? 'list-inline mb-0' : ''\n    ]\"> <li v-for=\"option in config.options\" :class=\"{ 'mb-0 mr-2': config.inline }\"> <input type=radio v-model=data :value=option.value :id=\"name + '-' + $index\"/> <label :for=\"name + '-' + $index\">{{ option.text }}</label> </li> </ul> </div> "},function(e,t,i){var n,s,a={};n=i(612),s=i(613),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(176);t.default={components:{selector:i(11)},mixins:[s.a,Fieldtype],data:function(){return{mode:"write"}},methods:{update:function(e){this.data=e},insertLink:function(t,i){var n=e(this.$els.redactor).redactor("selection.getHtml");n&&(i=n),e(this.$els.redactor).redactor("insert.html",'<a href="'+t+'">'+i+"</a>")},insertImage:function(t,i){e(this.$els.redactor).redactor("insert.html",'<img src="'+t+'" alt="'+i+'" />')},appendImage:function(t,i){var n=e(this.$els.redactor),s=n.redactor("code.get");n.redactor("code.set",s+'<img src="'+t+'" alt="'+i+'" />')},appendLink:function(t,i){var n=e(this.$els.redactor),s=n.redactor("code.get");n.redactor("code.set",s+'<a href="'+t+'">'+i+"</a>")},assetsSelected:function(t){var i=this,s=e(i.$els.redactor);s.redactor("selection.restore");var a=s.redactor("selection.getHtml"),o=s.redactor("code.get");t.length>1&&s.redactor("focus.setEnd"),this.$http.post(cp_url("assets/get"),{assets:t},function(e){n(e).each(function(e){var n=e.url,r=e.alt||"",l=(e.title===e.filename?null:e.title)||e.alt||e.basename;1===t.length?e.is_image?i.insertImage(n,r):i.insertLink(n,a||l):(e.is_image?o+='<img src="'+n+'" alt="'+r+'" />':o+='<a href="'+n+'">'+l+"</a>",s.redactor("code.set",o))})}),this.closeAssetSelector(),this.selectedAssets=[]},getReplicatorPreviewText:function(){return this.data?e(this.$els.redactor).redactor("clean.getTextFromHtml",this.data).replace(/\n/g," "):""},focus:function(){e(this.$els.redactor).redactor("focus.setEnd")},getFieldtypeConfig:function(){return this.config}},ready:function(){var t=this,i={minHeight:250,changeCallback:function(){t.update(this.code.get())}};if(this.config.settings&&"string"!=typeof this.config.settings&&console.warn("Redactor Fieldtype: You must reference the settings name instead of adding them inline."),n.has(Statamic.redactorSettings,this.config.settings))var s=Statamic.redactorSettings[this.config.settings];else s=Statamic.redactorSettings[n.first(n.keys(Statamic.redactorSettings))];var a=n.extend(i,s);a.plugins=a.plugins||[],this.assetsEnabled&&a.plugins.push("assets"),e(this.$els.redactor).redactor(a)}}}.call(t,i(2),i(1))},function(e,t){e.exports=" <div class=redactor-fieldtype-wrapper> <textarea v-el:redactor :name=name v-model=data></textarea> <selector v-if=showAssetSelector :container=container :folder=folder :selected=selectedAssets :restrict-navigation=restrictAssetNavigation @selected=assetsSelected @closed=closeAssetSelector></selector> </div> "},function(e,t,i){var n,s,a={};n=i(615),s=i(616),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","name","config"],computed:{selectConfig:function(){var t=[{value:null,text:""}];return e.each(Statamic.redactorSettings,function(e,i){t.push({value:i,text:i})}),{options:t}}}}}.call(t,i(1))},function(e,t){e.exports=" <div class=redactor-settings-wrapper> <select-fieldtype :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> "},function(e,t,i){var n,s,a={};n=i(618),s=i(625),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var n=i(619),s=i.n(n),a=i(622),o=i.n(a),r=i(185);t.default={mixins:[Fieldtype,r.a],components:{"relate-panes":s.a,"relate-tags":o.a},props:["suggestionsProp","disabled"],data:function(){return{loading:!0,suggestions:[],autoBindChangeWatcher:!1,shouldFocusWhenLoaded:!1}},computed:{single:function(){return this.maxItems&&1===this.maxItems},maxItems:function(){return parseInt(this.config.max_items)},mode:function(){return this.config.mode||"tags"},panes:function(){return"panes"===this.mode},tags:function(){return"tags"===this.mode},canCreate:function(){return this.config.create}},methods:{getSuggestions:function(){if(this.suggestionsProp)this.populateSuggestions(this.suggestionsProp);else{var e=data_get(Statamic,"Publish.suggestions."+this.suggestKey);e?this.populateSuggestions(e):this.$http.post(cp_url("addons/suggest/suggestions"),this.config,function(e){this.populateSuggestions(e)})}},populateSuggestions:function(e){var t=this;this.suggestions=e,this.removeInvalidData(),this.loading=!1,this.bindChangeWatcher(),this.shouldFocusWhenLoaded&&this.$nextTick(function(){return t.focus()})},removeInvalidData:function(){var t=this;t.single?e.findWhere(t.suggestions,{value:t.data[0]})||(t.data=null):t.data=e.filter(t.data,function(i){return e.findWhere(t.suggestions,{value:i})})},getReplicatorPreviewText:function(){var t=this;if(this.data){var i=JSON.parse(JSON.stringify(this.data));return this.suggestions&&(i=i.map(function(i){var n=e.findWhere(t.suggestions,{value:i});return n?n.text:i})),i.join(", ")}},focus:function(){this.loading?this.shouldFocusWhenLoaded=!0:(this.$refs[this.mode].focus(),this.shouldFocusWhenLoaded=!1)}},ready:function(){this.data||(this.data=[]),this.config||(this.config=[]),this.getSuggestions(),this.$watch("suggestionsProp",function(e){this.suggestions=e})}}}.call(t,i(1))},function(e,t,i){var n,s,a={};n=i(620),s=i(621),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={props:["name","data","suggestions","maxItems"],data:function(){return{search:null,active:-1}},computed:{availableSuggestions:function(){var t=this;return e.reject(t.suggestions,function(i){var n=e.contains(t.data,i.value),s=!0;return t.search&&(s=-1!==i.text.toLowerCase().indexOf(t.search.toLowerCase())),n||!s})},selected:function(){var t=this;return e.map(t.data,function(i){return e.findWhere(t.suggestions,{value:i})})},maxSelected:function(){return!!this.maxItems&&this.data.length>=this.maxItems}},methods:{initSortable:function(){var e=this;i(this.$els.sortable).sortable({axis:"y",placeholder:"item-placeholder",forcePlaceholderSize:!0,revert:175,start:function(e,t){t.item.data("start",t.item.index())},update:function(t,i){var n=i.item.data("start"),s=i.item.index();e.data.splice(s,0,e.data.splice(n,1)[0])}})},select:function(e){this.maxSelected||this.data.push(e.value)},remove:function(t){var i=e.indexOf(this.data,t.value);this.data.splice(i,1)},goUp:function(){this.active--,this.active<0&&(this.active=0)},goDown:function(){this.active++,this.active>=this.availableSuggestions.length-1&&(this.active=this.availableSuggestions.length-1)},selectActive:function(){var e=this.availableSuggestions[this.active];this.select(e),this.active>=this.availableSuggestions.length&&(this.active=this.availableSuggestions.length-1)},focus:function(){this.$els.filter.focus()}},ready:function(){this.initSortable(),this.$watch("search",function(){this.availableSuggestions.length<=this.active&&(this.active=this.availableSuggestions.length-1)}),this.$watch("data",function(){this.$nextTick(function(){i(this.$els.sortable).sortable("refresh")})})}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class="relate-panes clearfix" :class="{ \'max-selected\': maxSelected }"> <div class="relate-pane pane-suggestions"> <div class=pane-header> <input type=text class="form-control relate-search" placeholder=Filter v-el:filter v-model=search @keydown.enter=selectActive @keyup.up=goUp @keyup.down=goDown /> </div> <div class=relate-items> <div class=item v-for="item in availableSuggestions" :class="{ \'active\': $index === active }" @click.prevent=select(item)> {{{ item.text }}} <span class="icon icon-chevron-right"></span> </div> </div> </div> <div class="relate-pane pane-selections"> <div class=pane-header>Selected</div> <div class=relate-items v-el:sortable> <div class=item v-for="item in selected"> <span class=item-remove @click.prevent=remove(item)>&times;</span> {{{ item.text }}} </div> </div> </div> <input type=hidden :name=name :value="data | json"/> </div> '},function(e,t,i){var n,s,a={};n=i(623),s=i(624),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","suggestions","maxItems","create","name","disabled"],ready:function(){var t=this;"string"==typeof this.data&&(this.data=[this.data]),e(this.$els.tags).selectize({options:this.suggestions,items:this.data,maxItems:this.maxItems,plugins:["drag_drop","remove_button"],onChange:function(e){t.data=e},create:this.create}),this.disabled&&this.$els.tags.selectize.disable()},methods:{focus:function(){this.$els.tags.selectize.focus()}}}}.call(t,i(2))},function(e,t){e.exports=" <select v-el:tags multiple=multiple tabindex=0></select> <input type=hidden :name=name :value=data|json class=form-control /> "},function(e,t){e.exports=' <div class=relate-fieldtype> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <relate-tags v-if="!loading && (tags || single)" v-ref:tags :data.sync=data :suggestions=suggestions :max-items=maxItems :create=canCreate :name=name :disabled=disabled> </relate-tags> <relate-panes v-if="!loading && panes && !single" v-ref:panes :data.sync=data :suggestions=suggestions :max-items=maxItems :name=name> </relate-panes> </div> '},function(e,t,i){var n,s,a={};n=i(627),s=i(631),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(173);t.default={mixins:[s.a,Fieldtype],components:{ReplicatorSet:i(628)},data:function(){return{blank:{},sortableOptions:{},autoBindChangeWatcher:!1,changeWatcherWatchDeep:!1,accordionMode:!0}},computed:{hasData:function(){return null!==this.data&&this.data.length}},ready:function(){this.data||(this.data=[]),this.bindChangeWatcher(),this.sortable()},methods:{sortable:function(){var t=this,i="";e(this.$el).children(".replicator-sets").sortable({axis:"y",revert:175,placeholder:"stacked-placeholder",handle:".drag-handle",forcePlaceholderSize:!0,start:function(e,t){i=t.item.index(),t.placeholder.height(t.item.height())},update:function(e,n){var s=n.item.index(),a=JSON.parse(JSON.stringify(t.data));a.splice(s,0,a.splice(i,1)[0]),t.data=a}})},addSet:function(e,t){var i=this,s={type:e},a=this.setConfig(e);n.each(a.fields,function(e){s[e.name]=e.default||Statamic.fieldtypeDefaults[e.type]||null}),void 0===t&&(t=this.data.length),this.data.splice(t,0,s),this.accordionMode&&this.collapseAllExcept(t),this.sortable(),this.$nextTick(function(){return i.$refs.set[t].focus()})},collapseAllExcept:function(e){n.map(this.$refs.set,function(t){t.index!==e&&t.collapse()})},setExpanded:function(e,t){window.dispatchEvent(new Event("resize")),t||this.accordionMode&&this.collapseAllExcept(e.index)},getReplicatorPreviewText:function(){return n.map(this.$refs.set,function(e){return e.collapsedPreview}).join(", ")}}}}.call(t,i(2),i(1))},function(e,t,i){var n,s,a={};n=i(629),s=i(630),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(174);t.default={mixins:[n.a]}},function(e,t){e.exports=' <div class=list-group> <div class="list-group-item group-header pl-3 drag-handle" :class="{\'collapsed\': isHidden}" v-on:dblclick=toggle> <div class=flexy> <div class=fill> <div class="flexy baseline"> <label @click=toggle class=clickable>{{ display }}</label> <div v-if=isHidden> <small class="replicator-set-summary fill" v-html=collapsedPreview></small> </div> </div> <small class=help-block v-if="instructions && !isHidden" v-html="instructions | markdown"></small> </div> <div class="btn-group icon-group action-more"> <button type=button class="btn-more dropdown-toggle" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <i class="icon icon-dots-three-vertical"></i> </button> <ul class=dropdown-menu> <slot name=expand-collapse></slot> <li class=warning><a @click=delete>{{ translate(\'cp.delete_set\') }}</a></li> <li class=divider></li> <slot name=add-sets></slot> </ul> </div> </div> </div> <div class="list-group-item p-0" v-show=!isHidden> <div class=publish-fields> <div v-for="field in config.fields" :class=fieldClasses(field)> <label class=block v-if=hasMultipleFields :class="{\'bold\': field.bold}"> <template v-if=field.display>{{ field.display }}</template> <template v-if=!field.display>{{ field.name | capitalize }}</template> <i class=required v-if=field.required>*</i> </label> <small class=help-block v-if=field.instructions v-html="field.instructions | markdown"></small> <component :is=componentName(field.type) :name="parentName + \'.\' + index + \'.\' + field.name" :data.sync=data[field.name] :config=field> </component> </div> </div> </div> </div> '},function(e,t){e.exports=' <div class="replicator replicator-fieldtype-wrapper relative"> <div class=replicator-sets> <replicator-set v-for="(index, set) in data" v-ref:set :parent-name=name :data=set :index=index :config=setConfig(set.type) @deleted=deleteSet @expanded=setExpanded> <template slot=expand-collapse> <li><a @click=collapseAll>{{ translate(\'cp.collapse_all\') }}</a></li> <li><a @click=expandAll>{{ translate(\'cp.expand_all\') }}</a></li> </template> <template slot=add-sets> <li v-for="setConfig in config.sets"> <a @click.prevent="addSet(setConfig.name, index + 1)"> <i class="icon icon-add-to-list"></i> {{ setConfig.display || setConfig.name }} </a> </li> </template> </replicator-set> </div> <button type=button class="btn btn-default mr-8 mb-8" v-for="set in config.sets" v-on:click=addSet(set.name) v-tip :tip-text=set.instructions> {{ set.display || set.name }}<i class="icon icon-plus icon-right"></i> </button> </div> '},function(e,t,i){var n,s,a={};n=i(633),s=i(634),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype],computed:{isRevealed:function(){return!0===this.data}},methods:{reveal:function(){this.data=!0}}}},function(e,t){e.exports=' <div> <button v-if="! isRevealed" @click=reveal class=btn v-tip :tip-text=config.instructions>{{ config.display }}</button> </div> '},function(e,t,i){var n,s,a={};n=i(636),s=i(637),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name"],data:function(){return{gridConfig:{add_row:translate("cp.add_locale"),fields:[{name:"locale",type:"text",display:translate("cp.locale"),width:"20"},{name:"route",type:"text",display:translate("cp.route")}]}}}}},function(e,t){e.exports=' <div class=routes-fieldtype-wrapper> <grid-fieldtype :data=data :config=gridConfig></grid-fieldtype> <input type=hidden :name=name :value="data | json"/> </div> '},function(e,t,i){var n,s={};n=i(639),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var a="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;a.computed||(a.computed={}),Object.keys(s).forEach(function(e){var t=s[e];a.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["name","data","config"]}},function(e,t,i){var n,s,a={};n=i(641),s=i(642),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],props:["options"],data:function(){return{keyed:!1,selectOptions:[],isActive:!1}},ready:function(){this.options?this.selectOptions=this.options:this.selectOptions=this.config.options},computed:{label:function(){var t=parseInt(this.data),i=isNaN(t)?this.data:t,n=e.findWhere(this.selectOptions,{value:i});return n?n.text:this.data}},methods:{focus:function(){this.$els.select.focus()},getReplicatorPreviewText:function(){return this.label}}}}.call(t,i(1))},function(e,t){e.exports=' <div class="select select-full" :class="{ \'select--active\': isActive }" :data-content=label> <select v-el:select :name=name v-model=data tabindex=0 @focus="isActive = true" @blur="isActive = false"> <option v-for="option in selectOptions" :value=option.value>{{ option.text }}</option> </select> </div> '},function(e,t,i){var n,s,a={};n=i(644),s=i(645),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["selected","translations"],data:function(){return{options:[{text:"Live",value:"live"},{text:"Hidden",value:"hidden"},{text:"Draft",value:"draft"}]}}}},function(e,t){e.exports=' <div class="select select-full" data-content="{{ selected | capitalize }}"> <span class="status status-{{ selected }}"></span> <select name=status v-model=selected options=options></select> </div> '},function(e,t,i){var n,s,a={};n=i(647),s=i(648),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(185);t.default={mixins:[Fieldtype,s.a],props:["suggestionsProp"],data:function(){return{loading:!0,suggestions:[]}},methods:{getSuggestions:function(){if(this.suggestionsProp)this.populateSuggestions(this.suggestionsProp);else{var e=data_get(Statamic,"Publish.suggestions."+this.suggestKey);e?this.populateSuggestions(e):this.$http.post(cp_url("addons/suggest/suggestions"),this.config,function(e){this.populateSuggestions(e)})}},populateSuggestions:function(t){if(this.suggestions=t,this.data){var i=[];e.each(this.data,function(e,t,n){i.push({value:e,text:e})}),this.suggestions=e.union(t,i)}this.loading=!1,this.$nextTick(function(){this.initSelectize()})},initSelectize:function(){var t=this,i={options:this.suggestions,items:this.data,create:this.config.create||!1,maxItems:this.config.max_items,placeholder:this.config.placeholder,plugins:["drag_drop","remove_button"],onChange:function(e){t.data=e}},s=e.chain(this.suggestions).pluck("optgroup").unique().filter().map(function(e){return{value:e,label:e}}).value();s.length&&(i.optgroups=s),n(this.$el).find("select").selectize(i)},getReplicatorPreviewText:function(){var t=this;if(this.data){var i=JSON.parse(JSON.stringify(this.data));return this.suggestions&&(i=i.map(function(i){var n=e.findWhere(t.suggestions,{value:i});return n?n.text:i})),i.join(", ")}}},ready:function(){this.getSuggestions()}}}.call(t,i(1),i(2))},function(e,t){e.exports=' <div class=suggest-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select v-if=!loading :name=name :placeholder="translate(\'cp.please_select\')" :multiple=true> </select> </div> '},function(e,t,i){var n,s,a={};n=i(650),s=i(651),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,i){t.default={mixins:[Fieldtype],data:function(){return{max_rows:this.config.max_rows||null,max_columns:this.config.max_columns||null,autoBindChangeWatcher:!1,sortableInitialized:!1}},computed:{columnCount:function(){return this.data&&this.data[0]?this.data[0].cells.length:0},rowCount:function(){return this.data&&this.data.length?this.data.length:0},canAddRows:function(){return!this.max_rows||this.rowCount<this.max_rows},canAddColumns:function(){return!(!this.rowCount&&!this.columnCount)&&(!this.max_columns||this.columnCount<this.max_columns)}},methods:{sortable:function(){if(!this.sortableInitialized&&0!==this.data.length){var t=this,i="";e(this.$el).find("tbody").sortable({axis:"y",revert:175,handle:".drag-handle",placeholder:"table-row-placeholder",forcePlaceholderSize:!0,start:function(e,t){i=t.item.index(),t.placeholder.height(t.item.height())},update:function(e,n){var s=n.item.index(),a=t.data.splice(i,1)[0];t.data.splice(s,0,a)}}),this.sortableInitialized=!0}},destroySortable:function(){e(this.$el).find("tbody").sortable("destroy"),this.sortableInitialized=!1},addRow:function(){var e=0===this.columnCount?1:this.columnCount;this.data.push({cells:new Array(e)})},addColumn:function(){for(var e=this.data.length,t=0;t<e;t++)this.data[t].cells.push("")},deleteRow:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){t.data.splice(e,1)})},deleteColumn:function(e){var t=this;swal({type:"warning",title:translate("cp.are_you_sure"),text:translate_choice("cp.confirm_delete_items",1),confirmButtonText:translate("cp.yes_im_sure"),cancelButtonText:translate("cp.cancel"),showCancelButton:!0},function(){for(var i=t.data.length,n=0;n<i;n++)t.data[n].cells.splice(e,1)})},getReplicatorPreviewText:function(){return i(this.data).map(function(e){return e.cells.filter(function(e){return!!e}).join(", ")}).filter(function(e){return!!e}).join(", ")}},ready:function(){this.data||(this.data=[]),this.bindChangeWatcher(),this.sortable()},watch:{data:function(e){var t=this;this.$nextTick(function(){t.data.length?t.sortable():t.destroySortable()})}}}}.call(t,i(2),i(1))},function(e,t){e.exports=' <div class=table-field> <table class=bordered-table v-if="rowCount || columnCount"> <thead> <tr> <th v-for="column in columnCount"> <span class=column-count>{{ $index + 1 }}</span> <span class="icon icon-cross delete-column" @click=deleteColumn($index)></span> </th> <th class=row-controls></th> </tr> </thead> <tbody> <tr v-for="row in data"> <td v-for="cell in row.cells" track-by=$index> <input type=text v-model=cell class=form-control /> </td> <td class=row-controls> <span class="icon icon-menu move drag-handle"></span> <span class="icon icon-cross delete" v-on:click=deleteRow($index)></span> </td> </tr> </tbody> </table> <div class=btn-group> <a class="btn btn-default" @click=addRow v-if=canAddRows> {{ translate_choice(\'cp.rows\', 1) }} <i class="icon icon-plus icon-right"></i> </a> <a class="btn btn-default" @click=addColumn v-if=canAddColumns> {{ translate_choice(\'cp.columns\', 1) }} <i class="icon icon-plus icon-right"></i> </a> </div> </div> '},function(e,t,i){var n,s,a={};n=i(653),s=i(654),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],ready:function(){var t=this;e(this.$els.tags).selectize({delimiter:",",persist:!1,plugins:["drag_drop","remove_button"],create:function(e){return{value:e,text:e}},onChange:function(e){t.data=e.split(",")},onItemRemove:function(e){delete this.options[e]}})},methods:{focus:function(){this.$els.tags.selectize.focus()}}}}.call(t,i(2))},function(e,t){e.exports=" <div class=tag-fieldtype-wrapper> <input type=text v-el:tags :value=data /> </div> "},function(e,t,i){var n,s,a={};n=i(656),s=i(657),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5),s=i.n(n);t.default={mixins:[s.a],computed:{adjustedConfig:function(){var e=this.config;return void 0===e.create&&(e.create=!0),"string"!=typeof this.config.taxonomy&&(e.create=!1),e}}}},function(e,t){e.exports=" <div> <relate-fieldtype :data.sync=data :name=name :config=adjustedConfig v-ref:relate></relate-fieldtype> </div> "},function(e,t,i){var n,s,a={};n=i(659),s=i(660),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","config","name"],data:function(){return{loading:!0,options:{}}},computed:{selectConfig:function(){return{options:this.options}}},ready:function(){this.$http.get(cp_url("system/templates/get"),function(t){var i=[{value:null,text:""}];e.each(t,function(e){i.push({value:e,text:e})}),this.options=i,this.loading=!1})}}}.call(t,i(1))},function(e,t){e.exports=' <div> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if=!loading :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var n,s,a={};n=i(662),s=i(663),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype,AutoSlug],props:["autofocus"],data:function(){return{mode:this.config.mode||"text"}},computed:{classes:function(){return"form-control type-"+this.mode}},ready:function(){this.config.autoslug&&this.autoSlug(this.config.autoslug)}}},function(e,t){e.exports=" <input :type=mode :class=classes v-model=data tabindex=0 :autofocus=autofocus :placeholder=config.placeholder /> "},function(e,t,i){var n,s,a={};n=i(665),s=i(666),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype]}},function(e,t){e.exports=" <textarea class=form-control v-model=data v-el:textarea v-elastic :placeholder=config.placeholder></textarea> "},function(e,t,i){var n,s,a={};n=i(668),s=i(669),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:["data","config","name"],data:function(){return{loading:!0,options:{}}},computed:{selectConfig:function(){return{options:this.options}}},ready:function(){this.$http.get(cp_url("system/themes/get"),function(t){var i=[];e.each(t,function(e){i.push({value:e.folder,text:e.name})}),this.options=i,this.loading=!1})}}}.call(t,i(1))},function(e,t){e.exports=' <div class=theme-fieldtype-wrapper> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <select-fieldtype v-if=!loading :name=name :data.sync=data :config=selectConfig></select-fieldtype> </div> '},function(e,t,i){var n,s,a={};n=i(671),s=i(672),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={mixins:[Fieldtype],props:{required:Boolean},computed:{hour:{set:function(e){this.ensureTime();var t=this.data.split(":"),i=parseInt(e);i=(i=i>23?23:i)<0?0:i,t[0]=this.pad(i),this.data=t.join(":")},get:function(){return this.hasTime?this.pad(this.data.split(":")[0]):""}},minute:{set:function(e){this.ensureTime();var t=this.data.split(":"),i=parseInt(e);i=(i=i>59?59:i)<0?0:i,t[1]=this.pad(i),this.data=t.join(":")},get:function(){return this.hasTime?this.pad(this.data.split(":")[1]):""}},hasTime:function(){return this.required||null!==this.data},isRequired:function(){return this.required}},methods:{pad:function(e){return("00"+e).substr(-2,2)},ensureTime:function(){this.hasTime||this.initializeTime()},initializeTime:function(){this.data="00:00"},clear:function(){this.data=null},incrementHour:function(e){this.ensureTime();var t=parseInt(this.hour)+e;t=-1===(t=24===t?0:t)?23:t,this.hour=t},incrementMinute:function(e){this.ensureTime();var t=parseInt(this.minute)+e;t=-1===(t=60===t?0:t)?59:t,this.minute=t},focusMinute:function(){e(this.$els.minute).focus().select()},focus:function(){this.$els.hour.focus()}}}}.call(t,i(2))},function(e,t){e.exports=' <div class=time-template-wrapper> <input class=form-control type=number min=00 max=23 v-model=hour v-el:hour @keydown.up.prevent=incrementHour(1) @keydown.down.prevent=incrementHour(-1) @keydown.esc=clear @keydown.186.prevent=focusMinute @keydown.190.prevent=focusMinute tabindex=0 /> <span class=colon>:</span> <input class=form-control type=number min=00 max=59 v-model=minute v-el:minute @keydown.up.prevent=incrementMinute(1) @keydown.down.prevent=incrementMinute(-1) @keydown.esc=clear tabindex=0 /> <div> <span class="icon icon-remove" tabindex=0 v-if="!isRequired && hasTime" @click=clear @keyup.enter.space=clear> &times; </span> </div> </div> '},function(e,t,i){var n,s,a={};n=i(674),s=i(675),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={mixins:[Fieldtype],data:function(){return{autoBindChangeWatcher:!1}},computed:{isOn:function(){var e=!0;return this.config&&this.config.reverse&&(e=!1),this.data===e}},methods:{toggle:function(){this.data=!this.data},focus:function(){this.$els.knob.focus()}},ready:function(){null===this.data&&(this.data=this.config.default||!1),this.bindChangeWatcher()}}},function(e,t){e.exports=" <div class=toggle-fieldtype-wrapper> <div class=toggle-container :class=\"{ 'on': isOn }\" @click=toggle> <div class=toggle-slider> <div class=toggle-knob tabindex=0 @keyup.prevent.space.enter=toggle v-el:knob tabindex=0></div> </div> </div> </div> "},function(e,t,i){var n,s,a={};n=i(677),s=i(678),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(4);i(184),t.default={mixins:[Fieldtype],data:function(){return{codemirror:null}},ready:function(){var e=this;this.codemirror=n(this.$els.codemirror,{value:this.data||this.config.default||"",mode:"yaml",lineNumbers:!0,viewportMargin:1/0}),this.codemirror.on("change",function(t){e.data=t.doc.getValue()})},methods:{focus:function(){this.codemirror.focus()}}}},function(e,t){e.exports=" <div class=yaml-fieldtype-wrapper> <span>YAML</span> <div class=editor v-el:codemirror></div> </div> "},function(e,t,i){var n,s,a={};n=i(680),s=i(681),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(5),a=i.n(s);t.default={mixins:[a.a],data:function(){return{loading:!0,groups:{}}},computed:{canEdit:function(){return e.can("super")},selectedGroupNames:function(){var e=this;return n.map(this.data,function(t){return n.findWhere(e.groups,{value:t}).text})}},methods:{getGroups:function(){this.$http.get(cp_url("users/groups/get"),function(e){var t=[];n.each(e.items,function(e){t.push({value:e.id,text:e.title})}),this.groups=t,this.loading=!1})}},ready:function(){this.getGroups()}}}.call(t,i(3),i(1))},function(e,t){e.exports=' <div> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div v-if="!loading && !canEdit"> <template v-for="group in selectedGroupNames"> {{ group }}<template v-if="$index !== selectedGroupNames.length-1">,</template> </template> </div> <div class=user_groups-fieldtype v-if="!loading && canEdit"> <relate-fieldtype :data.sync=data :name=name :config=config :suggestions-prop=groups v-ref:relate> </relate-fieldtype> </div> </div> '},function(e,t,i){var n,s,a={};n=i(683),s=i(684),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,n){var s=i(5),a=i.n(s);t.default={mixins:[a.a],data:function(){return{loading:!0,roles:{}}},computed:{canEdit:function(){return e.can("users:edit-roles")},selectedRoleNames:function(){var e=this;return n.map(this.data,function(t){return n.findWhere(e.roles,{value:t}).text})}},methods:{getRoles:function(){this.$http.get(cp_url("users/roles/get"),function(e){var t=[];n.each(e.items,function(e){t.push({value:e.id,text:e.title})}),this.roles=t,this.loading=!1})}},ready:function(){this.getRoles()}}}.call(t,i(3),i(1))},function(e,t){e.exports=' <div> <div v-if=loading class="loading loading-basic"> <span class="icon icon-circular-graph animation-spin"></span> {{ translate(\'cp.loading\') }} </div> <div class=user_roles-fieldtype v-if=!loading> <relate-fieldtype :data.sync=data :name=name :config=config :suggestions-prop=roles :disabled=!canEdit v-ref:relate> </relate-fieldtype> </div> </div> '},function(e,t,i){var n,s,a={};i(686),n=i(687),s=i(688),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t){},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["data","config","name"],computed:{embed:function(){return this.data.includes("youtube")?this.data.replace("watch?v=","embed/"):this.data.includes("youtu.be")?this.data.replace("youtu.be","www.youtube.com/embed"):this.data.includes("vimeo")?this.data.replace("/vimeo.com","/player.vimeo.com/video"):this.data},isEmbeddable:function(){return this.data.includes("youtube")||this.data.includes("vimeo")||this.data.includes("youtu.be")},isVideo:function(){return!this.isEmbeddable&&(this.data.includes(".mp4")||this.data.includes(".ogv")||this.data.includes(".mov")||this.data.includes(".webm"))}}}},function(e,t){e.exports=' <input type=text v-model=data class=form-control /> <div class=video-preview-wrapper v-if="isEmbeddable || isVideo"> <div class=video-preview> <iframe v-if=isEmbeddable width=560 height=315 src="{{ embed }}" frameborder=0 allowfullscreen></iframe> <video controls v-if=isVideo :src=embed width=560 height=315></video> </div> </div> '},function(e,t,i){var n,s,a={};n=i(690),s=i(691),e.exports=n||{},e.exports.__esModule&&(e.exports=e.exports.default);var o="function"==typeof e.exports?e.exports.options||(e.exports.options={}):e.exports;s&&(o.template=s),o.computed||(o.computed={}),Object.keys(a).forEach(function(e){var t=a[e];o.computed[e]=function(){return t}})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){t.default={props:{name:String,data:{default:function(){return[]}},config:{type:Object,default:function(){return{}}}},ready:function(){e.set(this.config,"type","users")}}}.call(t,i(3))},function(e,t){e.exports=" <div class=users-fieldtype> <relate-fieldtype :data.sync=data :name=name :config=config v-if=config.type></relate-fieldtype> </div> "},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){var t=i(3),n=i.n(t),s=i(693),a=i(694);n.a.directive("elastic",a.a),n.a.directive("tip",s.a),n.a.directive("focus",function(t){var i=this;t&&(e("[autofocus]").length>0&&!e(this.el).within(".form-group").length||this.vm.$nextTick(function(){return i.el.focus()}))})}.call(t,i(2))},function(e,t,i){"use strict";var n=i(186),s=i.n(n);t.a={params:["tipText"],update:function(){this.params.tipText&&(this.el.setAttribute("title",this.params.tipText),s()(this.el,{size:"small",animateFill:!1,theme:"light",performance:!0}))}}},function(e,t,i){"use strict";var n=i(19),s=i.n(n);t.a={bind:function(){setTimeout(function(){s()(this.el)}.bind(this),10)}}},function(e,t){}],[187]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL0ZpZWxkcy52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9NZXRhRmllbGR0eXBlLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvU2VsZWN0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvVXBsb2FkZXIudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL0ZpZWxkc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL21vZGUveG1sL3htbC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSGFzTG9jYWxlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0hhc1Nob3dEcmFmdHNTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL01vdmVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRGV0ZWN0c0ZpbGVEcmFnZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9MaXN0aW5nLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0Fzc2V0LmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0ZvbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Sb3cuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9VcGxvYWRzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9FZGl0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL0ZpZWxkLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9Ecml2ZXJMb2NhbC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0RyaXZlclMzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnZS10cmVlL0JyYW5jaC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2UtdHJlZS9CcmFuY2hlcy52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvdXNlci1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL0ZpZWxkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2NvbGxlY3Rpb24tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9icm93c2VyLWRldGVjdG9yLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL1dpZHRoU2VsZWN0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2Fzc2V0cy9Bc3NldC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZXBsaWNhdG9yL1JlcGxpY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yU2V0LmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0luc2VydHNBc3NldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvbW9kZS9odG1sbWl4ZWQvaHRtbG1peGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL21vZGUvamF2YXNjcmlwdC9qYXZhc2NyaXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL21vZGUvY3NzL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL21hcmtkb3duL21hcmtkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL21vZGUvY2xpa2UvY2xpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvbW9kZS95YW1sL3lhbWwuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvR2V0c1N1Z2dlc3RLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jhbmd5L2xpYi9yYW5neS1jb3JlLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL3Z1ZS1yZXNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC9nbG9iYWxzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL3BvbHlmaWxscy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC91bmRlcnNjb3JlLW1peGlucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC9qcXVlcnktcGx1Z2lucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC9yZWRhY3Rvci1wbHVnaW5zLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvbDEwbi9sYW5nLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvbDEwbi9sMTBuLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvcGx1Z2lucy9jcF91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9wbHVnaW5zL3RyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL3BsdWdpbnMvcmVzb3VyY2VfdXJsLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvcGx1Z2lucy9maWxlX2ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9wbHVnaW5zL3NsdWdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvcGx1Z2lucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL3BsdWdpbnMvY2FuLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL2ZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9maWx0ZXJzL2Rlc2x1Z2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvdGl0bGVpemUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9maWx0ZXJzL3ByZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvcmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvcGx1Y2suanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9maWx0ZXJzL3BhcnNlLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvZmlsdGVycy9vcHRpb25pemUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9maWx0ZXJzL21hcmtkb3duLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvZmlsdGVycy9vcmRlcmJ5LmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL21peGlucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9GaWVsZHR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvQXV0b1NsdWcuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Rvc3NpZXIvRG9zc2llci52dWUiLCJ3ZWJwYWNrOi8vL0Rvc3NpZXIudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9kb3NzaWVyL0Rvc3NpZXJUYWJsZS52dWUiLCJ3ZWJwYWNrOi8vL0Rvc3NpZXJUYWJsZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Rvc3NpZXIvRG9zc2llclRhYmxlLnZ1ZT8xMTg0Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9QYWdpbmF0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvY29tcG9uZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvYWRkb25zLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQXNzZXRNYW5hZ2VyLnZ1ZSIsIndlYnBhY2s6Ly8vQXNzZXRNYW5hZ2VyLnZ1ZSIsIndlYnBhY2s6Ly8vTW92ZXIudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvTW92ZXIudnVlP2JlYWMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Bc3NldE1hbmFnZXIudnVlPzI4YzgiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0Jyb3dzZXIudnVlIiwid2VicGFjazovLy9Ccm93c2VyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9HcmlkTGlzdGluZy52dWUiLCJ3ZWJwYWNrOi8vL0dyaWRMaXN0aW5nLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Bc3NldFRpbGUudnVlIiwid2VicGFjazovLy9Bc3NldFRpbGUudnVlPzVkYjQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvQXNzZXRUaWxlLnZ1ZT84YWEwIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0ZvbGRlclRpbGUudnVlIiwid2VicGFjazovLy9Gb2xkZXJUaWxlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Gb2xkZXJUaWxlLnZ1ZT80ODI2Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0dyaWRMaXN0aW5nLnZ1ZT83MDJmIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL1RhYmxlTGlzdGluZy52dWUiLCJ3ZWJwYWNrOi8vL1RhYmxlTGlzdGluZy52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvQXNzZXRSb3cudnVlIiwid2VicGFjazovLy9Bc3NldFJvdy52dWU/NGQ2NCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Bc3NldFJvdy52dWU/ZmVhZiIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Gb2xkZXJSb3cudnVlIiwid2VicGFjazovLy9Gb2xkZXJSb3cudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0ZvbGRlclJvdy52dWU/ODc4MCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9UYWJsZUxpc3RpbmcudnVlP2Y0OWQiLCJ3ZWJwYWNrOi8vL1VwbG9hZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL1VwbG9hZGVyLnZ1ZT85Y2JmIiwid2VicGFjazovLy9VcGxvYWRzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL1VwbG9hZC52dWUiLCJ3ZWJwYWNrOi8vL1VwbG9hZC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9VcGxvYWQudnVlPzNiMzEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9VcGxvYWRzLnZ1ZT85ZmEwIiwid2VicGFjazovLy9FZGl0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvRWRpdG9yL0ZvY2FsUG9pbnRFZGl0b3IudnVlIiwid2VicGFjazovLy9Gb2NhbFBvaW50RWRpdG9yLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9Gb2NhbFBvaW50RWRpdG9yLnZ1ZT83ODE2Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvRWRpdG9yL1JlbmFtZXIudnVlIiwid2VicGFjazovLy9SZW5hbWVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9SZW5hbWVyLnZ1ZT82ODhlIiwid2VicGFjazovLy9GaWVsZHMudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZC52dWUiLCJ3ZWJwYWNrOi8vL01ldGFGaWVsZC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9TbHVnLnZ1ZSIsIndlYnBhY2s6Ly8vU2x1Zy52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9TbHVnLnZ1ZT80ZjkwIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvRGF0ZS52dWUiLCJ3ZWJwYWNrOi8vL0RhdGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvRGF0ZS52dWU/NjZiYSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9NZXRhRmllbGRzL1RpdGxlLnZ1ZSIsIndlYnBhY2s6Ly8vVGl0bGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvVGl0bGUudnVlPzIwYjciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9UYXhvbm9teS52dWUiLCJ3ZWJwYWNrOi8vL1RheG9ub215LnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9NZXRhRmllbGRzL1RheG9ub215LnZ1ZT9mN2FjIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZC52dWU/MWI4NSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9SZWd1bGFyRmllbGQudnVlIiwid2VicGFjazovLy9SZWd1bGFyRmllbGQudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL1JlZ3VsYXJGaWVsZC52dWU/MjkyNCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9GaWVsZHMudnVlPzBkZmMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9FZGl0b3IvRWRpdG9yLnZ1ZT83MjUxIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9Gb2xkZXJFZGl0b3IudnVlIiwid2VicGFjazovLy9Gb2xkZXJFZGl0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9Gb2xkZXJFZGl0b3IudnVlP2MwYWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0JyZWFkY3J1bWJzLnZ1ZSIsIndlYnBhY2s6Ly8vQnJlYWRjcnVtYnMudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9CcmVhZGNydW1icy52dWU/OTYzOCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvQnJvd3Nlci52dWU/YjhmZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9FZGl0Rm9ybS52dWUiLCJ3ZWJwYWNrOi8vL0VkaXRGb3JtLnZ1ZSIsIndlYnBhY2s6Ly8vRHJpdmVyTG9jYWwudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9Ecml2ZXJMb2NhbC52dWU/NTQ2NCIsIndlYnBhY2s6Ly8vRHJpdmVyUzMudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9Ecml2ZXJTMy52dWU/NjllOSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9FZGl0Rm9ybS52dWU/OWRmZCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvYXNzZXQtY29udGFpbmVycy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9XaXphcmQvV2l6YXJkLnZ1ZSIsIndlYnBhY2s6Ly8vV2l6YXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9XaXphcmQvTWV0YUZpZWxkcy52dWUiLCJ3ZWJwYWNrOi8vL01ldGFGaWVsZHMudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9NZXRhRmllbGRzLnZ1ZT85OTBjIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9Ecml2ZXJGaWVsZHMudnVlIiwid2VicGFjazovLy9Ecml2ZXJGaWVsZHMudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9Ecml2ZXJGaWVsZHMudnVlP2I5ZDMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0ZpZWxkc2V0RmllbGRzLnZ1ZSIsIndlYnBhY2s6Ly8vRmllbGRzZXRGaWVsZHMudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9GaWVsZHNldEZpZWxkcy52dWU/ZjRlNyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9XaXphcmQvV2l6YXJkLnZ1ZT9lMWZjIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy9jb2xsZWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvYXNzZXQtY29udGFpbmVycy1jb25maWd1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2NvbGxlY3Rpb25zLWNvbmZpZ3VyZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvZ2xvYmFscy1jb25maWd1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL3RheG9ub21pZXMtY29uZmlndXJlLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9mb3Jtc2V0LWJ1aWxkZXIvZm9ybXNldC1idWlsZGVyLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9mb3Jtc2V0LWJ1aWxkZXIvZm9ybXNldC1idWlsZGVyLnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Zvcm1zZXQtYnVpbGRlci9mb3Jtc2V0LWZpZWxkcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2Zvcm1zZXQtZmllbGRzLnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Zvcm1zZXQtYnVpbGRlci9maWVsZC1zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2ZpZWxkLXNldHRpbmdzLnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Zvcm1zZXQtYnVpbGRlci9jb2x1bW5zLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9mb3Jtc2V0LWJ1aWxkZXIvY29sdW1ucy50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL0J1aWxkZXIudnVlIiwid2VicGFjazovLy9CdWlsZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZWN0aW9uQnVpbGRlci52dWUiLCJ3ZWJwYWNrOi8vL1NlY3Rpb25CdWlsZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZWN0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vU2VjdGlvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvU2VjdGlvbi52dWU/MzM0NSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZWN0aW9uQnVpbGRlci52dWU/ZDk5YyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9CdWlsZGVyLnZ1ZT83MzlmIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvUGFnZVRyZWUudnVlIiwid2VicGFjazovLy9QYWdlVHJlZS52dWUiLCJ3ZWJwYWNrOi8vL0JyYW5jaC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2UtdHJlZS9CcmFuY2gudnVlP2UxYTMiLCJ3ZWJwYWNrOi8vL0JyYW5jaGVzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnZS10cmVlL0JyYW5jaGVzLnZ1ZT80MjU2Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvQ3JlYXRlUGFnZS52dWUiLCJ3ZWJwYWNrOi8vL0NyZWF0ZVBhZ2UudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvQ3JlYXRlUGFnZS52dWU/YjdmMCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnZS10cmVlL01vdW50Q29sbGVjdGlvbi52dWUiLCJ3ZWJwYWNrOi8vL01vdW50Q29sbGVjdGlvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2UtdHJlZS9Nb3VudENvbGxlY3Rpb24udnVlPzU4NzMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvUHVibGlzaC52dWUiLCJ3ZWJwYWNrOi8vL1B1Ymxpc2gudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL0NvbmRpdGlvbmFscy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9Db25kaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvdXNlci1vcHRpb25zLnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvU3RhdHVzRmllbGQudnVlIiwid2VicGFjazovLy9TdGF0dXNGaWVsZC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvU3RhdHVzRmllbGQudnVlPzM3MjgiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvU2VjdGlvbi52dWUiLCJ3ZWJwYWNrOi8vL1NlY3Rpb24udnVlPzYzMWQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvU2VjdGlvbi52dWU/YWM2NSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9QdWJsaXNoLnZ1ZT8zNmI3Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy90eXBlYWhlYWQvVHlwZWFoZWFkLnZ1ZSIsIndlYnBhY2s6Ly8vVHlwZWFoZWFkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvdHlwZWFoZWFkL0lucHV0LnZ1ZSIsIndlYnBhY2s6Ly8vSW5wdXQudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy90eXBlYWhlYWQvSW5wdXQudnVlPzY1NDIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3R5cGVhaGVhZC9UeXBlYWhlYWQudnVlPzVmMTAiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9pbnN0YWxsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9wZXJtaXNzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW5zdGFsbGVyL3N0ZXBzL3Blcm1pc3Npb25zLnRlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9saWNlbnNla2V5LmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvbGljZW5zZWtleS50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9zZXR0aW5ncy50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvdGltZXpvbmVzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvdXNlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW5zdGFsbGVyL3N0ZXBzL3VzZXIudGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW5zdGFsbGVyL3N0ZXBzL2xvZ2luLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvbG9naW4udGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvdXBkYXRlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW1wb3J0ZXIvaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL3Rlcm1zLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy90YXhvbm9taWVzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy9nbG9iYWxzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy91c2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvdXNlci1ncm91cHMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL3VzZXItcm9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2ZpZWxkc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvZm9ybS1zdWJtaXNzaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcm9sZXMvcm9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9sb2dpbi9Mb2dpbk1vZGFsLnZ1ZSIsIndlYnBhY2s6Ly8vTG9naW5Nb2RhbC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xvZ2luL0xvZ2luTW9kYWwudnVlPzNmYjYiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL1N2Z0ljb24udnVlIiwid2VicGFjazovLy9TdmdJY29uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIgXlxcLlxcLy4qXFwuc3ZnJCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9hcnJheS5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvYXNzZXRzLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9iYXJkLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9jaGVja2JveGVzLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9jb2xsZWN0aW9uLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9jb2xsZWN0aW9ucy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZGF0ZS5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZW50cmllcy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmllbGRzZXQuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtYXJjaGl2ZS5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS1hdWRpby5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS1kb2Muc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtZXhjZWwuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtZ2VuZXJpYy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS1qc29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9maWxlLWxheWVyZWQuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtcGRmLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9maWxlLXByZXNlbnRhdGlvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS12aWRlby5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS14bWwuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZvbGRlci1zZWFyY2gtZW1wdHkuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZvbGRlci5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZm9ybS5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZ2VuZXJpYy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZ3JpZC5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvaGlkZGVuLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9pbnRlZ2VyLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9saXN0LnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9tYXJrZG93bi5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvcGFnZXMuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3BhcnRpYWwuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3BpY3R1cmUuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3JhZGlvLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9yZWRhY3Rvci5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvcmVwbGljYXRvci5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvcmV2ZWFsZXIuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3NlY3Rpb24uc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3NlbGVjdC5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvc2x1Zy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvc3RhdGFtaWMtbG9nby5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvc3RhdGFtaWMtbWFyay5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvc3VnZ2VzdC5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGFibGUuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RhYnMuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RhZ3Muc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RheG9ub215LnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy90ZW1wbGF0ZS5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGV4dC5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGV4dGFyZWEuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RoZW1lLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy90aW1lLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy90aXRsZS5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdG9nZ2xlLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy91c2VyLWdyb3Vwcy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdXNlci1yb2xlcy5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdXNlcl9ncm91cHMuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3VzZXJfcm9sZXMuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3VzZXJzLnN2ZyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy92aWRlby5zdmciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdmlzaXQuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3lhbWwuc3ZnIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9TdmdJY29uLnZ1ZT8xYmRiIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9GaWxlSWNvbi52dWUiLCJ3ZWJwYWNrOi8vL0ZpbGVJY29uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRmlsZUljb24udnVlPzFhNWEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3QudGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGQtc3RhdHVzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZC1kZWZhdWx0LmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hbGVydC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9maWVsZHMtYnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9maWVsZHMtYnVpbGRlci50ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL0ZpZWxkcy52dWUiLCJ3ZWJwYWNrOi8vL0ZpZWxkcy52dWU/MjIxMCIsIndlYnBhY2s6Ly8vRmllbGQudnVlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9lbGVtZW50LXV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvbGlzdGVuZXItaGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2lkLWdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2lkLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9yZXBvcnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmF0Y2gtcHJvY2Vzc29yL3NyYy9iYXRjaC1wcm9jZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhdGNoLXByb2Nlc3Nvci9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9zdGF0ZS1oYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZGV0ZWN0aW9uLXN0cmF0ZWd5L29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2RldGVjdGlvbi1zdHJhdGVneS9zY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvRmllbGRTZXR0aW5ncy52dWUiLCJ3ZWJwYWNrOi8vL0ZpZWxkU2V0dGluZ3MudnVlIiwid2VicGFjazovLy9XaWR0aFNlbGVjdG9yLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9XaWR0aFNlbGVjdG9yLnZ1ZT9jMTljIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZC1jb25kaXRpb25zLWJ1aWxkZXIvRmllbGRDb25kaXRpb25zQnVpbGRlci52dWUiLCJ3ZWJwYWNrOi8vL0ZpZWxkQ29uZGl0aW9uc0J1aWxkZXIudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZC1jb25kaXRpb25zLWJ1aWxkZXIvQ29uZGl0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vQ29uZGl0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGQtY29uZGl0aW9ucy1idWlsZGVyL0NvbmRpdGlvbi52dWU/NjZjOSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGQtY29uZGl0aW9ucy1idWlsZGVyL0ZpZWxkQ29uZGl0aW9uc0J1aWxkZXIudnVlPzJjNDQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvRmllbGRTZXR0aW5ncy52dWU/OTBjYSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZXRzLnZ1ZSIsIndlYnBhY2s6Ly8vU2V0cy52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvU2V0LnZ1ZSIsIndlYnBhY2s6Ly8vU2V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZXQudnVlPzZiYTYiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvU2V0cy52dWU/MzBiYiIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9GaWVsZC52dWU/YTNiZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9GaWVsZHMudnVlPzc4YWEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvRmllbGR0eXBlU2VsZWN0b3IudnVlIiwid2VicGFjazovLy9GaWVsZHR5cGVTZWxlY3Rvci52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvRmllbGR0eXBlU2VsZWN0b3IudnVlP2MxY2MiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL01vZGFsLnZ1ZSIsIndlYnBhY2s6Ly8vTW9kYWwudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Nb2RhbC52dWU/M2M1NCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9QYWdpbmF0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vUGFnaW5hdGlvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnZS52dWUiLCJ3ZWJwYWNrOi8vL1BhZ2UudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdpbmF0aW9uL1BhZ2UudnVlPzMyZGQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnaW5hdGlvbi52dWU/ZTk0NCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZG9zc2llci9Eb3NzaWVyU2VhcmNoLnZ1ZSIsIndlYnBhY2s6Ly8vRG9zc2llclNlYXJjaC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Rvc3NpZXIvRG9zc2llclNlYXJjaC52dWU/ZGM5NSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZG9zc2llci9Tb3J0U2VsZWN0b3IudnVlIiwid2VicGFjazovLy9Tb3J0U2VsZWN0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9kb3NzaWVyL1NvcnRTZWxlY3Rvci52dWU/ZWNjOSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC9maWVsZHR5cGVzLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0FycmF5RmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vQXJyYXlGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0FycmF5RmllbGR0eXBlLnZ1ZT8xMDFmIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2Fzc2V0cy9Bc3NldHNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9Bc3NldHNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2Fzc2V0cy9Bc3NldFRpbGUudnVlIiwid2VicGFjazovLy9Bc3NldFRpbGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2Fzc2V0cy9Bc3NldFRpbGUudnVlP2JhMWQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYXNzZXRzL0Fzc2V0Um93LnZ1ZSIsIndlYnBhY2s6Ly8vQXNzZXRSb3cudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2Fzc2V0cy9Bc3NldFJvdy52dWU/NDc1YyIsIndlYnBhY2s6Ly8vU2VsZWN0b3IudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvU2VsZWN0b3IudnVlPzkwZDMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYXNzZXRzL0Fzc2V0c0ZpZWxkdHlwZS52dWU/MDgxZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Bc3NldHNGb2xkZXJGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9Bc3NldHNGb2xkZXJGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0Fzc2V0c0ZvbGRlckZpZWxkdHlwZS52dWU/YzI2ZiIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Bc3NldENvbnRhaW5lckZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL0Fzc2V0Q29udGFpbmVyRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Bc3NldENvbnRhaW5lckZpZWxkdHlwZS52dWU/NGYxNyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9CYXJkRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRTZXQudnVlIiwid2VicGFjazovLy9CYXJkU2V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRTZXQudnVlPzU2YzEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYmFyZC9CYXJkVGV4dC52dWUiLCJ3ZWJwYWNrOi8vL0JhcmRUZXh0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0F1dG9MaXN0LmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2JhcmQvQmFyZFRleHQudnVlP2Y0MWMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYmFyZC9CYXJkRmllbGR0eXBlLnZ1ZT80YzMwIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0NoZWNrYm94ZXNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9DaGVja2JveGVzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9DaGVja2JveGVzRmllbGR0eXBlLnZ1ZT8zNzUxIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0NvbGxlY3Rpb25GaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9Db2xsZWN0aW9uRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vQWRhcHRzUmVsYXRlRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlPzNkZDkiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvQ29sbGVjdGlvbnNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9Db2xsZWN0aW9uc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRGF0ZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL0RhdGVGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0RhdGVGaWVsZHR5cGUudnVlPzVhMGEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvR3JpZEZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL0dyaWRGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0dyaWRGaWVsZHR5cGUudnVlPzhjZTIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRmllbGRzZXRGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9GaWVsZHNldEZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRmllbGRzZXRGaWVsZHR5cGUudnVlPzBmZjgiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRm9ybUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL0Zvcm1GaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0hpZGRlbkZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL0hpZGRlbkZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvSGlkZGVuRmllbGR0eXBlLnZ1ZT80NGM1Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0ludGVnZXJGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9JbnRlZ2VyRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9JbnRlZ2VyRmllbGR0eXBlLnZ1ZT8zYzBhIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0xpc3RGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9MaXN0RmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9MaXN0RmllbGR0eXBlLnZ1ZT80Nzk1Iiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0xvY2FsZVNldHRpbmdzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vTG9jYWxlU2V0dGluZ3NGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0xvY2FsZVNldHRpbmdzRmllbGR0eXBlLnZ1ZT8zY2EwIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL01hcmtkb3duRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vTWFya2Rvd25GaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2FkZG9uL2VkaXQvY2xvc2VicmFja2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9hZGRvbi9lZGl0L21hdGNoYnJhY2tldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvYWRkb24vZGlzcGxheS9hdXRvcmVmcmVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvbW9kZS9nZm0vZ2ZtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2FkZG9uL21vZGUvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL3BocC9waHAuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvTWFya2Rvd25GaWVsZHR5cGUudnVlP2Y2ODEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUGFnZXNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9QYWdlc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUmFkaW9GaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9SYWRpb0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUmFkaW9GaWVsZHR5cGUudnVlPzhhNWYiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVkYWN0b3IvUmVkYWN0b3JGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9SZWRhY3RvckZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVkYWN0b3IvUmVkYWN0b3JGaWVsZHR5cGUudnVlPzIzNTUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVkYWN0b3IvUmVkYWN0b3JTZXR0aW5nc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1JlZGFjdG9yU2V0dGluZ3NGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlZGFjdG9yL1JlZGFjdG9yU2V0dGluZ3NGaWVsZHR5cGUudnVlPzYxMTIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVsYXRlL1JlbGF0ZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1JlbGF0ZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVsYXRlL1JlbGF0ZVBhbmVzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vUmVsYXRlUGFuZXNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlbGF0ZS9SZWxhdGVQYW5lc0ZpZWxkdHlwZS52dWU/MTRkMCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZWxhdGUvUmVsYXRlVGFnc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1JlbGF0ZVRhZ3NGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlbGF0ZS9SZWxhdGVUYWdzRmllbGR0eXBlLnZ1ZT9hNzllIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlbGF0ZS9SZWxhdGVGaWVsZHR5cGUudnVlPzkyYWIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vUmVwbGljYXRvckZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yU2V0LnZ1ZSIsIndlYnBhY2s6Ly8vUmVwbGljYXRvclNldC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yU2V0LnZ1ZT80ZTBmIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlcGxpY2F0b3IvUmVwbGljYXRvckZpZWxkdHlwZS52dWU/MjMyMSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9SZXZlYWxlckZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1JldmVhbGVyRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9SZXZlYWxlckZpZWxkdHlwZS52dWU/NWIxNSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Sb3V0ZXNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9Sb3V0ZXNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1JvdXRlc0ZpZWxkdHlwZS52dWU/MWI5OCIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TZWN0aW9uRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vU2VjdGlvbkZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvU2VsZWN0RmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vU2VsZWN0RmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TZWxlY3RGaWVsZHR5cGUudnVlP2Q0ZGQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvU3RhdHVzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vU3RhdHVzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TdGF0dXNGaWVsZHR5cGUudnVlPzNjNGIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvU3VnZ2VzdEZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1N1Z2dlc3RGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1N1Z2dlc3RGaWVsZHR5cGUudnVlP2FiMDkiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGFibGVGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9UYWJsZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGFibGVGaWVsZHR5cGUudnVlP2VmZTUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGFnc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1RhZ3NGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RhZ3NGaWVsZHR5cGUudnVlPzcyOTQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGF4b25vbXlGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9UYXhvbm9teUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGF4b25vbXlGaWVsZHR5cGUudnVlP2I3ZGQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGVtcGxhdGVGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9UZW1wbGF0ZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGVtcGxhdGVGaWVsZHR5cGUudnVlPzlhODMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGV4dEZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1RleHRGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RleHRGaWVsZHR5cGUudnVlP2RkNDAiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGV4dGFyZWFGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9UZXh0YXJlYUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGV4dGFyZWFGaWVsZHR5cGUudnVlP2RhNDEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGhlbWVGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9UaGVtZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGhlbWVGaWVsZHR5cGUudnVlP2JlNWIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGltZUZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1RpbWVGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RpbWVGaWVsZHR5cGUudnVlP2FkZjkiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVG9nZ2xlRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vVG9nZ2xlRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Ub2dnbGVGaWVsZHR5cGUudnVlPzZlMjgiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvWWFtbEZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1lhbWxGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1lhbWxGaWVsZHR5cGUudnVlPzgxMDciLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlckdyb3Vwc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vL1VzZXJHcm91cHNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1VzZXJHcm91cHNGaWVsZHR5cGUudnVlP2MyOGEiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlclJvbGVzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vVXNlclJvbGVzRmllbGR0eXBlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Vc2VyUm9sZXNGaWVsZHR5cGUudnVlP2FmYWIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVmlkZW9GaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9WaWRlb0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVmlkZW9GaWVsZHR5cGUudnVlP2ZkZjYiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlcnNGaWVsZHR5cGUudnVlIiwid2VicGFjazovLy9Vc2Vyc0ZpZWxkdHlwZS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlcnNGaWVsZHR5cGUudnVlPzdiNmIiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvZGlyZWN0aXZlcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2RpcmVjdGl2ZXMvdGlwLmpzIiwid2VicGFjazovLy8uL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvZGlyZWN0aXZlcy9lbGFzdGljLmpzIl0sIm5hbWVzIjpbIl9fdnVlX3NjcmlwdF9fIiwiX192dWVfdGVtcGxhdGVfXyIsIl9fdnVlX3N0eWxlc19fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9fdnVlX29wdGlvbnNfXyIsIm9wdGlvbnMiLCJ0ZW1wbGF0ZSIsImNvbXB1dGVkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwicHJvcHMiLCJmb3JtRGF0YSIsInRoaXMiLCIkcGFyZW50IiwiRmllbGRzZXQiLCJmaWVsZHNldCIsIl9jbGFzc0NhbGxDaGVjayIsIm5hbWUiLCJzZWN0aW9ucyIsInBhcnNlU2VjdGlvbnMiLCJtZXRhRmllbGRzIiwiX3RoaXMiLCJfIiwiY2hhaW4iLCJtYXBPYmplY3QiLCJzZWN0aW9uIiwiaGFuZGxlIiwiZmllbGRzIiwicGFyc2VGaWVsZHMiLCJ2YWx1ZXMiLCJ2YWx1ZSIsImNvbmZpZyIsInNob3ciLCJwdXNoIiwiZmllbGRzSW5TZWN0aW9ucyIsImluY2x1ZGVzIiwiZmlyc3RTZWN0aW9uRmllbGRzIiwidW5zaGlmdCIsInR5cGUiLCJpbnN0cnVjdGlvbnMiLCJ3aWR0aCIsIl90aGlzMiIsImVuc3VyZVNpZGViYXIiLCJlYWNoIiwiZmllbGQiLCJwdXNoU2lkZWJhckZpZWxkIiwicmVtb3ZlRW1wdHlTaWRlYmFyIiwic2lkZWJhciIsInNpZGViYXJTZWN0aW9uRmllbGRzIiwiYXNzaWduIiwiaXNNZXRhIiwibG9jYWxpemFibGUiLCJmaW5kIiwiZGlzcGxheSIsInRyYW5zbGF0ZSIsImxlbmd0aCIsInJlamVjdCIsIm1hcCIsImZsYXR0ZW4iLCJwbHVjayIsIkNvZGVNaXJyb3IiLCJodG1sQ29uZmlnIiwiYXV0b1NlbGZDbG9zZXJzIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImNvbW1hbmQiLCJlbWJlZCIsImZyYW1lIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJzb3VyY2UiLCJ0cmFjayIsIndiciIsIm1lbnVpdGVtIiwiaW1wbGljaXRseUNsb3NlZCIsImRkIiwibGkiLCJvcHRncm91cCIsIm9wdGlvbiIsInAiLCJycCIsInJ0IiwidGJvZHkiLCJ0ZCIsInRmb290IiwidGgiLCJ0ciIsImNvbnRleHRHcmFiYmVycyIsImR0IiwiYWRkcmVzcyIsImFydGljbGUiLCJhc2lkZSIsImJsb2NrcXVvdGUiLCJkaXIiLCJkaXYiLCJkbCIsImZvb3RlciIsImZvcm0iLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkZXIiLCJoZ3JvdXAiLCJtZW51IiwibmF2Iiwib2wiLCJwcmUiLCJ0YWJsZSIsInVsIiwidGhlYWQiLCJkb05vdEluZGVudCIsImFsbG93VW5xdW90ZWQiLCJhbGxvd01pc3NpbmciLCJjYXNlRm9sZCIsInhtbENvbmZpZyIsImFsbG93TWlzc2luZ1RhZ05hbWUiLCJkZWZpbmVNb2RlIiwiZWRpdG9yQ29uZiIsImNvbmZpZ18iLCJzZXRTdHlsZSIsImluZGVudFVuaXQiLCJkZWZhdWx0cyIsImh0bWxNb2RlIiwicHJvcCIsImluVGV4dCIsInN0cmVhbSIsInN0YXRlIiwicGFyc2VyIiwidG9rZW5pemUiLCJjaCIsIm5leHQiLCJlYXQiLCJtYXRjaCIsImluQmxvY2siLCJlYXRXaGlsZSIsImRvY3R5cGUiLCJkZXB0aCIsImluVGFnIiwicXVvdGUiLCJjbG9zdXJlIiwiYmFzZVN0YXRlIiwidGFnTmFtZSIsInRhZ1N0YXJ0IiwidGVzdCIsImVvbCIsImlzSW5BdHRyaWJ1dGUiLCJzdHJpbmdTdGFydENvbCIsImNvbHVtbiIsInN0eWxlIiwidGVybWluYXRvciIsInBvcENvbnRleHQiLCJjb250ZXh0IiwicHJldiIsIm1heWJlUG9wQ29udGV4dCIsIm5leHRUYWdOYW1lIiwicGFyZW50VGFnTmFtZSIsImhhc093blByb3BlcnR5IiwidGFnTmFtZVN0YXRlIiwiY2xvc2VUYWdOYW1lU3RhdGUiLCJjdXJyZW50IiwiYXR0clN0YXRlIiwibWF0Y2hDbG9zaW5nIiwiY2xvc2VTdGF0ZSIsImNsb3NlU3RhdGVFcnIiLCJfc3RyZWFtIiwiYXR0ckVxU3RhdGUiLCJzdGFydE9mTGluZSIsImluZGVudCIsImluZGVudGVkIiwibm9JbmRlbnQiLCJhdHRyVmFsdWVTdGF0ZSIsImF0dHJDb250aW51ZWRTdGF0ZSIsImlzSW5UZXh0Iiwic3RhcnRTdGF0ZSIsImJhc2VJbmRlbnQiLCJ0b2tlbiIsInNvbCIsImluZGVudGF0aW9uIiwiZWF0U3BhY2UiLCJ0ZXh0QWZ0ZXIiLCJmdWxsTGluZSIsIlBhc3MiLCJtdWx0aWxpbmVUYWdJbmRlbnRQYXN0VGFnIiwibXVsdGlsaW5lVGFnSW5kZW50RmFjdG9yIiwiYWxpZ25DREFUQSIsInRhZ0FmdGVyIiwiZXhlYyIsImdyYWJiZXJzIiwiZWxlY3RyaWNJbnB1dCIsImJsb2NrQ29tbWVudFN0YXJ0IiwiYmxvY2tDb21tZW50RW5kIiwiY29uZmlndXJhdGlvbiIsImhlbHBlclR5cGUiLCJza2lwQXR0cmlidXRlIiwiZGVmaW5lTUlNRSIsIm1pbWVNb2RlcyIsIm1vZCIsImRhdGEiLCJsb2NhbGUiLCJsb2NhbGVzIiwiU3RhdGFtaWMiLCJ0ZXh0IiwicmVhZHkiLCJnZXRJbml0aWFsTG9jYWxlIiwibWV0aG9kcyIsImRlZmF1bHRMb2NhbGUiLCJnZXRMb2NhbGVMb2NhbFN0b3JhZ2VLZXkiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwib25Mb2NhbGVDaGFuZ2VkIiwiYmluZExvY2FsZVdhdGNoZXIiLCIkd2F0Y2giLCJzZXRJdGVtIiwic2hvd0RyYWZ0cyIsImRyYWZ0T3B0aW9ucyIsImdldEluaXRpYWxTaG93RHJhZnRzIiwiZ2V0U2hvd0RyYWZ0c0xvY2FsU3RvcmFnZUtleSIsIm9uU2hvd0RyYWZ0c0NoYW5nZWQiLCJiaW5kU2hvd0RyYWZ0c1dhdGNoZXIiLCJkcmFnZ2luZ0ZpbGUiLCJkcmFnT3ZlciIsIiRyb290IiwiZHJhZ2dpbmdOb25GaWxlIiwiZHJhZ1N0b3AiLCJoYXNSZXN1bHRzIiwiYXNzZXRzIiwic3ViZm9sZGVycyIsImhhc1BhcmVudCIsImZvbGRlciIsInBhcmVudF9wYXRoIiwic2VsZWN0Rm9sZGVyIiwicGF0aCIsIiRlbWl0Iiwic2VsZWN0QXNzZXQiLCJpZCIsImNhbiIsImNvbnRhaW5lciIsImRlc2VsZWN0QXNzZXQiLCJlZGl0QXNzZXQiLCJkZWxldGVBc3NldCIsImFzc2V0RG91YmxlY2xpY2tlZCIsImVkaXRGb2xkZXIiLCJkZWxldGVGb2xkZXIiLCJ1cmwiLCJjcF91cmwiLCJzd2FsIiwidGl0bGUiLCJ0cmFuc2xhdGVfY2hvaWNlIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0Iiwic2hvd0NhbmNlbEJ1dHRvbiIsIiRodHRwIiwiZGVsZXRlIiwiZm9sZGVycyIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsInNhdmluZyIsImFzc2V0RHJhZ1N0YXJ0IiwiZHJhZ2dpbmdBc3NldHMiLCJpc1NlbGVjdGVkIiwiY29udGFpbnMiLCJzZWxlY3RlZEFzc2V0cyIsImFzc2V0IiwiY2FuU2hvd1N2ZyIsImV4dGVuc2lvbiIsInN2Z0JhY2tncm91bmRTdHlsZSIsInRvZ2dsZSIsImRlc2VsZWN0Iiwic2VsZWN0IiwiZSIsImRhdGFUcmFuc2ZlciIsInNldERhdGEiLCJlZmZlY3RBbGxvd2VkIiwiZG91YmxlQ2xpY2tlZCIsImRvY3VtZW50IiwibG9jYXRpb24iLCJwYXRobmFtZSIsInNwbGl0Iiwic2hvd0FjdGlvbnNEcm9wZG93biIsImRyb3AiLCJtaXhpbnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfdnVlX2NsaWNrYXdheV9fIiwiZXZlbnRzIiwiY2xvc2UtZHJvcGRvd24iLCJyZWZlcmVuY2UiLCJ0b2dnbGVBY3Rpb25zIiwiYXdheSIsImlzRWRpdGluZ0RlZmF1bHRMb2NhbGUiLCJQdWJsaXNoIiwiaXNWaXNpYmxlIiwiaGlkZGVuRmllbGRzIiwiaXNSZWFkT25seSIsImlzTG9jYWxpemFibGUiLCJoYXNFcnJvciIsImhhcyIsImVycm9ycyIsImNsYXNzZXMiLCJmaWVsZHR5cGVDbGFzcyIsInRhaWx3aW5kX3dpZHRoX2NsYXNzIiwiaGFzLWVycm9yIiwid2F0Y2giLCJ2aXNpYmxlIiwid2luZG93IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50Iiwic2VuZFJlc2V0RW1haWwiLCJlcnJvciIsImdldCIsInVzZXJuYW1lIiwiJGRpc3BhdGNoIiwiY29weVJlc2V0TGluayIsInByb21wdCIsImNvbGxlY3Rpb24iLCJjYWxsYmFjayIsImkiLCJyZXN1bHQiLCJkZXRlY3RvciIsImlzSUUiLCJ2ZXJzaW9uIiwiYWdlbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJ2IiwiY3JlYXRlRWxlbWVudCIsImFsbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5uZXJIVE1MIiwidW5kZWYiLCJpc0xlZ2FjeU9wZXJhIiwib3BlcmEiLCJjb21wb25lbnRzIiwiQXNzZXRFZGl0b3IiLCJlZGl0aW5nIiwiaXNJbWFnZSIsImlzX2ltYWdlIiwidGh1bWJuYWlsIiwidG9lbmFpbCIsImxhYmVsIiwiYmFzZW5hbWUiLCJlZGl0IiwicmVtb3ZlIiwibWFrZVpvb21hYmxlIiwiZWwiLCIkIiwiJGVsIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2x1bWlub3VzX2xpZ2h0Ym94X19fZGVmYXVsdCIsImEiLCJjbG9zZU9uU2Nyb2xsIiwiY2FwdGlvbkF0dHJpYnV0ZSIsImNsb3NlRWRpdG9yIiwiYXNzZXRTYXZlZCIsImJsYW5rIiwic29ydGFibGVPcHRpb25zIiwiYXV0b0JpbmRDaGFuZ2VXYXRjaGVyIiwiY2hhbmdlV2F0Y2hlcldhdGNoRGVlcCIsImFjY29yZGlvbk1vZGUiLCJnZXRBY2NvcmRpb25Nb2RlRnJvbVN0b3JhZ2UiLCJjb2xsYXBzZUFsbCIsInNldENvbmZpZyIsImZpbmRXaGVyZSIsInNldHMiLCJkZWxldGVTZXQiLCJpbmRleCIsInNwbGljZSIsImV4cGFuZEFsbCIsIiRyZWZzIiwic2V0IiwiZXhwYW5kIiwic2V0QWNjb3JkaW9uTW9kZSIsImNvbGxhcHNlIiwibW9kZSIsInN0b3JlZCIsImNvbGxhcHNlZFByZXZpZXciLCJoYXNNdWx0aXBsZUZpZWxkcyIsImlzSGlkZGVuIiwiZ2V0Q29sbGFwc2VkUHJldmlldyIsImRlZXAiLCJoYW5kbGVyIiwiVnVlIiwiJGNoaWxkcmVuIiwiZmllbGR0eXBlIiwicmVwbGljYXRvcl9wcmV2aWV3IiwiZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpbHRlciIsInQiLCJ1bmRlZmluZWQiLCJqb2luIiwiZm9jdXMiLCJmaWVsZENsYXNzZXMiLCJjb21wb25lbnROYW1lIiwicmVwbGFjZSIsInNlbGVjdG9yVmlld01vZGUiLCJzaG93QXNzZXRTZWxlY3RvciIsImFzc2V0c0VuYWJsZWQiLCJnZXRGaWVsZHR5cGVDb25maWciLCJyZXN0cmljdEFzc2V0TmF2aWdhdGlvbiIsInJlc3RyaWN0X2Fzc2V0cyIsIkNvb2tpZXMiLCJhZGRBc3NldCIsImNsb3NlQXNzZXRTZWxlY3RvciIsImRlZmF1bHRUYWdzIiwic2NyaXB0IiwiYXR0clJlZ2V4cENhY2hlIiwiZ2V0QXR0clZhbHVlIiwiYXR0ciIsInJlZ2V4cCIsIlJlZ0V4cCIsImdldEF0dHJSZWdleHAiLCJnZXRUYWdSZWdleHAiLCJhbmNob3JlZCIsImFkZFRhZ3MiLCJmcm9tIiwidG8iLCJ0YWciLCJkZXN0IiwicGFyc2VyQ29uZmlnIiwiZ2V0TW9kZSIsInRhZ3MiLCJjb25maWdUYWdzIiwiY29uZmlnU2NyaXB0Iiwic2NyaXB0VHlwZXMiLCJtYXRjaGVzIiwiaHRtbCIsImh0bWxTdGF0ZSIsIm1vZGVTcGVjIiwidGFnSW5mbyIsInRhZ1RleHQiLCJzcGVjIiwiZmluZE1hdGNoaW5nTW9kZSIsImVuZFRhZ0EiLCJlbmRUYWciLCJsb2NhbFN0YXRlIiwibG9jYWxNb2RlIiwicGF0IiwiY3VyIiwiY2xvc2UiLCJzZWFyY2giLCJiYWNrVXAiLCJtYXliZUJhY2t1cCIsImNvcHlTdGF0ZSIsImxvY2FsIiwibGluZSIsImlubmVyTW9kZSIsImNvbnRlbnQiLCJzdGF0ZW1lbnRJbmRlbnQiLCJqc29ubGRNb2RlIiwianNvbmxkIiwianNvbk1vZGUiLCJqc29uIiwiaXNUUyIsInR5cGVzY3JpcHQiLCJ3b3JkUkUiLCJ3b3JkQ2hhcmFjdGVycyIsImtleXdvcmRzIiwia3ciLCJBIiwiQiIsIkMiLCJEIiwib3BlcmF0b3IiLCJhdG9tIiwiaWYiLCJ3aGlsZSIsIndpdGgiLCJlbHNlIiwiZG8iLCJ0cnkiLCJmaW5hbGx5IiwicmV0dXJuIiwiYnJlYWsiLCJjb250aW51ZSIsIm5ldyIsInZvaWQiLCJ0aHJvdyIsImRlYnVnZ2VyIiwidmFyIiwiY29uc3QiLCJsZXQiLCJmdW5jdGlvbiIsImNhdGNoIiwiZm9yIiwic3dpdGNoIiwiY2FzZSIsImluIiwidHlwZW9mIiwiaW5zdGFuY2VvZiIsInRydWUiLCJmYWxzZSIsIm51bGwiLCJOYU4iLCJJbmZpbml0eSIsImNsYXNzIiwic3VwZXIiLCJ5aWVsZCIsImV4cG9ydCIsImltcG9ydCIsImV4dGVuZHMiLCJhd2FpdCIsImlzT3BlcmF0b3JDaGFyIiwiaXNKc29ubGRLZXl3b3JkIiwicmV0IiwidHAiLCJjb250IiwidG9rZW5CYXNlIiwiZXNjYXBlZCIsInBlZWsiLCJ0b2tlbkNvbW1lbnQiLCJza2lwVG9FbmQiLCJleHByZXNzaW9uQWxsb3dlZCIsImluU2V0IiwicmVhZFJlZ2V4cCIsInRva2VuUXVhc2kiLCJsZXhpY2FsIiwid29yZCIsImxhc3RUeXBlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJtYXliZUVuZCIsImJyYWNrZXRzIiwiZmluZEZhdEFycm93IiwiZmF0QXJyb3dBdCIsImFycm93Iiwic3RyaW5nIiwic3RhcnQiLCJtIiwic2xpY2UiLCJzYXdTb21ldGhpbmciLCJwb3MiLCJjaGFyQXQiLCJicmFja2V0IiwiYXRvbWljVHlwZXMiLCJudW1iZXIiLCJ2YXJpYWJsZSIsImpzb25sZC1rZXl3b3JkIiwiSlNMZXhpY2FsIiwiYWxpZ24iLCJpbmZvIiwiaW5TY29wZSIsInZhcm5hbWUiLCJsb2NhbFZhcnMiLCJjeCIsInZhcnMiLCJtYXJrZWQiLCJjYyIsInBhc3MiLCJhcmd1bWVudHMiLCJhcHBseSIsInJlZ2lzdGVyIiwiaW5MaXN0IiwibGlzdCIsImdsb2JhbFZhcnMiLCJpc01vZGlmaWVyIiwiZGVmYXVsdFZhcnMiLCJwdXNoY29udGV4dCIsInBvcGNvbnRleHQiLCJwdXNobGV4Iiwib3V0ZXIiLCJsZXgiLCJwb3BsZXgiLCJleHBlY3QiLCJ3YW50ZWQiLCJleHAiLCJzdGF0ZW1lbnQiLCJ2YXJkZWYiLCJwYXJlbkV4cHIiLCJtYXliZWV4cHJlc3Npb24iLCJibG9jayIsInBvcCIsIm1heWJlZWxzZSIsImZ1bmN0aW9uZGVmIiwiZm9yc3BlYyIsImNsYXNzTmFtZSIsImVudW1kZWYiLCJ0eXBlZXhwciIsInBhdHRlcm4iLCJleHByZXNzaW9uIiwibWF5YmVsYWJlbCIsImZ1bmFyZyIsImFmdGVyRXhwb3J0IiwiYWZ0ZXJJbXBvcnQiLCJleHByZXNzaW9uSW5uZXIiLCJleHByZXNzaW9uTm9Db21tYSIsIm5vQ29tbWEiLCJib2R5IiwiYXJyb3dCb2R5Tm9Db21tYSIsImFycm93Qm9keSIsImNvbW1hc2VwIiwibWF5YmVvcCIsIm1heWJlb3BlcmF0b3JOb0NvbW1hIiwibWF5YmVvcGVyYXRvckNvbW1hIiwiY2xhc3NFeHByZXNzaW9uIiwiYXJyYXlMaXRlcmFsIiwiY29udENvbW1hc2VwIiwib2JqcHJvcCIsInF1YXNpIiwidGFyZ2V0Tm9Db21tYSIsInRhcmdldCIsIm1heWJlVHlwZUFyZ3MiLCJtYXliZVRhcmdldCIsIm1lIiwiZXhwciIsInByb3BlcnR5IiwiY29udGludWVRdWFzaSIsImdldHRlclNldHRlciIsImFmdGVycHJvcCIsIm1heWJldHlwZSIsIndoYXQiLCJlbmQiLCJzZXAiLCJwcm9jZWVkIiwibWF5YmVyZXR0eXBlIiwiaXNLVyIsImFmdGVyVHlwZSIsInR5cGVwcm9wIiwidHlwZWFyZyIsIm1heWJlUmV0dXJuVHlwZSIsInR5cGVwYXJhbSIsIm1heWJlVHlwZURlZmF1bHQiLCJtYXliZUFzc2lnbiIsInZhcmRlZkNvbnQiLCJwcm9wcGF0dGVybiIsIl90eXBlIiwiZm9yc3BlYzEiLCJmb3JzcGVjMiIsImZvcm1heWJlaW5vZiIsImZvcnNwZWMzIiwiY2xhc3NOYW1lQWZ0ZXIiLCJjbGFzc0JvZHkiLCJjbGFzc2ZpZWxkIiwibWF5YmVGcm9tIiwiZXhwb3J0RmllbGQiLCJpbXBvcnRTcGVjIiwibWF5YmVNb3JlSW1wb3J0cyIsIm1heWJlQXMiLCJlbnVtbWVtYmVyIiwiYmFzZWNvbHVtbiIsInBhcnNlSlMiLCJ0b3AiLCJmaXJzdENoYXIiLCJjIiwiY2xvc2luZyIsImlzQ29udGludWVkU3RhdGVtZW50IiwiZG91YmxlSW5kZW50U3dpdGNoIiwiYmxvY2tDb21tZW50Q29udGludWUiLCJsaW5lQ29tbWVudCIsImZvbGQiLCJjbG9zZUJyYWNrZXRzIiwic2tpcEV4cHJlc3Npb24iLCJyZWdpc3RlckhlbHBlciIsImtleVNldCIsImFycmF5IiwiaW5saW5lIiwicHJvcGVydHlLZXl3b3JkcyIsInJlc29sdmVNb2RlIiwib3ZlcnJpZGUiLCJ0b2tlbkhvb2tzIiwiZG9jdW1lbnRUeXBlcyIsIm1lZGlhVHlwZXMiLCJtZWRpYUZlYXR1cmVzIiwibWVkaWFWYWx1ZUtleXdvcmRzIiwibm9uU3RhbmRhcmRQcm9wZXJ0eUtleXdvcmRzIiwiZm9udFByb3BlcnRpZXMiLCJjb3VudGVyRGVzY3JpcHRvcnMiLCJjb2xvcktleXdvcmRzIiwidmFsdWVLZXl3b3JkcyIsImFsbG93TmVzdGVkIiwic3VwcG9ydHNBdENvbXBvbmVudCIsInRva2VuU3RyaW5nIiwidG9rZW5QYXJlbnRoZXNpemVkIiwiQ29udGV4dCIsInB1c2hDb250ZXh0Iiwic3RhdGVzIiwicG9wQW5kUGFzcyIsIm4iLCJ3b3JkQXNWYWx1ZSIsInN0YXRlQXJnIiwibWF5YmVwcm9wIiwicHJvcEJsb2NrIiwicGFyZW5zIiwicHNldWRvIiwiYXRCbG9jayIsImF0Q29tcG9uZW50QmxvY2siLCJhdEJsb2NrX3BhcmVucyIsInJlc3RyaWN0ZWRfYXRCbG9ja19iZWZvcmUiLCJyZXN0cmljdGVkX2F0QmxvY2siLCJrZXlmcmFtZXMiLCJhdCIsImludGVycG9sYXRpb24iLCJNYXRoIiwibWF4IiwiZWxlY3RyaWNDaGFycyIsImRvY3VtZW50VHlwZXNfIiwibWVkaWFUeXBlc18iLCJtZWRpYUZlYXR1cmVzXyIsIm1lZGlhVmFsdWVLZXl3b3Jkc18iLCJwcm9wZXJ0eUtleXdvcmRzXyIsIm5vblN0YW5kYXJkUHJvcGVydHlLZXl3b3Jkc18iLCJjb2xvcktleXdvcmRzXyIsInZhbHVlS2V5d29yZHNfIiwiYWxsV29yZHMiLCJjb25jYXQiLCJ0b2tlbkNDb21tZW50IiwiLyIsIjoiLCIjIiwiQCIsIiYiLCJjbUNmZyIsIm1vZGVDZmciLCJodG1sTW9kZU1pc3NpbmciLCJoaWdobGlnaHRGb3JtYXR0aW5nIiwibWF4QmxvY2txdW90ZURlcHRoIiwidGFza0xpc3RzIiwic3RyaWtldGhyb3VnaCIsImVtb2ppIiwiZmVuY2VkQ29kZUJsb2NrSGlnaGxpZ2h0aW5nIiwieG1sIiwidG9rZW5UeXBlT3ZlcnJpZGVzIiwidG9rZW5UeXBlcyIsImNvZGUiLCJsaXN0MSIsImxpc3QyIiwibGlzdDMiLCJpbWFnZSIsImltYWdlQWx0VGV4dCIsImltYWdlTWFya2VyIiwiZm9ybWF0dGluZyIsImxpbmtJbmxpbmUiLCJsaW5rRW1haWwiLCJsaW5rVGV4dCIsImxpbmtIcmVmIiwiZW0iLCJzdHJvbmciLCJ0b2tlblR5cGUiLCJoclJFIiwibGlzdFJFIiwidGFza0xpc3RSRSIsImF0eEhlYWRlclJFIiwiYWxsb3dBdHhIZWFkZXJXaXRob3V0U3BhY2UiLCJzZXRleHRIZWFkZXJSRSIsInRleHRSRSIsImZlbmNlZENvZGVSRSIsImxpbmtEZWZSRSIsInB1bmN0dWF0aW9uIiwic3dpdGNoSW5saW5lIiwiZiIsInN3aXRjaEJsb2NrIiwiYmxhbmtMaW5lIiwibGlua1RpdGxlIiwiaW5kZW50ZWRDb2RlIiwiaHRtbEJsb2NrIiwiaW5saW5lTm9ybWFsIiwiYmxvY2tOb3JtYWwiLCJ0cmFpbGluZ1NwYWNlIiwidHJhaWxpbmdTcGFjZU5ld0xpbmUiLCJwcmV2TGluZSIsInRoaXNMaW5lIiwiZmlyc3RUb2tlbk9uTGluZSIsInByZXZMaW5lTGluZUlzRW1wdHkiLCJwcmV2TGluZUlzSW5kZW50ZWRDb2RlIiwicHJldkxpbmVJc0hyIiwicHJldkxpbmVJc0xpc3QiLCJtYXhOb25Db2RlSW5kZW50YXRpb24iLCJsaXN0U3RhY2siLCJsaW5lSW5kZW50YXRpb24iLCJpbmRlbnRhdGlvbkRpZmYiLCJhbGxvd3NJbmxpbmVDb250aW51YXRpb24iLCJmZW5jZWRDb2RlRW5kIiwiaXNIciIsImdldFR5cGUiLCJzZXRleHQiLCJsaXN0VHlwZSIsInRhc2tMaXN0IiwiZmVuY2VkRW5kUkUiLCJmaW5kTW9kZUJ5TmFtZSIsImZvdW5kIiwibWltZSIsIm1pbWVzIiwibG9va0FoZWFkIiwiZm9vdG5vdGVMaW5rIiwiaW5uZXIiLCJtZF9pbnNpZGUiLCJyZXR1cm5UeXBlIiwiY3Vyckxpc3RJbmQiLCJoYXNFeGl0ZWRMaXN0IiwibWF4RmVuY2VkRW5kSW5kIiwic3R5bGVzIiwidGFza09wZW4iLCJ0YXNrQ2xvc2VkIiwibGlzdE1vZCIsImhhbmRsZVRleHQiLCJtYXRjaENoIiwicmVnZXgiLCJwcmV2aW91c0Zvcm1hdHRpbmciLCJjb3VudCIsImZvcm1hdHRpbmdFc2NhcGUiLCJhdHRzIiwic3Vic3RyaW5nIiwibGVuIiwiYmVmb3JlIiwiYWZ0ZXIiLCJsZWZ0RmxhbmtpbmciLCJyaWdodEZsYW5raW5nIiwic2V0RW0iLCJzZXRTdHJvbmciLCJyZXRUeXBlIiwiZW5kQ2hhciIsInJldHVyblN0YXRlIiwibGlua1JFIiwiKSIsIl0iLCJmb290bm90ZUxpbmtJbnNpZGUiLCJmb290bm90ZVVybCIsInMiLCJ0eXBlQmVmb3JlIiwicHJldlRva2VuIiwidHlwZUF0RW5kT2ZMaW5lIiwiaXNUb3BTY29wZSIsIndvcmRzIiwic3RyIiwib2JqIiwiY3VyUHVuYyIsImlzRGVmS2V5d29yZCIsInN0YXRlbWVudEluZGVudFVuaXQiLCJkb250QWxpZ25DYWxscyIsInR5cGVzIiwiYnVpbHRpbiIsImJsb2NrS2V5d29yZHMiLCJkZWZLZXl3b3JkcyIsImF0b21zIiwiaG9va3MiLCJtdWx0aUxpbmVTdHJpbmdzIiwiaW5kZW50U3RhdGVtZW50cyIsImluZGVudFN3aXRjaCIsIm5hbWVzcGFjZVNlcGFyYXRvciIsImlzUHVuY3R1YXRpb25DaGFyIiwibnVtYmVyU3RhcnQiLCJpc0lkZW50aWZpZXJDaGFyIiwibWF5YmVFT0wiLCJ0eXBlRmlyc3REZWZpbml0aW9ucyIsImN0eCIsInN0eWxlRGVmcyIsImRvbnRJbmRlbnRTdGF0ZW1lbnRzIiwiaG9vayIsImFsbG1hbkluZGVudGF0aW9uIiwiY0tleXdvcmRzIiwiY1R5cGVzIiwiY3BwSG9vayIsInBvaW50ZXJIb29rIiwiY3BwMTRMaXRlcmFsIiwiY3BwMTFTdHJpbmdIb29rIiwiY3BwMTFSYXdTdHJpbmdEZWxpbSIsInRva2VuUmF3U3RyaW5nIiwidG9rZW5BdFN0cmluZyIsImRlbGltIiwiZGVmIiwiYWRkIiwidG9rZW5UcmlwbGVTdHJpbmciLCIqIiwibW9kZVByb3BzIiwidSIsIlUiLCJMIiwiUiIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCJsYXN0VHdvIiwiXCIiLCInIiwiPSIsInRva2VuTmVzdGVkQ29tbWVudCIsInRyaXBsZXMiLCJpbnRlbmRTd2l0Y2giLCJ0cmlwbGVTdHJpbmciLCJza2lwVG8iLCJfc3RhdGUiLCJzdHJpbmdUb2tlbml6ZXIiLCJmaXJzdCIsInRvVXBwZXJDYXNlIiwidG9rZW5DZXlsb25TdHJpbmciLCJgIiwia2V5d29yZFJlZ2V4IiwiZXNjIiwibGl0ZXJhbCIsImtleUNvbCIsInBhaXIiLCJwYWlyU3RhcnQiLCJpbmxpbmVQYWlycyIsImlubGluZUxpc3QiLCJzdWdnZXN0S2V5Iiwib21pdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF92dWVfX19kZWZhdWx0IiwiZGVidWciLCJzaWxlbnQiLCJkZXZ0b29scyIsImpRdWVyeSIsIk1lZGl1bUVkaXRvciIsIm1vbWVudCIsInJhbmd5IiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJPQkpFQ1QiLCJGVU5DVElPTiIsIlVOREVGSU5FRCIsImRvbVJhbmdlUHJvcGVydGllcyIsImRvbVJhbmdlTWV0aG9kcyIsInRleHRSYW5nZVByb3BlcnRpZXMiLCJ0ZXh0UmFuZ2VNZXRob2RzIiwiaXNIb3N0TWV0aG9kIiwibyIsImlzSG9zdE9iamVjdCIsImlzSG9zdFByb3BlcnR5IiwiY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QiLCJ0ZXN0RnVuYyIsImFyZUhvc3RNZXRob2RzIiwiYXJlSG9zdE9iamVjdHMiLCJhcmVIb3N0UHJvcGVydGllcyIsImlzVGV4dFJhbmdlIiwicmFuZ2UiLCJnZXRCb2R5IiwiZG9jIiwiZXh0ZW5kIiwiYWRkTGlzdGVuZXIiLCJtb2R1bGVzIiwiaXNCcm93c2VyIiwidXRpbCIsImFyciIsImZ1bmMiLCJhcGkiLCJpbml0aWFsaXplZCIsInN1cHBvcnRlZCIsImZlYXR1cmVzIiwiYWxlcnRPbkZhaWwiLCJhbGVydE9uV2FybiIsInByZWZlclRleHRSYW5nZSIsImF1dG9Jbml0aWFsaXplIiwicmFuZ3lBdXRvSW5pdGlhbGl6ZSIsImNvbnNvbGVMb2ciLCJtc2ciLCJjb25zb2xlIiwibG9nIiwiYWxlcnRPckxvZyIsInNob3VsZEFsZXJ0IiwiYWxlcnQiLCJmYWlsIiwicmVhc29uIiwid2FybiIsInRvU3RyaW5nIiwiY3JlYXRlT3B0aW9ucyIsIm9wdGlvbnNQYXJhbSIsInRvQXJyYXkiLCJhcHBlbmRDaGlsZCIsImNhbGwiLCJjaGlsZE5vZGVzIiwibm9kZVR5cGUiLCJhcnJheUxpa2UiLCJldmVudFR5cGUiLCJsaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImluaXRMaXN0ZW5lcnMiLCJnZXRFcnJvckRlc2MiLCJleCIsIm1lc3NhZ2UiLCJkZXNjcmlwdGlvbiIsIlN0cmluZyIsImluaXQiLCJ0ZXN0UmFuZ2UiLCJpbXBsZW1lbnRzRG9tUmFuZ2UiLCJpbXBsZW1lbnRzVGV4dFJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJub2RlTmFtZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vZHVsZU5hbWUiLCJNb2R1bGUiLCJkZXByZWNhdGlvbk5vdGljZSIsImRlcHJlY2F0ZWQiLCJyZXBsYWNlbWVudCIsImNyZWF0ZUFsaWFzRm9yRGVwcmVjYXRlZE1ldGhvZCIsIm93bmVyIiwiYWRkSW5pdExpc3RlbmVyIiwic2hpbUxpc3RlbmVycyIsImRlcGVuZGVuY2llcyIsImluaXRpYWxpemVyIiwiY3JlYXRlTW9kdWxlIiwiaW5pdEZ1bmMiLCJuZXdNb2R1bGUiLCJzdGFjayIsIlJhbmdlUHJvdG90eXBlIiwiYWRkU2hpbUxpc3RlbmVyIiwic2hpbSIsImNyZWF0ZU1pc3NpbmdOYXRpdmVBcGkiLCJ3aW4iLCJwcm90b3R5cGUiLCJyZXF1aXJlZE1vZHVsZSIsInJlcXVpcmVkTW9kdWxlTmFtZXMiLCJFcnJvciIsImNyZWF0ZUVycm9yIiwiY3JlYXRlQ29yZU1vZHVsZSIsInJhbmdlUHJvdG90eXBlIiwic2VsZWN0aW9uUHJvdG90eXBlIiwiVU5ERUYiLCJ0ZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwiYXJyYXlDb250YWlucyIsInZhbCIsImdldE5vZGVJbmRleCIsIm5vZGUiLCJwcmV2aW91c1NpYmxpbmciLCJnZXRDb21tb25BbmNlc3RvciIsIm5vZGUxIiwibm9kZTIiLCJhbmNlc3RvcnMiLCJwYXJlbnROb2RlIiwiaXNBbmNlc3Rvck9mIiwiYW5jZXN0b3IiLCJkZXNjZW5kYW50Iiwic2VsZklzQW5jZXN0b3IiLCJnZXRDbG9zZXN0QW5jZXN0b3JJbiIsImlzQ2hhcmFjdGVyRGF0YU5vZGUiLCJpbnNlcnRBZnRlciIsInByZWNlZGluZ05vZGUiLCJuZXh0Tm9kZSIsIm5leHRTaWJsaW5nIiwicGFyZW50IiwiaW5zZXJ0QmVmb3JlIiwiZ2V0RG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJnZXRJZnJhbWVEb2N1bWVudCIsImlmcmFtZUVsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudFdpbmRvdyIsImlzV2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5IiwiY3Jhc2h5VGV4dE5vZGVzIiwiaXNCcm9rZW5Ob2RlIiwiaW5zcGVjdE5vZGUiLCJpZEF0dHIiLCJOb2RlSXRlcmF0b3IiLCJyb290IiwiX25leHQiLCJEb21Qb3NpdGlvbiIsIm9mZnNldCIsIkRPTUV4Y2VwdGlvbiIsImNvZGVOYW1lIiwiZmlyc3RDaGlsZCIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wTmFtZSIsImRvY3VtZW50RWxlbWVudCIsImN1cnJlbnRTdHlsZSIsIl9jdXJyZW50IiwiaGFzTmV4dCIsImNoaWxkIiwiZGV0YWNoIiwiZXF1YWxzIiwiaW5zcGVjdCIsIklOREVYX1NJWkVfRVJSIiwiSElFUkFSQ0hZX1JFUVVFU1RfRVJSIiwiV1JPTkdfRE9DVU1FTlRfRVJSIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiTk9UX0ZPVU5EX0VSUiIsIk5PVF9TVVBQT1JURURfRVJSIiwiSU5WQUxJRF9TVEFURV9FUlIiLCJJTlZBTElEX05PREVfVFlQRV9FUlIiLCJkb20iLCJpc0h0bWxOYW1lc3BhY2UiLCJucyIsIm5hbWVzcGFjZVVSSSIsInBhcmVudEVsZW1lbnQiLCJnZXROb2RlTGVuZ3RoIiwiaXNPcklzQW5jZXN0b3JPZiIsImlzVGV4dE9yQ29tbWVudE5vZGUiLCJzcGxpdERhdGFOb2RlIiwicG9zaXRpb25zVG9QcmVzZXJ2ZSIsIm5ld05vZGUiLCJjbG9uZU5vZGUiLCJkZWxldGVEYXRhIiwicG9zaXRpb24iLCJnZXRJZnJhbWVXaW5kb3ciLCJnZXRDb250ZW50RG9jdW1lbnQiLCJtZXRob2ROYW1lIiwiZ2V0Um9vdENvbnRhaW5lciIsImNvbXBhcmVQb2ludHMiLCJub2RlQSIsIm9mZnNldEEiLCJub2RlQiIsIm9mZnNldEIiLCJub2RlQyIsImNoaWxkQSIsImNoaWxkQiIsImNyZWF0ZVRlc3RFbGVtZW50IiwiY29udGVudEVkaXRhYmxlIiwiYm9keUZpcnN0Q2hpbGQiLCJyZW1vdmVOb2RlIiwicmVtb3ZlQ2hpbGQiLCJmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4iLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVJdGVyYXRvciIsImlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkIiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJnZXRSYW5nZURvY3VtZW50IiwiZ2V0Qm91bmRhcnlCZWZvcmVOb2RlIiwiZ2V0Qm91bmRhcnlBZnRlck5vZGUiLCJpbnNlcnROb2RlQXRQb3NpdGlvbiIsImZpcnN0Tm9kZUluc2VydGVkIiwicmFuZ2VzSW50ZXJzZWN0IiwicmFuZ2VBIiwicmFuZ2VCIiwidG91Y2hpbmdJc0ludGVyc2VjdGluZyIsImFzc2VydFJhbmdlVmFsaWQiLCJzdGFydENvbXBhcmlzb24iLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImVuZENvbXBhcmlzb24iLCJpdGVyYXRlU3VidHJlZSIsInJhbmdlSXRlcmF0b3IiLCJpdGVyYXRvclN0YXRlIiwiaXQiLCJzdWJSYW5nZUl0ZXJhdG9yIiwic3RvcCIsImlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlIiwiZ2V0U3VidHJlZUl0ZXJhdG9yIiwiZGVsZXRlU3VidHJlZSIsIml0ZXJhdG9yIiwic3ViSXRlcmF0b3IiLCJleHRyYWN0U3VidHJlZSIsImZyYWciLCJnZXROYW1lIiwiUmFuZ2VJdGVyYXRvciIsImNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXMiLCJjb2xsYXBzZWQiLCJzYyIsInNvIiwiZWMiLCJlbyIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSIsIl9maXJzdCIsIl9sYXN0IiwicmVzZXQiLCJzdWJSYW5nZSIsImNsb25lUmFuZ2UiLCJSYW5nZSIsInVwZGF0ZUJvdW5kYXJpZXMiLCJiZWZvcmVBZnRlck5vZGVUeXBlcyIsInJvb3RDb250YWluZXJOb2RlVHlwZXMiLCJpbnNlcnRhYmxlTm9kZVR5cGVzIiwic3Vycm91bmROb2RlVHlwZXMiLCJjcmVhdGVBbmNlc3RvckZpbmRlciIsIm5vZGVUeXBlcyIsImdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lciIsImdldFJlYWRvbmx5QW5jZXN0b3IiLCJnZXREb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3RvciIsImFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3IiLCJhbGxvd1NlbGYiLCJhc3NlcnRWYWxpZE5vZGVUeXBlIiwiaW52YWxpZFR5cGVzIiwiYXNzZXJ0VmFsaWRPZmZzZXQiLCJhc3NlcnRTYW1lRG9jdW1lbnRPckZyYWdtZW50IiwiYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5IiwiYXNzZXJ0Tm9kZSIsImlzVmFsaWRPZmZzZXQiLCJpc1JhbmdlVmFsaWQiLCJzdHlsZUVsIiwiaHRtbFBhcnNpbmdDb25mb3JtcyIsImNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCIsImZyYWdtZW50U3RyIiwic3BsaXRSYW5nZUJvdW5kYXJpZXMiLCJzdGFydEVuZFNhbWUiLCJzZXRTdGFydEFuZEVuZCIsInJhbmdlVG9IdG1sIiwiY2xvbmVDb250ZW50cyIsInJhbmdlUHJvcGVydGllcyIsInMycyIsInMyZSIsImUyZSIsImUycyIsIm5fYiIsIm5fYSIsIm5fYl9hIiwibl9pIiwiY29weUNvbXBhcmlzb25Db25zdGFudHNUb09iamVjdCIsIlNUQVJUX1RPX1NUQVJUIiwiU1RBUlRfVE9fRU5EIiwiRU5EX1RPX0VORCIsIkVORF9UT19TVEFSVCIsIk5PREVfQkVGT1JFIiwiTk9ERV9BRlRFUiIsIk5PREVfQkVGT1JFX0FORF9BRlRFUiIsIk5PREVfSU5TSURFIiwiY29weUNvbXBhcmlzb25Db25zdGFudHMiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIiLCJyZW1vdmVyIiwiYm91bmRhcnlVcGRhdGVyIiwiYm91bmRhcnkiLCJyZXR1cm5WYWx1ZSIsImNyZWF0ZVByb3RvdHlwZVJhbmdlIiwiY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyIiwiaXNCZWZvcmUiLCJpc1N0YXJ0Iiwic2V0UmFuZ2VTdGFydCIsInNldFJhbmdlRW5kIiwiRiIsInNldFN0YXJ0Iiwic2V0RW5kIiwiYXJncyIsInNldEJvdW5kYXJ5Iiwic2V0U3RhcnRCZWZvcmUiLCJzZXRTdGFydEFmdGVyIiwic2V0RW5kQmVmb3JlIiwic2V0RW5kQWZ0ZXIiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJzZWxlY3ROb2RlIiwiZXh0cmFjdENvbnRlbnRzIiwiZGVsZXRlQ29udGVudHMiLCJjYW5TdXJyb3VuZENvbnRlbnRzIiwiYm91bmRhcmllc0ludmFsaWQiLCJzcGxpdEJvdW5kYXJpZXMiLCJzcGxpdEJvdW5kYXJpZXNQcmVzZXJ2aW5nUG9zaXRpb25zIiwibm9ybWFsaXplQm91bmRhcmllcyIsInNpYmxpbmciLCJtZXJnZUZvcndhcmQiLCJhcHBlbmREYXRhIiwibWVyZ2VCYWNrd2FyZCIsIm5vZGVMZW5ndGgiLCJpbnNlcnREYXRhIiwibm9kZUluZGV4Iiwibm9ybWFsaXplU3RhcnQiLCJlbmROb2RlIiwic3RhcnROb2RlIiwiY29sbGFwc2VUb1BvaW50IiwidXBkYXRlQ29sbGFwc2VkQW5kQ29tbW9uQW5jZXN0b3IiLCJjb21wYXJlQm91bmRhcnlQb2ludHMiLCJob3ciLCJwcmVmaXhBIiwicHJlZml4QiIsImluc2VydE5vZGUiLCJjbG9uZSIsImNsb25lU3VidHJlZSIsInBhcnRpYWxseVNlbGVjdGVkIiwic3Vycm91bmRDb250ZW50cyIsImhhc0NoaWxkTm9kZXMiLCJsYXN0Q2hpbGQiLCJ0ZXh0UGFydHMiLCJjb21wYXJlTm9kZSIsImNvbXBhcmVQb2ludCIsInRvSHRtbCIsImludGVyc2VjdHNOb2RlIiwiaXNQb2ludEluUmFuZ2UiLCJpbnRlcnNlY3RzUmFuZ2UiLCJpbnRlcnNlY3RzT3JUb3VjaGVzUmFuZ2UiLCJpbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3Rpb25SYW5nZSIsInVuaW9uIiwidW5pb25SYW5nZSIsImNvbnRhaW5zTm9kZSIsImFsbG93UGFydGlhbCIsImNvbnRhaW5zTm9kZUNvbnRlbnRzIiwiY29udGFpbnNSYW5nZSIsImNvbnRhaW5zTm9kZVRleHQiLCJub2RlUmFuZ2UiLCJ0ZXh0Tm9kZXMiLCJnZXROb2RlcyIsImxhc3RUZXh0Tm9kZSIsImZpbHRlck5vZGVUeXBlcyIsImZpbHRlckV4aXN0cyIsIm5vZGVzIiwiZ2V0Tm9kZXNJblJhbmdlIiwiY29sbGFwc2VCZWZvcmUiLCJjb2xsYXBzZUFmdGVyIiwiZ2V0Qm9va21hcmsiLCJjb250YWluZXJOb2RlIiwicHJlU2VsZWN0aW9uUmFuZ2UiLCJtb3ZlVG9Cb29rbWFyayIsImJvb2ttYXJrIiwiY2hhckluZGV4IiwibmV4dENoYXJJbmRleCIsIm5vZGVTdGFjayIsImZvdW5kU3RhcnQiLCJyYW5nZXNFcXVhbCIsImlzVmFsaWQiLCJyMSIsInIyIiwiRG9tUmFuZ2UiLCJXcmFwcGVkUmFuZ2UiLCJXcmFwcGVkVGV4dFJhbmdlIiwicmFuZ2VQcm90byIsInVwZGF0ZVJhbmdlUHJvcGVydGllcyIsIm5hdGl2ZVJhbmdlIiwic3RhcnRNb3ZlZCIsImVuZE1vdmVkIiwibmF0aXZlUmFuZ2VEaWZmZXJlbnQiLCJyZWZyZXNoIiwidGVzdFRleHROb2RlIiwib3Bwb3NpdGVOYW1lIiwicmFuZ2UyIiwiY3JlYXRlTmF0aXZlUmFuZ2UiLCJnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uIiwidGV4dFJhbmdlIiwid2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQiLCJpc0NvbGxhcHNlZCIsInN0YXJ0SW5mbyIsIndvcmtpbmdSYW5nZSIsImR1cGxpY2F0ZSIsImNvbnRhaW5lckVsZW1lbnQiLCJjYW5IYXZlSFRNTCIsImJvdW5kYXJ5UG9zaXRpb24iLCJub2RlSW5mbyIsIndvcmtpbmdOb2RlIiwiY29tcGFyaXNvbiIsInByZXZpb3VzTm9kZSIsImJvdW5kYXJ5Tm9kZSIsIndvcmtpbmdDb21wYXJpc29uVHlwZSIsImNoaWxkTm9kZUNvdW50IiwibW92ZVRvRWxlbWVudFRleHQiLCJjb21wYXJlRW5kUG9pbnRzIiwiZmxvb3IiLCJzZXRFbmRQb2ludCIsInRlbXBSYW5nZSIsInJhbmdlTGVuZ3RoIiwibW92ZVN0YXJ0IiwiY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UiLCJib3VuZGFyeVBhcmVudCIsImJvdW5kYXJ5T2Zmc2V0Iiwibm9kZUlzRGF0YU5vZGUiLCJzdGFydEJvdW5kYXJ5IiwicmFuZ2VDb250YWluZXJFbGVtZW50IiwicGFyZW50RWwiLCJzdGFydEVsIiwiZW5kRWwiLCJzdGFydEVuZENvbnRhaW5lciIsImdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQiLCJyYW5nZVRvVGV4dFJhbmdlIiwic3RhcnRSYW5nZSIsImVuZFJhbmdlIiwidG9UZXh0UmFuZ2UiLCJnbG9iYWxPYmoiLCJGdW5jdGlvbiIsImNyZWF0ZVJhbmd5UmFuZ2UiLCJjaGVja1NlbGVjdGlvblJhbmdlcyIsImdldE5hdGl2ZVNlbGVjdGlvbiIsInNlbGVjdGlvbklzQ29sbGFwc2VkIiwiaXNEaXJlY3Rpb25CYWNrd2FyZCIsIldyYXBwZWRTZWxlY3Rpb24iLCJnZXREb2NTZWxlY3Rpb24iLCJ3aW5QYXJhbSIsInNlbGVjdGlvbiIsIndpblNlbGVjdGlvbklzQmFja3dhcmQiLCJzZWwiLCJiYWNrd2FyZCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24iLCJpbXBsZW1lbnRzRG9jU2VsZWN0aW9uIiwidXNlRG9jdW1lbnRTZWxlY3Rpb24iLCJpc1NlbGVjdGlvblZhbGlkIiwibmF0aXZlU2VsIiwiZ2V0U2VsZWN0aW9uIiwidGVzdFNlbGVjdGlvbiIsInNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzIiwic2VsZWN0aW9uSGFzRXh0ZW5kIiwic2VsZWN0aW9uSGFzUmFuZ2VDb3VudCIsInJhbmdlQ291bnQiLCJzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzIiwiY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkIiwiYWRkUmFuZ2VCYWNrd2FyZFRvTmF0aXZlIiwibmF0aXZlU2VsZWN0aW9uIiwiYWRkUmFuZ2UiLCJnZXROYXRpdmVSYW5nZSIsIm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VDb3VudCIsInNlbGVjdGlvbkhhc011bHRpcGxlUmFuZ2VzIiwib3JpZ2luYWxTZWxlY3Rpb25SYW5nZXMiLCJvcmlnaW5hbFNlbGVjdGlvbkJhY2t3YXJkIiwiZ2V0UmFuZ2VBdCIsInRlc3RFbCIsInJlbW92ZUFsbFJhbmdlcyIsImNocm9tZU1hdGNoIiwiYXBwVmVyc2lvbiIsInBhcnNlSW50IiwidGVzdENvbnRyb2xSYW5nZSIsImdldFNlbGVjdGlvblJhbmdlQXQiLCJpbXBsZW1lbnRzQ29udHJvbFJhbmdlIiwidXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UiLCJhbmNob3JQcmVmaXgiLCJmb2N1c1ByZWZpeCIsInVwZGF0ZUVtcHR5U2VsZWN0aW9uIiwiX3JhbmdlcyIsImdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UiLCJyYW5nZU5vZGVzIiwicmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQiLCJ1cGRhdGVGcm9tVGV4dFJhbmdlIiwid3JhcHBlZFJhbmdlIiwidXBkYXRlQ29udHJvbFNlbGVjdGlvbiIsImRvY1NlbGVjdGlvbiIsImNvbnRyb2xSYW5nZSIsIml0ZW0iLCJhZGRSYW5nZVRvQ29udHJvbFNlbGVjdGlvbiIsInJhbmdlRWxlbWVudCIsIm5ld0NvbnRyb2xSYW5nZSIsImNyZWF0ZUNvbnRyb2xSYW5nZSIsImRlbGV0ZVByb3BlcnRpZXMiLCJkZXRhY2hlZCIsImNhY2hlZFJhbmd5U2VsZWN0aW9ucyIsImFjdE9uQ2FjaGVkU2VsZWN0aW9uIiwiYWN0aW9uIiwiY2FjaGVkIiwiZG9jU2VsIiwicmVmcmVzaFNlbGVjdGlvbiIsInNlbFByb3RvIiwiY3JlYXRlQ29udHJvbFNlbGVjdGlvbiIsInJhbmdlcyIsImFkZFJhbmdlQmFja3dhcmQiLCJkaXJlY3Rpb24iLCJwcmV2aW91c1JhbmdlQ291bnQiLCJjbG9uZWROYXRpdmVSYW5nZSIsInNlbGVjdGlvbklzQmFja3dhcmQiLCJzZXRSYW5nZXMiLCJlbXB0eSIsInVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbiIsImNoZWNrRm9yQ2hhbmdlcyIsIm9sZFJhbmdlcyIsIm9sZEFuY2hvck5vZGUiLCJvbGRBbmNob3JPZmZzZXQiLCJyZW1vdmVSYW5nZU1hbnVhbGx5IiwiZ2V0QWxsUmFuZ2VzIiwiYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50IiwiY3JlYXRlU3RhcnRPckVuZFNldHRlciIsInNldFNpbmdsZVJhbmdlIiwiaXNCYWNrd2FyZCIsInJhbmdlSW5zcGVjdHMiLCJhbmNob3IiLCJyZW1vdmVSYW5nZSIsInJlbW92ZWQiLCJpc0JhY2t3YXJkcyIsInJhbmdlVGV4dHMiLCJjb2xsYXBzZVRvU3RhcnQiLCJjb2xsYXBzZVRvRW5kIiwic2VsZWN0QWxsQ2hpbGRyZW4iLCJkZWxldGVGcm9tRG9jdW1lbnQiLCJlbGVtZW50IiwiZWFjaFJhbmdlIiwiY2FsbE1ldGhvZE9uRWFjaFJhbmdlIiwicGFyYW1zIiwicmVzdWx0cyIsImNoYW5nZUVhY2hSYW5nZSIsInJhbmdlQm9va21hcmtzIiwicmFuZ2VCb29rbWFyayIsInNlbFJhbmdlcyIsInNhdmVSYW5nZXMiLCJyZXN0b3JlUmFuZ2VzIiwicmFuZ2VIdG1scyIsImdldE5hdGl2ZVRleHRSYW5nZSIsImRldGFjaEFsbCIsIlNlbGVjdGlvbiIsImRvY1JlYWR5IiwibG9hZEhhbmRsZXIiLCJyZWFkeVN0YXRlIiwidXNlIiwiaHR0cCIsImhlYWRlcnMiLCJjb21tb24iLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwiaW50ZXJjZXB0b3JzIiwic3RhdHVzIiwic2hvd0xvZ2luTW9kYWwiLCJnbG9iYWwiLCJjcFJvb3QiLCJyZXNvdXJjZV91cmwiLCJyZXNvdXJjZVVybCIsImdldF9mcm9tX3NlZ21lbnQiLCJ1cmxQYXRoIiwiZm9ybWF0X2lucHV0X29wdGlvbnMiLCJmb3JtYXR0ZWQiLCJmaWxlX2ljb24iLCJkYXRhX2dldCIsInJlZHVjZSIsIngiLCIyNSIsIjMzIiwiNTAiLCI2NiIsIjc1IiwiMTAwIiwibWl4aW4iLCJvYmpNYXAiLCJtYXBwZXIiLCJrIiwib2JqRmlsdGVyIiwib2JqUmVqZWN0IiwiZm4iLCJ3aXRoaW4iLCJwU2VsZWN0b3IiLCJjbG9zZXN0IiwiUmVkYWN0b3IiLCJ2dWUiLCJidXR0b24iLCJhZGRDYWxsYmFjayIsInNhdmUiLCIkZWRpdG9yIiwiX192dWVfXyIsIkxhbmciLCJzZXRNZXNzYWdlcyIsIm1lc3NhZ2VzIiwicmVwbGFjZW1lbnRzIiwiX2dldE1lc3NhZ2UiLCJfYXBwbHlSZXBsYWNlbWVudHMiLCJjaG9pY2UiLCJtZXNzYWdlUGFydHMiLCJleHBsaWNpdFJ1bGVzIiwidHJpbSIsIm1lc3NhZ2VTcGFjZVNwbGl0Iiwic2hpZnQiLCJfdGVzdEludGVydmFsIiwiX3BhcnNlS2V5Iiwic2VnbWVudHMiLCJlbnRyaWVzIiwiaW50ZXJ2YWwiLCJsYW5nIiwic2x1ZyIsIm1ha2VUaXRsZSIsInRyYW5zbGF0aW9ucyIsInBsdWdpbnNfY3BfdXJsIiwiaW5zdGFsbCIsInBsdWdpbnNfdHJhbnNsYXRlIiwicGx1Z2luc19yZXNvdXJjZV91cmwiLCJwbHVnaW5zX2ZpbGVfaWNvbiIsInNsdWdpZnkiLCIkc2x1Z2lmeSIsImdsdWUiLCJzZXBhcmF0b3IiLCJ2dWVfY29tbW9uX2RlZmF1bHQiLCJwZXJtaXNzaW9ucyIsInBhcnNlIiwiYXRvYiIsInBlcm1pc3Npb24iLCJwYXJ0cyIsImNhc2NhZGUiLCJ3IiwicmV2ZXJzZSIsInBsdWNrZWQiLCJzZXRPcHRpb25zIiwiZ2ZtIiwiYnJlYWtzIiwibWFya2Rvd25IYXJkV3JhcCIsInRhYmxlcyIsInNvcnRLZXkiLCJvcmRlciIsInNvcnQiLCJiIiwiaXNPYmplY3QiLCIkdmFsdWUiLCJwYXJzZXJzIiwiZ2V0UGF0aCIsIkRvc3NpZXIiLCJEb3NzaWVyX2RlZmF1bHQiLCJGaWVsZHR5cGUiLCJsZWF2ZUFsZXJ0IiwiY2hhbmdlV2F0Y2hlcklzQm91bmQiLCJpc0luc2lkZUdyaWRGaWVsZCIsInZtIiwiYmluZENoYW5nZVdhdGNoZXIiLCJBdXRvU2x1ZyIsImF1dG9TbHVnT3B0aW9ucyIsImlzQWN0aXZlIiwiYXV0b1NsdWdQdWJsaXNoRmllbGRzQ29tcG9uZW50IiwiYXV0b1NsdWciLCJmcm9tVmFsIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19QYWdpbmF0ZXNfXyIsImxvYWRpbmciLCJpdGVtcyIsImNvbHVtbnMiLCJzb3J0T3JkZXIiLCJyZW9yZGVyaW5nIiwic2VhcmNoVGVybSIsImhhc0l0ZW1zIiwibm9JdGVtcyIsImNoZWNrZWRJdGVtcyIsImNoZWNrZWQiLCJhbGxJdGVtc0NoZWNrZWQiLCJpc1NlYXJjaGluZyIsImdldFBhcmFtZXRlcnMiLCJwYWdlIiwic2VsZWN0ZWRQYWdlIiwiZ2V0SXRlbXMiLCJ0ZXJtIiwicGVyZm9ybVNlYXJjaCIsImRvc3NpZXItdGFibGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0Rvc3NpZXJUYWJsZV92dWVfX19kZWZhdWx0IiwiYWpheCIsInJlcXVlc3QiLCJwYXJzZUNvbHVtbnMiLCJwYWdpbmF0aW9uIiwiJG5vdGlmeSIsInNvcnRCeSIsInJlbW92ZUl0ZW1Gcm9tTGlzdCIsImRlbGV0ZU11bHRpcGxlIiwic2VsZiIsImlkcyIsImRlbGV0ZUl0ZW0iLCJlbmFibGVSZW9yZGVyIiwiJGJyb2FkY2FzdCIsImNhbmNlbE9yZGVyIiwic2F2ZU9yZGVyIiwicG9zdCIsInJlb3JkZXIiLCJsaW5rQ29sdW1uVW5kZWZpbmVkIiwiaGVhZGVyRmFsbGJhY2siLCJleHRyYSIsInBhcnRpYWxzIiwiY2VsbCIsImhhc0NoZWNrYm94ZXMiLCJjaGVja2JveGVzIiwiaXRlbXNBcmVDaGVja2VkIiwiaGFzSGVhZGVycyIsImhhc0FjdGlvbnMiLCJhY3Rpb25zIiwic2hvd0J1bGtBY3Rpb25zIiwicmVvcmRlcmFibGUiLCJiZWZvcmVDb21waWxlIiwiJG9wdGlvbnMiLCJyZWdpc3RlclBhcnRpYWxzIiwicGFydGlhbCIsImNoZWNrQWxsSXRlbXMiLCJ1bmNoZWNrQWxsSXRlbXMiLCIkZWxzIiwic29ydGFibGUiLCJheGlzIiwicmV2ZXJ0IiwicGxhY2Vob2xkZXIiLCJmb3JjZVBsYWNlaG9sZGVyU2l6ZSIsInVpIiwidXBkYXRlIiwiZGlzYWJsZVJlb3JkZXIiLCJtZXRob2QiLCJBcnJheSIsInBhZ2luYXRpb25QYWdlU2VsZWN0ZWQiLCJpc0NvbHVtbkFjdGl2ZSIsInRhYmxlQ29sV2lkdGgiLCJlbmRzV2l0aCIsImZvcm1hdFZhbHVlIiwiX3R5cGVvZiIsImlzQXJyYXkiLCJyZW9yZGVyaW5nLnN0YXJ0IiwicmVvcmRlcmluZy5zYXZlZCIsInJlb3JkZXJpbmcuc3RvcCIsIkhhc0xvY2FsZVNlbGVjdG9yIiwiSGFzU2hvd0RyYWZ0c1NlbGVjdG9yIiwidGFibGVPcHRpb25zIiwiZHJhZnRzIiwiY3JlYXRlRW50cnlVcmwiLCJjcmVhdGVFbnRyeVJvdXRlIiwiYWRkQWN0aW9uUGFydGlhbCIsImNhbkNyZWF0ZSIsImNhbkRlbGV0ZSIsInJlZGlyZWN0IiwiY29tcG9uZW50IiwiTW92ZXIiLCJzaG93QXNzZXRNb3ZlciIsImJpbmRCcm93c2VyTmF2aWdhdGlvbiIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJvbnBvcHN0YXRlIiwicHVzaFN0YXRlIiwibmF2aWdhdGUiLCJ1cGRhdGVTZWxlY3Rpb25zIiwic2VsZWN0aW9ucyIsImRlbGV0ZVNlbGVjdGVkIiwib3BlbkFzc2V0TW92ZXIiLCJjbG9zZUFzc2V0TW92ZXIiLCJhc3NldHNNb3ZlZCIsInNlbGVjdGVkRm9sZGVyIiwid2FybmluZ1RleHQiLCJoYXNDaGFuZ2VkIiwiZmllbGR0eXBlQ29uZmlnIiwiY2FuY2VsIiwicGF5bG9hZCIsIkdyaWRMaXN0aW5nIiwiVGFibGVMaXN0aW5nIiwiVXBsb2FkZXIiLCJVcGxvYWRzIiwiRm9sZGVyRWRpdG9yIiwiQnJlYWRjcnVtYnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0RldGVjdHNGaWxlRHJhZ2dpbmdfXyIsImxvYWRpbmdBc3NldHMiLCJpbml0aWFsaXplZEFzc2V0cyIsImxvYWRpbmdDb250YWluZXJzIiwiY29udGFpbmVycyIsImRpc3BsYXlNb2RlIiwidXBsb2FkcyIsImVkaXRlZEFzc2V0SWQiLCJzaG93Rm9sZGVyQ3JlYXRvciIsImVkaXRlZEZvbGRlclBhdGgiLCJlZGl0b3JIYXNDaGlsZCIsImhhc0Fzc2V0cyIsImhhc1N1YmZvbGRlcnMiLCJpc0VtcHR5IiwiY2FuRWRpdCIsInNob3dTaWRlYmFyIiwicmVzdHJpY3ROYXZpZ2F0aW9uIiwibGlzdGluZ0NvbXBvbmVudCIsImZ1bGxQYXRoIiwidXBsb2FkRWxlbWVudCIsInNob3dBc3NldEVkaXRvciIsIkJvb2xlYW4iLCJzaG93Rm9sZGVyRWRpdG9yIiwibWF4RmlsZXNSZWFjaGVkIiwibWF4RmlsZXMiLCJzZWxlY3RlZFBhdGgiLCJsb2FkQ29udGFpbmVycyIsImNsb3NlLWVkaXRvciIsInJlZnJlc2gtYXNzZXRzIiwibG9hZEFzc2V0cyIsImRlbGV0ZS1hc3NldHMiLCJzZWxlY3RlZENvbnRhaW5lciIsInBpY2siLCJpbmRleEJ5IiwiY3VycmVudFBhZ2UiLCJfdGhpczMiLCJmb2xkZXJTZWxlY3RlZCIsInNlbGVjdENvbnRhaW5lciIsImFzc2V0U2VsZWN0ZWQiLCJhc3NldERlc2VsZWN0ZWQiLCJ3aXRob3V0IiwiX3RoaXM0IiwiZGlmZmVyZW5jZSIsImNsb3NlQXNzZXRFZGl0b3IiLCJhc3NldERlbGV0ZWQiLCJhc3NldE1vdmVkIiwidXBsb2FkRmlsZSIsInVwbG9hZGVyIiwiYnJvd3NlIiwiY3JlYXRlRm9sZGVyIiwiZm9sZGVyQ3JlYXRvckNsb3NlZCIsImZvbGRlckNyZWF0ZWQiLCJmb2xkZXJFZGl0b3JDbG9zZWQiLCJmb2xkZXJEZWxldGVkIiwidXBsb2Fkc1VwZGF0ZWQiLCIkc2V0Iiwic2V0RGlzcGxheU1vZGUiLCJhc3NldHNEcmFnZ2VkVG9Gb2xkZXIiLCJfdGhpczUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0xpc3RpbmdfXyIsIkFzc2V0VGlsZSIsIkZvbGRlclRpbGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0Fzc2V0X18iLCJpY29uIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19Gb2xkZXJfXyIsIkFzc2V0Um93IiwiRm9sZGVyUm93IiwiY2xvc2VEcm9wZG93bnMiLCJkcm9wcGVkT25Gb2xkZXIiLCJnZXREYXRhIiwiY2xlYXJEYXRhIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19Sb3dfXyIsImNsb3NlRHJvcGRvd25BbmRFZGl0QXNzZXQiLCJjbG9zZURyb3Bkb3duQW5kRGVsZXRlQXNzZXQiLCJleHRyYURhdGEiLCJfdG9rZW4iLCJiaW5kVXBsb2FkZXIiLCJkZXN0cm95ZWQiLCJkb21FbGVtZW50IiwidW5iaW5kIiwicmVtb3ZlRGF0YSIsIl91cGxvYWRzIiwidXBkYXRlRXh0cmFEYXRhIiwibmF0aXZlRmlsZUZpZWxkIiwiY2xpY2siLCJkbVVwbG9hZGVyIiwib25OZXdGaWxlIiwiZmlsZSIsInBlcmNlbnQiLCJlcnJvck1lc3NhZ2UiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwib25VcGxvYWRTdWNjZXNzIiwiZmluZEluZGV4Iiwib25Db21wbGV0ZSIsIm9uVXBsb2FkRXJyb3IiLCJlcnJNc2ciLCJyZXNwb25zZUpTT04iLCJzZXR0aW5ncyIsIlVwbG9hZCIsImNsZWFyVXBsb2FkIiwiY2xlYXIiLCJGb2NhbFBvaW50RWRpdG9yIiwiUmVuYW1lciIsIlB1Ymxpc2hGaWVsZHMiLCJoYXNDaGlsZCIsImFsbG93RGVsZXRpbmciLCJwdWJsaXNoRmllbGRzIiwic2hvd0ZvY2FsUG9pbnRFZGl0b3IiLCJzaG93UmVuYW1lciIsInNob3dNb3ZlciIsImhhc0Vycm9ycyIsInNpemUiLCJsb2FkIiwiY2xvc2UtY2hpbGQtZWRpdG9yIiwiY2xvc2VGb2NhbFBvaW50RWRpdG9yIiwiY2xvc2VJbWFnZUVkaXRvciIsImNsb3NlUmVuYW1lciIsImdldEZpZWxkc2V0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wdWJsaXNoX0ZpZWxkc2V0X18iLCJvcGVuRm9jYWxQb2ludEVkaXRvciIsInNlbGVjdEZvY2FsUG9pbnQiLCJwb2ludCIsInRpbWVvdXQiLCJjb25maXJtIiwib3BlblJlbmFtZXIiLCJhc3NldFJlbmFtZWQiLCJvcGVuTW92ZXIiLCJjbG9zZU1vdmVyIiwiZG93bmxvYWQiLCJvcGVuIiwiZG93bmxvYWRfdXJsIiwieSIsImJnUG9zaXRpb24iLCJiZ0ltYWdlIiwiZW5jb2RlVVJJIiwiY29vcmRzIiwiZGVmaW5lIiwiaW1hZ2VXIiwiaW1hZ2VIIiwiaGVpZ2h0Iiwib2Zmc2V0WCIsInBhZ2VYIiwibGVmdCIsIm9mZnNldFkiLCJwYWdlWSIsInRvRml4ZWQiLCJmaWxlbmFtZSIsIk1ldGFGaWVsZCIsIlJlZ3VsYXJGaWVsZCIsImF1dG9mb2N1cyIsInJlZ3VsYXJUaXRsZUZpZWxkIiwiZW52Iiwid2lkdGhUZXh0Iiwid2lkdGhzIiwiZGVmaW5lZEluRW52aXJvbm1lbnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0ZpZWxkX18iLCJEYXRlRmllbGQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX01ldGFGaWVsZHNfRGF0ZV92dWVfX19kZWZhdWx0IiwiU2x1Z0ZpZWxkIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19NZXRhRmllbGRzX1NsdWdfdnVlX19fZGVmYXVsdCIsIlRpdGxlRmllbGQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX01ldGFGaWVsZHNfVGl0bGVfdnVlX19fZGVmYXVsdCIsIlRheG9ub215RmllbGQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX01ldGFGaWVsZHNfVGF4b25vbXlfdnVlX19fZGVmYXVsdCIsImRpc3BsYXlGYWxsYmFjayIsImlzUmVxdWlyZWQiLCJmb3JjZWQiLCJyZXF1aXJlZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fTWV0YUZpZWxkdHlwZV9fIiwiZmllbGRDb25maWciLCJ0YXhvbm9teSIsImNyZWF0ZSIsImJhc2VuYW1lTW9kaWZpZWQiLCJnZXRGb2xkZXIiLCJnZXRCbGFua0ZvbGRlciIsImdldEV4aXN0aW5nRm9sZGVyIiwic2F2ZU5ld0ZvbGRlciIsInNhdmVFeGlzdGluZ0ZvbGRlciIsInBhdGhQYXJ0cyIsInBhcnQiLCJkcml2ZXItbG9jYWwiLCJkcml2ZXItczMiLCJpc05ldyIsImRyaXZlciIsInMzIiwiZHJpdmVycyIsImlzSGFuZGxlTW9kaWZpZWQiLCJyZWdpb24iLCJzM1JlZ2lvbnMiLCJzeW5jVGl0bGVBbmRIYW5kbGVGaWVsZHMiLCJyZXNvbHZlZFBhdGgiLCJyZXNvbHZpbmdQYXRoIiwicmVzb2x2ZWRQYXRoRXhpc3RzIiwicmVzb2x2ZWRVcmwiLCJyZXNvbHZpbmdVcmwiLCJzaG93UmVzb2x2ZWRQYXRoIiwic2hvd1Jlc29sdmVkVXJsIiwidmFsaWRVcmwiLCJzdWJzdHIiLCJjYW5Db250aW51ZSIsInNldFRpbWVvdXQiLCJyZXNvbHZlUGF0aCIsImV4aXN0cyIsInJlc29sdmVVcmwiLCJzdWJtaXQiLCJzZWNyZXQiLCJidWNrZXQiLCJ2YWxpZGF0aW5nIiwidmFsaWRhdGlvbkVycm9yIiwidmFsaWRhdGlvblN1Y2Nlc3MiLCJmaWxlc0RldGVjdGVkIiwiaGFzQ3JlZGVudGlhbHMiLCJzZXREZWZhdWx0cyIsInZhbGlkYXRlQ3JlZGVudGlhbHMiLCJmaWxlcyIsIm1ldGEtZmllbGRzIiwiZHJpdmVyLWZpZWxkcyIsImZpZWxkc2V0LWZpZWxkcyIsInN0ZXAiLCJkcml2ZXJDb25maWciLCJtZXRhU3VibWl0IiwiZHJpdmVyU3VibWl0IiwiZmllbGRzZXRTdWJtaXQiLCJjb21wbGV0ZSIsIl90aXRsZSIsImZvcm1zZXQtZmllbGRzLWJ1aWxkZXIiLCJmb3Jtc2V0LWNvbHVtbnMiLCJmb3Jtc2V0VGl0bGUiLCJmb3Jtc2V0TmFtZSIsInNhdmVVcmwiLCJmb3Jtc2V0IiwibWV0cmljc0dyaWRDb25maWciLCJhZGRfcm93IiwiZW1haWxHcmlkQ29uZmlnIiwiZ2V0QmxhbmtGb3Jtc2V0IiwiZ2V0Rm9ybXNldCIsImF0dHJpYnV0ZSIsImZpZWxkLXNldHRpbmdzIiwic2hvd0VkaXRNb2RhbCIsInNlbGVjdGVkRmllbGQiLCJzZWxlY3RGaWVsZCIsImRlc2VsZWN0RmllbGQiLCJkZWxldGVGaWVsZCIsImFkZEZpZWxkIiwiJG5leHRUaWNrIiwiZW5hYmxlU29ydGluZyIsImlzTmFtZU1vZGlmaWVkIiwic3VnZ2VzdGlvbnMiLCJNb3VzZXRyYXAiLCJTZWN0aW9uQnVpbGRlciIsImZpZWxkc2V0VGl0bGUiLCJmaWVsZHR5cGVzIiwiY2FuU2F2ZSIsImdldEZpZWxkdHlwZXMiLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiZmllbGREZWxldGVkIiwic2VjdGlvbkJ1aWxkZXIiLCJiaW5kR2xvYmFsIiwicHJldmVudERlZmF1bHQiLCJzb3J0YWJsZVNlY3Rpb25zIiwic29ydGFibGVGaWVsZHMiLCJTZWN0aW9uc1NlY3Rpb24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1NlY3Rpb25fdnVlX19fZGVmYXVsdCIsImFjdGl2ZVNlY3Rpb24iLCJpc0RyYWdnaW5nRmllbGQiLCJoYXNTaWRlYmFyIiwic2lkZWJhclNlY3Rpb24iLCJzaWRlYmFyU2VjdGlvbkxhYmVsIiwiZ2V0RmllbGRCeUlkIiwiZWRpdGluZ1NpZGViYXIiLCJtYWtlU2VjdGlvbnNTb3J0YWJsZSIsIm1ha2VGaWVsZHNTb3J0YWJsZSIsInVwZGF0ZUZpZWxkV2lkdGhzIiwiZ2V0RmllbGRCeU5hbWUiLCJnZXRTZWN0aW9uRmllbGRzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19zaG9waWZ5X2RyYWdnYWJsZV9fIiwidGFicyIsImRyYWdnYWJsZSIsImRlbGF5IiwibWlycm9yIiwiY29uc3RyYWluRGltZW5zaW9ucyIsImN1cnNvck9mZnNldFgiLCJ5QXhpcyIsIm9uIiwic3RhcnRJbmRleCIsIm5ld0luZGV4Iiwib2xkSW5kZXgiLCJfdGhpczYiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXBwZW5kVG8iLCJvbGRGaWVsZEluZGV4IiwibmV3RmllbGRJbmRleCIsIm9sZFNlY3Rpb25JbmRleCIsIm9sZENvbnRhaW5lciIsIm5ld1NlY3Rpb25JbmRleCIsIm5ld0NvbnRhaW5lciIsInNjcm9sbHBvcyIsInNjcm9sbFkiLCJkZXN0cm95Iiwic2Nyb2xsIiwiYWRkU2VjdGlvbiIsIl90aGlzNyIsImRlbGV0ZVNlY3Rpb24iLCJfc2VjdGlvbnMkbmV3SW5kZXgkZmkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJnZXRTZWN0aW9uQ29tcG9uZW50QnlIYW5kbGUiLCJjcmVhdGVOZXdGaWVsZCIsInRtcCIsImNhbkJlVmFsaWRhdGVkIiwiY2FuQmVMb2NhbGl6ZWQiLCJjYW5IYXZlRGVmYXVsdCIsImhvdmVyZWRJbnRvVGFiIiwiaXNBZGRpbmdGaWVsZCIsImlzUXVpY2tBZGRpbmdGaWVsZCIsImhhbmRsZU1vZGlmaWVkIiwiZmllbGRTZWxlY3RvckNsb3NlZCIsInF1aWNrQWRkRmllbGQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX0hhc1Nob3dEcmFmdHNTZWxlY3Rvcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19IYXNMb2NhbGVTZWxlY3Rvcl9fIiwiQnJhbmNoZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0JyYW5jaGVzX3Z1ZV9fX2RlZmF1bHQiLCJCcmFuY2giLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0JyYW5jaF92dWVfX19kZWZhdWx0IiwiQ3JlYXRlUGFnZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fQ3JlYXRlUGFnZV92dWVfX19kZWZhdWx0IiwiTW91bnRDb2xsZWN0aW9uIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19Nb3VudENvbGxlY3Rpb25fdnVlX19fZGVmYXVsdCIsImNoYW5nZWQiLCJzaG93VXJscyIsInBhZ2VzIiwiYXJlUGFnZXMiLCJob21lRWRpdFVybCIsImhhc0NoaWxkcmVuIiwic29tZSIsImlzU29ydGFibGUiLCJnZXRQYWdlcyIsImluaXRTb3J0YWJsZSIsImRyYWdnZWRJbmRleCIsImRyYWdnZWRQYWdlIiwiZHJhZ2dlZEluc3RhbmNlIiwibmVzdGVkU29ydGFibGUiLCJjb250YWluZXJTZWxlY3RvciIsInBsYWNlaG9sZGVyQ2xhc3MiLCJib2R5Q2xhc3MiLCJkcmFnZ2VkQ2xhc3MiLCJvbk1vdXNlZG93biIsIiRpdGVtIiwiX3N1cGVyIiwiZXZlbnQiLCJicmFuY2giLCJkYXRhc2V0Iiwib25EcmFnU3RhcnQiLCJicmFuY2hJbmRleCIsIm9uRHJhZyIsIm9uRHJvcCIsInBsYXkiLCJkcm9wSW5kZXgiLCJwYXJlbnRJbnN0YW5jZSIsInVwZGF0ZURyb3BwZWRVcmwiLCJjYXJkX3NldCIsInRvZ2dsZUFsbCIsImNhcmRfZHJvcCIsInRvZ2dsZVVybHMiLCJ1cGRhdGVPcmRlckluZGV4ZXMiLCJjcmVhdGVQYWdlIiwicGFnZXMuY3JlYXRlIiwicGFnZXMubW91bnQiLCJwYWdlcy51bm1vdW50IiwicGFnZS5kZWxldGVkIiwiX2NoYW5nZWQiLCJOdW1iZXIiLCJ1dWlkIiwicHVibGlzaGVkIiwiZWRpdFVybCIsImhhc0VudHJpZXMiLCJlbnRyaWVzVXJsIiwiY2hpbGRQYWdlcyIsImhvbWUiLCJpc1NpbmdsZVRvcExldmVsUGFnZSIsImRlbGV0ZVBhZ2UiLCJkdXBsaWNhdGVQYWdlIiwibW91bnRDb2xsZWN0aW9uIiwidW5tb3VudENvbGxlY3Rpb24iLCJwYXJlbnRVcmwiLCJidWlsZFVybCIsImZpZWxkc2V0cyIsImdldEZpZWxkc2V0cyIsImdldENvbGxlY3Rpb25zIiwibW91bnQiLCJjb2xsZWN0aW9ucyIsImQiLCJzdG9wQ2FsbGJhY2siLCJwYXVzZWQiLCJiaW5kIiwicHVibGlzaC1maWVsZHMiLCJ1c2VyLW9wdGlvbnMiLCJzdGF0dXMtZmllbGQiLCJwdWJsaXNoLXNlY3Rpb24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0NvbmRpdGlvbmFsc19fIiwiY29udGVudFR5cGUiLCJmaWVsZHNldE5hbWUiLCJ1cmkiLCJzdWJtaXRVcmwiLCJpc0RlZmF1bHRMb2NhbGUiLCJyZW1vdmVUaXRsZSIsInJlYWRPbmx5IiwidXBkYXRlVGl0bGVPblNhdmUiLCJhbGxvd1NhdmVBbmRBZGRBbm90aGVyIiwiY29udGVudERhdGEiLCJmb3JtRGF0YUluaXRpYWxpemVkIiwiaXNTbHVnTW9kaWZpZWQiLCJpZnJhbWVMb2FkaW5nIiwicHJldmlld1JlcXVlc3RRdWV1ZWQiLCJwdWJsaXNoVHlwZSIsInN0YXRpY0NhY2hpbmdFbmFibGVkIiwiaXNFbnRyeSIsImlzVGF4b25vbXkiLCJpc0dsb2JhbCIsImlzVXNlciIsImlzU2V0dGluZ3MiLCJpc0FkZG9uIiwiaXNQYWdlIiwiaXNIb21lUGFnZSIsInVzZXJJZCIsInNob3VsZFNob3dTdGF0dXMiLCJhbGxvd1N0YXR1c2VzIiwic2hvdWxkU2hvd0RhdGUiLCJkYXRlIiwib3JkZXJfdHlwZSIsInNob3VsZFNob3dTbmVha1BlZWsiLCJpc1NuZWFrUGVla2luZyIsImlzUHJldmlld2luZyIsImRhdGVGaWVsZENvbmZpZyIsImZpbHRlcmVkRm9ybURhdGEiLCJzaG91bGRTaG93U2lkZWJhciIsIndpbmRvd1dpZHRoIiwibWFpblNlY3Rpb25zIiwic2VjdGlvbkZpZWxkcyIsInNlY3Rpb25FcnJvcnMiLCJzZWN0aW9uVG9Gb2N1c09uRXJyb3IiLCJpbml0Rm9ybURhdGEiLCJwdWJsaXNoIiwiYWRkb24iLCJleGNlcHRpb24iLCJwdWJsaXNoV2l0aG91dENvbnRpbnVpbmciLCJwdWJsaXNoQW5kQ29udGludWUiLCJwdWJsaXNoQW5kQW5vdGhlciIsImFub3RoZXIiLCJpbml0UHJldmlldyIsInVwZGF0ZVByZXZpZXciLCJkZWJvdW5jZSIsInBhcmVudF91cmwiLCJlbnRyeVVybCIsInVwZGF0ZVByZXZpZXdJZnJhbWUiLCJpZnJhbWUiLCJzY3JvbGxMZWZ0Iiwid3JpdGUiLCJzeW5jVGl0bGVBbmRTbHVnRmllbGRzIiwiZmFsbGJhY2tTbHVnIiwicm91dGUiLCJyZSIsImZvcm1hdCIsImRhdGV0aW1lIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX21vbWVudF9fX2RlZmF1bHQiLCJtb2RpZnlTbHVnIiwiZ2V0SW5pdGlhbFB1Ymxpc2hUeXBlIiwiaW5pdEZpZWxkc2V0IiwidGF4b25vbWllcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fRmllbGRzZXRfXyIsInNob3dEYXRlIiwic2hvd1NsdWciLCJwcmVwZW5kVGl0bGUiLCJwcmVwZW5kTWV0YSIsImluaXRDb25kaXRpb25zIiwic2VjdGlvbkhhc0Vycm9yIiwic2VjdGlvbkRpc3BsYXkiLCJzaG91bGRTaG93Iiwic25lYWtQZWVrV2F0Y2hlciIsImlzUHVibGlzaFBhZ2UiLCIkb24iLCJuZXdWYWwiLCJjb25kaXRpb25zIiwiZXZhbHVhdGVDb25kaXRpb25zIiwiY29uZGl0aW9uIiwicGFzc2VzIiwidmFsaWRhdGUiLCJoaWRlX3doZW4iLCJzaG93X3doZW4iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0NvbmRpdGlvbl9qc19fIiwiQ29uZGl0aW9uIiwicnVsZSIsIl92YWxpZGF0ZSIsImlzSmF2YXNjcmlwdCIsIm9ycyIsInN0YXJ0c1dpdGgiLCJpc1Nob3dpbmdMb2NhbGVzIiwic2luZ2xlTG9jYWxlIiwibXVsdGlwbGVMb2NhbGVzIiwiY3VycmVudExvY2FsZUxhYmVsIiwic3RhdHVzQ2xhc3MiLCJpc19wdWJsaXNoZWQiLCJsaW1pdCIsInNyYyIsInF1ZXJ5IiwidHlwZWFoZWFkLWlucHV0IiwiaXNEaXJ0eSIsInEiLCJzZXRBY3RpdmUiLCJoaXQiLCJocmVmIiwiZWRpdF91cmwiLCJ1cCIsImRvd24iLCJuZXd2YWwiLCJvbGR2YWwiLCJvblVwIiwib25Eb3duIiwib25IaXQiLCJvblJlc2V0IiwibGljZW5zZS1rZXkiLCJ1c2VyIiwibG9naW4iLCJzdGVwcyIsImxpY2Vuc2VLZXkiLCJjdXJyZW50U3RlcCIsImNsZWFudXBGYWlsZWQiLCJjcFVybCIsInBlcm1pc3Npb25zLnN0YXR1cyIsInBlcm1pc3Npb25zLmNvbXBsZXRlIiwibGljZW5zZWtleS5jb21wbGV0ZSIsInNldHRpbmdzLmNvbXBsZXRlIiwidXNlci5jb21wbGV0ZSIsImxvZ2luLmNvbXBsZXRlIiwidW53cml0YWJsZSIsImZhaWx1cmUiLCJ2YWxpZCIsImtleVN1Ym1pdHRlZCIsImxpY2Vuc2VLZXlJbnN0cnVjdGlvbnMiLCJsaWNlbnNlcyIsImJ1eV9saWNlbnNlIiwiZnVsbCIsIm9yaWdpbiIsInRpbWV6b25lcyIsImdldFRpbWV6b25lcyIsInRpbWV6b25lIiwidHoiLCJzdWJtaXR0ZWQiLCJwYXNzd29yZCIsImVtYWlsIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJiaW8iLCJzdWJtaXREaXNhYmxlZCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJsb2dnaW5nSW4iLCJsb2dnZWRJbiIsInZlcnNpb25UbyIsInZlcnNpb25Gcm9tIiwic3RhcnRlZCIsImJhY2tpbmdVcCIsImJhY2tlZFVwIiwiYmFja3VwRmFpbGVkIiwiYmFja3VwTWVzc2FnZSIsImRvd25sb2FkaW5nIiwiZG93bmxvYWRlZCIsImRvd25sb2FkRmFpbGVkIiwiZG93bmxvYWRNZXNzYWdlIiwiaW5zdGFsbGluZyIsInVuemlwcGluZyIsInVuemlwcGVkIiwidW56aXBwaW5nRmFpbGVkIiwiaW5zdGFsbGluZ0RlcGVuZGVuY2llcyIsImluc3RhbGxlZERlcGVuZGVuY2llcyIsImluc3RhbGxpbmdEZXBlbmRlbmNpZXNGYWlsZWQiLCJzd2FwcGluZyIsInN3YXBwZWQiLCJzd2FwcGluZ0ZhaWxlZCIsInVwZGF0ZWQiLCJjbGVhbmluZ1VwIiwiY2xlYW5lZFVwIiwicmVhZHlUb0luc3RhbGwiLCJhdWRpbyIsImJhY2t1cCIsIndvbXAiLCJ1bnppcCIsImNvbXBvc2VyIiwic3dhcCIsImNsZWFuVXAiLCJoaWRlIiwib2xkVmVyc2lvbiIsImNsZWFuVXBGYWlsZWQiLCJleHBvcnRpbmciLCJleHBvcnRlZCIsImV4cG9ydEZhaWxlZCIsImV4cG9ydEVycm9yIiwiaW1wb3J0aW5nIiwiaW1wb3J0ZWQiLCJzdW1tYXJ5Iiwic2hvd0FsbFBhZ2VzIiwic2hvd0NvbGxlY3Rpb25zIiwic2hvd1RheG9ub21pZXMiLCJzaG93R2xvYmFscyIsInRvdGFsUGFnZXMiLCJJbXBvcnRTdW1tYXJ5IiwiaGFzRHVwbGljYXRlcyIsImR1cGxpY2F0ZUNvdW50IiwidW5jaGVja0R1cGxpY2F0ZXMiLCJfY2hlY2tlZCIsInNob3dDb2xsZWN0aW9uIiwidW5pcSIsImhpZGVDb2xsZWN0aW9uIiwiaGlkZGVuIiwic2hvdWxkU2hvd0NvbGxlY3Rpb24iLCJzaG93VGF4b25vbXkiLCJoaWRlVGF4b25vbXkiLCJzaG91bGRTaG93VGF4b25vbXkiLCJzaG93R2xvYmFsIiwiaGlkZUdsb2JhbCIsImciLCJzaG91bGRTaG93R2xvYmFsIiwiUGVybWlzc2lvbiIsImNoaWxkcmVuIiwic2VsZWN0ZWQiLCJzZWxlY3RlZFBlcm1pc3Npb25zIiwiZGlzYWJsZWQiLCJzdXBlclNlbGVjdGVkIiwiaGF5c3RhY2siLCJuZWVkbGUiLCJ0aXRsZXMiLCJncm91cCIsInNob3dFbWFpbExvZ2luIiwiY2xhc3NMaXN0IiwiLi9hcnJheS5zdmciLCIuL2Fzc2V0cy5zdmciLCIuL2JhcmQuc3ZnIiwiLi9jaGVja2JveGVzLnN2ZyIsIi4vY29sbGVjdGlvbi5zdmciLCIuL2NvbGxlY3Rpb25zLnN2ZyIsIi4vZGF0ZS5zdmciLCIuL2VudHJpZXMuc3ZnIiwiLi9maWVsZHNldC5zdmciLCIuL2ZpbGUtYXJjaGl2ZS5zdmciLCIuL2ZpbGUtYXVkaW8uc3ZnIiwiLi9maWxlLWRvYy5zdmciLCIuL2ZpbGUtZXhjZWwuc3ZnIiwiLi9maWxlLWdlbmVyaWMuc3ZnIiwiLi9maWxlLWpzb24uc3ZnIiwiLi9maWxlLWxheWVyZWQuc3ZnIiwiLi9maWxlLXBkZi5zdmciLCIuL2ZpbGUtcHJlc2VudGF0aW9uLnN2ZyIsIi4vZmlsZS12aWRlby5zdmciLCIuL2ZpbGUteG1sLnN2ZyIsIi4vZm9sZGVyLXNlYXJjaC1lbXB0eS5zdmciLCIuL2ZvbGRlci5zdmciLCIuL2Zvcm0uc3ZnIiwiLi9nZW5lcmljLnN2ZyIsIi4vZ3JpZC5zdmciLCIuL2hpZGRlbi5zdmciLCIuL2ludGVnZXIuc3ZnIiwiLi9saXN0LnN2ZyIsIi4vbWFya2Rvd24uc3ZnIiwiLi9wYWdlcy5zdmciLCIuL3BhcnRpYWwuc3ZnIiwiLi9waWN0dXJlLnN2ZyIsIi4vcmFkaW8uc3ZnIiwiLi9yZWRhY3Rvci5zdmciLCIuL3JlcGxpY2F0b3Iuc3ZnIiwiLi9yZXZlYWxlci5zdmciLCIuL3NlY3Rpb24uc3ZnIiwiLi9zZWxlY3Quc3ZnIiwiLi9zbHVnLnN2ZyIsIi4vc3RhdGFtaWMtbG9nby5zdmciLCIuL3N0YXRhbWljLW1hcmsuc3ZnIiwiLi9zdWdnZXN0LnN2ZyIsIi4vdGFibGUuc3ZnIiwiLi90YWJzLnN2ZyIsIi4vdGFncy5zdmciLCIuL3RheG9ub215LnN2ZyIsIi4vdGVtcGxhdGUuc3ZnIiwiLi90ZXh0LnN2ZyIsIi4vdGV4dGFyZWEuc3ZnIiwiLi90aGVtZS5zdmciLCIuL3RpbWUuc3ZnIiwiLi90aXRsZS5zdmciLCIuL3RvZ2dsZS5zdmciLCIuL3VzZXItZ3JvdXBzLnN2ZyIsIi4vdXNlci1yb2xlcy5zdmciLCIuL3VzZXJfZ3JvdXBzLnN2ZyIsIi4vdXNlcl9yb2xlcy5zdmciLCIuL3VzZXJzLnN2ZyIsIi4vdmlkZW8uc3ZnIiwiLi92aXNpdC5zdmciLCIuL3lhbWwuc3ZnIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJyZXNvbHZlIiwiZW5kcG9pbnQiLCJub19yZXN1bHRzX2hlYWRpbmciLCJub19yZXN1bHRzX3N1YmhlYWRpbmciLCJub19yZXN1bHRzX2J1dHRvbiIsIm5ld191cmwiLCJkZWxldGVNdWx0aUNvbmZpcm1hdGlvbiIsImZpZWxkLXN0YXR1cyIsImZpZWxkLWRlZmF1bHQiLCJyb3dzIiwiY2hlY2tlZEVudHJpZXMiLCJlbnRyeSIsImFsbEVudHJpZXNDaGVja2VkIiwiY2xvc2VPbkNvbmZpcm0iLCIkcmVtb3ZlIiwiJGV2ZW50IiwidXVpZHMiLCJjaGVja0FsbEVudHJpZXMiLCJ0b2dnbGVSZW9yZGVyIiwiZGlzYWJsZVNlbGVjdGlvbiIsInJlc29sdmVDb21wb25lbnQiLCJ0aW1lciIsImNvbmZpcm1CdXR0b25Db2xvciIsInNob3dDb25maXJtQnV0dG9uIiwiaGFzRmllbGRzIiwic2VsZWN0ZWRGaWVsZENvbmZpZyIsInRhYiIsInNvcnRGaWVsZHMiLCJlbnN1cmVUaXRsZUlzRmlyc3QiLCJGaWVsZHNldEZpZWxkIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19GaWVsZF92dWVfX19kZWZhdWx0IiwicGFyZW50S2V5IiwiaXNBZGRpbmciLCJpc1F1aWNrQWRkaW5nIiwiaXNSb290TGV2ZWwiLCJhbGxvd0FkZGluZ1RpdGxlRmllbGQiLCJhbGxvd0FkZGluZ1NsdWdGaWVsZCIsImFsbG93QWRkaW5nRGF0ZUZpZWxkIiwiaXNTZWxlY3RpbmciLCJlcmQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfZWxlbWVudF9yZXNpemVfZGV0ZWN0b3JfX19kZWZhdWx0Iiwic3RyYXRlZ3kiLCJGaWVsZFNldHRpbmdzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19GaWVsZFNldHRpbmdzX3Z1ZV9fX2RlZmF1bHQiLCJXaWR0aFNlbGVjdG9yIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19XaWR0aFNlbGVjdG9yX3Z1ZV9fX2RlZmF1bHQiLCJSZXBsaWNhdG9yU2V0cyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fU2V0c192dWVfX19kZWZhdWx0IiwiaXNGaXJzdEZpZWxkIiwiaXNMYXN0RmllbGQiLCJpc0VkaXRpbmciLCJpc1Nob3dpbmdHcmlkRmllbGRzIiwiaXNTaG93aW5nU2V0cyIsImlzQWRkaW5nR3JpZEZpZWxkIiwiZGlzcGxheUZpZWxkV2lkdGgiLCJuYW1lRmllbGRXaWR0aCIsImZpZWxkS2V5IiwiZmllbGR0eXBlTGFiZWwiLCJvdGhlclNlY3Rpb25zIiwiaXNHcmlkRmllbGQiLCJpc1JlcGxpY2F0b3JGaWVsZCIsImlzLWVkaXRpbmciLCJyb290LWxldmVsLXNlY3Rpb24tZmllbGQiLCJpcy1maXJzdC1maWVsZCIsImlzLWxhc3QtZmllbGQiLCJpcy10aW55IiwiaXNUaW55IiwibGlzdGVuVG8iLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImZpZWxkRGlzcGxheVNpemVyIiwiZmllbGROYW1lU2l6ZXIiLCJhZGRSZXBsaWNhdG9yU2V0IiwiZWxlbWVudFV0aWxzTWFrZXIiLCJsaXN0ZW5lckhhbmRsZXJNYWtlciIsImlkR2VuZXJhdG9yTWFrZXIiLCJpZEhhbmRsZXJNYWtlciIsInJlcG9ydGVyTWFrZXIiLCJicm93c2VyRGV0ZWN0b3IiLCJiYXRjaFByb2Nlc3Nvck1ha2VyIiwic3RhdGVIYW5kbGVyIiwib2JqZWN0U3RyYXRlZ3lNYWtlciIsInNjcm9sbFN0cmF0ZWd5TWFrZXIiLCJpc0NvbGxlY3Rpb24iLCJpc0VsZW1lbnQiLCJnZXRPcHRpb24iLCJkZWZhdWx0VmFsdWUiLCJpZEhhbmRsZXIiLCJpZEdlbmVyYXRvciIsImRlZmF1bHRJZEhhbmRsZXIiLCJyZXBvcnRlciIsImJhdGNoUHJvY2Vzc29yIiwiZ2xvYmFsT3B0aW9ucyIsImNhbGxPbkFkZCIsImRldGVjdGlvblN0cmF0ZWd5IiwiZXZlbnRMaXN0ZW5lckhhbmRsZXIiLCJlbGVtZW50VXRpbHMiLCJkZXNpcmVkU3RyYXRlZ3kiLCJzdHJhdGVneU9wdGlvbnMiLCJvblJlYWR5Q2FsbGJhY2tzIiwiZWxlbWVudHMiLCJvblJlc2l6ZUNhbGxiYWNrIiwibGlzdGVuZXJzIiwiZWxlbWVudHNSZWFkeSIsIm9uUmVhZHlDYWxsYmFjayIsImdldFN0YXRlIiwiaW5pdFN0YXRlIiwiaXNEZXRlY3RhYmxlIiwiaXNCdXN5IiwibWFya0J1c3kiLCJtYWtlRGV0ZWN0YWJsZSIsIm1hcmtBc0RldGVjdGFibGUiLCJzdGFydFNpemUiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInVuaW5zdGFsbCIsImNsZWFuU3RhdGUiLCJidXN5IiwiZXZlbnRMaXN0ZW5lcnMiLCJnZXRMaXN0ZW5lcnMiLCJpZENvdW50IiwiZ2VuZXJhdGUiLCJxdWlldCIsIm5vb3AiLCJhdHRhY2hGdW5jdGlvbiIsInV0aWxzIiwiQmF0Y2giLCJiYXRjaCIsInRvcExldmVsIiwiYm90dG9tTGV2ZWwiLCJsZXZlbCIsInByb2Nlc3MiLCJmbnMiLCJhc3luY1Byb2Nlc3MiLCJhdXRvUHJvY2VzcyIsImFzeW5jRnJhbWVIYW5kbGVyIiwiaXNQcm9jZXNzaW5nIiwicHJvY2Vzc0JhdGNoIiwicHJvY2Vzc2luZ0JhdGNoIiwicHJvY2Vzc0JhdGNoQXN5bmMiLCJmb3JjZSIsImxvY2FsQXN5bmNQcm9jZXNzIiwiY2xlYXJUaW1lb3V0IiwiZ2V0T2JqZWN0Iiwib2JqZWN0IiwiT0JKRUNUX1NUWUxFIiwicG9zaXRpb25DaGVja1BlcmZvcm1lZCIsIm11dGF0ZURvbSIsImFsdGVyUG9zaXRpb25TdHlsZXMiLCJyZW1vdmVSZWxhdGl2ZVN0eWxlcyIsImdldE51bWVyaWNhbFZhbHVlIiwiY3NzVGV4dCIsInRhYkluZGV4Iiwib25sb2FkIiwib2JqZWN0RG9jdW1lbnQiLCJpbmplY3RPYmplY3QiLCJsaXN0ZW5lclByb3h5IiwicHJveHkiLCJkZXRhY2hFdmVudCIsImhhc1N0YXRlIiwic2Nyb2xsYmFyU2l6ZXMiLCJ3aWR0aFNpemUiLCJjbGllbnRXaWR0aCIsImhlaWdodFNpemUiLCJjbGllbnRIZWlnaHQiLCJnZXRTY3JvbGxiYXJTaXplcyIsImRldGVjdGlvbkNvbnRhaW5lckNsYXNzIiwiYWRkRXZlbnQiLCJjYiIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdldEV4cGFuZEVsZW1lbnQiLCJnZXRTaHJpbmtFbGVtZW50Iiwic3R5bGVJZCIsImNvbnRhaW5lckNsYXNzIiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250YWluZXJBbmltYXRpb25DbGFzcyIsImNvbnRhaW5lckFuaW1hdGlvbkFjdGl2ZUNsYXNzIiwiaGVhZCIsInN0eWxlRWxlbWVudCIsImluamVjdFN0eWxlIiwiaW5qZWN0U2Nyb2xsU3R5bGUiLCJpc1VucmVuZGVyZWQiLCJnZXRTdHlsZSIsImVsZW1lbnRTdHlsZSIsInJpZ2h0IiwiYm90dG9tIiwid2lkdGhDU1MiLCJoZWlnaHRDU1MiLCJzdG9yZVN0eWxlIiwic3RvcmVDdXJyZW50U2l6ZSIsImxhc3RXaWR0aCIsImxhc3RIZWlnaHQiLCJnZXRXaWR0aE9mZnNldCIsImdldEhlaWdodE9mZnNldCIsImdldEV4cGFuZFdpZHRoIiwiZ2V0RXhwYW5kSGVpZ2h0IiwicG9zaXRpb25TY3JvbGxiYXJzIiwic2hyaW5rIiwiZXhwYW5kV2lkdGgiLCJleHBhbmRIZWlnaHQiLCJzaHJpbmtXaWR0aCIsImdldFNocmlua1dpZHRoIiwic2hyaW5rSGVpZ2h0IiwiZ2V0U2hyaW5rSGVpZ2h0IiwiaW5qZWN0Q29udGFpbmVyRWxlbWVudCIsImFkZEFuaW1hdGlvbkNsYXNzIiwib25BbmltYXRpb25TdGFydCIsIm9uUmVuZGVyZWQiLCJpbmplY3RTY3JvbGxFbGVtZW50cyIsInJvb3RDb250YWluZXIiLCJzY3JvbGxiYXJXaWR0aCIsInNjcm9sbGJhckhlaWdodCIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQ29udGFpbmVyIiwiZXhwYW5kQ2hpbGQiLCJzaHJpbmtDaGlsZCIsIm9uRXhwYW5kU2Nyb2xsIiwib25TaHJpbmtTY3JvbGwiLCJvbkV4cGFuZCIsIm9uU2hyaW5rIiwicmVnaXN0ZXJMaXN0ZW5lcnNBbmRQb3NpdGlvbkVsZW1lbnRzIiwidXBkYXRlQ2hpbGRTaXplcyIsImdldEV4cGFuZENoaWxkRWxlbWVudCIsInVwZGF0ZURldGVjdG9yRWxlbWVudHMiLCJkb25lIiwiYXJlRWxlbWVudHNJbmplY3RlZCIsImgiLCJub3RpZnlMaXN0ZW5lcnNJZk5lZWRlZCIsImxhc3ROb3RpZmllZFdpZHRoIiwibGFzdE5vdGlmaWVkSGVpZ2h0IiwiaGFuZGxlU2Nyb2xsIiwiZmluYWxpemVEb21NdXRhdGlvbiIsImlzSW5Eb2N1bWVudCIsImlzRGV0YWNoZWQiLCJmaWVsZENvbmRpdGlvbnNCdWlsZGVyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19TZWN0aW9uc19XaWR0aFNlbGVjdG9yX3Z1ZV9fX2RlZmF1bHQiLCJhY3RpdmVUYWIiLCJzZWxlY3RlZFdpZHRoIiwiaGFzRXh0cmFzIiwiZmlsdGVyZWRGaWVsZHR5cGVDb25maWciLCJjb25maWdGaWVsZENsYXNzZXMiLCJpc0hvdmVyaW5nIiwiaG92ZXJpbmdPdmVyIiwiY29uZGl0aW9uU2VsZWN0RmllbGR0eXBlQ29uZmlnIiwic3R5bGVSYWRpb0ZpZWxkdHlwZUNvbmZpZyIsImhhc0NvbmRpdGlvbnMiLCJpc1N0YW5kYXJkIiwiaXNDdXN0b20iLCJjdXN0b20iLCJvcGVyYXRvclNlbGVjdENvbmZpZyIsImlzRmlyc3QiLCJzZWxlY3RpemVIYW5kbGVzIiwic2VsZWN0aXplVmFsdWVzIiwic2VsZWN0aXplIiwicGx1Z2lucyIsIm9uQ2hhbmdlIiwiZ2V0RmllbGRzIiwiZmllbGRzQ29udGFpbnNQYXJ0aWFsIiwiaW5pdFNlbGVjdGl6ZSIsIm1heEl0ZW1zIiwiY2xlYW5GaWVsZHMiLCJ2YWx1ZUZpZWxkIiwibGFiZWxGaWVsZCIsIlJlcGxpY2F0b3JTZXQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1NldF92dWVfX19kZWZhdWx0IiwibWFrZVNldHNTb3J0YWJsZSIsInNldEtleSIsInVwZGF0ZVNldEZpZWxkV2lkdGhzIiwic2V0RGlzcGxheVNpemVyIiwic2V0TmFtZVNpemVyIiwib25TZWxlY3QiLCJhbGxvd1RpdGxlIiwiYWxsb3dTbHVnIiwiYWxsb3dEYXRlIiwiZmlsdGVyQnkiLCJmaWx0ZXJzIiwiaXNTZWFyY2hPcGVuIiwiZmllbGR0eXBlU2VsZWN0aW9uVGV4dCIsImZpZWxkdHlwZXNTZWxlY3RPcHRpb25zIiwiZmllbGR0eXBlU2VsZWN0aW9uIiwiYWxsRmllbGR0eXBlcyIsImNhdGVnb3JpZXMiLCJzZWFyY2hGaWx0ZXJlZEZpZWxkdHlwZXMiLCJmaWVsZHR5cGVPcHRpb25zIiwiZmlsdGVyZWRGaWx0ZXJzIiwiYWxsb3dNZXRhIiwic2VsZWN0TWV0YSIsImNyZWF0ZUZpZWxkIiwiY29uZmlnRmllbGQiLCJvcGVuU2VhcmNoIiwiY2FuY2VsU2VhcmNoIiwiZGlzbWlzc2libGUiLCJzaGFrZSIsIm1vZGFsLWZ1bGwiLCJjbG9zZUlmRGlzbWlzc2libGUiLCJjbG9zZS1tb2RhbCIsImhhc1ByZXZpb3VzIiwidG90YWwiLCJzZWdtZW50ZWQiLCJoYXNTbGlkZXIiLCJzbGlkZXIiLCJzaG93Rmlyc3RFbGxpcHNpcyIsInNob3dMYXN0RWxsaXBzaXMiLCJsYXN0Iiwic2VsZWN0UHJldmlvdXNQYWdlIiwic2VsZWN0TmV4dFBhZ2UiLCJpc0N1cnJlbnQiLCJrZXl3b3JkIiwic29ydExhYmVsIiwiY2hhbmdlU29ydENvbHVtbiIsImNoYW5nZVNvcnRPcmRlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNDNfX2NvbXBvbmVudHNfZmllbGR0eXBlc19Vc2Vyc0ZpZWxkdHlwZV92dWVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNDNfX2NvbXBvbmVudHNfZmllbGR0eXBlc19Vc2Vyc0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19jb21wb25lbnRzX2ZpZWxkdHlwZXNfQXJyYXlGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fY29tcG9uZW50c19maWVsZHR5cGVzX2Fzc2V0c19Bc3NldHNGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fY29tcG9uZW50c19maWVsZHR5cGVzX0Fzc2V0Q29udGFpbmVyRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2NvbXBvbmVudHNfZmllbGR0eXBlc19Bc3NldHNGb2xkZXJGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fY29tcG9uZW50c19maWVsZHR5cGVzX2JhcmRfQmFyZEZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19jb21wb25lbnRzX2ZpZWxkdHlwZXNfQ2hlY2tib3hlc0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19jb21wb25lbnRzX2ZpZWxkdHlwZXNfQ29sbGVjdGlvbkZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19jb21wb25lbnRzX2ZpZWxkdHlwZXNfQ29sbGVjdGlvbnNGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fY29tcG9uZW50c19maWVsZHR5cGVzX0RhdGVGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX2NvbXBvbmVudHNfZmllbGR0eXBlc19GaWVsZHNldEZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fY29tcG9uZW50c19maWVsZHR5cGVzX0Zvcm1GaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX2NvbXBvbmVudHNfZmllbGR0eXBlc19HcmlkRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX19jb21wb25lbnRzX2ZpZWxkdHlwZXNfSGlkZGVuRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19jb21wb25lbnRzX2ZpZWxkdHlwZXNfSW50ZWdlckZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fY29tcG9uZW50c19maWVsZHR5cGVzX0xpc3RGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX2NvbXBvbmVudHNfZmllbGR0eXBlc19Mb2NhbGVTZXR0aW5nc0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fY29tcG9uZW50c19maWVsZHR5cGVzX01hcmtkb3duRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE4X19jb21wb25lbnRzX2ZpZWxkdHlwZXNfUGFnZXNGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX2NvbXBvbmVudHNfZmllbGR0eXBlc19SYWRpb0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fY29tcG9uZW50c19maWVsZHR5cGVzX3JlZGFjdG9yX1JlZGFjdG9yRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX19jb21wb25lbnRzX2ZpZWxkdHlwZXNfcmVkYWN0b3JfUmVkYWN0b3JTZXR0aW5nc0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9fY29tcG9uZW50c19maWVsZHR5cGVzX3JlbGF0ZV9SZWxhdGVGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjNfX2NvbXBvbmVudHNfZmllbGR0eXBlc19yZXBsaWNhdG9yX1JlcGxpY2F0b3JGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfX2NvbXBvbmVudHNfZmllbGR0eXBlc19SZXZlYWxlckZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNV9fY29tcG9uZW50c19maWVsZHR5cGVzX1JvdXRlc0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNl9fY29tcG9uZW50c19maWVsZHR5cGVzX1NlY3Rpb25GaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjdfX2NvbXBvbmVudHNfZmllbGR0eXBlc19TZWxlY3RGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjhfX2NvbXBvbmVudHNfZmllbGR0eXBlc19TdGF0dXNGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjlfX2NvbXBvbmVudHNfZmllbGR0eXBlc19TdWdnZXN0RmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzMwX19jb21wb25lbnRzX2ZpZWxkdHlwZXNfVGFibGVGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMzFfX2NvbXBvbmVudHNfZmllbGR0eXBlc19UYWdzRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzMyX19jb21wb25lbnRzX2ZpZWxkdHlwZXNfVGF4b25vbXlGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMzNfX2NvbXBvbmVudHNfZmllbGR0eXBlc19UZW1wbGF0ZUZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zNF9fY29tcG9uZW50c19maWVsZHR5cGVzX1RleHRGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMzVfX2NvbXBvbmVudHNfZmllbGR0eXBlc19UZXh0YXJlYUZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zNl9fY29tcG9uZW50c19maWVsZHR5cGVzX1RoZW1lRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzM3X19jb21wb25lbnRzX2ZpZWxkdHlwZXNfVGltZUZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zOF9fY29tcG9uZW50c19maWVsZHR5cGVzX1RvZ2dsZUZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80MF9fY29tcG9uZW50c19maWVsZHR5cGVzX1VzZXJHcm91cHNGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNDFfX2NvbXBvbmVudHNfZmllbGR0eXBlc19Vc2VyUm9sZXNGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNDJfX2NvbXBvbmVudHNfZmllbGR0eXBlc19WaWRlb0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zOV9fY29tcG9uZW50c19maWVsZHR5cGVzX1lhbWxGaWVsZHR5cGVfdnVlX19fZGVmYXVsdCIsImNvbXBvbmVudFR5cGUiLCJoYXNSb3dzIiwiYWRkUm93QnV0dG9uIiwidmFsdWVIZWFkZXIiLCJ2YWx1ZV9oZWFkZXIiLCJ0ZXh0SGVhZGVyIiwidGV4dF9oZWFkZXIiLCJhZGRSb3ciLCJkZWxldGVSb3ciLCJfc3RhcnQiLCJhc3NldFRpbGUiLCJhc3NldFJvdyIsInNlbGVjdG9yIiwic2hvd1NlbGVjdG9yIiwiaW5uZXJEcmFnZ2luZyIsImNvbnRhaW5lclNwZWNpZmllZCIsInJlc3RyaWN0IiwibWF4X2ZpbGVzIiwic29sb0Fzc2V0IiwiZXhwYW5kZWQiLCJpc0luQmFyZEZpZWxkIiwiY2xvc2Utc2VsZWN0b3IiLCJjbG9zZVNlbGVjdG9yIiwiYXNzZXRzU2VsZWN0ZWQiLCJvcGVuU2VsZWN0b3IiLCJoaWRlT3ZlcmZsb3ciLCJhc3NldFJlbW92ZWQiLCJ1cGxvYWRDb21wbGV0ZSIsImN1cnJlbnRJdGVtIiwiaXNJbkFzc2V0QnJvd3NlciIsImJyb3dzZXJTZWxlY3Rpb25zIiwic2VsZWN0aW9uc1VwZGF0ZWQiLCJzZWxlY3RDb25maWciLCJhbGxvd0JsYW5rIiwiYm9vdHN0cmFwRm9yQ29udGFpbmVyRmllbGQiLCJnZXRGb2xkZXJzIiwiYWxsb3dfYmxhbmsiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3JlcGxpY2F0b3JfUmVwbGljYXRvcl9fIiwiQmFyZFNldCIsIkJhcmRUZXh0IiwidGV4dEJsb2NrcyIsImFsbG93U291cmNlIiwibWFya2Rvd24iLCJhbGxvd19zb3VyY2UiLCJpc1JlYWR5Iiwic2V0QmVpbmdEcmFnZ2VkIiwibGFzdERyYWdnZWRPdmVyRWxlbWVudCIsImhhc1NldHMiLCJzaG93U291cmNlIiwiZnVsbFNjcmVlbk1vZGUiLCJwcmV2aW91c1Njcm9sbFBvc2l0aW9uIiwiY29tYmluZUNvbnNlY3V0aXZlVGV4dEJsb2NrcyIsIl9kYXRhIiwiZ2V0QmxvY2siLCJhZGRUZXh0QmxvY2siLCJmb2N1c0F0IiwiYWRkQmxvY2siLCJuZXdTZXQiLCJmaWVsZHR5cGVEZWZhdWx0cyIsInNldFNlbGVjdGVkIiwic2V0SW5zZXJ0ZWQiLCJfZGF0YTIiLCJuZXdJdGVtcyIsImdldEJsYW5rU2V0IiwiY2FuU2hvd0RpdmlkZXJBdFN0YXJ0IiwiY2FuU2hvd0RpdmlkZXJBdEVuZCIsImJsb2NrcyIsInhBeGlzIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJvcmlnaW5hbFNvdXJjZSIsImFkZERyb3BBcmVhcyIsIm9yaWdpbmFsRXZlbnQiLCJtb3ZlU2V0VG9OZXdMb2NhdGlvbiIsInJlbW92ZURyb3BBcmVhcyIsInNjcm9sbFRvIiwibW92ZVNldCIsIm1vdmVTZXRJbnRvVGV4dCIsIl9kYXRhMyIsImluc2VydFBhcmFncmFwaCIsIl9ibG9jayRnZXRCZWZvcmVBbmRBZiIsImdldEJlZm9yZUFuZEFmdGVySHRtbCIsIl9ibG9jayRnZXRCZWZvcmVBbmRBZjIiLCJfc2xpY2VkVG9BcnJheSIsImJlZm9yZVNldCIsImFmdGVyU2V0IiwiZ2V0SW5zZXJ0SW5kZXgiLCJwcmV2aW91c0Jsb2NrV2FzVGV4dCIsInRvZ2dsZVNvdXJjZSIsInRvZ2dsZUZ1bGxzY3JlZW4iLCJwbGFpblRleHQiLCJnb1RvUHJldmlvdXNUZXh0RmllbGQiLCJfdGhpczgiLCJfbG9vcCIsIl9yZXQiLCJnb1RvTmV4dFRleHRGaWVsZCIsIl90aGlzOSIsInRvdGFsQmxvY2tzIiwiX2xvb3AyIiwiX3JldDIiLCJ1cGRhdGVUZXh0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19yZXBsaWNhdG9yX1JlcGxpY2F0b3JTZXRfXyIsImdvaW5nU29sbyIsImZpcnN0RmllbGR0eXBlIiwiYXNzZXQtZmllbGQuZGVsZXRlLWJhcmQtc2V0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19JbnNlcnRzQXNzZXRzX18iLCJlZGl0b3IiLCJpc1Nob3dpbmdPcHRpb25zIiwib3B0aW9uc1RvcFBvc2l0aW9uIiwiZm9jdXNlZEVsZW1lbnQiLCJkcm9wcGVkIiwic291cmNlRmllbGQiLCJpc0JsYW5rIiwib3B0aW9uU3R5bGVzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2F1dG9zaXplX19fZGVmYXVsdCIsInVwZGF0ZUVkaXRvckh0bWwiLCJfdGV4dCIsImRhdGEudGV4dCIsIm9sZFRleHQiLCJpbml0TWVkaXVtIiwidGV4dENvbnRlbnQiLCJmaXJzdEFkZGVkIiwiYWRkRHJvcEFyZWFCZWZvcmUiLCJhZGREcm9wQXJlYUFmdGVyIiwiY2hpbGROb2RlIiwiZWxzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImdldENvbnRlbnQiLCJsb2NhbGl6ZUJ1dHRvbnMiLCJidXR0b25zIiwibG9jYWxpemF0aW9ucyIsImJvbGQiLCJpdGFsaWMiLCJhcmlhIiwiZXh0ZW5zaW9ucyIsImltYWdlRHJhZ2dpbmciLCJhdXRvbGlzdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fQXV0b0xpc3RfXyIsImF1dG9ociIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9tZWRpdW1fZWRpdG9yX2F1dG9ocl9fX2RlZmF1bHQiLCJNZWRpdW1FZGl0b3JFeHRlbnNpb25zIiwiZXh0IiwiYXNzZXRCdXR0b25FeHRlbnNpb24iLCJvcHRzIiwidG9vbGJhciIsImJ1dHRvbkxhYmVscyIsImF1dG9MaW5rIiwiYXV0b2xpbmsiLCJwYXN0ZSIsImZvcmNlUGxhaW5UZXh0IiwiZm9yY2VfcGxhaW5fdGV4dCIsImNsZWFuUGFzdGVkSFRNTCIsImNsZWFuX3Bhc3RlZF9odG1sIiwic3BlbGxjaGVjayIsInRhcmdldEJsYW5rIiwidGFyZ2V0X2JsYW5rIiwibGlua1ZhbGlkYXRpb24iLCJsaW5rX3ZhbGlkYXRpb24iLCJwbGFjZWhvbGRlclRleHQiLCJrZXlib2FyZENvbW1hbmRzIiwiY29tbWFuZHMiLCJzdWJzY3JpYmUiLCJnZXRGb2N1c2VkRWxlbWVudCIsImZvY3VzRWxlbWVudCIsImdldFNlbGVjdGVkUGFyZW50RWxlbWVudCIsImNvbnRlbnRzIiwidW53cmFwIiwiaXNVcCIsImlzRG93biIsImV4cG9ydFNlbGVjdGlvbiIsImlzSW5GaXJzdEVsZW1lbnQiLCJpc0luTGFzdEVsZW1lbnQiLCJ0YWdOYW1lcyIsImNvbnRlbnREZWZhdWx0IiwiaGFuZGxlQ2xpY2siLCJnZXRFeHRlbnNpb25CeU5hbWUiLCJoaWRlVG9vbGJhciIsInNhdmVTZWxlY3Rpb24iLCJtb3ZlT3B0aW9uc1RvRWxlbWVudCIsIm9mZnNldFRvcCIsImhpZGVPcHRpb25zIiwiZWxlbWVudElzRW1wdHkiLCJnZXROZXh0U2libGluZ3MiLCJzaWJsaW5ncyIsImdldFByZXZpb3VzU2libGluZ3MiLCJzZXRDYXJldCIsImltcG9ydFNlbGVjdGlvbiIsImluc2VydFNldCIsIl9nZXRCZWZvcmVBbmRBZnRlckh0bSIsIl9nZXRCZWZvcmVBbmRBZnRlckh0bTIiLCJnZXRIdG1sRnJvbUVsZW1lbnRzIiwiY2FycnkiLCJvdXRlckhUTUwiLCJzZXRDb250ZW50IiwicmVzdG9yZVNlbGVjdGlvbiIsImNyZWF0ZUxpbmsiLCJFeHRlbnNpb24iLCJvbklucHV0Iiwib25QYXN0ZSIsImtleVByZXNzRXZlbnQiLCJsaXN0X3N0YXJ0IiwiZXhlY0FjdGlvbiIsInBhc3RlRXZlbnQiLCJsaXN0SXRlbVR5cGUiLCJuZXdFbCIsImxpVHlwZSIsIm9sZEVsIiwicmVwbGFjZUluRG9tIiwicmVwbGFjZUxpc3RJdGVtIiwiZ3JvdXBzIiwiZmxhdHRlbkdyb3VwcyIsImN1cnJlbnRHcm91cCIsInByZXZXYXNMaXN0SXRlbSIsImN1cnJlbnRJc0xpc3RJdGVtIiwiZ3JvdXBFbGVtZW50cyIsImZpcnN0RWwiLCJ3cmFwcGVyIiwiY2hlY2tDb250ZW50Q2hhbmdlZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fQWRhcHRzUmVsYXRlRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJyZWxhdGUiLCJjYWxlbmRhciIsInRpbWUiLCJoYXNEYXRlIiwiYmxhbmtBbGxvd2VkIiwiaGFzVGltZSIsInRpbWVBbGxvd2VkIiwidGltZVJlcXVpcmVkIiwiYWxsb3dUaW1lIiwiYWxsb3dfdGltZSIsInJlcXVpcmVfdGltZSIsImRhdGVTdHJpbmciLCJ1cGRhdGVEYXRlU3RyaW5nIiwidGltZVN0cmluZyIsIndhdGNoVGltZSIsIm5ld1RpbWUiLCJvbGRUaW1lIiwiYWRkVGltZSIsImhvdXIiLCJyZW1vdmVUaW1lIiwiYWRkRGF0ZSIsImJpbmRDYWxlbmRhciIsInJlbW92ZURhdGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfYmFyZW1ldHJpY3NfY2FsZW5kYXJfX19kZWZhdWx0IiwiY3VycmVudF9kYXRlIiwiZWFybGllc3RfZGF0ZSIsImlucHV0X2Zvcm1hdCIsImRhdGVGb3JtYXQiLCJqdW1wX21vbnRoIiwianVtcF95ZWFyIiwibmV3RGF0ZSIsInNob3dfdGltZSIsIm1pbl9yb3dzIiwibWF4X3Jvd3MiLCJjb250YWluZXJXaWR0aCIsInN0YWNrZWQiLCJoYXNEYXRhIiwiaXNOZXN0ZWQiLCJjYW5BZGRSb3dzIiwicHJlcGFyZUJsYW5rUm93Iiwicm93c190b19hZGQiLCJ0cmFja0NvbnRhaW5lcldpZHRoIiwiZ2V0U29ydGFibGUiLCJnZXRTb3J0YWJsZU9wdGlvbnMiLCJpc0V4Y2Vzc2l2ZSIsInN0YWNrZWRGaWVsZENsYXNzZXMiLCJncmlkQ29sV2lkdGgiLCJ0aHJvdHRsZWQiLCJ0aHJvdHRsZSIsIiRvbmNlIiwiJG9mZiIsImNyZWF0aW5nIiwic3RvcmVQZW5kaW5nIiwibmV3RmllbGRzZXROYW1lIiwiY2FuQWRkIiwiY2FuY2VsQWRkIiwibmV3SXRlbSIsImFkZEl0ZW0iLCJlZGl0SXRlbSIsImdvVXAiLCJnb0Rvd24iLCJ1cGRhdGVJdGVtIiwic2hvdWxkU2hvd0luZGV4UGhwV2FybmluZyIsImluZGV4UGhwV2FybmluZyIsImZpcnN0TG9jYWxlIiwiZ3JpZENvbmZpZyIsIlBsYWluVGV4dFJlbmRlcmVyIiwic2hvd0NoZWF0c2hlZXQiLCJjb2RlbWlycm9yIiwidG9nZ2xlRnVsbFNjcmVlbiIsImdldFRleHQiLCJnZXRTZWxlY3Rpb25zIiwiaW5zZXJ0SW1hZ2UiLCJhbHQiLCJjbSIsInNvbWV0aGluZ1NlbGVjdGVkIiwicmVwbGFjZVNlbGVjdGlvbiIsImdldEN1cnNvciIsInNldFNlbGVjdGlvbiIsImFwcGVuZEltYWdlIiwiaW5zZXJ0TGluayIsImFwcGVuZExpbmsiLCJpc0JvbGQiLCJyZW1vdmVCb2xkIiwibWFrZUJvbGQiLCJyZXBsYWNlU2VsZWN0aW9ucyIsImlzSXRhbGljIiwicmVtb3ZlSXRhbGljIiwibWFrZUl0YWxpYyIsInNob3J0Y3V0Iiwia2V5Q29kZSIsIm1ldGFLZXkiLCJzZXRDdXJzb3IiLCJsaW5lQ291bnQiLCJyZW5kZXJlciIsInRyYWNrSGVpZ2h0VXBkYXRlcyIsImNoZWF0c2hlZXQiLCJkcmFnRHJvcCIsImxpbmVXcmFwcGluZyIsInZpZXdwb3J0TWFyZ2luIiwidGFiaW5kZXgiLCJhdXRvUmVmcmVzaCIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJwYWlycyIsImV4cGxvZGUiLCJQb3MiLCJjb25mIiwiZGVmaW5lT3B0aW9uIiwib2xkIiwiSW5pdCIsInJlbW92ZUtleU1hcCIsImtleU1hcCIsImVuc3VyZUJvdW5kIiwiYWRkS2V5TWFwIiwiQmFja3NwYWNlIiwiZ2V0Q29uZmlnIiwibGlzdFNlbGVjdGlvbnMiLCJhcm91bmQiLCJjaGFyc0Fyb3VuZCIsInJlcGxhY2VSYW5nZSIsIkVudGVyIiwib3BlcmF0aW9uIiwibGluZXNlcCIsImxpbmVTZXBhcmF0b3IiLCJleGVjQ29tbWFuZCIsImluZGVudExpbmUiLCJjaGFycyIsImlkZW50aWNhbCIsIm9wZW5pbmciLCJjdXJUeXBlIiwiZ2V0UmFuZ2UiLCJnZXRUb2tlblR5cGVBdCIsImlzV29yZENoYXIiLCJnZXRMaW5lIiwiaXNDbG9zaW5nQnJhY2tldCIsInN0cmluZ1N0YXJ0c0FmdGVyIiwic2VscyIsImludmVydGVkIiwiY21wUG9zIiwic2V0U2VsZWN0aW9ucyIsInRyaWdnZXJFbGVjdHJpYyIsImhhbmRsZUNoYXIiLCJkZWZsdCIsImdldE1vZGVBdCIsImxhc3RJbmRleE9mIiwiZ2V0VG9rZW5BdCIsImllX2x0OCIsImRvY3VtZW50TW9kZSIsIm1hdGNoaW5nIiwiKCIsIlsiLCJ7IiwifSIsImZpbmRNYXRjaGluZ0JyYWNrZXQiLCJ3aGVyZSIsImdldExpbmVIYW5kbGUiLCJhZnRlckN1cnNvciIsImdldFdyYXBwZXJFbGVtZW50Iiwic3RyaWN0Iiwic2NhbkZvckJyYWNrZXQiLCJmb3J3YXJkIiwibWF4U2NhbkxlbiIsIm1heFNjYW5MaW5lTGVuZ3RoIiwibWF4U2NhbkxpbmVzIiwiYnJhY2tldFJlZ2V4IiwibGluZUVuZCIsIm1pbiIsImxhc3RMaW5lIiwiZmlyc3RMaW5lIiwibGluZU5vIiwibWF0Y2hCcmFja2V0cyIsImF1dG9jbGVhciIsIm1heEhpZ2hsaWdodExlbiIsIm1heEhpZ2hsaWdodExpbmVMZW5ndGgiLCJtYXJrcyIsIm1hcmtUZXh0IiwiZm9jdXNlZCIsImRvTWF0Y2hCcmFja2V0cyIsImN1cnJlbnRseUhpZ2hsaWdodGVkIiwib2ZmIiwiZGVmaW5lRXh0ZW5zaW9uIiwib2xkQ29uZmlnIiwic3RvcExpc3RlbmluZyIsIl9jbSIsImh1cnJ5IiwiY2hlY2siLCJsYXN0V3JhcEhlaWdodCIsInN0YXJ0TGlzdGVuaW5nIiwibW9kZUluZm8iLCJhbGlhcyIsImZpbmRNb2RlQnlNSU1FIiwiaiIsImZpbmRNb2RlQnlFeHRlbnNpb24iLCJmaW5kTW9kZUJ5RmlsZU5hbWUiLCJkb3QiLCJ1cmxSRSIsIm1vZGVDb25maWciLCJjb2RlRGVwdGgiLCJnZm1PdmVybGF5IiwiY29kZUJsb2NrIiwiYXRlU3BhY2UiLCJjb21iaW5lVG9rZW5zIiwiZ2l0SHViU3BpY2UiLCJtYXJrZG93bkNvbmZpZyIsIm92ZXJsYXlNb2RlIiwib3ZlcmxheSIsImNvbWJpbmUiLCJiYXNlUG9zIiwiYmFzZUN1ciIsIm92ZXJsYXlQb3MiLCJvdmVybGF5Q3VyIiwic3RyZWFtU2VlbiIsImJhc2VUb2tlbiIsIm92ZXJsYXlUb2tlbiIsIm1hdGNoU2VxdWVuY2UiLCJlc2NhcGVzIiwicGhwU3RyaW5nIiwicGF0dGVybnMiLCJ0b2tTdGFjayIsInBocFN0cmluZ18iLCJwaHBLZXl3b3JkcyIsInBocEF0b21zIiwicGhwQnVpbHRpbiIsInBocENvbmZpZyIsIjwiLCJxdW90ZWQiLCJwaHBNb2RlIiwicGhwIiwic3RhcnRPcGVuIiwiY3VyTW9kZSIsImN1clN0YXRlIiwicGVuZGluZyIsImh0bWxOZXciLCJwaHBOZXciLCJpc1BIUCIsIm9wZW5QSFAiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0luc2VydHNBc3NldHNfXyIsInJlZGFjdG9yIiwiJHIiLCJtaW5IZWlnaHQiLCJjaGFuZ2VDYWxsYmFjayIsInJlZGFjdG9yU2V0dGluZ3MiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX0dldHNTdWdnZXN0S2V5X18iLCJyZWxhdGUtcGFuZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1JlbGF0ZVBhbmVzRmllbGR0eXBlX3Z1ZV9fX2RlZmF1bHQiLCJyZWxhdGUtdGFncyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fUmVsYXRlVGFnc0ZpZWxkdHlwZV92dWVfX19kZWZhdWx0Iiwic2hvdWxkRm9jdXNXaGVuTG9hZGVkIiwic2luZ2xlIiwibWF4X2l0ZW1zIiwicGFuZXMiLCJnZXRTdWdnZXN0aW9ucyIsInN1Z2dlc3Rpb25zUHJvcCIsInBvcHVsYXRlU3VnZ2VzdGlvbnMiLCJwcmVmZXRjaGVkIiwicmVtb3ZlSW52YWxpZERhdGEiLCJzdWdnZXN0aW9uIiwiYWN0aXZlIiwiYXZhaWxhYmxlU3VnZ2VzdGlvbnMiLCJoYXNCZWVuU2VsZWN0ZWQiLCJtYXRjaGVzU2VhcmNoVGVybSIsIm1heFNlbGVjdGVkIiwic2VsZWN0QWN0aXZlIiwiZGlzYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fUmVwbGljYXRvcl9fIiwiYWRkU2V0IiwiY29sbGFwc2VBbGxFeGNlcHQiLCJleGNlcHQiLCJzZXRFeHBhbmRlZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fUmVwbGljYXRvclNldF9fIiwiaXNSZXZlYWxlZCIsInJldmVhbCIsImtleWVkIiwic2VsZWN0T3B0aW9ucyIsInBhcnNlZCIsImlzTmFOIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19HZXRzU3VnZ2VzdEtleV9fIiwib3B0Z3JvdXBzIiwidW5pcXVlIiwibWF4X2NvbHVtbnMiLCJzb3J0YWJsZUluaXRpYWxpemVkIiwiY29sdW1uQ291bnQiLCJjZWxscyIsInJvd0NvdW50IiwiY2FuQWRkQ29sdW1ucyIsImRlc3Ryb3lTb3J0YWJsZSIsImFkZENvbHVtbiIsImRlbGV0ZUNvbHVtbiIsInJvdyIsImRlbGltaXRlciIsInBlcnNpc3QiLCJvbkl0ZW1SZW1vdmUiLCJhZGp1c3RlZENvbmZpZyIsImF1dG9zbHVnIiwidGhlbWUiLCJlbnN1cmVUaW1lIiwicGFkIiwibWludXRlIiwiaW5pdGlhbGl6ZVRpbWUiLCJpbmNyZW1lbnRIb3VyIiwiaW5jcmVtZW50TWludXRlIiwiZm9jdXNNaW51dGUiLCJpc09uIiwia25vYiIsImxpbmVOdW1iZXJzIiwic2VsZWN0ZWRHcm91cE5hbWVzIiwiZ2V0R3JvdXBzIiwicm9sZXMiLCJzZWxlY3RlZFJvbGVOYW1lcyIsImdldFJvbGVzIiwicm9sZSIsImlzRW1iZWRkYWJsZSIsImlzVmlkZW8iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX2RpcmVjdGl2ZXNfZWxhc3RpY19fIiwiZGlyZWN0aXZlIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19kaXJlY3RpdmVzX3RpcF9fIiwiZm9jdXNhYmxlIiwidGlwVGV4dCIsInNldEF0dHJpYnV0ZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF90aXBweV9qc19fX2RlZmF1bHQiLCJhbmltYXRlRmlsbCIsInBlcmZvcm1hbmNlIl0sIm1hcHBpbmdzIjoidUNBQUEsSUFBQUEsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCx5QkNiN0MsSUFBQUosRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxtQ0NiN0NZLEVBQUEsR0FFSUMsT0FBUSxVQUVSTixVQUVJTyxTQUZNLFdBR0YsT0FBT0MsS0FBS0MsUUFBUUEsUUFBUUEsUUFBUUEsUUFBUUYsNkJDUHhELElBQUFsQixFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLHlCQ2I3QyxJQUFBSixFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLDZTQ2J2Q2lCLGFBRUYsU0FBQUEsRUFBWUMsZ0dBQVVDLENBQUFKLEtBQUFFLEdBQ2xCRixLQUFLRyxTQUFXQSxFQUNoQkgsS0FBS0ssS0FBT0YsRUFBU0UsS0FDckJMLEtBQUtNLFNBQVdOLEtBQUtPLGNBQWNKLEVBQVNHLFVBQzVDTixLQUFLUSw4REFHS0YsR0FBVSxJQUFBRyxFQUFBVCxLQUNwQixPQUFPVSxFQUFFQyxNQUFNTCxHQUFVTSxVQUFVLFNBQUNDLEVBQVNDLEdBR3pDLE9BRkFELEVBQVFDLE9BQVNBLEVBQ2pCRCxFQUFRRSxPQUFTTixFQUFLTyxZQUFZSCxFQUFRRSxRQUNuQ0YsSUFDUkksU0FBU0MsNENBR0pILEdBQ1IsT0FBT0wsRUFBRUMsTUFBTUksR0FBUUgsVUFBVSxTQUFDTyxFQUFRTCxHQUV0QyxPQURBSyxFQUFPZCxLQUFPUyxFQUNQSyxJQUNSRixTQUFTQyx5Q0FPUEUsR0FFTCxPQURJQSxHQUFNcEIsS0FBS1EsV0FBV2EsS0FBSyxRQUN4QnJCLHNDQU9Gb0IsR0FFTCxPQURJQSxHQUFNcEIsS0FBS1EsV0FBV2EsS0FBSyxRQUN4QnJCLDRDQWlCUCxPQVRNQSxLQUFLc0IsbUJBQW1CQyxTQUFTLFVBQ25DdkIsS0FBS3dCLHFCQUFxQkMsU0FDdEJwQixLQUFNLFFBQ05xQixLQUFNLE9BQ05DLGFBQWMsS0FDZEMsTUFBTyxNQUlSNUIsMkNBTUcsSUFBQTZCLEVBQUE3QixLQUNWQSxLQUFLOEIsZ0JBRUwsSUFBSWYsRUFBU2YsS0FBS3NCLG1CQVVsQixPQVJBWixFQUFFcUIsS0FBSy9CLEtBQUtRLFdBQVksU0FBQXdCLEdBQ2ZqQixFQUFPUSxTQUFTUyxJQUNqQkgsRUFBS0ksa0JBQW1CNUIsS0FBTTJCLEVBQU9OLEtBQU1NLE1BSW5EaEMsS0FBS2tDLHFCQUVFbEMsOENBTU1tQixHQUNiLElBQUlnQixFQUFVbkMsS0FBS29DLHVCQUVmSixFQUFRdkMsT0FBTzRDLFFBQ2ZDLFFBQVEsRUFDUlYsTUFBTyxJQUNQVyxhQUFhLEdBQ2RwQixPQUVIZ0IsRUFBUVYsUUFBUU8sMkNBUUF0QixFQUFFOEIsS0FBS3hDLEtBQUtNLFVBQVlRLE9BQVEsYUFHNUNkLEtBQUtNLFNBQVNlLE1BQU9QLE9BQVEsVUFBVzJCLFFBQVNDLFVBQVUsV0FBWTNCLHlEQVV2RWYsS0FBS29DLHVCQUF1Qk8sT0FBUyxJQUV6QzNDLEtBQUtNLFNBQVdJLEVBQUVrQyxPQUFPNUMsS0FBS00sU0FBVSxTQUFBTyxHQUFBLE1BQTZCLFdBQWxCQSxFQUFRQyxxREFPM0QsT0FBT0osRUFBRUMsTUFBTVgsS0FBS00sVUFBVXVDLElBQUksU0FBQWhDLEdBQUEsT0FBV0EsRUFBUUUsU0FBUStCLFVBQVVDLE1BQU0sUUFBUTdCLHFEQU9yRixPQUFPbEIsS0FBS00sU0FBUyxHQUFHUyxzREFPeEIsT0FBT0wsRUFBRThCLEtBQUt4QyxLQUFLTSxVQUFZUSxPQUFRLFlBQWFDLHdDQU9wRCxPQUFPTCxFQUFFQyxNQUFNWCxLQUFLTSxVQUFVeUMsTUFBTSxVQUFVRCxVQUFVNUIsaUJBS2hFckIsRUFBQSx3Q0N4SUMsU0FBQW1ELEdBQ0QsYUFFQSxJQUFBQyxHQUNBQyxpQkFBb0JDLE1BQUEsRUFBQUMsTUFBQSxFQUFBQyxJQUFBLEVBQUFDLEtBQUEsRUFBQUMsU0FBQSxFQUNwQkMsT0FBQSxFQUFBQyxPQUFBLEVBQUFDLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxPQUFBLEVBQ0FDLFFBQUEsRUFBQUMsTUFBQSxFQUFBQyxNQUFBLEVBQUFDLE9BQUEsRUFBQUMsUUFBQSxFQUNBQyxPQUFBLEVBQUFDLEtBQUEsRUFBQUMsVUFBQSxHQUNBQyxrQkFBcUJDLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxVQUFBLEVBQUFDLFFBQUEsRUFBQUMsR0FBQSxFQUNyQkMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLE9BQUEsRUFBQUMsSUFBQSxFQUFBQyxPQUFBLEVBQ0FDLElBQUEsRUFBQUMsSUFBQSxHQUNBQyxpQkFDQVosSUFBV0EsSUFBQSxFQUFBYSxJQUFBLEdBQ1hBLElBQVdiLElBQUEsRUFBQWEsSUFBQSxHQUNYWixJQUFXQSxJQUFBLEdBQ1hFLFFBQWVBLFFBQUEsRUFBQUQsVUFBQSxHQUNmQSxVQUFpQkEsVUFBQSxHQUNqQkUsR0FBVVUsU0FBQSxFQUFBQyxTQUFBLEVBQUFDLE9BQUEsRUFBQUMsWUFBQSxFQUFBQyxLQUFBLEVBQ1ZDLEtBQUEsRUFBQUMsSUFBQSxFQUFBdkYsVUFBQSxFQUFBd0YsUUFBQSxFQUFBQyxNQUFBLEVBQ0FDLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQ0FDLFFBQUEsRUFBQUMsUUFBQSxFQUFBMUMsSUFBQSxFQUFBMkMsTUFBQSxFQUFBQyxLQUFBLEVBQUFDLElBQUEsRUFDQTdCLEdBQUEsRUFBQThCLEtBQUEsRUFBQTNGLFNBQUEsRUFBQTRGLE9BQUEsRUFBQUMsSUFBQSxHQUNBL0IsSUFBV0EsSUFBQSxFQUFBQyxJQUFBLEdBQ1hBLElBQVdELElBQUEsRUFBQUMsSUFBQSxHQUNYQyxPQUFjQSxPQUFBLEVBQUFFLE9BQUEsR0FDZEQsSUFBV0EsSUFBQSxFQUFBRSxJQUFBLEdBQ1hELE9BQWNGLE9BQUEsR0FDZEcsSUFBV0YsSUFBQSxFQUFBRSxJQUFBLEdBQ1gyQixPQUFjOUIsT0FBQSxFQUFBRSxPQUFBLEdBQ2RFLElBQVdBLElBQUEsSUFFWDJCLGFBQWdCSixLQUFBLEdBQ2hCSyxlQUFBLEVBQ0FDLGNBQUEsRUFDQUMsVUFBQSxHQUdBQyxHQUNBOUQsbUJBQ0FtQixvQkFDQWEsbUJBQ0EwQixlQUNBQyxlQUFBLEVBQ0FDLGNBQUEsRUFDQUcscUJBQUEsRUFDQUYsVUFBQSxHQUdBL0QsRUFBQWtFLFdBQUEsZUFBQUMsRUFBQUMsR0FDQSxJQU9BMUYsRUFBQTJGLEVBUEFDLEVBQUFILEVBQUFHLFdBQ0FuRyxLQUNBb0csRUFBQUgsRUFBQUksU0FBQXZFLEVBQUErRCxFQUNBLFFBQUFTLEtBQUFGLEVBQUFwRyxFQUFBc0csR0FBQUYsRUFBQUUsR0FDQSxRQUFBQSxLQUFBTCxFQUFBakcsRUFBQXNHLEdBQUFMLEVBQUFLLEdBS0EsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxTQUFBakgsRUFBQWtILEdBRUEsT0FEQUQsRUFBQUUsU0FBQUQsRUFDQUEsRUFBQUYsRUFBQUMsR0FHQSxJQUFBRyxFQUFBSixFQUFBSyxPQUNBLFdBQUFELEVBQ0FKLEVBQUFNLElBQUEsS0FDQU4sRUFBQU0sSUFBQSxLQUNBTixFQUFBTyxNQUFBLFVBQUF2SCxFQUFBd0gsRUFBQSxlQUNBLEtBQ1NSLEVBQUFPLE1BQUEsTUFDVHZILEVBQUF3SCxFQUFBLHFCQUNTUixFQUFBTyxNQUFBLGtCQUNUUCxFQUFBUyxTQUFBLGFBQ0F6SCxFQW1GQSxTQUFBMEgsRUFBQUMsR0FDQSxnQkFBQVgsRUFBQUMsR0FFQSxJQURBLElBQUFHLEVBQ0EsT0FBQUEsRUFBQUosRUFBQUssU0FBQSxDQUNBLFFBQUFELEVBRUEsT0FEQUgsRUFBQUUsU0FBQU8sRUFBQUMsRUFBQSxHQUNBVixFQUFBRSxTQUFBSCxFQUFBQyxHQUNTLFFBQUFHLEVBQUEsQ0FDVCxNQUFBTyxFQUFBLENBQ0FWLEVBQUFFLFNBQUFKLEVBQ0EsTUFHQSxPQURBRSxFQUFBRSxTQUFBTyxFQUFBQyxFQUFBLEdBQ0FWLEVBQUFFLFNBQUFILEVBQUFDLElBSUEsY0FwR0FTLENBQUEsS0FFQSxLQUVPVixFQUFBTSxJQUFBLE1BQ1BOLEVBQUFTLFNBQUEsYUFDQVIsRUFBQUUsU0FBQUssRUFBQSxhQUNBLFNBRUF6RyxFQUFBaUcsRUFBQU0sSUFBQSwwQkFDQUwsRUFBQUUsU0FBQVMsRUFDQSxlQUVLLEtBQUFSLEdBRUxKLEVBQUFNLElBQUEsS0FDQU4sRUFBQU0sSUFBQSxLQUNBTixFQUFBUyxTQUFBLGVBQUFULEVBQUFNLElBQUEsS0FFQU4sRUFBQVMsU0FBQSxTQUFBVCxFQUFBTSxJQUFBLEtBR0FOLEVBQUFTLFNBQUEsY0FBQVQsRUFBQU0sSUFBQSxNQUVBLGdCQUVBTixFQUFBUyxTQUFBLFNBQ0EsTUFLQSxTQUFBRyxFQUFBWixFQUFBQyxHQUNBLElBd0JBWSxFQUNBQyxFQXpCQVYsRUFBQUosRUFBQUssT0FDQSxRQUFBRCxHQUFBLEtBQUFBLEdBQUFKLEVBQUFNLElBQUEsS0FHQSxPQUZBTCxFQUFBRSxTQUFBSixFQUNBaEcsRUFBQSxLQUFBcUcsRUFBQSx3QkFDQSxjQUNLLFFBQUFBLEVBRUwsT0FEQXJHLEVBQUEsU0FDQSxLQUNLLFFBQUFxRyxFQUFBLENBQ0xILEVBQUFFLFNBQUFKLEVBQ0FFLFFBQUFjLEVBQ0FkLEVBQUFlLFFBQUFmLEVBQUFnQixTQUFBLEtBQ0EsSUFBQVosRUFBQUosRUFBQUUsU0FBQUgsRUFBQUMsR0FDQSxPQUFBSSxJQUFBLHlCQUNLLGVBQUFhLEtBQUFkLElBQ0xILEVBQUFFLFVBU0FVLEVBVEFULEdBVUFVLEVBQUEsU0FBQWQsRUFBQUMsR0FDQSxNQUFBRCxFQUFBbUIsT0FDQSxHQUFBbkIsRUFBQUssUUFBQVEsRUFBQSxDQUNBWixFQUFBRSxTQUFBUyxFQUNBLE1BR0EsaUJBRUFRLGVBQUEsRUFDQU4sR0FuQkFiLEVBQUFvQixlQUFBckIsRUFBQXNCLFNBQ0FyQixFQUFBRSxTQUFBSCxFQUFBQyxLQUVBRCxFQUFBTyxNQUFBLDRDQUNBLFFBa0JBLFNBQUFDLEVBQUFlLEVBQUFDLEdBQ0EsZ0JBQUF4QixFQUFBQyxHQUNBLE1BQUFELEVBQUFtQixPQUFBLENBQ0EsR0FBQW5CLEVBQUFPLE1BQUFpQixHQUFBLENBQ0F2QixFQUFBRSxTQUFBSixFQUNBLE1BRUFDLEVBQUFLLE9BRUEsT0FBQWtCLEdBZ0NBLFNBQUFFLEVBQUF4QixHQUNBQSxFQUFBeUIsVUFBQXpCLEVBQUF5QixRQUFBekIsRUFBQXlCLFFBQUFDLE1BRUEsU0FBQUMsRUFBQTNCLEVBQUE0QixHQUVBLElBREEsSUFBQUMsSUFDQSxDQUNBLElBQUE3QixFQUFBeUIsUUFDQSxPQUdBLEdBREFJLEVBQUE3QixFQUFBeUIsUUFBQVYsU0FDQXhILEVBQUErRCxnQkFBQXdFLGVBQUFELEtBQ0F0SSxFQUFBK0QsZ0JBQUF1RSxHQUFBQyxlQUFBRixHQUNBLE9BRUFKLEVBQUF4QixJQUlBLFNBQUFjLEVBQUFoSCxFQUFBaUcsRUFBQUMsR0FDQSxpQkFBQWxHLEdBQ0FrRyxFQUFBZ0IsU0FBQWpCLEVBQUFzQixTQUNBVSxHQUNLLFlBQUFqSSxFQUNMa0ksRUFFQWxCLEVBR0EsU0FBQWlCLEVBQUFqSSxFQUFBaUcsRUFBQUMsR0FDQSxjQUFBbEcsR0FDQWtHLEVBQUFlLFFBQUFoQixFQUFBa0MsVUFDQXhDLEVBQUEsTUFDQXlDLEdBQ0szSSxFQUFBOEYscUJBQUEsVUFBQXZGLEdBQ0wyRixFQUFBLGNBQ0F5QyxFQUFBcEksRUFBQWlHLEVBQUFDLEtBRUFQLEVBQUEsUUFDQXNDLEdBR0EsU0FBQUMsRUFBQWxJLEVBQUFpRyxFQUFBQyxHQUNBLFdBQUFsRyxFQUFBLENBQ0EsSUFBQWlILEVBQUFoQixFQUFBa0MsVUFJQSxPQUhBakMsRUFBQXlCLFNBQUF6QixFQUFBeUIsUUFBQVYsWUFDQXhILEVBQUFrRCxpQkFBQXFGLGVBQUE5QixFQUFBeUIsUUFBQVYsVUFDQVMsRUFBQXhCLEdBQ0FBLEVBQUF5QixTQUFBekIsRUFBQXlCLFFBQUFWLGFBQUEsSUFBQXhILEVBQUE0SSxjQUNBMUMsRUFBQSxNQUNBMkMsSUFFQTNDLEVBQUEsWUFDQTRDLEdBRUssT0FBQTlJLEVBQUE4RixxQkFBQSxVQUFBdkYsR0FDTDJGLEVBQUEsY0FDQTJDLEVBQUF0SSxFQUFBaUcsRUFBQUMsS0FFQVAsRUFBQSxRQUNBNEMsR0FJQSxTQUFBRCxFQUFBdEksRUFBQXdJLEVBQUF0QyxHQUNBLGdCQUFBbEcsR0FDQTJGLEVBQUEsUUFDQTJDLElBRUFaLEVBQUF4QixHQUNBYyxHQUVBLFNBQUF1QixFQUFBdkksRUFBQWlHLEVBQUFDLEdBRUEsT0FEQVAsRUFBQSxRQUNBMkMsRUFBQXRJLEVBQUFpRyxFQUFBQyxHQUdBLFNBQUFrQyxFQUFBcEksRUFBQXdJLEVBQUF0QyxHQUNBLFdBQUFsRyxFQUVBLE9BREEyRixFQUFBLFlBQ0E4QyxFQUNLLGFBQUF6SSxHQUFBLGdCQUFBQSxFQUFBLENBQ0wsSUFBQWlILEVBQUFmLEVBQUFlLFFBQUFDLEVBQUFoQixFQUFBZ0IsU0FTQSxPQVJBaEIsRUFBQWUsUUFBQWYsRUFBQWdCLFNBQUEsS0FDQSxnQkFBQWxILEdBQ0FQLEVBQUErQixnQkFBQXdHLGVBQUFmLEdBQ0FZLEVBQUEzQixFQUFBZSxJQUVBWSxFQUFBM0IsRUFBQWUsR0FDQWYsRUFBQXlCLFFBQUEsSUFoR0EsU0FBQXpCLEVBQUFlLEVBQUF5QixHQUNBcEssS0FBQXNKLEtBQUExQixFQUFBeUIsUUFDQXJKLEtBQUEySSxVQUNBM0ksS0FBQXFLLE9BQUF6QyxFQUFBMEMsU0FDQXRLLEtBQUFvSyxlQUNBakosRUFBQXlGLFlBQUE4QyxlQUFBZixJQUFBZixFQUFBeUIsU0FBQXpCLEVBQUF5QixRQUFBa0IsWUFDQXZLLEtBQUF1SyxVQUFBLEdBMEZBLENBQUEzQyxFQUFBZSxFQUFBQyxHQUFBaEIsRUFBQTBDLFdBRUE1QixFQUdBLE9BREFyQixFQUFBLFFBQ0F5QyxFQUVBLFNBQUFLLEVBQUF6SSxFQUFBaUcsRUFBQUMsR0FDQSxnQkFBQWxHLEVBQUE4SSxHQUNBckosRUFBQTJGLGVBQUFPLEVBQUEsU0FDQXlDLEVBQUFwSSxFQUFBaUcsRUFBQUMsSUFFQSxTQUFBNEMsRUFBQTlJLEVBQUFpRyxFQUFBQyxHQUNBLGdCQUFBbEcsRUFBQStJLEVBQ0EsUUFBQS9JLEdBQUFQLEVBQUEwRixlQUFpRFEsRUFBQSxTQUFvQnlDLElBQ3JFekMsRUFBQSxRQUNBeUMsRUFBQXBJLEVBQUFpRyxFQUFBQyxJQUVBLFNBQUE2QyxFQUFBL0ksRUFBQWlHLEVBQUFDLEdBQ0EsZ0JBQUFsRyxFQUFBK0ksRUFDQVgsRUFBQXBJLEVBQUFpRyxFQUFBQyxHQUdBLE9Bak1BRixFQUFBZ0QsVUFBQSxHQWtNQUMsV0FBQSxTQUFBQyxHQUNBLElBQUFoRCxHQUFtQkUsU0FBQUosRUFDbkJFLE1BQUFjLEVBQ0E0QixTQUFBTSxHQUFBLEVBQ0FqQyxRQUFBLEtBQUFDLFNBQUEsS0FDQVMsUUFBQSxNQUVBLE9BREEsTUFBQXVCLElBQUFoRCxFQUFBZ0QsY0FDQWhELEdBR0FpRCxNQUFBLFNBQUFsRCxFQUFBQyxHQUlBLElBSEFBLEVBQUFlLFNBQUFoQixFQUFBbUQsUUFDQWxELEVBQUEwQyxTQUFBM0MsRUFBQW9ELGVBRUFwRCxFQUFBcUQsV0FBQSxZQUNBdEosRUFBQSxLQUNBLElBQUF3SCxFQUFBdEIsRUFBQUUsU0FBQUgsRUFBQUMsR0FPQSxPQU5Bc0IsR0FBQXhILElBQUEsV0FBQXdILElBQ0E3QixFQUFBLEtBQ0FPLGdCQUFBbEcsR0FBQXdILEVBQUF2QixFQUFBQyxHQUNBUCxJQUNBNkIsRUFBQSxTQUFBN0IsRUFBQTZCLEVBQUEsU0FBQTdCLElBRUE2QixHQUdBbUIsT0FBQSxTQUFBekMsRUFBQXFELEVBQUFDLEdBQ0EsSUFBQTdCLEVBQUF6QixFQUFBeUIsUUFFQSxHQUFBekIsRUFBQUUsU0FBQWlCLGNBQ0EsT0FBQW5CLEVBQUFnQixVQUFBaEIsRUFBQTBDLFNBQ0ExQyxFQUFBb0IsZUFBQSxFQUVBcEIsRUFBQTBDLFNBQUFoRCxFQUVBLEdBQUErQixLQUFBa0IsU0FBQSxPQUFBdkgsRUFBQW1JLEtBQ0EsR0FBQXZELEVBQUFFLFVBQUFTLEdBQUFYLEVBQUFFLFVBQUFKLEVBQ0EsT0FBQXdELElBQUFoRCxNQUFBLGFBQUF2RixPQUFBLEVBRUEsR0FBQWlGLEVBQUFlLFFBQ0EsV0FBQXhILEVBQUFpSywwQkFDQXhELEVBQUFnQixTQUFBaEIsRUFBQWUsUUFBQWhHLE9BQUEsRUFFQWlGLEVBQUFnQixTQUFBdEIsR0FBQW5HLEVBQUFrSywwQkFBQSxHQUVBLEdBQUFsSyxFQUFBbUssWUFBQSxjQUFBekMsS0FBQW9DLEdBQUEsU0FDQSxJQUFBTSxFQUFBTixHQUFBLHNCQUFBTyxLQUFBUCxHQUNBLEdBQUFNLEtBQUEsR0FDQSxLQUFBbEMsR0FBQSxDQUNBLEdBQUFBLEVBQUFWLFNBQUE0QyxFQUFBLElBQ0FsQyxJQUFBQyxLQUNBLE1BQ1csSUFBQW5JLEVBQUFrRCxpQkFBQXFGLGVBQUFMLEVBQUFWLFNBR1gsTUFGQVUsSUFBQUMsVUFLTyxHQUFBaUMsRUFDUCxLQUFBbEMsR0FBQSxDQUNBLElBQUFvQyxFQUFBdEssRUFBQStELGdCQUFBbUUsRUFBQVYsU0FDQSxJQUFBOEMsTUFBQS9CLGVBQUE2QixFQUFBLElBR0EsTUFGQWxDLElBQUFDLEtBS0EsS0FBQUQsS0FBQUMsT0FBQUQsRUFBQWUsYUFDQWYsSUFBQUMsS0FDQSxPQUFBRCxJQUFBZ0IsT0FBQS9DLEVBQ0FNLEVBQUFnRCxZQUFBLEdBR0FjLGNBQUEsZ0JBQ0FDLGtCQUFBLFVBQ0FDLGdCQUFBLFNBRUFDLGNBQUExSyxFQUFBcUcsU0FBQSxhQUNBc0UsV0FBQTNLLEVBQUFxRyxTQUFBLGFBRUF1RSxjQUFBLFNBQUFuRSxHQUNBQSxTQUFBNEMsSUFDQTVDLFFBQUFrQyxPQUtBOUcsRUFBQWdKLFdBQUEsa0JBQ0FoSixFQUFBZ0osV0FBQSx5QkFDQWhKLEVBQUFpSixVQUFBdkMsZUFBQSxjQUNBMUcsRUFBQWdKLFdBQUEsYUFBc0MzTCxLQUFBLE1BQUFtSCxVQUFBLEtBell0QzBFLENBQUFsTixFQUFBLGlMQ0xBYSxFQUFBLEdBRUlzTSxLQUZXLFdBR1AsT0FDSUMsT0FBUSxPQUloQjVNLFVBRUk2TSxRQUZNLFdBR0YsT0FBTzNMLEVBQUVtQyxJQUFJeUosU0FBU0QsUUFBUyxTQUFDRCxFQUFRdEwsR0FDcEMsT0FBU3lMLEtBQU1ILEVBQU8vTCxLQUFNYSxNQUFPSixPQU0vQzBMLE1BbEJXLFdBbUJQeE0sS0FBS29NLE9BQVNwTSxLQUFLeU0sb0JBR3ZCQyxTQUVJRCxpQkFGSyxXQUdELElBQU1FLEVBQWdCbE4sT0FBT0MsS0FBSzRNLFNBQVNELFNBQVMsR0FFcEQsR0FBNkMsSUFBekM1TSxPQUFPQyxLQUFLNE0sU0FBU0QsU0FBUzFKLE9BQWMsT0FBT2dLLEVBRXZELElBQU0vTSxFQUFNSSxLQUFLNE0sMkJBRWpCLE9BQU1oTixHQUVDaU4sYUFBYUMsUUFBUWxOLElBRlYrTSxHQUt0QkMseUJBZEssV0FlRCxNQUFPLG1CQUdYRyxnQkFsQkssYUFzQkxDLGtCQXRCSyxXQXNCZSxJQUFBdk0sRUFBQVQsS0FDaEJBLEtBQUtpTixPQUFPLFNBQVUsU0FBQy9MLEdBQ25CVCxFQUFLc00sa0JBQ0wsSUFBTW5OLEVBQU1hLEVBQUttTSwyQkFDYmhOLEdBQUtpTixhQUFhSyxRQUFRdE4sRUFBS3NCLHFEQ2hEbkRyQixFQUFBLEdBRUlzTSxLQUZXLFdBR1AsT0FDSWdCLFlBQVksSUFJcEIzTixVQUVJNE4sYUFGTSxXQUdGLFFBQ01sTSxPQUFPLEVBQU1xTCxLQUFNN0osVUFBVSxvQkFDN0J4QixPQUFPLEVBQU9xTCxLQUFNN0osVUFBVSxzQkFNNUM4SixNQW5CVyxXQW9CUHhNLEtBQUttTixXQUFhbk4sS0FBS3FOLHdCQUczQlgsU0FFSVcscUJBRkssV0FHRCxJQUFNek4sRUFBTUksS0FBS3NOLCtCQUVqQixPQUFNMU4sR0FFNEIsVUFBOUJpTixhQUFhQyxRQUFRbE4sSUFPN0IwTiw2QkFkSyxXQWVELE1BQU8sbUJBR1hDLG9CQWxCSyxhQXNCTEMsc0JBdEJLLFdBc0JtQixJQUFBL00sRUFBQVQsS0FDcEJBLEtBQUtpTixPQUFPLGFBQWMsU0FBQy9MLEdBQ3ZCVCxFQUFLOE0sc0JBQ0wsSUFBTTNOLEVBQU1hLEVBQUs2TSwrQkFDYjFOLEdBQUtpTixhQUFhSyxRQUFRdE4sRUFBS3NCLHlCQ2pEbkQsSUFBQXJDLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsbUNDYjdDWSxFQUFBLEdBRUlzTSxLQUZXLFdBR1AsT0FDSXNCLGNBQWMsSUFLdEJmLFNBU0lnQixTQVRLLFdBVUsxTixLQUFLMk4sTUFBTUMsa0JBQ2I1TixLQUFLeU4sY0FBZSxJQU81QkksU0FsQkssV0FtQkQ3TixLQUFLeU4sY0FBZSxtQ0M1QmhDNU4sRUFBQSxHQUVJQyxPQUNJLFlBQ0EsU0FDQSxTQUNBLGFBQ0EsVUFDQSxpQkFDQSxxQkFDQSxlQUlKTixVQUVJc08sV0FGTSxXQUdGLE9BQU85TixLQUFLK04sT0FBT3BMLFFBQVUzQyxLQUFLZ08sV0FBV3JMLFFBR2pEc0wsVUFOTSxXQU9GLFFBQU1qTyxLQUFLa08sUUFJd0IsT0FBNUJsTyxLQUFLa08sT0FBT0MsY0FNM0J6QixTQUtJMEIsYUFMSyxTQUtRQyxHQUNUck8sS0FBS3NPLE1BQU0sa0JBQW1CRCxJQU1sQ0UsWUFaSyxTQVlPQyxHQUNKeE8sS0FBS3lPLElBQUksVUFBV3pPLEtBQUswTyxVQUFXLFVBQ3BDMU8sS0FBS3NPLE1BQU0saUJBQWtCRSxJQU9yQ0csY0FyQkssU0FxQlNILEdBQ1Z4TyxLQUFLc08sTUFBTSxtQkFBb0JFLElBTW5DSSxVQTVCSyxTQTRCS0osR0FDTnhPLEtBQUtzTyxNQUFNLGdCQUFpQkUsSUFNaENLLFlBbkNLLFNBbUNPTCxHQUNSeE8sS0FBS3NPLE1BQU0sbUJBQW9CRSxHQUMvQnhPLEtBQUtzTyxNQUFNLGlCQUFrQkUsSUFHakNNLG1CQXhDSyxTQXdDY04sR0FDZnhPLEtBQUtzTyxNQUFNLHdCQU1mUyxXQS9DSyxTQStDTVYsR0FDUHJPLEtBQUtzTyxNQUFNLGlCQUFrQkQsSUFNakNXLGFBdERLLFNBc0RRWCxHQUFNLElBQUE1TixFQUFBVCxLQUNUaVAsRUFBTUMsT0FBTyx5QkFFbkJDLE1BQ0l6TixLQUFNLFVBQ04wTixNQUFPMU0sVUFBVSxtQkFDakI2SixLQUFNOEMsaUJBQWlCLDRCQUN2QkMsa0JBQW1CNU0sVUFBVSxrQkFDN0I2TSxpQkFBa0I3TSxVQUFVLGFBQzVCOE0sa0JBQWtCLEdBQ25CLFdBQ0MvTyxFQUFLZ1AsTUFBTUMsT0FBT1QsR0FDZFAsVUFBV2pPLEVBQUtpTyxVQUNoQmlCLFFBQVN0QixJQUNWdUIsUUFBUSxTQUFDQyxHQUNScFAsRUFBSzZOLE1BQU0saUJBQWtCRCxHQUM3QjVOLEVBQUtxUCxRQUFTLE9BSzFCQyxlQTNFSyxTQTJFVXZCLEdBQ1h4TyxLQUFLdU8sWUFBWUMsR0FDakJ4TyxLQUFLZ1EsZ0JBQWlCLGdEQzVHbENuUSxFQUFBLEdBRUlDLE9BQVEsUUFBUyxrQkFHakJOLFVBS0l5USxXQUxNLFdBTUYsT0FBT3ZQLEVBQUV3UCxTQUFTbFEsS0FBS21RLGVBQWdCblEsS0FBS29RLE1BQU01QixLQU10RDZCLFdBWk0sV0FhRixNQUFnQyxRQUF6QnJRLEtBQUtvUSxNQUFNRSxZQUF3QnRRLEtBQUtvUSxNQUFNbkIsSUFBSTFOLFNBQVMsTUFNdEVnUCxtQkFuQk0sV0FvQkYsTUFBTywwQkFBNEJ2USxLQUFLb1EsTUFBTW5CLElBQU0sT0FLNUR2QyxTQUtJOEQsT0FMSyxXQU1HeFEsS0FBS2lRLFdBQ0xqUSxLQUFLeVEsV0FFTHpRLEtBQUswUSxVQUliQSxPQWJLLFdBY0QxUSxLQUFLc08sTUFBTSxXQUFZdE8sS0FBS29RLE1BQU01QixLQUd0Q2lDLFNBakJLLFdBa0JEelEsS0FBS3NPLE1BQU0sYUFBY3RPLEtBQUtvUSxNQUFNNUIsS0FNeENJLFVBeEJLLFdBeUJENU8sS0FBS3NPLE1BQU0sVUFBV3RPLEtBQUtvUSxNQUFNNUIsS0FNckNLLFlBL0JLLFdBZ0NEN08sS0FBS3NPLE1BQU0sV0FBWXRPLEtBQUtvUSxNQUFNNUIsS0FHdEN1QixlQW5DSyxTQW1DVVksR0FDWEEsRUFBRUMsYUFBYUMsUUFBUSxRQUFTN1EsS0FBS29RLE1BQU01QixJQUMzQ21DLEVBQUVDLGFBQWFFLGNBQWdCLE9BQy9COVEsS0FBS3NPLE1BQU0saUJBQWtCdE8sS0FBS29RLE1BQU01QixLQUc1Q3VDLGNBekNLLFdBNENnRCxXQUE3Q0MsU0FBU0MsU0FBU0MsU0FBU0MsTUFBTSxLQUFLLEdBQ3RDblIsS0FBSzRPLGFBRUw1TyxLQUFLMFEsU0FDTDFRLEtBQUtzTyxNQUFNLGdCQUFpQnRPLEtBQUtvUSxNQUFNNUIscURDOUV2RDNPLEVBQUEsR0FFSUMsT0FBUSxVQUdSNE0sU0FFSTBCLGFBRkssV0FHRHBPLEtBQUtzTyxNQUFNLFdBQVl0TyxLQUFLa08sT0FBT0csT0FHdkNVLFdBTkssV0FPRC9PLEtBQUtzTyxNQUFNLFVBQVd0TyxLQUFLa08sT0FBT0csTUFFbENyTyxLQUFLb1IscUJBQXNCLEdBRy9CcEMsYUFaSyxXQWFEaFAsS0FBS3NPLE1BQU0sV0FBWXRPLEtBQUtrTyxPQUFPRyxNQUVuQ3JPLEtBQUtvUixxQkFBc0IsR0FHL0JDLEtBbEJLLFNBa0JBVixHQUNEM1EsS0FBS3NPLE1BQU0sb0JBQXFCdE8sS0FBS2tPLE9BQU9HLEtBQU1zQyx1REN0QjlEOVEsRUFBQSxHQUNJeVIsUUFBVUMsRUFBQSxPQUVWcEYsS0FIVyxXQUlQLE9BQ0lpRixxQkFBcUIsSUFJN0JJLFFBQ0lDLGlCQUFrQixTQUFVQyxHQUNwQjFSLE1BQVEwUixJQUlaMVIsS0FBS29SLHFCQUFzQixLQUluQzFFLFNBQ0lpRixjQURLLFdBRUQzUixLQUFLc08sTUFBTSxnQkFBaUJ0TyxNQUU1QkEsS0FBS29SLHFCQUF1QnBSLEtBQUtvUixxQkFHckNRLEtBUEssV0FRRDVSLEtBQUtvUixxQkFBc0Isc0JDN0J2QyxJQUFBdlMsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxzQkNiN0MsSUFBQUosRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxvQ0NiN0MsU0FBQXlCLEdBQUEsSUFBTWlNLEVBQWdCbE4sT0FBT0MsS0FBSzRNLFNBQVNELFNBQVMsR0FFOUN3RixHQURnQnZGLFNBQVN3RixTQUFXeEYsU0FBU3dGLFFBQVExRixRQUEyQk8sS0FDckNBLEVBRWpEOU0sRUFBQSxHQUVJQyxPQUFRLFFBQVMsT0FBUSxTQUFVLFlBQWEsT0FFaEROLFVBRUl1UyxVQUZNLFdBR0YsT0FBUS9SLEtBQUtDLFFBQVErUixhQUFhelEsU0FBU3ZCLEtBQUtnQyxNQUFNM0IsT0FHMUQ0UixXQU5NLFdBT0YsT0FBUUosSUFBMkI3UixLQUFLa1MsZUFHNUNDLFNBVk0sV0FXRixPQUFPelIsRUFBRTBSLElBQUlwUyxLQUFLQyxRQUFRb1MsT0FBUSxVQUFVclMsS0FBS2dDLE1BQU0zQixPQUczRGlTLFFBZE0sV0FlRixPQUNJLGFBQ0F0UyxLQUFLdVMsZUFDTEMscUJBQXFCeFMsS0FBS2dDLE1BQU1KLE9BQ2hDNUIsS0FBS21CLE9BQU9tUixTQUFXLElBQ3JCRyxZQUFhelMsS0FBS21TLFlBSTVCSSxlQXhCTSxXQXlCRixPQUFPdlMsS0FBS2dDLE1BQU1OLEtBQU8sZUFLakNnUixPQUVJWCxVQUZHLFNBRU9ZLEdBR0ZBLEdBQVNDLE9BQU9DLGNBQWMsSUFBSUMsTUFBTSw4Q0MzQ3hELElBQUFqVSxFQUFBQyxFQUNBQyxLQUNBQyxFQUFBLEtBQ0FILEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsc0JDZDdDLElBQUFKLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsc0JDYjdDLElBQUFKLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsc0JDYjdDLElBQUFKLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsc0JDYjdDQSxFQUFPQyxTQUVISyxTQUFVUCxFQUFRLEtBRWxCYyxPQUFRLFdBQVksVUFFcEI0TSxTQUVJcUcsZUFBZ0IsV0FDWixJQUFJQyxFQUFRdFEsVUFBVSxvQ0FFdEIxQyxLQUFLeVAsTUFBTXdELElBQUkvRCxPQUFPLFNBQVNsUCxLQUFLa1QsU0FBUyxzQkFBc0J0RCxRQUFRLFNBQVV6RCxHQUM3RUEsRUFBS3lELFFBQ0w1UCxLQUFLbVQsVUFBVSxrQkFBbUJ6USxVQUFVLGtCQUU1QzFDLEtBQUttVCxVQUFVLGdCQUFpQkgsS0FFckNBLE1BQU0sU0FBVTdHLEdBQ2ZuTSxLQUFLbVQsVUFBVSxnQkFBaUJILE1BSXhDSSxjQUFlLFdBQ1gsSUFBSUosRUFBUXRRLFVBQVUsc0NBRXRCMUMsS0FBS3lQLE1BQU13RCxJQUFJL0QsT0FBTyxTQUFTbFAsS0FBS2tULFNBQVMsZUFBZXRELFFBQVEsU0FBVXpELEdBQ3RFQSxFQUFLeUQsUUFDTHlELE9BQU8sR0FBSWxILEVBQUs4QyxLQUVoQmpQLEtBQUttVCxVQUFVLGdCQUFpQkgsS0FFckNBLE1BQU0sU0FBVTdHLEdBQ2ZuTSxLQUFLbVQsVUFBVSxnQkFBaUJILHlCQ2hDaEQsSUFBQW5VLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsb0NDWDdDQSxFQUFBQyxZQVNBUyxRQUFBLFNBQUEyVCxFQUFBQyxHQUNBLFFBQUFDLEVBQUEsRUFBa0JBLEVBQUFGLEVBQUEzUSxPQUF1QjZRLElBQUEsQ0FDekMsSUFBQUMsRUFBQUYsRUFBQUQsRUFBQUUsSUFDQSxHQUFBQyxFQUNBLE9BQUFBLGtDQ2JBLElBQUFDLEVBQUF6VSxFQUFBQyxXQUVBd1UsRUFBQUMsS0FBQSxTQUFBQyxHQU1BLFFBSEEsS0FEQUMsRUFBQUMsVUFBQUMsVUFBQUMsZUFDQUMsUUFBQSxjQUFBSixFQUFBSSxRQUFBLGlCQUFBSixFQUFBSSxRQUFBLGNBT0FMLEdBbUJBQSxJQWRBLFdBQ0EsSUFDQU0sRUFBQSxFQUNBek8sRUFBQXVMLFNBQUFtRCxjQUFBLE9BQ0FDLEVBQUEzTyxFQUFBNE8scUJBQUEsS0FFQSxHQUNBNU8sRUFBQTZPLFVBQUEsdUJBQUFKLEVBQUEsaUNBRUFFLEVBQUEsSUFFQSxPQUFBRixFQUFBLEVBQUFBLE9BVkFLLEVBREEsSUFkQSxJQUNBVixHQThCQUgsRUFBQWMsY0FBQSxXQUNBLFFBQUE1QixPQUFBNkIsd0JDckNBLElBQUE1VixFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLHNFQ1g3Q1ksRUFBQSxHQUVJNlUsWUFDSUMsWUFBYTNWLEVBQVEsTUFHekJjLE9BQ0lzUSxNQUFPM1EsUUFHWDBNLEtBVlcsV0FXUCxPQUNJeUksU0FBUyxJQUtqQnBWLFVBRUlxVixRQUZNLFdBR0YsT0FBTzdVLEtBQUtvUSxNQUFNMEUsVUFHdEJ6RSxXQU5NLFdBT0YsTUFBZ0MsUUFBekJyUSxLQUFLb1EsTUFBTUUsWUFBeUJ0USxLQUFLb1EsTUFBTW5CLElBQUkxTixTQUFTLE1BR3ZFd1QsVUFWTSxXQVdGLE9BQU8vVSxLQUFLb1EsTUFBTTJFLFdBR3RCQyxRQWRNLFdBZUYsT0FBT2hWLEtBQUtvUSxNQUFNNEUsU0FHdEJDLE1BbEJNLFdBbUJGLE9BQU9qVixLQUFLb1EsTUFBTWhCLE9BQVNwUCxLQUFLb1EsTUFBTThFLFdBSzlDeEksU0FFSXlJLEtBRkssV0FHRG5WLEtBQUs0VSxTQUFVLEdBR25CUSxPQU5LLFdBT0RwVixLQUFLc08sTUFBTSxVQUFXdE8sS0FBS29RLFFBRy9CaUYsYUFWSyxXQVdELElBQU1DLEVBQUtDLEVBQUV2VixLQUFLd1YsS0FBS2hULEtBQUssVUFBVSxHQUVoQzhTLEdBQVF0VixLQUFLNlUsU0FFbkIsSUFBSVksRUFBQUMsRUFBU0osR0FDVEssZUFBZSxFQUNmQyxpQkFBa0IsV0FJMUJDLFlBckJLLFdBc0JEN1YsS0FBSzRVLFNBQVUsR0FHbkJrQixXQXpCSyxTQXlCTTFGLEdBQ1BwUSxLQUFLb1EsTUFBUUEsRUFDYnBRLEtBQUs2VixnQkFNYnJKLE1BMUVXLFdBMkVQeE0sS0FBS3FWLDRFQzdFYnhWLEVBQUEsR0FFSXNNLEtBQU0sV0FDRixPQUNJNEosU0FDQUMsbUJBQ0FDLHVCQUF1QixFQUN2QkMsd0JBQXdCLEVBQ3hCQyxlQUFlLElBSXZCM0osTUFaVyxXQWFQeE0sS0FBS21XLGNBQWdCblcsS0FBS29XLDhCQUV0QnBXLEtBQUttVyxlQUFlblcsS0FBS3FXLGVBR2pDM0osU0FFSTRKLFVBQVcsU0FBVTVVLEdBQ2pCLE9BQU9oQixFQUFFNlYsVUFBVXZXLEtBQUttQixPQUFPcVYsTUFBUW5XLEtBQU1xQixLQUdqRCtVLFVBQVcsU0FBVUMsR0FDakIxVyxLQUFLbU0sS0FBS3dLLE9BQU9ELEVBQU8sSUFHNUJFLFVBQVcsV0FDUGxXLEVBQUVxQixLQUFLL0IsS0FBSzZXLE1BQU1DLElBQUssU0FBQUEsR0FDTyxtQkFBZkEsRUFBSUMsUUFDWEQsRUFBSUMsUUFBTyxLQUduQi9XLEtBQUtnWCxrQkFBaUIsSUFHMUJYLFlBQWEsV0FDVDNWLEVBQUVxQixLQUFLL0IsS0FBSzZXLE1BQU1DLElBQUssU0FBQUEsR0FDUyxtQkFBakJBLEVBQUlHLFVBQ1hILEVBQUlHLFVBQVMsS0FHckJqWCxLQUFLZ1gsa0JBQWlCLElBRzFCWiw0QkE1QkssV0E2QkQsSUFBSWMsRUFBT2xYLEtBQUttVyxjQUNWZ0IsRUFBU3RLLGFBQWFDLFFBQVEsaUNBUXBDLE1BTmUsU0FBWHFLLEVBQ0FELEdBQU8sRUFDVyxVQUFYQyxJQUNQRCxHQUFPLEdBR0pBLEdBR1hGLGlCQXpDSyxTQXlDWUUsR0FDYmxYLEtBQUttVyxjQUFnQmUsRUFDckJySyxhQUFhSyxRQUFRLGdDQUFpQ2dLLGtFQzdEbEVyWCxFQUFBLEdBRUlDLE9BQVEsT0FBUSxRQUFTLFNBQVUsYUFBYyxRQUVqRHFNLEtBSlcsV0FLUCxPQUNJaUwsaUJBQWtCLE9BSTFCNVgsVUFFSWlELFFBRk0sV0FHRixPQUFPekMsS0FBS21CLE9BQU9zQixTQUFXekMsS0FBS21NLEtBQUt6SyxNQUc1Q0MsYUFOTSxXQU9GLE9BQU8zQixLQUFLbUIsT0FBT1EsY0FHdkIwVixrQkFWTSxXQVdGLE9BQU9yWCxLQUFLbUIsT0FBT0osT0FBTzRCLE9BQVMsR0FHdkMyVSxTQWRNLFdBZUYsT0FBZ0MsSUFBekJ0WCxLQUFLbU0sS0FBSyxhQUt6QkssTUE5QlcsV0ErQlB4TSxLQUFLb1gsaUJBQW1CcFgsS0FBS3VYLHVCQUdqQzdFLE9BRUl2RyxNQUNJcUwsTUFBTSxFQUNOQyxRQUZFLFdBR0V6WCxLQUFLb1gsaUJBQW1CcFgsS0FBS3VYLHlCQU16QzdLLFNBRUlnRCxPQUZLLFdBRUksSUFBQWpQLEVBQUFULEtBQ0xtUCxNQUNJek4sS0FBTSxVQUNOME4sTUFBTzFNLFVBQVUsbUJBQ2pCNE0sa0JBQW1CNU0sVUFBVSxrQkFDN0I2TSxpQkFBa0I3TSxVQUFVLGFBQzVCOE0sa0JBQWtCLEdBQ25CLFdBQ0MvTyxFQUFLNk4sTUFBTSxVQUFXN04sRUFBS2lXLFVBSW5DbEcsT0FkSyxXQWVBeFEsS0FBS3NYLFNBQVl0WCxLQUFLK1csU0FBVy9XLEtBQUtpWCxZQUczQ0YsT0FsQkssU0FrQkUzQyxHQUNIc0QsRUFBSVosSUFBSTlXLEtBQUttTSxLQUFNLFdBQVcsR0FHOUJuTSxLQUFLc08sTUFBTSxXQUFZdE8sS0FBTW9VLElBR2pDNkMsU0F6QkssV0EwQkRTLEVBQUlaLElBQUk5VyxLQUFLbU0sS0FBTSxXQUFXLElBR2xDb0wsb0JBN0JLLFdBOEJELE9BQU83VyxFQUFFbUMsSUFBSTdDLEtBQUsyWCxVQUFXLFNBQUNDLEdBQzFCLElBQTRDLElBQXhDQSxFQUFVelcsT0FBTzBXLG1CQUVyQixZQUFzRCxJQUF2Q0QsRUFBVUUseUJBQ25CRixFQUFVRSwyQkFDVkMsS0FBS0MsVUFBVUosRUFBVXpMLFFBQ2hDOEwsT0FBTyxTQUFBQyxHQUFBLE9BQVcsT0FBTkEsR0FBb0IsS0FBTkEsUUFBa0JDLElBQU5ELElBQWlCRSxLQUFLLFFBR25FQyxNQXZDSyxXQXlDRCxJQUFNclcsRUFBUWhDLEtBQUsyWCxVQUFVLEdBR0YsbUJBQWhCM1YsRUFBTXFXLE9BRWpCclcsRUFBTXFXLFNBR1ZDLGFBQWMsU0FBVXRXLEdBQ3BCLE9BQU8sc0JBQ21CQSxFQUFNTixLQUR6QixhQUVIOFEscUJBQXFCeFEsRUFBTUosU0FJbkMyVyxjQXhESyxTQXdEUzdXLEdBQ1YsT0FBT0EsRUFBSzhXLFFBQVEsSUFBSyxLQUFPLG1FQ3RHNUMzWSxFQUFBLEdBRUlzTSxLQUZXLFdBR1AsT0FDSWdFLGtCQUNBc0ksaUJBQWtCLEtBQ2xCQyxtQkFBbUIsSUFJM0JsWixVQUNJbVosY0FBZSxXQUNYLE9BQU8zWSxLQUFLNFksMkJBQXVFLElBQXhDNVksS0FBSzRZLHFCQUFxQmxLLFdBR3pFQSxVQUFXLFdBQ1AsT0FBTzFPLEtBQUs0WSxxQkFBcUJsSyxXQUdyQ1IsT0FBUSxXQUNKLE9BQU9sTyxLQUFLNFkscUJBQXFCMUssUUFBVSxLQUcvQzJLLHdCQWJNLFdBY0YsT0FBTzdZLEtBQUs0WSxxQkFBcUJFLGtCQUFtQixJQUk1RHRNLE1BNUJXLFdBNkJQeE0sS0FBS3lZLGlCQUFtQk0sUUFBUTlGLElBQUksc0NBQXdDLFFBR2hGdkcsU0FFSXNNLFNBQVUsV0FDTmhaLEtBQUswWSxtQkFBb0IsR0FHN0JPLG1CQU5LLFdBT0RqWixLQUFLMFksbUJBQW9CLHlCQzdCcEMsU0FBQTFWLEdBQ0QsYUFFQSxJQUFBa1csR0FDQUMsU0FDQSw0Q0FDQSx3RkFDQSwwQkFDQSx5QkFFQWpRLFFBQ0Esd0JBQ0EsbURBQ0EsMEJBQ0EsbUJBZUEsSUFBQWtRLEtBT0EsU0FBQUMsRUFBQTlNLEVBQUErTSxHQUNBLElBQUFwUixFQUFBcUUsRUFBQXJFLE1BUEEsU0FBQW9SLEdBQ0EsSUFBQUMsRUFBQUgsRUFBQUUsR0FDQSxPQUFBQyxJQUNBSCxFQUFBRSxHQUFBLElBQUFFLE9BQUEsT0FBQUYsRUFBQSx5Q0FJQUcsQ0FBQUgsSUFDQSxPQUFBcFIsRUFBQSxnQkFBQXNELEtBQUF0RCxFQUFBLFVBR0EsU0FBQXdSLEVBQUEvUSxFQUFBZ1IsR0FDQSxXQUFBSCxRQUFBRyxFQUFBLGVBQUFoUixFQUFBLFdBR0EsU0FBQWlSLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQUMsS0FBQUYsRUFHQSxJQUZBLElBQUFHLEVBQUFGLEVBQUFDLEtBQUFELEVBQUFDLE9BQ0E5VixFQUFBNFYsRUFBQUUsR0FDQXZHLEVBQUF2UCxFQUFBdEIsT0FBQSxFQUFxQzZRLEdBQUEsRUFBUUEsSUFDN0N3RyxFQUFBdlksUUFBQXdDLEVBQUF1UCxJQVdBeFEsRUFBQWtFLFdBQUEscUJBQUEvRixFQUFBOFksR0FDQSxJQUFBelMsRUFBQXhFLEVBQUFrWCxRQUFBL1ksR0FDQWQsS0FBQSxNQUNBbUgsVUFBQSxFQUNBNkQseUJBQUE0TyxFQUFBNU8seUJBQ0FELDBCQUFBNk8sRUFBQTdPLDRCQUdBK08sS0FDQUMsRUFBQUgsS0FBQUUsS0FBQUUsRUFBQUosS0FBQUssWUFHQSxHQUZBVixFQUFBVixFQUFBaUIsR0FDQUMsR0FBQVIsRUFBQVEsRUFBQUQsR0FDQUUsRUFBQSxRQUFBN0csRUFBQTZHLEVBQUExWCxPQUFBLEVBQTJENlEsR0FBQSxFQUFRQSxJQUNuRTJHLEVBQUFoQixPQUFBMVgsU0FBQSxPQUFBNFksRUFBQTdHLEdBQUErRyxRQUFBRixFQUFBN0csR0FBQTBELE9BRUEsU0FBQXNELEVBQUE3UyxFQUFBQyxHQUNBLElBQUFlLEVBQUFPLEVBQUExQixFQUFBcUQsTUFBQWxELEVBQUFDLEVBQUE2UyxXQUFBVixFQUFBLFVBQUFsUixLQUFBSyxHQUNBLEdBQUE2USxJQUFBLFdBQUFsUixLQUFBbEIsRUFBQWtDLGFBQ0FsQixFQUFBZixFQUFBNlMsVUFBQTlSLFNBQUFmLEVBQUE2UyxVQUFBOVIsUUFBQXFMLGdCQUNBbUcsRUFBQXpRLGVBQUFmLEdBQ0FmLEVBQUFXLE1BQUFJLEVBQUEsU0FDTyxHQUFBZixFQUFBVyxPQUFBd1IsR0FBQSxLQUFBbFIsS0FBQWxCLEVBQUFrQyxXQUFBLENBQ1AsSUFBQXRCLEVBQUEsZ0JBQUFpRCxLQUFBNUQsRUFBQVcsT0FDQVgsRUFBQVcsTUFBQSxLQUNBLElBQUFtUyxFQUFBLEtBQUEvUyxFQUFBa0MsV0EvQkEsU0FBQThRLEVBQUFDLEdBQ0EsUUFBQXBILEVBQUEsRUFBbUJBLEVBQUFtSCxFQUFBaFksT0FBb0I2USxJQUFBLENBQ3ZDLElBQUFxSCxFQUFBRixFQUFBbkgsR0FDQSxJQUFBcUgsRUFBQSxJQUFBQSxFQUFBLEdBQUFoUyxLQUFBd1EsRUFBQXVCLEVBQUFDLEVBQUEsWUFBQUEsRUFBQSxJQTRCQUMsQ0FBQVgsRUFBQTVSLEVBQUEsSUFBQUEsRUFBQSxJQUNBMk8sRUFBQWxVLEVBQUFrWCxRQUFBL1ksRUFBQXVaLEdBQ0FLLEVBQUFyQixFQUFBblIsRUFBQSxPQUFBeVMsRUFBQXRCLEVBQUFuUixFQUFBLE9BQ0FYLEVBQUFpRCxNQUFBLFNBQUFsRCxFQUFBQyxHQUNBLE9BQUFELEVBQUFPLE1BQUE2UyxHQUFBLElBQ0FuVCxFQUFBaUQsTUFBQTJQLEVBQ0E1UyxFQUFBcVQsV0FBQXJULEVBQUFzVCxVQUFBLEtBQ0EsTUExRUEsU0FBQXZULEVBQUF3VCxFQUFBalMsR0FDQSxJQUFBa1MsRUFBQXpULEVBQUFrQyxVQUFBd1IsRUFBQUQsRUFBQUUsT0FBQUgsR0FPQSxPQU5BRSxHQUFBLEVBQ0ExVCxFQUFBNFQsT0FBQUgsRUFBQXpZLE9BQUEwWSxHQUNLRCxFQUFBbFQsTUFBQSxXQUNMUCxFQUFBNFQsT0FBQUgsRUFBQXpZLFFBQ0FnRixFQUFBTyxNQUFBaVQsR0FBQSxJQUFBeFQsRUFBQU8sTUFBQWtULElBRUFsUyxFQW9FQXNTLENBQUE3VCxFQUFBcVQsRUFBQXBULEVBQUFzVCxVQUFBclEsTUFBQWxELEVBQUFDLEVBQUFxVCxjQUVBclQsRUFBQXNULFVBQUFoRSxFQUNBdFAsRUFBQXFULFdBQUFqWSxFQUFBMkgsV0FBQXVNLEVBQUExUCxFQUFBNkMsT0FBQXpDLEVBQUE2UyxVQUFBLFVBQ083UyxFQUFBVyxRQUNQWCxFQUFBVyxPQUFBWixFQUFBa0MsVUFDQWxDLEVBQUFtQixRQUFBbEIsRUFBQVcsT0FBQSxNQUVBLE9BQUFXLEVBR0EsT0FDQXlCLFdBQUEsV0FFQSxPQUFnQkUsTUFBQTJQLEVBQUFqUyxNQUFBLEtBQUEyUyxVQUFBLEtBQUFELFdBQUEsS0FBQVIsVUFEaEJ6WCxFQUFBMkgsV0FBQW5ELEtBSUFpVSxVQUFBLFNBQUE3VCxHQUNBLElBQUE4VCxFQUlBLE9BSEE5VCxFQUFBcVQsYUFDQVMsRUFBQTFZLEVBQUF5WSxVQUFBN1QsRUFBQXNULFVBQUF0VCxFQUFBcVQsY0FFZ0JwUSxNQUFBakQsRUFBQWlELE1BQUF0QyxNQUFBWCxFQUFBVyxNQUNoQjJTLFVBQUF0VCxFQUFBc1QsVUFBQUQsV0FBQVMsRUFDQWpCLFVBQUF6WCxFQUFBeVksVUFBQWpVLEVBQUFJLEVBQUE2UyxhQUdBNVAsTUFBQSxTQUFBbEQsRUFBQUMsR0FDQSxPQUFBQSxFQUFBaUQsTUFBQWxELEVBQUFDLElBR0F5QyxPQUFBLFNBQUF6QyxFQUFBcUQsRUFBQTBRLEdBQ0EsT0FBQS9ULEVBQUFzVCxXQUFBLFVBQUFyUyxLQUFBb0MsR0FDQXpELEVBQUE2QyxPQUFBekMsRUFBQTZTLFVBQUF4UCxHQUNBckQsRUFBQXNULFVBQUE3USxPQUNBekMsRUFBQXNULFVBQUE3USxPQUFBekMsRUFBQXFULFdBQUFoUSxFQUFBMFEsR0FFQTNZLEVBQUFtSSxNQUdBeVEsVUFBQSxTQUFBaFUsR0FDQSxPQUFnQkEsUUFBQXFULFlBQUFyVCxFQUFBNlMsVUFBQXZELEtBQUF0UCxFQUFBc1QsV0FBQTFULE1BR2IsMEJBRUh4RSxFQUFBZ0osV0FBQSwwQkFqSkFFLENBQUFsTixFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxLQUFBQSxFQUFBLHdCQ0tDLFNBQUFnRSxHQUNELGFBRUFBLEVBQUFrRSxXQUFBLHNCQUFBL0YsRUFBQThZLEdBQ0EsSUE2Q0F2WSxFQUFBbWEsRUE3Q0F2VSxFQUFBbkcsRUFBQW1HLFdBQ0F3VSxFQUFBN0IsRUFBQTZCLGdCQUNBQyxFQUFBOUIsRUFBQStCLE9BQ0FDLEVBQUFoQyxFQUFBaUMsTUFBQUgsRUFDQUksRUFBQWxDLEVBQUFtQyxXQUNBQyxFQUFBcEMsRUFBQXFDLGdCQUFBLG1CQUlBQyxFQUFBLFdBQ0EsU0FBQUMsRUFBQTlhLEdBQXVCLE9BQVFBLE9BQUF3SCxNQUFBLFdBQy9CLElBQUF1VCxFQUFBRCxFQUFBLGFBQUFFLEVBQUFGLEVBQUEsYUFBQUcsRUFBQUgsRUFBQSxhQUFBSSxFQUFBSixFQUFBLGFBQ0FLLEVBQUFMLEVBQUEsWUFBQU0sR0FBMkNwYixLQUFBLE9BQUF3SCxNQUFBLFFBRTNDLE9BQ0E2VCxHQUFBUCxFQUFBLE1BQUFRLE1BQUFQLEVBQUFRLEtBQUFSLEVBQUFTLEtBQUFSLEVBQUFTLEdBQUFULEVBQUFVLElBQUFWLEVBQUFXLFFBQUFYLEVBQ0FZLE9BQUFWLEVBQUFXLE1BQUFYLEVBQUFZLFNBQUFaLEVBQUFhLElBQUFqQixFQUFBLE9BQUE5TSxPQUFBaU4sRUFBQWUsS0FBQWYsRUFBQWdCLE1BQUFoQixFQUNBaUIsU0FBQXBCLEVBQUEsWUFBQXFCLElBQUFyQixFQUFBLE9BQUFzQixNQUFBdEIsRUFBQSxPQUFBdUIsSUFBQXZCLEVBQUEsT0FDQXdCLFNBQUF4QixFQUFBLFlBQUF5QixNQUFBekIsRUFBQSxTQUNBMEIsSUFBQTFCLEVBQUEsT0FBQTJCLE9BQUEzQixFQUFBLFVBQUE0QixLQUFBNUIsRUFBQSxRQUFBcGQsUUFBQW9kLEVBQUEsV0FDQTZCLEdBQUF4QixFQUFBeUIsT0FBQXpCLEVBQUEwQixXQUFBMUIsRUFDQTJCLEtBQUExQixFQUFBMkIsTUFBQTNCLEVBQUE0QixLQUFBNUIsRUFBQTNFLFVBQUEyRSxFQUFBNkIsSUFBQTdCLEVBQUE4QixTQUFBOUIsRUFDQTljLEtBQUF3YyxFQUFBLFFBQUFxQyxNQUFBckMsRUFBQSxTQUFBc0MsTUFBQXRDLEVBQUEsUUFDQXVDLE1BQUFwQyxFQUFBcUMsT0FBQXhDLEVBQUEsVUFBQXlDLE9BQUF6QyxFQUFBLFVBQUEwQyxRQUFBdkMsRUFDQXdDLE1BQUF4QyxHQWZBLEdBbUJBeUMsRUFBQSxvQkFDQUMsRUFBQSx3RkFpQkEsU0FBQUMsRUFBQUMsRUFBQXJXLEVBQUFzVyxHQUVBLE9BREE5ZCxFQUFBNmQsRUFBYzFELEVBQUEyRCxFQUNkdFcsRUFFQSxTQUFBdVcsRUFBQTlYLEVBQUFDLEdBQ0EsSUFzRUFZLEVBdEVBVCxFQUFBSixFQUFBSyxPQUNBLFFBQUFELEdBQUEsS0FBQUEsRUFFQSxPQURBSCxFQUFBRSxVQW9FQVUsRUFwRUFULEVBcUVBLFNBQUFKLEVBQUFDLEdBQ0EsSUFBQUksRUFBQTBYLEdBQUEsRUFDQSxHQUFBM0QsR0FBQSxLQUFBcFUsRUFBQWdZLFFBQUFoWSxFQUFBTyxNQUFBbVgsR0FFQSxPQURBelgsRUFBQUUsU0FBQTJYLEVBQ0FILEVBQUEseUJBRUEsWUFBQXRYLEVBQUFMLEVBQUFLLFVBQ0FBLEdBQUFRLEdBQUFrWCxJQUNBQSxNQUFBLE1BQUExWCxFQUdBLE9BREEwWCxJQUFBOVgsRUFBQUUsU0FBQTJYLEdBQ0FILEVBQUEscUJBL0VBMVgsRUFBQUUsU0FBQUgsRUFBQUMsR0FDSyxRQUFBRyxHQUFBSixFQUFBTyxNQUFBLDBCQUNMLE9BQUFvWCxFQUFBLG1CQUNLLFFBQUF2WCxHQUFBSixFQUFBTyxNQUFBLE1BQ0wsT0FBQW9YLEVBQUEsaUJBQ0ssd0JBQXdCelcsS0FBQWQsR0FDN0IsT0FBQXVYLEVBQUF2WCxHQUNLLFFBQUFBLEdBQUFKLEVBQUFNLElBQUEsS0FDTCxPQUFBcVgsRUFBQSxpQkFDSyxRQUFBdlgsR0FBQUosRUFBQU0sSUFBQSxNQUVMLE9BREFOLEVBQUFTLFNBQUEsWUFDQWtYLEVBQUEsbUJBQ0ssUUFBQXZYLEdBQUFKLEVBQUFNLElBQUEsTUFFTCxPQURBTixFQUFBUyxTQUFBLFVBQ0FrWCxFQUFBLG1CQUNLLFFBQUF2WCxHQUFBSixFQUFBTSxJQUFBLE1BRUwsT0FEQU4sRUFBQVMsU0FBQSxTQUNBa1gsRUFBQSxtQkFDSyxRQUFBelcsS0FBQWQsR0FFTCxPQURBSixFQUFBTyxNQUFBLG9DQUNBb1gsRUFBQSxtQkFDSyxRQUFBdlgsRUFDTCxPQUFBSixFQUFBTSxJQUFBLE1BQ0FMLEVBQUFFLFNBQUE4WCxFQUNBQSxFQUFBalksRUFBQUMsSUFDT0QsRUFBQU0sSUFBQSxNQUNQTixFQUFBa1ksWUFDQVAsRUFBQSxzQkFDT1EsR0FBQW5ZLEVBQUFDLEVBQUEsSUFuRFAsU0FBQUQsR0FFQSxJQURBLElBQUFLLEVBQUEwWCxHQUFBLEVBQUFLLEdBQUEsRUFDQSxPQUFBL1gsRUFBQUwsRUFBQUssU0FBQSxDQUNBLElBQUEwWCxFQUFBLENBQ0EsUUFBQTFYLElBQUErWCxFQUFBLE9BQ0EsS0FBQS9YLEVBQUErWCxHQUFBLEVBQ0FBLEdBQUEsS0FBQS9YLElBQUErWCxHQUFBLEdBRUFMLE1BQUEsTUFBQTFYLEdBNENBZ1ksQ0FBQXJZLEdBQ0FBLEVBQUFPLE1BQUEsbUNBQ0FvWCxFQUFBLHVCQUVBM1gsRUFBQU0sSUFBQSxLQUNBcVgsRUFBQSxzQkFBQTNYLEVBQUFrQyxZQUVLLFFBQUE5QixFQUVMLE9BREFILEVBQUFFLFNBQUFtWSxFQUNBQSxFQUFBdFksRUFBQUMsR0FDSyxRQUFBRyxFQUVMLE9BREFKLEVBQUFrWSxZQUNBUCxFQUFBLGlCQUNLLEdBQUFGLEVBQUF2VyxLQUFBZCxHQVNMLE1BUkEsS0FBQUEsR0FBQUgsRUFBQXNZLFNBQUEsS0FBQXRZLEVBQUFzWSxRQUFBeGUsT0FDQWlHLEVBQUFNLElBQUEsS0FDQSxLQUFBRixHQUFBLEtBQUFBLEdBQUFKLEVBQUFNLElBQUEsS0FDUyxXQUFBWSxLQUFBZCxLQUNUSixFQUFBTSxJQUFBRixHQUNBLEtBQUFBLEdBQUFKLEVBQUFNLElBQUFGLEtBR0F1WCxFQUFBLHNCQUFBM1gsRUFBQWtDLFdBQ0ssR0FBQXdTLEVBQUF4VCxLQUFBZCxHQUFBLENBQ0xKLEVBQUFTLFNBQUFpVSxHQUNBLElBQUE4RCxFQUFBeFksRUFBQWtDLFVBQ0EsUUFBQWpDLEVBQUF3WSxTQUFBLENBQ0EsR0FBQTdELEVBQUE4RCxxQkFBQUYsR0FBQSxDQUNBLElBQUEzRCxFQUFBRCxFQUFBNEQsR0FDQSxPQUFBYixFQUFBOUMsRUFBQTlhLEtBQUE4YSxFQUFBdFQsTUFBQWlYLEdBRUEsWUFBQUEsR0FBQXhZLEVBQUFPLE1BQUEsaUNBQ0EsT0FBQW9YLEVBQUEsa0JBQUFhLEdBRUEsT0FBQWIsRUFBQSxzQkFBQWEsSUFvQkEsU0FBQVAsRUFBQWpZLEVBQUFDLEdBRUEsSUFEQSxJQUFBRyxFQUFBdVksR0FBQSxFQUNBdlksRUFBQUosRUFBQUssUUFBQSxDQUNBLFFBQUFELEdBQUF1WSxFQUFBLENBQ0ExWSxFQUFBRSxTQUFBMlgsRUFDQSxNQUVBYSxFQUFBLEtBQUF2WSxFQUVBLE9BQUF1WCxFQUFBLHFCQUdBLFNBQUFXLEVBQUF0WSxFQUFBQyxHQUVBLElBREEsSUFBQUksRUFBQTBYLEdBQUEsRUFDQSxPQUFBMVgsRUFBQUwsRUFBQUssU0FBQSxDQUNBLElBQUEwWCxJQUFBLEtBQUExWCxHQUFBLEtBQUFBLEdBQUFMLEVBQUFNLElBQUEsTUFBa0UsQ0FDbEVMLEVBQUFFLFNBQUEyWCxFQUNBLE1BRUFDLE1BQUEsTUFBQTFYLEVBRUEsT0FBQXNYLEVBQUEsbUJBQUEzWCxFQUFBa0MsV0FHQSxJQUFBMFcsRUFBQSxTQVFBLFNBQUFDLEVBQUE3WSxFQUFBQyxHQUNBQSxFQUFBNlksYUFBQTdZLEVBQUE2WSxXQUFBLE1BQ0EsSUFBQUMsRUFBQS9ZLEVBQUFnWixPQUFBMU0sUUFBQSxLQUFBdE0sRUFBQWlaLE9BQ0EsS0FBQUYsRUFBQSxJQUVBLEdBQUF2RSxFQUFBLENBQ0EsSUFBQTBFLEVBQUEsNkNBQW9EclYsS0FBQTdELEVBQUFnWixPQUFBRyxNQUFBblosRUFBQWlaLE1BQUFGLElBQ3BERyxJQUFBSCxFQUFBRyxFQUFBbkssT0FJQSxJQURBLElBQUFwTyxFQUFBLEVBQUF5WSxHQUFBLEVBQ0FDLEVBQUFOLEVBQUEsRUFBNkJNLEdBQUEsSUFBVUEsRUFBQSxDQUN2QyxJQUFBalosRUFBQUosRUFBQWdaLE9BQUFNLE9BQUFELEdBQ0FFLEVBQUFYLEVBQUF0TSxRQUFBbE0sR0FDQSxHQUFBbVosR0FBQSxHQUFBQSxFQUFBLEdBQ0EsSUFBQTVZLEVBQUEsR0FBcUIwWSxFQUFPLE1BQzVCLFFBQUExWSxFQUFBLENBQTJCLEtBQUFQLElBQUFnWixHQUFBLEdBQW9DLFlBQ3hELEdBQUFHLEdBQUEsR0FBQUEsRUFBQSxJQUNQNVksT0FDTyxHQUFBK1QsRUFBQXhULEtBQUFkLEdBQ1BnWixHQUFBLE1BQ08sYUFBQWxZLEtBQUFkLEdBQ1AsT0FDTyxHQUFBZ1osSUFBQXpZLEVBQUEsR0FDUDBZLEVBQ0EsUUFHQUQsSUFBQXpZLElBQUFWLEVBQUE2WSxXQUFBTyxJQUtBLElBQUFHLEdBQXFCckUsTUFBQSxFQUFBc0UsUUFBQSxFQUFBQyxVQUFBLEVBQUFWLFFBQUEsRUFBQXBILFFBQUEsRUFBQXZaLE1BQUEsRUFBQXNoQixrQkFBQSxHQUVyQixTQUFBQyxFQUFBalgsRUFBQXJCLEVBQUF2SCxFQUFBOGYsRUFBQWxZLEVBQUFtWSxHQUNBemhCLEtBQUFzSyxXQUNBdEssS0FBQWlKLFNBQ0FqSixLQUFBMEIsT0FDQTFCLEtBQUFzSixPQUNBdEosS0FBQXloQixPQUNBLE1BQUFELElBQUF4aEIsS0FBQXdoQixTQUdBLFNBQUFFLEVBQUE5WixFQUFBK1osR0FDQSxRQUFBek4sRUFBQXRNLEVBQUFnYSxVQUFpQzFOLEVBQUdBLElBQUFsTSxLQUNwQyxHQUFBa00sRUFBQTdULE1BQUFzaEIsRUFBQSxTQUNBLFFBQUFFLEVBQUFqYSxFQUFBeUIsUUFBZ0N3WSxFQUFJQSxJQUFBdlksS0FDcEMsSUFBQTRLLEVBQUEyTixFQUFBQyxLQUEyQjVOLEVBQUdBLElBQUFsTSxLQUM5QixHQUFBa00sRUFBQTdULE1BQUFzaEIsRUFBQSxTQTJCQSxJQUFBRSxHQUFZamEsTUFBQSxLQUFBcUIsT0FBQSxLQUFBOFksT0FBQSxLQUFBQyxHQUFBLE1BQ1osU0FBQUMsSUFDQSxRQUFBek8sRUFBQTBPLFVBQUF2ZixPQUFBLEVBQXNDNlEsR0FBQSxFQUFRQSxJQUFBcU8sRUFBQUcsR0FBQTNnQixLQUFBNmdCLFVBQUExTyxJQUU5QyxTQUFBZ00sSUFFQSxPQURBeUMsRUFBQUUsTUFBQSxLQUFBRCxZQUNBLEVBRUEsU0FBQUUsRUFBQVQsR0FDQSxTQUFBVSxFQUFBQyxHQUNBLFFBQUFwTyxFQUFBb08sRUFBd0JwTyxFQUFHQSxJQUFBbE0sS0FDM0IsR0FBQWtNLEVBQUE3VCxNQUFBc2hCLEVBQUEsU0FDQSxTQUVBLElBQUEvWixFQUFBaWEsRUFBQWphLE1BRUEsR0FEQWlhLEVBQUFFLE9BQUEsTUFDQW5hLEVBQUF5QixRQUFBLENBQ0EsR0FBQWdaLEVBQUF6YSxFQUFBZ2EsV0FBQSxPQUNBaGEsRUFBQWdhLFdBQXlCdmhCLEtBQUFzaEIsRUFBQTNaLEtBQUFKLEVBQUFnYSxlQUNwQixDQUNMLEdBQUFTLEVBQUF6YSxFQUFBMmEsWUFBQSxPQUNBdEksRUFBQXNJLGFBQ0EzYSxFQUFBMmEsWUFBNEJsaUIsS0FBQXNoQixFQUFBM1osS0FBQUosRUFBQTJhLGNBSTVCLFNBQUFDLEVBQUFuaUIsR0FDQSxnQkFBQUEsR0FBQSxXQUFBQSxHQUFBLGFBQUFBLEdBQUEsWUFBQUEsR0FBQSxZQUFBQSxFQUtBLElBQUFvaUIsR0FBcUJwaUIsS0FBQSxPQUFBMkgsTUFBcUIzSCxLQUFBLGNBQzFDLFNBQUFxaUIsSUFDQWIsRUFBQWphLE1BQUF5QixTQUF3QkMsS0FBQXVZLEVBQUFqYSxNQUFBeUIsUUFBQXlZLEtBQUFELEVBQUFqYSxNQUFBZ2EsV0FDeEJDLEVBQUFqYSxNQUFBZ2EsVUFBQWEsRUFFQSxTQUFBRSxJQUNBZCxFQUFBamEsTUFBQWdhLFVBQUFDLEVBQUFqYSxNQUFBeUIsUUFBQXlZLEtBQ0FELEVBQUFqYSxNQUFBeUIsUUFBQXdZLEVBQUFqYSxNQUFBeUIsUUFBQUMsS0FFQSxTQUFBc1osRUFBQWxoQixFQUFBK2YsR0FDQSxJQUFBaE8sRUFBQSxXQUNBLElBQUE3TCxFQUFBaWEsRUFBQWphLE1BQUF5QyxFQUFBekMsRUFBQTBDLFNBQ0EsV0FBQTFDLEVBQUFzWSxRQUFBeGUsS0FBQTJJLEVBQUF6QyxFQUFBc1ksUUFBQTVWLGNBQ0EsUUFBQXVZLEVBQUFqYixFQUFBc1ksUUFBMEMyQyxHQUFBLEtBQUFBLEVBQUFuaEIsTUFBQW1oQixFQUFBckIsTUFBMkNxQixJQUFBdlosS0FDckZlLEVBQUF3WSxFQUFBdlksU0FDQTFDLEVBQUFzWSxRQUFBLElBQUFxQixFQUFBbFgsRUFBQXdYLEVBQUFsYSxPQUFBc0IsU0FBQXZILEVBQUEsS0FBQWtHLEVBQUFzWSxRQUFBdUIsSUFHQSxPQURBaE8sRUFBQXFQLEtBQUEsRUFDQXJQLEVBRUEsU0FBQXNQLElBQ0EsSUFBQW5iLEVBQUFpYSxFQUFBamEsTUFDQUEsRUFBQXNZLFFBQUE1VyxPQUNBLEtBQUExQixFQUFBc1ksUUFBQXhlLE9BQ0FrRyxFQUFBMEMsU0FBQTFDLEVBQUFzWSxRQUFBNVYsVUFDQTFDLEVBQUFzWSxRQUFBdFksRUFBQXNZLFFBQUE1VyxNQUtBLFNBQUEwWixFQUFBQyxHQU1BLE9BTEEsU0FBQUMsRUFBQXhoQixHQUNBLE9BQUFBLEdBQUF1aEIsRUFBQXpELElBQ0EsS0FBQXlELEVBQTJCaEIsSUFDM0J6QyxFQUFBMEQsSUFLQSxTQUFBQyxFQUFBemhCLEVBQUFSLEdBQ0EsYUFBQVEsRUFBQThkLEVBQUFvRCxFQUFBLFNBQUExaEIsRUFBQXlCLFFBQUF5Z0IsR0FBQUosRUFBQSxLQUFxRkQsR0FDckYsYUFBQXJoQixFQUFBOGQsRUFBQW9ELEVBQUEsUUFBQVMsRUFBQUYsRUFBQUosR0FDQSxhQUFBcmhCLEVBQUE4ZCxFQUFBb0QsRUFBQSxRQUFBTyxFQUFBSixHQUNBLGFBQUFyaEIsRUFBQW1nQixFQUFBbGEsT0FBQU8sTUFBQSxZQUFBc1gsTUFBQW9ELEVBQUEsUUFBQVUsRUFBQU4sRUFBQSxLQUErSEQsR0FDL0gsWUFBQXJoQixFQUFBOGQsRUFBQXdELEVBQUEsTUFDQSxLQUFBdGhCLEVBQWtCOGQsRUFBQW9ELEVBQUEsS0FBeUJXLEdBQUFSLEdBQzNDLEtBQUFyaEIsRUFBa0I4ZCxJQUNsQixNQUFBOWQsR0FDQSxRQUFBbWdCLEVBQUFqYSxNQUFBc1ksUUFBQXVCLE1BQUFJLEVBQUFqYSxNQUFBb2EsR0FBQUgsRUFBQWphLE1BQUFvYSxHQUFBcmYsT0FBQSxJQUFBb2dCLEdBQ0FsQixFQUFBamEsTUFBQW9hLEdBQUF3QixLQUFBM0IsR0FDQXJDLEVBQUFvRCxFQUFBLFFBQUFTLEVBQUFGLEVBQUFKLEVBQUFVLEtBRUEsWUFBQS9oQixFQUFBOGQsRUFBQWtFLElBQ0EsT0FBQWhpQixFQUFBOGQsRUFBQW9ELEVBQUEsUUFBQWUsR0FBQVIsRUFBQUosR0FDQSxTQUFBcmhCLEdBQUF5YSxHQUFBLGFBQUFqYixHQUE0RDJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQW9ELEVBQUEsUUFBQWdCLEdBQUFiLElBQ25GLFlBQUFyaEIsRUFDQXlhLEdBQUEsV0FBQWpiLEdBQ0EyZ0IsRUFBQUUsT0FBQSxVQUNBdkMsRUFBQTJELElBQ09oSCxJQUFBLFVBQUFqYixHQUFBLFFBQUFBLEdBQUEsUUFBQUEsSUFBQTJnQixFQUFBbGEsT0FBQU8sTUFBQSxjQUNQMlosRUFBQUUsT0FBQSxVQUNBLFFBQUE3Z0IsRUFBQXNlLEVBQUFxRSxJQUNBLFFBQUEzaUIsRUFBQXNlLEVBQUFzRSxHQUFBZCxFQUFBLFlBQUFjLEdBQUFkLEVBQUEsTUFDQXhELEVBQUFvRCxFQUFBLFFBQUFtQixHQUFBZixFQUFBLEtBQTRESixFQUFBLEtBQWNXLEdBQUFSLE1BQ25FNUcsR0FBQSxhQUFBamIsR0FDUDJnQixFQUFBRSxPQUFBLFVBQ0F2QyxFQUFBb0QsRUFBQSxRQUFBb0IsRUFBQVQsR0FBQVIsSUFDTzVHLEdBQUEsWUFBQWpiLEdBQ1AyZ0IsRUFBQUUsT0FBQSxVQUNBdkMsRUFBQTJELElBRUEzRCxFQUFBb0QsRUFBQSxRQUFBcUIsR0FHQSxVQUFBdmlCLEVBQUE4ZCxFQUFBb0QsRUFBQSxRQUFBUyxFQUFBTCxFQUFBLEtBQTJFSixFQUFBLElBQWMsVUFDekZXLEdBQUFSLEtBQ0EsUUFBQXJoQixFQUFBOGQsRUFBQXdFLEVBQUFoQixFQUFBLE1BQ0EsV0FBQXRoQixFQUFBOGQsRUFBQXdELEVBQUEsTUFDQSxTQUFBdGhCLEVBQUE4ZCxFQUFBb0QsRUFBQSxRQUFBRixFQUFBTSxFQUFBLEtBQUFrQixHQUFBbEIsRUFBQSxLQUNBRyxFQUFBSixFQUFBSixHQUNBLFVBQUFqaEIsRUFBQThkLEVBQUFvRCxFQUFBLFFBQUF1QixHQUFBcEIsR0FDQSxVQUFBcmhCLEVBQUE4ZCxFQUFBb0QsRUFBQSxRQUFBd0IsR0FBQXJCLEdBQ0EsU0FBQXJoQixFQUFBOGQsRUFBQTJELEdBQ0EsS0FBQWppQixFQUFBc2UsRUFBQXdFLEVBQUFiLEdBQ0FsQixFQUFBVyxFQUFBLFFBQUFvQixFQUFBaEIsRUFBQSxLQUFzREQsR0FFdEQsU0FBQWlCLEVBQUF0aUIsRUFBQVIsR0FDQSxPQUFBbWpCLEVBQUEzaUIsRUFBQVIsR0FBQSxHQUVBLFNBQUFvakIsRUFBQTVpQixFQUFBUixHQUNBLE9BQUFtakIsRUFBQTNpQixFQUFBUixHQUFBLEdBRUEsU0FBQW1pQixFQUFBM2hCLEdBQ0EsV0FBQUEsRUFBQXVnQixJQUNBekMsRUFBQW9ELEVBQUEsS0FBQW9CLEVBQUFoQixFQUFBLEtBQUFELEdBRUEsU0FBQXNCLEVBQUEzaUIsRUFBQVIsRUFBQXFqQixHQUNBLEdBQUExQyxFQUFBamEsTUFBQTZZLFlBQUFvQixFQUFBbGEsT0FBQWlaLE1BQUEsQ0FDQSxJQUFBNEQsRUFBQUQsRUFBQUUsRUFBQUMsRUFDQSxRQUFBaGpCLEVBQUEsT0FBQThkLEVBQUFrRCxFQUFBRSxFQUFBLEtBQUErQixFQUFBVCxHQUFBLEtBQUFuQixFQUFBQyxFQUFBLE1BQUF3QixFQUFBN0IsR0FDQSxlQUFBamhCLEVBQUEsT0FBQXVnQixFQUFBUyxFQUFBcUIsR0FBQWYsRUFBQSxNQUFBd0IsRUFBQTdCLEdBR0EsSUFBQWlDLEVBQUFMLEVBQUFNLEVBQUFDLEVBQ0EsT0FBQTNELEVBQUF6WCxlQUFBaEksR0FBQThkLEVBQUFvRixHQUNBLFlBQUFsakIsRUFBQThkLEVBQUFrRSxHQUFBa0IsR0FDQSxTQUFBbGpCLEdBQUF5YSxHQUFBLGFBQUFqYixHQUE0RDJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQW9ELEVBQUEsUUFBQW1DLEdBQUFoQyxJQUNuRixhQUFBcmhCLEdBQUEsU0FBQUEsRUFBQThkLEVBQUErRSxFQUFBRCxFQUFBTixHQUNBLEtBQUF0aUIsRUFBQThkLEVBQUFvRCxFQUFBLEtBQUFVLEVBQUFOLEVBQUEsS0FBQUQsRUFBQTZCLEdBQ0EsWUFBQWxqQixHQUFBLFVBQUFBLEVBQUE4ZCxFQUFBK0UsRUFBQUQsRUFBQU4sR0FDQSxLQUFBdGlCLEVBQUE4ZCxFQUFBb0QsRUFBQSxLQUFBb0MsR0FBQWpDLEVBQUE2QixHQUNBLEtBQUFsakIsRUFBa0J1akIsR0FBQUMsRUFBQSxJQUFrQyxLQUFBTixHQUNwRCxTQUFBbGpCLEVBQUF1Z0IsRUFBQWtELEVBQUFQLEdBQ0EsT0FBQWxqQixFQUFBOGQsRUF3REEsU0FBQStFLEdBQ0EsZ0JBQUE3aUIsR0FDQSxXQUFBQSxFQUFBOGQsRUFBQStFLEVBQUFhLEVBQUFDLEdBQ0EsWUFBQTNqQixHQUFBeWEsRUFBQXFELEVBQUE4RixHQUFBZixFQUFBTSxFQUFBQyxHQUNBN0MsRUFBQXNDLEVBQUFELEVBQUFOLElBNURBdUIsQ0FBQWhCLElBQ0EsVUFBQTdpQixFQUFBOGQsRUFBQXdFLEdBQ0F4RSxJQUVBLFNBQUE4RCxFQUFBNWhCLEdBQ0EsT0FBQUEsRUFBQXdHLE1BQUEsY0FBd0IrWixJQUN4QkEsRUFBQStCLEdBR0EsU0FBQWMsRUFBQXBqQixFQUFBUixHQUNBLFdBQUFRLEVBQUE4ZCxFQUFBd0UsR0FDQWEsRUFBQW5qQixFQUFBUixHQUFBLEdBRUEsU0FBQTJqQixFQUFBbmpCLEVBQUFSLEVBQUFxakIsR0FDQSxJQUFBaUIsRUFBQSxHQUFBakIsRUFBQU8sRUFBQUQsRUFDQVksRUFBQSxHQUFBbEIsRUFBQVAsRUFBQU0sRUFDQSxZQUFBNWlCLEVBQUE4ZCxFQUFBa0QsRUFBQTZCLEVBQUFFLEVBQUFDLEVBQUEvQixHQUNBLFlBQUFqaEIsRUFDQSxVQUFBbUgsS0FBQTNILElBQUFpYixHQUFBLEtBQUFqYixFQUFBc2UsRUFBQWdHLEdBQ0FySixHQUFBLEtBQUFqYixHQUFBMmdCLEVBQUFsYSxPQUFBTyxNQUFBLDJCQUNBc1gsRUFBQW9ELEVBQUEsS0FBQStCLEVBQUFiLEdBQUEsS0FBQWYsRUFBQXlDLEdBQ0EsS0FBQXRrQixFQUFBc2UsRUFBQXdFLEVBQUFoQixFQUFBLEtBQUF5QyxHQUNBakcsRUFBQWlHLEdBRUEsU0FBQS9qQixFQUEwQnVnQixFQUFBa0QsRUFBQUssR0FDMUIsS0FBQTlqQixFQUNBLEtBQUFBLEVBQUF1akIsR0FBQVgsRUFBQSxXQUFBa0IsR0FDQSxLQUFBOWpCLEVBQUE4ZCxFQUFBa0csRUFBQUYsR0FDQSxLQUFBOWpCLEVBQUE4ZCxFQUFBb0QsRUFBQSxLQUFBVSxFQUFBTixFQUFBLEtBQUFELEVBQUF5QyxHQUNBckosR0FBQSxNQUFBamIsR0FBZ0MyZ0IsRUFBQUUsT0FBQSxVQUF1QnZDLEVBQUFzRSxHQUFBMEIsSUFDdkQsVUFBQTlqQixHQUNBbWdCLEVBQUFqYSxNQUFBd1ksU0FBQXlCLEVBQUFFLE9BQUEsV0FDQUYsRUFBQWxhLE9BQUE0VCxPQUFBc0csRUFBQWxhLE9BQUFxWixJQUFBYSxFQUFBbGEsT0FBQWlaLE1BQUEsR0FDQXBCLEVBQUFpRyxTQUhBLE9BTEEsRUFXQSxTQUFBTixFQUFBempCLEVBQUFSLEdBQ0EsZUFBQVEsRUFBQXVnQixJQUNBLE1BQUEvZ0IsRUFBQTRmLE1BQUE1ZixFQUFBeUIsT0FBQSxHQUE0QzZjLEVBQUEyRixHQUM1QzNGLEVBQUF3RSxFQUFBMkIsR0FFQSxTQUFBQSxFQUFBamtCLEdBQ0EsUUFBQUEsRUFHQSxPQUZBbWdCLEVBQUFFLE9BQUEsV0FDQUYsRUFBQWphLE1BQUFFLFNBQUFtWSxFQUNBVCxFQUFBMkYsR0FHQSxTQUFBVCxFQUFBaGpCLEdBRUEsT0FEQThlLEVBQUFxQixFQUFBbGEsT0FBQWthLEVBQUFqYSxPQUNBcWEsRUFBQSxLQUFBdmdCLEVBQTBCeWhCLEVBQUFhLEdBRTFCLFNBQUFTLEVBQUEvaUIsR0FFQSxPQURBOGUsRUFBQXFCLEVBQUFsYSxPQUFBa2EsRUFBQWphLE9BQ0FxYSxFQUFBLEtBQUF2Z0IsRUFBMEJ5aEIsRUFBQW1CLEdBUzFCLFNBQUFlLEVBQUEza0IsRUFBQVEsR0FDQSxhQUFBQSxFQUFtRCxPQUF2QjJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQXNGLEdBRW5ELFNBQUFNLEVBQUExa0IsRUFBQVEsR0FDQSxhQUFBQSxFQUFtRCxPQUF2QjJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQXFGLEdBRW5ELFNBQUFaLEVBQUF2aUIsR0FDQSxXQUFBQSxFQUFBOGQsRUFBQXVELEVBQUFJLEdBQ0FsQixFQUFBNkMsRUFBQTlCLEVBQUEsS0FBNkNELEdBRTdDLFNBQUEyQyxFQUFBaGtCLEdBQ0EsZUFBQUEsRUFBb0QsT0FBdkJtZ0IsRUFBQUUsT0FBQSxXQUF1QnZDLElBRXBELFNBQUEwRixFQUFBeGpCLEVBQUFSLEdBQ0EsWUFBQVEsRUFFQSxPQURBbWdCLEVBQUFFLE9BQUEsV0FDQXZDLEVBQUEwRixHQUNLLGVBQUF4akIsR0FBQSxXQUFBbWdCLEVBQUEzWSxNQUFBLENBRUwsT0FEQTJZLEVBQUFFLE9BQUEsV0FDQSxPQUFBN2dCLEdBQUEsT0FBQUEsRUFBQXNlLEVBQUFvRyxJQUVBekosR0FBQTBGLEVBQUFqYSxNQUFBNlksWUFBQW9CLEVBQUFsYSxPQUFBaVosUUFBQUMsRUFBQWdCLEVBQUFsYSxPQUFBTyxNQUFBLGtCQUNBMlosRUFBQWphLE1BQUE2WSxXQUFBb0IsRUFBQWxhLE9BQUFxWixJQUFBSCxFQUFBLEdBQUFsZSxRQUNBNmMsRUFBQXFHLElBSEEsSUFBQWhGLE1BSUssY0FBQW5mLEdBQUEsVUFBQUEsRUFFTCxPQURBbWdCLEVBQUFFLE9BQUFoRyxFQUFBLFdBQUE4RixFQUFBM1ksTUFBQSxZQUNBc1csRUFBQXFHLEdBQ0sscUJBQUFua0IsRUFDTCxPQUFBOGQsRUFBQXFHLEdBQ0ssR0FBQTFKLEdBQUFxRyxFQUFBdGhCLEdBRUwsT0FEQTJnQixFQUFBRSxPQUFBLFVBQ0F2QyxFQUFBMEYsR0FDSyxRQUFBeGpCLEVBQ0wsT0FBQThkLEVBQUF3RSxFQUFBOEIsR0FBQTlDLEVBQUEsS0FBQTZDLEdBQ0ssYUFBQW5rQixFQUNMLE9BQUE4ZCxFQUFBOEUsRUFBQXVCLEdBQ0ssUUFBQTNrQixFQUVMLE9BREEyZ0IsRUFBQUUsT0FBQSxVQUNBdkMsRUFBQTBGLEdBQ0ssUUFBQXhqQixFQUNMLE9BQUF1Z0IsRUFBQTRELElBR0EsU0FBQUQsRUFBQWxrQixHQUNBLGtCQUFBQSxFQUFBdWdCLEVBQUE0RCxJQUNBaEUsRUFBQUUsT0FBQSxXQUNBdkMsRUFBQWtFLEtBRUEsU0FBQW1DLEVBQUFua0IsR0FDQSxXQUFBQSxFQUFBOGQsRUFBQThFLEdBQ0EsS0FBQTVpQixFQUFBdWdCLEVBQUF5QixTQUFBLEVBRUEsU0FBQWlCLEVBQUFvQixFQUFBQyxFQUFBQyxHQUNBLFNBQUFDLEVBQUF4a0IsRUFBQVIsR0FDQSxHQUFBK2tCLElBQUFoUyxRQUFBdlMsSUFBQSxPQUFBQSxFQUFBLENBQ0EsSUFBQW9oQixFQUFBakIsRUFBQWphLE1BQUFzWSxRQUVBLE1BREEsUUFBQTRDLEVBQUFyQixPQUFBcUIsRUFBQTlCLEtBQUE4QixFQUFBOUIsS0FBQSxNQUNBeEIsRUFBQSxTQUFBOWQsRUFBQVIsR0FDQSxPQUFBUSxHQUFBc2tCLEdBQUE5a0IsR0FBQThrQixFQUFBL0QsSUFDQUEsRUFBQThELElBQ1NHLEdBRVQsT0FBQXhrQixHQUFBc2tCLEdBQUE5a0IsR0FBQThrQixFQUFBeEcsSUFDQUEsRUFBQXdELEVBQUFnRCxJQUVBLGdCQUFBdGtCLEVBQUFSLEdBQ0EsT0FBQVEsR0FBQXNrQixHQUFBOWtCLEdBQUE4a0IsRUFBQXhHLElBQ0F5QyxFQUFBOEQsRUFBQUcsSUFHQSxTQUFBakIsR0FBQWMsRUFBQUMsRUFBQXZFLEdBQ0EsUUFBQWpPLEVBQUEsRUFBbUJBLEVBQUEwTyxVQUFBdmYsT0FBc0I2USxJQUN6Q3FPLEVBQUFHLEdBQUEzZ0IsS0FBQTZnQixVQUFBMU8sSUFDQSxPQUFBZ00sRUFBQW9ELEVBQUFvRCxFQUFBdkUsR0FBQWtELEVBQUFvQixFQUFBQyxHQUFBakQsR0FFQSxTQUFBUSxHQUFBN2hCLEdBQ0EsV0FBQUEsRUFBa0I4ZCxJQUNsQnlDLEVBQUFrQixFQUFBSSxJQUVBLFNBQUF1QyxHQUFBcGtCLEVBQUFSLEdBQ0EsR0FBQWliLEVBQUEsQ0FDQSxRQUFBemEsRUFBQSxPQUFBOGQsRUFBQXNFLElBQ0EsUUFBQTVpQixFQUFBLE9BQUFzZSxFQUFBc0csS0FHQSxTQUFBSyxHQUFBemtCLEdBQ0EsR0FBQXlhLEdBQUEsS0FBQXphLEVBQ0EsT0FBQW1nQixFQUFBbGEsT0FBQU8sTUFBQSxxQkFBQXNYLEVBQUF3RSxFQUFBb0MsR0FBQXRDLElBQ0F0RSxFQUFBc0UsSUFHQSxTQUFBc0MsR0FBQTFsQixFQUFBUSxHQUNBLFNBQUFBLEVBRUEsT0FEQTJnQixFQUFBRSxPQUFBLFVBQ0F2QyxJQUdBLFNBQUFzRSxHQUFBcGlCLEVBQUFSLEdBQ0EsZUFBQUEsR0FBQSxVQUFBQSxHQUNBMmdCLEVBQUFFLE9BQUEsVUFDQXZDLEVBQUEsU0FBQXRlLEVBQUE0aUIsR0FBQVEsSUFFQSxZQUFBNWlCLEdBQUEsUUFBQVIsR0FDQTJnQixFQUFBRSxPQUFBLE9BQ0F2QyxFQUFBNkcsS0FFQSxVQUFBM2tCLEdBQUEsVUFBQUEsR0FBQSxRQUFBQSxFQUFBOGQsRUFBQTZHLElBQ0EsS0FBQTNrQixFQUFBOGQsRUFBQW9ELEVBQUEsS0FBQStCLEVBQUFiLEdBQUEsU0FBQWYsRUFBQXNELElBQ0EsS0FBQTNrQixFQUFrQjhkLEVBQUFvRCxFQUFBLEtBQXlCK0IsRUFBQTJCLEdBQUEsSUFBeUIsTUFBTXZELEVBQUFzRCxJQUMxRSxLQUFBM2tCLEVBQUE4ZCxFQUFBbUYsRUFBQTRCLEdBQUEsS0FBQUMsSUFDQSxLQUFBOWtCLEVBQUE4ZCxFQUFBbUYsRUFBQWIsR0FBQSxLQUFBQSxTQUFBLEVBRUEsU0FBQTBDLEdBQUE5a0IsR0FDQSxTQUFBQSxFQUFBLE9BQUE4ZCxFQUFBc0UsSUFFQSxTQUFBd0MsR0FBQTVrQixFQUFBUixHQUNBLGtCQUFBUSxHQUFBLFdBQUFtZ0IsRUFBQTNZLE9BQ0EyWSxFQUFBRSxPQUFBLFdBQ0F2QyxFQUFBOEcsS0FDSyxLQUFBcGxCLEVBQ0xzZSxFQUFBOEcsSUFDSyxLQUFBNWtCLEVBQ0w4ZCxFQUFBc0UsSUFDSyxLQUFBcGlCLEVBQ0w4ZCxFQUFBd0UsRUFBQThCLEdBQUE5QyxFQUFBLEtBQUFzRCxTQURLLEVBSUwsU0FBQUMsR0FBQTdrQixFQUFBUixHQUNBLGtCQUFBUSxHQUFBbWdCLEVBQUFsYSxPQUFBTyxNQUFBLHFCQUFBaEgsRUFBQXNlLEVBQUErRyxJQUNBLEtBQUE3a0IsRUFBQThkLEVBQUFzRSxJQUNBN0IsRUFBQTZCLElBRUEsU0FBQXVDLEdBQUEza0IsRUFBQVIsR0FDQSxXQUFBQSxFQUFBc2UsRUFBQW9ELEVBQUEsS0FBQStCLEVBQUFiLEdBQUEsS0FBQWYsRUFBQXNELElBQ0EsS0FBQW5sQixHQUFBLEtBQUFRLEdBQUEsS0FBQVIsRUFBQXNlLEVBQUFzRSxJQUNBLEtBQUFwaUIsRUFBQThkLEVBQUF3RCxFQUFBLEtBQUFxRCxJQUNBLFdBQUFubEIsR0FBQSxjQUFBQSxHQUFzRDJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQXNFLFVBQTdFLEVBRUEsU0FBQXdCLEdBQUE1a0IsRUFBQVEsR0FDQSxRQUFBQSxFQUFBLE9BQUFzZSxFQUFBb0QsRUFBQSxLQUFBK0IsRUFBQWIsR0FBQSxLQUFBZixFQUFBc0QsSUFFQSxTQUFBSSxLQUNBLE9BQUF4RSxFQUFBNkIsR0FBQTRDLElBRUEsU0FBQUEsR0FBQWhtQixFQUFBUSxHQUNBLFFBQUFBLEVBQUEsT0FBQXNlLEVBQUFzRSxJQUVBLFNBQUFWLEdBQUExaUIsRUFBQVEsR0FDQSxjQUFBQSxHQUEwQjJnQixFQUFBRSxPQUFBLFVBQXNCdkMsRUFBQXFFLEtBQ2hENUIsRUFBQThCLEdBQUErQixHQUFBYSxHQUFBQyxJQUVBLFNBQUE3QyxHQUFBcmlCLEVBQUFSLEdBQ0EsT0FBQWliLEdBQUFxRyxFQUFBdGhCLElBQW9DMmdCLEVBQUFFLE9BQUEsVUFBdUJ2QyxFQUFBdUUsS0FDM0QsWUFBQXJpQixHQUE2QjBnQixFQUFBbGhCLEdBQWlCc2UsS0FDOUMsVUFBQTlkLEVBQUE4ZCxFQUFBdUUsSUFDQSxLQUFBcmlCLEVBQUF1akIsR0FBQWxCLEdBQUEsS0FDQSxLQUFBcmlCLEVBQWtCdWpCLEdBQUE0QixHQUFBLFVBQWxCLEVBRUEsU0FBQUEsR0FBQW5sQixFQUFBUixHQUNBLGtCQUFBUSxHQUFBbWdCLEVBQUFsYSxPQUFBTyxNQUFBLGFBSUEsWUFBQXhHLElBQUFtZ0IsRUFBQUUsT0FBQSxZQUNBLFVBQUFyZ0IsRUFBQThkLEVBQUF1RSxJQUNBLEtBQUFyaUIsRUFBa0J1Z0IsSUFDbEJ6QyxFQUFBd0QsRUFBQSxLQUFBZSxHQUFBNEMsTUFOQXZFLEVBQUFsaEIsR0FDQXNlLEVBQUFtSCxLQU9BLFNBQUFBLEdBQUFHLEVBQUE1bEIsR0FDQSxRQUFBQSxFQUFBLE9BQUFzZSxFQUFBOEUsR0FFQSxTQUFBc0MsR0FBQWxsQixHQUNBLFFBQUFBLEVBQUEsT0FBQThkLEVBQUE0RCxJQUVBLFNBQUFLLEdBQUEvaEIsRUFBQVIsR0FDQSxnQkFBQVEsR0FBQSxRQUFBUixFQUFBLE9BQUFzZSxFQUFBb0QsRUFBQSxlQUFBTyxFQUFBSixHQUVBLFNBQUFZLEdBQUFqaUIsRUFBQVIsR0FDQSxlQUFBQSxFQUFBc2UsRUFBQW1FLElBQ0EsS0FBQWppQixFQUFBOGQsRUFBQW9ELEVBQUEsS0FBQW1FLEdBQUEvRCxFQUFBLEtBQUFELFFBQUEsRUFFQSxTQUFBZ0UsR0FBQXJsQixHQUNBLGFBQUFBLEVBQUE4ZCxFQUFBNEQsR0FBQUosRUFBQSxLQUFvRGdFLElBQ3BELEtBQUF0bEIsRUFBa0I4ZCxFQUFBd0gsSUFDbEIsWUFBQXRsQixFQUFBOGQsRUFBQXlILElBQ0FoRixFQUFBK0IsRUFBQWhCLEVBQUEsS0FBcUNnRSxJQUVyQyxTQUFBQyxHQUFBSCxFQUFBNWxCLEdBQ0EsWUFBQUEsR0FBQSxNQUFBQSxHQUF5QzJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQXdFLElBQ2hFeEUsRUFBQXNGLEVBQUFrQyxJQUVBLFNBQUFBLEdBQUF0bEIsRUFBQVIsR0FDQSxXQUFBUSxFQUFrQjhkLEVBQUEwSCxJQUNsQixNQUFBaG1CLEdBQUEsTUFBQUEsR0FBeUMyZ0IsRUFBQUUsT0FBQSxVQUF1QnZDLEVBQUF3RSxJQUNoRS9CLEVBQUErQixFQUFBaEIsRUFBQSxLQUFxQ2tFLElBRXJDLFNBQUFBLEdBQUF4bEIsR0FDQSxLQUFBQSxHQUFBOGQsRUFBQXdFLEdBRUEsU0FBQU4sR0FBQWhpQixFQUFBUixHQUNBLFdBQUFBLEdBQXVCMmdCLEVBQUFFLE9BQUEsVUFBc0J2QyxFQUFBa0UsS0FDN0MsWUFBQWhpQixHQUE2QjBnQixFQUFBbGhCLEdBQWdCc2UsRUFBQWtFLEtBQzdDLEtBQUFoaUIsRUFBQThkLEVBQUFrRCxFQUFBRSxFQUFBLEtBQUErQixFQUFBVCxHQUFBLEtBQUFuQixFQUFBb0QsR0FBQWhELEVBQUFSLEdBQ0F4RyxHQUFBLEtBQUFqYixFQUFBc2UsRUFBQW9ELEVBQUEsS0FBQStCLEVBQUE4QixHQUFBLEtBQUExRCxFQUFBVyxTQUFBLEVBRUEsU0FBQVEsR0FBQXhpQixFQUFBUixHQUVBLE1BREEsS0FBQUEsR0FBQXNlLEVBQUF3RSxFQUFBRSxJQUNBLFVBQUF4aUIsRUFBQThkLEVBQUEwRSxJQUNBL0gsR0FBQXFHLEVBQUF0aEIsSUFBb0MyZ0IsRUFBQUUsT0FBQSxVQUF1QnZDLEVBQUEwRSxLQUMzRGpDLEVBQUE4QixHQUFBK0IsR0FBQWEsSUFFQSxTQUFBNUIsR0FBQXJqQixFQUFBUixHQUVBLGtCQUFBUSxFQUFBa2lCLEdBQUFsaUIsRUFBQVIsR0FDQWltQixHQUFBemxCLEVBQUFSLEdBRUEsU0FBQTBpQixHQUFBbGlCLEVBQUFSLEdBQ0EsZUFBQVEsRUFBNkMsT0FBaEIwZ0IsRUFBQWxoQixHQUFnQnNlLEVBQUEySCxJQUU3QyxTQUFBQSxHQUFBemxCLEVBQUFSLEdBQ0EsV0FBQUEsRUFBQXNlLEVBQUFvRCxFQUFBLEtBQUErQixFQUFBOEIsR0FBQSxLQUFBMUQsRUFBQW9FLElBQ0EsV0FBQWptQixHQUFBLGNBQUFBLEdBQUFpYixHQUFBLEtBQUF6YSxHQUNBLGNBQUFSLElBQUEyZ0IsRUFBQUUsT0FBQSxXQUNBdkMsRUFBQXJELEVBQUEySCxHQUFBRSxFQUFBbUQsS0FFQSxLQUFBemxCLEVBQWtCOGQsRUFBQW9ELEVBQUEsS0FBeUJ3RSxHQUFBckUsUUFBM0MsRUFFQSxTQUFBcUUsR0FBQTFsQixFQUFBUixHQUNBLGVBQUFRLEdBQ0EsWUFBQUEsSUFDQSxVQUFBUixHQUFBLE9BQUFBLEdBQUEsT0FBQUEsR0FBQWliLEdBQUFxRyxFQUFBdGhCLEtBQ0EyZ0IsRUFBQWxhLE9BQUFPLE1BQUEsNEJBQ0EyWixFQUFBRSxPQUFBLFVBQ0F2QyxFQUFBNEgsS0FFQSxZQUFBMWxCLEdBQUEsV0FBQW1nQixFQUFBM1ksT0FDQTJZLEVBQUFFLE9BQUEsV0FDQXZDLEVBQUFyRCxFQUFBa0wsR0FBQTNELEdBQUEwRCxLQUVBLEtBQUExbEIsRUFDQThkLEVBQUF3RSxFQUFBOEIsR0FBQTlDLEVBQUEsS0FBQTdHLEVBQUFrTCxHQUFBM0QsR0FBQTBELElBQ0EsS0FBQWxtQixHQUNBMmdCLEVBQUFFLE9BQUEsVUFDQXZDLEVBQUE0SCxLQUVBLEtBQUExbEIsRUFBa0I4ZCxFQUFBNEgsSUFDbEIsS0FBQTFsQixFQUFrQjhkLElBQ2xCLEtBQUF0ZSxFQUFBc2UsRUFBQXdFLEVBQUFvRCxTQUFBLEVBRUEsU0FBQUMsR0FBQTNsQixFQUFBUixHQUNBLFdBQUFBLEVBQUFzZSxFQUFBNkgsSUFDQSxLQUFBM2xCLEVBQUE4ZCxFQUFBc0UsR0FBQTZDLElBQ0EsS0FBQXpsQixFQUFBc2UsRUFBQThFLEdBQ0FyQyxFQUFBeUIsSUFFQSxTQUFBUyxHQUFBemlCLEVBQUFSLEdBQ0EsV0FBQUEsR0FBdUIyZ0IsRUFBQUUsT0FBQSxVQUF1QnZDLEVBQUE4SCxHQUFBdEUsRUFBQSxPQUM5QyxXQUFBOWhCLEdBQTZCMmdCLEVBQUFFLE9BQUEsVUFBdUJ2QyxFQUFBd0UsRUFBQWhCLEVBQUEsT0FDcEQsS0FBQXRoQixFQUFrQjhkLEVBQUFtRixFQUFBNEMsR0FBQSxLQUF1Q0QsR0FBQXRFLEVBQUEsTUFDekRmLEVBQUFrQixHQUVBLFNBQUFvRSxHQUFBN2xCLEVBQUFSLEdBQ0EsWUFBQUEsR0FBd0IyZ0IsRUFBQUUsT0FBQSxVQUF1QnZDLEVBQUF3RCxFQUFBLGNBQy9DLFlBQUF0aEIsRUFBQXVnQixFQUFBcUMsRUFBQWlELFNBQUEsRUFFQSxTQUFBbkQsR0FBQTFpQixHQUNBLGdCQUFBQSxFQUFBOGQsSUFDQSxLQUFBOWQsRUFBQXVnQixFQUFBK0IsR0FDQS9CLEVBQUF1RixHQUFBQyxHQUFBSCxJQUVBLFNBQUFFLEdBQUE5bEIsRUFBQVIsR0FDQSxXQUFBUSxFQUFrQnVqQixHQUFBdUMsR0FBQSxNQUNsQixZQUFBOWxCLEdBQUEwZ0IsRUFBQWxoQixHQUNBLEtBQUFBLElBQUEyZ0IsRUFBQUUsT0FBQSxXQUNBdkMsRUFBQWtJLEtBRUEsU0FBQUQsR0FBQS9sQixHQUNBLFFBQUFBLEVBQUEsT0FBQThkLEVBQUFnSSxHQUFBQyxJQUVBLFNBQUFDLEdBQUFaLEVBQUE1bEIsR0FDQSxTQUFBQSxFQUErQyxPQUF2QjJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQWdJLElBRS9DLFNBQUFGLEdBQUFSLEVBQUE1bEIsR0FDQSxXQUFBQSxFQUFpRCxPQUF2QjJnQixFQUFBRSxPQUFBLFVBQXVCdkMsRUFBQXdFLEdBRWpELFNBQUFnQixHQUFBdGpCLEdBQ0EsV0FBQUEsRUFBQThkLElBQ0F5QyxFQUFBMEMsRUFBQUwsRUFBQSxNQUVBLFNBQUFULEtBQ0EsT0FBQTVCLEVBQUFXLEVBQUEsUUFBQW1CLEdBQUFmLEVBQUEsS0FBbURKLEVBQUEsS0FBYytCLEVBQUFnRCxHQUFBLEtBQTJCNUUsS0FFNUYsU0FBQTRFLEtBQ0EsT0FBQTFGLEVBQUE4QixHQUFBNEMsSUFTQSxTQUFBN0csR0FBQW5ZLEVBQUFDLEVBQUEyVCxHQUNBLE9BQUEzVCxFQUFBRSxVQUFBMlgsR0FDQSxpRkFBOEU1VyxLQUFBakIsRUFBQXdZLFdBQzlFLFNBQUF4WSxFQUFBd1ksVUFBQSxTQUF1Q3ZYLEtBQUFsQixFQUFBZ1osT0FBQUcsTUFBQSxFQUFBblosRUFBQXFaLEtBQUF6RixHQUFBLEtBS3ZDLE9BMWNBd0gsRUFBQUQsS0FBQSxHQTJjQW5ZLFdBQUEsU0FBQWlkLEdBQ0EsSUFBQWhnQixHQUNBRSxTQUFBMlgsRUFDQVcsU0FBQSxNQUNBNEIsTUFDQTlCLFFBQUEsSUFBQXFCLEdBQUFxRyxHQUFBLEdBQUF0Z0IsRUFBQSxjQUNBc2EsVUFBQTNILEVBQUEySCxVQUNBdlksUUFBQTRRLEVBQUEySCxZQUE0Q0UsS0FBQTdILEVBQUEySCxXQUM1Q3RYLFNBQUFzZCxHQUFBLEdBSUEsT0FGQTNOLEVBQUFzSSxZQUFBLGlCQUFBdEksRUFBQXNJLGFBQ0EzYSxFQUFBMmEsV0FBQXRJLEVBQUFzSSxZQUNBM2EsR0FHQWlELE1BQUEsU0FBQWxELEVBQUFDLEdBT0EsR0FOQUQsRUFBQW1ELFFBQ0FsRCxFQUFBc1ksUUFBQXhXLGVBQUEsV0FDQTlCLEVBQUFzWSxRQUFBc0IsT0FBQSxHQUNBNVosRUFBQTBDLFNBQUEzQyxFQUFBb0QsY0FDQXlWLEVBQUE3WSxFQUFBQyxJQUVBQSxFQUFBRSxVQUFBOFgsR0FBQWpZLEVBQUFxRCxXQUFBLFlBQ0EsSUFBQTlCLEVBQUF0QixFQUFBRSxTQUFBSCxFQUFBQyxHQUNBLGlCQUFBbEcsRUFBQXdILEdBQ0F0QixFQUFBd1ksU0FBQSxZQUFBMWUsR0FBQSxNQUFBbWEsR0FBQSxNQUFBQSxFQUFBbmEsRUFBQSxTQXZqQkEsU0FBQWtHLEVBQUFzQixFQUFBeEgsRUFBQW1hLEVBQUFsVSxHQUNBLElBQUFxYSxFQUFBcGEsRUFBQW9hLEdBUUEsSUFMQUgsRUFBQWphLFFBQXFCaWEsRUFBQWxhLFNBQW9Ca2EsRUFBQUUsT0FBQSxLQUFBRixFQUFBRyxLQUE4QkgsRUFBQTNZLFFBRXZFdEIsRUFBQXNZLFFBQUF4VyxlQUFBLFdBQ0E5QixFQUFBc1ksUUFBQXNCLE9BQUEsS0FJQSxJQURBUSxFQUFBcmYsT0FBQXFmLEVBQUF3QixNQUFBdkgsRUFBQStILEVBQUFiLEdBQ0F6aEIsRUFBQW1hLEdBQUEsQ0FDQSxLQUFBbUcsRUFBQXJmLFFBQUFxZixJQUFBcmYsT0FBQSxHQUFBbWdCLEtBQ0FkLEVBQUF3QixLQUFBeEIsR0FDQSxPQUFBSCxFQUFBRSxPQUFBRixFQUFBRSxPQUNBLFlBQUFyZ0IsR0FBQWdnQixFQUFBOVosRUFBQWlVLEdBQUEsYUFDQTNTLEdBd2lCQTJlLENBQUFqZ0IsRUFBQXNCLEVBQUF4SCxFQUFBbWEsRUFBQWxVLEtBR0EwQyxPQUFBLFNBQUF6QyxFQUFBcUQsR0FDQSxHQUFBckQsRUFBQUUsVUFBQThYLEVBQUEsT0FBQTVjLEVBQUFtSSxLQUNBLEdBQUF2RCxFQUFBRSxVQUFBMlgsRUFBQSxTQUNBLElBQUFxSSxFQUFBQyxFQUFBOWMsS0FBQWdXLE9BQUEsR0FBQWYsRUFBQXRZLEVBQUFzWSxRQUVBLGlCQUFBclgsS0FBQW9DLEdBQUEsUUFBQXVJLEVBQUE1TCxFQUFBb2EsR0FBQXJmLE9BQUEsRUFBMEU2USxHQUFBLElBQVFBLEVBQUEsQ0FDbEYsSUFBQXdVLEVBQUFwZ0IsRUFBQW9hLEdBQUF4TyxHQUNBLEdBQUF3VSxHQUFBakYsRUFBQTdDLElBQUE1VyxVQUNBLEdBQUEwZSxHQUFBdkUsR0FBQSxNQUVBLGNBQUF2RCxFQUFBeGUsTUFBQSxRQUFBd2UsRUFBQXhlLFFBQ0EsS0FBQXFtQixJQUE2QkQsRUFBQWxnQixFQUFBb2EsR0FBQXBhLEVBQUFvYSxHQUFBcmYsT0FBQSxNQUM3Qm1sQixHQUFBaEQsR0FBQWdELEdBQUFqRCxLQUNBLG1CQUFBaGMsS0FBQW9DLEtBQ0FpVixJQUFBNVcsS0FDQXdTLEdBQUEsS0FBQW9FLEVBQUF4ZSxNQUFBLFFBQUF3ZSxFQUFBNVcsS0FBQTVILE9BQ0F3ZSxJQUFBNVcsTUFDQSxJQUFBNUgsRUFBQXdlLEVBQUF4ZSxLQUFBdW1CLEVBQUFGLEdBQUFybUIsRUFFQSxnQkFBQUEsRUFBQXdlLEVBQUE1VixVQUFBLFlBQUExQyxFQUFBd1ksVUFBQSxLQUFBeFksRUFBQXdZLFNBQUFGLEVBQUF1QixLQUFBLEtBQ0EsUUFBQS9mLEdBQUEsS0FBQXFtQixFQUFnRDdILEVBQUE1VixTQUNoRCxRQUFBNUksRUFBQXdlLEVBQUE1VixTQUFBaEQsRUFDQSxRQUFBNUYsRUFDQXdlLEVBQUE1VixVQW5FQSxTQUFBMUMsRUFBQXFELEdBQ0Esa0JBQUFyRCxFQUFBd1ksVUFBQSxLQUFBeFksRUFBQXdZLFVBQ0FoQixFQUFBdlcsS0FBQW9DLEVBQUFnVyxPQUFBLEtBQ0EsT0FBQXBZLEtBQUFvQyxFQUFBZ1csT0FBQSxJQWdFQWlILENBQUF0Z0IsRUFBQXFELEdBQUE2USxHQUFBeFUsRUFBQSxHQUNBLFVBQUE0WSxFQUFBdUIsTUFBQXdHLEdBQUEsR0FBQWhPLEVBQUFrTyxtQkFFQWpJLEVBQUFzQixNQUFBdEIsRUFBQWpYLFFBQUFnZixFQUFBLEtBQ0EvSCxFQUFBNVYsVUFBQTJkLEVBQUEsRUFBQTNnQixHQUZBNFksRUFBQTVWLFVBQUEsc0JBQUF6QixLQUFBb0MsR0FBQTNELEVBQUEsRUFBQUEsSUFLQW9FLGNBQUEsb0NBQ0FDLGtCQUFBc1EsRUFBQSxVQUNBclEsZ0JBQUFxUSxFQUFBLFVBQ0FtTSxxQkFBQW5NLEVBQUEsV0FDQW9NLFlBQUFwTSxFQUFBLFVBQ0FxTSxLQUFBLFFBQ0FDLGNBQUEsaUJBRUF6YyxXQUFBbVEsRUFBQSxvQkFDQUYsYUFDQUUsV0FFQTZELHFCQUVBMEksZUFBQSxTQUFBNWdCLEdBQ0EsSUFBQWtnQixFQUFBbGdCLEVBQUFvYSxHQUFBcGEsRUFBQW9hLEdBQUFyZixPQUFBLEdBQ0FtbEIsR0FBQTlELEdBQUE4RCxHQUFBeEQsR0FBQTFjLEVBQUFvYSxHQUFBd0IsVUFLQXhnQixFQUFBeWxCLGVBQUEsa0NBRUF6bEIsRUFBQWdKLFdBQUEsZ0NBQ0FoSixFQUFBZ0osV0FBQSxnQ0FDQWhKLEVBQUFnSixXQUFBLHVDQUNBaEosRUFBQWdKLFdBQUEseUNBQ0FoSixFQUFBZ0osV0FBQSx1Q0FDQWhKLEVBQUFnSixXQUFBLG9CQUEyQzNMLEtBQUEsYUFBQTZiLE1BQUEsSUFDM0NsWixFQUFBZ0osV0FBQSxzQkFBNkMzTCxLQUFBLGFBQUE2YixNQUFBLElBQzdDbFosRUFBQWdKLFdBQUEsdUJBQThDM0wsS0FBQSxhQUFBMmIsUUFBQSxJQUM5Q2haLEVBQUFnSixXQUFBLG1CQUEwQzNMLEtBQUEsYUFBQStiLFlBQUEsSUFDMUNwWixFQUFBZ0osV0FBQSwwQkFBaUQzTCxLQUFBLGFBQUErYixZQUFBLEtBaDJCakRsUSxDQUFBbE4sRUFBQSxzQkNLQyxTQUFBZ0UsR0FDRCxhQXVaQSxTQUFBMGxCLEVBQUFDLEdBRUEsSUFEQSxJQUFBanBCLEtBQ0E4VCxFQUFBLEVBQW1CQSxFQUFBbVYsRUFBQWhtQixTQUFrQjZRLEVBQ3JDOVQsRUFBQWlwQixFQUFBblYsR0FBQVEsZ0JBQUEsRUFFQSxPQUFBdFUsRUExWkFzRCxFQUFBa0UsV0FBQSxlQUFBL0YsRUFBQThZLEdBQ0EsSUFBQTJPLEVBQUEzTyxFQUFBMk8sT0FDQTNPLEVBQUE0TyxtQkFBQTVPLEVBQUFqWCxFQUFBOGxCLFlBQUEsYUFFQSxJQWdCQXBuQixFQUFBcW5CLEVBaEJBemhCLEVBQUFuRyxFQUFBbUcsV0FDQTBoQixFQUFBL08sRUFBQStPLFdBQ0FDLEVBQUFoUCxFQUFBZ1Asa0JBQ0FDLEVBQUFqUCxFQUFBaVAsZUFDQUMsRUFBQWxQLEVBQUFrUCxrQkFDQUMsRUFBQW5QLEVBQUFtUCx1QkFDQVAsRUFBQTVPLEVBQUE0TyxxQkFDQVEsRUFBQXBQLEVBQUFvUCxnQ0FDQUMsRUFBQXJQLEVBQUFxUCxtQkFDQUMsRUFBQXRQLEVBQUFzUCx1QkFDQUMsRUFBQXZQLEVBQUF1UCxrQkFDQUMsRUFBQXhQLEVBQUF3UCxrQkFDQUMsRUFBQXpQLEVBQUF5UCxZQUNBckIsRUFBQXBPLEVBQUFvTyxZQUNBc0IsR0FBQSxJQUFBMVAsRUFBQTBQLG9CQUdBLFNBQUFySyxFQUFBcFcsRUFBQXFXLEdBQXNDLE9BQVg3ZCxFQUFBNmQsRUFBV3JXLEVBMkR0QyxTQUFBMGdCLEVBQUFwaEIsR0FDQSxnQkFBQWIsRUFBQUMsR0FFQSxJQURBLElBQUFHLEVBQUEyWCxHQUFBLEVBQ0EsT0FBQTNYLEVBQUFKLEVBQUFLLFNBQUEsQ0FDQSxHQUFBRCxHQUFBUyxJQUFBa1gsRUFBQSxDQUNBLEtBQUFsWCxHQUFBYixFQUFBNFQsT0FBQSxHQUNBLE1BRUFtRSxNQUFBLE1BQUEzWCxFQUdBLE9BREFBLEdBQUFTLElBQUFrWCxHQUFBLEtBQUFsWCxLQUFBWixFQUFBRSxTQUFBLE1BQ0F3WCxFQUFBLG9CQUlBLFNBQUF1SyxFQUFBbGlCLEVBQUFDLEdBTUEsT0FMQUQsRUFBQUssT0FDQUwsRUFBQU8sTUFBQSxpQkFHQU4sRUFBQUUsU0FBQSxLQUZBRixFQUFBRSxTQUFBOGhCLEVBQUEsS0FHQXRLLEVBQUEsVUFLQSxTQUFBd0ssRUFBQXBvQixFQUFBMkksRUFBQWYsR0FDQXRKLEtBQUEwQixPQUNBMUIsS0FBQXFLLFNBQ0FySyxLQUFBc0osT0FHQSxTQUFBeWdCLEVBQUFuaUIsRUFBQUQsRUFBQWpHLEVBQUEySSxHQUVBLE9BREF6QyxFQUFBeUIsUUFBQSxJQUFBeWdCLEVBQUFwb0IsRUFBQWlHLEVBQUFvRCxnQkFBQSxJQUFBVixFQUFBLEVBQUEvQyxHQUFBTSxFQUFBeUIsU0FDQTNILEVBR0EsU0FBQTBILEVBQUF4QixHQUdBLE9BRkFBLEVBQUF5QixRQUFBQyxPQUNBMUIsRUFBQXlCLFFBQUF6QixFQUFBeUIsUUFBQUMsTUFDQTFCLEVBQUF5QixRQUFBM0gsS0FHQSxTQUFBdWdCLEVBQUF2Z0IsRUFBQWlHLEVBQUFDLEdBQ0EsT0FBQW9pQixFQUFBcGlCLEVBQUF5QixRQUFBM0gsUUFBQWlHLEVBQUFDLEdBRUEsU0FBQXFpQixFQUFBdm9CLEVBQUFpRyxFQUFBQyxFQUFBc2lCLEdBQ0EsUUFBQTFXLEVBQUEwVyxHQUFBLEVBQXdCMVcsRUFBQSxFQUFPQSxJQUMvQjVMLEVBQUF5QixRQUFBekIsRUFBQXlCLFFBQUFDLEtBQ0EsT0FBQTJZLEVBQUF2Z0IsRUFBQWlHLEVBQUFDLEdBS0EsU0FBQXVpQixFQUFBeGlCLEdBQ0EsSUFBQXdZLEVBQUF4WSxFQUFBa0MsVUFBQW1LLGNBRUErVSxFQURBVSxFQUFBL2YsZUFBQXlXLEdBQ0EsT0FDQXFKLEVBQUE5ZixlQUFBeVcsR0FDQSxVQUVBLFdBR0EsSUFBQTZKLEdBRUFsQyxJQUFBLFNBQUFwbUIsRUFBQWlHLEVBQUFDLEdBQ0EsUUFBQWxHLEVBQ0EsT0FBQXFvQixFQUFBbmlCLEVBQUFELEVBQUEsU0FDSyxRQUFBakcsR0FBb0JrRyxFQUFBeUIsUUFBQUMsS0FDekIsT0FBQUYsRUFBQXhCLEdBQ0ssR0FBQStoQixHQUFBLGNBQUE5Z0IsS0FBQW5ILEdBQ0wsT0FBQXFvQixFQUFBbmlCLEVBQUFELEVBQUEsb0JBQ0ssMEJBQUFrQixLQUFBbkgsR0FDTCxPQUFBcW9CLEVBQUFuaUIsRUFBQUQsRUFBQSxpQkFDSyxrREFBQWtCLEtBQUFuSCxHQUNMLE9BQUFxb0IsRUFBQW5pQixFQUFBRCxFQUFBLFdBQ0ssa0NBQUFrQixLQUFBbkgsR0FFTCxPQURBa0csRUFBQXdpQixTQUFBMW9CLEVBQ0EsNEJBQ0sseUNBQUFtSCxLQUFBbkgsR0FDTCxrQkFDSyxHQUFBQSxHQUFBLEtBQUFBLEVBQUF1ZixPQUFBLEdBQ0wsT0FBQThJLEVBQUFuaUIsRUFBQUQsRUFBQSxNQUNLLFdBQUFqRyxFQUNMcW5CLEVBQUEsZUFDSyxXQUFBcm5CLEVBQ0xxbkIsRUFBQSxVQUNLLDJCQUFBcm5CLEVBQ0wsa0JBQ0ssb0JBQUFBLEVBQ0wsT0FBQXFvQixFQUFBbmlCLEVBQUFELEVBQUEsaUJBQ0ssUUFBQWpHLEVBQ0wsZUFDSyxHQUFBZ29CLEdBQUEsS0FBQWhvQixFQUNMLE9BQUFxb0IsRUFBQW5pQixFQUFBRCxFQUFBLFVBRUEsT0FBQUMsRUFBQXlCLFFBQUEzSCxNQUdBNmhCLE1BQUEsU0FBQTdoQixFQUFBaUcsRUFBQUMsR0FDQSxXQUFBbEcsRUFBQSxDQUNBLElBQUF5ZSxFQUFBeFksRUFBQWtDLFVBQUFtSyxjQUNBLE9BQUE2VSxFQUFBbmYsZUFBQXlXLElBQ0E0SSxFQUFBLFdBQ0EsYUFDT00sRUFBQTNmLGVBQUF5VyxJQUNQNEksRUFBQSxXQUNBLGFBQ09XLEdBQ1BYLEVBQUFwaEIsRUFBQU8sTUFBQSxxQ0FDQSxVQUVBNmdCLEdBQUEsU0FDQSxhQUVLLGNBQUFybkIsRUFDTCxRQUNLZ29CLEdBQUEsUUFBQWhvQixHQUFBLGFBQUFBLEVBSUxzb0IsRUFBQWxDLElBQUFwbUIsRUFBQWlHLEVBQUFDLElBSEFtaEIsRUFBQSxRQUNBLFVBTUFzQixVQUFBLFNBQUEzb0IsRUFBQWlHLEVBQUFDLEdBQ0EsV0FBQWxHLEVBQUFxb0IsRUFBQW5pQixFQUFBRCxFQUFBLFFBQ0FzYSxFQUFBdmdCLEVBQUFpRyxFQUFBQyxJQUdBSCxLQUFBLFNBQUEvRixFQUFBaUcsRUFBQUMsR0FDQSxRQUFBbEcsRUFBa0IsT0FBQTBILEVBQUF4QixHQUNsQixRQUFBbEcsR0FBa0Jnb0IsRUFBQSxPQUFBSyxFQUFBbmlCLEVBQUFELEVBQUEsYUFDbEIsUUFBQWpHLEdBQWtCLEtBQUFBLEVBQWUsT0FBQXVvQixFQUFBdm9CLEVBQUFpRyxFQUFBQyxHQUNqQyxRQUFBbEcsRUFBQSxPQUFBcW9CLEVBQUFuaUIsRUFBQUQsRUFBQSxVQUVBLFdBQUFqRyxHQUFBLHNEQUE2RW1ILEtBQUFsQixFQUFBa0MsWUFFeEUsV0FBQW5JLEVBQ0x5b0IsRUFBQXhpQixRQUNLLG9CQUFBakcsRUFDTCxPQUFBcW9CLEVBQUFuaUIsRUFBQUQsRUFBQSxzQkFKQW9oQixHQUFBLFNBTUEsY0FHQXVCLFVBQUEsU0FBQTVvQixFQUFBd0ksRUFBQXRDLEdBQ0EsV0FBQWxHLEVBQWtCMEgsRUFBQXhCLEdBQ2xCLFFBQUFsRyxHQUF5QnFuQixFQUFBLFdBQXVCLGFBQ2hEbmhCLEVBQUF5QixRQUFBM0gsTUFHQTZvQixPQUFBLFNBQUE3b0IsRUFBQWlHLEVBQUFDLEdBQ0EsV0FBQWxHLEdBQWtCLEtBQUFBLEVBQWV1b0IsRUFBQXZvQixFQUFBaUcsRUFBQUMsR0FDakMsS0FBQWxHLEVBQUEwSCxFQUFBeEIsR0FDQSxLQUFBbEcsRUFBQXFvQixFQUFBbmlCLEVBQUFELEVBQUEsVUFDQSxpQkFBQWpHLEVBQUFxb0IsRUFBQW5pQixFQUFBRCxFQUFBLGtCQUNBLFFBQUFqRyxHQUFBeW9CLEVBQUF4aUIsR0FDQSxXQUdBNmlCLE9BQUEsU0FBQTlvQixFQUFBaUcsRUFBQUMsR0FDQSxjQUFBbEcsRUFBQSxTQUVBLFFBQUFBLEdBQ0FxbkIsRUFBQSxhQUNBbmhCLEVBQUF5QixRQUFBM0gsTUFFQXVnQixFQUFBdmdCLEVBQUFpRyxFQUFBQyxJQUdBcWhCLGNBQUEsU0FBQXZuQixFQUFBaUcsRUFBQUMsR0FDQSxjQUFBbEcsR0FBQXVuQixFQUFBdmYsZUFBQS9CLEVBQUFrQyxZQUNBa2YsRUFBQSxNQUNBbmhCLEVBQUF5QixRQUFBM0gsTUFFQXNvQixFQUFBUyxRQUFBL29CLEVBQUFpRyxFQUFBQyxJQUlBNmlCLFFBQUEsU0FBQS9vQixFQUFBaUcsRUFBQUMsR0FDQSxRQUFBbEcsRUFBQSxPQUFBcW9CLEVBQUFuaUIsRUFBQUQsRUFBQSxrQkFDQSxRQUFBakcsR0FBa0IsS0FBQUEsRUFBZSxPQUFBdW9CLEVBQUF2b0IsRUFBQWlHLEVBQUFDLEdBQ2pDLFFBQUFsRyxFQUFrQixPQUFBMEgsRUFBQXhCLElBQUFtaUIsRUFBQW5pQixFQUFBRCxFQUFBK2hCLEVBQUEsZUFFbEIsb0JBQUFob0IsRUFBQSxPQUFBcW9CLEVBQUFuaUIsRUFBQUQsRUFBQSxpQkFFQSxXQUFBakcsRUFBQSxDQUNBLElBQUF5ZSxFQUFBeFksRUFBQWtDLFVBQUFtSyxjQUVBK1UsRUFEQSxRQUFBNUksR0FBQSxPQUFBQSxHQUFBLE9BQUFBLEdBQUEsTUFBQUEsRUFDQSxVQUNBK0ksRUFBQXhmLGVBQUF5VyxHQUNBLFlBQ0FnSixFQUFBemYsZUFBQXlXLEdBQ0EsV0FDQWlKLEVBQUExZixlQUFBeVcsR0FDQSxVQUNBMEksRUFBQW5mLGVBQUF5VyxHQUNBLFdBQ0FrSixFQUFBM2YsZUFBQXlXLEdBQ0EsV0FDQXNKLEVBQUEvZixlQUFBeVcsR0FDQSxPQUNBcUosRUFBQTlmLGVBQUF5VyxHQUNBLFVBRUEsUUFFQSxPQUFBdlksRUFBQXlCLFFBQUEzSCxNQUdBZ3BCLGlCQUFBLFNBQUFocEIsRUFBQWlHLEVBQUFDLEdBQ0EsV0FBQWxHLEVBQ0F1b0IsRUFBQXZvQixFQUFBaUcsRUFBQUMsR0FDQSxLQUFBbEcsRUFDQTBILEVBQUF4QixJQUFBbWlCLEVBQUFuaUIsRUFBQUQsRUFBQStoQixFQUFBLG1CQUNBLFFBQUFob0IsSUFDQXFuQixFQUFBLFNBQ0FuaEIsRUFBQXlCLFFBQUEzSCxPQUdBaXBCLGVBQUEsU0FBQWpwQixFQUFBaUcsRUFBQUMsR0FDQSxXQUFBbEcsRUFBQTBILEVBQUF4QixHQUNBLEtBQUFsRyxHQUFrQixLQUFBQSxFQUFldW9CLEVBQUF2b0IsRUFBQWlHLEVBQUFDLEVBQUEsR0FDakNvaUIsRUFBQVMsUUFBQS9vQixFQUFBaUcsRUFBQUMsSUFHQWdqQiwwQkFBQSxTQUFBbHBCLEVBQUFpRyxFQUFBQyxHQUNBLFdBQUFsRyxFQUNBcW9CLEVBQUFuaUIsRUFBQUQsRUFBQSxzQkFDQSxRQUFBakcsR0FBQSxrQkFBQWtHLEVBQUF3aUIsVUFDQXJCLEVBQUEsV0FDQSw2QkFFQTlHLEVBQUF2Z0IsRUFBQWlHLEVBQUFDLElBR0FpakIsbUJBQUEsU0FBQW5wQixFQUFBaUcsRUFBQUMsR0FDQSxXQUFBbEcsR0FDQWtHLEVBQUF3aUIsU0FBQSxLQUNBaGhCLEVBQUF4QixJQUVBLFFBQUFsRyxHQUdBcW5CLEVBRkEsY0FBQW5oQixFQUFBd2lCLFdBQUFkLEVBQUE1ZixlQUFBL0IsRUFBQWtDLFVBQUFtSyxnQkFDQSxrQkFBQXBNLEVBQUF3aUIsV0FBQWIsRUFBQTdmLGVBQUEvQixFQUFBa0MsVUFBQW1LLGVBQ0EsUUFFQSxXQUNBLGFBRUEsc0JBR0E4VyxVQUFBLFNBQUFwcEIsRUFBQWlHLEVBQUFDLEdBQ0EsY0FBQWxHLEdBQXlCcW5CLEVBQUEsV0FBdUIsYUFDaEQsS0FBQXJuQixFQUFrQnFvQixFQUFBbmlCLEVBQUFELEVBQUEsT0FDbEJzYSxFQUFBdmdCLEVBQUFpRyxFQUFBQyxJQUdBbWpCLEdBQUEsU0FBQXJwQixFQUFBaUcsRUFBQUMsR0FDQSxXQUFBbEcsRUFBa0IwSCxFQUFBeEIsR0FDbEIsS0FBQWxHLEdBQWtCLEtBQUFBLEVBQWV1b0IsRUFBQXZvQixFQUFBaUcsRUFBQUMsSUFDakMsUUFBQWxHLEVBQUFxbkIsRUFBQSxNQUNBLFFBQUFybkIsSUFBQXFuQixFQUFBLFdBQ0EsT0FHQWlDLGNBQUEsU0FBQXRwQixFQUFBaUcsRUFBQUMsR0FDQSxXQUFBbEcsRUFBa0IwSCxFQUFBeEIsR0FDbEIsS0FBQWxHLEdBQWtCLEtBQUFBLEVBQWV1b0IsRUFBQXZvQixFQUFBaUcsRUFBQUMsSUFDakMsUUFBQWxHLEVBQUFxbkIsRUFBQSxXQUNBLFlBQUFybkIsR0FBQSxLQUFBQSxHQUFBLEtBQUFBLElBQUFxbkIsRUFBQSxTQUNBLG1CQUdBLE9BQ0FwZSxXQUFBLFNBQUF2SCxHQUNBLE9BQWMwRSxTQUFBLEtBQ2RGLE1BQUFnaEIsRUFBQSxjQUNBd0IsU0FBQSxLQUNBL2dCLFFBQUEsSUFBQXlnQixFQUFBbEIsRUFBQSxjQUFBeGxCLEdBQUEsVUFHQXlILE1BQUEsU0FBQWxELEVBQUFDLEdBQ0EsSUFBQUEsRUFBQUUsVUFBQUgsRUFBQXFELFdBQUEsWUFDQSxJQUFBOUIsR0FBQXRCLEVBQUFFLFVBclZBLFNBQUFILEVBQUFDLEdBQ0EsSUFBQUcsRUFBQUosRUFBQUssT0FDQSxHQUFBZ2hCLEVBQUFqaEIsR0FBQSxDQUNBLElBQUEwTCxFQUFBdVYsRUFBQWpoQixHQUFBSixFQUFBQyxHQUNBLFFBQUE2TCxFQUFBLE9BQUFBLEVBRUEsV0FBQTFMLEdBQ0FKLEVBQUFTLFNBQUEsWUFDQWtYLEVBQUEsTUFBQTNYLEVBQUFrQyxZQUNLLEtBQUE5QixJQUFBLEtBQUFBLEdBQUEsS0FBQUEsSUFBQUosRUFBQU0sSUFBQSxLQUNMcVgsRUFBQSxnQkFDSyxLQUFBdlgsR0FBQSxLQUFBQSxHQUNMSCxFQUFBRSxTQUFBOGhCLEVBQUE3aEIsR0FDQUgsRUFBQUUsU0FBQUgsRUFBQUMsSUFDSyxLQUFBRyxHQUNMSixFQUFBUyxTQUFBLFlBQ0FrWCxFQUFBLGdCQUNLLEtBQUF2WCxHQUNMSixFQUFBTyxNQUFBLFdBQ0FvWCxFQUFBLHdCQUNLLEtBQUF6VyxLQUFBZCxJQUFBLEtBQUFBLEdBQUFKLEVBQUFNLElBQUEsT0FDTE4sRUFBQVMsU0FBQSxVQUNBa1gsRUFBQSxrQkFDSyxNQUFBdlgsRUFZQSxXQUFBYyxLQUFBZCxHQUNMdVgsRUFBQSxrQkFDSyxLQUFBdlgsR0FBQUosRUFBQU8sTUFBQSx5QkFDTG9YLEVBQUEseUJBQ0ssaUJBQWdCelcsS0FBQWQsR0FDckJ1WCxFQUFBLEtBQUF2WCxJQUNLLEtBQUFBLEdBQUEsS0FBQUEsSUFBQUosRUFBQU8sTUFBQSxxQkFDTCxLQUFBSCxHQUFBLEtBQUFBLElBQUFKLEVBQUFPLE1BQUEsa0JBQ0EsS0FBQUgsR0FBQSxLQUFBQSxJQUFBSixFQUFBTyxNQUFBLGlCQUNBUCxFQUFBNFQsT0FBQSxHQUNBM1QsRUFBQUUsU0FBQStoQixFQUNBdkssRUFBQSxvQkFDSyxXQUFBelcsS0FBQWQsSUFDTEosRUFBQVMsU0FBQSxZQUNBa1gsRUFBQSxvQkFFQUEsRUFBQSxXQTNCQSxRQUFBelcsS0FBQWxCLEVBQUFnWSxTQUNBaFksRUFBQVMsU0FBQSxVQUNBa1gsRUFBQSxrQkFDTzNYLEVBQUFPLE1BQUEsZ0JBQ1BQLEVBQUFTLFNBQUEsWUFDQVQsRUFBQU8sTUFBQSxZQUNBb1gsRUFBQSxvQ0FDQUEsRUFBQSwwQkFDTzNYLEVBQUFPLE1BQUEsU0FDUG9YLEVBQUEsb0JBRE8sSUFxVFAzWCxFQUFBQyxHQVFBLE9BUEFzQixHQUFBLGlCQUFBQSxJQUNBeEgsRUFBQXdILEVBQUEsR0FDQUEsSUFBQSxJQUVBNmYsRUFBQTdmLEVBQ0EsV0FBQXhILElBQ0FrRyxRQUFBb2lCLEVBQUFwaUIsU0FBQWxHLEVBQUFpRyxFQUFBQyxJQUNBbWhCLEdBR0ExZSxPQUFBLFNBQUF6QyxFQUFBcUQsR0FDQSxJQUFBNFcsRUFBQWphLEVBQUF5QixRQUFBdEIsRUFBQWtELEtBQUFnVyxPQUFBLEdBQ0E1VyxFQUFBd1gsRUFBQXhYLE9BY0EsTUFiQSxRQUFBd1gsRUFBQW5nQixNQUFBLEtBQUFxRyxHQUF3QyxLQUFBQSxJQUFBOFosSUFBQXZZLE1BQ3hDdVksRUFBQXZZLE9BQ0EsS0FBQXZCLEdBQW9CLFNBQUE4WixFQUFBbmdCLE1BQUEsT0FBQW1nQixFQUFBbmdCLE1BQ3BCLGlCQUFBbWdCLEVBQUFuZ0IsTUFBQSxzQkFBQW1nQixFQUFBbmdCLE1BSVMsS0FBQXFHLEdBQUEsVUFBQThaLEVBQUFuZ0IsTUFBQSxrQkFBQW1nQixFQUFBbmdCLFFBQ1QsS0FBQXFHLEdBQW9CLE1BQUE4WixFQUFBbmdCLE1BQUEsV0FBQW1nQixFQUFBbmdCLFFBRXBCMkksRUFBQTRnQixLQUFBQyxJQUFBLEVBQUFySixFQUFBeFgsT0FBQS9DLElBSkErQyxHQURBd1gsSUFBQXZZLE1BQ0FlLFFBT0FBLEdBR0E4Z0IsY0FBQSxJQUNBeGYsa0JBQUEsS0FDQUMsZ0JBQUEsS0FDQXdjLHFCQUFBLE1BQ0FDLGNBQ0FDLEtBQUEsV0FZQSxJQUFBOEMsR0FDQSxzQ0FDQW5DLEVBQUFQLEVBQUEwQyxHQUVBQyxHQUNBLGlFQUNBLHVCQUNBbkMsRUFBQVIsRUFBQTJDLEdBRUFDLEdBQ0EsbUVBQ0EscUVBQ0EsdURBQ0EsNERBQ0Esd0VBQ0EsOERBQ0EsNERBQ0EsOERBQ0EsdUVBQ0EsNkNBQ0FuQyxFQUFBVCxFQUFBNEMsR0FFQUMsR0FDQSxrRUFDQSwyQkFDQW5DLEVBQUFWLEVBQUE2QyxHQUVBQyxHQUNBLDhEQUNBLGtFQUNBLGlFQUNBLG9FQUNBLHlFQUNBLCtFQUNBLGdGQUNBLGlFQUNBLDJEQUNBLGlFQUNBLHlEQUNBLDhEQUNBLG9EQUNBLGlFQUNBLHVEQUNBLHVFQUNBLCtEQUNBLGdFQUNBLHNFQUNBLGtFQUNBLHNFQUNBLG1GQUNBLDZEQUNBLHFFQUNBLHFFQUNBLHdEQUNBLGdEQUNBLHdEQUNBLHFFQUNBLG1FQUNBLG1FQUNBLDhFQUNBLHFGQUNBLDREQUNBLHdFQUNBLHdFQUNBLHNFQUNBLG1FQUNBLHdFQUNBLCtFQUNBLDhEQUNBLGdFQUNBLDRGQUNBLGdFQUNBLDREQUNBLG9FQUNBLDBEQUNBLDJDQUNBLGtFQUNBLHNFQUNBLCtEQUNBLHNDQUNBLGlFQUNBLHNFQUNBLHdFQUNBLGtFQUNBLGlFQUNBLCtHQUNBLHNFQUNBLDhEQUNBLHlFQUNBLGlFQUNBLGtGQUNBLHlEQUNBLHdFQUNBLDhEQUNBLG1FQUNBLHNFQUNBLDhEQUNBLDZEQUNBLDBFQUNBLG9GQUNBLG1FQUNBLHNEQUNBLGtFQUNBLDZFQUNBLHVFQUNBLGtGQUNBLHFDQUVBLDBFQUNBLDhFQUNBLG9EQUNBLHNFQUNBLDZFQUNBLDBFQUNBLHFFQUNBLG9FQUNBLDJEQUNBM0MsRUFBQUgsRUFBQThDLEdBRUFDLEdBQ0EsNkVBQ0EsNEVBQ0Esa0VBQ0Esa0ZBQ0EseUNBQ0FwQyxFQUFBWCxFQUFBK0MsR0FLQW5DLEVBQUFaLEdBRkEsMkVBQ0EsNENBTUFhLEVBQUFiLEdBRkEsZ0VBQ0EseUNBR0FnRCxHQUNBLCtEQUNBLDhEQUNBLDBFQUNBLGtFQUNBLGtFQUNBLGdFQUNBLDZEQUNBLDREQUNBLCtEQUNBLGtFQUNBLDBEQUNBLG9FQUNBLHdFQUNBLDhEQUNBLG9FQUNBLHVFQUNBLHlFQUNBLG9FQUNBLHdFQUNBLHFFQUNBLDJEQUNBLHFFQUNBLHdFQUNBLCtEQUNBLCtEQUNBLHFDQUNBbEMsRUFBQWQsRUFBQWdELEdBRUFDLEdBQ0Esb0VBQ0EsZ0ZBQ0Esa0VBQ0Esb0dBQ0Esb0ZBQ0EsNkVBQ0EsbUZBQ0EsOEVBQ0EsbUVBQ0EsdUVBQ0EsbUVBQ0EscUZBQ0EscURBQ0EscUZBQ0Esa0ZBQ0EsNkVBQ0EsZ0ZBQ0Esa0VBQ0EsMEJBQ0EsOEVBQ0EsMkVBQ0EseUVBQ0EsbURBQ0Esb0RBQ0Esa0RBQ0EscURBQ0EsNEVBQ0Esa0ZBQ0EsbUdBQ0EsNkVBQ0EsK0VBQ0EsNERBQ0EsNEVBQ0Esb0VBQ0EsdUVBQ0EsZ0dBQ0EsbUVBQ0EsK0NBQ0EscUVBQ0Esc0VBQ0EsbUZBQ0EsZ0VBQ0Esa0VBQ0EscUZBQ0EseURBQ0Esa0VBQ0Esd0RBQ0Esb0VBQ0EseUVBQ0Esb0VBQ0Esb0RBQ0EsdUVBQ0EsZ0ZBQ0EsZ0VBQ0EsbUVBQ0EsbUdBQ0EsOERBQ0EsdUVBQ0EsK0VBQ0EseUVBQ0EsK0RBQ0EsOERBQ0EsZ0RBQ0Esb0VBQ0EscUVBQ0EsNEVBQ0EsMkZBQ0EsaUVBQ0EscURBQ0Esc0ZBQ0Esb0VBQ0EsdURBQ0Esc0VBQ0EseUVBQ0EsNkVBQ0EsZ0lBQ0EsdUVBQ0Esb0ZBQ0EsaUVBQ0Esd0VBQ0EsUUFDQSx1RUFDQSxpRUFDQSxtRUFDQSxxRUFDQSwwREFDQSxpRUFDQSwwRUFDQSxpRUFDQSx1RUFDQSwwRUFDQSwwREFDQSw0RkFDQSx1QkFDQWxDLEVBQUFmLEVBQUFpRCxHQUVBQyxFQUFBUixFQUFBUyxPQUFBUixHQUFBUSxPQUFBUCxHQUFBTyxPQUFBTixHQUNBTSxPQUFBTCxHQUFBSyxPQUFBSixHQUFBSSxPQUFBSCxHQUNBRyxPQUFBRixHQUdBLFNBQUFHLEVBQUFua0IsRUFBQUMsR0FFQSxJQURBLElBQUFHLEVBQUF1WSxHQUFBLEVBQ0EsT0FBQXZZLEVBQUFKLEVBQUFLLFNBQUEsQ0FDQSxHQUFBc1ksR0FBQSxLQUFBdlksRUFBQSxDQUNBSCxFQUFBRSxTQUFBLEtBQ0EsTUFFQXdZLEVBQUEsS0FBQXZZLEVBRUEsNEJBWEEvRSxFQUFBeWxCLGVBQUEsa0JBQUFtRCxHQWNBNW9CLEVBQUFnSixXQUFBLFlBQ0FpZCxnQkFDQUMsYUFDQUMsZ0JBQ0FDLHFCQUNBUCxtQkFDQVEsOEJBQ0FDLGlCQUNBQyxxQkFDQUMsZ0JBQ0FDLGdCQUNBVCxZQUNBK0MsSUFBQSxTQUFBcGtCLEVBQUFDLEdBQ0EsUUFBQUQsRUFBQU0sSUFBQSxPQUNBTCxFQUFBRSxTQUFBZ2tCLEVBQ0FBLEVBQUFua0IsRUFBQUMsTUFHQXZILEtBQUEsUUFHQTJDLEVBQUFnSixXQUFBLGVBQ0FrZCxhQUNBQyxnQkFDQUMscUJBQ0FQLG1CQUNBUSw4QkFDQUcsZ0JBQ0FDLGdCQUNBSCxpQkFDQUksYUFBQSxFQUNBckIsWUFBQSxLQUNBVyxZQUNBK0MsSUFBQSxTQUFBcGtCLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQU0sSUFBQSxNQUNBTixFQUFBa1ksYUFDQSxzQkFDU2xZLEVBQUFNLElBQUEsTUFDVEwsRUFBQUUsU0FBQWdrQixFQUNBQSxFQUFBbmtCLEVBQUFDLEtBRUEsd0JBR0Fva0IsSUFBQSxTQUFBcmtCLEdBQ0EsUUFBQUEsRUFBQU8sTUFBQSxTQUErQixLQUMvQixZQUdBcU4sRUFBQSxTQUFBNU4sR0FFQSxPQURBQSxFQUFBTyxNQUFBLFdBQ0FQLEVBQUFPLE1BQUEsYUFDQSxxQ0FDQSwwQkFFQStqQixJQUFBLFNBQUF0a0IsR0FDQSxRQUFBQSxFQUFBTSxJQUFBLE9BQ0Esd0JBR0E1SCxLQUFBLE1BQ0F5TCxXQUFBLFNBR0E5SSxFQUFBZ0osV0FBQSxlQUNBa2QsYUFDQUMsZ0JBQ0FDLHFCQUNBUCxtQkFDQVEsOEJBQ0FHLGdCQUNBQyxnQkFDQUgsaUJBQ0FJLGFBQUEsRUFDQXJCLFlBQUEsS0FDQVcsWUFDQStDLElBQUEsU0FBQXBrQixFQUFBQyxHQUNBLE9BQUFELEVBQUFNLElBQUEsTUFDQU4sRUFBQWtZLGFBQ0Esc0JBQ1NsWSxFQUFBTSxJQUFBLE1BQ1RMLEVBQUFFLFNBQUFna0IsRUFDQUEsRUFBQW5rQixFQUFBQyxLQUVBLHdCQUdBc2tCLElBQUEsU0FBQXZrQixHQUNBLE9BQUFBLEVBQUFNLElBQUEsTUFBeUIsdUJBQ3pCTixFQUFBTyxNQUFBLDhHQUNBUCxFQUFBUyxTQUFBLFlBQ0FULEVBQUFPLE1BQUEsYUFDQSxxQ0FDQSwyQkFFQWlrQixJQUFBLFdBQ0Esd0JBR0E5ckIsS0FBQSxNQUNBeUwsV0FBQSxTQUdBOUksRUFBQWdKLFdBQUEsY0FDQWlkLGdCQUNBQyxhQUNBQyxnQkFDQU4sbUJBQ0FRLDhCQUNBQyxpQkFDQUMscUJBQ0FDLGdCQUNBQyxnQkFDQUUscUJBQUEsRUFDQVgsWUFDQStDLElBQUEsU0FBQXBrQixFQUFBQyxHQUNBLFFBQUFELEVBQUFNLElBQUEsT0FDQUwsRUFBQUUsU0FBQWdrQixFQUNBQSxFQUFBbmtCLEVBQUFDLE1BR0F2SCxLQUFBLE1BQ0F5TCxXQUFBLFNBdnpCQUksQ0FBQWxOLEVBQUEsc0JDS0MsU0FBQWdFLEdBQ0QsYUFFQUEsRUFBQWtFLFdBQUEsb0JBQUFrbEIsRUFBQUMsR0FFQSxJQUFBN2tCLEVBQUF4RSxFQUFBa1gsUUFBQWtTLEVBQUEsYUFDQUUsRUFBQSxRQUFBOWtCLEVBQUFuSCxVQWFBOFgsSUFBQWtVLEVBQUFFLHNCQUNBRixFQUFBRSxxQkFBQSxRQUlBcFUsSUFBQWtVLEVBQUFHLHFCQUNBSCxFQUFBRyxtQkFBQSxRQUdBclUsSUFBQWtVLEVBQUFJLFlBQUFKLEVBQUFJLFdBQUEsUUFHQXRVLElBQUFrVSxFQUFBSyxnQkFDQUwsRUFBQUssZUFBQSxRQUVBdlUsSUFBQWtVLEVBQUFNLFFBQ0FOLEVBQUFNLE9BQUEsUUFFQXhVLElBQUFrVSxFQUFBTyw4QkFDQVAsRUFBQU8sNkJBQUEsUUFFQXpVLElBQUFrVSxFQUFBUSxNQUNBUixFQUFBUSxLQUFBLFFBR0ExVSxJQUFBa1UsRUFBQVMscUJBQ0FULEVBQUFTLHVCQUVBLElBQUFDLEdBQ0E1bUIsT0FBQSxTQUNBNm1CLEtBQUEsVUFDQXhrQixNQUFBLFFBQ0F5a0IsTUFBQSxhQUNBQyxNQUFBLGFBQ0FDLE1BQUEsVUFDQXpwQixHQUFBLEtBQ0EwcEIsTUFBQSxRQUNBQyxhQUFBLGlCQUNBQyxZQUFBLGVBQ0FDLFdBQUEsYUFDQUMsV0FBQSxPQUNBQyxVQUFBLE9BQ0FDLFNBQUEsT0FDQUMsU0FBQSxTQUNBQyxHQUFBLEtBQ0FDLE9BQUEsU0FDQW5CLGNBQUEsZ0JBQ0FDLE1BQUEsV0FHQSxRQUFBbUIsS0FBQWYsRUFDQUEsRUFBQXJqQixlQUFBb2tCLElBQUF6QixFQUFBUyxtQkFBQWdCLEtBQ0FmLEVBQUFlLEdBQUF6QixFQUFBUyxtQkFBQWdCLElBSUEsSUFBQUMsRUFBQSw2QkFDQUMsRUFBQSwrQkFDQUMsRUFBQSxvQkFDQUMsRUFBQTdCLEVBQUE4QiwyQkFBQSx1QkFDQUMsRUFBQSwwQkFDQUMsRUFBQSwyQkFDQUMsRUFBQSx1Q0FDQUMsRUFBQSxzQkFDQUMsRUFBQSw4Q0FHQSxTQUFBQyxFQUFBOW1CLEVBQUFDLEVBQUE4bUIsR0FFQSxPQURBOW1CLEVBQUE4bUIsRUFBQTltQixFQUFBZ2hCLE9BQUE4RixFQUNBQSxFQUFBL21CLEVBQUFDLEdBR0EsU0FBQSttQixFQUFBaG5CLEVBQUFDLEVBQUE4bUIsR0FFQSxPQURBOW1CLEVBQUE4bUIsRUFBQTltQixFQUFBMmIsTUFBQW1MLEVBQ0FBLEVBQUEvbUIsRUFBQUMsR0FTQSxTQUFBZ25CLEVBQUFobkIsR0F5QkEsT0F2QkFBLEVBQUFpbkIsV0FBQSxFQUNBam5CLEVBQUErbEIsVUFBQSxFQUNBL2xCLEVBQUE4bEIsVUFBQSxFQUVBOWxCLEVBQUFnbUIsSUFBQSxFQUVBaG1CLEVBQUFpbUIsUUFBQSxFQUVBam1CLEVBQUE4a0IsZUFBQSxFQUVBOWtCLEVBQUFZLE1BQUEsRUFFQVosRUFBQWtuQixjQUFBLEVBQ0FsbkIsRUFBQThtQixHQUFBSyxJQUNBbm5CLEVBQUE4bUIsRUFBQU0sRUFDQXBuQixFQUFBMmIsTUFBQTBMLEdBR0FybkIsRUFBQXNuQixjQUFBLEVBQ0F0bkIsRUFBQXVuQixzQkFBQSxFQUVBdm5CLEVBQUF3bkIsU0FBQXhuQixFQUFBeW5CLFNBQ0F6bkIsRUFBQXluQixVQUFzQjFuQixPQUFBLE1BQ3RCLEtBR0EsU0FBQXNuQixFQUFBdG5CLEVBQUFDLEdBQ0EsSUFuQ0ErVCxFQW1DQTJULEVBQUEzbkIsRUFBQXNCLFdBQUFyQixFQUFBbUQsWUFDQXdrQixJQXBDQTVULEVBb0NBL1QsRUFBQXduQixTQUFBem5CLFVBbkNBLEtBQUFrQixLQUFBOFMsRUFBQWdGLFFBb0NBNk8sRUFBQTVuQixFQUFBa25CLGFBQ0FXLEVBQUE3bkIsRUFBQXduQixTQUFBMXJCLEdBQ0Fnc0IsR0FBQSxJQUFBOW5CLEVBQUEwYSxLQUNBcU4sR0FBQS9uQixFQUFBZ29CLFVBQUFob0IsRUFBQWdvQixVQUFBanRCLE9BQUEsU0FFQWlGLEVBQUFrbkIsY0FBQSxFQUVBLElBQUFlLEVBQUFqb0IsRUFBQW1ELFlBRUEsVUFBQW5ELEVBQUFrb0Isa0JBQ0Fsb0IsRUFBQWtvQixnQkFBQWxvQixFQUFBbUQsWUFDQTJrQixHQUFBLENBV0EsSUFUQTluQixFQUFBZ21CLElBQUEsRUFDQWhtQixFQUFBaW1CLFFBQUEsRUFDQWptQixFQUFBb2xCLE1BQUEsRUFDQXBsQixFQUFBOGtCLGVBQUEsRUFFQTlrQixFQUFBMGEsS0FBQSxLQUlBdU4sRUFBQWpvQixFQUFBZ29CLFVBQUFob0IsRUFBQWdvQixVQUFBanRCLE9BQUEsSUFDQWlGLEVBQUFnb0IsVUFBQXBNLE1BQ0E1YixFQUFBZ29CLFVBQUFqdEIsT0FDQWlGLEVBQUFtRCxZQUFBbkQsRUFBQWdvQixVQUFBaG9CLEVBQUFnb0IsVUFBQWp0QixPQUFBLEdBR0FpRixFQUFBMGEsTUFBQSxHQUdBLElBQUExYSxFQUFBMGEsT0FDQTFhLEVBQUFrb0IsZ0JBQUFELEVBQUFqb0IsRUFBQWdvQixVQUFBaG9CLEVBQUFnb0IsVUFBQWp0QixPQUFBLElBTUEsSUFBQW90QixJQUNBUixHQUFBRSxHQUFBN25CLEVBQUF3bkIsU0FBQWpwQixRQUNBdXBCLEdBQUFGLEdBQ0E1bkIsRUFBQXduQixTQUFBWSxlQUdBQyxJQUFBLElBQUFyb0IsRUFBQTBhLE1BQUFtTixHQUFBRixJQUNBM25CLEVBQUFtRCxhQUFBNGtCLEdBQUFob0IsRUFBQU8sTUFBQTZsQixHQUVBN2xCLEVBQUEsS0FDQSxHQUFBTixFQUFBa29CLGlCQUFBLElBQUFOLEdBQUE1bkIsRUFBQXduQixTQUFBWSxlQUNBcG9CLEVBQUF3bkIsU0FBQWpwQixRQUFBb3BCLEdBR0EsT0FGQTVuQixFQUFBa1ksWUFDQWpZLEVBQUFrbkIsY0FBQSxFQUNBL0IsRUFBQUMsS0FDSyxHQUFBcmxCLEVBQUFxRCxXQUNMLFlBQ0ssR0FBQXNrQixHQUFBMW5CLEVBQUFtRCxhQUFBNGtCLElBQUF6bkIsRUFBQVAsRUFBQU8sTUFBQWdtQixLQUFBaG1CLEVBQUEsR0FBQXZGLFFBQUEsRUFNTCxPQUxBaUYsRUFBQVksTUFBQSxFQUNBWixFQUFBekIsT0FBQStCLEVBQUEsR0FBQXZGLE9BQ0FpRixFQUFBeW5CLFNBQUFscEIsUUFBQSxFQUNBa21CLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxVQUNBM2xCLEVBQUE4bUIsRUFBQTltQixFQUFBZ2hCLE9BQ0FzSCxFQUFBdG9CLEdBQ0ssR0FBQUEsRUFBQW1ELGFBQUE0a0IsR0FBQWhvQixFQUFBTSxJQUFBLEtBSUwsT0FIQUwsRUFBQVksTUFBQThtQixFQUFBLEVBQUExbkIsRUFBQVksTUFBQSxFQUNBNmpCLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxTQUNBNWxCLEVBQUFxRCxXQUNBa2xCLEVBQUF0b0IsR0FDSyxJQUFBcW9CLElBQUFyb0IsRUFBQXVvQixRQUFBYixHQUFBMW5CLEVBQUFtRCxhQUFBNGtCLElBQUF6bkIsRUFBQVAsRUFBQU8sTUFBQThsQixJQUFBLENBQ0wsSUFBQW9DLEVBQUFsb0IsRUFBQSxhQWNBLE9BWkFOLEVBQUFtRCxZQUFBOGtCLEVBQUFsb0IsRUFBQWtDLFVBQUFsSCxPQUNBaUYsRUFBQTBhLE1BQUEsRUFDQTFhLEVBQUFZLE1BQUEsRUFHQVosRUFBQWdvQixVQUFBdnVCLEtBQUF1RyxFQUFBbUQsYUFFQXNoQixFQUFBSSxXQUFBOWtCLEVBQUFPLE1BQUErbEIsR0FBQSxLQUNBcm1CLEVBQUF5b0IsVUFBQSxHQUVBem9CLEVBQUE4bUIsRUFBQTltQixFQUFBZ2hCLE9BQ0F5RCxFQUFBRSxzQkFBQTNrQixFQUFBMmxCLFlBQUEsZUFBQTZDLElBQ0FGLEVBQUF0b0IsR0FDSyxPQUFBMG5CLEdBQUExbkIsRUFBQW1ELGFBQUE0a0IsSUFBQXpuQixFQUFBUCxFQUFBTyxNQUFBb21CLEdBQUEsS0FDTDFtQixFQUFBWSxNQUFBLEVBQ0FaLEVBQUEwb0IsWUFBQSxJQUFBOVcsT0FBQXRSLEVBQUEsV0FFQU4sRUFBQXNULFVBQUFtUixFQUFBTyw2QkFwTkEsU0FBQXZzQixHQUNBLEdBQUEyQyxFQUFBdXRCLGVBQUEsQ0FDQSxJQUFBQyxFQUFBeHRCLEVBQUF1dEIsZUFBQWx3QixHQUNBbXdCLElBQUFud0IsRUFBQW13QixFQUFBQyxNQUFBRCxFQUFBRSxNQUFBLElBRUEsSUFBQXhaLEVBQUFsVSxFQUFBa1gsUUFBQWtTLEVBQUEvckIsR0FDQSxjQUFBNlcsRUFBQTdXLEtBQUEsS0FBQTZXLEVBOE1BZ0QsQ0FBQWhTLEVBQUEsSUFDQU4sRUFBQXNULFlBQUF0VCxFQUFBcVQsV0FBQWpZLEVBQUEySCxXQUFBL0MsRUFBQXNULFlBQ0F0VCxFQUFBOG1CLEVBQUE5bUIsRUFBQTJiLE1BQUE3SCxFQUNBMlEsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLGNBQ0EzbEIsRUFBQW9sQixNQUFBLEVBQ0FrRCxFQUFBdG9CLElBS0FBLEVBQUF1b0IsVUFFQUosR0FBQUwsR0FBQTluQixFQUFBWSxRQUFBLElBQUFaLEVBQUEwYSxNQUNBMWEsRUFBQW9sQixNQUFBaUQsR0FBQTFCLEVBQUExbEIsS0FBQWxCLEVBQUFnWixXQUNBelksRUFBQVAsRUFBQWdwQixVQUFBLE1BQUF6b0IsVUFBQWttQixLQUdBeG1CLEVBQUF1b0IsUUFJQXZvQixFQUFBekIsT0FBQXlCLEVBQUF1b0IsT0FFQXZvQixFQUFBdW9CLE9BQUEsRUFDQXhvQixFQUFBa1ksWUFDQXdNLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxZQVBBM2xCLEVBQUF6QixPQUFBLEtBQUErQixFQUFBLEdBQUErWSxPQUFBLE9BQ0FyWixFQUFBdW9CLE9BQUF2b0IsRUFBQXpCLFFBUUF5QixFQUFBeW5CLFNBQUFscEIsUUFBQSxFQUNBeUIsRUFBQThtQixFQUFBOW1CLEVBQUFnaEIsT0FDQXNILEVBQUF0b0IsSUFDS3FvQixHQUNMdG9CLEVBQUFrWSxZQUNBalksRUFBQWxFLElBQUEsRUFDQWtFLEVBQUF5bkIsU0FBQTNyQixJQUFBLEVBQ0FxcEIsRUFBQXJwQixJQUNLLE1BQUFpRSxFQUFBZ1ksT0FDTDhPLEVBQUE5bUIsRUFBQUMsRUFBQWdwQixHQUdBbkMsRUFBQTltQixFQUFBQyxJQUFBZ2hCLFFBR0EsU0FBQW1HLEVBQUFwbkIsRUFBQUMsR0FDQSxJQUFBc0IsRUFBQTFCLEVBQUFxRCxNQUFBbEQsRUFBQUMsRUFBQTZTLFdBQ0EsSUFBQTZSLEVBQUEsQ0FDQSxJQUFBdUUsRUFBQTd0QixFQUFBNFksVUFBQXBVLEVBQUFJLEVBQUE2UyxZQUNBLE9BQUFvVyxFQUFBM1osS0FBQTdXLE1BQUEsT0FBQXd3QixFQUFBanBCLE1BQUFnQixXQUNBaW9CLEVBQUFqcEIsTUFBQXlCLFNBQUF3bkIsRUFBQWpwQixNQUFBRSxTQUFBNEMsVUFDQTlDLEVBQUFrcEIsV0FBQW5wQixFQUFBa0MsVUFBQW9LLFFBQUEsV0FDQXJNLEVBQUE4bUIsRUFBQU0sRUFDQXBuQixFQUFBMmIsTUFBQTBMLEVBQ0FybkIsRUFBQTZTLFVBQUEsTUFHQSxPQUFBdlIsRUFHQSxTQUFBd1MsRUFBQS9ULEVBQUFDLEdBQ0EsSUFLQW1wQixFQUxBQyxFQUFBcHBCLEVBQUFnb0IsVUFBQWhvQixFQUFBZ29CLFVBQUFqdEIsT0FBQSxNQUNBc3VCLEVBQUFycEIsRUFBQW1ELFlBQUFpbUIsRUFDQUUsRUFBQUYsRUFBQSxFQUNBLE9BQUFwcEIsRUFBQTBvQixhQUFBMW9CLEVBQUFtRCxhQUFBbW1CLElBQUFELEdBQUF0cEIsRUFBQU8sTUFBQU4sRUFBQTBvQixlQUNBakUsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLGNBRUEwRCxJQUFBRixFQUFBYixFQUFBdG9CLElBQ0FBLEVBQUFzVCxVQUFBdFQsRUFBQXFULFdBQUEsS0FDQXJULEVBQUEyYixNQUFBMEwsRUFDQXJuQixFQUFBOG1CLEVBQUFNLEVBQ0FwbkIsRUFBQTBvQixZQUFBLEtBQ0Exb0IsRUFBQW9sQixLQUFBLEVBQ0FwbEIsRUFBQXluQixTQUFBVyxlQUFBLEVBQ0FpQixFQUFBdEMsRUFBQWhuQixFQUFBQyxJQUFBMmIsT0FDQXdOLEdBQ0tucEIsRUFBQXNULFVBQ0x0VCxFQUFBc1QsVUFBQXJRLE1BQUFsRCxFQUFBQyxFQUFBcVQsYUFFQXRULEVBQUFrWSxZQUNBa04sRUFBQUMsTUFLQSxTQUFBa0QsRUFBQXRvQixHQUNBLElBQUF1cEIsS0FFQSxHQUFBdnBCLEVBQUEybEIsV0FBQSxDQUNBNEQsRUFBQTl2QixLQUFBMHJCLEVBQUFRLFlBRUEsaUJBQUEzbEIsRUFBQTJsQixhQUFBM2xCLEVBQUEybEIsWUFBQTNsQixFQUFBMmxCLGFBRUEsUUFBQS9aLEVBQUEsRUFBcUJBLEVBQUE1TCxFQUFBMmxCLFdBQUE1cUIsT0FBNkI2USxJQUNsRDJkLEVBQUE5dkIsS0FBQTByQixFQUFBUSxXQUFBLElBQUEzbEIsRUFBQTJsQixXQUFBL1osSUFFQSxXQUFBNUwsRUFBQTJsQixXQUFBL1osSUFDQTJkLEVBQUE5dkIsS0FBQTByQixFQUFBUSxXQUFBLElBQUEzbEIsRUFBQTJsQixXQUFBL1osR0FBQSxJQUFBNUwsRUFBQXpCLFFBS0EsVUFBQXlCLEVBQUEybEIsV0FBQS9aLE1BQ0E2WSxFQUFBRyxvQkFBQUgsRUFBQUcsb0JBQUE1a0IsRUFBQVksTUFDQTJvQixFQUFBOXZCLEtBQUEwckIsRUFBQVEsV0FBQSxJQUFBM2xCLEVBQUEybEIsV0FBQS9aLEdBQUEsSUFBQTVMLEVBQUFZLE9BRUEyb0IsRUFBQTl2QixLQUFBLFVBTUEsR0FBQXVHLEVBQUF3cEIsU0FFQSxPQURBRCxFQUFBOXZCLEtBQUEsUUFDQTh2QixFQUFBeHVCLE9BQUF3dUIsRUFBQS9ZLEtBQUEsVUFFQSxHQUFBeFEsRUFBQXlwQixXQUVBLE9BREFGLEVBQUE5dkIsS0FBQSxZQUNBOHZCLEVBQUF4dUIsT0FBQXd1QixFQUFBL1ksS0FBQSxVQThCQSxHQTNCQXhRLEVBQUErbEIsU0FDQXdELEVBQUE5dkIsS0FBQTByQixFQUFBWSxTQUFBLFFBRUEvbEIsRUFBQWltQixRQUF5QnNELEVBQUE5dkIsS0FBQTByQixFQUFBYyxRQUN6QmptQixFQUFBZ21CLElBQXFCdUQsRUFBQTl2QixLQUFBMHJCLEVBQUFhLElBQ3JCaG1CLEVBQUE4a0IsZUFBZ0N5RSxFQUFBOXZCLEtBQUEwckIsRUFBQUwsZUFDaEM5a0IsRUFBQStrQixPQUF3QndFLEVBQUE5dkIsS0FBQTByQixFQUFBSixPQUN4Qi9rQixFQUFBOGxCLFVBQTJCeUQsRUFBQTl2QixLQUFBMHJCLEVBQUFXLFVBQzNCOWxCLEVBQUFvbEIsTUFBdUJtRSxFQUFBOXZCLEtBQUEwckIsRUFBQUMsTUFDdkJwbEIsRUFBQXdsQixPQUF3QitELEVBQUE5dkIsS0FBQTByQixFQUFBSyxPQUN4QnhsQixFQUFBeWxCLGNBQStCOEQsRUFBQTl2QixLQUFBMHJCLEVBQUFNLGFBQUEsUUFDL0J6bEIsRUFBQTBsQixhQUE4QjZELEVBQUE5dkIsS0FBQTByQixFQUFBTyxjQUc5QjFsQixFQUFBekIsUUFBdUJnckIsRUFBQTl2QixLQUFBMHJCLEVBQUE1bUIsT0FBQTRtQixFQUFBNW1CLE9BQUEsSUFBQXlCLEVBQUF6QixRQUV2QnlCLEVBQUFZLFFBQ0Eyb0IsRUFBQTl2QixLQUFBMHJCLEVBQUF2a0IsUUFHQTZqQixFQUFBRyxvQkFBQUgsRUFBQUcsb0JBQUE1a0IsRUFBQVksTUFDQTJvQixFQUFBOXZCLEtBQUEwckIsRUFBQXZrQixNQUFBLElBQUFaLEVBQUFZLE9BRUEyb0IsRUFBQTl2QixLQUFBMHJCLEVBQUF2a0IsTUFBQSxJQUFBNmpCLEVBQUFHLHNCQUlBLElBQUE1a0IsRUFBQTBhLEtBQUEsQ0FDQSxJQUFBZ1AsR0FBQTFwQixFQUFBZ29CLFVBQUFqdEIsT0FBQSxLQUNBMnVCLEVBRU8sSUFBQUEsRUFDUEgsRUFBQTl2QixLQUFBMHJCLEVBQUFHLE9BRUFpRSxFQUFBOXZCLEtBQUEwckIsRUFBQUksT0FKQWdFLEVBQUE5dkIsS0FBQTByQixFQUFBRSxPQWNBLE9BTkFybEIsRUFBQXVuQixxQkFDQWdDLEVBQUE5dkIsS0FBQSwyQkFDS3VHLEVBQUFzbkIsZUFDTGlDLEVBQUE5dkIsS0FBQSxtQkFBQXVHLEVBQUFzbkIsY0FBQSxZQUdBaUMsRUFBQXh1QixPQUFBd3VCLEVBQUEvWSxLQUFBLFVBR0EsU0FBQW1aLEVBQUE1cEIsRUFBQUMsR0FDQSxHQUFBRCxFQUFBTyxNQUFBbW1CLEdBQUEsR0FDQSxPQUFBNkIsRUFBQXRvQixHQUtBLFNBQUFvbkIsRUFBQXJuQixFQUFBQyxHQUNBLElBQUFzQixFQUFBdEIsRUFBQTJFLEtBQUE1RSxFQUFBQyxHQUNBLFlBQUFzQixFQUNBLE9BQUFBLEVBRUEsR0FBQXRCLEVBQUEwYSxLQUVBLE9BREExYSxFQUFBMGEsS0FBQSxLQUNBNE4sRUFBQXRvQixHQUdBLEdBQUFBLEVBQUF5b0IsU0FNQSxNQUxBLE1BQUExb0IsRUFBQU8sTUFBQStsQixHQUFBLE1BQ0FybUIsRUFBQXdwQixVQUFBLEVBQ0F4cEIsRUFBQXlwQixZQUFBLEVBQ0FoRixFQUFBRSxzQkFBQTNrQixFQUFBMmxCLFdBQUEsUUFDQTNsQixFQUFBeW9CLFVBQUEsRUFDQUgsRUFBQXRvQixHQU1BLEdBSEFBLEVBQUF3cEIsVUFBQSxFQUNBeHBCLEVBQUF5cEIsWUFBQSxFQUVBenBCLEVBQUF6QixRQUFBd0IsRUFBQU8sTUFBQSxXQUVBLE9BREFta0IsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLFVBQ0EyQyxFQUFBdG9CLEdBR0EsSUFBQUcsRUFBQUosRUFBQUssT0FHQSxHQUFBSixFQUFBaW5CLFVBQUEsQ0FDQWpuQixFQUFBaW5CLFdBQUEsRUFDQSxJQUFBMkMsRUFBQXpwQixFQUNBLE1BQUFBLElBQ0F5cEIsRUFBQSxLQUdBLElBQUFDLEVBQUEsY0FEQUQsS0FBQSxJQUFBaFosUUFBQSx5QkFBdUQsU0FDdkQseUJBQUFnWixFQUNBLEdBQUE3cEIsRUFBQU8sTUFBQSxJQUFBc1IsT0FBQWlZLElBQUEsR0FDQSxPQUFBMUUsRUFBQVksU0FLQSxTQUFBNWxCLEVBQUEsQ0FDQSxJQUFBMnBCLEVBQUE5cEIsRUFBQTJsQixXQUNBbEIsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLFFBQ0E1bEIsRUFBQVMsU0FBQSxLQUNBLElBQUF1cEIsRUFBQWhxQixFQUFBa0MsVUFBQWxILE9BQ0EsTUFBQWlGLEVBQUFvbEIsTUFBQXBsQixFQUFBWSxPQUFBLEdBQUFtcEIsRUFHTyxJQUFBQSxHQUFBL3BCLEVBQUFvbEIsS0FBQSxDQUNQLElBQUE5VSxFQUFBZ1ksRUFBQXRvQixHQUVBLE9BREFBLEVBQUFvbEIsS0FBQSxFQUNBOVUsRUFHQSxPQURBdFEsRUFBQTJsQixXQUFBbUUsRUFDQXhCLEVBQUF0b0IsR0FQQSxPQURBQSxFQUFBb2xCLEtBQUEyRSxFQUNBekIsRUFBQXRvQixHQVNLLEdBQUFBLEVBQUFvbEIsS0FDTCxPQUFBa0QsRUFBQXRvQixHQUdBLFVBQUFHLElBQ0FKLEVBQUFLLE9BQ0Fxa0IsRUFBQUUscUJBQUEsQ0FDQSxJQUFBN3FCLEVBQUF3dUIsRUFBQXRvQixHQUNBZ3FCLEVBQUE3RSxFQUFBUSxXQUFBLFVBQ0EsT0FBQTdyQixJQUFBLElBQUFrd0IsSUFJQSxTQUFBN3BCLEdBQUFKLEVBQUFPLE1BQUEsNEJBSUEsT0FIQU4sRUFBQTBsQixhQUFBLEVBQ0ExbEIsRUFBQXdsQixPQUFBLEVBQ0FmLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxTQUNBMkMsRUFBQXRvQixHQUdBLFNBQUFHLEdBQUFILEVBQUEwbEIsYUFBQTNsQixFQUFBTyxNQUFBLGtDQUlBLE9BSEFOLEVBQUEwbEIsYUFBQSxFQUNBMWxCLEVBQUF5bEIsY0FBQSxFQUNBaEIsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLFNBQ0EyQyxFQUFBdG9CLEdBR0EsU0FBQUcsR0FBQUgsRUFBQXlsQixhQUFBLENBQ0FoQixFQUFBRSxzQkFBQTNrQixFQUFBMmxCLFdBQUEsU0FDQSxJQUFBN3JCLEVBQUF3dUIsRUFBQXRvQixHQUlBLE9BSEFBLEVBQUF5bEIsY0FBQSxFQUNBemxCLEVBQUF3bEIsT0FBQSxFQUNBeGxCLEVBQUFnaEIsT0FBQWhoQixFQUFBOG1CLEVBQUFmLEVBQ0Fqc0IsRUFHQSxTQUFBcUcsSUFBQUgsRUFBQXdsQixNQUdBLE9BRkF4bEIsRUFBQThsQixVQUFBLEVBQ0FyQixFQUFBRSxzQkFBQTNrQixFQUFBMmxCLFdBQUEsUUFDQTJDLEVBQUF0b0IsR0FHQSxTQUFBRyxHQUFBSCxFQUFBOGxCLFNBQUEsQ0FDQXJCLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxRQUNBLElBQUE3ckIsRUFBQXd1QixFQUFBdG9CLEdBR0EsT0FGQUEsRUFBQThsQixVQUFBLEVBQ0E5bEIsRUFBQWdoQixPQUFBaGhCLEVBQUE4bUIsRUFBQS9tQixFQUFBTyxNQUFBLHdCQUFBeWxCLEVBQUFxQixFQUNBdHRCLEVBR0EsU0FBQXFHLEdBQUFKLEVBQUFPLE1BQUEsMkNBU0EsT0FSQU4sRUFBQThtQixFQUFBOW1CLEVBQUFnaEIsT0FBQTRFLEVBQ0FuQixFQUFBRSxzQkFBQTNrQixFQUFBMmxCLFdBQUEsU0FDQTdyQixFQUFBd3VCLEVBQUF0b0IsSUFFQWxHLEdBQUEsSUFFQUEsRUFBQSxHQUVBQSxFQUFBcXJCLEVBQUFTLFdBR0EsU0FBQXpsQixHQUFBSixFQUFBTyxNQUFBLGlDQVNBLE9BUkFOLEVBQUE4bUIsRUFBQTltQixFQUFBZ2hCLE9BQUE0RSxFQUNBbkIsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLFNBQ0E3ckIsRUFBQXd1QixFQUFBdG9CLElBRUFsRyxHQUFBLElBRUFBLEVBQUEsR0FFQUEsRUFBQXFyQixFQUFBVSxVQUdBLEdBQUFwQixFQUFBUSxLQUFBLE1BQUE5a0IsR0FBQUosRUFBQU8sTUFBQSx1RUFDQSxJQUFBOGQsRUFBQXJlLEVBQUFnWixPQUFBMU0sUUFBQSxJQUFBdE0sRUFBQXFaLEtBQ0EsT0FBQWdGLEVBQUEsQ0FDQSxJQUFBNkwsRUFBQWxxQixFQUFBZ1osT0FBQW1SLFVBQUFucUIsRUFBQWlaLE1BQUFvRixHQUNBLHVDQUFpRG5kLEtBQUFncEIsS0FBQWpxQixFQUFBa3BCLFdBQUEsR0FJakQsT0FGQW5wQixFQUFBNFQsT0FBQSxHQUNBM1QsRUFBQTZTLFVBQUF6WCxFQUFBMkgsV0FBQW5ELEdBQ0FtbkIsRUFBQWhuQixFQUFBQyxFQUFBbW5CLEdBR0EsR0FBQTFDLEVBQUFRLEtBQUEsTUFBQTlrQixHQUFBSixFQUFBTyxNQUFBLFlBRUEsT0FEQU4sRUFBQWtwQixXQUFBLEVBQ0EsTUFDSyxTQUFBL29CLEdBQUEsTUFBQUEsRUFBQSxDQUVMLElBREEsSUFBQWdxQixFQUFBLEVBQUFDLEVBQUEsR0FBQXJxQixFQUFBcVosSUFBQSxJQUFBclosRUFBQWdaLE9BQUFNLE9BQUF0WixFQUFBcVosSUFBQSxHQUNBK1EsRUFBQSxHQUFBcHFCLEVBQUFNLElBQUFGLElBQUFncUIsSUFDQSxJQUFBRSxFQUFBdHFCLEVBQUFnWSxRQUFBLElBRUF1UyxHQUFBLEtBQUFycEIsS0FBQW9wQixNQUFBekQsRUFBQTNsQixLQUFBb3BCLElBQUEsS0FBQXBwQixLQUFBbXBCLElBQUF4RCxFQUFBM2xCLEtBQUFtcEIsSUFDQUcsR0FBQSxLQUFBdHBCLEtBQUFtcEIsTUFBQXhELEVBQUEzbEIsS0FBQW1wQixJQUFBLEtBQUFucEIsS0FBQW9wQixJQUFBekQsRUFBQTNsQixLQUFBb3BCLElBQ0FHLEVBQUEsS0FBQUMsRUFBQSxLQWFBLEdBWkFOLEVBQUEsSUFDQW5xQixFQUFBZ21CLEtBQUFzRSxHQUFBLE1BQUFucUIsR0FBQW9xQixJQUFBM0QsRUFBQTNsQixLQUFBbXBCLEdBRUFwcUIsRUFBQWdtQixJQUFBN2xCLElBQUFvcUIsR0FBQSxNQUFBcHFCLEdBQUFtcUIsSUFBQTFELEVBQUEzbEIsS0FBQW9wQixLQUNBRyxHQUFBLEdBRkFBLEdBQUEsR0FJQUwsRUFBQSxJQUNBbnFCLEVBQUFpbUIsU0FBQXFFLEdBQUEsTUFBQW5xQixHQUFBb3FCLElBQUEzRCxFQUFBM2xCLEtBQUFtcEIsR0FFQXBxQixFQUFBaW1CLFFBQUE5bEIsSUFBQW9xQixHQUFBLE1BQUFwcUIsR0FBQW1xQixJQUFBMUQsRUFBQTNsQixLQUFBb3BCLEtBQ0FJLEdBQUEsR0FGQUEsR0FBQSxHQUlBLE1BQUFBLEdBQUEsTUFBQUQsRUFBQSxDQUNBL0YsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLE1BQUE2RSxFQUFBLGVBQUFDLEVBQUEsbUJBQ0EsSUFBQUQsSUFBQXhxQixFQUFBZ21CLEdBQUE3bEIsSUFDQSxJQUFBc3FCLElBQUF6cUIsRUFBQWltQixPQUFBOWxCLEdBQ0FtUSxFQUFBZ1ksRUFBQXRvQixHQUdBLE9BRkEsSUFBQXdxQixJQUFBeHFCLEVBQUFnbUIsSUFBQSxJQUNBLElBQUF5RSxJQUFBenFCLEVBQUFpbUIsUUFBQSxHQUNBM1YsUUFFSyxTQUFBblEsSUFDTEosRUFBQU0sSUFBQSxNQUFBTixFQUFBTSxJQUFBLE9BQ0EsU0FBQU4sRUFBQWdZLE9BQ0EsT0FBQXVRLEVBQUF0b0IsR0FFQUQsRUFBQTRULE9BQUEsR0FLQSxHQUFBOFEsRUFBQUssY0FDQSxTQUFBM2tCLEdBQUFKLEVBQUFTLFNBQUFMLEdBQUEsQ0FDQSxHQUFBSCxFQUFBOGtCLGNBQUEsQ0FDQUwsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLGlCQUNBclYsRUFBQWdZLEVBQUF0b0IsR0FFQSxPQURBQSxFQUFBOGtCLGVBQUEsRUFDQXhVLEVBQ1MsR0FBQXZRLEVBQUFPLE1BQUEsYUFHVCxPQUZBTixFQUFBOGtCLGVBQUEsRUFDQUwsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLGlCQUNBMkMsRUFBQXRvQixRQUVPLFNBQUFHLEdBQ1BKLEVBQUFPLE1BQUEsV0FDQSxTQUFBUCxFQUFBZ1ksT0FDQSxPQUFBdVEsRUFBQXRvQixHQUVBRCxFQUFBNFQsT0FBQSxHQU1BLEdBQUE4USxFQUFBTSxPQUFBLE1BQUE1a0IsR0FBQUosRUFBQU8sTUFBQSxrQkFDQU4sRUFBQStrQixPQUFBLEVBQ0FOLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxTQUNBLElBQUErRSxFQUFBcEMsRUFBQXRvQixHQUVBLE9BREFBLEVBQUEra0IsT0FBQSxFQUNBMkYsRUFXQSxNQVJBLE1BQUF2cUIsSUFDQUosRUFBQU8sTUFBQSxVQUNBTixFQUFBc25CLGdCQUNPdG5CLEVBQUFzbkIsZ0JBQ1B0bkIsRUFBQXVuQixzQkFBQSxJQUlBZSxFQUFBdG9CLEdBR0EsU0FBQTRsQixFQUFBN2xCLEVBQUFDLEdBR0EsU0FGQUQsRUFBQUssT0FFQSxDQUNBSixFQUFBOG1CLEVBQUE5bUIsRUFBQWdoQixPQUFBb0csRUFDQTNDLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxRQUNBLElBQUE3ckIsRUFBQXd1QixFQUFBdG9CLEdBTUEsT0FMQWxHLEVBQ0FBLEdBQUEsSUFFQUEsRUFBQSxHQUVBQSxFQUFBcXJCLEVBQUFTLFdBS0EsT0FGQTdsQixFQUFBTyxNQUFBLGFBRUE2a0IsRUFBQVMsV0FHQSxTQUFBRyxFQUFBaG1CLEVBQUFDLEdBRUEsR0FBQUQsRUFBQXFELFdBQ0EsWUFFQSxJQWVBdW5CLEVBZkF4cUIsRUFBQUosRUFBQUssT0FDQSxZQUFBRCxHQUFBLE1BQUFBLEdBQ0FILEVBQUE4bUIsRUFBQTltQixFQUFBZ2hCLFFBYUEySixFQWJBLE1BQUF4cUIsRUFBQSxRQWNBLFNBQUFKLEVBQUFDLEdBQ0EsSUFBQUcsRUFBQUosRUFBQUssT0FFQSxHQUFBRCxJQUFBd3FCLEVBQUEsQ0FDQTNxQixFQUFBOG1CLEVBQUE5bUIsRUFBQWdoQixPQUFBb0csRUFDQTNDLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxlQUNBLElBQUFpRixFQUFBdEMsRUFBQXRvQixHQUVBLE9BREFBLEVBQUErbEIsVUFBQSxFQUNBNkUsRUFLQSxPQUZBN3FCLEVBQUFPLE1BQUF1cUIsRUFBQUYsSUFDQTNxQixFQUFBK2xCLFVBQUEsRUFDQXVDLEVBQUF0b0IsS0ExQkF5a0IsRUFBQUUsc0JBQUEza0IsRUFBQTJsQixXQUFBLGVBQ0EzbEIsRUFBQStsQixVQUFBLEVBQ0F1QyxFQUFBdG9CLElBRUEsUUFHQSxJQUFBNnFCLEdBQ0FDLElBQUEsb0RBQ0FDLElBQUEscURBcUJBLFNBQUEvQixFQUFBanBCLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQU8sTUFBQSwwQkFDQU4sRUFBQThtQixFQUFBa0UsRUFDQWpyQixFQUFBSyxPQUNBcWtCLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxRQUNBM2xCLEVBQUE4bEIsVUFBQSxFQUNBd0MsRUFBQXRvQixJQUVBNm1CLEVBQUE5bUIsRUFBQUMsRUFBQW9uQixHQUdBLFNBQUE0RCxFQUFBanJCLEVBQUFDLEdBQ0EsR0FBQUQsRUFBQU8sTUFBQSxZQUNBTixFQUFBOG1CLEVBQUE5bUIsRUFBQWdoQixPQUFBaUssRUFDQXhHLEVBQUFFLHNCQUFBM2tCLEVBQUEybEIsV0FBQSxRQUNBLElBQUF3RCxFQUFBYixFQUFBdG9CLEdBRUEsT0FEQUEsRUFBQThsQixVQUFBLEVBQ0FxRCxFQUtBLE9BRkFwcEIsRUFBQU8sTUFBQSxzQkFFQTZrQixFQUFBVyxTQUdBLFNBQUFtRixFQUFBbHJCLEVBQUFDLEdBRUEsT0FBQUQsRUFBQXFELFdBQ0EsTUFHQXJELEVBQUFPLE1BQUEsbUJBRUFpUSxJQUFBeFEsRUFBQWdZLE9BQ0EvWCxFQUFBaW5CLFdBQUEsRUFFQWxuQixFQUFBTyxNQUFBLDBGQUVBTixFQUFBOG1CLEVBQUE5bUIsRUFBQWdoQixPQUFBb0csRUFDQWpDLEVBQUFZLFNBQUEsUUFHQSxJQUFBelcsR0FDQXZNLFdBQUEsV0FDQSxPQUNBK2pCLEVBQUFPLEVBRUFHLFVBQW1Cem5CLE9BQUEsTUFDbkIwbkIsVUFBbUIxbkIsT0FBQSxNQUVuQjRiLE1BQUEwTCxFQUNBeFUsVUFBQSxLQUNBMVAsWUFBQSxFQUVBNmQsT0FBQW9HLEVBQ0F6aUIsS0FBQWdsQixFQUVBaEUsWUFBQSxFQUNBRyxVQUFBLEVBQ0FDLFVBQUEsRUFDQWtCLFdBQUEsRUFDQTdCLEtBQUEsRUFDQVksSUFBQSxFQUNBQyxRQUFBLEVBQ0ExbkIsT0FBQSxFQUNBZ3FCLE9BQUEsRUFDQXpzQixJQUFBLEVBQ0Eyc0IsVUFBQSxFQUNBL04sTUFBQSxFQUNBc04sYUFDQXBuQixNQUFBLEVBQ0EwbUIsY0FBQSxFQUNBQyxzQkFBQSxFQUNBekMsZUFBQSxFQUNBQyxPQUFBLEVBQ0EyRCxZQUFBLE9BSUE3VSxVQUFBLFNBQUFxWCxHQUNBLE9BQ0FwRSxFQUFBb0UsRUFBQXBFLEVBRUFVLFNBQUEwRCxFQUFBMUQsU0FDQUMsU0FBQXlELEVBQUF6RCxTQUVBOUwsTUFBQXVQLEVBQUF2UCxNQUNBOUksVUFBQXFZLEVBQUFyWSxXQUFBelgsRUFBQXlZLFVBQUFqVSxFQUFBc3JCLEVBQUFyWSxXQUNBMVAsWUFBQStuQixFQUFBL25CLFlBRUFtUSxVQUFBNFgsRUFBQTVYLFVBQ0FELFdBQUE2WCxFQUFBNVgsVUFBQWxZLEVBQUF5WSxVQUFBcVgsRUFBQTVYLFVBQUE0WCxFQUFBN1gsWUFBQSxLQUVBMk4sT0FBQWtLLEVBQUFsSyxPQUNBcmMsS0FBQXVtQixFQUFBdm1CLEtBQ0FnaEIsWUFBQSxFQUNBRyxTQUFBb0YsRUFBQXBGLFNBQ0FtQixVQUFBaUUsRUFBQWpFLFVBQ0FsQixTQUFBbUYsRUFBQW5GLFNBQ0FYLEtBQUE4RixFQUFBOUYsS0FDQVksR0FBQWtGLEVBQUFsRixHQUNBQyxPQUFBaUYsRUFBQWpGLE9BQ0FuQixjQUFBb0csRUFBQXBHLGNBQ0FDLE1BQUFtRyxFQUFBbkcsTUFDQXhtQixPQUFBMnNCLEVBQUEzc0IsT0FDQWdxQixPQUFBMkMsRUFBQTNDLE9BQ0F6c0IsR0FBQW92QixFQUFBcHZCLEdBQ0Eyc0IsU0FBQXlDLEVBQUF6QyxTQUNBL04sS0FBQXdRLEVBQUF4USxLQUNBc04sVUFBQWtELEVBQUFsRCxVQUFBOU8sTUFBQSxHQUNBdFksTUFBQXNxQixFQUFBdHFCLE1BQ0FzbUIsYUFBQWdFLEVBQUFoRSxhQUNBSSxjQUFBNEQsRUFBQTVELGNBQ0FDLHFCQUFBMkQsRUFBQTNELHFCQUNBMkIsVUFBQWdDLEVBQUFoQyxVQUNBUixZQUFBd0MsRUFBQXhDLGNBSUF6bEIsTUFBQSxTQUFBbEQsRUFBQUMsR0FLQSxHQUZBQSxFQUFBMmxCLFlBQUEsRUFFQTVsQixHQUFBQyxFQUFBeW5CLFNBQUExbkIsT0FBQSxDQUlBLEdBSEFDLEVBQUF6QixPQUFBLEVBQ0F5QixFQUFBbEUsSUFBQSxFQUVBaUUsRUFBQU8sTUFBQSxZQUVBLE9BREEwbUIsRUFBQWhuQixHQUNBLEtBYUEsR0FWQUEsRUFBQXduQixTQUFBeG5CLEVBQUF5bkIsU0FDQXpuQixFQUFBeW5CLFVBQTBCMW5CLFVBRzFCQyxFQUFBeW9CLFVBQUEsRUFHQXpvQixFQUFBc25CLGNBQUEsRUFDQXRuQixFQUFBdW5CLHNCQUFBLEdBRUF2bkIsRUFBQXFULGFBQ0FyVCxFQUFBOG1CLEVBQUE5bUIsRUFBQTJiLE1BQ0EzYixFQUFBOG1CLEdBQUFLLEdBQUEsQ0FDQSxJQUFBaGtCLEVBQUFwRCxFQUFBTyxNQUFBLGNBQUFzUSxRQUFBLE1BcnVCQSxRQXF1QkE3VixPQUdBLEdBRkFpRixFQUFBbUQsY0FDQW5ELEVBQUFrb0IsZ0JBQUEsS0FDQS9rQixFQUFBLGVBSUEsT0FBQW5ELEVBQUE4bUIsRUFBQS9tQixFQUFBQyxJQUdBZ1UsVUFBQSxTQUFBaFUsR0FDQSxPQUFBQSxFQUFBMmIsT0FBQXdMLEdBQTRDbm5CLFFBQUE2UyxVQUFBdkQsS0FBQTFQLEdBQzVDSSxFQUFBcVQsWUFBb0NyVCxRQUFBcVQsV0FBQS9ELEtBQUF0UCxFQUFBc1QsWUFDdEJ0VCxRQUFBc1AsU0FHZDdNLE9BQUEsU0FBQXpDLEVBQUFxRCxFQUFBMFEsR0FDQSxPQUFBL1QsRUFBQTJiLE9BQUF3TCxHQUFBdm5CLEVBQUE2QyxPQUFBN0MsRUFBQTZDLE9BQUF6QyxFQUFBNlMsVUFBQXhQLEVBQUEwUSxHQUNBL1QsRUFBQXFULFlBQUFyVCxFQUFBc1QsVUFBQTdRLE9BQUF6QyxFQUFBc1QsVUFBQTdRLE9BQUF6QyxFQUFBcVQsV0FBQWhRLEVBQUEwUSxHQUNBM1ksRUFBQW1JLE1BR0F5akIsWUFFQXNCLFVBRUEzSCxjQUFBLGlCQUNBRCxLQUFBLFlBRUEsT0FBQXBSLEdBQ0MsT0FFRGxVLEVBQUFnSixXQUFBLDRCQUVBaEosRUFBQWdKLFdBQUEsK0JBaDJCQUUsQ0FBQWxOLEVBQUEsR0FBQUEsRUFBQSxJQUFBQSxFQUFBLHdCQ0tDLFNBQUFnRSxHQUNELGFBRUEsU0FBQThtQixFQUFBeGYsRUFBQXJCLEVBQUF2SCxFQUFBK2YsRUFBQUQsRUFBQWxZLEdBQ0F0SixLQUFBc0ssV0FDQXRLLEtBQUFpSixTQUNBakosS0FBQTBCLE9BQ0ExQixLQUFBeWhCLE9BQ0F6aEIsS0FBQXdoQixRQUNBeGhCLEtBQUFzSixPQUVBLFNBQUF5Z0IsRUFBQW5pQixFQUFBdEUsRUFBQTVCLEVBQUErZixHQUNBLElBQUFwWCxFQUFBekMsRUFBQTBDLFNBR0EsT0FGQTFDLEVBQUF5QixTQUFBLGFBQUF6QixFQUFBeUIsUUFBQTNILE1BQUEsYUFBQUEsSUFDQTJJLEVBQUF6QyxFQUFBeUIsUUFBQWlCLFVBQ0ExQyxFQUFBeUIsUUFBQSxJQUFBeWdCLEVBQUF6ZixFQUFBL0csRUFBQTVCLEVBQUErZixFQUFBLEtBQUE3WixFQUFBeUIsU0FFQSxTQUFBRCxFQUFBeEIsR0FDQSxJQUFBc1EsRUFBQXRRLEVBQUF5QixRQUFBM0gsS0FHQSxNQUZBLEtBQUF3VyxHQUFBLEtBQUFBLEdBQUEsS0FBQUEsSUFDQXRRLEVBQUEwQyxTQUFBMUMsRUFBQXlCLFFBQUFpQixVQUNBMUMsRUFBQXlCLFFBQUF6QixFQUFBeUIsUUFBQUMsS0FHQSxTQUFBeXBCLEVBQUFwckIsRUFBQUMsRUFBQW9aLEdBQ0Esa0JBQUFwWixFQUFBb3JCLFdBQUEsUUFBQXByQixFQUFBb3JCLGNBQ0EsNkJBQUFucUIsS0FBQWxCLEVBQUFnWixPQUFBRyxNQUFBLEVBQUFFLFNBQ0FwWixFQUFBcXJCLGlCQUFBdHJCLEVBQUFzQixVQUFBdEIsRUFBQW9ELHFCQUFBLElBR0EsU0FBQW1vQixFQUFBN3BCLEdBQ0EsT0FBUyxDQUNULElBQUFBLEdBQUEsT0FBQUEsRUFBQTNILEtBQUEsU0FDQSxRQUFBMkgsRUFBQTNILE1BQTBCLGFBQUEySCxFQUFBQyxLQUFBbVksS0FBQSxTQUMxQnBZLElBQUFDLE1BZ05BLFNBQUE2cEIsRUFBQUMsR0FFQSxJQURBLElBQUFDLEtBQWdCRixFQUFBQyxFQUFBamlCLE1BQUEsS0FDaEJxQyxFQUFBLEVBQW1CQSxFQUFBMmYsRUFBQXh3QixTQUFrQjZRLEVBQUE2ZixFQUFBRixFQUFBM2YsS0FBQSxFQUNyQyxPQUFBNmYsRUFFQSxTQUFBbmpCLEVBQUFpakIsRUFBQWhULEdBQ0EseUJBQUFnVCxFQUNBQSxFQUFBaFQsR0FFQWdULEVBQUE5UyxxQkFBQUYsR0FyTkFuZCxFQUFBa0UsV0FBQSxpQkFBQS9GLEVBQUE4WSxHQUNBLElBb0JBcVosRUFBQUMsRUFwQkFqc0IsRUFBQW5HLEVBQUFtRyxXQUNBa3NCLEVBQUF2WixFQUFBdVoscUJBQUFsc0IsRUFDQW1zQixFQUFBeFosRUFBQXdaLGVBQ0FsWCxFQUFBdEMsRUFBQXNDLGFBQ0FtWCxFQUFBelosRUFBQXlaLFVBQ0FDLEVBQUExWixFQUFBMFosWUFDQUMsRUFBQTNaLEVBQUEyWixrQkFDQUMsRUFBQTVaLEVBQUE0WixnQkFDQUMsRUFBQTdaLEVBQUE2WixVQUNBQyxFQUFBOVosRUFBQThaLFVBQ0FDLEVBQUEvWixFQUFBK1osaUJBQ0FDLEdBQUEsSUFBQWhhLEVBQUFnYSxpQkFDQUMsR0FBQSxJQUFBamEsRUFBQWlhLGFBQ0FDLEVBQUFsYSxFQUFBa2EsbUJBQ0FDLEVBQUFuYSxFQUFBbWEsbUJBQUEscUJBQ0FDLEVBQUFwYSxFQUFBb2EsYUFBQSxTQUNBalQsRUFBQW5ILEVBQUFtSCxRQUFBLHlFQUNBaEMsRUFBQW5GLEVBQUFtRixnQkFBQSxtQkFDQWtWLEVBQUFyYSxFQUFBcWEsa0JBQUEscUJBSUEsU0FBQTdVLEVBQUE5WCxFQUFBQyxHQUNBLElBbURBWSxFQW5EQVQsRUFBQUosRUFBQUssT0FDQSxHQUFBK3JCLEVBQUFoc0IsR0FBQSxDQUNBLElBQUEwTCxFQUFBc2dCLEVBQUFoc0IsR0FBQUosRUFBQUMsR0FDQSxRQUFBNkwsRUFBQSxPQUFBQSxFQUVBLFFBQUExTCxHQUFBLEtBQUFBLEVBRUEsT0FEQUgsRUFBQUUsVUE2Q0FVLEVBN0NBVCxFQThDQSxTQUFBSixFQUFBQyxHQUVBLElBREEsSUFBQUksRUFBQTBYLEdBQUEsRUFBQXNHLEdBQUEsRUFDQSxPQUFBaGUsRUFBQUwsRUFBQUssU0FBQSxDQUNBLEdBQUFBLEdBQUFRLElBQUFrWCxFQUFBLENBQXdDc0csR0FBQSxFQUFXLE1BQ25EdEcsTUFBQSxNQUFBMVgsRUFJQSxPQUZBZ2UsSUFBQXRHLElBQUFzVSxLQUNBcHNCLEVBQUFFLFNBQUEsTUFDQSxXQXJEQUYsRUFBQUUsU0FBQUgsRUFBQUMsR0FFQSxHQUFBd3NCLEVBQUF2ckIsS0FBQWQsR0FFQSxPQURBdXJCLEVBQUF2ckIsRUFDQSxLQUVBLEdBQUFzc0IsRUFBQXhyQixLQUFBZCxHQUFBLENBRUEsR0FEQUosRUFBQTRULE9BQUEsR0FDQTVULEVBQUFPLE1BQUFrWixHQUFBLGVBQ0F6WixFQUFBSyxPQUVBLFFBQUFELEVBQUEsQ0FDQSxHQUFBSixFQUFBTSxJQUFBLEtBRUEsT0FEQUwsRUFBQUUsU0FBQThYLEVBQ0FBLEVBQUFqWSxFQUFBQyxHQUVBLEdBQUFELEVBQUFNLElBQUEsS0FFQSxPQURBTixFQUFBa1ksWUFDQSxVQUdBLEdBQUFULEVBQUF2VyxLQUFBZCxHQUFBLENBQ0EsTUFBQUosRUFBQU8sTUFBQSxnQkFBQVAsRUFBQU0sSUFBQW1YLEtBQ0EsaUJBR0EsR0FEQXpYLEVBQUFTLFNBQUFrc0IsR0FDQUgsRUFBQSxLQUFBeHNCLEVBQUFPLE1BQUFpc0IsSUFDQXhzQixFQUFBUyxTQUFBa3NCLEdBRUEsSUFBQWxaLEVBQUF6VCxFQUFBa0MsVUFDQSxPQUFBcUcsRUFBQXFNLEVBQUFuQixJQUNBbEwsRUFBQTBqQixFQUFBeFksS0FBQWtZLEVBQUEsZ0JBQ0FwakIsRUFBQTJqQixFQUFBelksS0FBQW1ZLEdBQUEsR0FDQSxXQUVBcmpCLEVBQUF3akIsRUFBQXRZLEdBQUEsT0FDQWxMLEVBQUF5akIsRUFBQXZZLElBQ0FsTCxFQUFBMGpCLEVBQUF4WSxLQUFBa1ksRUFBQSxnQkFDQSxXQUVBcGpCLEVBQUE0akIsRUFBQTFZLEdBQUEsT0FDQSxXQWdCQSxTQUFBd0UsRUFBQWpZLEVBQUFDLEdBRUEsSUFEQSxJQUFBRyxFQUFBdVksR0FBQSxFQUNBdlksRUFBQUosRUFBQUssUUFBQSxDQUNBLFFBQUFELEdBQUF1WSxFQUFBLENBQ0ExWSxFQUFBRSxTQUFBLEtBQ0EsTUFFQXdZLEVBQUEsS0FBQXZZLEVBRUEsZ0JBR0EsU0FBQXdzQixFQUFBNXNCLEVBQUFDLEdBQ0FxUyxFQUFBdWEsc0JBQUE3c0IsRUFBQW1CLE9BQUFvcUIsRUFBQXRyQixFQUFBeUIsV0FDQXpCLEVBQUFxckIsZ0JBQUFGLEVBQUFwckIsRUFBQUMsRUFBQUQsRUFBQXFaLE1BS0EsT0FDQXJXLFdBQUEsU0FBQWlkLEdBQ0EsT0FDQTlmLFNBQUEsS0FDQXVCLFFBQUEsSUFBQXlnQixHQUFBbEMsR0FBQSxHQUFBdGdCLEVBQUEsaUJBQ0FnRCxTQUFBLEVBQ0FGLGFBQUEsRUFDQTRvQixVQUFBLE9BSUFub0IsTUFBQSxTQUFBbEQsRUFBQUMsR0FDQSxJQUFBNnNCLEVBQUE3c0IsRUFBQXlCLFFBTUEsR0FMQTFCLEVBQUFtRCxRQUNBLE1BQUEycEIsRUFBQWpULFFBQUFpVCxFQUFBalQsT0FBQSxHQUNBNVosRUFBQTBDLFNBQUEzQyxFQUFBb0QsY0FDQW5ELEVBQUF3QyxhQUFBLEdBRUF6QyxFQUFBcUQsV0FBdUQsT0FBekJ1cEIsRUFBQTVzQixFQUFBQyxHQUF5QixLQUN2RDByQixFQUFBQyxFQUFBLEtBQ0EsSUFBQXJxQixHQUFBdEIsRUFBQUUsVUFBQTJYLEdBQUE5WCxFQUFBQyxHQUNBLGNBQUFzQixHQUFBLFFBQUFBLEVBQUEsT0FBQUEsRUFHQSxHQUZBLE1BQUF1ckIsRUFBQWpULFFBQUFpVCxFQUFBalQsT0FBQSxHQUVBLEtBQUE4UixHQUF1QixLQUFBQSxHQUFBLEtBQUFBLEdBQUEzckIsRUFBQU8sTUFBQSx1QkFDdkIsa0JBQUFOLEVBQUF5QixRQUFBM0gsTUFBQTBILEVBQUF4QixRQUNBLFFBQUEwckIsRUFBNEJ2SixFQUFBbmlCLEVBQUFELEVBQUFzQixTQUFBLFVBQzVCLFFBQUFxcUIsRUFBQXZKLEVBQUFuaUIsRUFBQUQsRUFBQXNCLFNBQUEsVUFDQSxRQUFBcXFCLEVBQUF2SixFQUFBbmlCLEVBQUFELEVBQUFzQixTQUFBLFVBQ0EsUUFBQXFxQixFQUE0QixDQUM1QixrQkFBQW1CLEVBQUEveUIsTUFBQSt5QixFQUFBcnJCLEVBQUF4QixHQUVBLElBREEsS0FBQTZzQixFQUFBL3lCLE9BQTBCK3lCLEVBQUFyckIsRUFBQXhCLElBQzFCLGFBQUE2c0IsRUFBQS95QixNQUFBK3lCLEVBQUFyckIsRUFBQXhCLFFBRUEwckIsR0FBQW1CLEVBQUEveUIsS0FBQTBILEVBQUF4QixHQUNBcXNCLEtBQ0EsS0FBQVEsRUFBQS95QixNQUFnQyxPQUFBK3lCLEVBQUEveUIsT0FBQSxLQUFBNHhCLEdBQ2hDLGFBQUFtQixFQUFBL3lCLE1BQUEsZ0JBQUE0eEIsSUFDQXZKLEVBQUFuaUIsRUFBQUQsRUFBQXNCLFNBQUEsWUFBQXRCLEVBQUFrQyxXQVNBLEdBTkEsWUFBQVgsSUFDQSxPQUFBdEIsRUFBQW9yQixXQUNBL1ksRUFBQXVhLHNCQUFBekIsRUFBQXByQixFQUFBQyxFQUFBRCxFQUFBaVosUUFDQXNTLEVBQUF0ckIsRUFBQXlCLFVBQUExQixFQUFBTyxNQUFBLGdCQUNBZ0IsRUFBQSxPQUVBNnFCLEVBQUFscEIsTUFBQSxDQUNBLElBQUE0SSxFQUFBc2dCLEVBQUFscEIsTUFBQWxELEVBQUFDLEVBQUFzQixRQUNBaVAsSUFBQTFFLElBQUF2SyxFQUFBdUssR0FRQSxNQUxBLE9BQUF2SyxJQUFBLElBQUErUSxFQUFBeWEsWUFBQXhyQixFQUFBLFlBRUF0QixFQUFBd0MsYUFBQSxFQUNBeEMsRUFBQW9yQixVQUFBTyxFQUFBLE1BQUFycUIsR0FBQW9xQixFQUNBaUIsRUFBQTVzQixFQUFBQyxHQUNBc0IsR0FHQW1CLE9BQUEsU0FBQXpDLEVBQUFxRCxHQUNBLEdBQUFyRCxFQUFBRSxVQUFBMlgsR0FBQSxNQUFBN1gsRUFBQUUsVUFBQUYsRUFBQXFyQixnQkFBQSxPQUFBandCLEVBQUFtSSxLQUNBLElBQUFzcEIsRUFBQTdzQixFQUFBeUIsUUFBQTBlLEVBQUE5YyxLQUFBZ1csT0FBQSxHQUVBLEdBREEsYUFBQXdULEVBQUEveUIsTUFBQSxLQUFBcW1CLElBQW9EME0sSUFBQW5yQixNQUNwRDJRLEVBQUEwYSxxQkFDQSxrQkFBQUYsRUFBQS95QixNQUFBdVksRUFBQTBhLHFCQUFBOXJCLEtBQUE0ckIsRUFBQWhULE9BQ0FnVCxJQUFBbnJCLEtBQ0EsR0FBQXlxQixFQUFBMXBCLE9BQUEsQ0FDQSxJQUFBdXFCLEVBQUFiLEVBQUExcEIsT0FBQXpDLEVBQUE2c0IsRUFBQXhwQixHQUNBLG9CQUFBMnBCLEVBQUEsT0FBQUEsRUFFQSxJQUFBM00sRUFBQUYsR0FBQTBNLEVBQUEveUIsS0FDQWl0QixFQUFBOEYsRUFBQW5yQixNQUFBLFVBQUFtckIsRUFBQW5yQixLQUFBbVksS0FDQSxHQUFBeEgsRUFBQTRhLG1CQUFBLE9BQStDaHNCLEtBQUFrZixHQUFBLENBQy9DLFlBQUEwTSxFQUFBL3lCLE1BQUEsS0FBQSt5QixFQUFBL3lCLE1BQWtEK3lCLElBQUFuckIsS0FDbEQsT0FBQW1yQixFQUFBbnFCLFNBRUEsbUJBQUFtcUIsRUFBQS95QixLQUNBK3lCLEVBQUFucUIsVUFBQSxLQUFBeWQsRUFBOEMsRUFBQXlMLElBQzlDaUIsRUFBQWpULE9BQUFpUyxHQUFBLEtBQUFnQixFQUFBL3lCLEtBRUEsS0FBQSt5QixFQUFBL3lCLE1BQUF1bUIsRUFHQXdNLEVBQUFucUIsVUFBQTJkLEVBQUEsRUFBQTNnQixJQUNBMmdCLElBQUEwRyxHQUFBLHNCQUFBOWxCLEtBQUFvQyxHQUFBLEVBQUEzRCxHQUhBbXRCLEVBQUFucUIsU0FBQWtwQixFQUZBaUIsRUFBQXhyQixRQUFBZ2YsRUFBQSxNQVFBdmMsY0FBQXdvQixFQUFBLHVDQUFxRSxZQUNyRXZvQixrQkFBQSxLQUNBQyxnQkFBQSxLQUNBd2MscUJBQUEsTUFDQUMsWUFBQSxLQUNBQyxLQUFBLFdBZ0JBLElBQUF3TSxFQUFBLGtKQUVBQyxFQUFBLHlFQUVBLFNBQUFDLEVBQUFydEIsRUFBQUMsR0FDQSxJQUFBQSxFQUFBd0MsWUFBQSxTQUNBLFFBQUFyQyxFQUFBQyxFQUFBLEtBQTZCRCxFQUFBSixFQUFBZ1ksUUFBb0IsQ0FDakQsU0FBQTVYLEdBQUFKLEVBQUFPLE1BQUEsUUFDQUYsRUFBQWd0QixFQUNBLE1BQ08sUUFBQWp0QixHQUFBSixFQUFBTyxNQUFBLGdCQUNQLE1BRUFQLEVBQUFLLE9BR0EsT0FEQUosRUFBQUUsU0FBQUUsRUFDQSxPQUdBLFNBQUFpdEIsRUFBQS9xQixFQUFBdEMsR0FDQSxjQUFBQSxFQUFBb3JCLFdBQUEsT0FJQSxTQUFBa0MsRUFBQXZ0QixHQUVBLE9BREFBLEVBQUFTLFNBQUEsV0FDQSxTQUdBLFNBQUErc0IsRUFBQXh0QixFQUFBQyxHQUdBLEdBRkFELEVBQUE0VCxPQUFBLEdBRUE1VCxFQUFBTyxNQUFBLHFCQUNBLElBQUFBLEVBQUFQLEVBQUFPLE1BQUEsd0JBQ0EsUUFBQUEsSUFHQU4sRUFBQXd0QixvQkFBQWx0QixFQUFBLEdBQ0FOLEVBQUFFLFNBQUF1dEIsRUFDQUEsRUFBQTF0QixFQUFBQyxJQUdBLE9BQUFELEVBQUFPLE1BQUEsZ0JBQ0FQLEVBQUFPLE1BQUEsWUFDQSxVQUtBUCxFQUFBSyxRQUNBLEdBU0EsU0FBQXN0QixFQUFBM3RCLEVBQUFDLEdBRUEsSUFEQSxJQUFBSSxFQUNBLE9BQUFBLEVBQUFMLEVBQUFLLFNBQ0EsUUFBQUEsSUFBQUwsRUFBQU0sSUFBQSxNQUNBTCxFQUFBRSxTQUFBLEtBQ0EsTUFHQSxlQUtBLFNBQUF1dEIsRUFBQTF0QixFQUFBQyxHQUVBLElBQUEydEIsRUFBQTN0QixFQUFBd3RCLG9CQUFBNWMsUUFBQSxtQkFNQSxPQUxBN1EsRUFBQU8sTUFBQSxJQUFBc1IsT0FBQSxTQUFBK2IsRUFBQSxNQUVBM3RCLEVBQUFFLFNBQUEsS0FFQUgsRUFBQWtZLFlBQ0EsU0FHQSxTQUFBMlYsRUFBQTlFLEVBQUF4WixHQUNBLGlCQUFBd1osV0FDQSxJQUFBeUMsS0FDQSxTQUFBc0MsRUFBQXBDLEdBQ0EsR0FBQUEsRUFBQSxRQUFBNXJCLEtBQUE0ckIsSUFBQTNwQixlQUFBakMsSUFDQTByQixFQUFBOXhCLEtBQUFvRyxHQUVBZ3VCLEVBQUF2ZSxFQUFBcUYsVUFDQWtaLEVBQUF2ZSxFQUFBd2MsT0FDQStCLEVBQUF2ZSxFQUFBeWMsU0FDQThCLEVBQUF2ZSxFQUFBNGMsT0FDQVgsRUFBQXh3QixTQUNBdVUsRUFBQXBMLFdBQUE0a0IsRUFBQSxHQUNBMXRCLEVBQUF5bEIsZUFBQSxZQUFBaUksRUFBQSxHQUFBeUMsSUFHQSxRQUFBM2YsRUFBQSxFQUFtQkEsRUFBQWtkLEVBQUEvdEIsU0FBa0I2USxFQUNyQ3hRLEVBQUFnSixXQUFBMGtCLEVBQUFsZCxHQUFBMEQsR0FtSEEsU0FBQXdlLEVBQUEvdEIsRUFBQUMsR0FFQSxJQURBLElBQUE4WCxHQUFBLEdBQ0EvWCxFQUFBbUIsT0FBQSxDQUNBLElBQUE0VyxHQUFBL1gsRUFBQU8sTUFBQSxRQUNBTixFQUFBRSxTQUFBLEtBQ0EsTUFFQTRYLEVBQUEsTUFBQS9YLEVBQUFLLFNBQUEwWCxFQUVBLGVBekhBOFYsR0FBQSx5Q0FDQW4xQixLQUFBLFFBQ0FrYyxTQUFBNFcsRUFBQTJCLEdBQ0FwQixNQUFBUCxFQUFBNEIsRUFBQSxpSkFHQW5CLGNBQUFULEVBQUEsMkNBQ0FVLFlBQUFWLEVBQUEsVUFDQXFCLHNCQUFBLEVBQ0FWLE1BQUFYLEVBQUEsbUJBQ0FZLE9BQVk5SCxJQUFBK0ksRUFBQVcsSUFBQVYsR0FDWlcsV0FBZ0J0TixNQUFBLHNCQUdoQmtOLEdBQUEsa0NBQ0FuMUIsS0FBQSxRQUNBa2MsU0FBQTRXLEVBQUEyQixFQUFBLG1UQUtBcEIsTUFBQVAsRUFBQTRCLEVBQUEsaUJBQ0FuQixjQUFBVCxFQUFBLDhEQUNBVSxZQUFBVixFQUFBLHFDQUNBcUIsc0JBQUEsRUFDQVYsTUFBQVgsRUFBQSxtQkFDQXdCLHFCQUFBLGFBQ0FMLGlCQUFBLHNCQUNBUCxPQUNBOUgsSUFBQStJLEVBQ0FXLElBQUFWLEVBQ0FZLEVBQUFWLEVBQ0FXLEVBQUFYLEVBQ0FZLEVBQUFaLEVBQ0FhLEVBQUFiLEVBQ0FjLEVBQUFmLEVBQ0FnQixFQUFBaEIsRUFDQWlCLEVBQUFqQixFQUNBa0IsRUFBQWxCLEVBQ0FtQixFQUFBbkIsRUFDQW9CLEVBQUFwQixFQUNBcUIsRUFBQXJCLEVBQ0FzQixFQUFBdEIsRUFDQXVCLEVBQUF2QixFQUNBd0IsRUFBQXhCLEVBQ0FycUIsTUFBQSxTQUFBbEQsRUFBQUMsRUFBQXNCLEdBQ0EsZUFBQUEsR0FBQSxLQUFBdkIsRUFBQWdZLFNBQ0EsS0FBQS9YLEVBQUFvckIsV0FBa0MsTUFBQXByQixFQUFBb3JCLFdBQ2xDLEtBQUFwckIsRUFBQW9yQixhQWxHQTdTLEVBbUdBeFksRUFBQWtDLFdBbEdBOHNCLEVBQUEsa0JBQUFuckIsS0FBQTJVLEtBQ0F3VyxFQUFBLElBQUFBLEVBQUEsSUFrR0EsWUFwR0EsSUFBQXhXLEVBQ0F3VyxJQXNHQXhDLG1CQUFBLEtBQ0F5QixXQUFnQnROLE1BQUEsc0JBR2hCa04sRUFBQSxlQUNBbjFCLEtBQUEsUUFDQWtjLFNBQUE0VyxFQUFBLG9UQUtBTyxNQUFBUCxFQUFBLGtLQUVBUyxjQUFBVCxFQUFBLHVEQUNBVSxZQUFBVixFQUFBLG1DQUNBcUIsc0JBQUEsRUFDQVYsTUFBQVgsRUFBQSxtQkFDQS9SLE9BQUEsaUZBQ0EyUyxPQUNBN0gsSUFBQSxTQUFBdmtCLEdBRUEsT0FBQUEsRUFBQU8sTUFBQSxrQkFFQVAsRUFBQVMsU0FBQSxXQUNBLFVBR0F3dEIsV0FBZ0J0TixNQUFBLHFCQUdoQmtOLEVBQUEsaUJBQ0FuMUIsS0FBQSxRQUNBa2MsU0FBQTRXLEVBQUEsdWhCQU9BTyxNQUFBUCxFQUFBLHNQQUlBUyxjQUFBVCxFQUFBLHNFQUNBVSxZQUFBVixFQUFBLHdDQUNBcUIsc0JBQUEsRUFDQVYsTUFBQVgsRUFBQSxtQkFDQVksT0FDQTdILElBQUEsU0FBQXZrQixFQUFBQyxHQUNBLE9BQUFELEVBQUFNLElBQUEsTUFDQUwsRUFBQUUsU0FBQXd0QixFQUNBQSxFQUFBM3RCLEVBQUFDLEtBRUFELEVBQUFTLFNBQUEsV0FDQSxZQXNDQW90QixFQUFBLGdCQUNBbjFCLEtBQUEsUUFDQWtjLFNBQUE0VyxFQUdBLHVXQVFBTyxNQUFBUCxFQUNBLG11QkFZQWEsa0JBQUEsRUFDQUosY0FBQVQsRUFBQSwwRUFDQVUsWUFBQVYsRUFBQSxvREFDQVcsTUFBQVgsRUFBQSxtQkFDQWMsa0JBQUEsRUFDQUMsY0FBQSxFQUNBOVUsZUFBQSxzQkFDQTJVLE9BQ0E3SCxJQUFBLFNBQUF2a0IsR0FFQSxPQURBQSxFQUFBUyxTQUFBLFdBQ0EsUUFFQXd1QixJQUFBLFNBQUFqdkIsRUFBQUMsR0FDQSxRQUFBRCxFQUFBTyxNQUFBLFFBQ0FOLEVBQUFFLFNBQUE0dEIsRUFDQTl0QixFQUFBRSxTQUFBSCxFQUFBQyxLQUVBaXZCLElBQUEsU0FBQWx2QixHQUVBLE9BREFBLEVBQUFTLFNBQUEsc0JBQ0EsUUFFQTB1QixJQUFBLFNBQUFudkIsRUFBQUMsR0FDQSxJQUFBaWEsRUFBQWphLEVBQUF5QixRQUNBLGFBQUF3WSxFQUFBbmdCLE9BQXlCbWdCLEVBQUFMLFFBQUE3WixFQUFBTSxJQUFBLFFBQ3pCTCxFQUFBeUIsUUFBQSxJQUFBeWdCLEVBQUFqSSxFQUFBdlgsU0FBQXVYLEVBQUE1WSxPQUFBNFksRUFBQW5nQixLQUFBbWdCLEVBQUFKLEtBQUEsS0FBQUksRUFBQXZZLE1BQ0EsYUFNQXlpQixJQUFBLFNBQUFwa0IsRUFBQUMsR0FDQSxRQUFBRCxFQUFBTSxJQUFBLE9BQ0FMLEVBQUFFLFNBaEZBLFNBQUFpdkIsRUFBQXp1QixHQUNBLGdCQUFBWCxFQUFBQyxHQUVBLElBREEsSUFBQUcsRUFDQUEsRUFBQUosRUFBQUssUUFBQSxDQUNBLFFBQUFELEdBQUFKLEVBQUFNLElBQUEsTUFDQSxNQUFBSyxFQUFBLENBQ0FWLEVBQUFFLFNBQUEsS0FDQSxNQUdBLE9BREFGLEVBQUFFLFNBQUFpdkIsRUFBQXp1QixFQUFBLEdBQ0FWLEVBQUFFLFNBQUFILEVBQUFDLEdBRVMsUUFBQUcsR0FBQUosRUFBQU0sSUFBQSxLQUVULE9BREFMLEVBQUFFLFNBQUFpdkIsRUFBQXp1QixFQUFBLEdBQ0FWLEVBQUFFLFNBQUFILEVBQUFDLEdBR0EsaUJBK0RBbXZCLENBQUEsR0FDQW52QixFQUFBRSxTQUFBSCxFQUFBQyxNQUdBZ3VCLFdBQWdCck4sZUFBZ0J5TyxRQUFBLFFBb0JoQ3hCLEVBQUEsaUJBQ0FuMUIsS0FBQSxRQUNBa2MsU0FBQTRXLEVBRUEsNGZBVUFPLE1BQUFQLEVBRUEsMmVBT0E4RCxjQUFBLEVBQ0FoRCxrQkFBQSxFQUNBRCxrQkFBQSxFQUNBNVMsT0FBQSxtRkFDQXdTLGNBQUFULEVBQUEsMkRBQ0FVLFlBQUFWLEVBQUEsc0NBQ0FXLE1BQUFYLEVBQUEsd0JBQ0FZLE9BQ0E3SCxJQUFBLFNBQUF2a0IsR0FFQSxPQURBQSxFQUFBUyxTQUFBLFdBQ0EsUUFFQXd1QixJQUFBLFNBQUFqdkIsRUFBQUMsR0FwREEsSUFBQXN2QixFQXNEQSxPQURBdHZCLEVBQUFFLFVBckRBb3ZCLEVBcURBdnZCLEVBQUFPLE1BQUEsTUFwREEsU0FBQVAsRUFBQUMsR0FFQSxJQURBLElBQUFJLEVBQUEwWCxHQUFBLEVBQUFzRyxHQUFBLEdBQ0FyZSxFQUFBbUIsT0FBQSxDQUNBLElBQUFvdUIsSUFBQXhYLEdBQUEvWCxFQUFBTyxNQUFBLE1BQThEOGQsR0FBQSxFQUFXLE1BQ3pFLEdBQUFrUixHQUFBdnZCLEVBQUFPLE1BQUEsUUFBa0Q4ZCxHQUFBLEVBQVcsTUFDN0RoZSxFQUFBTCxFQUFBSyxRQUNBMFgsR0FBQSxLQUFBMVgsR0FBQUwsRUFBQU8sTUFBQSxNQUNBUCxFQUFBd3ZCLE9BQUEsS0FDQXpYLE1BQUEsTUFBQTFYLElBQUFrdkIsRUFJQSxPQUZBbFIsR0FBQWtSLElBQ0F0dkIsRUFBQUUsU0FBQSxNQUNBLFdBeUNBRixFQUFBRSxTQUFBSCxFQUFBQyxLQUdBZ3VCLFdBQWdCck4sZUFBZ0J5TyxRQUFBLFFBR2hDeEIsR0FBQSw0Q0FDQW4xQixLQUFBLFFBQ0FrYyxTQUFBNFcsRUFBQSxvTEFNQU8sTUFBQVAsRUFBQSx5RkFHQVMsY0FBQVQsRUFBQSwrQkFDQVEsUUFBQVIsRUFBQSx1b0JBZUFXLE1BQUFYLEVBQUEsa3lDQTJCQWUsY0FBQSxFQUNBSCxPQUFZOUgsSUFBQStJLEdBQ1pZLFdBQWdCdE4sTUFBQSxzQkFHaEJrTixFQUFBLGVBQ0FuMUIsS0FBQSxRQUNBa2MsU0FBQTRXLEVBQUEyQixFQUFBLHdNQUdBcEIsTUFBQVAsRUFBQTRCLEdBQ0FuQixjQUFBVCxFQUFBLDJDQUNBVyxNQUFBWCxFQUFBLG1CQUNBWSxPQUFZOUgsSUFBQStJLEdBQ1pZLFdBQWdCdE4sTUFBQSxzQkFHaEJrTixFQUFBLHFCQUNBbjFCLEtBQUEsUUFDQWtjLFNBQUE0VyxFQUFBMkIsRUFBQSw0S0FFQXBCLE1BQUFQLEVBQUE0QixHQUNBakIsTUFBQVgsRUFBQSxzQ0FDQVksT0FDQTdILElBQUEsU0FBQXZrQixHQUVBLE9BREFBLEVBQUFTLFNBQUEsVUFDQSxXQUVBNmpCLElBQUErSSxFQUNBM3FCLE9BQUEsU0FBQStzQixFQUFBM0MsRUFBQXhwQixHQUNBLGdCQUFBd3BCLEVBQUEveUIsTUFBQSxPQUFBbUgsS0FBQW9DLEdBQUEsT0FBQXdwQixFQUFBbnFCLFdBR0FzckIsV0FBZ0J0TixLQUFBLFdBR2hCa04sRUFBQSxtQkFDQW4xQixLQUFBLFFBQ0FrYyxTQUFBNFcsRUFBQSxtS0FFQU8sTUFBQVAsRUFBQTRCLEdBQ0FuQixjQUFBVCxFQUFBLHlEQUNBVSxZQUFBVixFQUFBLHdCQUNBcUIsc0JBQUEsRUFDQVYsTUFBQVgsRUFBQSxtQkFDQVksT0FBWTlILElBQUErSSxHQUNaWSxXQUFnQnROLE1BQUEsc0JBSWhCLElBQUErTyxFQUFBLEtBd0JBN0IsRUFBQSxpQkFDQW4xQixLQUFBLFFBQ0FrYyxTQUFBNFcsRUFBQSxrUkFJQU8sTUFBQSxTQUFBdlQsR0FFQSxJQUFBbVgsRUFBQW5YLEVBQUFjLE9BQUEsR0FDQSxPQUFBcVcsTUFBQUMsZUFBQUQsTUFBQXRqQixlQUVBNGYsY0FBQVQsRUFBQSxzR0FDQVUsWUFBQVYsRUFBQSxnRUFDQVEsUUFBQVIsRUFBQSxpTEFFQWlCLGtCQUFBLHNCQUNBaFYsZUFBQSxzQkFDQWlWLFlBQUEsU0FDQWpULE9BQUEsaUdBQ0E0UyxrQkFBQSxFQUNBUSxzQkFBQSxFQUNBVixNQUFBWCxFQUFBLHVEQUNBZSxjQUFBLEVBQ0FRLFdBQUEsRUFDQVgsT0FDQTdILElBQUEsU0FBQXZrQixHQUVBLE9BREFBLEVBQUFTLFNBQUEsV0FDQSxRQUVBd3VCLElBQUEsU0FBQWp2QixFQUFBQyxHQUVBLE9BREFBLEVBQUFFLFNBckRBLFNBQUEwdkIsRUFBQTkxQixHQUNBLGdCQUFBaUcsRUFBQUMsR0FFQSxJQURBLElBQUFJLEVBQUEwWCxHQUFBLEVBQUFzRyxHQUFBLEdBQ0FyZSxFQUFBbUIsT0FBQSxDQUNBLElBQUE0VyxHQUFBL1gsRUFBQU8sTUFBQSxPQUNBLFVBQUF4RyxHQUFBaUcsRUFBQU8sTUFBQSxRQUNBOGQsR0FBQSxFQUNBLE1BRUEsSUFBQXRHLEdBQUEvWCxFQUFBTyxNQUFBLE9BQ0FtdkIsRUFBQUcsRUFBQTkxQixHQUNBc2tCLEdBQUEsRUFDQSxNQUVBaGUsRUFBQUwsRUFBQUssT0FDQTBYLEVBQUEsVUFBQWhlLElBQUFnZSxHQUFBLE1BQUExWCxFQUlBLE9BRkFnZSxJQUNBcGUsRUFBQUUsU0FBQSxNQUNBLFVBa0NBMHZCLENBQUE3dkIsRUFBQU8sTUFBQSx5QkFDQU4sRUFBQUUsU0FBQUgsRUFBQUMsSUFFQTZ2QixJQUFBLFNBQUE5dkIsRUFBQUMsR0FDQSxTQUFBeXZCLElBQUExdkIsRUFBQU8sTUFBQSxRQUNBTixFQUFBRSxTQUFBdXZCLEVBQ0FBLEVBQUEsS0FDQXp2QixFQUFBRSxTQUFBSCxFQUFBQyxLQUVBaXZCLElBQUEsU0FBQWx2QixHQUVBLE9BREFBLEVBQUFTLFNBQUEsc0JBQ0EsUUFFQXlDLE1BQUEsU0FBQVgsRUFBQXRDLEVBQUFzQixHQUNBLGdCQUFBQSxHQUFBLFFBQUFBLElBQ0EsS0FBQXRCLEVBQUFvckIsVUFDQSxxQkFJQTRDLFdBQ0F0TixNQUFBLGtCQUNBQyxlQUF3QnlPLFFBQUEsU0E3eUJ4QjlxQixDQUFBbE4sRUFBQSxzQkNLQyxTQUFBZ0UsR0FDRCxhQUVBQSxFQUFBa0UsV0FBQSxrQkFFQSxJQUNBd3dCLEVBQUEsSUFBQWxlLE9BQUEsU0FEQSxzQ0FDQXBCLEtBQUEsa0JBRUEsT0FDQXZOLE1BQUEsU0FBQWxELEVBQUFDLEdBQ0EsSUFBQUcsRUFBQUosRUFBQWdZLE9BQ0FnWSxFQUFBL3ZCLEVBQUE4WCxRQUdBLEdBRkE5WCxFQUFBOFgsU0FBQSxFQUVBLEtBQUEzWCxJQUFBLEdBQUFKLEVBQUFxWixLQUFBLEtBQUFuWSxLQUFBbEIsRUFBQWdaLE9BQUFNLE9BQUF0WixFQUFBcVosSUFBQSxLQUVBLE9BREFyWixFQUFBa1ksWUFDQSxVQUdBLEdBQUFsWSxFQUFBTyxNQUFBLG9DQUNBLGVBRUEsR0FBQU4sRUFBQWd3QixTQUFBandCLEVBQUFvRCxjQUFBbkQsRUFBQWl3QixPQUMyQixPQUEzQmx3QixFQUFBa1ksWUFBMkIsU0FFM0IsR0FET2pZLEVBQUFnd0IsVUFBMEJod0IsRUFBQWd3QixTQUFBLEdBQ2pDandCLEVBQUFtRCxNQUFBLENBS0EsR0FKQWxELEVBQUFpd0IsT0FBQSxFQUNBandCLEVBQUFrd0IsTUFBQSxFQUNBbHdCLEVBQUFtd0IsV0FBQSxFQUVBcHdCLEVBQUFPLE1BQUEsT0FBaUMsWUFFakMsR0FBQVAsRUFBQU8sTUFBQSxVQUFxQyxZQUVyQyxHQUFBUCxFQUFBTyxNQUFBLFdBQXNDLGFBR3RDLEdBQUFQLEVBQUFPLE1BQUEsa0JBU0EsTUFSQSxLQUFBSCxFQUNBSCxFQUFBb3dCLGNBQ0EsS0FBQWp3QixFQUNBSCxFQUFBb3dCLGNBQ0EsS0FBQWp3QixFQUNBSCxFQUFBcXdCLGFBRUFyd0IsRUFBQXF3QixhQUNBLE9BSUEsR0FBQXJ3QixFQUFBcXdCLFdBQUEsSUFBQU4sR0FBQSxLQUFBNXZCLEVBRUEsT0FEQUosRUFBQUssT0FDQSxPQUdBLEdBQUFKLEVBQUFvd0IsWUFBQSxJQUFBTCxHQUFBLEtBQUE1dkIsRUFLQSxPQUpBSCxFQUFBaXdCLE9BQUEsRUFDQWp3QixFQUFBa3dCLE1BQUEsRUFDQWx3QixFQUFBbXdCLFdBQUEsRUFDQXB3QixFQUFBSyxPQUNBLE9BSUEsR0FBQUosRUFBQW13QixVQUFBLENBRUEsR0FBQXB3QixFQUFBTyxNQUFBLGtCQUFtRSxPQUF0Qk4sRUFBQWd3QixTQUFBLEVBQXNCLE9BRW5FLEdBQUFqd0IsRUFBQU8sTUFBQSwrQkFBMEQsbUJBRTFELE1BQUFOLEVBQUFvd0IsYUFBQXJ3QixFQUFBTyxNQUFBLHdCQUE2RSxlQUM3RSxHQUFBTixFQUFBb3dCLFlBQUEsR0FBQXJ3QixFQUFBTyxNQUFBLGdDQUFvRixlQUVwRixHQUFBUCxFQUFBTyxNQUFBd3ZCLEdBQXlDLGdCQUl6QyxPQUFBOXZCLEVBQUFrd0IsTUFBQW53QixFQUFBTyxNQUFBLGtGQUNBTixFQUFBa3dCLE1BQUEsRUFDQWx3QixFQUFBaXdCLE9BQUFsd0IsRUFBQW9ELGNBQ0EsUUFFQW5ELEVBQUFrd0IsTUFBQW53QixFQUFBTyxNQUFBLFVBQWdETixFQUFBbXdCLFdBQUEsRUFBd0IsU0FHeEVud0IsRUFBQW13QixXQUFBLEVBQ0Fud0IsRUFBQThYLFFBQUEsTUFBQTNYLEVBQ0FKLEVBQUFLLE9BQ0EsT0FFQTJDLFdBQUEsV0FDQSxPQUNBbXRCLE1BQUEsRUFDQUMsV0FBQSxFQUNBRixPQUFBLEVBQ0FHLFlBQUEsRUFDQUMsV0FBQSxFQUNBTCxTQUFBLEVBQ0FsWSxTQUFBLElBR0EySSxZQUFBLE9BSUFybEIsRUFBQWdKLFdBQUEsc0JBQ0FoSixFQUFBZ0osV0FBQSxxQkEvR0FFLENBQUFsTixFQUFBLCtDQ0xBYSxFQUFBLEdBRUlMLFVBT0kwNEIsV0FQTSxXQVFGLElBQUkvMkIsRUFBU1QsRUFBRXkzQixLQUFLbjRCLEtBQUttQixRQUNyQixVQUFXLGVBQWdCLFlBQWEsY0FBZSxXQUFZLE9BQVEsZ0JBRy9FLE9BQU80VyxLQUFLQyxVQUFVN1csa0tDWmxDaTNCLEVBQUExaUIsRUFBSXZVLE9BQU9rM0IsT0FBUSxFQUNuQkQsRUFBQTFpQixFQUFJdlUsT0FBT20zQixRQUFTLEVBQ3BCRixFQUFBMWlCLEVBQUl2VSxPQUFPbzNCLFVBQVcsRUFFdEIzbEIsT0FBTzhFLElBQU0wZ0IsRUFBQTFpQixFQUNiOUMsT0FBT2xTLEVBQUkxQixFQUFRLEdBQ25CNFQsT0FBTzJDLEVBQUkzQyxPQUFPNGxCLE9BQVN4NUIsRUFBUSxHQUNuQzRULE9BQU82bEIsYUFBZXo1QixFQUFRLElBQzlCNFQsT0FBTzhsQixPQUFTMTVCLEVBQVEsR0FDeEI0VCxPQUFPK2xCLE1BQVEzNUIsRUFBUSxLQUV2QkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSx3QkN6QlIsSUFBQTQ1QixFQUFBQyxPQWFBMWdCLEtBQUEwZ0IsRUFBQSxtQkFBQUQsRUFRQyxXQUVELElBQUFFLEVBQUEsU0FBQUMsRUFBQSxXQUFBQyxFQUFBLFlBSUFDLEdBQUEsc0VBQ0EsMkJBR0FDLEdBQUEsb0VBQ0Esb0dBQ0Esb0dBRUFDLEdBQUEsaUZBR0FDLEdBQUEsdUZBQ0EsdUNBTUEsU0FBQUMsRUFBQUMsRUFBQTUwQixHQUNBLElBQUF3VCxTQUFBb2hCLEVBQUE1MEIsR0FDQSxPQUFBd1QsR0FBQTZnQixLQUFBN2dCLEdBQUE0Z0IsSUFBQVEsRUFBQTUwQixLQUFBLFdBQUF3VCxFQUdBLFNBQUFxaEIsRUFBQUQsRUFBQTUwQixHQUNBLGVBQUE0MEIsRUFBQTUwQixJQUFBbzBCLElBQUFRLEVBQUE1MEIsSUFHQSxTQUFBODBCLEVBQUFGLEVBQUE1MEIsR0FDQSxjQUFBNDBCLEVBQUE1MEIsSUFBQXMwQixFQUlBLFNBQUFTLEVBQUFDLEdBQ0EsZ0JBQUFKLEVBQUF4NUIsR0FFQSxJQURBLElBQUEwVCxFQUFBMVQsRUFBQTZDLE9BQ0E2USxLQUNBLElBQUFrbUIsRUFBQUosRUFBQXg1QixFQUFBMFQsSUFDQSxTQUdBLFVBS0EsSUFBQW1tQixFQUFBRixFQUFBSixHQUNBTyxFQUFBSCxFQUFBRixHQUNBTSxFQUFBSixFQUFBRCxHQUVBLFNBQUFNLEVBQUFDLEdBQ0EsT0FBQUEsR0FBQUosRUFBQUksRUFBQVgsSUFBQVMsRUFBQUUsRUFBQVosR0FHQSxTQUFBYSxFQUFBQyxHQUNBLE9BQUFWLEVBQUFVLEVBQUEsUUFBQUEsRUFBQXpWLEtBQUF5VixFQUFBNWxCLHFCQUFBLFdBR0EsSUF1RUE2bEIsRUFzRUFDLEVBbklBQyxLQUVBQyxTQUFBem5CLFFBQUFvbUIsVUFBQWhvQixVQUFBZ29CLEVBRUFzQixHQUNBakIsZUFDQUUsZUFDQUMsaUJBQ0FHLGlCQUNBQyxpQkFDQUMsb0JBQ0FDLGNBQ0FFLFVBQ0FyNkIsV0F2QkFBLFFBQ0EsU0FBQTQ2QixFQUFBQyxHQUNBRCxFQUFBNTZCLFFBQUE2NkIsSUFFQSxTQUFBRCxFQUFBQyxHQUNBLFFBQUFobkIsRUFBQSxFQUFBdWUsRUFBQXdJLEVBQUE1M0IsT0FBNkM2USxFQUFBdWUsSUFBU3ZlLEVBQ3REZ25CLEVBQUFELEVBQUEvbUIsUUFvQkFpbkIsR0FDQTdtQixRQUFBLFFBQ0E4bUIsYUFBQSxFQUNBTCxZQUNBTSxXQUFBLEVBQ0FMLE9BQ0FNLFlBQ0FSLFVBQ0FqNUIsUUFDQTA1QixhQUFBLEVBQ0FDLGFBQUEsRUFDQUMsaUJBQUEsRUFDQUMsc0JBQUFDLHFCQUFBakMsR0FBQWlDLHNCQUlBLFNBQUFDLEVBQUFDLFVBQ0FDLFNBQUFwQyxHQUFBSyxFQUFBK0IsUUFBQSxRQUNBQSxRQUFBQyxJQUFBRixHQUlBLFNBQUFHLEVBQUFILEVBQUFJLEdBQ0FsQixHQUFBa0IsRUFDQUMsTUFBQUwsR0FFQUQsRUFBQUMsR0FJQSxTQUFBTSxFQUFBQyxHQUNBakIsRUFBQUMsYUFBQSxFQUNBRCxFQUFBRSxXQUFBLEVBQ0FXLEVBQUEsdURBQUFJLEVBQUFqQixFQUFBdDVCLE9BQUEwNUIsYUFHQUosRUFBQWdCLE9BTUFoQixFQUFBa0IsS0FKQSxTQUFBUixHQUNBRyxFQUFBLGtCQUFBSCxFQUFBVixFQUFBdDVCLE9BQUEyNUIsa0JBT1VweEIsZUE2QlYreEIsRUFBQSxpQ0E1QkFuQixFQUFBSixTQUFBLFNBQUE3RyxFQUFBdnpCLEVBQUEwWCxHQUNBLElBQUE4aEIsRUFBQTUwQixFQUNBLFFBQUE4TyxLQUFBMVQsRUFDQUEsRUFBQTRKLGVBQUE4SixLQUNBOGxCLEVBQUFqRyxFQUFBN2YsR0FDQTlPLEVBQUE1RSxFQUFBMFQsR0FDQWdFLEdBQUEsT0FBQThoQixHQUFBLGlCQUFBQSxHQUFBLE9BQUE1MEIsR0FBQSxpQkFBQUEsR0FDQXcxQixFQUFBWixFQUFBNTBCLEdBQUEsR0FFQTJ1QixFQUFBN2YsR0FBQTlPLEdBT0EsT0FIQTVFLEVBQUE0SixlQUFBLGNBQ0EycEIsRUFBQXVJLFNBQUE5N0IsRUFBQTg3QixVQUVBdkksR0FHQWlILEVBQUF1QixjQUFBLFNBQUFDLEVBQUF2MEIsR0FDQSxJQUFBakksS0FLQSxPQUpBNDZCLEVBQUE1NkIsRUFBQWlJLEdBQ0F1MEIsR0FDQTVCLEVBQUE1NkIsRUFBQXc4QixHQUVBeDhCLElBT0ErNkIsR0FDQW9CLEVBQUEsbUNBSUEsV0FDQSxJQUFBTSxFQUVBLEdBQUExQixFQUFBLENBQ0EsSUFBQS9rQixFQUFBdEUsU0FBQW1ELGNBQUEsT0FDQW1CLEVBQUEwbUIsWUFBQWhyQixTQUFBbUQsY0FBQSxTQUNBLElBQUEyTSxXQUNBLElBQ0EsR0FBQUEsRUFBQW1iLEtBQUEzbUIsRUFBQTRtQixXQUFBLE1BQUFDLFdBQ0FKLEVBQUEsU0FBQUssR0FDQSxPQUFBdGIsRUFBQW1iLEtBQUFHLEVBQUEsS0FHYSxNQUFBenJCLEtBR2JvckIsSUFDQUEsRUFBQSxTQUFBSyxHQUVBLElBREEsSUFBQTdCLEtBQ0EvbUIsRUFBQSxFQUFBdWUsRUFBQXFLLEVBQUF6NUIsT0FBdUQ2USxFQUFBdWUsSUFBU3ZlLEVBQ2hFK21CLEVBQUEvbUIsR0FBQTRvQixFQUFBNW9CLEdBRUEsT0FBQSttQixJQUlBRCxFQUFBeUIsVUExQkEsR0FnQ0ExQixJQUNBaEIsRUFBQXJvQixTQUFBLG9CQUNBbXBCLEVBQUEsU0FBQTlHLEVBQUFnSixFQUFBQyxHQUNBakosRUFBQWtKLGlCQUFBRixFQUFBQyxHQUFBLElBRVNqRCxFQUFBcm9CLFNBQUEsZUFDVG1wQixFQUFBLFNBQUE5RyxFQUFBZ0osRUFBQUMsR0FDQWpKLEVBQUFtSixZQUFBLEtBQUFILEVBQUFDLElBR0FiLEVBQUEsMEVBR0FuQixFQUFBSCxlQUdBLElBQUFzQyxLQUVBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQUMsU0FBQUQsRUFBQUUsYUFBQUMsT0FBQUgsR0FJQSxTQUFBSSxJQUNBLEdBQUExQyxJQUFBSSxFQUFBQyxZQUFBLENBR0EsSUFBQXNDLEVBQ0FDLEdBQUEsRUFBQUMsR0FBQSxFQUlBN0QsRUFBQXJvQixTQUFBLGlCQUNBZ3NCLEVBQUFoc0IsU0FBQW1zQixjQUNBeEQsRUFBQXFELEVBQUE5RCxJQUFBVyxFQUFBbUQsRUFBQS9ELEtBQ0FnRSxHQUFBLElBSUEsSUFBQXpZLEVBQUF3VixFQUFBaHBCLFVBQ0EsR0FBQXdULEdBQUEsUUFBQUEsRUFBQTRZLFNBQUFwcEIsY0FZQSxHQVBBd1EsR0FBQTZVLEVBQUE3VSxFQUFBLG9CQUVBc1YsRUFEQWtELEVBQUF4WSxFQUFBNlkscUJBRUFILEdBQUEsR0FJQUQsR0FBQUMsRUFBQSxDQVlBLElBQUFqK0IsRUFDQSxRQUFBcStCLEtBUkE3QyxFQUFBQyxhQUFBLEVBQ0FELEVBQUFHLFVBQ0FxQyxxQkFDQUMsdUJBS0E5QyxHQUNBbjdCLEVBQUFtN0IsRUFBQWtELGNBQUFDLEdBQ0F0K0IsRUFBQTg5QixLQUFBOTlCLEVBQUF3N0IsR0FLQSxRQUFBam5CLEVBQUEsRUFBQXVlLEVBQUEwSyxFQUFBOTVCLE9BQW1ENlEsRUFBQXVlLElBQVN2ZSxFQUM1RCxJQUNBaXBCLEVBQUFqcEIsR0FBQWluQixHQUNhLE1BQUFrQyxHQUViekIsRUFEQSwrREFBQXdCLEVBQUFDLFVBdkJBbEIsRUFBQSxrREFaQUEsRUFBQSwwQkF5Q0EsU0FBQStCLEVBQUFDLEVBQUFDLEVBQUF6K0IsR0FDQUEsSUFDQXcrQixHQUFBLGNBQUF4K0IsRUFBQW9CLE1BRUFvNkIsRUFBQWtCLEtBQUEsZUFBQThCLEVBQUEsOEJBQ0FDLEVBQUEsYUFHQSxTQUFBQyxFQUFBQyxFQUFBSCxFQUFBQyxFQUFBeitCLEdBQ0EyK0IsRUFBQUgsR0FBQSxXQUVBLE9BREFELEVBQUFDLEVBQUFDLEVBQUF6K0IsR0FDQTIrQixFQUFBRixHQUFBdmIsTUFBQXliLEVBQUF0RCxFQUFBeUIsUUFBQTdaLGFBSUFvWSxFQUFBa0Qsb0JBQ0FsRCxFQUFBcUQsaUNBR0FsRCxFQUFBc0MsT0FHQXRDLEVBQUFvRCxnQkFBQSxTQUFBdkIsR0FDQTdCLEVBQUFDLFlBQ0E0QixFQUFBN0IsR0FFQWdDLEVBQUFwN0IsS0FBQWk3QixJQUlBLElBQUF3QixLQXFCQSxTQUFBUCxFQUFBbDlCLEVBQUEwOUIsRUFBQUMsR0FDQWgrQixLQUFBSyxPQUNBTCxLQUFBKzlCLGVBQ0EvOUIsS0FBQTA2QixhQUFBLEVBQ0ExNkIsS0FBQTI2QixXQUFBLEVBQ0EzNkIsS0FBQWcrQixjQTZDQSxTQUFBQyxFQUFBNTlCLEVBQUEwOUIsRUFBQUcsR0FDQSxJQUFBQyxFQUFBLElBQUFaLEVBQUFsOUIsRUFBQTA5QixFQUFBLFNBQUE5K0IsR0FDQSxJQUFBQSxFQUFBeTdCLFlBQUEsQ0FDQXo3QixFQUFBeTdCLGFBQUEsRUFDQSxJQUNBd0QsRUFBQXpELEVBQUF4N0IsR0FDQUEsRUFBQTA3QixXQUFBLEVBQ2lCLE1BQUFnQyxHQUVqQnpCLEVBREEsV0FBQTc2QixFQUFBLHFCQUFBcThCLEVBQUFDLElBRUFBLEVBQUF5QixPQUNBbEQsRUFBQXlCLEVBQUF5QixXQU1BLE9BREFoRSxFQUFBLzVCLEdBQUE4OUIsRUFDQUEsRUE4QkEsU0FBQUUsS0FwSEE1RCxFQUFBNkQsZ0JBQUEsU0FBQWhDLEdBQ0F3QixFQUFBejhCLEtBQUFpN0IsSUFhQWpDLElBQ0FJLEVBQUE4RCxLQUFBOUQsRUFBQStELHVCQVhBLFNBQUFDLEdBQ0FBLEtBQUE3ckIsT0FDQW1xQixJQUdBLFFBQUF2cEIsRUFBQSxFQUFBdWUsRUFBQStMLEVBQUFuN0IsT0FBbUQ2USxFQUFBdWUsSUFBU3ZlLEVBQzVEc3FCLEVBQUF0cUIsR0FBQWlyQixJQU1BZCxFQUFBbEQsRUFBQSxrQ0FXQThDLEVBQUFtQixXQUNBM0IsS0FBQSxXQUVBLElBREEsSUFDQTRCLEVBQUFyQixFQURBc0IsRUFBQTUrQixLQUFBKzlCLGlCQUNBdnFCLEVBQUEsRUFBQXVlLEVBQUE2TSxFQUFBajhCLE9BQXlGNlEsRUFBQXVlLElBQVN2ZSxFQUFBLENBSWxHLEdBSEE4cEIsRUFBQXNCLEVBQUFwckIsTUFFQW1yQixFQUFBdkUsRUFBQWtELEtBQ0FxQixhQUFBcEIsR0FDQSxVQUFBc0IsTUFBQSxvQkFBQXZCLEVBQUEsZUFLQSxHQUZBcUIsRUFBQTVCLFFBRUE0QixFQUFBaEUsVUFDQSxVQUFBa0UsTUFBQSxvQkFBQXZCLEVBQUEsbUJBS0F0OUIsS0FBQWcrQixZQUFBaCtCLE9BR0F5N0IsS0FBQSxTQUFBQyxHQUdBLE1BRkExN0IsS0FBQTA2QixhQUFBLEVBQ0ExNkIsS0FBQTI2QixXQUFBLEVBQ0EsSUFBQWtFLE1BQUFuRCxJQUdBQyxLQUFBLFNBQUFSLEdBQ0FWLEVBQUFrQixLQUFBLFVBQUEzN0IsS0FBQUssS0FBQSxLQUFBODZCLElBR0FxQyxrQkFBQSxTQUFBQyxFQUFBQyxHQUNBakQsRUFBQWtCLEtBQUEsZUFBQThCLEVBQUEsY0FBQXo5QixLQUFBSyxLQUFBLDhCQUNBcTlCLEVBQUEsYUFHQW9CLFlBQUEsU0FBQTNELEdBQ0EsV0FBQTBELE1BQUEsa0JBQUE3K0IsS0FBQUssS0FBQSxZQUFBODZCLEtBd0JBVixFQUFBd0QsYUFBQSxTQUFBNTlCLEdBRUEsSUFBQTY5QixFQUFBSCxFQUNBLEdBQUE3YixVQUFBdmYsUUFDQXU3QixFQUFBaGMsVUFBQSxHQUNBNmIsT0FFQUcsRUFBQWhjLFVBQUEsR0FDQTZiLEVBQUE3YixVQUFBLElBR0EsSUFBQWpqQixFQUFBZy9CLEVBQUE1OUIsRUFBQTA5QixFQUFBRyxHQUdBekQsRUFBQUMsYUFBQUQsRUFBQUUsV0FDQTE3QixFQUFBODlCLFFBSUF0QyxFQUFBc0UsaUJBQUEsU0FBQTErQixFQUFBMDlCLEVBQUFHLEdBQ0FELEVBQUE1OUIsRUFBQTA5QixFQUFBRyxJQVFBekQsRUFBQTRELGlCQUNBNUQsRUFBQXVFLGVBQUEsSUFBQVgsRUFHQTVELEVBQUF3RSxtQkFBQSxJQURBLGFBTUF4RSxFQUFBc0UsaUJBQUEsc0JBQUF0RSxFQUFBeDdCLEdBQ0EsSUFBQWlnQyxFQUFBLFlBQ0E1RSxFQUFBRyxFQUFBSCxLQUNBTixFQUFBTSxFQUFBTixRQUdBTSxFQUFBWCxlQUFBM29CLFVBQUEsNkRBQ0EvUixFQUFBdzhCLEtBQUEsMkNBR0FuQixFQUFBakIsYUFBQXJvQixTQUFBLHlCQUNBL1IsRUFBQXc4QixLQUFBLGdEQUdBLElBQUFubUIsRUFBQXRFLFNBQUFtRCxjQUFBLE9BQ0FtbUIsRUFBQVgsZUFBQXJrQixHQUFBLDRDQUNBZ2xCLEVBQUFWLGVBQUF0a0IsR0FBQSw4REFDQXJXLEVBQUF3OEIsS0FBQSxxQ0FJQW5CLEVBQUFkLGVBQUFsa0IsRUFBQSxjQUNBclcsRUFBQXc4QixLQUFBLHlDQUdBLElBQUEwRCxFQUFBbnVCLFNBQUFvdUIsZUFBQSxRQUNBOUUsRUFBQVgsZUFBQXdGLEdBQUEsa0VBQ0E3RSxFQUFBVixlQUFBdGtCLEdBQUEsOERBQ0FnbEIsRUFBQVQsa0JBQUFzRixHQUFBLFdBQ0FsZ0MsRUFBQXc4QixLQUFBLHVDQVFBLElBQUE0RCxFQUtBLFNBQUE5RSxFQUFBK0UsR0FFQSxJQURBLElBQUE5ckIsRUFBQSttQixFQUFBNTNCLE9BQ0E2USxLQUNBLEdBQUErbUIsRUFBQS9tQixLQUFBOHJCLEVBQ0EsU0FHQSxVQWNBLFNBQUFDLEVBQUFDLEdBRUEsSUFEQSxJQUFBaHNCLEVBQUEsRUFDQWdzQixJQUFBQyxtQkFDQWpzQixFQUVBLE9BQUFBLEVBZ0JBLFNBQUFrc0IsRUFBQUMsRUFBQUMsR0FDQSxJQUFBMVYsRUFBQTJWLEtBQ0EsSUFBQTNWLEVBQUF5VixFQUEyQnpWLEVBQUdBLElBQUE0VixXQUM5QkQsRUFBQXgrQixLQUFBNm9CLEdBR0EsSUFBQUEsRUFBQTBWLEVBQTJCMVYsRUFBR0EsSUFBQTRWLFdBQzlCLEdBQUFULEVBQUFRLEVBQUEzVixHQUNBLE9BQUFBLEVBSUEsWUFHQSxTQUFBNlYsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxJQURBLElBQUFoVyxFQUFBZ1csRUFBQUQsSUFBQUgsV0FDQTVWLEdBQUEsQ0FDQSxHQUFBQSxJQUFBOFYsRUFDQSxTQUVBOVYsSUFBQTRWLFdBR0EsU0FPQSxTQUFBSyxFQUFBWCxFQUFBUSxFQUFBRSxHQUVBLElBREEsSUFBQXg3QixFQUFBd2xCLEVBQUFnVyxFQUFBVixJQUFBTSxXQUNBNVYsR0FBQSxDQUVBLElBREF4bEIsRUFBQXdsQixFQUFBNFYsY0FDQUUsRUFDQSxPQUFBOVYsRUFFQUEsRUFBQXhsQixFQUVBLFlBR0EsU0FBQTA3QixFQUFBWixHQUNBLElBQUF0bkIsRUFBQXNuQixFQUFBckQsU0FDQSxVQUFBamtCLEdBQUEsR0FBQUEsR0FBQSxHQUFBQSxFQVdBLFNBQUFtb0IsRUFBQWIsRUFBQWMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBRSxZQUFBQyxFQUFBSCxFQUFBUixXQU1BLE9BTEFTLEVBQ0FFLEVBQUFDLGFBQUFsQixFQUFBZSxHQUVBRSxFQUFBekUsWUFBQXdELEdBRUFBLEVBMkJBLFNBQUFtQixFQUFBbkIsR0FDQSxNQUFBQSxFQUFBckQsU0FDQSxPQUFBcUQsRUFDYSxVQUFBQSxFQUFBb0IsZUFBQTFCLEVBQ2IsT0FBQU0sRUFBQW9CLGNBQ2EsVUFBQXBCLEVBQUF4dUIsVUFBQWt1QixFQUNiLE9BQUFNLEVBQUF4dUIsU0FDYSxHQUFBd3VCLEVBQUFNLFdBQ2IsT0FBQWEsRUFBQW5CLEVBQUFNLFlBRUEsTUFBQTdnQyxFQUFBNi9CLFlBQUEsMkNBSUEsU0FBQStCLEVBQUFyQixHQUNBLElBQUF2RixFQUFBMEcsRUFBQW5CLEdBQ0EsVUFBQXZGLEVBQUE2RyxhQUFBNUIsRUFDQSxPQUFBakYsRUFBQTZHLFlBQ2EsVUFBQTdHLEVBQUE4RyxjQUFBN0IsRUFDYixPQUFBakYsRUFBQThHLGFBRUEsTUFBQTloQyxFQUFBNi9CLFlBQUEsdUNBSUEsU0FBQWtDLEVBQUFDLEdBQ0EsVUFBQUEsRUFBQUMsaUJBQUFoQyxFQUNBLE9BQUErQixFQUFBQyxnQkFDYSxVQUFBRCxFQUFBRSxlQUFBakMsRUFDYixPQUFBK0IsRUFBQUUsY0FBQW53QixTQUVBLE1BQUEvUixFQUFBNi9CLFlBQUEsa0VBZUEsU0FBQXNDLEVBQUEvTixHQUNBLE9BQUFBLEdBQUFpSCxFQUFBakIsYUFBQWhHLEVBQUEsZUFBQWlILEVBQUFmLGFBQUFsRyxFQUFBLFlBOEVBLElBaURBZ08sRUFqREFDLEdBQUEsRUFFQSxTQUFBQyxFQUFBL0IsR0FFQSxJQUVBLE9BREFBLEVBQUFNLFlBQ0EsRUFDYSxNQUFBbnZCLEdBQ2IsVUFnQkEsU0FBQTZ3QixFQUFBaEMsR0FDQSxJQUFBQSxFQUNBLGtCQUVBLEdBQUE4QixHQUFBQyxFQUFBL0IsR0FDQSxzQkFFQSxHQUFBWSxFQUFBWixHQUNBLFVBQUFBLEVBQUFyekIsS0FBQSxJQUVBLE1BQUFxekIsRUFBQXJELFNBQUEsQ0FDQSxJQUFBc0YsRUFBQWpDLEVBQUFoeEIsR0FBQSxRQUFBZ3hCLEVBQUFoeEIsR0FBQSxPQUNBLFVBQUFneEIsRUFBQXBDLFNBQUFxRSxFQUFBLFdBQUFsQyxFQUFBQyxHQUFBLFdBQUFBLEVBQUF0RCxXQUFBdjVCLE9BQUEsTUFBQTY4QixFQUFBbHJCLFdBQUEsNkJBQUF3TSxNQUFBLFVBRUEsT0FBQTBlLEVBQUFwQyxTQStDQSxTQUFBc0UsRUFBQUMsR0FDQTNoQyxLQUFBMmhDLE9BQ0EzaEMsS0FBQTRoQyxNQUFBRCxFQXFDQSxTQUFBRSxFQUFBckMsRUFBQXNDLEdBQ0E5aEMsS0FBQXcvQixPQUNBeC9CLEtBQUE4aEMsU0FpQkEsU0FBQUMsRUFBQUMsR0FDQWhpQyxLQUFBZ3RCLEtBQUFodEIsS0FBQWdpQyxHQUNBaGlDLEtBQUFnaUMsV0FDQWhpQyxLQUFBNDhCLFFBQUEsaUJBQUE1OEIsS0FBQWdpQyxVQXRJQSxXQUNBLElBQUExc0IsRUFBQXRFLFNBQUFtRCxjQUFBLEtBQ0FtQixFQUFBaEIsVUFBQSxJQUNBLElBQUE2cUIsRUFBQTdwQixFQUFBMnNCLFdBQ0Ezc0IsRUFBQWhCLFVBQUEsU0FDQWd0QixFQUFBQyxFQUFBcEMsR0FFQTFFLEVBQUFHLFNBQUEwRyxrQkFQQSxVQXNDQTF1QixPQUFBc3ZCLGtCQUFBaEQsRUFDQW1DLEVBQUEsU0FBQS9yQixFQUFBNnNCLEdBQ0EsT0FBQXRCLEVBQUF2ckIsR0FBQTRzQixpQkFBQTVzQixFQUFBLE1BQUE2c0IsV0FFU254QixTQUFBb3hCLGdCQUFBQyxjQUFBbkQsRUFDVG1DLEVBQUEsU0FBQS9yQixFQUFBNnNCLEdBQ0EsT0FBQTdzQixFQUFBK3NCLGFBQUEvc0IsRUFBQStzQixhQUFBRixHQUFBLElBR0FsakMsRUFBQXc4QixLQUFBLHlEQStCQWlHLEVBQUFoRCxXQUNBNEQsU0FBQSxLQUVBQyxRQUFBLFdBQ0EsUUFBQXZpQyxLQUFBNGhDLE9BR0E1NUIsS0FBQSxXQUNBLElBQ0F3NkIsRUFBQXg2QixFQURBa2lCLEVBQUFscUIsS0FBQXNpQyxTQUFBdGlDLEtBQUE0aEMsTUFFQSxHQUFBNWhDLEtBQUFzaUMsU0FFQSxHQURBRSxFQUFBdFksRUFBQStYLFdBRUFqaUMsS0FBQTRoQyxNQUFBWSxNQUNxQixDQUVyQixJQURBeDZCLEVBQUEsS0FDQWtpQixJQUFBbHFCLEtBQUEyaEMsUUFBQTM1QixFQUFBa2lCLEVBQUFzVyxjQUNBdFcsSUFBQTRWLFdBRUE5L0IsS0FBQTRoQyxNQUFBNTVCLEVBR0EsT0FBQWhJLEtBQUFzaUMsVUFHQUcsT0FBQSxXQUNBemlDLEtBQUFzaUMsU0FBQXRpQyxLQUFBNGhDLE1BQUE1aEMsS0FBQTJoQyxLQUFBLE9BYUFFLEVBQUFuRCxXQUNBZ0UsT0FBQSxTQUFBMWhCLEdBQ0EsUUFBQUEsR0FBQWhoQixLQUFBdy9CLE9BQUF4ZSxFQUFBd2UsTUFBQXgvQixLQUFBOGhDLFFBQUE5Z0IsRUFBQThnQixRQUdBYSxRQUFBLFdBQ0Esc0JBQUFuQixFQUFBeGhDLEtBQUF3L0IsTUFBQSxJQUFBeC9CLEtBQUE4aEMsT0FBQSxNQUdBbEcsU0FBQSxXQUNBLE9BQUE1N0IsS0FBQTJpQyxZQVVBWixFQUFBckQsV0FDQWtFLGVBQUEsRUFDQUMsc0JBQUEsRUFDQUMsbUJBQUEsRUFDQUMsNEJBQUEsRUFDQUMsY0FBQSxFQUNBQyxrQkFBQSxFQUNBQyxrQkFBQSxHQUNBQyxzQkFBQSxJQUdBcEIsRUFBQXJELFVBQUE5QyxTQUFBLFdBQ0EsT0FBQTU3QixLQUFBNDhCLFNBR0FuQyxFQUFBMkksS0FDQS9ELGdCQUNBZ0UsZ0JBNVpBLFNBQUE3RCxHQUNBLElBQUE4RCxFQUNBLGNBQUE5RCxFQUFBK0QsY0FBQXJFLEdBQUEsUUFBQW9FLEVBQUE5RCxFQUFBK0QsZUFBQSxnQ0FBQUQsR0EyWkFFLGNBeFpBLFNBQUFoRSxHQUNBLElBQUFpQixFQUFBakIsRUFBQU0sV0FDQSxVQUFBVyxFQUFBdEUsU0FBQXNFLEVBQUEsTUF1WkFsQixlQUNBa0UsY0E3WUEsU0FBQWpFLEdBQ0EsT0FBQUEsRUFBQXJELFVBQ0EsT0FDQSxRQUNBLFNBQ0EsT0FDQSxPQUNBLE9BQUFxRCxFQUFBNzhCLE9BQ0EsUUFDQSxPQUFBNjhCLEVBQUF0RCxXQUFBdjVCLFNBcVlBKzhCLG9CQUNBSyxlQUNBMkQsaUJBeFdBLFNBQUExRCxFQUFBQyxHQUNBLE9BQUFGLEVBQUFDLEVBQUFDLEdBQUEsSUF3V0FFLHVCQUNBQyxzQkFDQXVELG9CQXRWQSxTQUFBbkUsR0FDQSxJQUFBQSxFQUNBLFNBRUEsSUFBQXRuQixFQUFBc25CLEVBQUFyRCxTQUNBLFVBQUFqa0IsR0FBQSxHQUFBQSxHQWtWQW1vQixjQUNBdUQsY0FyVUEsU0FBQXBFLEVBQUE5b0IsRUFBQW10QixHQUNBLElBQUFDLEVBQUF0RSxFQUFBdUUsV0FBQSxHQU1BLEdBTEFELEVBQUFFLFdBQUEsRUFBQXR0QixHQUNBOG9CLEVBQUF3RSxXQUFBdHRCLEVBQUE4b0IsRUFBQTc4QixPQUFBK1QsR0FDQTJwQixFQUFBeUQsRUFBQXRFLEdBR0FxRSxFQUNBLFFBQUFJLEVBQUF6d0IsRUFBQSxFQUF5Q3l3QixFQUFBSixFQUFBcndCLE1BRXpDeXdCLEVBQUF6RSxTQUFBeUUsRUFBQW5DLE9BQUFwckIsR0FDQXV0QixFQUFBekUsS0FBQXNFLEVBQ0FHLEVBQUFuQyxRQUFBcHJCLEdBR0F1dEIsRUFBQXpFLFFBQUFNLFlBQUFtRSxFQUFBbkMsT0FBQXZDLEVBQUFDLE1BQ0F5RSxFQUFBbkMsT0FJQSxPQUFBZ0MsR0FrVEFuRCxjQUNBRSxZQUNBcUQsZ0JBOVFBLFNBQUFqRCxHQUNBLFVBQUFBLEVBQUFFLGVBQUFqQyxFQUNBLE9BQUErQixFQUFBRSxjQUNhLFVBQUFGLEVBQUFDLGlCQUFBaEMsRUFDYixPQUFBK0IsRUFBQUMsZ0JBQUFKLFlBRUEsTUFBQTdoQyxFQUFBNi9CLFlBQUEsK0RBeVFBa0Msb0JBQ0FoSCxVQUNBb0gsV0FDQStDLG1CQW5RQSxTQUFBOVEsRUFBQXAwQixFQUFBbWxDLEdBQ0EsSUFBQW5LLEVBaUJBLEdBZkE1RyxFQUtBaUgsRUFBQWQsZUFBQW5HLEVBQUEsWUFDQTRHLEVBQUEsR0FBQTVHLEVBQUE4SSxVQUFBLFVBQUE5SSxFQUFBMXFCLFFBQUFxTCxjQUNBZ3RCLEVBQUEzTixHQUFBc04sRUFBQXROLEdBSUErTixFQUFBL04sS0FDQTRHLEVBQUE1RyxFQUFBcmlCLFVBWEFpcEIsRUFBQWpwQixVQWNBaXBCLEVBQ0EsTUFBQWg3QixFQUFBNi9CLFlBQUFzRixFQUFBLHFEQUdBLE9BQUFuSyxHQThPQW9LLGlCQTNPQSxTQUFBN0UsR0FFQSxJQURBLElBQUFpQixFQUNBQSxFQUFBakIsRUFBQU0sWUFDQU4sRUFBQWlCLEVBRUEsT0FBQWpCLEdBdU9BOEUsY0FwT0EsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxJQUFBQyxFQUFBaEQsRUFBQWlELEVBQUFDLEVBQUEzYSxFQUNBLEdBQUFxYSxHQUFBRSxFQUVBLE9BQUFELElBQUFFLEVBQUEsRUFBQUYsRUFBQUUsR0FBQSxJQUNhLEdBQUFDLEVBQUF4RSxFQUFBc0UsRUFBQUYsR0FBQSxHQUViLE9BQUFDLEdBQUFqRixFQUFBb0YsSUFBQSxJQUNhLEdBQUFBLEVBQUF4RSxFQUFBb0UsRUFBQUUsR0FBQSxHQUViLE9BQUFsRixFQUFBb0YsR0FBQUQsR0FBQSxJQUdBLEtBREEvQyxFQUFBakMsRUFBQTZFLEVBQUFFLElBRUEsVUFBQTVGLE1BQUEsc0RBT0EsSUFIQStGLEVBQUFMLElBQUE1QyxJQUFBeEIsRUFBQW9FLEVBQUE1QyxHQUFBLE9BQ0FrRCxFQUFBSixJQUFBOUMsSUFBQXhCLEVBQUFzRSxFQUFBOUMsR0FBQSxJQUlBLE1BQUExaUMsRUFBQTYvQixZQUFBLG1FQUdBLElBREE1VSxFQUFBeVgsRUFBQU0sV0FDQS9YLEdBQUEsQ0FDQSxHQUFBQSxJQUFBMGEsRUFDQSxTQUN5QixHQUFBMWEsSUFBQTJhLEVBQ3pCLFNBRUEzYSxJQUFBc1csY0FvTUFlLGVBQ0FDLGNBQ0FILDJCQUNBeUQsa0JBaElBLFNBQUE3SyxFQUFBemYsRUFBQXVxQixHQUNBLElBQUF2Z0IsRUFBQXdWLEVBQUFDLEdBQ0Eza0IsRUFBQTJrQixFQUFBOWxCLGNBQUEsT0FDQW1CLEVBQUF5dkIsZ0JBQUEsS0FBQUEsRUFDQXZxQixJQUNBbEYsRUFBQWhCLFVBQUFrRyxHQUlBLElBQUF3cUIsRUFBQXhnQixFQUFBeWQsV0FPQSxPQU5BK0MsRUFDQXhnQixFQUFBa2MsYUFBQXByQixFQUFBMHZCLEdBRUF4Z0IsRUFBQXdYLFlBQUExbUIsR0FHQUEsR0FpSEEydkIsV0E5R0EsU0FBQXpGLEdBQ0EsT0FBQUEsRUFBQU0sV0FBQW9GLFlBQUExRixJQThHQTJGLHlCQXZKQSxTQUFBM0YsR0FFQSxJQURBLElBQUFnRCxFQUFBNEMsRUFBQXpFLEVBQUFuQixHQUFBNkYseUJBQ0E3QyxFQUFBaEQsRUFBQXlDLFlBQ0FtRCxFQUFBcEosWUFBQXdHLEdBRUEsT0FBQTRDLEdBbUpBRSxlQXpFQSxTQUFBM0QsR0FDQSxXQUFBRCxFQUFBQyxJQXlFQUUsZUFHQXBILEVBQUFzSCxpQkFNQXRILEVBQUFzRSxpQkFBQSxnQ0FBQXRFLEVBQUF4N0IsR0FDQSxJQUFBbWtDLEVBQUEzSSxFQUFBMkksSUFDQTlJLEVBQUFHLEVBQUFILEtBQ0F1SCxFQUFBdUIsRUFBQXZCLFlBQ0FFLEVBQUF0SCxFQUFBc0gsYUFFQTNCLEVBQUFnRCxFQUFBaEQsb0JBQ0FiLEVBQUE2RCxFQUFBN0QsYUFDQW1FLEVBQUFOLEVBQUFNLGlCQUNBL0MsRUFBQXlDLEVBQUF6QyxZQUNBMkQsRUFBQWxCLEVBQUFrQixjQUNBVixFQUFBUixFQUFBUSxjQUNBekQsRUFBQWlELEVBQUFqRCxxQkFDQXNELEVBQUFMLEVBQUFLLGNBQ0FwRSxFQUFBK0QsRUFBQS9ELGNBQ0FnRixFQUFBakIsRUFBQWlCLGlCQUNBL0MsRUFBQTdHLEVBQUFHLFNBQUEwRyxnQkFFQTJELEVBQUE3QixFQUFBNkIsV0FNQSxTQUFBTSxFQUFBL0YsRUFBQXpGLEdBQ0EsVUFBQXlGLEVBQUFyRCxXQUNBdUgsRUFBQWxFLEVBQUF6RixFQUFBeUwsaUJBQUE5QixFQUFBbEUsRUFBQXpGLEVBQUEwTCxlQUdBLFNBQUFDLEVBQUEzTCxHQUNBLE9BQUFBLEVBQUEvb0IsVUFBQTJ2QixFQUFBNUcsRUFBQXlMLGdCQU9BLFNBQUFHLEVBQUFuRyxHQUNBLFdBQUFxQyxFQUFBckMsRUFBQU0sV0FBQVAsRUFBQUMsSUFHQSxTQUFBb0csRUFBQXBHLEdBQ0EsV0FBQXFDLEVBQUFyQyxFQUFBTSxXQUFBUCxFQUFBQyxHQUFBLEdBR0EsU0FBQXFHLEVBQUFyRyxFQUFBdFYsRUFBQW9QLEdBQ0EsSUFBQXdNLEVBQUEsSUFBQXRHLEVBQUFyRCxTQUFBcUQsRUFBQXlDLFdBQUF6QyxFQVlBLE9BWEFZLEVBQUFsVyxHQUNBb1AsR0FBQXBQLEVBQUF2bkIsT0FDQXlnQyxFQUFBL0MsWUFBQWIsRUFBQXRWLEdBRUFBLEVBQUE0VixXQUFBWSxhQUFBbEIsRUFBQSxHQUFBbEcsRUFBQXBQLEVBQUEwWixFQUFBMVosRUFBQW9QLElBRWFBLEdBQUFwUCxFQUFBZ1MsV0FBQXY1QixPQUNidW5CLEVBQUE4UixZQUFBd0QsR0FFQXRWLEVBQUF3VyxhQUFBbEIsRUFBQXRWLEVBQUFnUyxXQUFBNUMsSUFFQXdNLEVBR0EsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FJQSxHQUhBQyxFQUFBSCxHQUNBRyxFQUFBRixHQUVBUCxFQUFBTyxJQUFBUCxFQUFBTSxHQUNBLFVBQUFqRSxFQUFBLHNCQUdBLElBQUFxRSxFQUFBOUIsRUFBQTBCLEVBQUFSLGVBQUFRLEVBQUFLLFlBQUFKLEVBQUFSLGFBQUFRLEVBQUFLLFdBQ0FDLEVBQUFqQyxFQUFBMEIsRUFBQVAsYUFBQU8sRUFBQU0sVUFBQUwsRUFBQVQsZUFBQVMsRUFBQUksYUFFQSxPQUFBSCxFQUFBRSxHQUFBLEdBQUFHLEdBQUEsRUFBQUgsRUFBQSxHQUFBRyxFQUFBLEVBc0JBLFNBQUFDLEVBQUFDLEVBQUFqTSxFQUFBa00sR0FDQSxJQUFBQyxFQUFBemMsRUFFQXNWLEVBQUFvSCxFQUFBLElBREFGLE1BQThDRyxNQUFBLEdBQ0ZySCxFQUFBaUgsRUFBQXorQixRQUM1QyxHQUFBeStCLEVBQUFLLDZCQUFBLENBQ0EsUUFBQXRNLEVBQUFnRixHQUVBLFlBREFrSCxFQUFBRyxNQUFBLEdBUUEsR0FGQUwsRUFEQUksRUFBQUgsRUFBQU0scUJBQ0F2TSxFQUFBa00sR0FDQUUsRUFBQW5FLFNBQ0FpRSxFQUFBRyxLQUNBLFlBT0EsSUFEQUYsRUFBQXZELEVBQUFrQyxlQUFBOUYsR0FDQXRWLEVBQUF5YyxFQUFBMytCLFFBQ0EsUUFBQXd5QixFQUFBdFEsR0FFQSxZQURBd2MsRUFBQUcsTUFBQSxHQVFBLFNBQUFHLEVBQUFDLEdBRUEsSUFEQSxJQUFBQyxFQUNBRCxFQUFBai9CLFFBQ0FpL0IsRUFBQUgsOEJBRUFFLEVBREFFLEVBQUFELEVBQUFGLHNCQUVBRyxFQUFBekUsVUFFQXdFLEVBQUE3eEIsU0FLQSxTQUFBK3hCLEVBQUFGLEdBQ0EsUUFBQXpILEVBQUEwSCxFQUFBRSxFQUFBMUIsRUFBQXVCLEVBQUFsTixPQUFBc0wseUJBQXlHN0YsRUFBQXlILEVBQUFqL0IsUUFBd0IsQ0FVakksR0FSQWkvQixFQUFBSCw4QkFDQXRILElBQUF1RSxXQUFBLEdBQ0FtRCxFQUFBRCxFQUFBRixxQkFDQXZILEVBQUF4RCxZQUFBbUwsRUFBQUQsSUFDQUEsRUFBQXpFLFVBRUF3RSxFQUFBN3hCLFNBRUEsSUFBQW9xQixFQUFBckQsU0FDQSxVQUFBNEYsRUFBQSx5QkFFQXFGLEVBQUFwTCxZQUFBd0QsR0FFQSxPQUFBNEgsRUFtQ0EsU0FBQXpFLEVBQUE1SSxHQUVBLGdCQURBLElBQUFBLEVBQUFzTixRQUFBLFFBQUF0TixFQUFBc04sV0FDQSxJQUFBakUsRUFBQTVCLFlBQUF6SCxFQUFBeUwsZ0JBQUEsSUFBQXpMLEVBQUFzTSxZQUFBLEtBQ0FqRCxFQUFBNUIsWUFBQXpILEVBQUEwTCxjQUFBLElBQUExTCxFQUFBdU0sVUFBQSxLQU9BLFNBQUFnQixFQUFBdk4sRUFBQXdOLEdBS0EsR0FKQXZuQyxLQUFBKzVCLFFBQ0EvNUIsS0FBQXVuQyxtQ0FHQXhOLEVBQUF5TixVQUFBLENBQ0F4bkMsS0FBQXluQyxHQUFBMU4sRUFBQXlMLGVBQ0F4bEMsS0FBQTBuQyxHQUFBM04sRUFBQXNNLFlBQ0FybUMsS0FBQTJuQyxHQUFBNU4sRUFBQTBMLGFBQ0F6bEMsS0FBQTRuQyxHQUFBN04sRUFBQXVNLFVBQ0EsSUFBQTNFLEVBQUE1SCxFQUFBOE4sd0JBRUE3bkMsS0FBQXluQyxLQUFBem5DLEtBQUEybkMsSUFBQXZILEVBQUFwZ0MsS0FBQXluQyxLQUNBem5DLEtBQUE4bkMsMkJBQUEsRUFDQTluQyxLQUFBK25DLE9BQUEvbkMsS0FBQWdvQyxNQUFBaG9DLEtBQUE0aEMsTUFBQTVoQyxLQUFBeW5DLEtBRUF6bkMsS0FBQStuQyxPQUFBL25DLEtBQUE0aEMsTUFBQTVoQyxLQUFBeW5DLEtBQUE5RixHQUFBdkIsRUFBQXBnQyxLQUFBeW5DLElBQ0F0SCxFQUFBbmdDLEtBQUF5bkMsR0FBQTlGLEdBQUEsR0FBQTNoQyxLQUFBeW5DLEdBQUF2TCxXQUFBbDhCLEtBQUEwbkMsSUFDQTFuQyxLQUFBZ29DLE1BQUFob0MsS0FBQTJuQyxLQUFBaEcsR0FBQXZCLEVBQUFwZ0MsS0FBQTJuQyxJQUNBeEgsRUFBQW5nQyxLQUFBMm5DLEdBQUFoRyxHQUFBLEdBQUEzaEMsS0FBQTJuQyxHQUFBekwsV0FBQWw4QixLQUFBNG5DLEdBQUEsS0FLQU4sRUFBQTVJLFdBQ0E0RCxTQUFBLEtBQ0FWLE1BQUEsS0FDQW1HLE9BQUEsS0FDQUMsTUFBQSxLQUNBRiwyQkFBQSxFQUVBRyxNQUFBLFdBQ0Fqb0MsS0FBQXNpQyxTQUFBLEtBQ0F0aUMsS0FBQTRoQyxNQUFBNWhDLEtBQUErbkMsUUFHQXhGLFFBQUEsV0FDQSxRQUFBdmlDLEtBQUE0aEMsT0FHQTU1QixLQUFBLFdBRUEsSUFBQTZCLEVBQUE3SixLQUFBc2lDLFNBQUF0aUMsS0FBQTRoQyxNQWVBLE9BZEEvM0IsSUFDQTdKLEtBQUE0aEMsTUFBQS8zQixJQUFBN0osS0FBQWdvQyxNQUFBbitCLEVBQUEyMkIsWUFBQSxLQUdBSixFQUFBdjJCLElBQUE3SixLQUFBdW5DLGtDQUNBMTlCLElBQUE3SixLQUFBMm5DLEtBQ0E5OUIsSUFBQWs2QixXQUFBLElBQUFDLFdBQUFoa0MsS0FBQTRuQyxHQUFBLzlCLEVBQUFsSCxPQUFBM0MsS0FBQTRuQyxJQUVBNW5DLEtBQUFzaUMsV0FBQXRpQyxLQUFBeW5DLEtBQ0E1OUIsSUFBQWs2QixXQUFBLElBQUFDLFdBQUEsRUFBQWhrQyxLQUFBMG5DLE1BS0E3OUIsR0FHQXVMLE9BQUEsV0FDQSxJQUFBd0wsRUFBQW9GLEVBQUFuYyxFQUFBN0osS0FBQXNpQyxVQUVBbEMsRUFBQXYyQixRQUFBN0osS0FBQXluQyxJQUFBNTlCLElBQUE3SixLQUFBMm5DLEdBT0E5OUIsRUFBQWkyQixZQUNBbUYsRUFBQXA3QixJQVBBK1csRUFBQS9XLElBQUE3SixLQUFBeW5DLEdBQUF6bkMsS0FBQTBuQyxHQUFBLEtBQ0ExaEIsRUFBQW5jLElBQUE3SixLQUFBMm5DLEdBQUEzbkMsS0FBQTRuQyxHQUFBLzlCLEVBQUFsSCxTQUVBa0gsRUFBQW02QixXQUFBcGpCLEVBQUFvRixFQUFBcEYsSUFXQWttQiwyQkFBQSxXQUVBLE9BQUF2QixFQURBdmxDLEtBQUFzaUMsU0FDQXRpQyxLQUFBKzVCLFFBR0FnTixtQkFBQSxXQUNBLElBQUFtQixFQUNBLEdBQUFsb0MsS0FBQThuQywyQkFDQUksRUFBQWxvQyxLQUFBKzVCLE1BQUFvTyxjQUNBbHhCLFVBQUEsT0FDaUIsQ0FDakJpeEIsRUFBQSxJQUFBRSxHQUFBMUMsRUFBQTFsQyxLQUFBKzVCLFFBQ0EsSUFBQWx3QixFQUFBN0osS0FBQXNpQyxTQUNBa0QsRUFBQTM3QixFQUFBdzhCLEVBQUEsRUFBQVosRUFBQTU3QixFQUFBeThCLEVBQUE3QyxFQUFBNTVCLEdBRUE2NUIsRUFBQTc1QixFQUFBN0osS0FBQXluQyxNQUNBakMsRUFBQXhsQyxLQUFBeW5DLEdBQ0FwQixFQUFBcm1DLEtBQUEwbkMsSUFFQWhFLEVBQUE3NUIsRUFBQTdKLEtBQUEybkMsTUFDQWxDLEVBQUF6bEMsS0FBQTJuQyxHQUNBckIsRUFBQXRtQyxLQUFBNG5DLElBR0FTLEdBQUFILEVBQUExQyxFQUFBYSxFQUFBWixFQUFBYSxHQUVBLFdBQUFnQixFQUFBWSxFQUFBbG9DLEtBQUF1bkMsa0NBR0E5RSxPQUFBLFdBQ0F6aUMsS0FBQSs1QixNQUFBLzVCLEtBQUFzaUMsU0FBQXRpQyxLQUFBNGhDLE1BQUE1aEMsS0FBQStuQyxPQUFBL25DLEtBQUFnb0MsTUFBQWhvQyxLQUFBeW5DLEdBQUF6bkMsS0FBQTBuQyxHQUFBMW5DLEtBQUEybkMsR0FBQTNuQyxLQUFBNG5DLEdBQUEsT0FNQSxJQUFBVSxHQUFBLGdCQUNBQyxHQUFBLFFBRUFDLEdBQUEsbUJBQ0FDLEdBQUEsYUFFQSxTQUFBQyxFQUFBQyxHQUNBLGdCQUFBbkosRUFBQVUsR0FFQSxJQURBLElBQUFob0IsRUFBQWdTLEVBQUFnVyxFQUFBVixJQUFBTSxXQUNBNVYsR0FBQSxDQUVBLEdBREFoUyxFQUFBZ1MsRUFBQWlTLFNBQ0FrRCxFQUFBc0osRUFBQXp3QixHQUNBLE9BQUFnUyxFQUVBQSxJQUFBNFYsV0FFQSxhQUlBLElBQUE4SSxFQUFBRixHQUFBLE9BQ0FHLEVBQUFILEdBbkJBLFlBb0JBSSxFQUFBSixHQUFBLFVBRUEsU0FBQUssRUFBQXZKLEVBQUF3SixHQUNBLEdBQUFGLEVBQUF0SixFQUFBd0osR0FDQSxVQUFBakgsRUFBQSx5QkFJQSxTQUFBa0gsRUFBQXpKLEVBQUEwSixHQUNBLElBQUE3SixFQUFBNkosRUFBQTFKLEVBQUFyRCxVQUNBLFVBQUE0RixFQUFBLHlCQUlBLFNBQUFvSCxFQUFBM0osRUFBQXNDLEdBQ0EsR0FBQUEsRUFBQSxHQUFBQSxHQUFBMUIsRUFBQVosS0FBQTc4QixPQUFBNjhCLEVBQUF0RCxXQUFBdjVCLFFBQ0EsVUFBQW8vQixFQUFBLGtCQUlBLFNBQUFxSCxFQUFBekosRUFBQUMsR0FDQSxHQUFBZ0osRUFBQWpKLEdBQUEsS0FBQWlKLEVBQUFoSixHQUFBLEdBQ0EsVUFBQW1DLEVBQUEsc0JBSUEsU0FBQXNILEVBQUE3SixHQUNBLEdBQUFxSixFQUFBckosR0FBQSxHQUNBLFVBQUF1QyxFQUFBLCtCQUlBLFNBQUF1SCxFQUFBOUosRUFBQXdDLEdBQ0EsSUFBQXhDLEVBQ0EsVUFBQXVDLEVBQUFDLEdBSUEsU0FBQXVILEVBQUEvSixFQUFBc0MsR0FDQSxPQUFBQSxJQUFBMUIsRUFBQVosS0FBQTc4QixPQUFBNjhCLEVBQUF0RCxXQUFBdjVCLFFBR0EsU0FBQTZtQyxFQUFBelAsR0FDQSxRQUFBQSxFQUFBeUwsa0JBQUF6TCxFQUFBMEwsZ0JBQ0FuRSxJQUFBOEIsRUFBQTdCLGFBQUF4SCxFQUFBeUwsaUJBQUFwQyxFQUFBN0IsYUFBQXhILEVBQUEwTCxpQkFDQXBCLEVBQUF0SyxFQUFBeUwsaUJBQUFuQixFQUFBdEssRUFBQTBMLGVBQ0E4RCxFQUFBeFAsRUFBQXlMLGVBQUF6TCxFQUFBc00sY0FDQWtELEVBQUF4UCxFQUFBMEwsYUFBQTFMLEVBQUF1TSxXQUdBLFNBQUFILEVBQUFwTSxHQUNBLElBQUF5UCxFQUFBelAsR0FDQSxVQUFBOEUsTUFBQSxxRkFBQTlFLEVBQUE0SSxVQUFBLEtBT0EsSUFBQThHLEVBQUF6NEIsU0FBQW1ELGNBQUEsU0FDQXUxQixHQUFBLEVBQ0EsSUFDQUQsRUFBQW4xQixVQUFBLFdBQ0FvMUIsRUFBQSxHQUFBRCxFQUFBeEgsV0FBQTlGLFNBQ1MsTUFBQXhyQixJQUlUOHBCLEVBQUFHLFNBQUE4TyxzQkFFQSxJQUFBQyxFQUFBRCxFQU1BLFNBQUFFLEdBRUEsSUFBQXBLLEVBQUF4L0IsS0FBQXdsQyxlQUNBdkwsRUFBQTBHLEVBQUFuQixHQUlBLElBQUFBLEVBQ0EsVUFBQXVDLEVBQUEscUJBS0EsSUFBQXpzQixFQUFBLEtBdUNBLE9BcENBLEdBQUFrcUIsRUFBQXJELFNBQ0E3bUIsRUFBQWtxQixFQUdpQlksRUFBQVosS0FDakJscUIsRUFBQTh0QixFQUFBSSxjQUFBaEUsS0FjQWxxQixFQVJBLE9BQUFBLEdBQ0EsUUFBQUEsRUFBQThuQixVQUNBZ0csRUFBQUMsZ0JBQUExQyxFQUFBcnJCLEdBQUE4c0Isa0JBQ0FnQixFQUFBQyxnQkFBQS90QixHQUtBMmtCLEVBQUE5bEIsY0FBQSxRQUVBbUIsRUFBQXl1QixXQUFBLElBT0F6dkIsVUFBQXMxQixFQVFBeEcsRUFBQStCLHlCQUFBN3ZCLElBS0EsU0FBQXMwQixHQUNBLElBQ0F0MEIsRUFEQW93QixFQUFBMWxDLE1BQ0FtVSxjQUFBLFFBR0EsT0FGQW1CLEVBQUFoQixVQUFBczFCLEVBRUF4RyxFQUFBK0IseUJBQUE3dkIsSUFHQSxTQUFBdTBCLEVBQUE5UCxFQUFBOEosR0FDQXNDLEVBQUFwTSxHQUVBLElBQUEwTixFQUFBMU4sRUFBQXlMLGVBQUFrQyxFQUFBM04sRUFBQXNNLFlBQUFzQixFQUFBNU4sRUFBQTBMLGFBQUFtQyxFQUFBN04sRUFBQXVNLFVBQ0F3RCxFQUFBckMsSUFBQUUsRUFFQXZILEVBQUF1SCxJQUFBQyxFQUFBLEdBQUFBLEVBQUFELEVBQUFobEMsUUFDQWloQyxFQUFBK0QsRUFBQUMsRUFBQS9ELEdBR0F6RCxFQUFBcUgsSUFBQUMsRUFBQSxHQUFBQSxFQUFBRCxFQUFBOWtDLFNBQ0E4a0MsRUFBQTdELEVBQUE2RCxFQUFBQyxFQUFBN0QsR0FDQWlHLEdBQ0FsQyxHQUFBRixFQUNBQyxFQUFBRixHQUNpQkUsR0FBQUYsRUFBQTNILFlBQUE4SCxHQUFBckksRUFBQWtJLElBQ2pCRyxJQUVBRixFQUFBLEdBRUEzTixFQUFBZ1EsZUFBQXRDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0EsU0FBQW9DLEVBQUFqUSxHQUNBb00sRUFBQXBNLEdBQ0EsSUFBQXJyQixFQUFBcXJCLEVBQUE4Tix3QkFBQS9ILFdBQUFpRSxXQUFBLEdBRUEsT0FEQXIxQixFQUFBc3RCLFlBQUFqQyxFQUFBa1EsaUJBQ0F2N0IsRUFBQTRGLFVBS0EsSUFBQTQxQixHQUFBLHNFQUNBLDJCQUVBQyxFQUFBLEVBQUFDLEVBQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQ0FDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUEsRUFzV0EsU0FBQUMsR0FBQXRYLEdBQ0FBLEVBQUF1WCxlQUFBVCxFQUNBOVcsRUFBQXdYLGFBQUFULEVBQ0EvVyxFQUFBeVgsV0FBQVQsR0FDQWhYLEVBQUEwWCxhQUFBVCxHQUVBalgsRUFBQTJYLFlBQUFULEdBQ0FsWCxFQUFBNFgsV0FBQVQsR0FDQW5YLEVBQUE2WCxzQkFBQVQsR0FDQXBYLEVBQUE4WCxZQUFBVCxHQUdBLFNBQUFVLEdBQUFDLEdBQ0FWLEdBQUFVLEdBQ0FWLEdBQUFVLEVBQUEzTSxXQUdBLFNBQUE0TSxHQUFBQyxFQUFBQyxHQUNBLGtCQUNBckYsRUFBQW5tQyxNQUVBLElBS0F5ckMsRUFMQWhFLEVBQUF6bkMsS0FBQXdsQyxlQUFBa0MsRUFBQTFuQyxLQUFBcW1DLFlBQUExRSxFQUFBM2hDLEtBQUE2bkMsd0JBRUFaLEVBQUEsSUFBQUssRUFBQXRuQyxNQUFBLEdBSUF5bkMsSUFBQTlGLElBR0E4RixHQURBZ0UsRUFBQTdGLEVBREF6RixFQUFBc0gsRUFBQTlGLEdBQUEsS0FFQW5DLEtBQ0FrSSxFQUFBK0QsRUFBQTNKLFFBSUEwRSxFQUFBUyxFQUFBb0MsR0FFQXBDLEVBQUFnQixRQUdBLElBQUF5RCxFQUFBSCxFQUFBdEUsR0FNQSxPQUxBQSxFQUFBeEUsU0FHQStJLEVBQUF4ckMsS0FBQXluQyxFQUFBQyxFQUFBRCxFQUFBQyxHQUVBZ0UsR0FJQSxTQUFBQyxHQUFBTixFQUFBRyxHQUNBLFNBQUFJLEVBQUFDLEVBQUFDLEdBQ0EsZ0JBQUF0TSxHQUNBeUosRUFBQXpKLEVBQUE4SSxHQUNBVyxFQUFBNUUsRUFBQTdFLEdBQUErSSxHQUVBLElBQUFrRCxHQUFBSSxFQUFBbEcsRUFBQUMsR0FBQXBHLElBQ0FzTSxFQUFBQyxFQUFBQyxHQUFBaHNDLEtBQUF5ckMsRUFBQWpNLEtBQUFpTSxFQUFBM0osU0FJQSxTQUFBaUssRUFBQWhTLEVBQUF5RixFQUFBc0MsR0FDQSxJQUFBNkYsRUFBQTVOLEVBQUEwTCxhQUFBbUMsRUFBQTdOLEVBQUF1TSxVQUNBOUcsSUFBQXpGLEVBQUF5TCxnQkFBQTFELElBQUEvSCxFQUFBc00sY0FHQWhDLEVBQUE3RSxJQUFBNkUsRUFBQXNELElBQUEsR0FBQXJELEVBQUE5RSxFQUFBc0MsRUFBQTZGLEVBQUFDLEtBQ0FELEVBQUFuSSxFQUNBb0ksRUFBQTlGLEdBRUEwSixFQUFBelIsRUFBQXlGLEVBQUFzQyxFQUFBNkYsRUFBQUMsSUFJQSxTQUFBb0UsRUFBQWpTLEVBQUF5RixFQUFBc0MsR0FDQSxJQUFBMkYsRUFBQTFOLEVBQUF5TCxlQUFBa0MsRUFBQTNOLEVBQUFzTSxZQUNBN0csSUFBQXpGLEVBQUEwTCxjQUFBM0QsSUFBQS9ILEVBQUF1TSxZQUdBakMsRUFBQTdFLElBQUE2RSxFQUFBb0QsS0FBQSxHQUFBbkQsRUFBQTlFLEVBQUFzQyxFQUFBMkYsRUFBQUMsS0FDQUQsRUFBQWpJLEVBQ0FrSSxFQUFBNUYsR0FFQTBKLEVBQUF6UixFQUFBME4sRUFBQUMsRUFBQWxJLEVBQUFzQyxJQUtBLElBQUFtSyxFQUFBLGFBQ0FBLEVBQUF2TixVQUFBakUsRUFBQXVFLGVBQ0FxTSxFQUFBM00sVUFBQSxJQUFBdU4sRUFFQTNSLEVBQUFKLE9BQUFtUixFQUFBM00sV0FDQXdOLFNBQUEsU0FBQTFNLEVBQUFzQyxHQUNBaUgsRUFBQXZKLEdBQUEsR0FDQTJKLEVBQUEzSixFQUFBc0MsR0FFQWlLLEVBQUEvckMsS0FBQXcvQixFQUFBc0MsSUFHQXFLLE9BQUEsU0FBQTNNLEVBQUFzQyxHQUNBaUgsRUFBQXZKLEdBQUEsR0FDQTJKLEVBQUEzSixFQUFBc0MsR0FFQWtLLEVBQUFoc0MsS0FBQXcvQixFQUFBc0MsSUFXQWlJLGVBQUEsV0FDQSxJQUFBcUMsRUFBQWxxQixVQUNBdWxCLEVBQUEyRSxFQUFBLEdBQUExRSxFQUFBMEUsRUFBQSxHQUFBekUsRUFBQUYsRUFBQUcsRUFBQUYsRUFFQSxPQUFBMEUsRUFBQXpwQyxRQUNBLE9BQ0FpbEMsRUFBQXdFLEVBQUEsR0FDQSxNQUNBLE9BQ0F6RSxFQUFBeUUsRUFBQSxHQUNBeEUsRUFBQXdFLEVBQUEsR0FJQVosRUFBQXhyQyxLQUFBeW5DLEVBQUFDLEVBQUFDLEVBQUFDLElBR0F5RSxZQUFBLFNBQUE3TSxFQUFBc0MsRUFBQWdLLEdBQ0E5ckMsS0FBQSxPQUFBOHJDLEVBQUEsZ0JBQUF0TSxFQUFBc0MsSUFHQXdLLGVBQUFWLEdBQUEsTUFDQVcsY0FBQVgsR0FBQSxNQUNBWSxhQUFBWixHQUFBLE1BQ0FhLFlBQUFiLEdBQUEsTUFFQTMwQixTQUFBLFNBQUE2MEIsR0FDQTNGLEVBQUFubUMsTUFDQThyQyxFQUNBTixFQUFBeHJDLFVBQUF3bEMsZUFBQXhsQyxLQUFBcW1DLFlBQUFybUMsS0FBQXdsQyxlQUFBeGxDLEtBQUFxbUMsYUFFQW1GLEVBQUF4ckMsVUFBQXlsQyxhQUFBemxDLEtBQUFzbUMsVUFBQXRtQyxLQUFBeWxDLGFBQUF6bEMsS0FBQXNtQyxZQUlBb0csbUJBQUEsU0FBQWxOLEdBQ0F1SixFQUFBdkosR0FBQSxHQUVBZ00sRUFBQXhyQyxLQUFBdy9CLEVBQUEsRUFBQUEsRUFBQWlFLEVBQUFqRSxLQUdBbU4sV0FBQSxTQUFBbk4sR0FDQXVKLEVBQUF2SixHQUFBLEdBQ0F5SixFQUFBekosRUFBQThJLEdBRUEsSUFBQTFuQixFQUFBK2tCLEVBQUFuRyxHQUFBeFosRUFBQTRmLEVBQUFwRyxHQUNBZ00sRUFBQXhyQyxLQUFBNGdCLEVBQUE0ZSxLQUFBNWUsRUFBQWtoQixPQUFBOWIsRUFBQXdaLEtBQUF4WixFQUFBOGIsU0FHQThLLGdCQUFBdEIsR0FBQW5FLEVBQUFxRSxHQUVBcUIsZUFBQXZCLEdBQUF0RSxFQUFBd0UsR0FFQXNCLG9CQUFBLFdBQ0EzRyxFQUFBbm1DLE1BQ0FxcEMsRUFBQXJwQyxLQUFBd2xDLGdCQUNBNkQsRUFBQXJwQyxLQUFBeWxDLGNBSUEsSUFBQXdCLEVBQUEsSUFBQUssRUFBQXRuQyxNQUFBLEdBQ0Erc0MsRUFBQTlGLEVBQUFjLFFBQUF4QyxFQUFBMEIsRUFBQWMsT0FBQS9uQyxPQUNBaW5DLEVBQUFlLE9BQUF6QyxFQUFBMEIsRUFBQWUsTUFBQWhvQyxNQUVBLE9BREFpbkMsRUFBQXhFLFVBQ0FzSyxHQUdBQyxnQkFBQSxXQUNBbkQsRUFBQTdwQyxPQUdBaXRDLG1DQUFBLFNBQUFwSixHQUNBZ0csRUFBQTdwQyxLQUFBNmpDLElBR0FxSixvQkFBQSxXQUNBL0csRUFBQW5tQyxNQUVBLElBb0NBbXRDLEVBcENBMUYsRUFBQXpuQyxLQUFBd2xDLGVBQUFrQyxFQUFBMW5DLEtBQUFxbUMsWUFBQXNCLEVBQUEzbkMsS0FBQXlsQyxhQUFBbUMsRUFBQTVuQyxLQUFBc21DLFVBRUE4RyxFQUFBLFNBQUE1TixHQUNBLElBQUEyTixFQUFBM04sRUFBQWdCLFlBQ0EyTSxLQUFBaFIsVUFBQXFELEVBQUFyRCxXQUNBd0wsRUFBQW5JLEVBQ0FvSSxFQUFBcEksRUFBQTc4QixPQUNBNjhCLEVBQUE2TixXQUFBRixFQUFBaGhDLE1BQ0E4NEIsRUFBQWtJLEtBSUFHLEVBQUEsU0FBQTlOLEdBQ0EsSUFBQTJOLEVBQUEzTixFQUFBQyxnQkFDQSxHQUFBME4sS0FBQWhSLFVBQUFxRCxFQUFBckQsU0FBQSxDQUNBc0wsRUFBQWpJLEVBQ0EsSUFBQStOLEVBQUEvTixFQUFBNzhCLE9BSUEsR0FIQStrQyxFQUFBeUYsRUFBQXhxQyxPQUNBNjhCLEVBQUFnTyxXQUFBLEVBQUFMLEVBQUFoaEMsTUFDQTg0QixFQUFBa0ksR0FDQTFGLEdBQUFFLEVBQ0FDLEdBQUFGLEVBQ0FDLEVBQUFGLE9BQzZCLEdBQUFFLEdBQUFuSSxFQUFBTSxXQUFBLENBQzdCLElBQUEyTixFQUFBbE8sRUFBQUMsR0FDQW9JLEdBQUE2RixHQUNBOUYsRUFBQW5JLEVBQ0FvSSxFQUFBMkYsR0FDaUMzRixFQUFBNkYsR0FDakM3RixPQU1BOEYsR0FBQSxFQUdBLEdBQUF0TixFQUFBdUgsR0FDQUMsR0FBQUQsRUFBQWhsQyxPQUNBeXFDLEVBQUF6RixHQUN5QixHQUFBQyxJQUN6QnVGLEVBQUF4RixFQUFBbEksa0JBQ0EwTixFQUFBaFIsVUFBQXdMLEVBQUF4TCxXQUNBeUwsRUFBQXVGLEVBQUF4cUMsT0FDQThrQyxHQUFBRSxJQUNBK0YsR0FBQSxHQUVBUCxFQUFBRSxXQUFBMUYsRUFBQXg3QixNQUNBODRCLEVBQUEwQyxHQUNBQSxFQUFBd0YsT0FHcUIsQ0FDckIsR0FBQXZGLEVBQUEsR0FDQSxJQUFBK0YsRUFBQWhHLEVBQUF6TCxXQUFBMEwsRUFBQSxHQUNBK0YsR0FBQXZOLEVBQUF1TixJQUNBUCxFQUFBTyxHQUdBRCxHQUFBMXRDLEtBQUF3bkMsVUFHQSxHQUFBa0csR0FDQSxHQUFBdE4sRUFBQXFILEdBQ0EsR0FBQUMsRUFDQTRGLEVBQUE3RixHQUM2QkMsR0FBQUQsRUFBQTlrQyxTQUM3QndxQyxFQUFBMUYsRUFBQWpILGNBQ0EyTSxFQUFBaFIsVUFBQXNMLEVBQUF0TCxXQUNBd0wsR0FBQXdGLElBQ0F4RixFQUFBRixFQUNBRyxHQUFBSCxFQUFBOWtDLFFBRUE4a0MsRUFBQTRGLFdBQUFGLEVBQUFoaEMsTUFDQTg0QixFQUFBa0ksU0FJQSxHQUFBekYsRUFBQUQsRUFBQXZMLFdBQUF2NUIsT0FBQSxDQUNBLElBQUFpckMsRUFBQW5HLEVBQUF2TCxXQUFBd0wsR0FDQWtHLEdBQUF4TixFQUFBd04sSUFDQU4sRUFBQU0sU0FLQW5HLEVBQUFFLEVBQ0FELEVBQUFFLEVBR0E0RCxFQUFBeHJDLEtBQUF5bkMsRUFBQUMsRUFBQUMsRUFBQUMsSUFHQWlHLGdCQUFBLFNBQUFyTyxFQUFBc0MsR0FDQWlILEVBQUF2SixHQUFBLEdBQ0EySixFQUFBM0osRUFBQXNDLEdBQ0E5aEMsS0FBQStwQyxlQUFBdkssRUFBQXNDLE1BSUFzSixHQUFBQyxHQU1BLFNBQUF5QyxHQUFBL1QsR0FDQUEsRUFBQXlOLFVBQUF6TixFQUFBeUwsaUJBQUF6TCxFQUFBMEwsY0FBQTFMLEVBQUFzTSxjQUFBdE0sRUFBQXVNLFVBQ0F2TSxFQUFBOE4sd0JBQUE5TixFQUFBeU4sVUFDQXpOLEVBQUF5TCxlQUFBcEMsRUFBQTFELGtCQUFBM0YsRUFBQXlMLGVBQUF6TCxFQUFBMEwsY0FHQSxTQUFBNEMsR0FBQXRPLEVBQUF5TCxFQUFBYSxFQUFBWixFQUFBYSxHQUNBdk0sRUFBQXlMLGlCQUNBekwsRUFBQXNNLGNBQ0F0TSxFQUFBMEwsZUFDQTFMLEVBQUF1TSxZQUNBdk0sRUFBQS9vQixTQUFBb3lCLEVBQUF6QyxZQUFBNkUsR0FFQXNJLEdBQUEvVCxHQUdBLFNBQUFxTyxHQUFBbk8sR0FDQWo2QixLQUFBd2xDLGVBQUF2TCxFQUNBajZCLEtBQUFxbUMsWUFBQSxFQUNBcm1DLEtBQUF5bEMsYUFBQXhMLEVBQ0FqNkIsS0FBQXNtQyxVQUFBLEVBQ0F0bUMsS0FBQWdSLFNBQUFpcEIsRUFDQTZULEdBQUE5dEMsTUF0cUJBczZCLEVBQUFKLE9BQUFPLEVBQUF1RSxnQkFDQStPLHNCQUFBLFNBQUFDLEVBQUFqVSxHQUlBLElBQUF3SyxFQUFBQyxFQUFBQyxFQUFBQyxFQUhBeUIsRUFBQW5tQyxNQUNBb3BDLEVBQUFwcEMsS0FBQXdsQyxlQUFBekwsRUFBQXlMLGdCQUdBLElBQUF5SSxFQUFBRCxHQUFBMUQsSUFBQTBELEdBQUE3RCxFQUFBLGNBQ0ErRCxFQUFBRixHQUFBNUQsR0FBQTRELEdBQUE3RCxFQUFBLGNBS0EsT0FKQTVGLEVBQUF2a0MsS0FBQWl1QyxFQUFBLGFBQ0F6SixFQUFBeGtDLEtBQUFpdUMsRUFBQSxVQUNBeEosRUFBQTFLLEVBQUFtVSxFQUFBLGFBQ0F4SixFQUFBM0ssRUFBQW1VLEVBQUEsVUFDQTVKLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBR0F5SixXQUFBLFNBQUEzTyxHQUtBLEdBSkEyRyxFQUFBbm1DLE1BQ0FpcEMsRUFBQXpKLEVBQUFnSixHQUNBYSxFQUFBcnBDLEtBQUF3bEMsZ0JBRUE5QixFQUFBbEUsRUFBQXgvQixLQUFBd2xDLGdCQUNBLFVBQUF6RCxFQUFBLHlCQU9BLElBQUErRCxFQUFBRCxFQUFBckcsRUFBQXgvQixLQUFBd2xDLGVBQUF4bEMsS0FBQXFtQyxhQUNBcm1DLEtBQUFzc0MsZUFBQXhHLElBR0FtRSxjQUFBLFdBR0EsSUFBQW1FLEVBQUFoSCxFQUNBLEdBSEFqQixFQUFBbm1DLE1BR0FBLEtBQUF3bkMsVUFDQSxPQUFBOUIsRUFBQTFsQyxNQUFBcWxDLHlCQUVBLEdBQUFybEMsS0FBQXdsQyxpQkFBQXhsQyxLQUFBeWxDLGNBQUFyRixFQUFBcGdDLEtBQUF3bEMsZ0JBS0EsT0FKQTRJLEVBQUFwdUMsS0FBQXdsQyxlQUFBekIsV0FBQSxJQUNBNTNCLEtBQUFpaUMsRUFBQWppQyxLQUFBMlUsTUFBQTlnQixLQUFBcW1DLFlBQUFybUMsS0FBQXNtQyxZQUNBYyxFQUFBMUIsRUFBQTFsQyxNQUFBcWxDLDBCQUNBckosWUFBQW9TLEdBQ0FoSCxFQUVBLElBQUFILEVBQUEsSUFBQUssRUFBQXRuQyxNQUFBLEdBSUEsT0FIQW91QyxFQXZlQSxTQUFBQyxFQUFBcEgsR0FFQSxJQURBLElBQUFxSCxFQUNBOU8sRUFBQTBILEVBQUFFLEVBQUExQixFQUFBdUIsRUFBQWxOLE9BQUFzTCx5QkFBeUc3RixFQUFBeUgsRUFBQWovQixRQUF3QixDQVNqSSxHQVJBc21DLEVBQUFySCxFQUFBSCw2QkFDQXRILElBQUF1RSxXQUFBdUssR0FDQUEsSUFDQXBILEVBQUFELEVBQUFGLHFCQUNBdkgsRUFBQXhELFlBQUFxUyxFQUFBbkgsSUFDQUEsRUFBQXpFLFVBR0EsSUFBQWpELEVBQUFyRCxTQUNBLFVBQUE0RixFQUFBLHlCQUVBcUYsRUFBQXBMLFlBQUF3RCxHQUVBLE9BQUE0SCxFQXVkQWlILENBQUFwSCxHQUNBQSxFQUFBeEUsU0FFQTJMLEdBSUF0QixvQkFBQSxXQUNBM0csRUFBQW5tQyxNQUNBcXBDLEVBQUFycEMsS0FBQXdsQyxnQkFDQTZELEVBQUFycEMsS0FBQXlsQyxjQUlBLElBQUF3QixFQUFBLElBQUFLLEVBQUF0bkMsTUFBQSxHQUNBK3NDLEVBQUE5RixFQUFBYyxRQUFBeEMsRUFBQTBCLEVBQUFjLE9BQUEvbkMsT0FDQWluQyxFQUFBZSxPQUFBekMsRUFBQTBCLEVBQUFlLE1BQUFob0MsTUFFQSxPQURBaW5DLEVBQUF4RSxVQUNBc0ssR0FHQXdCLGlCQUFBLFNBQUEvTyxHQUdBLEdBRkF5SixFQUFBekosRUFBQWlKLElBRUF6b0MsS0FBQThzQyxzQkFDQSxVQUFBL0ssRUFBQSxxQkFJQSxJQUFBbG1CLEVBQUE3YixLQUFBNHNDLGtCQUdBLEdBQUFwTixFQUFBZ1AsZ0JBQ0EsS0FBQWhQLEVBQUFpUCxXQUNBalAsRUFBQTBGLFlBQUExRixFQUFBaVAsV0FLQTVJLEVBQUFyRyxFQUFBeC9CLEtBQUF3bEMsZUFBQXhsQyxLQUFBcW1DLGFBQ0E3RyxFQUFBeEQsWUFBQW5nQixHQUVBN2IsS0FBQTJzQyxXQUFBbk4sSUFHQTJJLFdBQUEsV0FDQWhDLEVBQUFubUMsTUFHQSxJQUZBLElBQ0F5SCxFQURBc3lCLEVBQUEsSUFBQXFPLEdBQUExQyxFQUFBMWxDLE9BQ0F3VCxFQUFBMDJCLEVBQUF2bkMsT0FDQTZRLEtBRUF1bUIsRUFEQXR5QixFQUFBeWlDLEVBQUExMkIsSUFDQXhULEtBQUF5SCxHQUVBLE9BQUFzeUIsR0FHQTZCLFNBQUEsV0FDQXVLLEVBQUFubUMsTUFDQSxJQUFBeW5DLEVBQUF6bkMsS0FBQXdsQyxlQUNBLEdBQUFpQyxJQUFBem5DLEtBQUF5bEMsY0FBQXJGLEVBQUFxSCxHQUNBLFVBQUFBLEVBQUF0TCxVQUFBLEdBQUFzTCxFQUFBdEwsU0FBQXNMLEVBQUF0N0IsS0FBQTJVLE1BQUE5Z0IsS0FBQXFtQyxZQUFBcm1DLEtBQUFzbUMsV0FBQSxHQUVBLElBQUFvSSxLQUFBekgsRUFBQSxJQUFBSyxFQUFBdG5DLE1BQUEsR0FRQSxPQVBBd21DLEVBQUFTLEVBQUEsU0FBQXpILEdBRUEsR0FBQUEsRUFBQXJELFVBQUEsR0FBQXFELEVBQUFyRCxVQUNBdVMsRUFBQXJ0QyxLQUFBbStCLEVBQUFyekIsUUFHQTg2QixFQUFBeEUsU0FDQWlNLEVBQUF0MkIsS0FBQSxLQU9BdTJCLFlBQUEsU0FBQW5QLEdBQ0EyRyxFQUFBbm1DLE1BRUEsSUFBQXlnQyxFQUFBakIsRUFBQU0sV0FDQTJOLEVBQUFsTyxFQUFBQyxHQUVBLElBQUFpQixFQUNBLFVBQUFzQixFQUFBLGlCQUdBLElBQUFxRSxFQUFBcG1DLEtBQUE0dUMsYUFBQW5PLEVBQUFnTixHQUNBbEgsRUFBQXZtQyxLQUFBNHVDLGFBQUFuTyxFQUFBZ04sRUFBQSxHQUVBLE9BQUFySCxFQUFBLEVBQ0FHLEVBQUEsRUFBQWtFLEdBQUFGLEdBRUFoRSxFQUFBLEVBQUFpRSxHQUFBRSxJQUlBa0UsYUFBQSxTQUFBcFAsRUFBQXNDLEdBS0EsT0FKQXFFLEVBQUFubUMsTUFDQXNwQyxFQUFBOUosRUFBQSx5QkFDQTRKLEVBQUE1SixFQUFBeC9CLEtBQUF3bEMsZ0JBRUFsQixFQUFBOUUsRUFBQXNDLEVBQUE5aEMsS0FBQXdsQyxlQUFBeGxDLEtBQUFxbUMsYUFBQSxHQUNBLEVBQ2lCL0IsRUFBQTlFLEVBQUFzQyxFQUFBOWhDLEtBQUF5bEMsYUFBQXpsQyxLQUFBc21DLFdBQUEsRUFDakIsRUFFQSxHQUdBcUQsMkJBRUFrRixPQUFBLFdBQ0EsT0FBQTdFLEVBQUFocUMsT0FLQTh1QyxlQUFBLFNBQUF0UCxFQUFBMEcsR0FFQSxHQURBQyxFQUFBbm1DLE1BQ0Fxa0MsRUFBQTdFLElBeG9CQTZFLEVBd29CQXJrQyxLQXhvQkF3bEMsZ0JBeW9CQSxTQTFvQkEsSUE2b0JBL0UsRUFBQWpCLEVBQUFNLFdBQUFnQyxFQUFBdkMsRUFBQUMsR0FDQSxJQUFBaUIsRUFDQSxTQUdBLElBQUEyRixFQUFBOUIsRUFBQTdELEVBQUFxQixFQUFBOWhDLEtBQUF5bEMsYUFBQXpsQyxLQUFBc21DLFdBQ0FDLEVBQUFqQyxFQUFBN0QsRUFBQXFCLEVBQUEsRUFBQTloQyxLQUFBd2xDLGVBQUF4bEMsS0FBQXFtQyxhQUVBLE9BQUFILEVBQUFFLEdBQUEsR0FBQUcsR0FBQSxFQUFBSCxFQUFBLEdBQUFHLEVBQUEsR0FHQXdJLGVBQUEsU0FBQXZQLEVBQUFzQyxHQUtBLE9BSkFxRSxFQUFBbm1DLE1BQ0FzcEMsRUFBQTlKLEVBQUEseUJBQ0E0SixFQUFBNUosRUFBQXgvQixLQUFBd2xDLGdCQUVBbEIsRUFBQTlFLEVBQUFzQyxFQUFBOWhDLEtBQUF3bEMsZUFBQXhsQyxLQUFBcW1DLGNBQUEsR0FDQS9CLEVBQUE5RSxFQUFBc0MsRUFBQTloQyxLQUFBeWxDLGFBQUF6bEMsS0FBQXNtQyxZQUFBLEdBTUEwSSxnQkFBQSxTQUFBalYsR0FDQSxPQUFBZ00sRUFBQS9sQyxLQUFBKzVCLEdBQUEsSUFJQWtWLHlCQUFBLFNBQUFsVixHQUNBLE9BQUFnTSxFQUFBL2xDLEtBQUErNUIsR0FBQSxJQUdBbVYsYUFBQSxTQUFBblYsR0FDQSxHQUFBLzVCLEtBQUFndkMsZ0JBQUFqVixHQUFBLENBQ0EsSUFBQXFNLEVBQUE5QixFQUFBdGtDLEtBQUF3bEMsZUFBQXhsQyxLQUFBcW1DLFlBQUF0TSxFQUFBeUwsZUFBQXpMLEVBQUFzTSxhQUNBRSxFQUFBakMsRUFBQXRrQyxLQUFBeWxDLGFBQUF6bEMsS0FBQXNtQyxVQUFBdk0sRUFBQTBMLGFBQUExTCxFQUFBdU0sV0FFQTZJLEVBQUFudkMsS0FBQW1vQyxhQU9BLE9BTkEsR0FBQS9CLEdBQ0ErSSxFQUFBakQsU0FBQW5TLEVBQUF5TCxlQUFBekwsRUFBQXNNLGFBRUEsR0FBQUUsR0FDQTRJLEVBQUFoRCxPQUFBcFMsRUFBQTBMLGFBQUExTCxFQUFBdU0sV0FFQTZJLEVBRUEsYUFHQUMsTUFBQSxTQUFBclYsR0FDQSxHQUFBLzVCLEtBQUFpdkMseUJBQUFsVixHQUFBLENBQ0EsSUFBQXNWLEVBQUFydkMsS0FBQW1vQyxhQU9BLE9BTkEsR0FBQTdELEVBQUF2SyxFQUFBeUwsZUFBQXpMLEVBQUFzTSxZQUFBcm1DLEtBQUF3bEMsZUFBQXhsQyxLQUFBcW1DLGNBQ0FnSixFQUFBbkQsU0FBQW5TLEVBQUF5TCxlQUFBekwsRUFBQXNNLGFBRUEsR0FBQS9CLEVBQUF2SyxFQUFBMEwsYUFBQTFMLEVBQUF1TSxVQUFBdG1DLEtBQUF5bEMsYUFBQXpsQyxLQUFBc21DLFlBQ0ErSSxFQUFBbEQsT0FBQXBTLEVBQUEwTCxhQUFBMUwsRUFBQXVNLFdBRUErSSxFQUVBLFVBQUF0TixFQUFBLDRCQUlBdU4sYUFBQSxTQUFBOVAsRUFBQStQLEdBQ0EsT0FBQUEsRUFDQXZ2QyxLQUFBOHVDLGVBQUF0UCxHQUFBLEdBRUF4L0IsS0FBQTJ1QyxZQUFBblAsSUFBQWtMLElBSUE4RSxxQkFBQSxTQUFBaFEsR0FDQSxPQUFBeC9CLEtBQUE0dUMsYUFBQXBQLEVBQUEsT0FBQXgvQixLQUFBNHVDLGFBQUFwUCxFQUFBaUUsRUFBQWpFLEtBQUEsR0FHQWlRLGNBQUEsU0FBQTFWLEdBQ0EsSUFBQW1WLEVBQUFsdkMsS0FBQWt2QyxhQUFBblYsR0FDQSxjQUFBbVYsR0FBQW5WLEVBQUEySSxPQUFBd00sSUFHQVEsaUJBQUEsU0FBQWxRLEdBQ0EsSUFBQW1RLEVBQUEzdkMsS0FBQW1vQyxhQUNBd0gsRUFBQWhELFdBQUFuTixHQUNBLElBQUFvUSxFQUFBRCxFQUFBRSxVQUFBLElBQ0EsR0FBQUQsRUFBQWp0QyxPQUFBLEdBQ0FndEMsRUFBQXpELFNBQUEwRCxFQUFBLE1BQ0EsSUFBQUUsRUFBQUYsRUFBQXBzQixNQUVBLE9BREFtc0IsRUFBQXhELE9BQUEyRCxJQUFBbnRDLFFBQ0EzQyxLQUFBeXZDLGNBQUFFLEdBRUEsT0FBQTN2QyxLQUFBd3ZDLHFCQUFBaFEsSUFJQXFRLFNBQUEsU0FBQWxILEVBQUExd0IsR0FFQSxPQURBa3VCLEVBQUFubUMsTUFobkJBLFNBQUErNUIsRUFBQTRPLEVBQUExd0IsR0FDQSxJQUFBd1osRUFBQXNlLEtBQUFwSCxNQUFBaG1DLFFBQ0FxdEMsSUFBQS8zQixFQUNBODNCLElBQ0F0ZSxFQUFBLElBQUFqWSxPQUFBLEtBQUFtdkIsRUFBQXZ3QixLQUFBLFlBR0EsSUFBQTYzQixLQXNCQSxPQXJCQXpKLEVBQUEsSUFBQWMsRUFBQXZOLEdBQUEsWUFBQXlGLEdBQ0EsS0FBQXVRLEdBQUF0ZSxFQUFBNW9CLEtBQUEyMkIsRUFBQXJELGNBR0E2VCxHQUFBLzNCLEVBQUF1bkIsSUFBQSxDQUtBLElBQUFpSSxFQUFBMU4sRUFBQXlMLGVBQ0EsR0FBQWhHLEdBQUFpSSxJQUFBckgsRUFBQXFILElBQUExTixFQUFBc00sYUFBQW9CLEVBQUE5a0MsT0FBQSxDQUlBLElBQUFnbEMsRUFBQTVOLEVBQUEwTCxhQUNBakcsR0FBQW1JLEdBQUF2SCxFQUFBdUgsSUFBQSxHQUFBNU4sRUFBQXVNLFdBSUEySixFQUFBNXVDLEtBQUFtK0IsT0FFQXlRLEVBb2xCQUMsQ0FBQWx3QyxLQUFBMm9DLEVBQUExd0IsSUFHQTBvQixZQUFBLFdBQ0EsT0FBQStFLEVBQUExbEMsT0FHQW13QyxlQUFBLFNBQUEzUSxHQUNBeC9CLEtBQUF3c0MsYUFBQWhOLEdBQ0F4L0IsS0FBQWlYLFVBQUEsSUFHQW01QixjQUFBLFNBQUE1USxHQUNBeC9CLEtBQUF1c0MsY0FBQS9NLEdBQ0F4L0IsS0FBQWlYLFVBQUEsSUFHQW81QixZQUFBLFNBQUFDLEdBQ0EsSUFBQXJXLEVBQUF5TCxFQUFBMWxDLE1BQ0F1d0MsRUFBQTlWLEVBQUEwQyxZQUFBbEQsR0FDQXFXLEtBQUFsTixFQUFBcEosUUFBQUMsR0FDQXNXLEVBQUE3RCxtQkFBQTRELEdBQ0EsSUFBQXZXLEVBQUEvNUIsS0FBQWt2QyxhQUFBcUIsR0FDQTN2QixFQUFBLEVBQUFvRixFQUFBLEVBT0EsT0FOQStULElBQ0F3VyxFQUFBcEUsT0FBQXBTLEVBQUF5TCxlQUFBekwsRUFBQXNNLGFBRUFyZ0IsR0FEQXBGLEVBQUEydkIsRUFBQTNVLFdBQUFqNUIsUUFDQW8zQixFQUFBNkIsV0FBQWo1QixTQUlBaWUsUUFDQW9GLE1BQ0FzcUIsa0JBSUFFLGVBQUEsU0FBQUMsR0FDQSxJQUFBSCxFQUFBRyxFQUFBSCxjQUNBSSxFQUFBLEVBQ0Exd0MsS0FBQWtzQyxTQUFBb0UsRUFBQSxHQUNBdHdDLEtBQUFpWCxVQUFBLEdBSUEsSUFIQSxJQUFBdW9CLEVBQ0FtUixFQUFBbjlCLEVBQUEwb0IsRUFEQTBVLEdBQUFOLEdBQUFPLEdBQUEsRUFBQWhLLEdBQUEsR0FHQUEsSUFBQXJILEVBQUFvUixFQUFBcHRCLFFBQ0EsTUFBQWdjLEVBQUFyRCxTQUNBd1UsRUFBQUQsRUFBQWxSLEVBQUE3OEIsUUFDQWt1QyxHQUFBSixFQUFBN3ZCLE9BQUE4dkIsR0FBQUQsRUFBQTd2QixPQUFBK3ZCLElBQ0Ezd0MsS0FBQWtzQyxTQUFBMU0sRUFBQWlSLEVBQUE3dkIsTUFBQTh2QixHQUNBRyxHQUFBLEdBRUFBLEdBQUFKLEVBQUF6cUIsS0FBQTBxQixHQUFBRCxFQUFBenFCLEtBQUEycUIsSUFDQTN3QyxLQUFBbXNDLE9BQUEzTSxFQUFBaVIsRUFBQXpxQixJQUFBMHFCLEdBQ0E3SixHQUFBLEdBRUE2SixFQUFBQyxPQUlBLElBREFuOUIsR0FEQTBvQixFQUFBc0QsRUFBQXRELFlBQ0F2NUIsT0FDQTZRLEtBQ0FvOUIsRUFBQXZ2QyxLQUFBNjZCLEVBQUExb0IsS0FNQTZ6QixRQUFBLFdBQ0Esa0JBR0EzRSxPQUFBLFNBQUEzSSxHQUNBLE9BQUFxTyxHQUFBMEksWUFBQTl3QyxLQUFBKzVCLElBR0FnWCxRQUFBLFdBQ0EsT0FBQXZILEVBQUF4cEMsT0FHQTJpQyxRQUFBLFdBQ0EsT0FBQUEsRUFBQTNpQyxPQUdBeWlDLE9BQUEsZUEwVUFrSixHQUFBdkQsR0FBQUMsSUFFQS9OLEVBQUFKLE9BQUFrTyxJQUNBOEIsa0JBQ0E1QyxnQkFDQThELDJCQUNBTyx3QkFDQWhKLFVBQ0FrTSxPQUFBN0UsRUFDQXRFLG1CQUNBb0wsWUFBQSxTQUFBRSxFQUFBQyxHQUNBLE9BQUFELEVBQUF4TCxpQkFBQXlMLEVBQUF6TCxnQkFDQXdMLEVBQUEzSyxjQUFBNEssRUFBQTVLLGFBQ0EySyxFQUFBdkwsZUFBQXdMLEVBQUF4TCxjQUNBdUwsRUFBQTFLLFlBQUEySyxFQUFBM0ssYUFJQTdMLEVBQUF5VyxTQUFBOUksS0FNQTNOLEVBQUFzRSxpQkFBQSxxQ0FBQXRFLEVBQUF4N0IsR0FDQSxJQUFBa3lDLEVBQUFDLEVBQ0FoTyxFQUFBM0ksRUFBQTJJLElBQ0E5SSxFQUFBRyxFQUFBSCxLQUNBdUgsRUFBQXVCLEVBQUF2QixZQUNBcVAsRUFBQXpXLEVBQUF5VyxTQUNBbFgsRUFBQW9KLEVBQUFwSixRQUNBbUssRUFBQWYsRUFBQWUsbUJBQ0EvRCxFQUFBZ0QsRUFBQWhELG9CQWtRQSxHQTdQQTNGLEVBQUFHLFNBQUFxQyxvQkFLQSxXQUNBLElBQUFvVSxFQXlCQXpGLEVBeEJBMUIsRUFBQWdILEVBQUFoSCxnQkFFQSxTQUFBb0gsRUFBQXZYLEdBRUEsSUFEQSxJQUFBdHlCLEVBQUErTCxFQUFBMDJCLEVBQUF2bkMsT0FDQTZRLEtBRUF1bUIsRUFEQXR5QixFQUFBeWlDLEVBQUExMkIsSUFDQXVtQixFQUFBd1gsWUFBQTlwQyxHQUdBc3lCLEVBQUF5TixVQUFBek4sRUFBQXlMLGlCQUFBekwsRUFBQTBMLGNBQUExTCxFQUFBc00sY0FBQXRNLEVBQUF1TSxVQWlCQTZLLEVBQUEsU0FBQXBYLEdBQ0EsSUFBQUEsRUFDQSxNQUFBOTZCLEVBQUE2L0IsWUFBQSx5Q0FFQTkrQixLQUFBdXhDLFlBQUF4WCxFQUNBdVgsRUFBQXR4QyxPQUdBa3hDLEVBQUF2RixxQkFBQXdGLEVBdEJBLFNBQUFwWCxFQUFBeUwsRUFBQWEsRUFBQVosRUFBQWEsR0FDQSxJQUFBa0wsRUFBQXpYLEVBQUF5TCxvQkFBQXpMLEVBQUFzTSxlQUNBb0wsRUFBQTFYLEVBQUEwTCxrQkFBQTFMLEVBQUF1TSxhQUNBb0wsR0FBQTNYLEVBQUEySSxPQUFBM0ksRUFBQXdYLGNBR0FDLEdBQUFDLEdBQUFDLEtBQ0EzWCxFQUFBb1MsT0FBQTFHLEVBQUFhLEdBQ0F2TSxFQUFBbVMsU0FBQTFHLEVBQUFhLE9BZ0JBZ0wsRUFBQUYsRUFBQXpTLFdBRUFpTyxXQUFBLFNBQUFuTixHQUNBeC9CLEtBQUF1eEMsWUFBQTVFLFdBQUFuTixHQUNBOFIsRUFBQXR4QyxPQUdBcXhDLEVBQUFwSCxjQUFBLFdBQ0EsT0FBQWpxQyxLQUFBdXhDLFlBQUF0SCxpQkFNQW9ILEVBQUE5QyxpQkFBQSxTQUFBL08sR0FDQXgvQixLQUFBdXhDLFlBQUFoRCxpQkFBQS9PLEdBQ0E4UixFQUFBdHhDLE9BR0FxeEMsRUFBQXA2QixTQUFBLFNBQUE2MEIsR0FDQTlyQyxLQUFBdXhDLFlBQUF0NkIsU0FBQTYwQixHQUNBd0YsRUFBQXR4QyxPQUdBcXhDLEVBQUFsSixXQUFBLFdBQ0EsV0FBQWdKLEVBQUFueEMsS0FBQXV4QyxZQUFBcEosZUFHQWtKLEVBQUFNLFFBQUEsV0FDQUwsRUFBQXR4QyxPQUdBcXhDLEVBQUF6VixTQUFBLFdBQ0EsT0FBQTU3QixLQUFBdXhDLFlBQUEzVixZQUtBLElBQUFnVyxFQUFBNWdDLFNBQUFvdUIsZUFBQSxRQUNBcEYsRUFBQWhwQixVQUFBZ3JCLFlBQUE0VixHQUNBLElBQUE3WCxFQUFBL29CLFNBQUFtc0IsY0FPQXBELEVBQUFtUyxTQUFBMEYsRUFBQSxHQUNBN1gsRUFBQW9TLE9BQUF5RixFQUFBLEdBRUEsSUFDQTdYLEVBQUFtUyxTQUFBMEYsRUFBQSxHQUVBUCxFQUFBbkYsU0FBQSxTQUFBMU0sRUFBQXNDLEdBQ0E5aEMsS0FBQXV4QyxZQUFBckYsU0FBQTFNLEVBQUFzQyxHQUNBd1AsRUFBQXR4QyxPQUdBcXhDLEVBQUFsRixPQUFBLFNBQUEzTSxFQUFBc0MsR0FDQTloQyxLQUFBdXhDLFlBQUFwRixPQUFBM00sRUFBQXNDLEdBQ0F3UCxFQUFBdHhDLE9BR0E0ckMsRUFBQSxTQUFBdnJDLEdBQ0EsZ0JBQUFtL0IsR0FDQXgvQixLQUFBdXhDLFlBQUFseEMsR0FBQW0vQixHQUNBOFIsRUFBQXR4QyxRQUlpQixNQUFBMjhCLEdBRWpCMFUsRUFBQW5GLFNBQUEsU0FBQTFNLEVBQUFzQyxHQUNBLElBQ0E5aEMsS0FBQXV4QyxZQUFBckYsU0FBQTFNLEVBQUFzQyxHQUN5QixNQUFBbkYsR0FDekIzOEIsS0FBQXV4QyxZQUFBcEYsT0FBQTNNLEVBQUFzQyxHQUNBOWhDLEtBQUF1eEMsWUFBQXJGLFNBQUExTSxFQUFBc0MsR0FFQXdQLEVBQUF0eEMsT0FHQXF4QyxFQUFBbEYsT0FBQSxTQUFBM00sRUFBQXNDLEdBQ0EsSUFDQTloQyxLQUFBdXhDLFlBQUFwRixPQUFBM00sRUFBQXNDLEdBQ3lCLE1BQUFuRixHQUN6QjM4QixLQUFBdXhDLFlBQUFyRixTQUFBMU0sRUFBQXNDLEdBQ0E5aEMsS0FBQXV4QyxZQUFBcEYsT0FBQTNNLEVBQUFzQyxHQUVBd1AsRUFBQXR4QyxPQUdBNHJDLEVBQUEsU0FBQXZyQyxFQUFBd3hDLEdBQ0EsZ0JBQUFyUyxHQUNBLElBQ0F4L0IsS0FBQXV4QyxZQUFBbHhDLEdBQUFtL0IsR0FDNkIsTUFBQTdDLEdBQzdCMzhCLEtBQUF1eEMsWUFBQU0sR0FBQXJTLEdBQ0F4L0IsS0FBQXV4QyxZQUFBbHhDLEdBQUFtL0IsR0FFQThSLEVBQUF0eEMsUUFLQXF4QyxFQUFBL0UsZUFBQVYsRUFBQSxpQ0FDQXlGLEVBQUE5RSxjQUFBWCxFQUFBLCtCQUNBeUYsRUFBQTdFLGFBQUFaLEVBQUEsaUNBQ0F5RixFQUFBNUUsWUFBQWIsRUFBQSwrQkFNQXlGLEVBQUEzRSxtQkFBQSxTQUFBbE4sR0FDQXgvQixLQUFBK3BDLGVBQUF2SyxFQUFBLEVBQUE0RCxFQUFBSyxjQUFBakUsS0FRQXpGLEVBQUEyUyxtQkFBQWtGLEdBQ0E3WCxFQUFBb1MsT0FBQXlGLEVBQUEsR0FFQSxJQUFBRSxFQUFBOWdDLFNBQUFtc0IsY0FDQTJVLEVBQUFwRixtQkFBQWtGLEdBQ0FFLEVBQUEzRixPQUFBeUYsRUFBQSxHQUNBRSxFQUFBNUYsU0FBQTBGLEVBQUEsSUFFQSxHQUFBN1gsRUFBQWdVLHNCQUFBaFUsRUFBQThRLGFBQUFpSCxJQUNBLEdBQUEvWCxFQUFBZ1Usc0JBQUFoVSxFQUFBZ1IsYUFBQStHLEdBR0FULEVBQUF0RCxzQkFBQSxTQUFBcnNDLEVBQUFxNEIsR0FPQSxPQUxBcjRCLElBREFxNEIsSUFBQXdYLGFBQUF4WCxHQUNBOFEsYUFDQW5wQyxFQUFBcTRCLEVBQUFnUixhQUN5QnJwQyxHQUFBcTRCLEVBQUFnUixlQUN6QnJwQyxFQUFBcTRCLEVBQUE4USxjQUVBN3FDLEtBQUF1eEMsWUFBQXhELHNCQUFBcnNDLEVBQUFxNEIsSUFHQXNYLEVBQUF0RCxzQkFBQSxTQUFBcnNDLEVBQUFxNEIsR0FDQSxPQUFBLzVCLEtBQUF1eEMsWUFBQXhELHNCQUFBcnNDLEVBQUFxNEIsRUFBQXdYLGFBQUF4WCxJQVFBLElBQUF6a0IsRUFBQXRFLFNBQUFtRCxjQUFBLE9BQ0FtQixFQUFBaEIsVUFBQSxNQUNBLElBQUE2cUIsRUFBQTdwQixFQUFBMnNCLFdBQ0F6ZCxFQUFBd1YsRUFBQWhwQixVQUNBd1QsRUFBQXdYLFlBQUExbUIsR0FFQXlrQixFQUFBbVMsU0FBQS9NLEVBQUEsR0FDQXBGLEVBQUFvUyxPQUFBaE4sRUFBQSxHQUNBcEYsRUFBQThTLGlCQUVBLE1BQUExTixFQUFBaHpCLE9BR0FrbEMsRUFBQXhFLGVBQUEsV0FDQTdzQyxLQUFBdXhDLFlBQUExRSxpQkFDQXlFLEVBQUF0eEMsT0FHQXF4QyxFQUFBekUsZ0JBQUEsV0FDQSxJQUFBeEYsRUFBQXBuQyxLQUFBdXhDLFlBQUEzRSxrQkFFQSxPQURBMEUsRUFBQXR4QyxNQUNBb25DLElBS0E1aUIsRUFBQTBnQixZQUFBNXZCLEdBQ0FrUCxFQUFBLEtBS0E4VixFQUFBakIsYUFBQVUsRUFBQSw4QkFDQXNYLEVBQUExSCx5QkFBQSxTQUFBQyxHQUNBLE9BQUE1cEMsS0FBQXV4QyxZQUFBNUgseUJBQUFDLEtBT0E1UCxFQUFBaHBCLFVBQUFrMEIsWUFBQTBNLEdBRUFQLEVBQUFoSyxRQUFBLFdBQ0Esc0JBR0E1TSxFQUFBMFcsZUFFQTFXLEVBQUFzWCxrQkFBQSxTQUFBOVgsR0FFQSxPQURBQSxFQUFBa0ssRUFBQWxLLEVBQUFoN0IsRUFBQSxzQkFDQWsrQixlQW5QQSxHQXdQQTFDLEVBQUFHLFNBQUFzQyxvQkFBQSxDQWVBLElBcUJBOFUsRUFBQSxTQUFBQyxFQUFBQyxFQUFBcEcsRUFBQXFHLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUosRUFBQUssWUFDQUQsRUFBQXA3QixTQUFBNjBCLEdBQ0EsSUFBQXlHLEVBQUFGLEVBQUE3TyxnQkFXQSxHQVBBSixFQUFBTSxpQkFBQXdPLEVBQUFLLEtBQ0FBLEVBQUFMLElBTUFLLEVBQUFDLFlBQUEsQ0FDQSxJQUFBeHhCLEVBQUEsSUFBQTZnQixFQUFBMFEsRUFBQXpTLFdBQUFzRCxFQUFBN0QsYUFBQWdULElBQ0EsT0FDQUUsaUJBQUF6eEIsRUFDQTB4QixVQUNBakYsVUFBQXpzQixFQUFBOGdCLE9BQ0F5USxpQkFBQXZ4QixFQUFBd2UsT0FLQSxJQUFBbVQsRUFBQXZQLEVBQUF6QyxZQUFBNFIsR0FBQXArQixjQUFBLFFBSUF3K0IsRUFBQTdTLFlBQ0FzRCxFQUFBNkIsV0FBQTBOLEdBYUEsSUFWQSxJQUFBQyxFQUNBQyxFQUFBdFMsRUFBQWtTLEVBQUFLLEVBREFDLEVBQUFqSCxFQUFBLDRCQUVBbHJCLEVBQUF3eEIsS0FBQUcsb0JBQUFILEVBQUEzRSxVQUFBLEVBQ0F1RixFQUFBVCxFQUFBclcsV0FBQXY1QixPQUNBcWpCLEVBQUFndEIsRUFJQXZGLEVBQUF6bkIsRUFHQXluQixHQUFBdUYsRUFDQVQsRUFBQXZXLFlBQUEyVyxHQUVBSixFQUFBN1IsYUFBQWlTLEVBQUFKLEVBQUFyVyxXQUFBdVIsSUFFQTRFLEVBQUFZLGtCQUFBTixHQUVBLElBREFDLEVBQUFQLEVBQUFhLGlCQUFBSCxFQUFBZCxLQUNBcnhCLEdBQUFvRixHQVJBLENBVXFCLE9BQUE0c0IsRUFBQSxDQUNyQixHQUFBNXNCLEdBQUFwRixFQUFBLEVBRUEsTUFFQUEsRUFBQTZzQixPQUdBem5CLEtBQUFwRixFQUFBLEVBQUFBLEVBQUE2c0IsRUFFQUEsRUFBQXhpQixLQUFBa29CLE9BQUF2eUIsRUFBQW9GLEdBQUEsR0FDQXVzQixFQUFBck4sWUFBQXlOLEdBUUEsR0FGQUcsRUFBQUgsRUFBQW5TLGFBRUEsR0FBQW9TLEdBQUFFLEdBQUExUyxFQUFBMFMsR0FBQSxDQU1BLElBQUFoUixFQUVBLEdBSkF1USxFQUFBZSxZQUFBdEgsRUFBQSx3QkFBQW1HLEdBSUEsU0FBQXBwQyxLQUFBaXFDLEVBQUEzbUMsTUFBQSxDQStCQSxJQUFBa25DLEVBQUFoQixFQUFBQyxZQUNBZ0IsRUFBQUQsRUFBQTltQyxLQUFBaU0sUUFBQSxjQUFBN1YsT0FHQSxJQURBbS9CLEVBQUF1UixFQUFBRSxVQUFBLFlBQUFELElBQ0EsSUFBQVYsRUFBQVMsRUFBQUgsaUJBQUEsYUFBQUcsS0FDQXZSLElBQ0F1UixFQUFBRSxVQUFBLG9CQUdBelIsRUFBQXVRLEVBQUE5bEMsS0FBQTVKLE9BRUE4dkMsRUFBQSxJQUFBNVEsRUFBQWlSLEVBQUFoUixRQUtBK1EsR0FBQVYsSUFBQXJHLElBQUE2RyxFQUFBbFQsZ0JBR0FnVCxHQUZBbFMsR0FBQTRSLEdBQUFyRyxJQUFBNkcsRUFBQW5TLGNBQ0FKLEVBQUFHLEdBQ0EsSUFBQXNCLEVBQUF0QixFQUFBLEdBQ3FCc1MsR0FBQXpTLEVBQUF5UyxHQUNyQixJQUFBaFIsRUFBQWdSLElBQUExbUMsS0FBQXhKLFFBRUEsSUFBQWsvQixFQUFBMFEsRUFBQW5QLEVBQUE3RCxhQUFBb1QsSUFPQSxPQUZBdlAsRUFBQTZCLFdBQUEwTixJQUdBRixtQkFDQUMsVUFDQWpGLFlBQ0E4RSxzQkFRQWlCLEVBQUEsU0FBQWYsRUFBQTNHLEdBQ0EsSUFBQWdILEVBQUFXLEVBRUFkLEVBQUF6VyxFQUZBd1gsRUFBQWpCLEVBQUEzUSxPQUNBN0gsRUFBQW1KLEVBQUF6QyxZQUFBOFIsRUFBQWpULE1BQ0E2UyxFQUFBclksRUFBQUMsR0FBQW9ELGtCQUNBc1csRUFBQXZULEVBQUFxUyxFQUFBalQsTUFxQ0EsT0FuQ0FtVSxFQUVBRixHQURBWCxFQUFBTCxFQUFBalQsTUFDQU0sWUFHQWdULEVBQUFZLEdBREF4WCxFQUFBdVcsRUFBQWpULEtBQUF0RCxZQUNBdjVCLE9BQUF1NUIsRUFBQXdYLEdBQUEsS0FDQUQsRUFBQWhCLEVBQUFqVCxPQUlBbVQsRUFBQTFZLEVBQUE5bEIsY0FBQSxTQUlBRyxVQUFBLFVBSUF3K0IsRUFDQVcsRUFBQS9TLGFBQUFpUyxFQUFBRyxHQUVBVyxFQUFBelgsWUFBQTJXLEdBR0FOLEVBQUFZLGtCQUFBTixHQUNBTixFQUFBcDdCLFVBQUE2MEIsR0FHQTJILEVBQUF2TyxZQUFBeU4sR0FHQWdCLEdBQ0F0QixFQUFBdkcsRUFBQSxtQ0FBQTRILEdBR0FyQixJQVFBakIsRUFBQSxTQUFBYSxHQUNBanlDLEtBQUFpeUMsWUFDQWp5QyxLQUFBMnhDLFlBR0FqVCxVQUFBLElBQUF3UyxFQUFBbGdDLFVBRUFvZ0MsRUFBQTFTLFVBQUFpVCxRQUFBLFdBQ0EsSUFBQS93QixFQUFBb0YsRUFBQTR0QixFQTFOQTNCLEVBNk5BNEIsRUExT0EsU0FBQTVCLEdBQ0EsSUFBQTZCLEVBQUE3QixFQUFBek8sZ0JBQ0F6SixFQUFBa1ksRUFBQUssWUFDQXZZLEVBQUE5aUIsVUFBQSxHQUNBLElBQUE4OEIsRUFBQWhhLEVBQUF5SixpQkFDQXpKLEVBQUFrWSxFQUFBSyxhQUNBcjdCLFVBQUEsR0FDQSxJQUFBKzhCLEVBQUFqYSxFQUFBeUosZ0JBQ0F5USxFQUFBRixHQUFBQyxFQUFBRCxFQUFBM1EsRUFBQTFELGtCQUFBcVUsRUFBQUMsR0FFQSxPQUFBQyxHQUFBSCxFQUFBRyxFQUFBN1EsRUFBQTFELGtCQUFBb1UsRUFBQUcsR0FnT0FDLENBQUFsMEMsS0FBQWl5QyxXQTVOQSxJQURBQSxFQStOQWp5QyxLQUFBaXlDLFdBOU5BaUIsaUJBQUEsYUFBQWpCLEdBK05BanNCLEVBQUFwRixFQUFBb3hCLEVBQUFoeUMsS0FBQWl5QyxVQUFBNEIsR0FBQSxHQUNBLEdBQUFwQixrQkFHQTd4QixHQURBZ3pCLEVBQUE1QixFQUFBaHlDLEtBQUFpeUMsVUFBQTRCLEdBQUEsT0FDQXBCLGlCQUtBenNCLEVBQUFnc0IsRUFBQWh5QyxLQUFBaXlDLFVBQUE0QixHQUFBLEtBQ0FELEVBQUFsQixVQUFBRCxrQkFHQXp5QyxLQUFBa3NDLFNBQUF0ckIsRUFBQTRlLEtBQUE1ZSxFQUFBa2hCLFFBQ0E5aEMsS0FBQW1zQyxPQUFBbm1CLEVBQUF3WixLQUFBeFosRUFBQThiLFNBR0FzUCxFQUFBMVMsVUFBQTJJLFFBQUEsV0FDQSwwQkFHQTZKLEVBQUE5Rix3QkFBQWdHLEdBRUEsSUFBQStDLEVBQUEsU0FBQXBhLEdBQ0EsR0FBQUEsRUFBQXlOLFVBQ0EsT0FBQWdNLEVBQUEsSUFBQTNSLEVBQUE5SCxFQUFBeUwsZUFBQXpMLEVBQUFzTSxjQUFBLEdBRUEsSUFBQStOLEVBQUFaLEVBQUEsSUFBQTNSLEVBQUE5SCxFQUFBeUwsZUFBQXpMLEVBQUFzTSxjQUFBLEdBQ0FnTyxFQUFBYixFQUFBLElBQUEzUixFQUFBOUgsRUFBQTBMLGFBQUExTCxFQUFBdU0sWUFBQSxHQUNBMkwsRUFBQWpZLEVBQUFrWCxFQUFBeEwsaUJBQUEzTCxJQUFBc0Qsa0JBR0EsT0FGQTRVLEVBQUFtQixZQUFBLGVBQUFnQixHQUNBbkMsRUFBQW1CLFlBQUEsV0FBQWlCLEdBQ0FwQyxHQWNBLEdBVkFiLEVBQUErQyxtQkFFQS9DLEVBQUExUyxVQUFBNFYsWUFBQSxXQUNBLE9BQUFILEVBQUFuMEMsT0FHQXk2QixFQUFBMlcsb0JBSUEzVyxFQUFBRyxTQUFBcUMsb0JBQUF4QyxFQUFBdDVCLE9BQUE0NUIsZ0JBQUEsQ0FFQSxJQUFBd1osRUFBNEVDLFNBQTlCLGVBQUE5bEIsUUFDOUMsSUFBQTZsQixFQUFBbk0sUUFDQW1NLEVBQUFuTSxNQUFBZ0osR0FHQTNXLEVBQUFzWCxrQkFBQSxTQUFBOVgsR0FFQSxPQURBQSxFQUFBa0ssRUFBQWxLLEVBQUFoN0IsRUFBQSxxQkFDQSs2QixFQUFBQyxHQUFBb0QsbUJBR0E1QyxFQUFBMFcsYUFBQUMsR0FJQTNXLEVBQUEwQyxZQUFBLFNBQUFsRCxHQUVBLE9BREFBLEVBQUFrSyxFQUFBbEssRUFBQWg3QixFQUFBLGVBQ0EsSUFBQXc3QixFQUFBMFcsYUFBQTFXLEVBQUFzWCxrQkFBQTlYLEtBR0FRLEVBQUFnYSxpQkFBQSxTQUFBeGEsR0FFQSxPQURBQSxFQUFBa0ssRUFBQWxLLEVBQUFoN0IsRUFBQSxvQkFDQSxJQUFBaXlDLEVBQUFqWCxJQUdBSyxFQUFBcUQsK0JBQUFsRCxFQUFBLG1DQUNBSCxFQUFBcUQsK0JBQUFsRCxFQUFBLDZDQUVBQSxFQUFBNkQsZ0JBQUEsU0FBQUcsR0FDQSxJQUFBeEUsRUFBQXdFLEVBQUF6dEIsY0FDQSxJQUFBaXBCLEVBQUFrRCxjQUNBbEQsRUFBQWtELFlBQUEsV0FDQSxPQUFBMUMsRUFBQTBDLFlBQUFsRCxLQUdBQSxFQUFBd0UsRUFBQSxTQVFBaEUsRUFBQXNFLGlCQUFBLHdEQUFBdEUsRUFBQXg3QixHQUNBdzdCLEVBQUF0NUIsT0FBQXV6QyxzQkFBQSxFQUVBLElBU0FDLEVBQ0FDLEVBUkF4UixFQUFBM0ksRUFBQTJJLElBQ0E5SSxFQUFBRyxFQUFBSCxLQUNBakIsRUFBQWlCLEVBQUFqQixhQUNBNlgsRUFBQXpXLEVBQUF5VyxTQUNBQyxFQUFBMVcsRUFBQTBXLGFBQ0FwUCxFQUFBdEgsRUFBQXNILGFBQ0FGLEVBQUF1QixFQUFBdkIsWUFHQWpILEVBQUFILEVBQUFHLFNBRUErRixFQUFBeUMsRUFBQXpDLFlBQ0EzRyxFQUFBb0osRUFBQXBKLFFBQ0E4VyxFQUFBSSxFQUFBSixZQUtBLFNBQUErRCxFQUFBcnZDLEdBQ0EsdUJBQUFBLEVBQUEsa0JBQUFxRCxLQUFBckQsT0FHQSxTQUFBcTdCLEVBQUFwQyxFQUFBMkYsR0FDQSxHQUFBM0YsRUFFYSxJQUFBMkUsRUFBQWhDLFNBQUEzQyxHQUNiLE9BQUFBLEVBQ2EsR0FBQUEsYUFBQXFXLEVBQ2IsT0FBQXJXLE1BRUEsSUFBQXhFLEVBQUFtSixFQUFBZSxtQkFBQTFGLEVBQUF4L0IsRUFBQW1sQyxHQUNBLE9BQUFoQixFQUFBdkMsVUFBQTVHLEdBUEEsT0FBQXJuQixPQWVBLFNBQUFtaUMsRUFBQUMsR0FDQSxPQUFBblUsRUFBQW1VLEVBQUEsbUJBQUFoa0MsU0FBQWlrQyxVQUdBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsR0FBQSxFQUlBLE9BSEFELEVBQUFFLGFBQ0FELEVBQUEsR0FBQWhTLEVBQUFrQixjQUFBNlEsRUFBQUUsV0FBQUYsRUFBQUcsYUFBQUgsRUFBQUksVUFBQUosRUFBQUssY0FFQUosRUFLQSxJQUFBSyxFQUFBcGMsRUFBQXptQixPQUFBLGdCQUNBOGlDLEVBQUFwYixFQUFBZixhQUFBdm9CLFNBQUEsYUFFQTRwQixFQUFBNmEsNEJBQ0E3YSxFQUFBOGEseUJBRUEsSUFBQUMsRUFBQUQsS0FBQUQsR0FBQWhiLEVBQUF0NUIsT0FBQTQ1QixpQkFFQSxHQUFBNGEsRUFDQWhCLEVBQUFJLEVBQ0F0YSxFQUFBbWIsaUJBQUEsU0FBQVosR0FDQSxJQUFBL2EsRUFBQTRHLEVBQUFtVSxFQUFBLG9CQUFBaGtDLFNBQUE2a0MsRUFBQTViLEVBQUFnYixVQUdBLGNBQUFZLEVBQUFuMEMsTUFBQWkvQixFQUFBa1YsRUFBQTFZLGNBQUFxRyxrQkFBQXZKLE9BRVMsS0FBQXdiLEVBT1QsT0FEQXgyQyxFQUFBdzhCLEtBQUEsa0VBQ0EsRUFOQWtaLEVBbkNBLFNBQUFLLEdBQ0EsT0FBQW5VLEVBQUFtVSxFQUFBLG1CQUFBYyxnQkFtQ0FyYixFQUFBbWIsaUJBQUEsV0FDQSxVQU9BbmIsRUFBQWthLHFCQUVBLElBQUFvQixFQUFBcEIsSUFHQSxJQUFBb0IsRUFFQSxPQURBOTJDLEVBQUF3OEIsS0FBQSxvREFDQSxFQUdBLElBQUF1QixFQUFBdkMsRUFBQXNYLGtCQUFBL2dDLFVBQ0F3VCxFQUFBd1YsRUFBQWhwQixVQUdBZ2xDLEVBQUExYixFQUFBVCxrQkFBQWtjLEdBQ0Esd0RBRUFuYixFQUFBb2IsNkJBR0EsSUFBQUMsRUFBQTVjLEVBQUEwYyxFQUFBLFVBQ0FuYixFQUFBcWIscUJBR0EsSUFBQUMsRUF4R0EsaUJBd0dBSCxFQUFBSSxXQUNBdmIsRUFBQXNiLHlCQUVBLElBQUFFLEdBQUEsRUFDQUMsR0FBQSxFQUVBQyxFQUFBTCxFQUNBLFNBQUFNLEVBQUF4YyxHQUNBLElBQUFFLEVBQUFpWCxFQUFBeEwsaUJBQUEzTCxHQUNBc2EsRUFBQTVaLEVBQUEwQyxZQUFBbEQsR0FDQW9hLEVBQUF4RyxnQkFBQTlULEVBQUEwTCxhQUFBMUwsRUFBQXVNLFdBQ0FpUSxFQUFBQyxTQUFBQyxFQUFBcEMsSUFDQWtDLEVBQUFyYyxPQUFBSCxFQUFBeUwsZUFBQXpMLEVBQUFzTSxjQUNhLEtBRWIvTCxFQUFBWCxlQUFBb2MsR0FBQSw2Q0F2SEEsaUJBd0hBQSxFQUFBSSxZQUFBdmIsRUFBQXFDLG9CQUVBLFdBT0EsSUFBQWtZLEVBQUF2aUMsT0FBQWtqQyxlQUNBLEdBQUFYLEVBQUEsQ0FNQSxJQUpBLElBQUF1QixFQUFBdkIsRUFBQWdCLFdBQ0FRLEVBQUFELEVBQUEsRUFDQUUsS0FDQUMsRUFBQTNCLEVBQUFDLEdBQ0EzaEMsRUFBQSxFQUFtQ0EsRUFBQWtqQyxJQUFpQ2xqQyxFQUNwRW9qQyxFQUFBcGpDLEdBQUEyaEMsRUFBQTJCLFdBQUF0akMsR0FJQSxJQUFBdWpDLEVBQUEzVCxFQUFBMEIsa0JBQUE5ekIsU0FBQSxPQUNBbXVCLEVBQUE0WCxFQUFBL2EsWUFBQWhyQixTQUFBb3VCLGVBQUEsUUFHQTRSLEVBQUFoZ0MsU0FBQW1zQixjQVVBLEdBUkE2VCxFQUFBOUUsU0FBQS9NLEVBQUEsR0FDQTZSLEVBQUEvNUIsVUFBQSxHQUNBaytCLEVBQUE2QixrQkFDQTdCLEVBQUFxQixTQUFBeEYsR0FDQXFGLEVBQUEsR0FBQWxCLEVBQUFnQixXQUNBaEIsRUFBQTZCLG1CQUdBTCxFQUFBLENBTUEsSUFBQU0sRUFBQXJrQyxPQUFBa0IsVUFBQW9qQyxXQUFBaHZDLE1BQUEsa0JBQ0EsR0FBQSt1QyxHQUFBRSxTQUFBRixFQUFBLFFBQ0FiLEdBQUEsTUFDeUIsQ0FDekIsSUFBQW5GLEVBQUFELEVBQUE3SSxhQUNBNkksRUFBQTlFLFNBQUEvTSxFQUFBLEdBQ0E4UixFQUFBOUUsT0FBQWhOLEVBQUEsR0FDQThSLEVBQUEvRSxTQUFBL00sRUFBQSxHQUNBZ1csRUFBQXFCLFNBQUF4RixHQUNBbUUsRUFBQXFCLFNBQUF2RixHQUNBbUYsRUFBQSxHQUFBakIsRUFBQWdCLFlBUUEsSUFIQS9TLEVBQUE2QixXQUFBOFIsR0FDQTVCLEVBQUE2QixrQkFFQXhqQyxFQUFBLEVBQStCQSxFQUFBa2pDLElBQWlDbGpDLEVBQ2hFLEdBQUFBLEdBQUFxakMsRUFDQVAsRUFDQUEsRUFBQW5CLEVBQUF5QixFQUFBcGpDLEtBRUFpbkIsRUFBQWtCLEtBQUEseUpBQ0F3WixFQUFBcUIsU0FBQUksRUFBQXBqQyxLQUdBMmhDLEVBQUFxQixTQUFBSSxFQUFBcGpDLEtBbEVBLEdBeUVBb25CLEVBQUF3YixrQ0FDQXhiLEVBQUF5YiwwQ0FHQSxJQUFBZSxFQThJQUMsRUE5SUFDLEdBQUEsRUFxQkEsU0FBQUMsRUFBQXBDLEVBQUFwYixFQUFBcWIsR0FDQSxJQUFBb0MsRUFBQXBDLEVBQUEsY0FBQXFDLEVBQUFyQyxFQUFBLGNBQ0FELEVBQUFFLFdBQUF0YixFQUFBeWQsRUFBQSxhQUNBckMsRUFBQUcsYUFBQXZiLEVBQUF5ZCxFQUFBLFVBQ0FyQyxFQUFBSSxVQUFBeGIsRUFBQTBkLEVBQUEsYUFDQXRDLEVBQUFLLFlBQUF6YixFQUFBMGQsRUFBQSxVQVdBLFNBQUFDLEVBQUF2QyxHQUNBQSxFQUFBRSxXQUFBRixFQUFBSSxVQUFBLEtBQ0FKLEVBQUFHLGFBQUFILEVBQUFLLFlBQUEsRUFDQUwsRUFBQWdCLFdBQUEsRUFDQWhCLEVBQUFoRCxhQUFBLEVBQ0FnRCxFQUFBd0MsUUFBQWgxQyxPQUFBLEVBR0EsU0FBQTh6QyxFQUFBMWMsR0FDQSxJQUFBd1gsRUFVQSxPQVRBeFgsYUFBQW1YLElBQ0FLLEVBQUE5VyxFQUFBc1gsa0JBQUFoWSxFQUFBNEcsZ0JBQ0F3TCxPQUFBcFMsRUFBQTBMLGFBQUExTCxFQUFBdU0sV0FDQWlMLEVBQUFyRixTQUFBblMsRUFBQXlMLGVBQUF6TCxFQUFBc00sY0FDYXRNLGFBQUFvWCxFQUNiSSxFQUFBeFgsRUFBQXdYLFlBQ2EzVyxFQUFBcUMsb0JBQUFsRCxhQUFBcUosRUFBQXZDLFVBQUE5RyxFQUFBeUwsZ0JBQUE0QyxRQUNibUosRUFBQXhYLEdBRUF3WCxFQWVBLFNBQUFxRyxFQUFBN2QsR0FDQSxJQUFBa1csRUFBQWxXLEVBQUE4VixXQUNBLElBZEEsU0FBQWdJLEdBQ0EsSUFBQUEsRUFBQWwxQyxRQUFBLEdBQUFrMUMsRUFBQSxHQUFBMWIsU0FDQSxTQUVBLFFBQUEzb0IsRUFBQSxFQUFBdWUsRUFBQThsQixFQUFBbDFDLE9BQW9ENlEsRUFBQXVlLElBQVN2ZSxFQUM3RCxJQUFBNHZCLEVBQUFyRCxhQUFBOFgsRUFBQSxHQUFBQSxFQUFBcmtDLElBQ0EsU0FHQSxTQUtBc2tDLENBQUE3SCxHQUNBLE1BQUFoeEMsRUFBQTYvQixZQUFBLG9DQUFBL0UsRUFBQTRJLFVBQUEsd0NBRUEsT0FBQXNOLEVBQUEsR0FJQSxTQUFBblcsRUFBQUMsR0FDQSxRQUFBQSxRQUFBLElBQUFBLEVBQUF4dEIsS0FHQSxTQUFBd3JDLEVBQUE1QyxFQUFBcGIsR0FFQSxJQUFBaWUsRUFBQSxJQUFBN0csRUFBQXBYLEdBQ0FvYixFQUFBd0MsU0FBQUssR0FFQVQsRUFBQXBDLEVBQUE2QyxHQUFBLEdBQ0E3QyxFQUFBZ0IsV0FBQSxFQUNBaEIsRUFBQWhELFlBQUE2RixFQUFBeFEsVUFHQSxTQUFBeVEsRUFBQTlDLEdBR0EsR0FEQUEsRUFBQXdDLFFBQUFoMUMsT0FBQSxFQUNBLFFBQUF3eUMsRUFBQStDLGFBQUF4MkMsS0FDQWcyQyxFQUFBdkMsT0FDYSxDQUNiLElBQUFnRCxFQUFBaEQsRUFBQStDLGFBQUEvYSxjQUNBLEdBQUFyRCxFQUFBcWUsR0FJQUosRUFBQTVDLEVBQUFnRCxPQUNpQixDQUNqQmhELEVBQUFnQixXQUFBZ0MsRUFBQXgxQyxPQUVBLElBREEsSUFBQW8zQixFQUFBRSxFQUFBMEcsRUFBQXdYLEVBQUFDLEtBQUEsSUFDQTVrQyxFQUFBLEVBQW1DQSxFQUFBMmhDLEVBQUFnQixhQUFvQjNpQyxHQUN2RHVtQixFQUFBVSxFQUFBMEMsWUFBQWxELElBQ0EwUyxXQUFBd0wsRUFBQUMsS0FBQTVrQyxJQUNBMmhDLEVBQUF3QyxRQUFBdDJDLEtBQUEwNEIsR0FFQW9iLEVBQUFoRCxZQUFBLEdBQUFnRCxFQUFBZ0IsWUFBQWhCLEVBQUF3QyxRQUFBLEdBQUFuUSxVQUNBK1AsRUFBQXBDLElBQUF3QyxRQUFBeEMsRUFBQWdCLFdBQUEsU0FLQSxTQUFBa0MsRUFBQWxELEVBQUFwYixHQVFBLElBUEEsSUFBQW9lLEVBQUFoRCxFQUFBK0MsYUFBQS9hLGNBQ0FtYixFQUFBVixFQUFBN2QsR0FJQUUsRUFBQTBHLEVBQUF3WCxFQUFBQyxLQUFBLElBQ0FHLEVBQUF2ZSxFQUFBQyxHQUFBdWUscUJBQ0FobEMsRUFBQSxFQUFBdWUsRUFBQW9tQixFQUFBeDFDLE9BQXNENlEsRUFBQXVlLElBQVN2ZSxFQUMvRCtrQyxFQUFBOWlCLElBQUEwaUIsRUFBQUMsS0FBQTVrQyxJQUVBLElBQ0Era0MsRUFBQTlpQixJQUFBNmlCLEdBQ2EsTUFBQTNiLEdBQ2IsTUFBQTE5QixFQUFBNi9CLFlBQUEsaUhBRUF5WixFQUFBN25DLFNBR0F1bkMsRUFBQTlDLEdBZ0NBLFNBQUFMLEVBQUFHLEVBQUFpRCxFQUFBelosR0FDQXorQixLQUFBdTJDLGdCQUFBdEIsRUFDQWoxQyxLQUFBazRDLGVBQ0FsNEMsS0FBQTIzQyxXQUNBMzNDLEtBQUF5K0IsTUFDQXorQixLQUFBMnhDLFVBS0EsU0FBQThHLEVBQUF0RCxHQUNBQSxFQUFBMVcsSUFBQTBXLEVBQUFFLFdBQUFGLEVBQUFJLFVBQUFKLEVBQUF3QyxRQUFBLEtBQ0F4QyxFQUFBZ0IsV0FBQWhCLEVBQUFHLGFBQUFILEVBQUFLLFlBQUEsRUFDQUwsRUFBQXVELFVBQUEsRUF0TEFsMEIsR0FBQTZVLEVBQUE3VSxFQUFBLHdCQUNBNHlCLEVBQUE1eUIsRUFBQWcwQixxQkFDQWxlLEVBQUFULGtCQUFBdWQsR0FBQSxpQkFDQUUsR0FBQSxJQUdBMWMsRUFBQTBjLHlCQUlBMUMsRUFEQW9CLEVBQ0EsU0FBQWIsR0FDQSxPQUFBQSxFQUFBRSxhQUFBRixFQUFBSSxXQUFBSixFQUFBRyxlQUFBSCxFQUFBSyxhQUdBLFNBQUFMLEdBQ0EsUUFBQUEsRUFBQWdCLFlBQUFoQixFQUFBMkIsV0FBQTNCLEVBQUFnQixXQUFBLEdBQUEzTyxXQStIQW5PLEVBQUEwYyxFQUFBLGNBSUFzQixFQUFBLFNBQUFsQyxFQUFBeitCLEdBQ0EsSUFDQSxPQUFBeStCLEVBQUEyQixXQUFBcGdDLEdBQ2lCLE1BQUFpbUIsR0FDakIsY0FHU3FaLElBQ1RxQixFQUFBLFNBQUFsQyxHQUNBLElBQUFsYixFQUFBMEcsRUFBQXdVLEVBQUFFLFlBQ0F0YixFQUFBVSxFQUFBMEMsWUFBQWxELEdBU0EsT0FSQUYsRUFBQWdRLGVBQUFvTCxFQUFBRSxXQUFBRixFQUFBRyxhQUFBSCxFQUFBSSxVQUFBSixFQUFBSyxhQUlBemIsRUFBQXlOLFlBQUF4bkMsS0FBQW15QyxhQUNBcFksRUFBQWdRLGVBQUFvTCxFQUFBSSxVQUFBSixFQUFBSyxZQUFBTCxFQUFBRSxXQUFBRixFQUFBRyxjQUdBdmIsSUFZQSthLEVBQUFwVyxVQUFBakUsRUFBQXdFLG1CQVFBLElBQUEwWixLQUVBLFNBQUFDLEVBQUFuYSxFQUFBb2EsR0FFQSxJQURBLElBQUFDLEVBQUEzRCxFQUFBM2hDLEVBQUFtbEMsRUFBQWgyQyxPQUNBNlEsS0FHQSxHQURBMmhDLEdBREEyRCxFQUFBSCxFQUFBbmxDLElBQ0F5aEMsVUFDQSxhQUFBNEQsRUFDQUosRUFBQXRELFFBQ2lCLEdBQUEyRCxFQUFBcmEsT0FDakIsZ0JBQUFvYSxHQUNBRixFQUFBaGlDLE9BQUFuRCxFQUFBLElBQ0EsR0FFQTJoQyxFQU9BLE1BSEEsYUFBQTBELElBQ0FGLEVBQUFoMkMsT0FBQSxHQUVBLEtBR0EsSUFBQW16QyxFQUFBLFNBQUFyWCxHQUVBLEdBQUFBLGdCQUFBcVcsRUFFQSxPQURBclcsRUFBQWtULFVBQ0FsVCxFQUtBLElBQUEwVyxFQUFBeUQsRUFGQW5hLEVBQUFvQyxFQUFBcEMsRUFBQSx1QkFHQW9YLEVBQUFsQixFQUFBbFcsR0FBQXNhLEVBQUFyRCxFQUFBWCxFQUFBdFcsR0FBQSxLQVNBLE9BUkEwVyxHQUNBQSxFQUFBb0IsZ0JBQUFWLEVBQ0FWLEVBQUErQyxhQUFBYSxFQUNBNUQsRUFBQXhELFlBRUF3RCxFQUFBLElBQUFMLEVBQUFlLEVBQUFrRCxFQUFBdGEsR0FDQWthLEVBQUF0M0MsTUFBNkNvOUIsTUFBQXdXLFVBQUFFLEtBRTdDQSxHQUdBMWEsRUFBQXFiLGVBRUF4YixFQUFBcUQsK0JBQUFsRCxFQUFBLHFDQUVBLElBd0tBdWUsRUF4S0FDLEVBQUFuRSxFQUFBcFcsVUFFQSxTQUFBd2EsRUFBQS9ELEVBQUFnRSxHQUlBLElBRkEsSUFFQTdqQyxFQUZBMmtCLEVBQUEwRyxFQUFBd1ksRUFBQSxHQUFBM1QsZ0JBQ0EyUyxFQUFBbmUsRUFBQUMsR0FBQXVlLHFCQUNBaGxDLEVBQUEsRUFBQXVlLEVBQUFvbkIsRUFBQXgyQyxPQUFvRDZRLEVBQUF1ZSxJQUFTdmUsRUFBQSxDQUM3RDhCLEVBQUFzaUMsRUFBQXVCLEVBQUEzbEMsSUFDQSxJQUNBMmtDLEVBQUExaUIsSUFBQW5nQixHQUNpQixNQUFBcW5CLEdBQ2pCLE1BQUExOUIsRUFBQTYvQixZQUFBLDJIQUdBcVosRUFBQXpuQyxTQUdBdW5DLEVBQUE5QyxHQUlBLElBQUFRLEdBQUFLLEdBQUExYixFQUFBWCxlQUFBb2MsR0FBQSxnQ0FDQWtELEVBQUFqQyxnQkFBQSxXQUNBaDNDLEtBQUF1MkMsZ0JBQUFTLGtCQUNBVSxFQUFBMTNDLE9BR0EsSUFBQW81QyxFQUFBLFNBQUFqRSxFQUFBcGIsR0FDQXVjLEVBQUFuQixFQUFBb0IsZ0JBQUF4YyxHQUNBb2IsRUFBQXhELFdBSUFzSCxFQUFBekMsU0FEQU4sRUFDQSxTQUFBbmMsRUFBQXNmLEdBQ0EsR0FBQS9CLEdBQUE1QixHQTNjQSxXQTJjQTExQyxLQUFBazRDLGFBQUF4MkMsS0FDQTIyQyxFQUFBcjRDLEtBQUErNUIsUUFFQSxHQUFBOGEsRUFBQXdFLElBQUFwRCxFQUNBbUQsRUFBQXA1QyxLQUFBKzVCLE9BQ3lCLENBQ3pCLElBQUF1ZixFQUNBbEQsRUFDQWtELEVBQUF0NUMsS0FBQW0yQyxZQUVBbjJDLEtBQUFnM0Msa0JBQ0FzQyxFQUFBLEdBS0EsSUFBQUMsRUFBQTlDLEVBQUExYyxHQUFBb08sYUFDQSxJQUNBbm9DLEtBQUF1MkMsZ0JBQUFDLFNBQUErQyxHQUM2QixNQUFBNWMsSUFNN0IsR0FGQTM4QixLQUFBbTJDLFdBQUFuMkMsS0FBQXUyQyxnQkFBQUosV0FFQW4yQyxLQUFBbTJDLFlBQUFtRCxFQUFBLEdBS0EsR0FBQTdlLEVBQUF0NUIsT0FBQXV6QyxxQkFBQSxDQUNBLElBQUFuRCxFQUFBOEYsRUFBQXIzQyxLQUFBdTJDLGdCQUFBdjJDLEtBQUFtMkMsV0FBQSxHQUNBNUUsSUFBQVQsRUFBQVMsRUFBQXhYLEtBRUFBLEVBQUEsSUFBQW9YLEVBQUFJLElBR0F2eEMsS0FBQTIzQyxRQUFBMzNDLEtBQUFtMkMsV0FBQSxHQUFBcGMsRUFDQXdkLEVBQUF2M0MsS0FBQSs1QixFQUFBeWYsRUFBQXg1QyxLQUFBdTJDLGtCQUNBdjJDLEtBQUFteUMsWUFBQXlDLEVBQUE1MEMsV0FHQUEsS0FBQTJ4QyxZQU1BLFNBQUE1WCxFQUFBc2YsR0FDQXhFLEVBQUF3RSxJQUFBcEQsRUFDQW1ELEVBQUFwNUMsS0FBQSs1QixJQUVBLzVCLEtBQUF1MkMsZ0JBQUFDLFNBQUFDLEVBQUExYyxJQUNBLzVCLEtBQUEyeEMsWUFLQXNILEVBQUFRLFVBQUEsU0FBQU4sR0FDQSxHQUFBN0IsR0FBQTVCLEdBQUF5RCxFQUFBeDJDLE9BQUEsRUFDQXUyQyxFQUFBbDVDLEtBQUFtNUMsT0FDaUIsQ0FDakJuNUMsS0FBQWczQyxrQkFDQSxRQUFBeGpDLEVBQUEsRUFBQXVlLEVBQUFvbkIsRUFBQXgyQyxPQUF3RDZRLEVBQUF1ZSxJQUFTdmUsRUFDakV4VCxLQUFBdzJDLFNBQUEyQyxFQUFBM2xDLFVBSVMsTUFBQTZsQixFQUFBMGMsRUFBQSxVQUFBMWMsRUFBQTJELEVBQUEsV0FDVHNhLEdBQUEzQixHQXFEQSxPQURBMTJDLEVBQUF3OEIsS0FBQSx5REFDQSxFQW5EQXdkLEVBQUFqQyxnQkFBQSxXQUVBLElBSUEsR0FIQWgzQyxLQUFBazRDLGFBQUF3QixRQUdBLFFBQUExNUMsS0FBQWs0QyxhQUFBeDJDLEtBQUEsQ0FHQSxJQUFBdTRCLEVBQ0EsR0FBQWo2QixLQUFBcTFDLFdBQ0FwYixFQUFBMEcsRUFBQTNnQyxLQUFBcTFDLGlCQUN5QixHQTloQnpCLFdBOGhCeUJyMUMsS0FBQWs0QyxhQUFBeDJDLEtBQUEsQ0FDekIsSUFBQXkyQyxFQUFBbjRDLEtBQUFrNEMsYUFBQS9hLGNBQ0FnYixFQUFBeDFDLFNBQ0FzM0IsRUFBQTBHLEVBQUF3WCxFQUFBQyxLQUFBLEtBR0EsR0FBQW5lLEVBQ0FELEVBQUFDLEdBQUFvRCxrQkFDQTNzQixTQUNBMVEsS0FBQWs0QyxhQUFBd0IsU0FHaUIsTUFBQS9jLElBQ2pCK2EsRUFBQTEzQyxPQUdBaTVDLEVBQUF6QyxTQUFBLFNBQUF6YyxHQTlpQkEsV0EraUJBLzVCLEtBQUFrNEMsYUFBQXgyQyxLQUNBMjJDLEVBQUFyNEMsS0FBQSs1QixJQUVBVSxFQUFBMlcsaUJBQUErQyxpQkFBQXBhLEdBQUFycEIsU0FDQTFRLEtBQUEyM0MsUUFBQSxHQUFBNWQsRUFDQS81QixLQUFBbTJDLFdBQUEsRUFDQW4yQyxLQUFBbXlDLFlBQUFueUMsS0FBQTIzQyxRQUFBLEdBQUFuUSxVQUNBK1AsRUFBQXYzQyxLQUFBKzVCLEdBQUEsS0FJQWtmLEVBQUFRLFVBQUEsU0FBQU4sR0FDQW41QyxLQUFBZzNDLGtCQUNBLElBQUFiLEVBQUFnRCxFQUFBeDJDLE9BQ0F3ekMsRUFBQSxFQUNBK0MsRUFBQWw1QyxLQUFBbTVDLEdBQ2lCaEQsR0FDakJuMkMsS0FBQXcyQyxTQUFBMkMsRUFBQSxLQW1CQSxHQVhBRixFQUFBbkMsV0FBQSxTQUFBcGdDLEdBQ0EsR0FBQUEsRUFBQSxHQUFBQSxHQUFBMVcsS0FBQW0yQyxXQUNBLFVBQUFwVSxFQUFBLGtCQUdBLE9BQUEvaEMsS0FBQTIzQyxRQUFBamhDLEdBQUF5eEIsY0FNQXdOLEVBQ0FxRCxFQUFBLFNBQUE3RCxHQUNBLElBQUFwYixFQUNBVSxFQUFBbWIsaUJBQUFULEVBQUExVyxLQUNBMUUsRUFBQW9iLEVBQUErQyxhQUFBL2EsZUFFQXBELEVBQUFDLEVBQUFtYixFQUFBMVcsSUFBQXp0QixVQUFBcXNCLG1CQUNBcG1CLFVBQUEsR0ExbEJBLFdBNmxCQWsrQixFQUFBK0MsYUFBQXgyQyxLQUNBdTJDLEVBQUE5QyxHQUNpQnJiLEVBQUFDLEdBQ2pCZ2UsRUFBQTVDLEVBQUFwYixHQUVBMmQsRUFBQXZDLFNBR1MsR0FBQTliLEVBQUEwYyxFQUFBLGVBaG5CVCxpQkFnbkJTQSxFQUFBSSxXQUNUNkMsRUFBQSxTQUFBN0QsR0FDQSxHQUFBbUMsR0FBQTVCLEdBdm1CQSxXQXVtQkFQLEVBQUErQyxhQUFBeDJDLEtBQ0F1MkMsRUFBQTlDLFFBR0EsR0FEQUEsRUFBQXdDLFFBQUFoMUMsT0FBQXd5QyxFQUFBZ0IsV0FBQWhCLEVBQUFvQixnQkFBQUosV0FDQWhCLEVBQUFnQixXQUFBLENBQ0EsUUFBQTNpQyxFQUFBLEVBQUF1ZSxFQUFBb2pCLEVBQUFnQixXQUE2RDNpQyxFQUFBdWUsSUFBU3ZlLEVBQ3RFMmhDLEVBQUF3QyxRQUFBbmtDLEdBQUEsSUFBQWluQixFQUFBMFcsYUFBQWdFLEVBQUFvQixnQkFBQU8sV0FBQXRqQyxJQUVBK2pDLEVBQUFwQyxJQUFBd0MsUUFBQXhDLEVBQUFnQixXQUFBLEdBQUFxRCxFQUFBckUsRUFBQW9CLGtCQUNBcEIsRUFBQWhELFlBQUF5QyxFQUFBTyxRQUVBdUMsRUFBQXZDLFFBSVMsS0FBQWEsR0Fsb0JULGtCQWtvQlNELEVBQUE1RCxhQWxvQlQsa0JBa29CU25WLEVBQUF3SyxZQUFBNU0sRUFBQXFDLG1CQWVULE9BREFoK0IsRUFBQXc4QixLQUFBLG1GQUNBLEVBZEF1ZCxFQUFBLFNBQUE3RCxHQUNBLElBQUFwYixFQUFBOGIsRUFBQVYsRUFBQW9CLGdCQUNBVixFQUFBUixZQUNBdGIsRUFBQXNkLEVBQUF4QixFQUFBLEdBQ0FWLEVBQUF3QyxTQUFBNWQsR0FDQW9iLEVBQUFnQixXQUFBLEVBbmFBLFNBQUFoQixHQUNBLElBQUFVLEVBQUFWLEVBQUFvQixnQkFDQXBCLEVBQUFFLFdBQUFRLEVBQUFSLFdBQ0FGLEVBQUFHLGFBQUFPLEVBQUFQLGFBQ0FILEVBQUFJLFVBQUFNLEVBQUFOLFVBQ0FKLEVBQUFLLFlBQUFLLEVBQUFMLFlBK1pBbUUsQ0FBQXhFLEdBQ0FBLEVBQUFoRCxZQUFBeUMsRUFBQU8sSUFFQXVDLEVBQUF2QyxJQVFBOEQsRUFBQXRILFFBQUEsU0FBQWlJLEdBQ0EsSUFBQUMsRUFBQUQsRUFBQTU1QyxLQUFBMjNDLFFBQUE3MkIsTUFBQSxRQUNBZzVCLEVBQUE5NUMsS0FBQXExQyxXQUFBMEUsRUFBQS81QyxLQUFBczFDLGFBR0EsR0FEQTBELEVBQUFoNUMsTUFDQTQ1QyxFQUFBLENBRUEsSUFBQXBtQyxFQUFBcW1DLEVBQUFsM0MsT0FDQSxHQUFBNlEsR0FBQXhULEtBQUEyM0MsUUFBQWgxQyxPQUNBLFNBS0EsR0FBQTNDLEtBQUFxMUMsWUFBQXlFLEdBQUE5NUMsS0FBQXMxQyxjQUFBeUUsRUFDQSxTQUlBLEtBQUF2bUMsS0FDQSxJQUFBczlCLEVBQUErSSxFQUFBcm1DLEdBQUF4VCxLQUFBMjNDLFFBQUFua0MsSUFDQSxTQUdBLFdBS0EsSUErQ0FnbUMsRUEvQ0FRLEVBQUEsU0FBQTdFLEVBQUFwYixHQUNBLElBQUFvZixFQUFBaEUsRUFBQThFLGVBQ0E5RSxFQUFBNkIsa0JBQ0EsUUFBQXhqQyxFQUFBLEVBQUF1ZSxFQUFBb25CLEVBQUF4MkMsT0FBZ0Q2USxFQUFBdWUsSUFBU3ZlLEVBQ3pEczlCLEVBQUEvVyxFQUFBb2YsRUFBQTNsQyxLQUNBMmhDLEVBQUFxQixTQUFBMkMsRUFBQTNsQyxJQUdBMmhDLEVBQUFnQixZQUNBdUIsRUFBQXZDLElBaUVBLFNBQUErRSxFQUFBL0UsRUFBQTNWLEdBQ0EsR0FBQTJWLEVBQUExVyxJQUFBenRCLFVBQUEydkIsRUFBQW5CLEdBQ0EsVUFBQXVDLEVBQUEsc0JBK0ZBLFNBQUFvWSxHQUFBck8sR0FDQSxnQkFBQXRNLEVBQUFzQyxHQUNBLElBQUEvSCxFQUNBLzVCLEtBQUFtMkMsWUFDQXBjLEVBQUEvNUIsS0FBQTgyQyxXQUFBLElBQ0EsT0FBQWhMLEVBQUEsZ0JBQUF0TSxFQUFBc0MsSUFFQS9ILEVBQUFVLEVBQUEwQyxZQUFBbjlCLEtBQUF5K0IsSUFBQXp0QixXQUNBKzRCLGVBQUF2SyxFQUFBc0MsR0FFQTloQyxLQUFBbzZDLGVBQUFyZ0IsRUFBQS81QixLQUFBcTZDLGVBZ0dBLFNBQUExWCxHQUFBd1MsR0FDQSxJQUFBbUYsS0FDQUMsRUFBQSxJQUFBMVksRUFBQXNULEVBQUFFLFdBQUFGLEVBQUFHLGNBQ0FqOUIsRUFBQSxJQUFBd3BCLEVBQUFzVCxFQUFBSSxVQUFBSixFQUFBSyxhQUNBbjFDLEVBQUEsbUJBQUE4MEMsRUFBQTlOLFFBQUE4TixFQUFBOU4sVUFBQSxZQUVBLFlBQUE4TixFQUFBZ0IsV0FDQSxRQUFBM2lDLEVBQUEsRUFBQXVlLEVBQUFvakIsRUFBQWdCLFdBQXFEM2lDLEVBQUF1ZSxJQUFTdmUsRUFDOUQ4bUMsRUFBQTltQyxHQUFBMDlCLEVBQUF2TyxRQUFBd1MsRUFBQTJCLFdBQUF0akMsSUFHQSxVQUFBblQsRUFBQSxZQUFBaTZDLEVBQUFsaUMsS0FBQSxNQUNBLGFBQUFtaUMsRUFBQTVYLFVBQUEsWUFBQXRxQixFQUFBc3FCLFVBQUEsSUFuUkFzVyxFQUFBdUIsWUFEQWxELEdBQUE1QixFQUNBLFNBQUEzYixHQUNBLEdBcHJCQSxXQW9yQkEvNUIsS0FBQWs0QyxhQUFBeDJDLEtBQUEsQ0FTQSxJQVJBLElBQUF5MkMsRUFBQW40QyxLQUFBazRDLGFBQUEvYSxjQUNBbWIsRUFBQVYsRUFBQTdkLEdBSUFFLEVBQUEwRyxFQUFBd1gsRUFBQUMsS0FBQSxJQUNBRyxFQUFBdmUsRUFBQUMsR0FBQXVlLHFCQUNBaUMsR0FBQSxFQUNBam5DLEVBQUEsRUFBQXVlLEVBQUFvbUIsRUFBQXgxQyxPQUE4RDZRLEVBQUF1ZSxJQUFTdmUsRUFDdkUya0MsRUFBQUMsS0FBQTVrQyxLQUNBOGtDLEdBQUFtQyxFQUNBbEMsRUFBQTlpQixJQUFBMGlCLEVBQUFDLEtBQUE1a0MsSUFFQWluQyxHQUFBLEVBR0FsQyxFQUFBN25DLFNBR0F1bkMsRUFBQWo0QyxXQUVBZzZDLEVBQUFoNkMsS0FBQSs1QixJQUlBLFNBQUFBLEdBQ0FpZ0IsRUFBQWg2QyxLQUFBKzVCLEtBTUE0YixHQUFBSyxHQUFBcGIsRUFBQXFDLG9CQUNBdWMsRUFBQXRFLEVBRUErRCxFQUFBb0IsV0FBQSxXQUNBLE9BQUFiLEVBQUF4NUMsUUFHQXc1QyxFQUFBUCxFQUFBb0IsV0FBQSxXQUNBLFVBS0FwQixFQUFBeUIsWUFBQXpCLEVBQUFvQixXQUtBcEIsRUFBQXJkLFNBQUEsV0FFQSxJQURBLElBQUErZSxLQUNBbm5DLEVBQUEsRUFBQXVlLEVBQUEveEIsS0FBQW0yQyxXQUFrRDNpQyxFQUFBdWUsSUFBU3ZlLEVBQzNEbW5DLEVBQUFubkMsR0FBQSxHQUFBeFQsS0FBQTIzQyxRQUFBbmtDLEdBRUEsT0FBQW1uQyxFQUFBdmlDLEtBQUEsS0FVQTZnQyxFQUFBaGlDLFNBQUEsU0FBQXVvQixFQUFBc0MsR0FDQW9ZLEVBQUFsNkMsS0FBQXcvQixHQUNBLElBQUF6RixFQUFBVSxFQUFBMEMsWUFBQXFDLEdBQ0F6RixFQUFBOFQsZ0JBQUFyTyxFQUFBc0MsR0FDQTloQyxLQUFBbzZDLGVBQUFyZ0IsR0FDQS81QixLQUFBbXlDLGFBQUEsR0FHQThHLEVBQUEyQixnQkFBQSxXQUNBLElBQUE1NkMsS0FBQW0yQyxXQUlBLFVBQUFwVSxFQUFBLHFCQUhBLElBQUFoSSxFQUFBLzVCLEtBQUEyM0MsUUFBQSxHQUNBMzNDLEtBQUFpWCxTQUFBOGlCLEVBQUF5TCxlQUFBekwsRUFBQXNNLGNBTUE0UyxFQUFBNEIsY0FBQSxXQUNBLElBQUE3NkMsS0FBQW0yQyxXQUlBLFVBQUFwVSxFQUFBLHFCQUhBLElBQUFoSSxFQUFBLzVCLEtBQUEyM0MsUUFBQTMzQyxLQUFBbTJDLFdBQUEsR0FDQW4yQyxLQUFBaVgsU0FBQThpQixFQUFBMEwsYUFBQTFMLEVBQUF1TSxZQVFBMlMsRUFBQTZCLGtCQUFBLFNBQUF0YixHQUNBMGEsRUFBQWw2QyxLQUFBdy9CLEdBQ0EsSUFBQXpGLEVBQUFVLEVBQUEwQyxZQUFBcUMsR0FDQXpGLEVBQUEyUyxtQkFBQWxOLEdBQ0F4L0IsS0FBQW82QyxlQUFBcmdCLElBR0FrZixFQUFBOEIsbUJBQUEsV0FFQSxHQUFBekQsR0FBQTVCLEdBM3hCQSxXQTJ4QkExMUMsS0FBQWs0QyxhQUFBeDJDLEtBQUEsQ0FHQSxJQUZBLElBQ0FzNUMsRUFEQTdDLEVBQUFuNEMsS0FBQWs0QyxhQUFBL2EsY0FFQWdiLEVBQUF4MUMsUUFDQXE0QyxFQUFBN0MsRUFBQUMsS0FBQSxHQUNBRCxFQUFBL2lDLE9BQUE0bEMsR0FDQTVYLEVBQUE2QixXQUFBK1YsR0FFQWg3QyxLQUFBMnhDLGVBQ2EsR0FBQTN4QyxLQUFBbTJDLFdBQUEsQ0FDYixJQUFBZ0QsRUFBQW41QyxLQUFBaTZDLGVBQ0EsR0FBQWQsRUFBQXgyQyxPQUFBLENBQ0EzQyxLQUFBZzNDLGtCQUNBLFFBQUF4akMsRUFBQSxFQUFBdWUsRUFBQW9uQixFQUFBeDJDLE9BQXdENlEsRUFBQXVlLElBQVN2ZSxFQUNqRTJsQyxFQUFBM2xDLEdBQUFxNUIsaUJBSUE3c0MsS0FBQXcyQyxTQUFBMkMsRUFBQXBuQixFQUFBLE9BTUFrbkIsRUFBQWdDLFVBQUEsU0FBQXpnQixFQUFBa1IsR0FDQSxRQUFBbDRCLEVBQUEsRUFBQXVlLEVBQUEveEIsS0FBQTIzQyxRQUFBaDFDLE9BQXNENlEsRUFBQXVlLElBQVN2ZSxFQUMvRCxHQUFBZ25CLEVBQUF4NkIsS0FBQTgyQyxXQUFBdGpDLElBQ0EsT0FBQWs0QixHQUtBdU4sRUFBQWdCLGFBQUEsV0FDQSxJQUFBZCxLQUlBLE9BSEFuNUMsS0FBQWk3QyxVQUFBLFNBQUFsaEIsR0FDQW9mLEVBQUE5M0MsS0FBQTA0QixLQUVBb2YsR0FHQUYsRUFBQW1CLGVBQUEsU0FBQXJnQixFQUFBc2YsR0FDQXI1QyxLQUFBZzNDLGtCQUNBaDNDLEtBQUF3MkMsU0FBQXpjLEVBQUFzZixJQUdBSixFQUFBaUMsc0JBQUEsU0FBQTlXLEVBQUErVyxHQUNBLElBQUFDLEtBSUEsT0FIQXA3QyxLQUFBaTdDLFVBQUEsU0FBQWxoQixHQUNBcWhCLEVBQUEvNUMsS0FBQTA0QixFQUFBcUssR0FBQWppQixNQUFBNFgsRUFBQW9oQixVQUVBQyxHQWlCQW5DLEVBQUEvTSxTQUFBaU8sSUFBQSxHQUNBbEIsRUFBQTlNLE9BQUFnTyxJQUFBLEdBR0ExZixFQUFBdUUsZUFBQXR1QixPQUFBLFNBQUEyb0MsR0FDQXZELEVBQUE5MUMsS0FBQTJnQyxlQUFBeVosZUFBQXA2QyxLQUFBcTVDLElBR0FKLEVBQUFvQyxnQkFBQSxTQUFBN2dCLEdBQ0EsSUFBQTJlLEtBQ0EvRCxFQUFBcDFDLEtBQUFxNkMsYUFFQXI2QyxLQUFBaTdDLFVBQUEsU0FBQWxoQixHQUNBUyxFQUFBVCxHQUNBb2YsRUFBQTkzQyxLQUFBMDRCLEtBR0EvNUIsS0FBQWczQyxrQkFDQTVCLEdBQUEsR0FBQStELEVBQUF4MkMsT0FDQTNDLEtBQUF3MkMsU0FBQTJDLEVBQUEsZUFFQW41QyxLQUFBeTVDLFVBQUFOLElBSUFGLEVBQUEzSixhQUFBLFNBQUE5UCxFQUFBK1AsR0FDQSxPQUFBdnZDLEtBQUFpN0MsVUFBQSxTQUFBbGhCLEdBQ0EsT0FBQUEsRUFBQXVWLGFBQUE5UCxFQUFBK1AsS0FDYSxRQUdiMEosRUFBQTVJLFlBQUEsU0FBQUMsR0FDQSxPQUNBOEUsU0FBQXAxQyxLQUFBcTZDLGFBQ0FpQixlQUFBdDdDLEtBQUFrN0Msc0JBQUEsZUFBQTVLLE1BSUEySSxFQUFBekksZUFBQSxTQUFBQyxHQUVBLElBREEsSUFDQThLLEVBQUF4aEIsRUFEQXloQixLQUNBaG9DLEVBQUEsRUFBaUQrbkMsRUFBQTlLLEVBQUE2SyxlQUFBOW5DLE9BQ2pEdW1CLEVBQUFVLEVBQUEwQyxZQUFBbjlCLEtBQUF5K0IsTUFDQStSLGVBQUErSyxHQUNBQyxFQUFBbjZDLEtBQUEwNEIsR0FFQTBXLEVBQUEyRSxTQUNBcDFDLEtBQUFvNkMsZUFBQW9CLEVBQUEsZUFFQXg3QyxLQUFBeTVDLFVBQUErQixJQUlBdkMsRUFBQXdDLFdBQUEsV0FDQSxPQUNBckcsU0FBQXAxQyxLQUFBcTZDLGFBQ0FsQixPQUFBbjVDLEtBQUFrN0Msc0JBQUEsZ0JBSUFqQyxFQUFBeUMsY0FBQSxTQUFBRixHQUNBeDdDLEtBQUFnM0Msa0JBQ0EsUUFBQWpkLEVBQUF2bUIsRUFBQSxFQUFrQ3VtQixFQUFBeWhCLEVBQUFyQyxPQUFBM2xDLEtBQTZCQSxFQUMvRHhULEtBQUF3MkMsU0FBQXpjLEVBQUF5aEIsRUFBQXBHLFVBQUEsR0FBQTVoQyxJQUlBeWxDLEVBQUFwSyxPQUFBLFdBQ0EsSUFBQThNLEtBSUEsT0FIQTM3QyxLQUFBaTdDLFVBQUEsU0FBQWxoQixHQUNBNGhCLEVBQUF0NkMsS0FBQTZ2QyxFQUFBckMsT0FBQTlVLE1BRUE0aEIsRUFBQXZqQyxLQUFBLEtBR0F3aUIsRUFBQXNDLHNCQUNBK2IsRUFBQTJDLG1CQUFBLFdBQ0EsSUFBQXpHLEVBQ0EsR0FBQUEsRUFBQW4xQyxLQUFBazRDLGFBQUEsQ0FDQSxJQUFBbmUsRUFBQW9iLEVBQUFoWSxjQUNBLEdBQUFyRCxFQUFBQyxHQUNBLE9BQUFBLEVBRUEsTUFBQTk2QixFQUFBNi9CLFlBQUEsd0RBRWlCLEdBQUE5K0IsS0FBQW0yQyxXQUFBLEVBQ2pCLE9BQUExYixFQUFBMlcsaUJBQUErQyxpQkFBQW4wQyxLQUFBODJDLFdBQUEsSUFFQSxNQUFBNzNDLEVBQUE2L0IsWUFBQSxxREFvQkFtYSxFQUFBNVIsUUFBQSxXQUNBLDBCQUdBNFIsRUFBQXRXLFFBQUEsV0FDQSxPQUFBQSxHQUFBM2lDLE9BR0FpNUMsRUFBQXhXLE9BQUEsV0FDQW1XLEVBQUE1NEMsS0FBQXkrQixJQUFBLFVBQ0FnYSxFQUFBejRDLE9BR0E4MEMsRUFBQStHLFVBQUEsV0FDQWpELEVBQUEsbUJBR0E5RCxFQUFBblMsV0FDQW1TLEVBQUFELHNCQUVBcGEsRUFBQXFoQixVQUFBaEgsRUFFQXJhLEVBQUF3RSxtQkFBQWdhLEVBRUF4ZSxFQUFBNkQsZ0JBQUEsU0FBQUcsUUFDQSxJQUFBQSxFQUFBcVgsZUFDQXJYLEVBQUFxWCxhQUFBLFdBQ0EsT0FBQUEsRUFBQXJYLEtBR0FBLEVBQUEsU0FRQSxJQUFBc2QsR0FBQSxFQUVBQyxFQUFBLFNBQUFyckMsR0FDQW9yQyxJQUNBQSxHQUFBLEdBQ0F0aEIsRUFBQUMsYUFBQUQsRUFBQXQ1QixPQUFBNjVCLGdCQUNBK0IsTUFtQkEsT0FkQTFDLElBRUEsWUFBQXJwQixTQUFBaXJDLFdBQ0FELEtBRUEzaUIsRUFBQXJvQixTQUFBLHFCQUNBQSxTQUFBdXJCLGlCQUFBLG1CQUFBeWYsR0FBQSxHQUlBN2hCLEVBQUF2bkIsT0FBQSxPQUFBb3BDLEtBSUF2aEIsSUF0dkhBN0IsRUFBQXFELEtBQUEvOEIsRUFBQUYsRUFBQUUsRUFBQUQsR0FBQTI1QixLQUFBMzVCLEVBQUFDLFFBQUEyNUIsc0dDWkFULEVBQUExaUIsRUFBSXdtQyxJQUFJbDlDLEVBQVEsTUFFaEJvNUIsRUFBQTFpQixFQUFJeW1DLEtBQUtDLFFBQVFDLE9BQU8sZ0JBQWtCcnJDLFNBQVNzckMsY0FBYyxlQUFlQyxhQUFhLFNBRTdGbmtCLEVBQUExaUIsRUFBSXltQyxLQUFLSyxhQUFhbjdDLE1BQ2xCd08sU0FBVSxTQUFVQSxHQUtoQixPQUp3QixNQUFwQkEsRUFBUzRzQyxTQUNUejhDLEtBQUsyTixNQUFNK3VDLGdCQUFpQixHQUd6QjdzQyx1Q0NYZixTQUFBOHNDLEVBQUFqOEMsR0FBQWk4QyxFQUFPenRDLE9BQVMsU0FBU0QsR0FFckIsT0FEQUEsRUFBTTNDLFNBQVNzd0MsT0FBUyxJQUFNM3RDLEdBQ25CdUosUUFBUSxPQUFRLE1BRy9CbWtDLEVBQU9FLGFBQWUsU0FBUzV0QyxHQUUzQixPQURBQSxFQUFNM0MsU0FBU3d3QyxZQUFjLElBQU03dEMsR0FDeEJ1SixRQUFRLE9BQVEsTUFJL0Jta0MsRUFBT0ksaUJBQW1CLFNBQVNwckIsR0FDL0IsT0FBT3JsQixTQUFTMHdDLFFBQVE3ckMsTUFBTSxLQUFLd0YsT0FBT2diLEdBQU92WixLQUFLLE1BRzFEdWtDLEVBQU9NLHFCQUF1QixTQUFTMzlDLEdBRXRDLEdBQTBCLGlCQUFmQSxFQUFRLEdBQ2xCLE9BQU9BLEVBR1IsSUFBSTQ5QyxLQUtKLE9BSkF4OEMsRUFBRXFCLEtBQUt6QyxFQUFTLFNBQVM0QixFQUFPdEIsRUFBSzBpQixHQUNqQzQ2QixFQUFVNzdDLE1BQU1ILE1BQVN0QixFQUFLMk0sS0FBUXJMLE1BR25DZzhDLEdBR1JQLEVBQU9RLFVBQVksU0FBUzdzQyxHQUN4QixPQUFPdXNDLGFBQWEsaUJBQWtCdnNDLEVBQVcsU0FHckRxc0MsRUFBT3I0QyxHQUFLLFNBQVM4bkMsR0FDakJoUixRQUFRQyxJQUFJK1EsSUFHaEJ1USxFQUFPUyxTQUFXLFNBQVMvcEIsRUFBS3p6QixHQUM1QixPQUFPQSxFQUFJdVIsTUFBTSxLQUFLa3NDLE9BQU8sU0FBUy9qQixFQUFHZ2tCLEdBQ3JDLFlBQW9CLElBQUxoa0IsR0FBMEIsT0FBTkEsRUFBY0EsRUFBSUEsRUFBRWdrQixJQUN4RGpxQixJQUdQc3BCLEVBQU81akMsUUFBVS9aLEVBQVEsS0FFekIyOUMsRUFBT25xQyxxQkFBdUIsU0FBVTVRLEdBVXBDLGFBUkkyN0MsR0FBSSxNQUNKQyxHQUFJLE1BQ0pDLEdBQUksTUFDSkMsR0FBSSxNQUNKQyxHQUFJLE1BQ0pDLElBQUssUUFHVWg4QyxJQUFVLDRDQ3JENUJrN0IsT0FBTzRCLFVBQVVuOUIsV0FDbEJ1N0IsT0FBTzRCLFVBQVVuOUIsU0FBVyxTQUFTK1osRUFBUXNGLEdBQ3pDLGFBS0EsTUFKcUIsaUJBQVZBLElBQ1BBLEVBQVEsS0FHUkEsRUFBUXRGLEVBQU8zWSxPQUFTM0MsS0FBSzJDLFVBR1csSUFBakMzQyxLQUFLaVUsUUFBUXFILEVBQVFzRix1QkNaeEMsU0FBQWxnQixLQUFFbTlDLE9BR0VDLE9BQVEsU0FBVWw2QyxFQUFPbTZDLEVBQVExMEMsR0FDL0IsT0FBTzNJLEVBQUUyOEMsT0FBT3o1QyxFQUFPLFNBQVV5dkIsRUFBS25mLEVBQUc4cEMsR0FFaEMsT0FEQTNxQixFQUFJMnFCLEdBQUtELEVBQU85aEIsS0FBSzV5QixFQUFTNkssRUFBRzhwQyxFQUFHcDZDLEdBQzdCeXZCLE1BQ0ZocUIsSUFLaEI0MEMsVUFBVyxTQUFVcjZDLEVBQU9pRixFQUFNUSxHQUNoQyxPQUFPM0ksRUFBRTI4QyxPQUFPejVDLEVBQU8sU0FBVXl2QixFQUFLbmYsRUFBRzhwQyxHQUloQyxPQUhJbjFDLEVBQUtvekIsS0FBSzV5QixFQUFTNkssRUFBRzhwQyxFQUFHcDZDLEtBQzNCeXZCLEVBQUkycUIsR0FBSzlwQyxHQUVKbWYsTUFDRmhxQixJQU1oQjYwQyxVQUFXLFNBQVV0NkMsRUFBT2lGLEVBQU1RLEdBQ2hDLE9BQU8zSSxFQUFFMjhDLE9BQU96NUMsRUFBTyxTQUFVeXZCLEVBQUtuZixFQUFHOHBDLEdBSWhDLE9BSEtuMUMsRUFBS296QixLQUFLNXlCLEVBQVM2SyxFQUFHOHBDLEVBQUdwNkMsS0FDNUJ5dkIsRUFBSTJxQixHQUFLOXBDLEdBRUptZixNQUNGaHFCLHVDQzlCcEIsU0FBQW12QixFQUFBampCLEdBQUFpakIsRUFBTzBCLE9BQVExQixFQUFPMmxCLElBRWxCQyxPQUFRLFNBQVVDLEdBRWQsT0FBT3IrQyxLQUFLaVksT0FBTyxXQUVmLE9BQU8xQyxFQUFFdlYsTUFBTXMrQyxRQUFTRCxHQUFZMTdDLGtEQ05oRCxTQUFBNFMsS0FBRWdwQyxTQUFTN2YsVUFBVTN3QixPQUFTLFdBRTFCLE9BRUlndkIsS0FBTSxXQUVGLEdBQU0vOEIsS0FBSytOLE9BQU95d0MsTUFBTTdsQyxjQUF4QixDQUlBLElBQUk4bEMsRUFBU3orQyxLQUFLeStDLE9BQU9ocEIsSUFBSSxTQUFVcG1CLGlCQUFpQixZQUFhLElBQ3JFclAsS0FBS3krQyxPQUFPQyxZQUFZRCxFQUFReitDLEtBQUsrTixPQUFPM00sUUFHaERBLEtBQU0sV0FDRnBCLEtBQUtpMUMsVUFBVTBKLE9BQ2YzK0MsS0FBSytOLE9BQU95d0MsTUFBTXhsQyxZQUd0QndsQyxJQUFLLFdBQ0QsT0FBT3grQyxLQUFLNCtDLFFBQVFOLFFBQVEsK0JBQStCLEdBQUdPLHlHQ3BCdEUsSUFBSUMsRUFBTyxhQVlYQSxFQUFLcGdCLFVBQVVxZ0IsWUFBYyxTQUFTQyxHQUNsQ2gvQyxLQUFLZy9DLFNBQVdBLEdBV3BCRixFQUFLcGdCLFVBQVV6ckIsSUFBTSxTQUFTclQsRUFBS3EvQyxHQUMvQixJQUFLai9DLEtBQUtvUyxJQUFJeFMsR0FDVixPQUFPQSxFQUdYLElBQUlnOUIsRUFBVTU4QixLQUFLay9DLFlBQVl0L0MsRUFBS3EvQyxHQUNwQyxPQUFnQixPQUFacmlCLEVBQ09oOUIsR0FHUHEvQyxJQUNBcmlCLEVBQVU1OEIsS0FBS20vQyxtQkFBbUJ2aUIsRUFBU3FpQixJQUd4Q3JpQixJQVVYa2lCLEVBQUtwZ0IsVUFBVXRzQixJQUFNLFNBQVN4UyxHQUMxQixRQUFtQixpQkFBUkEsSUFBcUJJLEtBQUtnL0MsV0FJSixPQUExQmgvQyxLQUFLay9DLFlBQVl0L0MsSUFZNUJrL0MsRUFBS3BnQixVQUFVMGdCLE9BQVMsU0FBU3gvQyxFQUFLK3hCLEVBQU9zdEIsSUFFekNBLE9BQXVDLElBQWpCQSxFQUErQkEsTUFHckQsTUFBd0J0dEIsRUFHeEIsSUFBSWlMLEVBQVU1OEIsS0FBS2lULElBQUlyVCxFQUFLcS9DLEdBRzVCLEdBQWdCLE9BQVpyaUIsUUFBZ0N6a0IsSUFBWnlrQixFQUNwQixPQUFPQSxFQVVYLElBTkEsSUFBSXlpQixFQUFlemlCLEVBQVF6ckIsTUFBTSxLQUc3Qm11QyxLQUNBN3RCLEVBQVEsa0RBRUhqZSxFQUFJLEVBQUdBLEVBQUk2ckMsRUFBYTE4QyxPQUFRNlEsSUFHckMsR0FGQTZyQyxFQUFhN3JDLEdBQUs2ckMsRUFBYTdyQyxHQUFHK3JDLE9BRTlCOXRCLEVBQU01b0IsS0FBS3cyQyxFQUFhN3JDLElBQUssQ0FDN0IsSUFBSWdzQyxFQUFvQkgsRUFBYTdyQyxHQUFHckMsTUFBTSxNQUM5Q211QyxFQUFjaitDLEtBQUttK0MsRUFBa0JDLFNBQ3JDSixFQUFhN3JDLEdBQUtnc0MsRUFBa0JwbkMsS0FBSyxLQUtqRCxHQUE0QixJQUF4QmluQyxFQUFhMThDLE9BRWIsT0FBT2k2QixFQUlYLElBQVNwcEIsRUFBSSxFQUFHQSxFQUFJOHJDLEVBQWMzOEMsT0FBUTZRLElBQ3RDLEdBQUl4VCxLQUFLMC9DLGNBQWMvdEIsRUFBTzJ0QixFQUFjOXJDLElBQ3hDLE9BQU82ckMsRUFBYTdyQyxHQUs1QixPQUFjLElBQVZtZSxFQUNPMHRCLEVBQWEsR0FFYkEsRUFBYSxJQVc1QlAsRUFBS3BnQixVQUFVaWhCLFVBQVksU0FBUy8vQyxHQUNoQyxHQUFtQixpQkFBUkEsRUFDUCxPQUFPLEtBR1gsSUFBSWdnRCxFQUFXaGdELEVBQUl1UixNQUFNLEtBYXpCLE9BQUl2UixFQUFJMkIsU0FBUyxPQUVUMEMsT0FBUTI3QyxFQUFTanBDLE9BQU8sRUFBR2lwQyxFQUFTajlDLE9BQVMsR0FBR3lWLEtBQUssS0FDckR5bkMsUUFBU0QsRUFBUzkrQixNQUFNOCtCLEVBQVNqOUMsT0FBUyxLQUs5Q3NCLE9BQVEyN0MsRUFBUyxHQUNqQkMsUUFBU0QsRUFBUzkrQixNQUFNLEtBV2hDZytCLEVBQUtwZ0IsVUFBVXdnQixZQUFjLFNBQVN0L0MsR0FLbEMsR0FIQUEsRUFBTUksS0FBSzIvQyxVQUFVLy9DLFFBR2F1WSxJQUE5Qm5ZLEtBQUtnL0MsU0FBU3AvQyxFQUFJcUUsUUFDbEIsT0FBTyxLQUtYLElBREEsSUFBSTI0QixFQUFVNThCLEtBQUtnL0MsU0FBU3AvQyxFQUFJcUUsUUFDekJyRSxFQUFJaWdELFFBQVFsOUMsU0FBV2k2QixFQUFVQSxFQUFRaDlCLEVBQUlpZ0QsUUFBUUosWUFFNUQsTUFBdUIsaUJBQVo3aUIsRUFDQSxLQUdKQSxHQVdYa2lCLEVBQUtwZ0IsVUFBVXlnQixtQkFBcUIsU0FBU3ZpQixFQUFTcWlCLEdBQ2xELElBQUssSUFBSXptQyxLQUFXeW1DLEVBQ2hCcmlCLEVBQVVBLEVBQVF6ckIsTUFBTSxJQUFNcUgsR0FBU0osS0FBSzZtQyxFQUFhem1DLElBRTdELE9BQU9va0IsR0FVWGtpQixFQUFLcGdCLFVBQVVnaEIsY0FBZ0IsU0FBUy90QixFQUFPbXVCLEdBWTNDLE9BQU8sR0FHWCxJQUFBQyxFQUFBLElBQW1CakIsRUN6TnZCbHNDLE9BQU9sUSxVQUFZLFNBQVM5QyxFQUFLcS9DLEdBQzdCLElBQUlyaUIsRUFBVW1qQixFQUFLOXNDLElBQUlyVCxFQUFLcS9DLEdBRTVCLE9BQUlyaUIsSUFBWWg5QixFQWNwQixTQUFtQm9nRCxHQUdmLElBRkEsSUFBSTdzQixFQUFRNnNCLEVBQUs3dUMsTUFBTSxRQUVmcUMsRUFBSSxFQUFHQSxFQUFJMmYsRUFBTXh3QixPQUFRNlEsSUFBSyxDQUNwQyxJQUFJMk0sRUFBT2dULEVBQU0zZixHQUNqQjJmLEVBQU0zZixHQUFLMk0sRUFBS2MsT0FBTyxHQUFHc1csY0FBZ0JwWCxFQUFLVyxNQUFNLEdBR3ZELE9BQU9xUyxFQUFNL2EsS0FBSyxLQXJCUDZuQyxDQUFVcmpCLEVBQVFwa0IsUUFBUSxNQUFPLEtBR3JDb2tCLEdBR1hocUIsT0FBT3ZELGlCQUFtQixTQUFTelAsRUFBSyt4QixFQUFPc3RCLEdBQzNDLE9BQU9jLEVBQUtYLE9BQU94L0MsRUFBSyt4QixFQUFPc3RCLElBSW5DYyxFQUFLaEIsWUFBWXp5QyxTQUFTNHpDLGlIQ2xCMUJDLEdBRUlDLFFBRlcsU0FFSDFvQyxFQUFLcFksR0FFVG9ZLEVBQUlnbkIsVUFBVXh2QixPQUFTLFNBQVNELEdBQzVCLE9BQU9DLE9BQU9ELE1DTDFCb3hDLEdBRUlELFFBRlcsU0FFSDFvQyxFQUFLcFksR0FFVG9ZLEVBQUlnbkIsVUFBVWg4QixVQUFZLFNBQVM5QyxFQUFLcS9DLEdBQ3BDLE9BQU92OEMsVUFBVTlDLEVBQUtxL0MsSUFHMUJ2bkMsRUFBSWduQixVQUFVcnZCLGlCQUFtQixTQUFTelAsRUFBSyt4QixFQUFPc3RCLEdBQ2xELE9BQU81dkMsaUJBQWlCelAsRUFBSyt4QixFQUFPc3RCLE1DVGhEcUIsR0FFSUYsUUFGVyxTQUVIMW9DLEVBQUtwWSxHQUVUb1ksRUFBSWduQixVQUFVbWUsYUFBZSxTQUFTNXRDLEdBQ2xDLE9BQU80dEMsYUFBYTV0QyxNQ0xoQ3N4QyxHQUVJSCxRQUZXLFNBRUgxb0MsRUFBS3BZLEdBRVRvWSxFQUFJZ25CLFVBQVV5ZSxVQUFZLFNBQVNsdUMsR0FDL0IsT0FBT2t1QyxVQUFVbHVDLHdCQ0g3QnV4QyxHQUVJSixRQUZXLFNBRUgxb0MsRUFBS3BZLEdBRVRvWSxFQUFJZ25CLFVBQVUraEIsU0FBVyxTQUFTbDBDLEVBQU1tMEMsR0FDcEMsT0FBT2poRCxPQUFBKy9CLEVBQUEsUUFBQS8vQixDQUFROE0sR0FDWG8wQyxVQUFXRCxHQUFRLFNDQW5DRSxFQUFBbHJDLEVBQUl3bUMsSUFBSWlFLEdBQ1JTLEVBQUFsckMsRUFBSXdtQyxJQUFJbUUsR0FDUk8sRUFBQWxyQyxFQUFJd21DLElBQUlvRSxHQUNSTSxFQUFBbHJDLEVBQUl3bUMsSUFBSXFFLEdBQ1JLLEVBQUFsckMsRUFBSXdtQyxJQUFJenRDLEVBQUEsR0FDUm15QyxFQUFBbHJDLEVBQUl3bUMsSUFBSXNFLGtDQ2JSLFNBQUE5L0MsR0FBQSxHQUFJNEwsU0FBU3UwQyxZQUNULElBQUlBLEVBQWM5b0MsS0FBSytvQyxNQUFNQyxLQUFLejBDLFNBQVN1MEMsY0FHL0MsSUFBSXB5QyxFQUFNLFNBQVN1eUMsR0FDZixHQUFJdGdELEVBQUV3UCxTQUFTMndDLEVBQWEsU0FDeEIsT0FBTyxFQUtYLEdBQWUsSUFGRkcsRUFBVzd2QyxNQUFNLEtBQUt4TyxPQUFTLEVBRTFCLENBQ2QsSUFBSXMrQyxFQUFRRCxFQUFXN3ZDLE1BQU0sS0FDekIrdkMsRUFBVUQsRUFBTSxHQUFLLElBT3pCLEdBTmlCLFdBQWJBLEVBQU0sR0FDTkMsR0FBVyxTQUVYQSxHQUFXLFNBR1h4Z0QsRUFBRXdQLFNBQVMyd0MsRUFBYUssR0FDeEIsT0FBTyxFQUlmLE9BQU94Z0QsRUFBRXdQLFNBQVMyd0MsRUFBYUcsSUFHbkNuaEQsRUFBQSxHQUVJdWdELFFBRlcsU0FFSDFvQyxFQUFLcFksR0FFVG9ZLEVBQUlnbkIsVUFBVWp3QixJQUFNLFNBQVN1eUMsR0FDekIsT0FBT3Z5QyxFQUFJdXlDLElBR2Z0cEMsRUFBSWpKLElBQU0sU0FBU3V5QyxHQUNmLE9BQU92eUMsRUFBSXV5QywwSENuQ3ZCNW9CLEVBQUExaUIsRUFBSXVDLE9BQU8sWUFBYWpaLEVBQVEsTUFDaENvNUIsRUFBQTFpQixFQUFJdUMsT0FBTyxXQUFZalosRUFBUSxNQUMvQm81QixFQUFBMWlCLEVBQUl1QyxPQUFPLE1BQU9qWixFQUFRLE1BQzFCbzVCLEVBQUExaUIsRUFBSXVDLE9BQU8sVUFBV2paLEVBQVEsTUFDOUJvNUIsRUFBQTFpQixFQUFJdUMsT0FBTyxRQUFTalosRUFBUSxNQUM1Qm81QixFQUFBMWlCLEVBQUl1QyxPQUFPLFFBQVNqWixFQUFRLE1BQzVCbzVCLEVBQUExaUIsRUFBSXVDLE9BQU8sWUFBYWpaLEVBQVEsTUFDaENvNUIsRUFBQTFpQixFQUFJdUMsT0FBTyxXQUFZalosRUFBUSxNQUMvQm81QixFQUFBMWlCLEVBQUl1QyxPQUFPLHlCQUEwQmpaLEVBQVEscUJDVjdDQyxFQUFPQyxRQUFVLFNBQVNnQyxHQUN6QixPQUFPQSxFQUFNc1gsUUFBUSxRQUFTLHFCQ0QvQnZaLEVBQU9DLFFBQVUsU0FBU2dDLEdBQ3RCLElBQUlBLEVBQU1pUSxNQUFPLE9BQU9qUSxFQUV4QixJQUdBdVMsS0FNQSxPQUpBdlMsRUFBTWlRLE1BQU0sS0FBS3hSLFFBQVEsU0FBU3doRCxHQUxkLElBQVN4Z0MsRUFNekJsTixFQUFPcFMsTUFOa0JzZixFQU1Dd2dDLEdBTFpsZ0MsT0FBTyxHQUFHc1csY0FBZ0I1VyxFQUFPRyxNQUFNLEdBQUc5TSxpQkFRckRQLEVBQU8yRSxLQUFLLHFCQ1p2Qm5aLEVBQU9DLFFBQVUsU0FBU2dDLEdBQ3RCLE1BQU8sY0FBYzZXLEtBQUtDLFVBQVU5VyxFQUFPLEtBQU0sR0FBRyxnQ0NEeERqQyxFQUFPQyxRQUFVLFNBQVNvZ0MsR0FDekIsT0FBT0EsRUFBSW51QixNQUFNLElBQUlpd0MsVUFBVWhwQyxLQUFLLG9CQ0RyQ25aLEVBQU9DLFFBQVUsU0FBU2dDLEVBQU9tZ0QsR0FDaEMsT0FBT25nRCxFQUFNMkIsSUFBSSxTQUFTdTFDLEdBQ3RCLE9BQU9BLEVBQUtpSixxQkNGakJwaUQsRUFBT0MsUUFBVSxTQUFTZ0MsR0FDekIsT0FBTzZXLEtBQUsrb0MsTUFBTTUvQyxtQkNDbkJqQyxFQUFPQyxRQUFVLFNBQVNnQyxHQUd6QixPQUZBNUIsUUFBVXlZLEtBQUsrb0MsTUFBTS9vQyxLQUFLQyxVQUFVOVcsSUFFN0IrN0MscUJBQXFCMzlDLDJCQ0w3QixJQUFJeWlCLEVBQVMvaUIsRUFBUSxJQUVyQitpQixFQUFPdS9CLFlBQ0hDLEtBQUssRUFDTEMsT0FBUWwxQyxTQUFTbTFDLGlCQUNqQkMsUUFBUSxJQUdaemlELEVBQU9DLFFBQVUsU0FBU2dDLEdBQ3RCLE9BQU82Z0IsRUFBTzdnQixzQkNUbEIsU0FBQXdXLEdBQUF6WSxFQUFPQyxRQUFVLFNBQVVxN0IsRUFBS29uQixFQUFTUCxHQUN2QyxJQUFLTyxFQUNILE9BQU9wbkIsRUFFVCxJQUFJcW5CLEVBQVNSLEdBQVdBLEVBQVUsR0FBTSxFQUFJLEVBRTVDLE9BQU83bUIsRUFBSXpaLFFBQVErZ0MsS0FBSyxTQUFVbnNDLEVBQUdvc0MsR0FXbkMsTUFWZ0IsU0FBWkgsSUFDRWpxQyxFQUFJNGlCLEtBQUt5bkIsU0FBU3JzQyxJQUFNLFdBQVlBLElBQUdBLEVBQUlBLEVBQUVzc0MsUUFDN0N0cUMsRUFBSTRpQixLQUFLeW5CLFNBQVNELElBQU0sV0FBWUEsSUFBR0EsRUFBSUEsRUFBRUUsU0FFbkR0c0MsRUFBSWdDLEVBQUk0aUIsS0FBS3luQixTQUFTcnNDLEdBQUtnQyxFQUFJdXFDLFFBQVE1ekMsS0FBSzZ6QyxRQUFReHNDLEVBQUdpc0MsR0FBV2pzQyxFQUNsRW9zQyxFQUFJcHFDLEVBQUk0aUIsS0FBS3luQixTQUFTRCxHQUFLcHFDLEVBQUl1cUMsUUFBUTV6QyxLQUFLNnpDLFFBQVFKLEVBQUdILEdBQVdHLEdBRWxFcHNDLEVBQWtCLGlCQUFOQSxFQUFrQkEsRUFBRTFCLGNBQWdCMEIsTUFDaERvc0MsRUFBa0IsaUJBQU5BLEVBQWtCQSxFQUFFOXRDLGNBQWdCOHRDLEdBRS9CLEVBQUlwc0MsRUFBSW9zQyxFQUFJRixHQUFTQSw4SENYMUNodkMsT0FBT3V2QyxRQUFVQyxFQUFBMXNDLEVBQ2pCOUMsT0FBT3l2QyxXQ0xIdmlELE9BQ0lxTSxRQUNBaEwsVUFDQWQsUUFDQWlpRCxZQUNJbGpELFNBQVMsSUFJakIrTSxLQVhXLFdBWVAsT0FDSThKLHVCQUF1QixFQUN2QnNzQyxzQkFBc0IsRUFDdEJyc0Msd0JBQXdCLElBSWhDMVcsVUFLSWdqRCxrQkFMTSxXQVFGLElBRkEsSUFBSUMsRUFBS3ppRCxPQUVJLENBQ1QsSUFBSXlnQyxFQUFTZ2lCLEVBQUd4aUQsUUFFaEIsSUFBTXdnQyxFQUFRLE9BQU8sRUFFckIsR0FBZ0Msa0JBQTVCQSxFQUFPNEssWUFBWWhyQyxLQUNuQixPQUFPLEVBR1hvaUQsRUFBS2hpQixLQU1qQmowQixNQTFDVyxXQTJDSHhNLEtBQUtpVyx1QkFDTGpXLEtBQUswaUQscUJBSWJoMkMsU0FFSWcyQyxrQkFGSyxXQUdJMWlELEtBQUtzaUQsYUFDTnRpRCxLQUFLdWlELHVCQUVUdmlELEtBQUtpTixPQUFPLE9BQVEsV0FDaEJqTixLQUFLbVQsVUFBVSxlQUFlLEtBQzdCcUUsS0FBTXhYLEtBQUtrVyx5QkFFaEJsVyxLQUFLdWlELHNCQUF1QixLQUdoQ3pxQyx5QkFiSyxXQWNELE9BQU85WCxLQUFLbU0sTUFHaEJrTSxNQWpCSyxXQWtCRHJZLEtBQUt3VixJQUFJNkMsV0QxRHJCekYsT0FBTyt2QyxVRU5IeDJDLEtBRlcsV0FHUCxPQUNJeTJDLGlCQUNJQyxVQUFVLEtBS3RCcmpELFVBRUlzakQsK0JBRk0sV0FHRixPQUFPOWlELEtBQUtDLFFBQVFBLFVBSzVCeU0sU0FFSXEyQyxTQUZLLFNBRUlscEMsRUFBTUMsR0FBSSxJQUFBclosRUFBQVQsS0FPWEEsS0FKSjhaLEVBQUtBLEdBQU0sVUFPWDlaLEtBQUtpTixPQUFPNk0sRUFBSSxTQUFDa21DLEdBQ2IsSUFBTWdELEVBQVV2aUQsRUFBS3FpRCwrQkFBK0IzMkMsS0FBSzBOLElBQVMsR0FHbEVwWixFQUFLbWlELGdCQUFnQkMsU0FBVzdDLElBQVN2L0MsRUFBS2dnRCxTQUFTdUMsS0FJM0RoakQsS0FBSzhpRCwrQkFBK0I3MUMsT0FBcEMsUUFBbUQ0TSxFQUFRLFNBQUMzWSxHQUNuRFQsRUFBS21pRCxnQkFBZ0JDLFdBQzFCcGlELEVBQUtxWixHQUFNclosRUFBS2dnRCxTQUFTdi9DLDJCQ3hDekMsSUFBQXJDLEVBQ0FFLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFJcEhHLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLCtIQ1I3Q1ksRUFBQSxTQUVBeVIsUUFBQTJ4QyxFQUFBLEdBRUE5MkMsS0FBQSxXQUNBLE9BQ0ErMkMsU0FBQSxFQUNBQyxTQUNBQyxXQUNBdkIsS0FBQSxLQUNBd0IsVUFBQSxLQUNBQyxZQUFBLEVBQ0FDLFdBQUEsT0FJQS9qRCxVQUNBZ2tELFNBQUEsV0FDQSxPQUFBeGpELEtBQUFrakQsU0FBQWxqRCxLQUFBbWpELE9BQUFuakQsS0FBQW1qRCxNQUFBeGdELFFBR0E4Z0QsUUFBQSxXQUNBLE9BQUF6akQsS0FBQWtqRCxTQUFBbGpELEtBQUFtakQsUUFBQW5qRCxLQUFBbWpELE1BQUF4Z0QsUUFHQStnRCxhQUFBLFdBQ0EsT0FBQTFqRCxLQUFBbWpELE1BQUFsckMsT0FBQSxTQUFBbWdDLEdBQ0EsT0FBQUEsRUFBQXVMLFVBQ0E5Z0QsSUFBQSxTQUFBdTFDLEdBQ0EsT0FBQUEsRUFBQTVwQyxNQUlBbzFDLGdCQUFBLFdBQ0EsT0FBQTVqRCxLQUFBbWpELE1BQUF4Z0QsU0FBQTNDLEtBQUEwakQsYUFBQS9nRCxRQUdBa2hELFlBckJBLFdBc0JBLE9BQUE3akQsS0FBQXVqRCxXQUFBNWdELFFBQUEsR0FHQW1oRCxjQXpCQSxXQTBCQSxPQUNBakMsS0FBQTdoRCxLQUFBNmhELEtBQ0FELE1BQUE1aEQsS0FBQXFqRCxVQUNBVSxLQUFBL2pELEtBQUFna0QsZ0JBTUF4M0MsTUFBQSxXQUNBeE0sS0FBQWlrRCxZQUdBdnhDLE9BRUE2d0MsV0FGQSxTQUVBVyxHQUNBQSxFQUFBdmhELFFBQUEsRUFDQTNDLEtBQUFta0QsZ0JBRUFua0QsS0FBQWlrRCxhQU1BdnZDLFlBQ0EwdkMsZ0JBQUFDLEVBQUEzdUMsR0FHQWhKLFNBQ0F1M0MsU0FBQSxXQUNBamtELEtBQUF5UCxNQUFBd0QsSUFBQWpULEtBQUFza0QsS0FBQXJ4QyxJQUFBalQsS0FBQThqRCxjQUFBLFNBQUEzM0MsRUFBQXN3QyxFQUFBOEgsR0FDQXZrRCxLQUFBbWpELE1BQUFoM0MsRUFBQWczQyxNQUNBbmpELEtBQUFvakQsUUFBQXBqRCxLQUFBd2tELGFBQUFyNEMsRUFBQWkzQyxTQUNBcGpELEtBQUFrakQsU0FBQSxFQUNBbGpELEtBQUF5a0QsV0FBQXQ0QyxFQUFBczRDLGFBQ0F6eEMsTUFBQSxXQUNBaFQsS0FBQTBrRCxRQUFBMXhDLE1BQUF0USxVQUFBLDhCQUlBeWhELGNBWkEsV0FhQW5rRCxLQUFBeVAsTUFBQXdELElBQUFqVCxLQUFBc2tELEtBQUFocEMsT0FBQSxNQUFBdGIsS0FBQXVqRCxXQUFBLFNBQUFwM0MsRUFBQXN3QyxFQUFBOEgsR0FDQXZrRCxLQUFBbWpELE1BQUFoM0MsRUFDQW5NLEtBQUFrakQsU0FBQSxJQUNBbHdDLE1BQUEsV0FDQWhULEtBQUEwa0QsUUFBQTF4QyxNQUFBdFEsVUFBQSw4QkFJQWlpRCxPQXJCQSxTQXFCQTlDLEVBQUFELEdBQ0E1aEQsS0FBQTZoRCxPQUNBN2hELEtBQUFxakQsVUFBQXpCLEVBQ0E1aEQsS0FBQWlrRCxZQUdBVyxtQkFBQSxTQUFBcDJDLEdBQ0EsSUFBQTRwQyxFQUFBMTNDLEVBQUE2VixVQUFBdlcsS0FBQW1qRCxPQUFBMzBDLE9BQ0FrSSxFQUFBaFcsRUFBQXVULFFBQUFqVSxLQUFBbWpELE1BQUEvSyxHQUNBcDRDLEtBQUFtakQsTUFBQXhzQyxPQUFBRCxFQUFBLElBR0FtdUMsZUFBQSxXQUNBLElBQUFDLEVBQUE5a0QsS0FFQW1QLE1BQ0F6TixLQUFBLFVBQ0EwTixNQUFBMU0sVUFBQSxtQkFDQTZKLEtBQUE4QyxpQkFBQSw2QkFDQUMsa0JBQUE1TSxVQUFBLGtCQUNBNk0saUJBQUE3TSxVQUFBLGFBQ0E4TSxrQkFBQSxHQUNBLFdBQ0FzMUMsRUFBQXIxQyxNQUFBQyxPQUFBbzFDLEVBQUFSLEtBQUE1MEMsUUFBQXExQyxJQUFBRCxFQUFBcEIsY0FBQSxTQUFBdjNDLEdBQ0F6TCxFQUFBcUIsS0FBQStpRCxFQUFBcEIsYUFBQSxTQUFBbDFDLEdBQ0FzMkMsRUFBQUYsbUJBQUFwMkMsVUFPQXcyQyxXQUFBLFNBQUF4MkMsR0FDQSxJQUFBczJDLEVBQUE5a0QsS0FFQW1QLE1BQ0F6TixLQUFBLFVBQ0EwTixNQUFBMU0sVUFBQSxtQkFDQTZKLEtBQUE4QyxpQkFBQSw2QkFDQUMsa0JBQUE1TSxVQUFBLGtCQUNBNk0saUJBQUE3TSxVQUFBLGFBQ0E4TSxrQkFBQSxHQUNBLFdBQ0FzMUMsRUFBQXIxQyxNQUFBQyxPQUFBbzFDLEVBQUFSLEtBQUE1MEMsUUFBQXExQyxLQUFBdjJDLElBQUEsU0FBQXJDLEdBQ0EyNEMsRUFBQUYsbUJBQUFwMkMsUUFLQXkyQyxjQUFBLFdBQ0FqbEQsS0FBQXNqRCxZQUFBLEVBQ0F0akQsS0FBQWtsRCxXQUFBLHFCQUdBQyxZQTNFQSxXQTRFQW5sRCxLQUFBc2pELFlBQUEsRUFDQXRqRCxLQUFBa2xELFdBQUEsb0JBR0FFLFVBQUEsV0FDQXBsRCxLQUFBOFAsUUFBQSxFQUVBLElBQUE4eEMsRUFBQWxoRCxFQUFBbUMsSUFBQTdDLEtBQUFtakQsTUFBQSxTQUFBL0ssRUFBQTVrQyxHQUNBLE9BQUE0a0MsRUFBQTVwQyxLQUdBeE8sS0FBQXlQLE1BQUE0MUMsS0FBQXJsRCxLQUFBc2tELEtBQUFnQixTQUFBUCxJQUFBbkQsR0FBQSxXQUNBNWhELEtBQUE4UCxRQUFBLEVBQ0E5UCxLQUFBa2xELFdBQUEsb0JBQ0FsbEQsS0FBQWtqRCxTQUFBLEVBQ0FsakQsS0FBQWlrRCxXQUNBamtELEtBQUFzakQsWUFBQSxLQUlBa0IsYUFoR0EsU0FnR0FwQixHQUVBLElBQUFtQyxPQUFBcHRDLElBQUF6WCxFQUFBNlYsVUFBQTZzQyxHQUFBdC9DLE1BQUEsSUFFQSxPQUFBcEQsRUFBQW1DLElBQUF1Z0QsRUFBQSxTQUFBbjZDLEVBQUF1SyxHQUNBLGlCQUFBdkssSUFDQUEsR0FBQS9ILE1BQUErSCxJQU1BLElBQUF1OEMsRUFBQXY4QyxFQUFBL0gsTUFLQSxPQUpBK0gsRUFBQS9ILE1BQUFLLFNBQUEsT0FDQWlrRCxFQUFBdjhDLEVBQUEvSCxNQUFBaVEsTUFBQSxVQUlBalEsTUFBQStILEVBQUEvSCxNQUNBaUYsT0FBQXpELFVBQUEsT0FBQXVHLEVBQUE5QyxRQUFBcS9DLElBQ0FDLE1BQUF4OEMsRUFBQXc4QyxNQUNBN2pELE1BQUFxSCxFQUFBckgsTUFDQWtDLEtBQUFtRixFQUFBbkYsTUFBQXloRCxHQUFBLEdBQUEveEMsdUNDak1BLElBQUEzVSxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLG9UQ3dFN0NZLEVBQUEsU0FFQUMsT0FBQSxpQ0FFQXFNLEtBQUEsV0FDQSxPQUNBaTNDLFFBQUFwakQsS0FBQUMsUUFBQW1qRCxRQUNBRSxZQUFBLElBSUFvQyxVQUdBQyxLQUFBLCtuQkFlQW5tRCxVQUNBb21ELGNBQUEsV0FDQSxXQUFBNWxELEtBQUFWLFFBQUF1bUQsWUFPQUMsZ0JBQUEsV0FDQSxPQUFBOWxELEtBQUEwakQsYUFBQS9nRCxPQUFBLEdBR0FvakQsV0FBQSxXQUNBLFdBQUEvbEQsS0FBQVYsUUFBQTg4QyxTQU9BNEosV0FBQSxXQUNBLFlBQUE3dEMsSUFBQW5ZLEtBQUFWLFFBQUFvbUQsU0FBQU8sU0FDQSxLQUFBam1ELEtBQUFWLFFBQUFvbUQsU0FBQU8sU0FHQUMsZ0JBMUJBLFdBMkJBLE9BQUFsbUQsS0FBQXdqRCxVQUFBeGpELEtBQUE0bEQsZUFBQTVsRCxLQUFBOGxELGtCQUFBOWxELEtBQUFzakQsWUFHQUUsU0FBQSxXQUNBLE9BQUF4akQsS0FBQUMsUUFBQXVqRCxVQUdBMkMsWUFBQSxXQUNBLE9BQUFubUQsS0FBQVYsUUFBQTZtRCxhQUdBekMsYUFBQSxXQUNBLE9BQUExakQsS0FBQW1qRCxNQUFBbHJDLE9BQUEsU0FBQW1nQyxHQUNBLE9BQUFBLEVBQUF1TCxVQUNBOWdELElBQUEsU0FBQXUxQyxHQUNBLE9BQUFBLEVBQUE1cEMsTUFJQW8xQyxnQkFBQSxXQUNBLE9BQUE1akQsS0FBQW1qRCxNQUFBeGdELFNBQUEzQyxLQUFBMGpELGFBQUEvZ0QsUUFHQThoRCxXQWxEQSxXQW1EQSxPQUFBemtELEtBQUFDLFFBQUF3a0QsWUFHQXBCLFVBdERBLFdBdURBLE9BQUFyakQsS0FBQUMsUUFBQW9qRCxZQUlBK0MsY0FBQSxXQUNBLElBQUF0QixFQUFBOWtELEtBRUFVLEVBQUFxQixLQUFBK2lELEVBQUF4bEQsUUFBQW9tRCxTQUFBLFNBQUF0eUIsRUFBQS95QixHQUNBeWtELEVBQUF1QixTQUFBWCxTQUFBcmxELEdBQUEreUIsS0FJQTFtQixTQUNBNDVDLGlCQUFBLFdBR0E1bEQsRUFBQXFCLEtBRkEvQixLQUVBVixRQUFBb21ELFNBQUEsU0FBQXR5QixFQUFBL3lCLEdBQ0FxWCxFQUFBNnVDLFFBQUFsbUQsRUFBQSt5QixNQUlBdXhCLE9BQUEsU0FBQXJoRCxHQUNBLElBQUF0RCxLQUFBNmpELFlBQUEsQ0FFQSxJQUFBaEMsRUFBQXYrQyxFQUFBcEMsTUFDQW1pRCxFQUFBLE9BR0FyakQsS0FBQUMsUUFBQTRoRCxXQUNBd0IsRUFBQSxRQUFBcmpELEtBQUFDLFFBQUFvakQsVUFBQSxjQUdBcmpELEtBQUFDLFFBQUEwa0QsT0FBQTlDLEVBQUF3QixLQUdBbUQsY0FBQSxXQUNBLElBQUEvSixHQUFBejhDLEtBQUE0akQsZ0JBRUFsakQsRUFBQXFCLEtBQUEvQixLQUFBbWpELE1BQUEsU0FBQS9LLEdBQ0FBLEVBQUF1TCxRQUFBbEgsS0FJQWdLLGdCQUFBLFdBQ0EvbEQsRUFBQXFCLEtBQUEvQixLQUFBbWpELE1BQUEsU0FBQS9LLEdBQ0FBLEVBQUF1TCxTQUFBLEtBSUFuekMsT0FBQSxTQUFBNG5DLEdBQ0FBLEVBQUF1TCxTQUFBdkwsRUFBQXVMLFNBR0FzQixjQUFBLFdBQ0EsSUFBQUgsRUFBQTlrRCxLQUVBOGtELEVBQUF4QixZQUFBLEVBRUEvdEMsRUFBQXZWLEtBQUEwbUQsS0FBQTdoRCxPQUFBOGhELFVBQ0FDLEtBQUEsSUFDQUMsT0FBQSxJQUNBQyxZQUFBLGNBQ0FobUQsT0FBQSxlQUNBaW1ELHNCQUFBLEVBRUFubUMsTUFBQSxTQUFBalEsRUFBQXEyQyxHQUNBQSxFQUFBNU8sS0FBQWpzQyxLQUFBLFFBQUE2NkMsRUFBQTVPLEtBQUExaEMsVUFHQXV3QyxPQUFBLFNBQUF0MkMsRUFBQXEyQyxHQUNBLElBQUFwbUMsRUFBQW9tQyxFQUFBNU8sS0FBQWpzQyxLQUFBLFNBQ0E2WixFQUFBZ2hDLEVBQUE1TyxLQUFBMWhDLFFBRUFvdUMsRUFBQTNCLE1BQUF4c0MsT0FBQXFQLEVBQUEsRUFBQTgrQixFQUFBM0IsTUFBQXhzQyxPQUFBaUssRUFBQSxXQU1Bc21DLGVBQUEsV0FDQWxuRCxLQUFBc2pELFlBQUEsRUFDQS90QyxFQUFBdlYsS0FBQTBtRCxLQUFBN2hELE9BQUE4aEQsU0FBQSxZQUdBdkIsVUFBQSxXQUNBcGxELEtBQUFDLFFBQUFtbEQsYUFTQW5wQixLQUFBLFNBQUFrckIsR0FDQSxJQUFBL2EsRUFBQWdiLE1BQUExb0IsVUFBQTVkLE1BQUFtYixLQUFBL1osVUFBQSxHQUNBbGlCLEtBQUFDLFFBQUFrbkQsR0FBQWhsQyxNQUFBbmlCLEtBQUFvc0MsSUFNQWliLHVCQTFGQSxTQTBGQXRELEdBQ0EvakQsS0FBQUMsUUFBQStqRCxhQUFBRCxFQUNBL2pELEtBQUFDLFFBQUFna0QsWUFHQXFELGVBL0ZBLFNBK0ZBaGtELEdBQ0EsT0FBQXRELEtBQUE2akQsYUFFQXZnRCxFQUFBcEMsUUFBQWxCLEtBQUFDLFFBQUE0aEQsTUFHQTBGLGNBQUEsU0FBQTNsRCxHQUNBLEdBQUFBLEdBQUEsTUFBQUEsRUFDQSx1QkFBQUEsS0FBQTRsRCxTQUFBLE1BQUE1bEQsRUFDQUEsRUFBQSxLQUdBNmxELFlBM0dBLFNBMkdBdm1ELEdBQ0EsR0FBQUEsR0FBQSxxQkFBQUEsRUFBQSxZQUFBd21ELEVBQUF4bUQsTUFBQWttRCxNQUFBTyxXQUFBem1ELEVBQUE2VCxVQUFBLENBQ0EsSUFBQXlGLEVBQUEsK0JBQUF0WixFQUFBNlQsVUFBQSxVQUFBN1QsUUFBQSxPQUdBLE9BRkFBLFVBQUFzWixHQUFBLFNBQUF0WixRQUFBLFdBQ0FzWixHQUFBLFVBSUEsT0FBQTRzQyxNQUFBTyxRQUFBem1ELEtBQUFrWCxLQUFBLE1BQUFsWCxJQUlBc1EsUUFDQW8yQyxtQkFBQSxXQUNBNW5ELEtBQUFpbEQsaUJBRUE0QyxtQkFBQSxXQUNBN25ELEtBQUFzakQsWUFBQSxHQUVBd0Usa0JBQUEsV0FDQTluRCxLQUFBa25ELDJEQ3BUQWpvRCxFQUFBQyxRQUFBLDg5RUNBQVcsRUFBQSxHQUVJc00sS0FGVyxXQUdQLE9BQ0lzNEMsY0FDQVQsYUFBYywwSENGMUJuRSxHQUVJdnVDLFFBQVN5MkMsRUFBQSxFQUFtQkMsRUFBQSxFQUF1QjdGLFNBRW5EcmlELE9BQVEsTUFBTyxTQUFVLFVBQVcsU0FBVSxZQUFhLFlBQWEsT0FBUSxZQUFhLGNBQWUsYUFBYyxvQkFFMUhxTSxLQUFNLFdBQ0YsT0FDSW00QyxNQUNJcnhDLElBQUtqVCxLQUFLaVQsSUFDVnZELE9BQVExUCxLQUFLMFAsT0FDYjQxQyxRQUFTdGxELEtBQUtzbEQsUUFDZGhxQyxPQUFRdGIsS0FBS3NiLFFBRWpCMnNDLGNBQ0lwRyxLQUFNN2hELEtBQUs2aEQsS0FDWHdCLFVBQVdyakQsS0FBS3FqRCxVQUNoQjhDLFlBQWFubUQsS0FBS21tRCxZQUNsQlQsZUFLWmxtRCxVQUVJc2tELGNBRk0sV0FHRixPQUNJakMsS0FBTTdoRCxLQUFLNmhELEtBQ1hELE1BQU81aEQsS0FBS3FqRCxVQUNaVSxLQUFNL2pELEtBQUtna0QsYUFDWDUzQyxPQUFRcE0sS0FBS29NLE9BQ2I4N0MsT0FBUWxvRCxLQUFLbU4sV0FBYSxFQUFJLElBSXRDZzdDLGVBWk0sV0FhRixJQUFJbDVDLEVBQU1qUCxLQUFLb29ELGlCQU1mLE9BSklwb0QsS0FBS29NLFNBQVczTSxPQUFPQyxLQUFLNE0sU0FBU0QsU0FBUyxLQUM5QzRDLEdBQU8sV0FBYWpQLEtBQUtvTSxRQUd0QjZDLElBS2Z6QyxNQUFPLFdBQ0h4TSxLQUFLcW9ELG1CQUNMcm9ELEtBQUtnTixvQkFDTGhOLEtBQUt3Tix5QkFHVGQsU0FFSTI3QyxpQkFBa0IsV0FDZCxJQUFJajFCLHVFQUVBcHpCLEtBQUtzb0QsWUFDTGwxQixxTEFNQXB6QixLQUFLdW9ELFlBQ0xuMUIsbU1BTUpwekIsS0FBS2lvRCxhQUFhdkMsU0FBU08sUUFBVTd5QixHQUd6Q3JtQixnQkF0QkssV0F1QkQvTSxLQUFLaWtELFlBR1QxMkMsb0JBMUJLLFdBMkJEdk4sS0FBS2lrRCxZQUdUM1IsVUE5QkssU0E4Qks5akMsR0FDTixJQUFNUyxFQUFNQyw4QkFBOEJsUCxLQUFLc1QsV0FBbkMsY0FFWnRULEtBQUt5UCxNQUFNNDFDLEtBQUtwMkMsR0FBT1QsT0FBTW9CLFFBQVEsU0FBQ3pELEdBQ2xDeUcsT0FBTzNCLFNBQVc5RSxFQUFLcThDLGNDdEZ2QzVILEVBQUFsckMsRUFBSSt5QyxVQUFVLGdCQUFpQnpwRCxFQUFRLE1BQ3ZDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGdCQUFpQnpwRCxFQUFRLE1BQ3ZDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGdCQUFpQnpwRCxFQUFRLE1BQ3ZDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLHVCQUF3QnpwRCxFQUFRLE1BQzlDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLDBCQUEyQnpwRCxFQUFRLE1BQ2pENGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLHlCQUEwQnpwRCxFQUFRLE1BQ2hENGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLHFCQUFzQnpwRCxFQUFRLE1BQzVDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLG9DQUFxQ3pwRCxFQUFRLE1BQzNENGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLCtCQUFnQ3pwRCxFQUFRLE1BQ3RENGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLDRCQUE2QnpwRCxFQUFRLE1BQ25ENGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLCtCQUFnQ3pwRCxFQUFRLE1BQ3RENGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGdCQUFpQjVJLEdBQy9CZSxFQUFBbHJDLEVBQUkreUMsVUFBVSxrQkFBbUJ6cEQsRUFBUSxNQUN6QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxtQkFBb0J6cEQsRUFBUSxNQUMxQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxZQUFhenBELEVBQVEsTUFDbkM0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsVUFBV3pwRCxFQUFRLE1BQ2pDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGlCQUFrQnpwRCxFQUFRLElBQ3hDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLFlBQWF6cEQsRUFBUSxNQUNuQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxZQUFhenBELEVBQVEsTUFDbkM0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsVUFBV3pwRCxFQUFRLE1BQ2pDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLFdBQVl6cEQsRUFBUSxNQUNsQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxlQUFnQnpwRCxFQUFRLE1BQ3RDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLHFCQUFzQnpwRCxFQUFRLE1BQzVDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGtCQUFtQnpwRCxFQUFRLE1BQ3pDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGVBQWdCenBELEVBQVEsTUFDdEM0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsZUFBZ0J6cEQsRUFBUSxNQUN0QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxxQkFBc0J6cEQsRUFBUSxNQUM1QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxvQkFBcUJ6cEQsRUFBUSxNQUMzQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxtQkFBb0J6cEQsRUFBUSxNQUMxQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSwwQkFBMkJ6cEQsRUFBUSxNQUNqRDRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxRQUFTenBELEVBQVEsTUFDL0I0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsUUFBU3pwRCxFQUFRLE1BQy9CNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLGNBQWV6cEQsRUFBUSxNQUdyQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxXQUFZenBELEVBQVEsTUFDbEM0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsWUFBYXpwRCxFQUFRLE1BQ25DNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLE9BQVF6cEQsRUFBUSxNQUM5QjRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxRQUFTenBELEVBQVEsTUFDL0I0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsU0FBVXpwRCxFQUFRLE1BQ2hDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLFdBQVl6cEQsRUFBUSxNQUNsQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxpQkFBa0J6cEQsRUFBUSxNQUN4QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxrQkFBbUJ6cEQsRUFBUSxNQUN6QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxpQkFBa0J6cEQsRUFBUSxNQUN4QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxxQkFBc0J6cEQsRUFBUSxNQUM1QzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSxRQUFTenBELEVBQVEsTUFDL0I0aEQsRUFBQWxyQyxFQUFJK3lDLFVBQVUsYUFBY3pwRCxFQUFRLE1BRXBDNGhELEVBQUFsckMsRUFBSSt5QyxVQUFVLFNBQVV6cEQsRUFBUSxNQUNoQzRoRCxFQUFBbHJDLEVBQUkreUMsVUFBVSx3QkFBeUJ6cEQsRUFBUSxxQkNyRC9DQyxFQUFPQyxTQUVIb1MsUUFBUzZ3QyxTQUVUaDJDLEtBQU0sV0FDRixPQUNJbTRDLE1BQ0lyeEMsSUFBSy9ELE9BQU8sd0JBQ1pRLE9BQVFSLE9BQU8sNEJBRW5CKzRDLGNBQ0lwQyxZQUFZLEVBQ1pILFVBQ0lDLG9jQU9BTSx3V0FXaEJ2NUMsU0FDSWlsQyxRQUFTLFdBQ0wvK0IsT0FBTzNCLFNBQVcvQixPQUFPLGdEQ2pDckMsSUFBQXJRLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsb0ZDc0I3Q1ksRUFBQSxTQUVBNlUsWUFDQWcwQyxNQUFBMXBELEVBQUEsTUFJQWMsT0FBQSxvQkFHQXFNLEtBVkEsV0FXQSxPQUNBZ0Usa0JBQ0F3NEMsZ0JBQUEsSUFLQW44QyxNQWxCQSxXQW1CQXhNLEtBQUE0b0QseUJBSUFsOEMsU0FRQWs4QyxzQkFSQSxXQVFBLElBQUFub0QsRUFBQVQsS0FDQTRTLE9BQUFpMkMsUUFBQUMsY0FBQXA2QyxVQUFBMU8sS0FBQTBPLFVBQUFMLEtBQUFyTyxLQUFBcU8sTUFBQSxJQUVBdUUsT0FBQW0yQyxXQUFBLFNBQUFwNEMsR0FDQWxRLEVBQUFpTyxVQUFBaUMsRUFBQS9JLE1BQUE4RyxVQUNBak8sRUFBQTROLEtBQUFzQyxFQUFBL0ksTUFBQXlHLE9BT0EyNkMsVUFwQkEsV0FxQkEsSUFBQS81QyxFQUFBQyxPQUFBLGlCQUFBbFAsS0FBQTBPLFdBRUEsTUFBQTFPLEtBQUFxTyxPQUNBWSxHQUFBLElBQUFqUCxLQUFBcU8sTUFHQXVFLE9BQUFpMkMsUUFBQUcsV0FDQXQ2QyxVQUFBMU8sS0FBQTBPLFVBQUFMLEtBQUFyTyxLQUFBcU8sTUFDQSxHQUFBWSxJQU1BZzZDLFNBbkNBLFNBbUNBdjZDLEVBQUFMLEdBQ0FyTyxLQUFBME8sWUFDQTFPLEtBQUFxTyxPQUNBck8sS0FBQWdwRCxZQUtBaHBELEtBQUFtUSxtQkFNQSs0QyxpQkFqREEsU0FpREFDLEdBQ0FucEQsS0FBQW1RLGVBQUFnNUMsR0FNQUMsZUF4REEsV0F5REFwcEQsS0FBQWtsRCxXQUFBLGdCQUFBbGxELEtBQUFtUSxpQkFHQWs1QyxlQTVEQSxXQTZEQXJwRCxLQUFBMm9ELGdCQUFBLEdBR0FXLGdCQWhFQSxXQWlFQXRwRCxLQUFBMm9ELGdCQUFBLEdBR0FZLFlBcEVBLFNBb0VBcjdDLEdBQ0FsTyxLQUFBc3BELGtCQUNBdHBELEtBQUFpcEQsU0FBQWpwRCxLQUFBME8sVUFBQVIscUZDL0ZBck8sRUFBQSxTQUVBQyxPQUFBLCtCQUdBcU0sS0FMQSxXQU1BLE9BQ0EvSyxNQUFBLEVBQ0Fvb0QsZUFBQSxLQUNBMTVDLFFBQUEsRUFDQXVDLE9BQUEsS0FDQW8zQyxZQUFBL21ELFVBQUEsMEJBS0FsRCxVQUVBa3FELFdBRkEsV0FHQSxPQUFBMXBELEtBQUF3cEQsaUJBQUF4cEQsS0FBQWtPLFFBR0F5N0MsZ0JBTkEsV0FPQSxPQUFBajdDLFVBQUExTyxLQUFBME8sYUFNQWxDLE1BN0JBLFdBOEJBeE0sS0FBQXdwRCxlQUFBeHBELEtBQUFrTyxRQUlBd0UsT0FFQXRSLEtBRkEsU0FFQWsrQixHQUNBQSxHQUFBdC9CLEtBQUE0cEQsV0FNQWw5QyxTQUVBaXlDLEtBRkEsV0FFQSxJQUFBbCtDLEVBQUFULEtBQ0EsR0FBQUEsS0FBQTBwRCxXQUFBLENBRUExcEQsS0FBQThQLFFBQUEsRUFFQSxJQUFBYixFQUFBQyxPQUFBLGdCQUVBMjZDLEdBQ0E5N0MsT0FBQS9OLEtBQUErTixPQUNBRyxPQUFBbE8sS0FBQXdwRCxlQUNBOTZDLFVBQUExTyxLQUFBME8sV0FHQTFPLEtBQUF5UCxNQUFBNDFDLEtBQUFwMkMsRUFBQTQ2QyxHQUFBajZDLFFBQUEsU0FBQUMsR0FDQXBQLEVBQUE2TixNQUFBLFFBQUE3TixFQUFBK29ELGdCQUNBL29ELEVBQUFtcEQsV0FDQTUyQyxNQUFBLFNBQUFuRCxHQUNBcFAsRUFBQXFQLFFBQUEsRUFDQXJQLEVBQUE0UixPQUFBeEMsTUFJQSs1QyxPQXhCQSxXQXlCQTVwRCxLQUFBc08sTUFBQSw0QkNyR0FyUCxFQUFBQyxRQUFBLHd0QkNBQUQsRUFBQUMsUUFBQSxndkJDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCw2R0N5SzdDWSxFQUFBLFNBRUE2VSxZQUNBbzFDLFlBQUE5cUQsRUFBQSxLQUNBK3FELGFBQUEvcUQsRUFBQSxLQUNBZ3JELFNBQUFockQsRUFBQSxJQUNBaXJELFFBQUFqckQsRUFBQSxLQUNBMlYsWUFBQTNWLEVBQUEsS0FDQWtyRCxhQUFBbHJELEVBQUEsS0FDQW1yRCxZQUFBbnJELEVBQUEsTUFJQXNTLFFBQUE4NEMsRUFBQSxHQUdBdHFELE9BQ0Esb0JBQ0EsZUFDQSxxQkFDQSxpQkFDQSxZQUlBcU0sS0F6QkEsV0EwQkEsT0FDQWsrQyxlQUFBLEVBQ0FDLG1CQUFBLEVBQ0FDLG1CQUFBLEVBQ0FDLFdBQUEsS0FDQTk3QyxVQUFBLEtBQ0FMLEtBQUEsS0FDQU4sVUFDQTRCLFdBQ0F6QixVQUNBdThDLFlBQUEsUUFDQUMsV0FDQWo5QyxjQUFBLEVBQ0FnM0MsY0FDQVQsYUFBQSxFQUNBMkcsY0FBQSxLQUNBQyxtQkFBQSxFQUNBQyxpQkFBQSxLQUNBQyxnQkFBQSxFQUNBakgsYUFBQSxFQUNBaEMsS0FBQSxRQUNBd0IsVUFBQSxRQUtBN2pELFVBRUFrN0IsWUFGQSxXQUdBLE9BQUExNkIsS0FBQXNxRCxvQkFBQXRxRCxLQUFBdXFELG1CQUdBckgsUUFOQSxXQU9BLE9BQUFsakQsS0FBQXFxRCxlQUFBcnFELEtBQUF1cUQsbUJBTUFRLFVBYkEsV0FjQSxPQUFBL3FELEtBQUErTixPQUFBcEwsT0FBQSxHQUdBcW9ELGNBakJBLFdBa0JBLE9BQUFockQsS0FBQWdPLFdBQUFyTCxPQUFBLEdBR0Fzb0QsUUFyQkEsV0FzQkEsT0FBQWpyRCxLQUFBK3FELFlBQUEvcUQsS0FBQWdyRCxlQUdBRSxRQUFBLFdBQ0EsT0FBQWxyRCxLQUFBeU8sSUFBQSxVQUFBek8sS0FBQTBPLFVBQUFGLEdBQUEsVUFHQTI4QyxZQTdCQSxXQThCQSxRQUFBbnJELEtBQUEwNkIsZUFFQTE2QixLQUFBNmpELGVBRUE3akQsS0FBQW9yRCxvQkFFQTNyRCxPQUFBQyxLQUFBTSxLQUFBd3FELFlBQUE3bkQsT0FBQSxLQUdBMG9ELGlCQXZDQSxXQXdDQSxlQUFBcnJELEtBQUF5cUQsWUFBQSw4QkFHQWEsU0EzQ0EsV0E0Q0EsR0FBQXRyRCxLQUFBME8sVUFBQSxDQUVBLElBQUE0OEMsRUFBQXRyRCxLQUFBME8sVUFBQUYsR0FNQSxNQUpBLE1BQUF4TyxLQUFBcU8sT0FDQWk5QyxHQUFBLElBQUF0ckQsS0FBQXFPLE1BR0FpOUMsSUFHQXQ5QyxXQXZEQSxXQXdEQSxPQUFBaE8sS0FBQW9yRCxzQkFFQXByRCxLQUFBMlAsU0FHQTQ3QyxjQTdEQSxXQThEQSxPQUFBdnJELEtBQUF3VixLQUdBZzJDLGdCQWpFQSxXQWtFQSxPQUFBQyxRQUFBenJELEtBQUEycUQsZ0JBR0FlLGlCQXJFQSxXQXNFQSxjQUFBMXJELEtBQUE2cUQsa0JBR0FjLGdCQXpFQSxXQTBFQSxPQUFBM3JELEtBQUE0ckQsVUFDQTVyRCxLQUFBbVEsZUFBQXhOLFFBQUEzQyxLQUFBNHJELFdBTUFwL0MsTUFySUEsV0FzSUF4TSxLQUFBcU8sS0FBQXJPLEtBQUE2ckQsYUFLQTdyRCxLQUFBOHJELGlCQUVBOXJELEtBQUF5cUQsWUFBQTF4QyxRQUFBOUYsSUFBQSwrQ0FJQXpCLFFBRUF1NkMsZUFBQSxXQUNBLEdBQUEvckQsS0FBQThxRCxlQUNBLE9BQUE5cUQsS0FBQWtsRCxXQUFBLHNCQUdBbGxELEtBQUE0cUQsbUJBQUEsRUFDQTVxRCxLQUFBMnFELGNBQUEsS0FDQTNxRCxLQUFBNnFELGlCQUFBLE1BR0FtQixpQkFBQSxXQUNBaHNELEtBQUFpc0QsY0FHQUMsZ0JBQUEsU0FBQW5ILEdBQ0Eva0QsS0FBQTZPLFlBQUFrMkMsS0FNQXJ5QyxPQU9BNDRDLFNBUEEsV0FRQXRyRCxLQUFBaXNELGNBT0FFLGtCQWZBLFNBZUF6OUMsR0FDQTFPLEtBQUEwTyxVQUFBMU8sS0FBQXdxRCxXQUFBOTdDLElBT0FtOUMsYUF2QkEsU0F1QkF4OUMsR0FDQXJPLEtBQUFxTyxRQU1BOEIsZUE5QkEsU0E4QkFnNUMsR0FDQW5wRCxLQUFBc08sTUFBQSxxQkFBQTY2QyxJQUdBNUYsV0FsQ0EsU0FrQ0FXLEdBQ0FBLEVBQ0Fsa0QsS0FBQXNiLFNBRUF0YixLQUFBaXNELGVBT0F2L0MsU0FLQW8vQyxlQUxBLFdBS0EsSUFBQXJyRCxFQUFBVCxLQUNBQSxLQUFBeVAsTUFBQXdELElBQUEvRCxPQUFBLDBCQUFBVSxRQUFBLFNBQUFDLEdBSUFwUCxFQUFBK3BELFdBQUE5cEQsRUFBQUMsTUFBQWtQLEVBQUFzekMsT0FBQXRnRCxJQUFBLFNBQUE2TCxHQUNBLE9BQUFoTyxFQUFBMHJELEtBQUExOUMsRUFBQSxnQkFDQTI5QyxRQUFBLE1BQUFuckQsUUFHQVQsRUFBQWlPLFVBQUFqTyxFQUFBK3BELFdBQUEvcEQsRUFBQTByRCxtQkFFQTFyRCxFQUFBOHBELG1CQUFBLEtBT0EwQixXQXhCQSxTQXdCQWxJLEdBQUEsSUFBQWxpRCxFQUFBN0IsS0FDQUEsS0FBQXFxRCxlQUFBLEVBRUFycUQsS0FBQXlQLE1BQUE0MUMsS0FBQW4yQyxPQUFBLGtCQUNBUixVQUFBMU8sS0FBQTBPLFVBQUFGLEdBQ0FILEtBQUFyTyxLQUFBcU8sS0FDQTAxQyxLQUFBL2pELEtBQUFna0QsYUFDQW5DLEtBQUE3aEQsS0FBQTZoRCxLQUNBcjhDLElBQUF4RixLQUFBcWpELFlBQ0F6ekMsUUFBQSxTQUFBQyxHQUNBaE8sRUFBQWtNLE9BQUE4QixFQUFBOUIsT0FDQWxNLEVBQUE4TixRQUFBRSxFQUFBRixRQUNBOU4sRUFBQXFNLE9BQUEyQixFQUFBM0IsT0FDQXJNLEVBQUE0aUQsV0FBQTUwQyxFQUFBNDBDLFdBQ0E1aUQsRUFBQW1pRCxhQUFBbjBDLEVBQUE0MEMsV0FBQTZILFlBQ0F6cUQsRUFBQXdvRCxlQUFBLEVBQ0F4b0QsRUFBQXlvRCxtQkFBQSxFQUNBem9ELEVBQUFnaUQsYUFBQSxLQUlBdm9DLE9BN0NBLFdBNkNBLElBQUFpeEMsRUFBQXZzRCxLQUNBQSxLQUFBcXFELGVBQUEsRUFFQXJxRCxLQUFBeVAsTUFBQTQxQyxLQUFBbjJDLE9BQUEsa0JBQ0FnMUMsS0FBQWxrRCxLQUFBdWpELFdBQ0E3MEMsVUFBQTFPLEtBQUEwTyxVQUFBRixHQUNBTixPQUFBbE8sS0FBQWtPLE9BQUFHLEtBQ0ErOEMsbUJBQUFwckQsS0FBQW9yRCxxQkFDQXg3QyxRQUFBLFNBQUFDLEdBQ0EwOEMsRUFBQTFJLGFBQUEsRUFDQTBJLEVBQUF4K0MsT0FBQThCLEVBQUE5QixPQUNBdytDLEVBQUE1OEMsV0FDQTQ4QyxFQUFBbEMsZUFBQSxFQUNBa0MsRUFBQWpDLG1CQUFBLEtBT0FrQyxlQWpFQSxTQWlFQW4rQyxHQUVBck8sS0FBQXFPLE9BQ0FyTyxLQUFBZ2tELGFBQUEsRUFJQWhrRCxLQUFBc08sTUFBQSxZQUFBdE8sS0FBQTBPLFVBQUFGLEdBQUF4TyxLQUFBcU8sT0FNQW8rQyxnQkE5RUEsU0E4RUEvOUMsR0FFQTFPLEtBQUEwTyxVQUFBMU8sS0FBQXdxRCxXQUFBOTdDLEdBQ0ExTyxLQUFBcU8sS0FBQSxJQUlBck8sS0FBQXNPLE1BQUEsWUFBQXRPLEtBQUEwTyxVQUFBRixHQUFBeE8sS0FBQXFPLE9BTUFxK0MsY0EzRkEsU0EyRkFsK0MsR0FFQSxJQUFBeE8sS0FBQTRyRCxVQUFBNXJELEtBQUEyckQsa0JBQ0EzckQsS0FBQW1RLGdCQUFBM0IsSUFJQXhPLEtBQUEyckQsaUJBS0FqckQsRUFBQVYsS0FBQW1RLGdCQUFBRCxTQUFBMUIsS0FJQXhPLEtBQUFtUSxlQUFBOU8sS0FBQW1OLEdBS0F4TyxLQUFBbVEsZUFBQXpQLEVBQUFWLEtBQUFtUSxnQkFBQXROLElBQUEsU0FBQXk4QixHQUFBLE9BQUFBLE1BTUFxdEIsZ0JBdEhBLFNBc0hBbitDLEdBQ0F4TyxLQUFBbVEsZUFBQXpQLEVBQUFWLEtBQUFtUSxnQkFBQXk4QyxRQUFBcCtDLElBTUFJLFVBN0hBLFNBNkhBSixHQUNBeE8sS0FBQWtyRCxVQUNBbHJELEtBQUEycUQsY0FBQW44QyxJQU9BSyxZQXRJQSxTQXNJQWsyQyxHQUFBLElBQUE4SCxFQUFBN3NELEtBQ0Era0QsRUFBQXFDLE1BQUFPLFFBQUE1QyxTQUVBNTFDLE1BQ0F6TixLQUFBLFVBQ0EwTixNQUFBMU0sVUFBQSxtQkFDQTZKLEtBQUE4QyxpQkFBQSwwQkFBQTAxQyxHQUNBejFDLGtCQUFBNU0sVUFBQSxrQkFDQTZNLGlCQUFBN00sVUFBQSxhQUNBOE0sa0JBQUEsR0FDQSxXQUNBLElBQUFQLEVBQUFDLE9BQUEsaUJBRUEyOUMsRUFBQXA5QyxNQUFBQyxPQUFBVCxHQUFBODFDLFFBQUFuMUMsUUFBQSxTQUFBQyxHQUNBZzlDLEVBQUFaLGFBQ0FZLEVBQUExOEMsZUFBQXpQLEVBQUFtc0QsRUFBQTE4QyxnQkFBQTI4QyxXQUFBL0gsUUFRQWdJLGlCQTdKQSxXQThKQS9zRCxLQUFBbVQsVUFBQSxlQUNBblQsS0FBQTJxRCxjQUFBLE1BTUE3MEMsV0FyS0EsV0FzS0E5VixLQUFBK3NELG1CQUNBL3NELEtBQUFpc0QsY0FNQWUsYUE3S0EsV0E4S0FodEQsS0FBQStzRCxtQkFDQS9zRCxLQUFBaXNELGNBTUFnQixXQXJMQSxTQXFMQS8rQyxHQUNBbE8sS0FBQStzRCxtQkFDQS9zRCxLQUFBd3NELGVBQUF0K0MsSUFVQVksbUJBak1BLFNBaU1BTixHQUNBeE8sS0FBQTBzRCxjQUFBbCtDLEdBQ0F4TyxLQUFBc08sTUFBQSx3QkFNQTQrQyxXQXpNQSxXQTBNQWx0RCxLQUFBNlcsTUFBQXMyQyxTQUFBQyxVQU1BL0YsdUJBaE5BLFNBZ05BdEQsR0FDQS9qRCxLQUFBZ2tELGFBQUFELEVBQ0EvakQsS0FBQWlzRCxjQUdBb0IsYUFyTkEsV0FzTkFydEQsS0FBQTRxRCxtQkFBQSxHQUdBMEMsb0JBek5BLFdBME5BdHRELEtBQUE0cUQsbUJBQUEsR0FHQTJDLGNBN05BLFNBNk5BbC9DLEdBQ0FyTyxLQUFBd3NELGVBQUFuK0MsSUFHQVUsV0FqT0EsU0FpT0FiLEdBQ0FsTyxLQUFBNnFELGlCQUFBMzhDLEdBR0FzL0MsbUJBck9BLFdBc09BeHRELEtBQUE2cUQsaUJBQUEsTUFHQTRDLGNBek9BLFNBeU9Bdi9DLEdBQ0FsTyxLQUFBaXNELGNBR0F5QixlQTdPQSxTQTZPQWhELEdBQ0ExcUQsS0FBQTJ0RCxLQUFBLFVBQUFqRCxJQU1Ba0QsZUFwUEEsU0FvUEExMkMsR0FDQWxYLEtBQUF5cUQsWUFBQXZ6QyxFQUNBNkIsUUFBQWpDLElBQUEsb0NBQUFJLElBR0EyMkMsc0JBelBBLFNBeVBBMy9DLEdBQUEsSUFBQTQvQyxFQUFBOXRELEtBQ0FpUCxFQUFBQyxPQUFBLGdCQUVBMjZDLEdBQ0E5N0MsT0FBQS9OLEtBQUFtUSxlQUNBakMsU0FDQVEsVUFBQTFPLEtBQUEwTyxVQUFBRixJQUdBeE8sS0FBQXlQLE1BQUE0MUMsS0FBQXAyQyxFQUFBNDZDLEdBQUFqNkMsUUFBQSxTQUFBQyxHQUNBaStDLEVBQUE3QixhQUNBNkIsRUFBQTM5QyxxQkFJQXcwQyxPQXhRQSxTQXdRQTlDLEdBQ0EsSUFBQTdoRCxLQUFBNmpELFlBQUEsQ0FFQSxJQUFBUixFQUFBLE1BR0FyakQsS0FBQTZoRCxXQUNBd0IsRUFBQSxRQUFBcmpELEtBQUFxakQsVUFBQSxjQUdBcmpELEtBQUE2aEQsT0FDQTdoRCxLQUFBcWpELFlBQ0FyakQsS0FBQWlzRCxnREMvcEJBLElBQUFwdEQsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxpR0M0QjdDWSxFQUFBLFNBRUF5UixRQUFBeThDLEVBQUEsR0FHQXI1QyxZQUNBczVDLFVBQUFodkQsRUFBQSxLQUNBaXZELFdBQUFqdkQsRUFBQSx3QkNoREEsSUFBQUgsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxpR0N3QjdDWSxFQUFBLFNBRUF5UixRQUFBNDhDLEVBQUEsR0FHQTF1RCxVQUVBcVYsUUFGQSxXQUdBLE9BQUE3VSxLQUFBb1EsTUFBQTBFLFVBR0FxNUMsS0FOQSxXQU9BLE9BQUF0UixhQUFBLGlCQUFBNzhDLEtBQUFvUSxNQUFBRSxVQUFBLFNBR0EyRSxNQVZBLFdBV0EsT0FBQWpWLEtBQUFvUSxNQUFBaEIsT0FBQXBQLEtBQUFvUSxNQUFBOEUsMkJDckRBalcsRUFBQUMsUUFBQSxnb0JDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxpR0NRN0NZLEVBQUEsU0FFQXlSLFFBQUE4OEMsRUFBQSxtQkN2QkFudkQsRUFBQUMsUUFBQSxzUkNBQUQsRUFBQUMsUUFBQSxpdEJDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxpR0MrRDdDWSxFQUFBLFNBRUF5UixRQUFBeThDLEVBQUEsR0FHQXI1QyxZQUNBMjVDLFNBQUFydkQsRUFBQSxLQUNBc3ZELFVBQUF0dkQsRUFBQSxNQUlBbU4sS0FYQSxXQVlBLE9BQ0FpM0MsVUFFQXBoRCxNQUFBLFFBQ0FpVCxNQUFBdlMsVUFBQSxjQUdBVixNQUFBLE9BQ0FpVCxNQUFBdlMsVUFBQSxlQUNBK2lELE9BQUEsSUFHQXpqRCxNQUFBLGVBQ0FpVCxNQUFBdlMsVUFBQSxvQkFDQStpRCxPQUFBLE1BT0FqbUQsVUFFQTZqRCxVQUZBLFdBR0EsT0FBQXJqRCxLQUFBQyxRQUFBb2pELFlBTUEzMkMsU0FDQTZoRCxlQUFBLFNBQUFsbEQsR0FDQXJKLEtBQUFrbEQsV0FBQSxpQkFBQTc3QyxJQUdBbWxELGdCQUxBLFNBS0F0Z0QsRUFBQXlDLEdBQ0EsSUFBQVAsRUFBQU8sRUFBQUMsYUFBQTY5QyxRQUFBLFNBQ0E5OUMsRUFBQUMsYUFBQTg5QyxVQUFBLFNBR0EsSUFBQXQrQyxHQUVBcFEsS0FBQXNPLE1BQUEsMkJBQUFKLElBR0FvNUMsZUFmQSxTQWVBaGtELEdBQ0EsT0FBQXRELEtBQUE2akQsYUFFQXZnRCxFQUFBdEIsUUFBQWhDLEtBQUFDLFFBQUE0aEQseUJDeElBLElBQUFoakQsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCwwR0M4QjdDWSxFQUFBLFNBRUF5UixRQUFBNDhDLEVBQUEsRUFBQVMsRUFBQSxHQUVBbnZELFVBQ0EwckQsUUFBQSxXQUNBLE9BQUFsckQsS0FBQXlPLElBQUEsVUFBQXpPLEtBQUFvUSxNQUFBMUIsVUFBQSxXQUlBaEMsU0FFQWtpRCwwQkFGQSxXQUdBNXVELEtBQUFvUixxQkFBQSxFQUNBcFIsS0FBQTRPLGFBR0FpZ0QsNEJBUEEsV0FRQTd1RCxLQUFBb1IscUJBQUEsRUFDQXBSLEtBQUE2TyxnQ0M5REE1UCxFQUFBQyxRQUFBLHdsQ0NBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLDBHQzRDN0NZLEVBQUEsU0FFQXlSLFFBQUE4OEMsRUFBQSxFQUFBTyxFQUFBLG1CQzNEQTF2RCxFQUFBQyxRQUFBLDIwQkNBQUQsRUFBQUMsUUFBQSxzN0NDVUFXLEVBQUEsU0FHQUMsT0FBQSxpQ0FHQXFNLEtBTkEsV0FPQSxPQUNBdStDLGFBS0FsckQsVUFFQXN2RCxVQUZBLFdBR0EsT0FDQXBnRCxVQUFBMU8sS0FBQTBPLFVBQ0FSLE9BQUFsTyxLQUFBcU8sS0FDQTBnRCxPQUFBLzlDLFNBQUFzckMsY0FBQSxlQUFBQyxhQUFBLFlBT0EvdkMsTUExQkEsV0EyQkF4TSxLQUFBZ3ZELGdCQUlBQyxVQS9CQSxXQWdDQTE1QyxFQUFBdlYsS0FBQWt2RCxZQUFBQyxTQUFBQyxjQUlBMThDLE9BRUFnNEMsUUFGQSxTQUVBMkUsR0FDQXJ2RCxLQUFBc08sTUFBQSxVQUFBK2dELElBR0EzZ0QsVUFOQSxXQU9BMU8sS0FBQXN2RCxtQkFHQWpoRCxLQVZBLFdBV0FyTyxLQUFBc3ZELG9CQU1BNWlELFNBS0EwZ0QsT0FMQSxXQU1BNzNDLEVBQUF2VixLQUFBMG1ELEtBQUE2SSxpQkFBQUMsU0FNQVIsYUFaQSxXQVlBLElBQUF2dUQsRUFBQVQsS0FDQXVWLEVBQUF2VixLQUFBa3ZELFlBQUFPLFlBQ0F4Z0QsSUFBQUMsT0FBQSxVQUVBNC9DLFVBQUE5dUQsS0FBQTh1RCxVQUVBWSxVQUFBLFNBQUFsaEQsRUFBQW1oRCxHQUNBbHZELEVBQUFpcUQsUUFBQXJwRCxNQUNBbU4sS0FDQTBHLFNBQUF5NkMsRUFBQXR2RCxLQUNBaVEsVUFBQXEvQyxFQUFBdHZELEtBQUE4USxNQUFBLEtBQUFxUyxNQUNBb3NDLFFBQUEsRUFDQUMsYUFBQSxRQUlBQyxpQkFBQSxTQUFBdGhELEVBQUFvaEQsR0FDQSxJQUFBRyxFQUFBcnZELEVBQUFELEVBQUFpcUQsU0FBQW4wQyxXQUFBL0gsT0FDQXVoRCxFQUFBSCxVQUNBbnZELEVBQUE2TixNQUFBLFdBQUF5aEQsRUFBQXR2RCxFQUFBaXFELFVBR0FzRixnQkFBQSxTQUFBeGhELEVBQUFxQixHQUNBcFAsRUFBQTZOLE1BQUEsa0JBQUF1QixFQUFBTyxNQUFBM1AsRUFBQWlxRCxTQUVBLElBQUFoMEMsRUFBQWhXLEVBQUFELEVBQUFpcUQsU0FBQXVGLFdBQUF6aEQsT0FDQS9OLEVBQUFpcUQsUUFBQS96QyxPQUFBRCxFQUFBLElBR0F3NUMsV0FBQSxXQUNBenZELEVBQUE2TixNQUFBLG1CQUFBN04sRUFBQWlxRCxVQUdBeUYsY0FBQSxTQUFBM2hELEVBQUE0aEQsRUFBQXZnRCxHQUNBLElBQUFrZ0QsRUFBQXJ2RCxFQUFBRCxFQUFBaXFELFNBQUFuMEMsV0FBQS9ILE9BRUEsS0FBQXFCLEVBQUE0c0MsT0FDQTJULEVBQUF2Z0QsRUFBQXdnRCxhQUNBLEtBQUF4Z0QsRUFBQTRzQyxTQUNBMlQsRUFBQSw4REFHQUwsRUFBQUYsYUFBQU8sRUFFQTN2RCxFQUFBNk4sTUFBQSxRQUFBeWhELEVBQUF0dkQsRUFBQWlxRCxhQVFBNEUsZ0JBaEVBLFdBaUVBLzVDLEVBQUF2VixLQUFBa3ZELFlBQUEvaUQsS0FBQSxjQUFBbWtELFNBQUF4QixVQUFBOXVELEtBQUE4dUQsK0NDaElBN3ZELEVBQUFDLFFBQUEsMkxDd0JBVyxFQUFBLFNBRUFDLE9BQUEsV0FHQTRVLFlBQ0E2N0MsT0FBQXZ4RCxFQUFBLE1BSUEwTixTQUVBOGpELFlBRkEsU0FFQWg5QyxHQUNBeFQsS0FBQTBxRCxRQUFBL3pDLE9BQUFuRCxFQUFBLHVCQ3JDQSxJQUFBM1UsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxvRkMwQjdDWSxFQUFBLFNBRUFDLE9BQUEsMENBR0FOLFVBRUFpOUMsT0FGQSxXQUdBLE9BQUF6OEMsS0FBQWdULE1BQ0EsUUFDQSxNQUFBaFQsS0FBQTR2RCxRQUNBLFVBRUEsY0FPQWxqRCxTQUVBK2pELE1BRkEsV0FHQXp3RCxLQUFBc08sTUFBQSwyQkM5REFyUCxFQUFBQyxRQUFBLGd1QkNBQUQsRUFBQUMsUUFBQSx1ZEN3TEFXLEVBQUEsU0FFQTZVLFlBQ0FnOEMsaUJBQUExeEQsRUFBQSxLQUNBMnhELFFBQUEzeEQsRUFBQSxLQUNBMHBELE1BQUExcEQsRUFBQSxLQUNBNHhELGNBQUE1eEQsRUFBQSxJQUlBYyxPQUNBME8sR0FBQXN1QixPQUNBK3pCLFVBQUEsRUFDQUMsZUFDQXB2RCxLQUFBK3BELFFBQ0Fyc0QsUUFGQSxXQUdBLFlBTUErTSxLQXRCQSxXQXVCQSxPQUNBKzJDLFNBQUEsRUFDQXB6QyxRQUFBLEVBQ0FNLE1BQUEsS0FDQXJQLE9BQUEsS0FDQWd3RCxjQUFBLEtBQ0FDLHNCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsV0FBQSxFQUNBNytDLFlBS0E3UyxVQUtBcVYsUUFMQSxXQU1BLFFBQUE3VSxLQUFBb1EsT0FFQXBRLEtBQUFvUSxNQUFBMEUsVUFNQXE4QyxVQUFBLFdBQ0EsV0FBQXp3RCxFQUFBMHdELEtBQUFweEQsS0FBQXFTLFVBTUE3RixNQTFEQSxXQTJEQXhNLEtBQUFxeEQsUUFHQTcvQyxRQUNBOC9DLHFCQUFBLFdBQ0F0eEQsS0FBQXV4RCx3QkFDQXZ4RCxLQUFBd3hELG1CQUNBeHhELEtBQUF5eEQsaUJBSUEva0QsU0FRQTJrRCxLQVJBLFdBUUEsSUFBQTV3RCxFQUFBVCxLQUNBQSxLQUFBa2pELFNBQUEsRUFFQSxJQUFBajBDLEVBQUFDLE9BQUEsVUFBQWxQLEtBQUF3TyxHQUFBZ0ssUUFBQSxXQUVBeFksS0FBQXlQLE1BQUF3RCxJQUFBaEUsR0FBQVcsUUFBQSxTQUFBQyxHQUNBcFAsRUFBQTJQLE1BQUFQLEVBQUFPLE1BQ0EzUCxFQUFBTSxPQUFBOE8sRUFBQTlPLE9BQ0FOLEVBQUFpeEQsaUJBT0FBLFlBdkJBLFdBdUJBLElBQUE3dkQsRUFBQTdCLEtBQ0FpUCxFQUFBQyxPQUFBLGtCQUFBbFAsS0FBQW9RLE1BQUFqUSxVQUVBSCxLQUFBeVAsTUFBQXdELElBQUFoRSxHQUFBVyxRQUFBLFNBQUFDLEdBRUEsSUFBQTFQLEVBQUEsSUFBQXd4RCxFQUFBLEVBQUE5aEQsR0FDQWhPLEVBQUFrdkQsY0FBQXJ3RCxFQUFBQyxNQUFBUixFQUFBRyxVQUNBdUMsSUFBQSxTQUFBaEMsR0FBQSxPQUFBQSxFQUFBRSxTQUNBK0IsU0FBQSxHQUNBNUIsUUFFQVcsRUFBQXFoRCxTQUFBLEtBT0EwTyxxQkF6Q0EsV0EwQ0E1eEQsS0FBQWd4RCxzQkFBQSxFQUNBaHhELEtBQUE2d0QsVUFBQSxHQU1BVSxzQkFqREEsV0FrREF2eEQsS0FBQWd4RCxzQkFBQSxFQUNBaHhELEtBQUE2d0QsVUFBQSxHQU1BZ0IsaUJBekRBLFNBeURBQyxHQUNBQSxFQUFBLFVBQUFBLEVBQUEsS0FBQUEsRUFDQTl4RCxLQUFBMnRELEtBQUEsZUFBQW1FLElBTUFuVCxLQWpFQSxXQWlFQSxJQUFBNE4sRUFBQXZzRCxLQUNBQSxLQUFBOFAsUUFBQSxFQUVBLElBQUFiLEVBQUFDLE9BQUEsVUFBQWxQLEtBQUF3TyxHQUFBZ0ssUUFBQSxXQUVBeFksS0FBQXlQLE1BQUE0MUMsS0FBQXAyQyxFQUFBalAsS0FBQWUsUUFBQTZPLFFBQUEsU0FBQUMsR0FDQTA4QyxFQUFBaitDLE1BQUEsUUFBQXVCLEVBQUFPLE9BQ0FtOEMsRUFBQXo4QyxRQUFBLElBQ0FrRCxNQUFBLFNBQUFBLEdBQ0F1NUMsRUFBQTdILFFBQUExeEMsTUFBQXRRLFVBQUEsYUFBQXF2RCxRQUFBLE1BQ0F4RixFQUFBejhDLFFBQUEsRUFDQXk4QyxFQUFBbDZDLE9BQUFXLElBR0FoVCxLQUFBbVQsVUFBQSxtQkFNQXpELE9BckZBLFdBcUZBLElBQUFtOUMsRUFBQTdzRCxLQUNBLEdBQUFneUQsUUFBQXR2RCxVQUFBLHFCQUlBMUMsS0FBQThQLFFBQUEsRUFFQSxJQUFBYixFQUFBQyxPQUFBLGlCQUVBbFAsS0FBQXlQLE1BQUFDLE9BQUFULEdBQUE4MUMsSUFBQS9rRCxLQUFBb1EsTUFBQTVCLEtBQUFvQixRQUFBLFNBQUFDLEdBQ0FnOUMsRUFBQXYrQyxNQUFBLFVBQUF1K0MsRUFBQXo4QyxNQUFBNUIsSUFDQXErQyxFQUFBLzhDLFFBQUEsTUFPQXVMLE1BdkdBLFdBd0dBcmIsS0FBQXNPLE1BQUEsV0FHQTJqRCxZQTNHQSxXQTRHQWp5RCxLQUFBaXhELGFBQUEsRUFDQWp4RCxLQUFBNndELFVBQUEsR0FHQVksYUFoSEEsV0FpSEF6eEQsS0FBQWl4RCxhQUFBLEVBQ0FqeEQsS0FBQTZ3RCxVQUFBLEdBR0FxQixhQXJIQSxTQXFIQTloRCxHQUNBcFEsS0FBQW9RLFFBQ0FwUSxLQUFBc08sTUFBQSxRQUFBOEIsSUFHQStoRCxVQTFIQSxXQTJIQW55RCxLQUFBa3hELFdBQUEsRUFDQWx4RCxLQUFBNndELFVBQUEsR0FHQXVCLFdBL0hBLFdBZ0lBcHlELEtBQUFreEQsV0FBQSxFQUNBbHhELEtBQUE2d0QsVUFBQSxHQU1BNUQsV0F2SUEsU0F1SUE3OEMsRUFBQWxDLEdBQ0FsTyxLQUFBb1EsUUFDQXBRLEtBQUFzTyxNQUFBLFFBQUE4QixFQUFBbEMsSUFHQW1rRCxTQTVJQSxXQTZJQXovQyxPQUFBMC9DLEtBQUF0eUQsS0FBQW9RLE1BQUFtaUQsZ0RDM1lBLElBQUExekQsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxnR0MwQjdDWSxFQUFBLFNBRUFDLE9BQ0EsT0FDQSxTQUlBcU0sS0FSQSxXQVNBLE9BQ0FteEMsRUFBQSxHQUNBa1YsRUFBQSxLQUtBaHpELFVBRUFpekQsV0FGQSxXQUdBLE9BQUF6eUQsS0FBQXM5QyxFQUFBLEtBQUF0OUMsS0FBQXd5RCxFQUFBLEtBR0FFLFFBTkEsV0FPQSxPQUFBQyxVQUFBM3lELEtBQUFvdEIsU0FNQTVnQixNQTdCQSxXQThCQSxJQUNBb21ELEdBREE1eUQsS0FBQW1NLE1BQUEsU0FDQWdGLE1BQUEsS0FDQW5SLEtBQUFzOUMsRUFBQXNWLEVBQUEsR0FDQTV5RCxLQUFBd3lELEVBQUFJLEVBQUEsSUFJQWxtRCxTQUVBbW1ELE9BRkEsU0FFQWxpRCxHQUNBLElBQUE2RSxFQUFBRCxFQUFBNUUsRUFBQTBVLFFBRUF5dEMsRUFBQXQ5QyxFQUFBNVQsUUFDQW14RCxFQUFBdjlDLEVBQUF3OUMsU0FFQUMsRUFBQXRpRCxFQUFBdWlELE1BQUExOUMsRUFBQXNzQixTQUFBcXhCLEtBQ0FDLEVBQUF6aUQsRUFBQTBpRCxNQUFBNzlDLEVBQUFzc0IsU0FBQWhhLElBRUE5bkIsS0FBQXM5QyxHQUFBMlYsRUFBQUgsRUFBQSxLQUFBUSxVQUNBdHpELEtBQUF3eUQsR0FBQVksRUFBQUwsRUFBQSxLQUFBTyxXQUdBNWlELE9BZkEsV0FnQkExUSxLQUFBc08sTUFBQSxXQUFBdE8sS0FBQXM5QyxFQUFBLElBQUF0OUMsS0FBQXd5RCxHQUNBeHlELEtBQUFxYixTQUdBQSxNQXBCQSxXQXFCQXJiLEtBQUFzTyxNQUFBLFdBR0EyNUIsTUF4QkEsV0F5QkFqb0MsS0FBQXM5QyxFQUFBLEdBQ0F0OUMsS0FBQXd5RCxFQUFBLG1DQ3RHQXZ6RCxFQUFBQyxRQUFBLCtvQ0NBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLG9GQ3FCN0NZLEVBQUEsU0FFQUMsT0FBQSxTQUdBcU0sS0FMQSxXQU1BLE9BQ0EvSyxNQUFBLEVBQ0FteUQsU0FBQSxLQUNBempELFFBQUEsRUFDQXVDLE9BQUEsS0FDQW8zQyxZQUFBL21ELFVBQUEsNEJBS0FsRCxVQUVBa3FELFdBRkEsV0FHQSxPQUFBMXBELEtBQUFvUSxNQUFBbWpELFdBQUF2ekQsS0FBQXV6RCxXQU1BL21ELE1BekJBLFdBMEJBeE0sS0FBQXV6RCxTQUFBdnpELEtBQUFvUSxNQUFBbWpELFVBSUE3Z0QsT0FFQXRSLEtBRkEsU0FFQWsrQixHQUNBQSxHQUFBdC9CLEtBQUE0cEQsV0FNQWw5QyxTQUVBaXlDLEtBRkEsV0FFQSxJQUFBbCtDLEVBQUFULEtBQ0EsR0FBQUEsS0FBQTBwRCxXQUFBLENBRUExcEQsS0FBQThQLFFBQUEsRUFFQSxJQUFBYixFQUFBQyxPQUFBLGtCQUFBbFAsS0FBQW9RLE1BQUE1QixHQUFBZ0ssUUFBQSxXQUVBeFksS0FBQXlQLE1BQUE0MUMsS0FBQXAyQyxHQUFBc2tELFNBQUF2ekQsS0FBQXV6RCxXQUFBM2pELFFBQUEsU0FBQUMsR0FDQXBQLEVBQUE2TixNQUFBLFFBQUF1QixHQUNBcFAsRUFBQW1wRCxXQUNBNTJDLE1BQUEsU0FBQW5ELEdBQ0FwUCxFQUFBcVAsUUFBQSxFQUNBclAsRUFBQTRSLE9BQUF4QyxFQUNBcFAsRUFBQWltRCxLQUFBOWlELE1BQUF5VSxZQUlBdXhDLE9BbkJBLFdBb0JBNXBELEtBQUFzTyxNQUFBLDRCQzdGQXJQLEVBQUFDLFFBQUEsb3dCQ21CQVcsRUFBQSxTQUVBNlUsWUFDQTgrQyxVQUFBeDBELEVBQUEsS0FDQXkwRCxhQUFBejBELEVBQUEsTUFHQWMsT0FDQWlCLE9BQUFxbUQsTUFDQWo3QyxLQUFBMU0sT0FDQTRTLE9BQUE1UyxPQUNBdVMsY0FDQXRRLEtBQUEwbEQsTUFDQWhvRCxZQUVBczBELFVBQUFqSSxRQUNBa0ksbUJBQ0FqeUQsS0FBQStwRCxRQUNBcnNELFNBQUEsR0FFQXcwRCxLQUNBbHlELEtBQUFqQyxPQUNBTCxhQUlBc04sU0FFQTZMLGNBRkEsU0FFQXZXLEdBQ0EsT0FBQWhDLEtBQUFzQyxPQUFBTixHQUFBLDRCQUdBNnhELFVBQUEsU0FBQWp5RCxHQUNBQSxLQUFBLElBQ0EsT0FBQWxCLEVBQUE2VixVQUFBdlcsS0FBQTh6RCxRQUFBNXlELE1BQUFVLElBQUEySyxNQUdBNEYsU0FBQSxTQUFBblEsR0FDQSxPQUFBdEIsRUFBQTBSLElBQUFwUyxLQUFBcVMsT0FBQSxVQUFBclEsRUFBQTNCLE9BR0EwUixVQWZBLFNBZUEvUCxHQUNBLE9BQUFoQyxLQUFBZ1MsYUFBQXpRLFNBQUFTLEVBQUEzQixPQUdBaUMsT0FuQkEsU0FtQkFOLEdBR0EsYUFBQUEsRUFBQTNCLE9BQUFMLEtBQUEyekQsa0JBSUEsT0FBQTN4RCxFQUFBTSxTQUFBLHVCQUFBZixTQUFBUyxFQUFBM0IsT0FHQTB6RCxxQkFBQSxTQUFBMXpELEdBQ0EsT0FBQUssRUFBQTBSLElBQUFwUyxLQUFBNHpELElBQUF2ekQsS0FJQW1NLE1BNURBLDZDQ25CQSxJQUFBM04sRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxvTENvQjdDcVMsUUFBQTBpRCxFQUFBLEdBRUF0L0MsWUFDQXUvQyxVQUFBQyxFQUFBeCtDLEVBQ0F5K0MsVUFBQUMsRUFBQTErQyxFQUNBMitDLFdBQUFDLEVBQUE1K0MsRUFDQTYrQyxjQUFBQyxFQUFBOStDLEdBR0FsVyxVQUVBK1ksY0FGQSxXQUdBLElBQUFsWSxFQUFBLGFBQUFMLEtBQUFnQyxNQUFBTixLQUFBLFdBQUExQixLQUFBZ0MsTUFBQTNCLEtBQ0EsU0FBQUEsRUFBQSxHQUFBazNCLGNBQUFsM0IsRUFBQXlnQixNQUFBLFlBR0FyZSxRQVBBLFdBUUEsT0FBQXpDLEtBQUE2VyxNQUFBN1UsTUFBQVMsU0FDQXpDLEtBQUFtQixPQUFBc0IsU0FDQXpDLEtBQUE2VyxNQUFBN1UsTUFBQXl5RCxpQkFDQXowRCxLQUFBZ0MsTUFBQTNCLE1BR0FzQixhQWRBLFdBZUEsT0FBQTNCLEtBQUE2VyxNQUFBN1UsTUFBQUwsY0FBQTNCLEtBQUFtQixPQUFBUSxjQUdBNFEsZUFsQkEsV0FtQkEsT0FBQXZTLEtBQUFnQyxNQUFBM0IsS0FBQSxtQkFHQXEwRCxXQXRCQSxXQXVCQSxJQUFBQyxFQUFBMzBELEtBQUE2VyxNQUFBN1UsTUFBQTB5RCxXQUNBLFlBQUF2OEMsSUFBQXc4QyxJQUNBMzBELEtBQUFnQyxNQUFBNHlELFVBR0ExaUQsY0E1QkEsV0E2QkEsSUFBQXlpRCxFQUFBMzBELEtBQUE2VyxNQUFBN1UsTUFBQWtRLGNBQ0EsWUFBQWlHLElBQUF3OEMsSUFDQTMwRCxLQUFBbUIsT0FBQW9CLGdDQ3pFQSxJQUFBMUQsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxnR0NBN0NZLEVBQUEsU0FFQXlSLFFBQUF1akQsRUFBQSxFQUFBbFMsVUFFQW5qRCxVQUVBd2dELE1BQ0Evc0MsSUFEQSxXQUVBLE9BQUFqVCxLQUFBRCxTQUFBZ0IsT0FBQWkvQyxNQUVBbHBDLElBSkEsU0FJQWtwQyxHQUNBaGdELEtBQUFELFNBQUFnQixPQUFBaS9DLFNBSUF5VSxnQkFYQSxXQVlBLE9BQUEveEQsVUFBQSxZQUdBZ3lELFdBZkEsV0FnQkEsVUFHQXhpRCxjQW5CQSxXQW9CQSxXQUtBMUYsTUE3QkEsV0E4QkF4TSxLQUFBK2lELFNBQUEsaUNDM0NBOWpELEVBQUFDLFFBQUEsOEtDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxnR0NBN0NZLEVBQUEsU0FFQXlSLFFBQUF1akQsRUFBQSxHQUVBcjFELFVBRUFpMUQsZ0JBRkEsV0FHQSxPQUFBL3hELFVBQUEscUJBR0F3UCxjQU5BLFdBT0EsMkJDeEJBalQsRUFBQUMsUUFBQSxrSUNBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLGdHQ0g3Q1ksRUFBQSxTQUVBeVIsUUFBQXVqRCxFQUFBLEdBRUFyMUQsVUFFQWkxRCxnQkFGQSxXQUdBLE9BQUEveEQsVUFBQSxhQUdBZ3lELFdBTkEsV0FPQSxVQUdBeGlELGNBVkEsV0FXQSwyQkN6QkFqVCxFQUFBQyxRQUFBLDBIQ0FBLElBQUFMLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsZ0dDRTdDWSxFQUFBLFNBRUF5UixRQUFBdWpELEVBQUEsR0FFQXIxRCxVQUVBczFELFlBRkEsV0FHQSxPQUNBcHpELEtBQUEsV0FDQXF6RCxTQUFBLzBELEtBQUFtQixPQUFBZCxLQUNBdUIsTUFBQTVCLEtBQUFtQixPQUFBUyx5QkN6QkEzQyxFQUFBQyxRQUFBLDJKQ0FBRCxFQUFBQyxRQUFBLDBhQ0FBLElBQUFMLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsaUdDc0I3Q1ksRUFBQSxTQUVBeVIsUUFBQTBpRCxFQUFBLEdBRUF4MEQsVUFFQStZLGNBRkEsV0FHQSxPQUFBdlksS0FBQWdDLE1BQUFOLEtBQUE4VyxRQUFBLHVCQUdBdEcsY0FOQSxXQU9BLE9BQUFsUyxLQUFBbUIsT0FBQW9CLDhCQzlDQXRELEVBQUFDLFFBQUEsbXhCQ0FBRCxFQUFBQyxRQUFBLDBRQ0FBRCxFQUFBQyxRQUFBLHkySkNBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLG9GQzZCN0NZLEVBQUEsU0FFQUMsT0FDQTRPLFVBQUFvdUIsT0FDQXp1QixLQUFBeXVCLE9BQ0FrNEIsT0FBQXZKLFNBR0F0L0MsS0FBQSxXQUNBLE9BQ0F2RyxRQUNBc0ksVUFDQWcxQyxTQUFBLEVBQ0FwekMsUUFBQSxFQUNBdUMsVUFDQTRpRCxrQkFBQSxJQUlBejFELFVBRUEyeEQsVUFGQSxXQUdBLE9BQUExeEQsT0FBQUMsS0FBQU0sS0FBQXFTLFFBQUExUCxPQUFBLElBQUEzQyxLQUFBOFAsU0FLQXBELFNBRUF1N0IsTUFBQSxXQUNBam9DLEtBQUFxTyxLQUFBLEdBQ0FyTyxLQUFBa08sVUFDQWxPLEtBQUE0RixRQUNBNUYsS0FBQWtqRCxTQUFBLEdBR0FnUyxVQUFBLFdBQ0FsMUQsS0FBQWcxRCxPQUNBaDFELEtBQUFtMUQsaUJBRUFuMUQsS0FBQW8xRCxxQkFJQUQsZUFBQSxXQUNBbjFELEtBQUFrTyxVQUNBbE8sS0FBQTRGLE1BQ0E4SSxVQUFBMU8sS0FBQTBPLFVBQ0EreEIsT0FBQXpnQyxLQUFBcU8sS0FDQWUsTUFBQSxHQUNBOEYsU0FBQSxJQUVBbFYsS0FBQWtqRCxTQUFBLEdBR0FrUyxrQkFBQSxXQUNBLElBQUFubUQsRUFBQUMsT0FBQSxrQkFBQWxQLEtBQUEwTyxVQUFBLElBQUExTyxLQUFBcU8sTUFFQXJPLEtBQUF5UCxNQUFBd0QsSUFBQWhFLEdBQUFXLFFBQUEsU0FBQXpELEdBQ0FuTSxLQUFBa08sT0FBQS9CLEVBQ0FuTSxLQUFBNEYsTUFDQXdKLE1BQUFqRCxFQUFBaUQsT0FFQXBQLEtBQUFrakQsU0FBQSxLQUlBdkUsS0FBQSxXQUNBMytDLEtBQUE4UCxRQUFBLEVBRUE5UCxLQUFBZzFELE9BQ0FoMUQsS0FBQXExRCxnQkFFQXIxRCxLQUFBczFELHNCQUlBRCxjQUFBLFdBQ0EsSUFBQXBtRCxFQUFBQyxPQUFBLGtCQUVBbFAsS0FBQXlQLE1BQUE0MUMsS0FBQXAyQyxFQUFBalAsS0FBQTRGLE1BQUFnSyxRQUFBLFNBQUF6RCxHQUNBbk0sS0FBQXNPLE1BQUEsVUFBQW5DLEVBQUErQixPQUFBRyxNQUNBck8sS0FBQThQLFFBQUEsRUFDQTlQLEtBQUFxYixVQUNBckksTUFBQSxTQUFBN0csR0FDQW5NLEtBQUFxUyxPQUFBbEcsRUFDQW5NLEtBQUE4UCxRQUFBLEtBSUF3bEQsbUJBQUEsV0FDQSxJQUFBcm1ELEVBQUFDLE9BQUEsa0JBQUFsUCxLQUFBME8sVUFBQSxJQUFBMU8sS0FBQXFPLE1BRUFyTyxLQUFBeVAsTUFBQTQxQyxLQUFBcDJDLEVBQUFqUCxLQUFBNEYsTUFBQWdLLFFBQUEsU0FBQXpELEdBQ0FuTSxLQUFBc08sTUFBQSxXQUNBdE8sS0FBQThQLFFBQUEsRUFDQTlQLEtBQUFxYixXQUlBQSxNQUFBLFdBQ0FyYixLQUFBc08sTUFBQSxZQUtBOUIsTUFBQSxXQUNBeE0sS0FBQWsxRCw2QkNySkFqMkQsRUFBQUMsUUFBQSxneUNDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxvRkNFN0NZLEVBQUEsU0FFQUMsT0FBQSxRQUdBTixVQUVBKzFELFVBRkEsV0FHQSxJQUFBdFUsR0FBQSxLQUVBLFlBQUFqaEQsS0FBQXFPLEtBQ0E0eUMsRUFHQUEsRUFBQXAxQixPQUFBN3JCLEtBQUFxTyxLQUFBOEMsTUFBQSxRQU1BekUsU0FFQTBCLGFBRkEsU0FFQW9uRCxHQUNBLElBQUFubkQsRUFBQSxJQUFBbW5ELEVBQ0EsSUFDQXgxRCxLQUFBdTFELFVBQUF6MEMsTUFBQSxFQUFBMDBDLEVBQUEsR0FBQXA5QyxLQUFBLEtBRUFwWSxLQUFBc08sTUFBQSxZQUFBRCxxQkMxQ0FwUCxFQUFBQyxRQUFBLG1MQ0FBRCxFQUFBQyxRQUFBLDJ5SENBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLGdHQ2lEN0NZLEVBQUEsU0FFQTZVLFlBQ0ErZ0QsZUFBQXoyRCxFQUFBLEtBQ0EwMkQsWUFBQTEyRCxFQUFBLE1BR0FjLE9BQ0E2MUQsTUFBQWxLLFFBQ0EvOEMsVUFBQWpQLFFBR0EwTSxLQUFBLFdBQ0EsT0FDQWhMLFFBQ0FpTyxNQUFBLEtBQ0F0TyxPQUFBLEtBQ0E4MEQsT0FBQSxRQUNBejFELFNBQUEsS0FDQXViLFNBQ0FtNkMsT0FFQUMsVUFDQTUwRCxNQUFBLFFBQUFxTCxLQUFBLFVBQ0FyTCxNQUFBLEtBQUFxTCxLQUFBLGNBRUF3cEQsa0JBQUEsRUFDQTFqRCxZQUlBN1MsVUFDQW8yRCxPQUFBLFdBQ0EsT0FBQTUxRCxLQUFBbUIsT0FBQXkwRCxRQUVBekUsVUFBQSxXQUNBLFdBQUF6d0QsRUFBQTB3RCxLQUFBcHhELEtBQUFxUyxVQUlBN0YsTUFBQSxXQUNBLEdBQUF4TSxLQUFBMjFELE1BVUEzMUQsS0FBQW1CLE9BQUEwMEQsR0FBQUcsT0FBQXQxRCxFQUFBNDJCLE1BQUF0M0IsS0FBQWkyRCxXQUFBLzBELFVBVkEsQ0FDQSxJQUFBMDBELEVBQUE1MUQsS0FBQTBPLFVBQUFrbkQsUUFBQSxRQUNBNTFELEtBQUFtQixPQUFBeTBELFNBQ0E1MUQsS0FBQW1CLE9BQUFpTyxNQUFBcFAsS0FBQTBPLFVBQUFVLE1BQ0FwUCxLQUFBbUIsT0FBQUwsT0FBQWQsS0FBQTBPLFVBQUE1TixPQUNBZCxLQUFBbUIsT0FBQWhCLFNBQUFILEtBQUEwTyxVQUFBdk8sU0FDQUgsS0FBQW1CLE9BQUF5MEQsR0FBQTUxRCxLQUFBME8sVUFPQTFPLEtBQUEyMUQsT0FDQTMxRCxLQUFBazJELDRCQUlBeHBELFNBRUFpeUMsS0FBQSxXQUNBLElBQUExdkMsRUFBQWpQLEtBQUEyMUQsTUFBQXptRCxPQUFBLDRCQUFBQSxPQUFBLDRCQUFBbFAsS0FBQTBPLFVBQUFGLElBRUF4TyxLQUFBeVAsTUFBQTQxQyxLQUFBcDJDLEVBQUFqUCxLQUFBbUIsUUFBQXlPLFFBQUEsU0FBQUMsR0FDQUEsRUFBQUQsUUFDQWdELE9BQUEzQixTQUFBcEIsRUFBQTI0QyxTQUVBeG9ELEtBQUFxUyxPQUFBeEMsRUFBQXdDLFVBS0E2akQseUJBQUEsV0FDQWwyRCxLQUFBaU4sT0FBQSx3QkFBQW1DLEdBQ0FwUCxLQUFBKzFELG1CQUVBLzFELEtBQUFtQixPQUFBTCxPQUFBZCxLQUFBeWdELFNBQUFyeEMsc0hDeEZBdlAsRUFBQSxTQUVBQyxPQUNBdU8sS0FBQXl1QixPQUNBN3RCLElBQUE2dEIsT0FDQWxvQixTQUNBbFQsS0FBQStwRCxRQUNBcnNELFFBRkEsV0FHQSxZQU1BK00sS0FkQSxXQWVBLE9BQ0FncUQsYUFBQSxLQUNBQyxlQUFBLEVBQ0FDLG9CQUFBLEVBQ0FDLFlBQUEsS0FDQUMsY0FBQSxJQUtBLzJELFVBRUFnM0QsaUJBRkEsV0FHQSxPQUFBeDJELEtBQUFtMkQsY0FBQW4yRCxLQUFBbzJELGVBR0FLLGdCQU5BLFdBT0EsT0FBQXoyRCxLQUFBczJELGFBQUF0MkQsS0FBQXUyRCxjQUdBRyxTQVZBLFdBV0EsZUFBQTEyRCxLQUFBeTJELGdCQUFBRSxPQUFBLE1BR0FDLFlBZEEsV0FlQSxPQUFBNTJELEtBQUFxMkQscUJBTUE3cEQsTUE5Q0EsV0E4Q0EsSUFBQS9MLEVBQUFULEtBQ0FBLEtBQUE0VSxTQUVBaWlELFdBQUEsa0JBQUFwMkQsRUFBQXEyRCxlQUFBLElBS0Fwa0QsT0FFQTJqRCxtQkFGQSxTQUVBVSxHQUNBQSxHQUNBLzJELEtBQUFnM0QsZUFPQXRxRCxTQUVBb3FELFlBRkEsV0FHQTkyRCxLQUFBbzJELGVBQUEsRUFFQXAyRCxLQUFBeVAsTUFBQTQxQyxLQUFBbjJDLE9BQUEsbUNBQ0FiLEtBQUFyTyxLQUFBcU8sTUFDQSxTQUFBd0IsR0FDQTdQLEtBQUFvMkQsZUFBQSxFQUNBcDJELEtBQUFtMkQsYUFBQXRtRCxFQUFBeEIsS0FDQXJPLEtBQUFxMkQsbUJBQUF4bUQsRUFBQWtuRCxVQUlBQyxXQWRBLFdBZUFoM0QsS0FBQXUyRCxjQUFBLEVBRUF2MkQsS0FBQXlQLE1BQUE0MUMsS0FBQW4yQyxPQUFBLGtDQUNBRCxJQUFBalAsS0FBQWlQLEtBQ0EsU0FBQVksR0FDQTdQLEtBQUF1MkQsY0FBQSxFQUNBdjJELEtBQUFzMkQsWUFBQXptRCxFQUFBWixPQUlBZ29ELE9BekJBLFdBMEJBajNELEtBQUFzTyxNQUFBLDRCQzlJQXJQLEVBQUFDLFFBQUEseWtEQ3FFQVcsRUFBQSxTQUVBQyxPQUNBRixJQUFBazlCLE9BQ0FvNkIsT0FBQXA2QixPQUNBcTZCLE9BQUFyNkIsT0FDQWs1QixPQUFBbDVCLE9BQ0F6dUIsS0FBQXl1QixPQUNBbG9CLFNBQ0FsVCxLQUFBK3BELFFBQ0Fyc0QsUUFGQSxXQUdBLFlBTUErTSxLQWpCQSxXQWtCQSxPQUNBaXJELFlBQUEsRUFDQUMsZ0JBQUEsS0FDQUMsbUJBQUEsRUFDQUMsY0FBQSxPQUtBLzNELFVBQ0F5MkQsVUFBQSxXQUNBLFFBQ0EvMEQsTUFBQSxZQUFBcUwsS0FBQSxvREFDQXJMLE1BQUEsWUFBQXFMLEtBQUEsK0JBQ0FyTCxNQUFBLFlBQUFxTCxLQUFBLHdDQUNBckwsTUFBQSxZQUFBcUwsS0FBQSxpQ0FDQXJMLE1BQUEsZUFBQXFMLEtBQUEsb0NBQ0FyTCxNQUFBLGFBQUFxTCxLQUFBLHVDQUNBckwsTUFBQSxpQkFBQXFMLEtBQUEsMENBQ0FyTCxNQUFBLGlCQUFBcUwsS0FBQSw4Q0FDQXJMLE1BQUEsaUJBQUFxTCxLQUFBLDJDQUNBckwsTUFBQSxpQkFBQXFMLEtBQUEsMENBQ0FyTCxNQUFBLGVBQUFxTCxLQUFBLGtDQUNBckwsTUFBQSxZQUFBcUwsS0FBQSw2QkFDQXJMLE1BQUEsWUFBQXFMLEtBQUEsNEJBQ0FyTCxNQUFBLFlBQUFxTCxLQUFBLDRDQUlBaXJELGVBcEJBLFdBcUJBLE9BQUF4M0QsS0FBQUosS0FBQUksS0FBQWszRCxRQUFBbDNELEtBQUFnMkQsUUFBQWgyRCxLQUFBbTNELFNBS0EzcUQsTUFyREEsV0FzREF4TSxLQUFBeTNELGVBSUEvcUQsU0FFQStxRCxZQUZBLFdBR0F6M0QsS0FBQUosSUFBQUksS0FBQUosS0FBQSxHQUNBSSxLQUFBazNELE9BQUFsM0QsS0FBQWszRCxRQUFBLEdBQ0FsM0QsS0FBQW0zRCxPQUFBbjNELEtBQUFtM0QsUUFBQSxHQUNBbjNELEtBQUFxTyxLQUFBck8sS0FBQXFPLE1BQUEsR0FDQXJPLEtBQUFnMkQsT0FBQWgyRCxLQUFBZzJELFFBQUEsYUFHQTBCLG9CQVZBLFdBV0ExM0QsS0FBQXEzRCxnQkFBQSxLQUNBcjNELEtBQUFvM0QsWUFBQSxFQUVBcDNELEtBQUF5UCxNQUFBNDFDLEtBQUFuMkMsT0FBQSxrQ0FDQXRQLElBQUFJLEtBQUFKLElBQ0FzM0QsT0FBQWwzRCxLQUFBazNELE9BQ0FDLE9BQUFuM0QsS0FBQW0zRCxPQUNBbkIsT0FBQWgyRCxLQUFBZzJELE9BQ0EzbkQsS0FBQXJPLEtBQUFxTyxPQUNBdUIsUUFBQSxTQUFBQyxHQUNBN1AsS0FBQXMzRCxtQkFBQSxFQUNBdDNELEtBQUF1M0QsY0FBQTFuRCxFQUFBOG5ELE1BQ0EzM0QsS0FBQXEzRCxnQkFBQSxLQUNBcjNELEtBQUFvM0QsWUFBQSxJQUNBcGtELE1BQUEsU0FBQW5ELEdBQ0E3UCxLQUFBczNELG1CQUFBLEVBQ0F0M0QsS0FBQXEzRCxnQkFBQXhuRCxFQUFBbUQsTUFDQWhULEtBQUFvM0QsWUFBQSxLQUlBSCxPQWhDQSxXQWlDQWozRCxLQUFBc08sTUFBQSw0QkNoS0FyUCxFQUFBQyxRQUFBLDBqRENBQUQsRUFBQUMsUUFBQSwydkRDQUFELEVBQU9DLFNBRUhvUyxRQUFTNndDLFNBRVRoMkMsS0FBTSxXQUNGLE9BQ0ltNEMsTUFDSXJ4QyxJQUFLL0QsT0FBTywwQkFFaEIrNEMsY0FDSTdMLFNBQVMsRUFDVDlnQyxRQUFRLEVBQ1J1cUMsWUFBWSxFQUNaaEUsS0FBTSxRQUNOd0IsVUFBVyxNQUNYcUMsVUFDSUMsNlNDaEJwQixJQUFBOW1ELEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsb0ZDcUM3Q1ksRUFBQSxTQUVBNlUsWUFDQWtqRCxjQUFBNTRELEVBQUEsS0FDQTY0RCxnQkFBQTc0RCxFQUFBLEtBQ0E4NEQsa0JBQUE5NEQsRUFBQSxNQUlBbU4sS0FUQSxXQVVBLE9BQ0E0ckQsS0FBQSxPQUNBM29ELE1BQUEsS0FDQXRPLE9BQUEsS0FDQVgsU0FBQSxLQUNBeTFELE9BQUEsS0FDQW9DLGtCQUtBdHJELFNBRUF1ckQsV0FGQSxXQUdBajRELEtBQUErM0QsS0FBQSxVQUdBRyxhQU5BLFdBT0FsNEQsS0FBQSszRCxLQUFBLFlBR0FJLGVBVkEsV0FXQW40RCxLQUFBbzRELFlBR0FBLFNBZEEsV0FlQSxJQUFBbnBELEVBQUFDLE9BQUEsNEJBRUEyNkMsR0FDQXo2QyxNQUFBcFAsS0FBQW9QLE1BQ0F0TyxPQUFBZCxLQUFBYyxPQUNBWCxTQUFBSCxLQUFBRyxTQUNBeTFELE9BQUE1MUQsS0FBQTQxRCxPQUNBbDZDLE1BQUExYixLQUFBZzRELGFBQUF0OEMsTUFDQW02QyxHQUFBNzFELEtBQUFnNEQsYUFBQW5DLElBR0E3MUQsS0FBQXlQLE1BQUE0MUMsS0FBQXAyQyxFQUFBNDZDLEdBQUFqNkMsUUFBQSxTQUFBQyxHQUNBQSxFQUFBRCxRQUNBZ0QsT0FBQTNCLFNBQUFwQixFQUFBMjRDLFNBRUF4b0QsS0FBQXFTLE9BQUF4QyxFQUFBd0MsNkJDckdBLElBQUF4VCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLG9GQ1k3Q1ksRUFBQSxTQUVBQyxPQUFBLGtCQUdBcU0sS0FMQSxXQU1BLE9BQ0E0cEQsa0JBQUEsSUFLQXYyRCxVQUVBbzNELFlBRkEsV0FHQSxPQUFBNTJELEtBQUFvUCxPQUFBcFAsS0FBQWMsU0FNQTRSLE9BRUF0RCxNQUZBLFNBRUFpcEQsR0FDQXI0RCxLQUFBKzFELG1CQUlBLzFELEtBQUFjLE9BQUFkLEtBQUF5Z0QsU0FBQTRYLEVBQUEsUUFNQTNyRCxTQUVBdXFELE9BRkEsV0FHQWozRCxLQUFBc08sTUFBQSw0QkM5REFyUCxFQUFBQyxRQUFBLHlwQkNBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLG9GQzZCN0NZLEVBQUEsU0FFQTZVLFlBQ0ErZ0QsZUFBQXoyRCxFQUFBLEtBQ0EwMkQsWUFBQTEyRCxFQUFBLE1BSUFjLE9BQ0E4MUQsT0FBQTk0QixPQUNBMzdCLE9BQUExQixRQUlBME0sS0FkQSxXQWVBLFVBTUFPLFNBRUF1cUQsT0FGQSxXQUdBajNELEtBQUFzTyxNQUFBLDRCQ2xFQXJQLEVBQUFDLFFBQUEsbXpCQ0FBLElBQUFMLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsb0ZDTTdDWSxFQUFBLFNBRUFDLE9BQUEsWUFHQTRNLFNBRUF1cUQsT0FGQSxXQUdBajNELEtBQUFzTyxNQUFBLDRCQzNCQXJQLEVBQUFDLFFBQUEsOFhDQUFELEVBQUFDLFFBQUEsZ3hCQ0FBRCxFQUFPQyxTQUVIb1MsUUFBUzZ3QyxTQUVUaDJDLEtBQU0sV0FDRixPQUNJbTRDLE1BQ0lyeEMsSUFBSy9ELE9BQU8sb0JBRWhCKzRDLGNBQ0k3TCxTQUFTLEVBQ1Q5Z0MsUUFBUSxFQUNSdXFDLFlBQVksRUFDWmhFLEtBQU0sUUFDTndCLFVBQVcsTUFDWHFDLFVBQ0lDLCtnQkFlaEJuNUMsTUFBTyxXQUNDeE0sS0FBS3lPLElBQUksVUFDVHpPLEtBQUtxb0Qsb0JBSWIzN0MsU0FDSTI3QyxpQkFBa0IsV0FLZHJvRCxLQUFLaW9ELGFBQWF2QyxTQUFTTyxRQUp2Qjd5Qix1SEN2Q2hCbjBCLEVBQU9DLFNBRUhvUyxRQUFTNndDLFNBRVRoMkMsS0FBTSxXQUNGLE9BQ0ltNEMsTUFDSXJ4QyxJQUFLL0QsT0FBTyx5QkFDWlEsT0FBUVIsT0FBTyw2QkFFbkIrNEMsY0FDSTdMLFNBQVMsRUFDVDlnQyxRQUFRLEVBQ1J1cUMsWUFBWSxFQUNaaEUsS0FBTSxRQUNOd0IsVUFBVyxNQUNYcUMsVUFDSUMseVJBV2hCbjVDLE1BQU8sV0FDSHhNLEtBQUtxb0Qsb0JBR1QzN0MsU0FDSTI3QyxpQkFBa0IsV0FDZCxJQUFJajFCLEVBQU0sR0FFTnB6QixLQUFLeU8sSUFBSSxtQkFDVDJrQix5RUFHQXB6QixLQUFLeU8sSUFBSSxtQkFDVDJrQixtTUFNSnB6QixLQUFLaW9ELGFBQWF2QyxTQUFTTyxRQUFVN3lCLG9CQy9DakRuMEIsRUFBT0MsU0FFSG9TLFFBQVM2d0MsU0FFVGgyQyxLQUFNLFdBQ0YsT0FDSW00QyxNQUNJcnhDLElBQUsvRCxPQUFPLG1CQUNaUSxPQUFRUixPQUFPLHlDQUVuQis0QyxjQUNJN0wsU0FBUyxFQUNUOWdDLFFBQVEsRUFDUnVxQyxZQUFZLEVBQ1poRSxLQUFNLFFBQ053QixVQUFXLE1BQ1hxQyxVQUNJQyxzUkFXaEJuNUMsTUFBTyxXQUNIeE0sS0FBS3FvRCxvQkFHVDM3QyxTQUNJMjdDLGlCQUFrQixXQUNkLElBQUlqMUIsRUFBTSxHQUVOcHpCLEtBQUt5TyxJQUFJLHdCQUNUMmtCLHlFQUdBcHpCLEtBQUt5TyxJQUFJLHdCQUNUMmtCLG1NQU1KcHpCLEtBQUtpb0QsYUFBYXZDLFNBQVNPLFFBQVU3eUIsb0JDL0NqRG4wQixFQUFPQyxTQUVIb1MsUUFBUzZ3QyxTQUVUaDJDLEtBQU0sV0FDRixPQUNJbTRDLE1BQ0lyeEMsSUFBSy9ELE9BQU8sZUFDWlEsT0FBUVIsT0FBTyxxQ0FFbkIrNEMsY0FDSTdMLFNBQVMsRUFDVDlnQyxRQUFRLEVBQ1J1cUMsWUFBWSxFQUNaaEUsS0FBTSxRQUNOd0IsVUFBVyxNQUNYcUMsVUFDSUMsNEZBTWhCbjVDLE1BQU8sV0FDSHhNLEtBQUtxb0Qsb0JBR1QzN0MsU0FDSTI3QyxpQkFBa0IsV0FDZCxJQUFJajFCLEVBQU0sR0FFTnB6QixLQUFLeU8sSUFBSSxvQkFDVDJrQiwwR0FHQXB6QixLQUFLeU8sSUFBSSxvQkFDVDJrQixtTUFNSnB6QixLQUFLaW9ELGFBQWF2QyxTQUFTTyxRQUFVN3lCLG9CQzFDakRuMEIsRUFBT0MsU0FFSG9TLFFBQVM2d0MsU0FFVGgyQyxLQUFNLFdBQ0YsT0FDSW00QyxNQUNJcnhDLElBQUsvRCxPQUFPLGtCQUNaUSxPQUFRUixPQUFPLHdDQUVuQis0QyxjQUNJN0wsU0FBUyxFQUNUOWdDLFFBQVEsRUFDUnVxQyxZQUFZLEVBQ1poRSxLQUFNLFFBQ053QixVQUFXLE1BQ1hxQyxVQUNJQyx5UkFXaEJuNUMsTUFBTyxXQUNIeE0sS0FBS3FvRCxvQkFHVDM3QyxTQUNJMjdDLGlCQUFrQixXQUNkLElBQUlqMUIsRUFBTSxHQUVOcHpCLEtBQUt5TyxJQUFJLHVCQUNUMmtCLHlFQUdBcHpCLEtBQUt5TyxJQUFJLHVCQUNUMmtCLG1NQU1KcHpCLEtBQUtpb0QsYUFBYXZDLFNBQVNPLFFBQVU3eUIsc0JDL0NqRG4wQixFQUFPQyxTQUVISyxTQUFVUCxFQUFRLEtBRWxCMFYsWUFDSTRqRCx5QkFBMEJ0NUQsRUFBUSxLQUNsQ3U1RCxrQkFBbUJ2NUQsRUFBUSxNQUcvQmMsT0FDSTA0RCxhQUFnQjE3QixPQUNoQjI3QixZQUFlMzdCLE9BQ2ZrNEIsUUFDSXR6RCxLQUFNK3BELFFBQ05yc0QsU0FBUyxHQUViczVELFFBQVc1N0IsUUFHZjN3QixLQUFNLFdBQ0YsT0FDSSsyQyxTQUFTLEVBQ1QyTSxhQUFjLEtBQ2Q3UCxLQUFNLEtBQ04yWSxTQUFXNTNELFVBQVlxaUQsY0FJL0I1akQsVUFDSTRqRCxTQUNJbndDLElBQUssV0FDRCxPQUFPalQsS0FBSzI0RCxRQUFRdlYsYUFFeEJ0c0MsSUFBSyxTQUFTc3NDLEdBQ1ZwakQsS0FBSzI0RCxRQUFRdlYsUUFBVUEsSUFJL0J3VixrQkFBbUIsV0FDZixPQUNJQyxRQUFTbjJELFVBQVUsbUNBQ25Cd1UsS0FBTSxVQUNOblcsU0FFUVYsS0FBTSxPQUNOb0MsUUFBU0MsVUFBVSxzQ0FDbkJkLE1BQU8sR0FDUEYsS0FBTSxTQUNOcEMsVUFDTTRCLE1BQU8sTUFBT3FMLEtBQU03SixVQUFVLDZDQUM5QnhCLE1BQU8sUUFBU3FMLEtBQU03SixVQUFVLCtDQUNoQ3hCLE1BQU8sVUFBV3FMLEtBQU03SixVQUFVLG1EQUl4Q3JDLEtBQU0sUUFDTm9DLFFBQVNDLFVBQVUsdUNBQ25CaEIsS0FBTSxPQUNORSxNQUFPLEtBR1B2QixLQUFNLFNBQ05vQyxRQUFTQyxVQUFVLHdDQUNuQmhCLEtBQU0sWUFNdEJvM0QsZ0JBQWlCLFdBQ2IsT0FDSUQsUUFBU24yRCxVQUFVLGtDQUNuQndVLEtBQU0sVUFDTm5XLFNBRVFWLEtBQU0sS0FDTm9DLFFBQVNDLFVBQVUsbUNBQ25CaEIsS0FBTSxPQUNORSxNQUFPLEdBQ1BELGFBQWNlLFVBQVUsNENBR3hCckMsS0FBTSxPQUNOb0MsUUFBU0MsVUFBVSxxQ0FDbkJoQixLQUFNLE9BQ05FLE1BQU8sR0FDUEQsYUFBY2UsVUFBVSw4Q0FHeEJyQyxLQUFNLFdBQ05vQyxRQUFTQyxVQUFVLHlDQUNuQmhCLEtBQU0sU0FHTnJCLEtBQU0sVUFDTm9DLFFBQVNDLFVBQVUsd0NBQ25CaEIsS0FBTSxPQUNOQyxhQUFjZSxVQUFVLGlEQUd4QnJDLEtBQU0sV0FDTm9DLFFBQVNDLFVBQVUseUNBQ25CaEIsS0FBTSxPQUNOQyxhQUFjZSxVQUFVLHFEQU81Q2dLLFNBQ0lxc0QsZ0JBQWlCLFdBQ2IvNEQsS0FBSzI0RCxTQUNEdnBELE1BQU8sR0FDUHJPLFdBR0pmLEtBQUtrakQsU0FBVSxHQUduQjhWLFdBQVksV0FDUixJQUFJbFUsRUFBTzlrRCxLQUNQaVAsRUFBTUMsT0FBTyxVQUFZbFAsS0FBS3k0RCxZQUFjLFFBQ2hEM1QsRUFBS3IxQyxNQUFNd0QsSUFBSWhFLEdBQUtXLFFBQVEsU0FBVXpELEdBQ2xDMjRDLEVBQUs2VCxRQUFVeHNELEVBQ2YyNEMsRUFBSzVCLFNBQVUsSUFDaEJsd0MsTUFBTSxTQUFVN0csR0FDZjI0QyxFQUFLK0ssYUFBZTFqRCxFQUFLeXdCLFdBSWpDK2hCLEtBQU0sV0FDSTMrQyxLQUFLMjRELFFBQVF2cEQsTUFTbkJwUCxLQUFLeVAsTUFBTTQxQyxLQUFLcmxELEtBQUswNEQsU0FDakIxWSxLQUFNaGdELEtBQUtnZ0QsS0FDWDJZLFFBQVMzNEQsS0FBSzI0RCxVQUNmL29ELFFBQVEsU0FBU3pELEdBQ2hCeUcsT0FBTzNCLFNBQVc5RSxFQUFLcThDLFdBWnZCeG9ELEtBQUttVCxVQUNELGdCQUNBelEsVUFBVSx1QkFBeUJ1MkQsVUFBVyxhQWU5RHpzRCxNQUFPLFdBQ0N4TSxLQUFLZzFELE9BQ0xoMUQsS0FBSys0RCxrQkFFTC80RCxLQUFLZzVELDhCQzFKakIvNUQsRUFBQUMsUUFBQSxnakZDQUEsU0FBQXFXLEdBQUF0VyxFQUFPQyxTQUVISyxTQUFVUCxFQUFRLEtBRWxCMFYsWUFDSXdrRCxpQkFBa0JsNkQsRUFBUSxNQUc5QmMsT0FDSWlCLFFBQ0lXLEtBQU0wbEQsTUFDTmhvRCxhQUlSK00sS0FBTSxXQUNGLE9BQ0lndEQsZUFBZSxFQUNmQyxjQUFlLE9BSXZCMXNELFNBRUkyc0QsWUFBYSxTQUFTM2lELEdBQ2xCMVcsS0FBS281RCxjQUFnQjFpRCxHQUd6QjRpRCxjQUFlLFdBQ1h0NUQsS0FBS281RCxjQUFnQixNQUd6QkcsWUFBYSxTQUFTN2lELEdBQ2xCMVcsS0FBS281RCxjQUFnQixLQUNyQnA1RCxLQUFLZSxPQUFPNFYsT0FBT0QsRUFBTyxJQUc5QjhpRCxTQUFVLFdBQ04sSUFDSTduQyxHQURlM3hCLEtBQUtlLE9BQU80QixRQUFVLEdBQ2QsRUFFM0IzQyxLQUFLZSxPQUFPTSxNQUNSaEIsS0FBTSxTQUFXc3hCLEVBQ2pCbHZCLFFBQVMsU0FBV2t2QixFQUNwQmdrQyxPQUFPLElBR1gzMUQsS0FBS281RCxjQUFnQnpuQyxFQUFRLEVBRTdCM3hCLEtBQUt5NUQsVUFBVSxXQUNYbGtELEVBQUV2VixLQUFLd1YsS0FBS2hULEtBQUssU0FBUzgwQixRQUFRamYsUUFBUTNILFlBSWxEZ3BELGNBQWUsV0FDWCxJQUFJNVUsRUFBTzlrRCxLQUVYdVYsRUFBRSxhQUFhb3hDLFVBQ1hDLEtBQU0sSUFDTkMsT0FBUSxJQUNSQyxZQUFhLGNBQ2JobUQsT0FBUSxlQUNSaW1ELHNCQUFzQixFQUV0Qm5tQyxNQUFPLFNBQVNqUSxFQUFHcTJDLEdBQ2ZBLEVBQUc1TyxLQUFLanNDLEtBQUssUUFBUzY2QyxFQUFHNU8sS0FBSzFoQyxVQUdsQ3V3QyxPQUFRLFNBQVN0MkMsRUFBR3EyQyxHQUNoQixJQUFJcG1DLEVBQVFvbUMsRUFBRzVPLEtBQUtqc0MsS0FBSyxTQUNyQjZaLEVBQVFnaEMsRUFBRzVPLEtBQUsxaEMsUUFFcEJvdUMsRUFBSy9qRCxPQUFPNFYsT0FBT3FQLEVBQUssRUFBRzgrQixFQUFLL2pELE9BQU80VixPQUFPaUssRUFBTyxHQUFHLFNBT3hFbE8sT0FDSTBtRCxjQUFlLFNBQVU5NUIsR0FDckJ0L0IsS0FBS201RCxjQUF5QixPQUFSNzVCLEdBRTFCNjVCLGNBQWUsU0FBVTc1QixHQUNmQSxFQUdGL3BCLEVBQUV2VixLQUFLd1YsS0FBS2hULEtBQUssZUFBZUEsS0FBSyxTQUFTODBCLFFBQVFqZixRQUFRM0gsU0FGOUQxUSxLQUFLczVELGtCQU9qQjlzRCxNQUFPLFdBQ0h4TSxLQUFLMDVELGdEQzdGYno2RCxFQUFBQyxRQUFBLDZyQ0NBQUQsRUFBT0MsU0FFSEssU0FBVVAsRUFBUSxLQUVsQmMsT0FBUSxTQUVScU0sS0FBTSxXQUNGLE9BQ0l3dEQsZ0JBQWdCLElBSXhCbnRELE1BQU8sV0FLQ3hNLEtBQUtnQyxNQUFNMnpELFFBQ1gzMUQsS0FBSzI1RCxnQkFBaUIsU0FDZjM1RCxLQUFLZ0MsTUFBTTJ6RCxNQUVsQjMxRCxLQUFLaU4sT0FBTyxnQkFBaUIsU0FBU3hLLEdBQzVCekMsS0FBSzI1RCxpQkFDUDM1RCxLQUFLZ0MsTUFBTTNCLEtBQU9MLEtBQUt5Z0QsU0FBU2grQyxFQUFTLDBCQ3ZCN0R4RCxFQUFBQyxRQUFBLDZ6QkNBQSxTQUFBd0IsR0FBQXpCLEVBQU9DLFNBRUhLLFNBQVVQLEVBQVEsS0FFbEJjLE9BQ0lzakQsU0FBVzFoRCxLQUFNMGxELE9BQ2pCcm1ELFFBQVVXLEtBQU0wbEQsUUFHcEI1bkQsVUFDSW82RCxZQUFhLFdBQ1QsSUFBSUEsS0FTSixPQVBBbDVELEVBQUVxQixLQUFLL0IsS0FBS2UsT0FBUSxTQUFTaUIsR0FDekI0M0QsRUFBWXY0RCxNQUNSa0wsS0FBTXZLLEVBQU1TLFFBQ1p2QixNQUFPYyxFQUFNM0IsU0FJZHU1RCxtQ0NwQm5CMzZELEVBQUFDLFFBQUEsbUlDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxrR0N5RjdDNDZELFVBQUE3NkQsRUFBQSxJQUVBYSxFQUFBLFNBRUE2VSxZQUNBb2xELGVBQUE5NkQsRUFBQSxNQUdBYyxPQUNBaTZELGNBQUFqOUIsT0FDQWs0QixRQUNBdHpELEtBQUErcEQsUUFDQXJzRCxTQUFBLEdBRUFzNUQsUUFBQTU3QixRQUdBM3dCLEtBQUEsV0FDQSxPQUNBKzJDLFNBQUEsRUFDQXB6QyxRQUFBLEVBQ0F1QyxVQUNBdzlDLGFBQUEsS0FDQTdQLEtBQUEsS0FDQTcvQyxVQUFBaVAsTUFBQSxHQUFBOU8sU0FBQSxNQUNBMDVELGdCQUlBeDZELFVBQ0F5NkQsUUFEQSxXQUVBLFdBQUFqNkQsS0FBQUcsU0FBQWlQLE9BR0EraEQsVUFBQSxXQUNBLFdBQUF6d0QsRUFBQTB3RCxLQUFBcHhELEtBQUFxUyxVQUlBM0YsU0FDQXd0RCxjQUFBLFdBQ0EsSUFBQXBWLEVBQUE5a0QsS0FDQUEsS0FBQXlQLE1BQUF3RCxJQUFBL0QsT0FBQSxnQkFBQVUsUUFBQSxTQUFBekQsR0FDQXpMLEVBQUFxQixLQUFBb0ssRUFBQSxTQUFBeUwsR0FDQWt0QyxFQUFBa1YsV0FBQTM0RCxLQUFBdVcsS0FHQWt0QyxFQUFBNE0saUJBSUFBLFlBQUEsV0FDQSxJQUFBNU0sRUFBQTlrRCxLQUVBaVAsRUFBQUMsT0FBQSxtQkFBQTZ0QyxpQkFBQSxZQUVBK0gsRUFBQXIxQyxNQUFBd0QsSUFBQWhFLEdBQUFXLFFBQUEsU0FBQXpELEdBQUEsSUFBQTFMLEVBQUFULEtBQ0FBLEtBQUFHLFNBQUFnTSxFQUNBMjRDLEVBQUE1QixTQUFBLEVBSUFsakQsS0FBQXk1RCxVQUFBLFdBQ0FoNUQsRUFBQXdNLE9BQUEsc0JBQ0F4TSxFQUFBMFMsVUFBQSxvQkFDQXFFLE1BQUEsUUFFQXhFLE1BQUEsU0FBQTdHLEdBQ0EyNEMsRUFBQStLLGFBQUExakQsRUFBQXl3QixXQUlBK2hCLEtBakNBLFdBaUNBLElBQUE5OEMsRUFBQTdCLEtBQ0FBLEtBQUE4UCxRQUFBLEVBQ0E5UCxLQUFBcVMsVUFFQXJTLEtBQUF5UCxNQUFBNDFDLEtBQUFybEQsS0FBQTA0RCxTQUNBMVksS0FBQWhnRCxLQUFBZ2dELEtBQ0E3L0MsU0FBQUgsS0FBQUcsV0FDQXlQLFFBQUEsU0FBQXpELEdBQ0EsR0FBQUEsRUFBQXlELFFBQUEsQ0FFQSxHQURBL04sRUFBQXNSLFVBQUEsa0JBQ0F0UixFQUFBbXpELE9BRUEsWUFEQXBpRCxPQUFBM0IsU0FBQTlFLEVBQUFxOEMsVUFHQTNtRCxFQUFBaU8sUUFBQSxFQUNBak8sRUFBQXNSLFVBQUEsa0JBQUFoSCxFQUFBeXdCLFNBQUFtMUIsUUFBQSxZQUVBbHdELEVBQUFzUixVQUFBLGdCQUFBelEsVUFBQSxhQUNBYixFQUFBaU8sUUFBQSxFQUNBak8sRUFBQXdRLE9BQUFsRyxFQUFBa0csT0FDQWtELEVBQUEsY0FBQTRrRCxTQUFBQyxVQUFBLE1BRUFwbkQsTUFBQSxTQUFBN0csR0FDQXF2QixNQUFBLHVFQUlBNitCLGFBNURBLFNBNERBcjRELEdBQ0FoQyxLQUFBNlcsTUFBQXlqRCxlQUFBZixZQUFBdjNELEtBSUF3SyxNQUFBLGVBQUErL0MsRUFBQXZzRCxLQUNBQSxLQUFBazZELGdCQUVBTCxVQUFBVSxXQUFBLGlCQUFBNXBELEdBQ0FBLEVBQUE2cEQsaUJBRUFqTyxFQUFBNU4sK0NDcE5BLElBQUE5L0MsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCw4SUN5QzdDLElBQUF3N0QsRUFBQSxLQUNBQyxFQUFBLEtBRUE3NkQsRUFBQSxTQUVBNlUsWUFDQWltRCxnQkFBQUMsRUFBQWxsRCxHQUdBNVYsT0FBQSx5QkFFQXFNLEtBUkEsV0FTQSxPQUNBMHVELGNBQUEsS0FDQUMsaUJBQUEsSUFJQXQ3RCxVQUVBdTdELFdBRkEsV0FHQSxhQUFBLzZELEtBQUFnN0QsZ0JBR0FBLGVBTkEsV0FPQSxPQUFBdDZELEVBQUE4QixLQUFBeEMsS0FBQU0sVUFBQVEsT0FBQSxhQUdBbTZELG9CQVZBLFdBV0EsT0FBQWo3RCxLQUFBZzdELGVBQUF2NEQsU0FBQXpDLEtBQUFnN0QsZUFBQWw2RCxRQUdBc0IscUJBZEEsV0FjQSxJQUFBM0IsRUFBQVQsS0FDQXdULEVBQUE5UyxFQUFBdXZELFVBQUFqd0QsS0FBQU0sVUFBQVEsT0FBQSxZQUVBLFVBQUEwUyxLQUlBOVMsRUFBQW1DLElBQUE3QyxLQUFBTSxTQUFBa1QsR0FBQXpTLE9BQUEsU0FBQWlCLEdBQUEsT0FBQXZCLEVBQUF5NkQsYUFBQWw1RCxNQUdBbTVELGVBeEJBLFdBeUJBLFFBQUFuN0QsS0FBQSs2RCxZQUVBLzZELEtBQUE2NkQsZ0JBQUFuNkQsRUFBQThCLEtBQUF4QyxLQUFBTSxVQUFBUSxPQUFBLFlBQUEwTixLQUtBaEMsTUEvQ0EsV0ErQ0EsSUFBQTNLLEVBQUE3QixLQUNBQSxLQUFBNjZELGNBQUE3NkQsS0FBQU0sU0FBQSxHQUFBa08sR0FDQXhPLEtBQUF5NUQsVUFBQSxXQUNBNTNELEVBQUF1NUQsdUJBQ0F2NUQsRUFBQXc1RCx3QkFJQTNvRCxPQUVBbW9ELGNBRkEsV0FFQSxJQUFBdE8sRUFBQXZzRCxLQUNBQSxLQUFBeTVELFVBQUEsa0JBQUFsTixFQUFBK08sd0JBS0E1dUQsU0FFQTZ1RCxlQUZBLFNBRUFsN0QsR0FDQSxPQUFBSyxFQUFBOEIsS0FBQXhDLEtBQUFHLFNBQUFZLFFBQUFWLFVBR0E2NkQsYUFOQSxTQU1BMXNELEdBQ0EsT0FBQTlOLEVBQUE4QixLQUFBeEMsS0FBQUcsU0FBQVksUUFBQXlOLFFBR0FndEQsaUJBVkEsU0FVQWhvRCxHQUFBLElBQUFxNUMsRUFBQTdzRCxLQUNBLE9BQUFVLEVBQUFtQyxJQUFBN0MsS0FBQU0sU0FBQWtULEdBQUF6UyxPQUFBLFNBQUFpQixHQUFBLE9BQUE2cUQsRUFBQXFPLGFBQUFsNUQsTUFHQW81RCxxQkFkQSxXQWNBLElBQUF0TixFQUFBOXRELE1BQ0F5NkQsRUFBQSxJQUFBZ0IsRUFBQSxTQUFBejdELEtBQUEwbUQsS0FBQWdWLE1BQ0FDLFVBQUEsT0FDQUMsTUFBQSxJQUNBQyxRQUNBQyxxQkFBQSxFQUNBQyxjQUFBLEVBQ0FDLE9BQUEsTUFJQUMsR0FBQSwwQkFBQXRyRCxHQUNBbTlDLEVBQUErTSxjQUFBL00sRUFBQXh0RCxTQUFBcVEsRUFBQXVyRCxZQUFBMXRELEtBR0Fpc0QsRUFBQXdCLEdBQUEseUJBQUF0ckQsR0FDQW05QyxFQUFBeHRELFNBQUFxVyxPQUFBaEcsRUFBQXdyRCxTQUFBLEVBQUFyTyxFQUFBeHRELFNBQUFxVyxPQUFBaEcsRUFBQXlyRCxTQUFBLFVBSUFmLG1CQWxDQSxXQWtDQSxJQUFBZ0IsRUFBQXI4RCxNQUNBMDZELEVBQUEsSUFBQWUsRUFBQSxTQUFBejdELEtBQUF3VixJQUFBOG1ELGlCQUFBLCtCQUNBWCxVQUFBLDRCQUNBNzZELE9BQUEsMEJBQ0F5N0QsU0FBQXY4RCxLQUFBd1YsSUFDQXFtRCxRQUNBQyxxQkFBQSxNQUlBRyxHQUFBLHNCQUFBdHJELEdBQ0EwckQsRUFBQXZCLGlCQUFBLElBR0FKLEVBQUF1QixHQUFBLHlCQUFBdHJELEdBQ0EwckQsRUFBQXZCLGlCQUFBLEVBRUEsSUFBQTBCLEVBQUE3ckQsRUFBQXlyRCxTQUNBSyxFQUFBOXJELEVBQUF3ckQsU0FDQU8sRUFBQWg4RCxFQUFBdXZELFVBQUFvTSxFQUFBLzdELFVBQUFrTyxHQUFBbUMsRUFBQWdzRCxhQUFBbjVCLGNBQUFxYixRQUFBaCtDLFFBQUEyTixLQUNBb3VELEVBQUFsOEQsRUFBQXV2RCxVQUFBb00sRUFBQS83RCxVQUFBa08sR0FBQW1DLEVBQUFrc0QsYUFBQXI1QixjQUFBcWIsUUFBQWgrQyxRQUFBMk4sS0FDQXhNLEVBQUFxNkQsRUFBQS83RCxTQUFBbzhELEdBQUEzN0QsT0FBQXk3RCxHQUVBLEdBQUFFLElBQUFFLEVBQUEsQ0FDQSxJQUFBNzdELEVBQUFzN0QsRUFBQS83RCxTQUFBczhELEdBQUE3N0QsT0FDQUEsRUFBQTRWLE9BQUE4bEQsRUFBQSxFQUFBMTdELEVBQUE0VixPQUFBNmxELEVBQUEsV0FDQSxDQUNBSCxFQUFBLzdELFNBQUFzOEQsR0FBQTc3RCxPQUFBNFYsT0FBQThsRCxFQUFBLEVBQUF6NkQsR0FDQXE2RCxFQUFBLzdELFNBQUFvOEQsR0FBQTM3RCxPQUFBNFYsT0FBQTZsRCxFQUFBLEdBRUEsSUFBQU0sRUFBQWxxRCxPQUFBbXFELFFBQ0FWLEVBQUEvN0QsU0FBQXlYLEtBQUErb0MsTUFBQS9vQyxLQUFBQyxVQUFBcWtELEVBQUEvN0QsV0FDQW82RCxFQUFBc0MsVUFDQVgsRUFBQTVDLFVBQUEsV0FDQTRDLEVBQUFoQixxQkFDQXpvRCxPQUFBcXFELE9BQUEsRUFBQUgsUUFLQTk4RCxLQUFBeTVELFVBQUEsa0JBQUE0QyxFQUFBZix1QkFHQTRCLFdBN0VBLFdBNkVBLElBQUFDLEVBQUFuOUQsS0FDQTJ4QixFQUFBM3hCLEtBQUFNLFNBQUFxQyxPQUFBLEVBQ0E5QixHQUNBNEIsUUFBQSxXQUFBa3ZCLEVBQ0E3d0IsT0FBQSxXQUFBNndCLEVBQ0FuakIsR0FBQSxXQUFBbWpCLEVBQ0E1d0IsV0FHQWYsS0FBQU0sU0FBQWUsS0FBQVIsR0FDQWIsS0FBQTY2RCxjQUFBaDZELEVBQUEyTixHQUVBeE8sS0FBQXk1RCxVQUFBLFdBQ0EsSUFBQWptRCxFQUFBMnBELEVBQUE3OEQsU0FBQXFDLE9BQUEsRUFDQTgzRCxFQUFBdUMsVUFDQUcsRUFBQS9CLHVCQUNBVixFQUFBc0MsVUFDQUcsRUFBQTlCLHFCQUVBOEIsRUFBQXRtRCxNQUFBdlcsU0FBQWtULEdBQUE2RSxXQUlBK2tELGNBcEdBLFNBb0dBNXBELEdBQUEsSUFBQTZwRCxFQUVBLE9BQUE3cEQsR0FBQSxJQUFBeFQsS0FBQU0sU0FBQXFDLE9BQUEsQ0FHQSxJQUFBdzVELEVBQUEsSUFBQTNvRCxFQUFBLEtBQ0E2cEQsRUFBQXI5RCxLQUFBTSxTQUFBNjdELEdBQUFwN0QsUUFBQTRWLE9BQUF3TCxNQUFBazdDLEdBQUFyOUQsS0FBQU0sU0FBQTY3RCxHQUFBcDdELE9BQUE0QixPQUFBLEdBQUFrcEIsNkhBQUF5eEMsQ0FBQXQ5RCxLQUFBTSxTQUFBa1QsR0FBQXpTLFVBR0FmLEtBQUFNLFNBQUFxVyxPQUFBbkQsRUFBQSxHQUVBeFQsS0FBQTY2RCxjQUFBNzZELEtBQUFNLFNBQUE2N0QsR0FBQTN0RCxLQUdBK3VELDRCQWxIQSxTQWtIQXo4RCxHQUNBLGVBQUFBLEVBQ0EsT0FBQWQsS0FBQTZXLE1BQUFta0QsZUFHQSxJQUFBdGtELEVBQUFoVyxFQUFBdXZELFVBQUFqd0QsS0FBQU0sVUFBQVEsV0FDQSxPQUFBZCxLQUFBNlcsTUFBQXZXLFNBQUFvVyxJQUdBOG1ELGVBM0hBLFNBMkhBNWxELEdBQ0EsSUFDQStaLEdBREEzeEIsS0FBQUcsU0FBQVksT0FBQTRCLFFBQUEsR0FDQSxFQUVBODZELEVBQUEvOEQsRUFBQTZWLFVBQUF2VyxLQUFBZzZELFlBQUEzNUQsS0FBQXVYLElBQ0E1VixFQUFBdVQsRUFBQTJrQixVQUFBdWpDLEdBZ0JBLE9BZEF6N0QsRUFBQU4sS0FBQU0sRUFBQTNCLEtBQ0EyQixFQUFBM0IsS0FBQSxTQUFBc3hCLEVBQ0EzdkIsRUFBQXdNLEdBQUEsU0FBQW1qQixFQUNBM3ZCLEVBQUFTLFFBQUEsU0FBQWt2QixFQUNBM3ZCLEVBQUFMLGFBQUEsS0FDQUssRUFBQU8sYUFBQSxFQUNBUCxFQUFBSixNQUFBLElBQ0FJLEVBQUEyekQsT0FBQSxTQUNBM3pELEVBQUFiLGNBQ0FhLEVBQUFpVCxhQUNBalQsRUFBQTA3RCxzQkFDQTE3RCxFQUFBMjdELHNCQUNBMzdELEVBQUE0N0QsZUFFQTU3RCxHQUdBNjdELGVBbkpBLFNBbUpBaDlELEdBQ0FiLEtBQUE4NkQsa0JBQ0E5NkQsS0FBQTY2RCxjQUFBaDZELElBSUF5NkQsa0JBekpBLFdBMEpBNTZELEVBQUFxQixLQUFBL0IsS0FBQTZXLE1BQUF2VyxTQUFBLFNBQUFtb0QsR0FBQSxPQUFBQSxFQUFBNlMsNkRDbFJBLElBQUF6OEQsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxvRkM4QjdDWSxFQUFBLFNBRUFDLE9BQ0EsYUFDQSxXQUdBcU0sS0FQQSxXQVFBLE9BQ0EyeEQsZUFBQSxFQUNBQyxvQkFBQSxFQUNBQyxnQkFBQXhrRCxPQUFBLGdCQUFBM1EsS0FBQTdJLEtBQUFhLFFBQUFDLFVBSUF0QixVQUVBaUQsUUFGQSxXQUdBLE9BQUF6QyxLQUFBYSxRQUFBNEIsVUFLQWlRLE9BRUFqUSxRQUZBLFNBRUE2OEIsR0FDQXQvQixLQUFBZytELGlCQUNBaCtELEtBQUFhLFFBQUFDLE9BQUFkLEtBQUF5Z0QsU0FBQW5oQixFQUFBLE9BSUF4K0IsT0FSQSxTQVFBbXhCLEVBQUFELEdBQ0FBLElBQUFDLElBRUEsWUFBQUQsR0FDQWh5QixLQUFBc08sTUFBQSxxQkFHQSxZQUFBMmpCLEdBQ0FqeUIsS0FBQXNPLE1BQUEscUJBTUE1QixTQUVBMkwsTUFGQSxXQUdBclksS0FBQTBtRCxLQUFBamtELFFBQUFpTyxVQUdBdXRELG9CQU5BLFdBT0FqK0QsS0FBQTg5RCxlQUFBLEdBR0F4QyxrQkFWQSxXQVdBdDdELEtBQUE2VyxNQUFBOVYsT0FBQXU2RCxxQkFHQTlCLFNBZEEsV0FlQXg1RCxLQUFBODlELGVBQUEsRUFDQTk5RCxLQUFBKzlELG9CQUFBLEdBR0FHLGNBbkJBLFdBb0JBbCtELEtBQUF3NUQsV0FDQXg1RCxLQUFBKzlELG9CQUFBLG9CQzdHQTkrRCxFQUFBQyxRQUFBLGdxQ0NBQUQsRUFBQUMsUUFBQSxzckNDQUFELEVBQUFDLFFBQUEsKzNGQ0FBLElBQUFMLEVBQ0FFLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFJcEhHLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLDZNQ0Y3Q3FTLFFBQUE2c0QsRUFBQSxFQUFBQyxFQUFBLEdBRUExcEQsWUFDQTJwRCxTQUFBQyxFQUFBNW9ELEVBQ0E2b0QsT0FBQUMsRUFBQTlvRCxFQUNBK29ELFdBQUFDLEVBQUFocEQsRUFDQWlwRCxnQkFBQUMsRUFBQWxwRCxHQUdBdkosS0FBQSxXQUNBLE9BQ0ErMkMsU0FBQSxFQUNBcHpDLFFBQUEsRUFDQSt1RCxTQUFBLEVBQ0FDLFVBQUEsRUFDQTE5RCxLQUFBLE9BQ0EyOUQsU0FDQUMsVUFBQSxJQUlBeC9ELFVBRUF5L0QsWUFGQSxXQUdBLElBQUFod0QsRUFBQUMsT0FBQSxjQU1BLE9BSkFsUCxLQUFBb00sU0FBQTNNLE9BQUFDLEtBQUE0TSxTQUFBRCxTQUFBLEtBQ0E0QyxHQUFBLFdBQUFqUCxLQUFBb00sUUFHQTZDLEdBR0Fpd0QsWUFaQSxXQWFBLE9BQUF4K0QsRUFBQXkrRCxLQUFBbi9ELEtBQUErK0QsTUFBQSxTQUFBaGIsR0FBQSxPQUFBQSxFQUFBWixNQUFBeGdELFVBR0F5OEQsV0FoQkEsV0FpQkEsT0FBQTFuRCxFQUFBakosSUFBQSxtQkFLQWpDLE1BQUEsZUFBQS9MLEVBQUFULEtBQ0FBLEtBQUFxL0QsV0FDQXIvRCxLQUFBZ04sb0JBQ0FoTixLQUFBd04sd0JBQ0Fxc0QsVUFBQVUsV0FBQSxpQkFBQTVwRCxHQUNBQSxFQUFBNnBELGlCQUNBLzVELEVBQUFrK0MsVUFJQWp5QyxTQUVBMnlELFNBQUEsV0FDQXIvRCxLQUFBKytELFNBQ0EvK0QsS0FBQWtqRCxTQUFBLEVBQ0EsSUFBQWowQyxFQUFBQyxPQUFBLHFCQUFBbFAsS0FBQW9NLE9BQUEsWUFBQXBNLEtBQUFtTixXQUFBLE1BRUFuTixLQUFBeVAsTUFBQXdELElBQUFoRSxFQUFBLFNBQUE5QyxHQUNBbk0sS0FBQWcvRCxTQUFBN3lELEVBQUE0eUQsTUFBQXA4RCxPQUFBLEVBQ0EzQyxLQUFBKytELE1BQUE1eUQsRUFBQTR5RCxNQUNBLytELEtBQUFrakQsU0FBQSxFQUVBbGpELEtBQUF5NUQsVUFBQSxXQUNBejVELEtBQUFzL0Qsb0JBS0FBLGFBQUEsV0FDQSxHQUFBdC9ELEtBQUFvL0QsV0FBQSxDQUlBLElBQ0FHLEVBQUFDLEVBQUFDLEVBREEzYSxFQUFBOWtELEtBYUF1VixFQUFBdlYsS0FBQXdWLEtBQUFoVCxLQUFBLHdCQUFBazlELGdCQUNBQyxrQkFBQSxLQUNBNytELE9BQUEsZUFDQTgrRCxpQkFBQSxxQkFDQTlZLFlBZEEsOFBBZUErWSxVQUFBLHFCQUNBQyxhQUFBLGlCQUNBQyxZQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBRUEsSUFBQUMsRUFBQUgsRUFBQSxHQUFBbmhCLFFBQ0F2MkMsRUFBQTZ1QyxTQUFBNm9CLEVBQUEsR0FBQUksUUFBQTkzRCxPQUNBLFdBQUE2M0QsRUFBQWxnRSxRQUFBOCtELE1BQUFwOEQsUUFBQSxJQUFBMkYsR0FHQSszRCxZQUFBLFNBQUFMLEVBQUF0eEQsRUFBQXV4RCxFQUFBQyxHQUVBLElBQUFDLEVBQUFILEVBQUEsR0FBQW5oQixRQUNBNGdCLEVBQUFVLEVBQ0FaLEVBQUFZLEVBQUFHLFlBQ0FkLEVBQUFXLEVBQUFsZ0UsUUFBQTgrRCxNQUFBUSxHQUdBVSxFQUFBRCxFQUFBdHhELElBRUE2eEQsT0FBQSxTQUFBUCxFQUFBdHhELEVBQUF1eEQsRUFBQUMsR0FFQTNxRCxFQUFBLHVCQUFBL1MsS0FBQSxjQUFBK0osS0FBQWl6RCxFQUFBcHdELE9BQ0E2d0QsRUFBQUQsRUFBQXR4RCxJQUVBOHhELE9BQUEsU0FBQVIsRUFBQXR4RCxFQUFBdXhELEVBQUFDLEdBQ0FwYixFQUFBNEIsS0FBQThJLE1BQUFpUixPQUNBM2IsRUFBQStaLFNBQUEsRUFHQVksRUFBQXgvRCxRQUFBOCtELE1BQUFwb0QsT0FBQTRvRCxFQUFBLEdBR0EsSUFBQW1CLEVBQUFWLEVBQUF0cEQsUUFDQWlxRCxFQUFBWCxFQUFBdi9CLFNBQUEsR0FBQW9lLFFBR0EyZ0IsRUFBQTFhLEVBQUE4YixpQkFBQXBCLEVBQUFtQixFQUFBMWdFLFFBQUFnUCxLQUdBMHhELEVBQUE1QixNQUFBcG9ELE9BQUErcEQsRUFBQSxFQUFBbEIsR0FHQSxJQUFBVCxFQUFBamEsRUFBQWlhLE1BQ0FqYSxFQUFBaWEsU0FDQWphLEVBQUEyVSxVQUFBLFdBQ0EzVSxFQUFBaWEsVUFJQWtCLEVBQUFELEVBQUF0eEQsUUFLQWt5RCxpQkFBQSxTQUFBN2MsRUFBQTkwQyxHQUNBLElBQUE2MUMsRUFBQTlrRCxLQVVBLE9BUkFpUCxLQUFBLEdBRUE4MEMsRUFBQTkwQyxNQUFBLElBQUE4MEMsRUFBQS9ELEtBRUErRCxFQUFBWixNQUFBemlELEVBQUFtQyxJQUFBa2hELEVBQUFaLE1BQUEsU0FBQTNnQixHQUNBLE9BQUFzaUIsRUFBQThiLGlCQUFBcCtCLEVBQUF1aEIsRUFBQTkwQyxPQUdBODBDLEdBR0FudEMsVUFBQSxXQUNBNVcsS0FBQTBtRCxLQUFBbWEsU0FBQUosT0FDQXpnRSxLQUFBOGdFLFdBQUEsSUFHQXpxRCxZQUFBLFdBQ0FyVyxLQUFBMG1ELEtBQUFxYSxVQUFBTixPQUNBemdFLEtBQUE4Z0UsV0FBQSxJQUdBQSxVQUFBLFNBQUF0NUIsRUFBQXUzQixHQUNBLElBQUFqYSxFQUFBOWtELEtBRUErK0QsS0FBQWphLEVBQUFpYSxNQUVBcitELEVBQUFxQixLQUFBZzlELEVBQUEsU0FBQWhiLEdBQ0Fyc0MsRUFBQVosSUFBQWl0QyxFQUFBLFlBQUF2YyxHQUNBdWMsRUFBQVosTUFBQXhnRCxRQUNBbWlELEVBQUFnYyxVQUFBdDVCLEVBQUF1YyxFQUFBWixVQUtBNmQsV0FBQSxXQUNBaGhFLEtBQUE4K0QsVUFBQTkrRCxLQUFBOCtELFNBRUE5K0QsS0FBQTgrRCxTQUNBOStELEtBQUFvQixLQUFBLFNBRUFwQixLQUFBb0IsS0FBQSxRQUlBdTlDLEtBQUEsV0FDQSxJQUFBbUcsRUFBQTlrRCxLQUVBOGtELEVBQUFoMUMsUUFBQSxFQUVBLElBQUFpdkQsRUFBQWhuRCxLQUFBK29DLE1BQUEvb0MsS0FBQUMsVUFBQThzQyxFQUFBaWEsUUFDQUEsRUFBQWphLEVBQUFtYyxtQkFBQWxDLEdBRUEvK0QsS0FBQXlQLE1BQUE0MUMsS0FBQW4yQyxPQUFBLFdBQUE2dkQsVUFBQW52RCxRQUFBLFNBQUF6RCxHQUNBMjRDLEVBQUF1YSxXQUNBdmEsRUFBQStaLFNBQUEsRUFDQS9aLEVBQUFoMUMsUUFBQSxFQUNBZzFDLEVBQUEzeEMsVUFBQSxrQkFBQXpRLFVBQUEsMEJBSUF1K0QsbUJBQUEsU0FBQWxDLEdBQ0EsSUFBQWphLEVBQUE5a0QsS0FFQSxPQUFBVSxFQUFBbUMsSUFBQWs4RCxFQUFBLFNBQUEzbUIsRUFBQTVrQyxHQVNBLE9BUEE0a0MsRUFBQStLLE1BQUF4Z0QsU0FDQXkxQyxFQUFBK0ssTUFBQTJCLEVBQUFtYyxtQkFBQTdvQixFQUFBK0ssUUFJQS9LLEVBQUF3SixNQUFBcHVDLEVBQUEsRUFFQTRrQyxLQUlBOG9CLFdBQUEsU0FBQXpnQyxHQUNBemdDLEtBQUFrbEQsV0FBQSxlQUFBemtCLElBR0FsekIsb0JBbExBLFdBbUxBdk4sS0FBQXEvRCxZQUdBdHlELGdCQXRMQSxXQXVMQS9NLEtBQUFxL0QsYUFLQTd0RCxRQUNBMnZELGVBQUEsU0FBQTFnQyxHQUNBemdDLEtBQUFrbEQsV0FBQSxlQUFBemtCLElBRUEyZ0MsY0FBQSxTQUFBNXlELEdBQ0F4TyxLQUFBa2xELFdBQUEsY0FBQTEyQyxJQUVBNnlELGdCQUFBLFNBQUE3eUQsR0FDQXhPLEtBQUE4UCxRQUFBLEVBQ0E5UCxLQUFBa2xELFdBQUEsZ0JBQUExMkMsSUFFQTh5RCxlQUFBLFdBQ0F0aEUsS0FBQSsrRCxNQUFBcDhELE9BQUEsR0FJQTRTLEVBQUF2VixLQUFBd1YsS0FBQWhULEtBQUEsd0JBQUFrOUQsZUFBQSxhQUlBaHRELE9BQ0Ftc0QsUUFEQSxTQUNBMEMsR0FDQXZoRSxLQUFBbVQsVUFBQSxjQUFBb3VELDZHQ2pOQTFoRSxFQUFBLFNBRUFDLE9BQ0F3Z0UsWUFBQWtCLE9BQ0FDLEtBQUEza0MsT0FDQTF0QixNQUFBMHRCLE9BQ0E3dEIsSUFBQTZ0QixPQUNBNGtDLFdBQ0FoZ0UsS0FBQStwRCxRQUNBcnNELFNBQUEsR0FFQXVpRSxRQUFBN2tDLE9BQ0E4a0MsV0FBQW5XLFFBQ0FvVyxXQUFBL2tDLE9BQ0FxckIsZUFBQXJyQixPQUNBZ2xDLFlBQ0FwZ0UsS0FBQTBsRCxNQUNBaG9ELFFBQUEsV0FDQSxXQUdBb29DLFVBQUFpa0IsUUFDQW5qRCxNQUFBazVELE9BQ0FPLE1BQ0FyZ0UsS0FBQStwRCxRQUNBcnNELFNBQUEsR0FFQXVuRCxTQUFBOEUsU0FHQWpzRCxVQUVBMC9ELFlBQUEsV0FDQSxPQUFBbC9ELEtBQUE4aEUsV0FBQW4vRCxRQUdBcS9ELHFCQU5BLFdBT0EsV0FBQWhpRSxLQUFBQyxRQUFBOCtELE1BQUFwOEQsUUFBQSxJQUFBM0MsS0FBQXNJLFFBS0FvRSxTQUVBOEQsT0FBQSxXQUNBeFEsS0FBQXduQyxXQUFBeG5DLEtBQUF3bkMsV0FHQTA1QixXQUFBLFdBQ0FsaEUsS0FBQW1ULFVBQUEsZUFBQW5ULEtBQUFpUCxNQUdBZ3pELFdBQUEsV0FDQSxJQUFBbmQsRUFBQTlrRCxLQUVBbVAsTUFDQXpOLEtBQUEsVUFDQTBOLE1BQUExTSxVQUFBLG1CQUNBNkosS0FBQThDLGlCQUFBLDRCQUNBQyxrQkFBQTVNLFVBQUEsa0JBQ0E2TSxpQkFBQTdNLFVBQUEsYUFDQThNLGtCQUFBLEdBQ0EsV0FDQXMxQyxFQUFBcjFDLE1BQUE0MUMsS0FBQW4yQyxPQUFBLGlCQUFBdXlELEtBQUEzYyxFQUFBMmMsT0FBQTd4RCxRQUFBLFdBQ0FrMUMsRUFBQTdrRCxRQUFBOCtELE1BQUFwb0QsT0FBQW11QyxFQUFBd2IsWUFBQSxHQUVBdGdFLEtBQUFtVCxVQUFBLHFCQUtBK3VELGNBQUEsV0FDQWxpRSxLQUFBeVAsTUFBQTQxQyxLQUFBbjJDLE9BQUEsb0JBQUFWLEdBQUF4TyxLQUFBeWhFLE9BQUE3eEQsUUFBQSxTQUFBekQsR0FDQXlHLE9BQUEzQixTQUFBOUUsRUFBQXE4QyxZQUlBMlosZ0JBQUEsV0FDQW5pRSxLQUFBbVQsVUFBQSxjQUFBblQsS0FBQXloRSxPQUdBVyxrQkFBQSxXQUNBcGlFLEtBQUFtVCxVQUFBLGdCQUFBblQsS0FBQXloRSx3QkNsSkF4aUUsRUFBQUMsUUFBQSwrK0VDcUJBVyxFQUFBLFNBRUFDLE9BQ0FpL0QsTUFBQTNYLE1BQ0E5K0MsTUFBQWs1RCxPQUNBYSxXQUNBM2dFLEtBQUFvN0IsT0FDQTE5QixRQUFBLElBRUFvb0MsVUFBQWlrQixRQUNBOUUsU0FBQThFLFNBR0Fqc0QsVUFDQThTLFFBQUEsV0FFQSxJQUFBQSxHQUFBLFlBR0FBLEVBQUFqUixLQUFBLFNBQUFyQixLQUFBc0ksT0FHQXRJLEtBQUErK0QsTUFBQXA4RCxRQUNBMlAsRUFBQWpSLEtBQUEsU0FJQSxJQUFBdUcsRUFBQTVILEtBQUF3bkMsVUFBQSxtQkFHQSxPQUZBbDFCLEVBQUFqUixLQUFBLFlBQUF1RyxHQUVBMEssRUFBQThGLEtBQUEsT0FJQTFMLFNBRUE4RCxPQUFBLFNBQUF1ekMsR0FDQUEsRUFBQTRKLEtBQUEsYUFBQTVKLEVBQUF2YyxZQUdBODZCLFNBQUEsU0FBQXRpQixHQUNBLE9BQUFoZ0QsS0FBQXFpRSxVQUFBLElBQUFyaUIsb0JDOURBL2dELEVBQUFDLFFBQUEsaWFDQUEsSUFBQUwsRUFBQUMsRUFDQUMsS0FDQUYsRUFBQUcsRUFBQSxLQUNBRixFQUFBRSxFQUFBLEtBQ0FDLEVBQUFDLFFBQUFMLE1BQ0FJLEVBQUFDLFFBQUFDLGFBQUFGLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFFLFNBQ0EsSUFBQUMsRUFBQSxtQkFBQUosRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUksVUFBQUwsRUFBQUMsUUFBQUksWUFBb0hMLEVBQUFDLFFBQ3BISixJQUNBTyxFQUFBRSxTQUFBVCxHQUVBTyxFQUFBRyxXQUFBSCxFQUFBRyxhQUNBQyxPQUFBQyxLQUFBWCxHQUFBWSxRQUFBLFNBQUFDLEdBQ0EsSUFBQVgsRUFBQUYsRUFBQWEsR0FDQVAsRUFBQUcsU0FBQUksR0FBQSxXQUE2QyxPQUFBWCxnR0NTN0NZLEVBQUEsU0FFQUMsT0FBQSxVQUVBcU0sS0FBQSxXQUNBLE9BQ0FzMEIsT0FBQSxLQUNBci9CLE1BQUEsRUFDQTBPLFFBQUEsRUFDQW96QyxTQUFBLEVBQ0FxZixlQUlBL3dELFFBQ0EydkQsZUFBQSxTQUFBMWdDLEdBQ0F6Z0MsS0FBQWtqRCxTQUFBLEVBQ0FsakQsS0FBQXlnQyxTQUNBemdDLEtBQUF3aUUsaUJBSUE5MUQsU0FDQWs5QyxPQUFBLFdBQ0E1cEQsS0FBQW9CLE1BQUEsR0FHQTR6RCxPQUFBLFNBQUE3MEQsR0FDQSxJQUFBc2dDLEVBQUEsTUFBQXpnQyxLQUFBeWdDLE9BQUEsR0FBQXpnQyxLQUFBeWdDLE9BRUF4eEIsRUFBQUMsT0FBQSxlQUFBdXhCLEVBQUEsYUFBQXRnQyxHQUVBSCxLQUFBb00sU0FBQTNNLE9BQUFDLEtBQUE0TSxTQUFBRCxTQUFBLEtBQ0E0QyxHQUFBLFdBQUFqUCxLQUFBb00sUUFHQXdHLE9BQUEzQixTQUFBaEMsR0FHQXV6RCxhQUFBLFdBQ0EsSUFBQXZ6RCxFQUFBQyxPQUFBLHNCQUFBbFAsS0FBQXlnQyxPQUFBLGlCQUVBemdDLEtBQUF5UCxNQUFBd0QsSUFBQWhFLEVBQUEsU0FBQTlDLEdBQ0EsSUFBQW8yRCxLQUVBN2hFLEVBQUFxQixLQUFBb0ssRUFBQWczQyxNQUFBLFNBQUFoakQsR0FDQW9pRSxFQUFBbGhFLE1BQ0FILE1BQUFmLEVBQUFzaEUsS0FDQWwxRCxLQUFBcE0sRUFBQWlQLFVBS0ExTyxFQUFBNlYsVUFBQWdzRCxHQUFBcmhFLE1BQUEsYUFDQXFoRSxFQUFBbGhFLE1BQUFILE1BQUEsVUFBQXFMLEtBQUEsWUFJQWcyRCxFQUFBN2hFLEVBQUFpa0QsT0FBQTRkLEVBQUEsU0FBQXBpRSxHQUNBLE9BQUFBLEVBQUFvTSxPQUdBdk0sS0FBQXVpRSxZQUNBdmlFLEtBQUFrakQsU0FBQSxFQUdBbGpELEtBQUF1aUUsVUFBQTUvRCxRQUFBLEVBQ0EzQyxLQUFBZzFELE9BQUFoMUQsS0FBQXVpRSxVQUFBLEdBQUFyaEUsT0FFQWxCLEtBQUFvQixNQUFBLG9DQzNGQW5DLEVBQUFDLFFBQUEsNGtCQ0FBLElBQUFMLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsZ0dDTTdDWSxFQUFBLFNBRUFzTSxLQUFBLFdBQ0EsT0FDQXFDLEdBQUEsS0FDQXBOLE1BQUEsRUFDQTBPLFFBQUEsRUFDQW96QyxTQUFBLEVBQ0FxZixlQUlBL3dELFFBQ0E0dkQsY0FBQSxTQUFBNXlELEdBQ0F4TyxLQUFBa2pELFNBQUEsRUFDQWxqRCxLQUFBb0IsTUFBQSxFQUNBcEIsS0FBQXdPLEtBQ0F4TyxLQUFBeWlFLGtCQUdBcEIsZ0JBQUEsU0FBQTd5RCxHQUNBeE8sS0FBQXdPLEtBQ0F4TyxLQUFBMGlFLE1BQUEsUUFJQWgyRCxTQUNBKzFELGVBQUEsV0FDQXppRSxLQUFBeVAsTUFBQXdELElBQUEvRCxPQUFBLDRCQUFBL0MsR0FDQSxJQUFBdzJELEtBRUFqaUUsRUFBQXFCLEtBQUFvSyxFQUFBZzNDLE1BQUEsU0FBQTd2QyxHQUNBcXZELEVBQUF0aEUsTUFDQUgsTUFBQW9TLEVBQUE5RSxHQUNBakMsS0FBQStHLEVBQUFsRSxVQUlBcFAsS0FBQTJpRSxjQUNBM2lFLEtBQUFrakQsU0FBQSxLQUlBMEcsT0FBQSxXQUNBNXBELEtBQUFvQixNQUFBLEdBR0FzaEUsTUFBQSxTQUFBcHZELEdBQ0F0VCxLQUFBOFAsUUFBQSxFQUNBLElBQUF0QixFQUFBeE8sS0FBQXdPLEdBRUF4TyxLQUFBeVAsTUFBQTQxQyxLQUFBbjJDLE9BQUEsZ0JBQUFWLEtBQUE4RSxlQUFBMUQsUUFBQSxTQUFBQyxHQUNBK0MsT0FBQTNCLFNBQUEyQixPQUFBM0IsMkNDdkVBaFMsRUFBQUMsUUFBQSw0ZENBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLHdHQzhHN0N5VyxFQUFBc1MsRUFBQTQ2QyxtQ0FIQS9JLFVBQUE3NkQsRUFBQSxJQUdBMFcsRUFBQW1rRCxVQUFBN3hDLEtBQUE0NkMsRUFBQWx0RCxFQUFBZ3BCLFVBQUFta0MsYUFBQW50RCxFQUFBZ3BCLFVBQUFta0MsYUFBQSxTQUFBbHlELEVBQUFteEMsRUFBQXBzQyxFQUFBZ1osR0FBQSxRQUFBMXVCLEtBQUE4aUUsU0FBQTk2QyxFQUFBdFMsS0FBQXNTLEVBQUEwRyxJQUFBazBDLEVBQUEzbUMsS0FBQWo4QixLQUFBMlEsRUFBQW14QyxFQUFBcHNDLE1BQUFncEIsVUFBQTY3QixXQUFBLFNBQUE3a0QsRUFBQW9zQyxFQUFBOGdCLEdBQUEsR0FBQTVpRSxLQUFBK2lFLEtBQUFydEQsRUFBQW9zQyxFQUFBOGdCLEdBQUFsdEQsYUFBQTB4QyxNQUFBLElBQUF0RixFQUFBLEVBQUFBLEVBQUFwc0MsRUFBQS9TLE9BQUFtL0MsSUFBQTk1QixFQUFBdFMsRUFBQW9zQyxLQUFBLE9BQUE5NUIsRUFBQXRTLElBQUEsR0FBQUEsRUFBQXFuQixPQUVBbDlCLEVBQUEsU0FFQTZVLFlBQ0FzdUQsaUJBQUFoa0UsRUFBQSxHQUNBaWtFLGVBQUFqa0UsRUFBQSxLQUNBa2tFLGVBQUFsa0UsRUFBQSxLQUNBbWtFLGtCQUFBbmtFLEVBQUEsTUFHQXNTLFFBQUE4eEQsRUFBQSxHQUVBNXJELE1BQUEsRUFFQTFYLE9BQ0FzUCxNQUFBMHRCLE9BQ0Eyb0IsT0FDQS9qRCxLQUFBbzdCLE9BQ0ExOUIsUUFBQSxNQUVBdTJELE1BQUFsSyxRQUNBNFgsWUFBQXZtQyxPQUNBMmtDLEtBQUEza0MsT0FDQXdtQyxhQUFBeG1DLE9BQ0FrakIsTUFDQXQrQyxLQUFBbzdCLE9BQ0ExOUIsUUFBQSxJQUVBbWtFLElBQUF6bUMsT0FDQTd0QixJQUFBNnRCLE9BQ0EwbUMsVUFBQTFtQyxPQUNBMmYsUUFDQS82QyxLQUFBK3BELFFBQ0Fyc0QsU0FBQSxHQUVBZ04sUUFDQTFLLEtBQUFvN0IsT0FDQTE5QixRQUFBLGtCQUFBSyxPQUFBQyxLQUFBNE0sU0FBQUQsU0FBQSxLQUVBQSxTQUNBM0ssS0FBQW83QixPQUNBMTlCLFFBQUEsUUFFQXFrRSxpQkFDQS9oRSxLQUFBK3BELFFBQ0Fyc0QsU0FBQSxHQUVBc2tFLGFBQ0FoaUUsS0FBQStwRCxRQUNBcnNELFNBQUEsR0FFQXVrRSxVQUNBamlFLEtBQUErcEQsUUFDQXJzRCxTQUFBLEdBRUF3a0UsbUJBQ0FsaUUsS0FBQStwRCxRQUNBcnNELFNBQUEsR0FFQW9CLFlBQ0FrQixLQUFBK3BELFFBQ0Fyc0QsU0FBQSxHQUVBeWtFLHdCQUNBbmlFLEtBQUErcEQsUUFDQXJzRCxTQUFBLElBSUErTSxLQUFBLFdBQ0EsT0FDQSsyQyxTQUFBLEVBQ0FwekMsUUFBQSxFQUNBM1AsWUFDQTJqRSxZQUFBLEtBQ0EvakUsVUFBQTBsRCxTQUFBMWtELFdBQ0FnakUscUJBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsZUFBQSxFQUNBQyxzQkFBQSxFQUNBN3hELFVBQ0E4eEQsWUFBQSxPQUNBQyxxQkFBQXh4RCxPQUFBdEcsU0FBQTgzRCxxQkFDQXZKLGNBQUEsT0FJQXI3RCxVQUVBNmtFLFFBQUEsV0FDQSxnQkFBQXJrRSxLQUFBcWpFLGFBR0FpQixXQUFBLFdBQ0EsbUJBQUF0a0UsS0FBQXFqRSxhQUdBa0IsU0FBQSxXQUNBLGlCQUFBdmtFLEtBQUFxakUsYUFHQW1CLE9BQUEsV0FDQSxlQUFBeGtFLEtBQUFxakUsYUFHQW9CLFdBQUEsV0FDQSxtQkFBQXprRSxLQUFBcWpFLGFBR0FxQixRQUFBLFdBQ0EsZ0JBQUExa0UsS0FBQXFqRSxhQUdBc0IsT0FBQSxXQUNBLGVBQUEza0UsS0FBQXFqRSxhQUdBdUIsV0FBQSxXQUNBLE9BQUE1a0UsS0FBQTJrRSxRQUFBLE1BQUEza0UsS0FBQXVqRSxLQUdBclksUUFBQSxXQUNBLFdBQUFsckQsS0FBQTJqRSxXQUVBLFVBQUEzakUsS0FBQXFqRSxZQUNBcmpFLEtBQUF5TyxJQUFBLGVBQUF6TyxLQUFBeWxELE1BQUFueUMsV0FBQSxTQUNBLFNBQUF0VCxLQUFBcWpFLFlBQ0FyakUsS0FBQXlPLElBQUEsY0FDQSxhQUFBek8sS0FBQXFqRSxZQUNBcmpFLEtBQUF5TyxJQUFBLGNBQUF6TyxLQUFBeWxELE1BQUFzUCxTQUFBLFNBQ0EsV0FBQS8wRCxLQUFBcWpFLFlBQ0FyakUsS0FBQXlPLElBQUEsV0FBQXpPLEtBQUFnZ0QsS0FBQSxTQUNBLFNBQUFoZ0QsS0FBQXFqRSxZQUNBLzJELFNBQUF1NEQsU0FBQTdrRSxLQUFBeWhFLE1BQUF6aEUsS0FBQXlPLElBQUEsZUFDQXpPLEtBQUEwa0UsVUFBQTFrRSxLQUFBeWtFLFlBQ0F6a0UsS0FBQXlPLElBQUEsV0FNQXEyRCxpQkFBQSxXQUNBLE9BQUE5a0UsS0FBQXlrRSxhQUFBemtFLEtBQUEwa0UsVUFBQTFrRSxLQUFBd2tFLFFBR0FPLGNBQUEsV0FDQSxPQUFBL2tFLEtBQUFza0UsYUFBQXRrRSxLQUFBdWtFLFdBQUF2a0UsS0FBQTRrRSxZQUdBSSxlQUFBLFdBRUEsUUFBQWhsRSxLQUFBcWtFLFlBS0Fya0UsS0FBQTIxRCxRQUFBMzFELEtBQUFELFNBQUFnQixPQUFBa2tFLFVBS0FqbEUsS0FBQTIxRCxPQUFBLFNBQUEzMUQsS0FBQUQsU0FBQTBsRCxNQUFBeWYsY0FPQUMsb0JBQUEsV0FDQSxRQUFBbmxFLEtBQUF1a0UsVUFBQXZrRSxLQUFBeWtFLFlBQUF6a0UsS0FBQXdrRSxRQUFBeGtFLEtBQUEwa0UsVUFHQVUsZUFBQSxXQUNBLE9BQUFwbEUsS0FBQTJOLE1BQUEwM0QsY0FHQWxVLFVBQUEsV0FDQSxXQUFBendELEVBQUEwd0QsS0FBQXB4RCxLQUFBcVMsU0FHQWl6RCxnQkFBQSxXQUNBLE9BQUF0bEUsS0FBQUcsU0FBQThrRSxVQUdBTSxpQkFqR0EsV0FpR0EsSUFBQTlrRSxFQUFBVCxLQUVBRCxFQUFBZ1ksS0FBQStvQyxNQUFBL29DLEtBQUFDLFVBQUFoWSxLQUFBRCxXQUtBLE9BRkFBLEVBQUFnQixPQUFBTCxFQUFBdzlDLFVBQUFuK0MsRUFBQWdCLE9BQUEsU0FBQUcsRUFBQXRCLEdBQUEsT0FBQWEsRUFBQXVSLGFBQUF6USxTQUFBM0IsS0FFQUcsR0FHQXlsRSxrQkEzR0EsV0E0R0EsV0FBQXhsRSxLQUFBZzdELGVBQUFqNkQsT0FBQTRCLFFBQUEzQyxLQUFBMk4sTUFBQTAzRCxjQUFBcmxFLEtBQUEyTixNQUFBODNELFlBQUEsT0FLQW5sRSxTQWpIQSxXQWtIQSxPQUFBTixLQUFBRyxTQUFBRyxVQUdBb2xFLGFBckhBLFdBc0hBLE9BQUExbEUsS0FBQXdsRSxrQkFFQTlrRSxFQUFBdVgsT0FBQWpZLEtBQUFNLFNBQUEsU0FBQU8sR0FBQSxpQkFBQUEsRUFBQUMsU0FGQWQsS0FBQU0sVUFLQTA2RCxlQTNIQSxXQTRIQSxPQUFBdDZELEVBQUE4QixLQUFBeEMsS0FBQU0sVUFBQVEsT0FBQSxhQUlBNmtFLGNBaElBLFdBaUlBLElBQUE1a0UsS0FNQSxPQUxBZixLQUFBTSxTQUFBWCxRQUFBLFNBQUFrQixHQUNBQSxFQUFBRSxPQUFBcEIsUUFBQSxTQUFBcUMsR0FDQWpCLEVBQUFpQixFQUFBM0IsTUFBQVEsRUFBQUMsV0FHQUMsR0FJQTZrRSxjQTNJQSxXQTJJQSxJQUFBL2pFLEVBQUE3QixLQUNBcVMsS0FLQSxPQUpBNVMsT0FBQUMsS0FBQU0sS0FBQXFTLFFBQUExUyxRQUFBLFNBQUFxQyxHQUNBQSxJQUFBMjBELE9BQUEsR0FDQXRrRCxFQUFBclEsR0FBQUgsRUFBQThqRSxjQUFBM2pFLEtBRUFxUSxHQUlBd3pELHNCQXJKQSxXQXVKQSxJQUFBdmxFLEVBQUFOLEtBQUF3bEUsa0JBQ0E5a0UsRUFBQXkzQixLQUFBbjRCLEtBQUE0bEUsY0FBQSxTQUFBL2tFLEdBQUEsa0JBQUFBLElBQ0FiLEtBQUE0bEUsY0FFQWxtRSxFQUFBRCxPQUFBQyxLQUFBWSxHQUlBLFdBQUFaLEVBQUFpRCxPQUFBM0MsS0FBQTY2RCxjQUVBdjZELEVBQUFaLEVBQUEsTUFJQWdOLFNBRUFvNUQsYUFBQSxXQUNBOWxFLEtBQUFELFVBQ0FJLFNBQUEsS0FDQXNkLElBQUF6ZCxLQUFBMjFELE1BQ0FqMEQsS0FBQTFCLEtBQUFxakUsWUFDQTVCLEtBQUF6aEUsS0FBQXloRSxLQUNBanpELEdBQUF4TyxLQUFBeWhFLEtBQ0FobEIsT0FBQXo4QyxLQUFBeThDLE9BQ0F1RCxLQUFBaGdELEtBQUE4akUsWUFBQTlqQixLQUNBNXpDLE9BQUFwTSxLQUFBb00sT0FDQXE1QyxNQUFBemxELEtBQUF5bEQsTUFDQTFrRCxPQUFBZixLQUFBOGpFLGFBR0E5akUsS0FBQStqRSxxQkFBQSxHQUdBZ0MsUUFBQSxlQUFBeFosRUFBQXZzRCxLQUNBOGtELEVBQUE5a0QsS0FLQSxHQUhBOGtELEVBQUFoMUMsUUFBQSxFQUNBZzFDLEVBQUF6eUMsVUFFQXJTLEtBQUF3akUsVUFDQSxJQUFBdjBELEVBQUFqUCxLQUFBd2pFLGVBQ0EsR0FBQXhqRSxLQUFBeWtFLFdBQ0F4MUQsRUFBQUMsT0FBQSxhQUFBbFAsS0FBQWdnRCxVQUNBLEdBQUFoZ0QsS0FBQTBrRSxRQUNBejFELEVBQUFDLE9BQUEsV0FBQWxQLEtBQUF5bEQsTUFBQXVnQixNQUFBLFlBR0EsSUFBQXpoQixFQUFBdmtELEtBQUF5UCxNQUFBNDFDLEtBQUFwMkMsRUFBQWpQLEtBQUF1bEUsa0JBRUFoaEIsRUFBQTMwQyxRQUFBLFNBQUF6RCxHQUdBLEdBRkEyNEMsRUFBQTVCLFNBQUEsRUFFQS8yQyxFQUFBeUQsUUFBQSxDQUVBLEdBREE1UCxLQUFBbVQsVUFBQSxrQkFDQWhILEVBQUFxOEMsV0FBQSxhQUFBeG9ELEtBQUFta0UsYUFBQW5rRSxLQUFBMjFELE9BRUEsWUFEQS9pRCxPQUFBM0IsU0FBQTlFLEVBQUFxOEMsVUFHQXhvRCxLQUFBOFAsUUFBQSxFQUNBOVAsS0FBQTRqRSxvQkFDQTVqRSxLQUFBb1AsTUFBQXBQLEtBQUF3a0UsT0FBQXhrRSxLQUFBRCxTQUFBZ0IsT0FBQW1TLFNBQUFsVCxLQUFBRCxTQUFBZ0IsT0FBQXFPLE9BRUFwUCxLQUFBbVQsVUFBQSxrQkFBQWhILEVBQUF5d0IsU0FBQW0xQixRQUFBLFlBRUEveEQsS0FBQW1ULFVBQUEsZ0JBQUF6USxVQUFBLGFBQ0ExQyxLQUFBOFAsUUFBQSxFQUNBOVAsS0FBQXFTLE9BQUFsRyxFQUFBa0csT0FDQXJTLEtBQUE2NkQsY0FBQTc2RCxLQUFBNmxFLHNCQUNBN2xFLEtBQUF5NUQsVUFBQSxXQUNBbGtELEVBQUEsY0FBQTRrRCxTQUFBQyxVQUFBLFFBS0E3VixFQUFBdnhDLE1BQUEsU0FBQW5ELEdBQ0EwOEMsRUFBQXo4QyxRQUFBLEVBQ0F5OEMsRUFBQWw2QyxVQUNBLElBQUF6UyxFQUFBLDJCQUFBaVEsRUFBQW8yRCxVQUFBLHdDQUNBMVosRUFBQTdILFFBQUExeEMsTUFBQXRRLFVBQUEsTUFBQTlDLE9BSUFzbUUseUJBQUEsV0FDQWxtRSxLQUFBbWtFLFlBQUEsT0FDQXQzRCxhQUFBSyxRQUFBLGdDQUNBd0ssRUFBQWhJLE9BQUExUCxLQUFBRCxTQUFBLFlBQ0EyWCxFQUFBaEksT0FBQTFQLEtBQUFELFNBQUEsV0FFQUMsS0FBQStsRSxXQUdBSSxtQkFBQSxXQUNBbm1FLEtBQUFta0UsWUFBQSxXQUNBdDNELGFBQUFLLFFBQUEsb0NBQ0FsTixLQUFBRCxTQUFBeWQsVUFBQSxFQUNBOUYsRUFBQWhJLE9BQUExUCxLQUFBRCxTQUFBLFdBRUFDLEtBQUErbEUsV0FHQUssa0JBQUEsV0FDQXBtRSxLQUFBbWtFLFlBQUEsVUFDQXQzRCxhQUFBSyxRQUFBLG1DQUNBbE4sS0FBQUQsU0FBQXNtRSxTQUFBLEVBQ0EzdUQsRUFBQWhJLE9BQUExUCxLQUFBRCxTQUFBLFlBRUFDLEtBQUErbEUsV0FHQU8sWUFBQSxXQUNBL3dELEVBQUEsc0JBQUE1UyxRQUNBNFMsRUFBQSxtREFBQWduRCxTQUFBLGVBRUF2OEQsS0FBQXVtRSxpQkFHQUEsY0FBQTdsRSxFQUFBOGxFLFNBQUEsU0FBQTcxRCxHQUNBLEdBQUEzUSxLQUFBaWtFLGNBQ0Fqa0UsS0FBQWtrRSxzQkFBQSxNQURBLENBS0EsSUFBQW5rRSxFQUFBQyxLQUFBRCxTQUtBLEdBSkFBLEVBQUEsV0FFQUMsS0FBQWlrRSxlQUFBLEVBRUFqa0UsS0FBQTIxRCxNQUlBLEdBQUEzMUQsS0FBQTJrRSxPQUFBLENBQ0EsSUFBQTNrQixFQUFBaGdELEtBQUFELFNBQUFpZ0QsTUFBQSxXQUVBL3dDLEdBREFBLEVBQUFqUCxLQUFBeWxELE1BQUFnaEIsV0FBQSxJQUFBem1CLEdBQ0F4bkMsUUFBQSxlQUVBdkosRUFBQWpQLEtBQUEwbUUsZ0JBUEEsSUFBQXozRCxFQUFBalAsS0FBQWlQLElBV0FqUCxLQUFBeVAsTUFBQTQxQyxLQUFBcDJDLEVBQUFsUCxFQUFBLFNBQUFvTSxFQUFBc3dDLEVBQUE4SCxHQUNBdmtELEtBQUEybUUsb0JBQUF4NkQsR0FDQW5NLEtBQUFpa0UsZUFBQSxFQUNBamtFLEtBQUFra0UsdUJBQ0Fsa0UsS0FBQWtrRSxzQkFBQSxFQUNBbGtFLEtBQUF1bUUscUJBR0EsS0FFQUksb0JBQUEsU0FBQXg2RCxHQUNBLElBQ0F5NkQsRUFEQXJ4RCxFQUFBLHNCQUNBdEMsSUFBQSxHQUtBOUcsR0FBQSxrREFIQW9KLEVBQUFxeEQsRUFBQXpsQyxjQUFBbndCLFVBQUE2MUQsYUFHQSxLQUZBdHhELEVBQUFxeEQsRUFBQXpsQyxjQUFBbndCLFVBQUFvcEQsWUFFQSxlQUVBd00sRUFBQXpsQyxjQUFBbndCLFNBQUFzaEQsT0FDQXNVLEVBQUF6bEMsY0FBQW53QixTQUFBODFELE1BQUEzNkQsR0FDQXk2RCxFQUFBemxDLGNBQUFud0IsU0FBQXFLLFNBR0EwckQsdUJBQUEsV0FDQS9tRSxLQUFBMjFELE9BQ0EzMUQsS0FBQWlOLE9BQUEsaUNBQUFtQyxHQUNBcFAsS0FBQXlnRCxTQUFBcnhDLElBQUFwUCxLQUFBRCxTQUFBZ0IsT0FBQWkvQyxPQUNBaGdELEtBQUFna0UsZ0JBQUEsR0FHQWhrRSxLQUFBZ2tFLGlCQUNBaGtFLEtBQUFELFNBQUFnQixPQUFBaS9DLEtBQUFoZ0QsS0FBQXlnRCxTQUFBcnhDLE9BTUFzM0QsU0FBQSxXQUNBLElBQUExbUUsS0FBQTIxRCxNQUNBLE9BQUEzMUQsS0FBQXVqRSxJQUdBLElBQUF5RCxFQUFBaG5FLEtBQUFza0UsV0FBQSx1QkFDQXRrQixFQUFBaGdELEtBQUFELFNBQUFpZ0QsTUFBQWduQixFQUVBQyxFQUFBam5FLEtBQUF5bEQsTUFBQXdoQixNQUNBaDRELEVBQUFnNEQsRUFFQSxZQUFBam5FLEtBQUF5bEQsTUFBQXlmLFdBQ0EsSUFBQUQsRUFBQWpsRSxLQUFBaWxFLE9BS0EsSUFGQSxJQUNBN3BCLEVBREE4ckIsRUFBQSw2QkFFQSxRQUFBOXJCLEVBQUE4ckIsRUFBQTE3RCxLQUFBeTdELEtBQUEsQ0FDQSxJQUFBLytELEVBQUFrekMsRUFBQSxHQUNBbDZDLEVBQUEsR0FFQSxPQUFBZ0gsR0FDQSxhQUNBaEgsRUFBQStqRSxFQUFBa0MsT0FBQSxRQUNBLE1BQ0EsY0FDQWptRSxFQUFBK2pFLEVBQUFrQyxPQUFBLE1BQ0EsTUFDQSxZQUNBam1FLEVBQUErakUsRUFBQWtDLE9BQUEsTUFDQSxNQUNBLGFBQ0FqbUUsRUFBQTgrQyxFQUNBLE1BQ0EsUUFDQSxJQUFBaCtDLEVBQUFrRyxFQUFBNHBCLFVBQUEsRUFBQTVwQixFQUFBdkYsT0FBQSxHQUNBekIsRUFBQWxCLEtBQUFELFNBQUFnQixPQUFBaUIsR0FJQWlOLElBQUF1SixRQUFBdFEsRUFBQWhILEdBR0EsT0FBQStOLEdBR0FnMkQsS0FBQSxXQUNBLElBQUFBLEVBQUFqbEUsS0FBQXlsRCxNQUFBMmhCLFNBRUFELEVBQUEsYUFNQSxPQUpBbEMsRUFBQXRpRSxPQUFBLEtBQ0F3a0UsR0FBQSxVQUdBRSxJQUFBcEMsRUFBQWtDLElBR0FHLFdBQUEsU0FBQXBILEdBQ0EsSUFBQTl3RCxFQUFBcFAsS0FBQUQsU0FBQWdCLE9BQUFxTyxNQUNBNHdDLEVBQUFoZ0QsS0FBQUQsU0FBQWlnRCxLQUVBaGdELEtBQUFna0UsZUFBQWhrRSxLQUFBeWdELFNBQUFyeEMsS0FBQTR3QyxHQUdBdW5CLHNCQUFBLFdBQ0EsSUFBQTdsRSxFQUFBbUwsYUFBQUMsUUFBQSxpQ0FNQSxPQUpBOU0sS0FBQTZqRSx3QkFBQSxZQUFBbmlFLElBQ0FBLEVBQUEsUUFHQUEsR0FHQWd3RCxZQS9PQSxXQWdQQSxHQUFBcGxELFNBQUF3RixRQUFBM1IsU0FDQUgsS0FBQXduRSxhQUFBbDdELFNBQUF3RixRQUFBM1IsY0FEQSxDQUtBLElBQUFnN0MsS0FDQWxzQyxFQUFBQyxPQUFBLG1CQUFBbFAsS0FBQXNqRSxhQUVBbm9CLEVBQUEvdUMsT0FBQXBNLEtBQUFvTSxPQUNBK3VDLEVBQUFzc0IsV0FBQXpuRSxLQUFBcWtFLFFBQ0Fya0UsS0FBQXlQLE1BQUF3RCxJQUFBaEUsRUFBQWtzQyxHQUFBdnJDLFFBQUEsU0FBQXpELEdBQ0FuTSxLQUFBd25FLGFBQUFyN0QsT0FJQXE3RCxhQS9QQSxTQStQQXI3RCxHQUNBbk0sS0FBQUcsU0FBQSxJQUFBdW5FLEVBQUEsRUFBQXY3RCxHQUNBdzdELFNBQUEzbkUsS0FBQWdsRSxpQkFFQWhsRSxLQUFBMmtFLFFBQUEza0UsS0FBQXFrRSxTQUFBcmtFLEtBQUFza0UsYUFDQXRrRSxLQUFBRyxTQUFBeW5FLFVBQUE1bkUsS0FBQTRrRSxZQUFBaUQsZUFBQUMsY0FHQTluRSxLQUFBNjZELGNBQUE3NkQsS0FBQUcsU0FBQUcsU0FBQSxHQUFBUSxPQUNBZCxLQUFBK25FLGlCQUVBL25FLEtBQUFELFNBQUFJLFNBQUFILEtBQUFzakUsY0FBQXRqRSxLQUFBRyxTQUFBRSxNQUdBMm5FLGdCQTdRQSxTQTZRQWxuRSxHQUNBLE9BQUFKLEVBQUFDLE1BQUFYLEtBQUE0bEUsZUFBQTNrRSxTQUFBaVAsU0FBQXBQLEdBQUFJLFNBR0ErbUUsZUFqUkEsU0FpUkFwbkUsR0FDQSxPQUFBQSxFQUFBNEIsU0FBQSxHQUFBNUIsRUFBQUMsT0FBQSxHQUFBeTJCLGNBQUExMkIsRUFBQUMsT0FBQWdnQixNQUFBLEtBSUFwTyxPQUVBOHlELGtCQUZBLFNBRUEwQyxHQUlBQSxHQUFBLFlBQUFsb0UsS0FBQTY2RCxnQkFDQTc2RCxLQUFBNjZELGNBQUE3NkQsS0FBQU0sU0FBQSxHQUFBUSxPQUNBLFlBQUFkLEtBQUE2NkQsZ0JBQ0E3NkQsS0FBQTY2RCxjQUFBNzZELEtBQUFNLFNBQUEsR0FBQVEsVUFLQSs1RCxjQWRBLFNBY0FoNkQsR0FHQWIsS0FBQTJOLE1BQUFXLE1BQUEsMEJBQUF6TixLQUtBMkwsTUFBQSxXQUNBLElBQUFzNEMsRUFBQTlrRCxLQUVBQSxLQUFBeWxELE1BQUExdEMsS0FBQStvQyxNQUFBOWdELEtBQUF5bEQsT0FDQXpsRCxLQUFBOGpFLFlBQUEvckQsS0FBQStvQyxNQUFBL29DLEtBQUFDLFVBQUExTCxTQUFBd0YsUUFBQWd5RCxjQUVBOWpFLEtBQUFxTSxVQUNBck0sS0FBQXFNLFFBQUEwTCxLQUFBK29DLE1BQUE5Z0QsS0FBQXFNLFVBR0FyTSxLQUFBOGxFLGVBQ0E5bEUsS0FBQTB4RCxjQUVBMXhELEtBQUFta0UsWUFBQW5rRSxLQUFBdW5FLHdCQUNBLGFBQUF2bkUsS0FBQW1rRSxZQUNBbmtFLEtBQUFELFNBQUF5ZCxVQUFBLEVBQ0EsWUFBQXhkLEtBQUFta0UsY0FDQW5rRSxLQUFBRCxTQUFBc21FLFNBQUEsR0FHQXJtRSxLQUFBK21FLHlCQUVBLElBQUFvQixFQUFBLEtBQ0Fub0UsS0FBQW1sRSxzQkFDQW5sRSxLQUFBMk4sTUFBQXk2RCxlQUFBLEVBR0Fwb0UsS0FBQXFvRSxJQUFBLHdCQUNBcm9FLEtBQUFzbUUsY0FFQTZCLEVBQUFub0UsS0FBQWlOLE9BQUEsb0JBQUFxN0QsR0FDQXRvRSxLQUFBdW1FLGtCQUNBL3VELE1BQUEsT0FJQXhYLEtBQUFxb0UsSUFBQSxnQ0FFQUYsTUFHQW5vRSxLQUFBcW9FLElBQUEsMEJBQUFsb0UsR0FDQUgsS0FBQUcsV0FDQUgsS0FBQWtqRCxTQUFBLElBR0FsakQsS0FBQWtyRCxVQUNBMk8sVUFBQVUsV0FBQSxpQkFBQTVwRCxHQUNBQSxFQUFBNnBELGlCQUNBMVYsRUFBQXFoQix1QkFHQXRNLFVBQUFVLFdBQUEsc0JBQUE1cEQsR0FDQUEsRUFBQTZwRCxpQkFDQTFWLEVBQUFpaEIsK0ZDeHRCQWxtRSxFQUFBLEdBQ0lzTSxLQUFNLFdBQ0YsT0FDSW84RCxjQUNBdjJELGtCQUlSdEYsU0FDSTg3RCxtQkFESyxXQUNnQixJQUFBL25FLEVBQUFULEtBQ2pCQSxLQUFLdW9FLFdBQVc1b0UsUUFBUSxTQUFBOG9FLEdBQ3BCQSxFQUFVQyxPQUFTRCxFQUFVRSxTQUFTbG9FLEVBQUtxakUsZUFHL0M5akUsS0FBS2dTLGFBQWV0UixFQUFFQyxNQUFNWCxLQUFLRyxTQUFTWSxVQUNyQ2tYLE9BQU8sU0FBQWpXLEdBQUEsT0FBVXZCLEVBQUtzUixVQUFVL1AsS0FDaENhLElBQUksU0FBQWIsR0FBQSxPQUFTQSxFQUFNM0IsT0FDbkJhLFNBR1Q2USxVQUFXLFNBQVMvUCxHQUNoQixJQUFNeW1FLEVBQVl6b0UsS0FBS3VvRSxXQUFXL2xFLEtBQzlCLFNBQUFpbUUsR0FBQSxPQUFhQSxFQUFVajZELEtBQU94TSxFQUFNM0IsT0FHeEMsWUFBa0I4WCxJQUFkc3dELFNBSW9CdHdELElBQXBCblcsRUFBTTRtRSxXQUNHSCxFQUFVQyxPQUdoQkQsRUFBVUMsU0FHckJYLGVBQWdCLFdBQVcsSUFBQWxtRSxFQUFBN0IsS0FDdkJBLEtBQUt1b0UsV0FBYXZvRSxLQUFLRyxTQUFTWSxTQUMzQmtYLE9BQU8sU0FBQWpXLEdBQUEsWUFBNkJtVyxJQUFwQm5XLEVBQU02bUUsZ0JBQStDMXdELElBQXBCblcsRUFBTTRtRSxZQUN2RC9sRSxJQUFJLFNBQUFiLEdBQUEsT0FBUyxJQUFJOG1FLEVBQUEsRUFBVTltRSxFQUFNM0IsS0FBTXdCLEVBQUs0bUUsVUFBVXptRSxNQUUzRGhDLEtBQUt3b0UscUJBRUx4b0UsS0FBS2lOLE9BQU8sY0FBZSxTQUFBZCxHQUFBLE9BQVF0SyxFQUFLMm1FLG1CQUFtQnI4RCxLQUFTcUwsTUFBTSxLQUc5RWl4RCxVQUFXLFNBQVN6bUUsR0FDaEIsWUFBd0JtVyxJQUFwQm5XLEVBQU02bUUsVUFDQzdtRSxFQUFNNm1FLFVBR1Y3bUUsRUFBTTRtRSx1VENyRG5CRyxhQUVGLFNBQUFBLEVBQVl2NkQsRUFBSXc2RCxnR0FBTTVvRSxDQUFBSixLQUFBK29FLEdBQ2xCL29FLEtBQUt3TyxHQUFLQSxFQUNWeE8sS0FBS2dwRSxLQUFPQSxFQUNaaHBFLEtBQUswb0UsUUFBUyxFQUNkMW9FLEtBQUsyb0UsU0FBVzNvRSxLQUFLaXBFLDZEQUlyQixNQUE0QixpQkFBZGpwRSxLQUFLZ3BFLHNDQUluQixRQUFNMThELFNBQVNpOEQsWUFFUmo4RCxTQUFTaThELFdBQVc3K0QsZUFBZTFKLEtBQUtncEUsMENBSS9DLE9BQUlocEUsS0FBS2twRSxpQkFBb0JscEUsS0FBSysyRCxVQUM5QjM3QixRQUFRcG9CLE1BQVIsdUJBQXFDaFQsS0FBS2dwRSxLQUExQyw2QkFDTyxrQkFBTSxJQUdiaHBFLEtBQUtrcEUsZ0JBQWtCbHBFLEtBQUsrMkQsU0FDckJ6cUQsU0FBU2k4RCxXQUFXdm9FLEtBQUtncEUsTUFHN0IsU0FBVTc4RCxHQUNiLElBQUl1OEQsS0FFRVMsRUFBTTFwRSxPQUFPQyxLQUFLTSxLQUFLZ3BFLE1BQU0vd0QsT0FBTyxTQUFDclksR0FDdkMsT0FBT0EsRUFBSXdwRSxXQUFXLFNBRzFCLElBQUssSUFBSXBuRSxLQUFTaEMsS0FBS2dwRSxLQUFNLENBQ3pCLEdBQUlHLEVBQUk1bkUsU0FBU1MsR0FHYixHQUFJbUssRUFGWW5LLEVBQU0yMEQsT0FBTyxNQUVQMzJELEtBQUtncEUsS0FBS2huRSxHQUM1QixPQUFPLEdBSVRtbkUsRUFBSTVuRSxTQUFTUyxJQUFVb2xELE1BQU1PLFFBQVEzbkQsS0FBS2dwRSxLQUFLaG5FLElBQ2pEMG1FLEVBQU9ybkUsS0FBS3JCLEtBQUtncEUsS0FBS2huRSxHQUFPVCxTQUFTNEssRUFBS25LLEtBRWxCLGFBQXJCaEMsS0FBS2dwRSxLQUFLaG5FLEdBQ1YwbUUsRUFBT3JuRSxLQUFxQixPQUFoQjhLLEVBQUtuSyxJQUVqQjBtRSxFQUFPcm5FLEtBQUs4SyxFQUFLbkssS0FBV2hDLEtBQUtncEUsS0FBS2huRSxJQU1sRCxPQUFTMG1FLEVBQU9ubkUsVUFBUyxhQU1yQzFCLEVBQUEsbUJDL0RBWixFQUFBQyxRQUFBLG1uQkNBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBQyxFQUFBLEtBQ0FILEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsZ0hDK0U3Q1ksRUFBQSxTQUVBQyxPQUFBLDZDQUVBcU0sS0FKQSxXQUtBLE9BQ0FrOUQsa0JBQUEsSUFJQTdwRSxVQUVBOHBFLGFBRkEsV0FHQSxXQUFBdHBFLEtBQUFxTSxRQUFBMUosUUFHQTRtRSxnQkFOQSxXQU9BLE9BQUF2cEUsS0FBQXNwRSxjQUdBRSxtQkFWQSxXQVdBLE9BQUE5b0UsRUFBQThCLEtBQUF4QyxLQUFBcU0sU0FBQWhNLEtBQUFMLEtBQUFvTSxTQUFBNkksUUFLQXZJLFNBRUErOEQsWUFGQSxTQUVBcjlELEdBQ0EsT0FBQXBNLEtBQUEra0UsY0FFQTM0RCxFQUFBczlELGFBQUEsd0NBRkEsbURDMUhBenFFLEVBQUFDLFFBQUEsOGxDQ0FBLElBQUFMLEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsb0ZDUzdDWSxFQUFBLFNBRUE2VSxZQUNBazhDLGNBQUE1eEQsRUFBQSxJQUdBYyxPQUNBZSxRQUFBcEIsT0FDQVUsU0FBQVYsT0FDQTBNLEtBQUExTSxPQUNBNFMsT0FBQTVTLE9BQ0F1UyxhQUFBbzFDLE1BQ0FzTSxVQUFBakksUUFDQWpyRCxZQUFBa0IsS0FBQStwRCxRQUFBcnNELFNBQUEsR0FDQXcwRCxLQUFBbHlELEtBQUFqQyxPQUFBTCxhQUdBSSxVQUVBc0IsT0FGQSxXQUdBLE9BQUFkLEtBQUFhLFFBQUFDLFFBR0FDLE9BTkEsV0FPQSxPQUFBZixLQUFBYSxRQUFBRSx5QkM5Q0E5QixFQUFBQyxRQUFBLHlQQ0FBRCxFQUFBQyxRQUFBLHl1SENBQSxJQUFBTCxFQUFBQyxFQUNBQyxLQUNBRixFQUFBRyxFQUFBLEtBQ0FGLEVBQUFFLEVBQUEsS0FDQUMsRUFBQUMsUUFBQUwsTUFDQUksRUFBQUMsUUFBQUMsYUFBQUYsRUFBQUMsUUFBQUQsRUFBQUMsUUFBQUUsU0FDQSxJQUFBQyxFQUFBLG1CQUFBSixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBSSxVQUFBTCxFQUFBQyxRQUFBSSxZQUFvSEwsRUFBQUMsUUFDcEhKLElBQ0FPLEVBQUFFLFNBQUFULEdBRUFPLEVBQUFHLFdBQUFILEVBQUFHLGFBQ0FDLE9BQUFDLEtBQUFYLEdBQUFZLFFBQUEsU0FBQUMsR0FDQSxJQUFBWCxFQUFBRixFQUFBYSxHQUNBUCxFQUFBRyxTQUFBSSxHQUFBLFdBQTZDLE9BQUFYLGdHQ2tCN0NZLEVBQUEsU0FFQUMsT0FDQTZwRSxNQUFBbkksT0FDQW9JLElBQUE5c0MsUUFHQTN3QixLQUFBLFdBQ0EsT0FDQWczQyxTQUNBMG1CLE1BQUEsR0FDQWhnRSxTQUFBLEVBQ0FxNUMsU0FBQSxJQUlBeHVDLFlBQ0FvMUQsa0JBQUE5cUUsRUFBQSxNQUdBUSxVQUNBZ2tELFNBQUEsV0FDQSxPQUFBeGpELEtBQUFtakQsTUFBQXhnRCxPQUFBLEdBR0Fzb0QsUUFBQSxXQUNBLE9BQUFqckQsS0FBQTZwRSxRQUFBN3BFLEtBQUFrakQsU0FHQTZtQixRQUFBLFdBQ0EsUUFBQS9wRSxLQUFBNnBFLFFBQUE3cEUsS0FBQWtqRCxVQUlBeDJDLFNBQ0F1NkMsT0FBQSxXQUNBam5ELEtBQUE2cEUsT0FLQTdwRSxLQUFBa2pELFNBQUEsRUFFQWxqRCxLQUFBeVAsTUFBQXdELElBQUFqVCxLQUFBNHBFLElBQUFucUUsT0FBQTRDLFFBQUEybkUsRUFBQWhxRSxLQUFBNnBFLE9BQUE3cEUsS0FBQW1NLE9BQUF5RCxRQUFBLFNBQUF6RCxHQUNBbk0sS0FBQTZwRSxRQUNBN3BFLEtBQUFtakQsTUFBQW5qRCxLQUFBMnBFLE1BQUF4OUQsRUFBQTJVLE1BQUEsRUFBQTlnQixLQUFBMnBFLE9BQUF4OUQsRUFDQW5NLEtBQUE2SixTQUFBLEVBQ0E3SixLQUFBa2pELFNBQUEsSUFFQTZmLEtBQUEvaUUsUUFaQUEsS0FBQWlvQyxTQWVBQSxNQUFBLFdBQ0Fqb0MsS0FBQW1qRCxTQUNBbmpELEtBQUE2cEUsTUFBQSxHQUNBN3BFLEtBQUFrakQsU0FBQSxHQUdBK21CLFVBQUEsU0FBQXZ6RCxHQUNBMVcsS0FBQTZKLFFBQUE2TSxHQUdBbXNDLFNBQUEsU0FBQW5zQyxHQUNBLE9BQUExVyxLQUFBNkosU0FBQTZNLEdBR0EyQixNQUFBLFdBQ0E5QyxFQUFBLGtCQUFBOEMsU0FHQTZ4RCxJQUFBLFdBQ0FscUUsS0FBQXdqRCxXQUNBNXdDLE9BQUEzQixTQUFBazVELEtBQUFucUUsS0FBQW1qRCxNQUFBbmpELEtBQUE2SixTQUFBdWdFLFdBSUFDLEdBQUEsV0FDQXJxRSxLQUFBNkosUUFBQSxHQUFBN0osS0FBQTZKLFdBR0F5Z0UsS0FBQSxXQUNBdHFFLEtBQUE2SixRQUFBN0osS0FBQW1qRCxNQUFBeGdELE9BQUEsR0FBQTNDLEtBQUE2SixZQUlBMkMsTUFBQSxXQUNBeE0sS0FBQWlOLE9BQUEsaUJBQUFzOUQsRUFBQUMsR0FDQXhxRSxLQUFBaW5ELDRDQ3RIQSxJQUFBcG9ELEVBQUFDLEVBQ0FDLEtBQ0FGLEVBQUFHLEVBQUEsS0FDQUYsRUFBQUUsRUFBQSxLQUNBQyxFQUFBQyxRQUFBTCxNQUNBSSxFQUFBQyxRQUFBQyxhQUFBRixFQUFBQyxRQUFBRCxFQUFBQyxRQUFBRSxTQUNBLElBQUFDLEVBQUEsbUJBQUFKLEVBQUFDLFFBQUFELEVBQUFDLFFBQUFJLFVBQUFMLEVBQUFDLFFBQUFJLFlBQW9ITCxFQUFBQyxRQUNwSEosSUFDQU8sRUFBQUUsU0FBQVQsR0FFQU8sRUFBQUcsV0FBQUgsRUFBQUcsYUFDQUMsT0FBQUMsS0FBQVgsR0FBQVksUUFBQSxTQUFBQyxHQUNBLElBQUFYLEVBQUFGLEVBQUFhLEdBQ0FQLEVBQUFHLFNBQUFJLEdBQUEsV0FBNkMsT0FBQVgsb0ZDRTdDWSxFQUFBLFNBRUFDLE9BQUEsMkNBRUE0TSxTQUVBMjlELEdBQUEsV0FDQXJxRSxLQUFBeXFFLFFBR0FILEtBQUEsV0FDQXRxRSxLQUFBMHFFLFVBR0FSLElBQUEsV0FDQWxxRSxLQUFBMnFFLFNBR0ExaUMsTUFBQSxXQUNBam9DLEtBQUE0cUUsNEJDbENBM3JFLEVBQUFDLFFBQUEseU1DQUFELEVBQUFDLFFBQUEseW9CQ0FBRCxFQUFPQyxTQUVId1YsWUFDSW1zQyxZQUFlN2hELEVBQVEsS0FDdkI2ckUsY0FBZTdyRSxFQUFRLEtBQ3ZCc3hELFNBQVl0eEQsRUFBUSxLQUNwQjhyRSxLQUFROXJFLEVBQVEsS0FDaEIrckUsTUFBUy9yRSxFQUFRLE1BR3JCYyxPQUFRLFNBRVJxTSxLQUFNLFdBQ0YsT0FDSTYrRCxPQUNJbnFCLGFBQWlCNXJDLE1BQU8sY0FBZXduQyxPQUFRLFdBQy9Dd3VCLFlBQWdCaDJELE1BQU8sY0FBZXduQyxPQUFRLFdBQzlDNlQsVUFBY3I3QyxNQUFPLFdBQVl3bkMsT0FBUSxXQUN6Q3F1QixNQUFVNzFELE1BQU8sZ0JBQWlCd25DLE9BQVEsV0FDMUNzdUIsT0FBVzkxRCxNQUFPLFNBQVV3bkMsT0FBUSxZQUV4Q3l1QixZQUFhLGNBQ2JyRyxPQUFRLEtBQ1JzRyxlQUFlLElBSXZCeitELFNBQ0kwckQsU0FBVSxXQUNOcDRELEtBQUt5UCxNQUFNd0QsSUFBSSx1QkFBdUJyRCxRQUFRLFNBQVNDLEdBQy9DQSxFQUFTRCxRQUNUZ0QsT0FBTzNCLFNBQVdqUixLQUFLb3JFLE1BRXZCcHJFLEtBQUttckUsZUFBZ0IsS0FLakNsOEQsSUFBSyxTQUFTQSxHQUVWLElBQUkweUIsRUFBT3IxQixTQUFTc3dDLE9BQU96ckMsTUFBTSxLQUdqQyxPQUZBd3dCLEVBQUtuZSxNQUVFbWUsRUFBS3ZwQixLQUFLLEtBQU8sY0FBZ0JuSixJQUloRHVDLFFBQ0k2NUQscUJBQXNCLFNBQVM1dUIsR0FDM0J6OEMsS0FBS2dyRSxNQUFNbnFCLFlBQVlwRSxPQUFTQSxHQUVwQzZ1Qix1QkFBd0IsV0FDcEJ0ckUsS0FBS2tyRSxZQUFjLGNBRXZCSyxzQkFBdUIsV0FDbkJ2ckUsS0FBS2dyRSxNQUFNQyxXQUFXeHVCLE9BQVMsVUFDL0J6OEMsS0FBS2tyRSxZQUFjLFlBRXZCTSxvQkFBcUIsV0FDakJ4ckUsS0FBS2dyRSxNQUFNMWEsU0FBUzdULE9BQVMsVUFDN0J6OEMsS0FBS2tyRSxZQUFjLFFBRXZCTyxnQkFBaUIsU0FBU2o5RCxHQUN0QnhPLEtBQUtnckUsTUFBTUYsS0FBS3J1QixPQUFTLFVBQ3pCejhDLEtBQUs2a0UsT0FBU3IyRCxFQUNkeE8sS0FBS2tyRSxZQUFjLFNBRXZCUSxpQkFBa0IsV0FDZDFyRSxLQUFLbzRELGFBSWI1ckQsTUFBTywrQkN4RVh2TixFQUFPQyxTQUVISyxTQUFVUCxFQUFRLEtBRWxCbU4sS0FBTSxXQUNGLE9BQ0krMkMsU0FBUyxFQUNUdHpDLFFBQVMsS0FDVCs3RCxnQkFJUm5zRSxVQUNJb3NFLFFBQVMsV0FDTCxPQUFRNXJFLEtBQUtrakQsVUFBWWxqRCxLQUFLNFAsVUFJdENwRCxNQUFPLFdBQ0h4TSxLQUFLeVAsTUFBTXdELElBQUlqVCxLQUFLQyxRQUFRZ1AsSUFBSSxnQkFBZ0JXLFFBQVEsU0FBU0MsR0FDN0Q3UCxLQUFLNFAsUUFBVUMsRUFBU0QsUUFDeEI1UCxLQUFLMnJFLFdBQWE5N0QsRUFBUzg3RCxXQUMzQjNyRSxLQUFLa2pELFNBQVUsRUFFVGxqRCxLQUFLNFAsU0FJUDVQLEtBQUttVCxVQUFVLHFCQUFzQixXQUVyQzBqRCxXQUFXLFdBQ1A3MkQsS0FBS21ULFVBQVUseUJBQ2pCNHZELEtBQUsvaUUsTUFBTyxNQVBkQSxLQUFLbVQsVUFBVSxxQkFBc0IsOEJDekJyRGxVLEVBQUFDLFFBQUEsdWhCQ0FBRCxFQUFPQyxTQUVISyxTQUFVUCxFQUFRLEtBRWxCbU4sS0FBTSxXQUNGLE9BQ0krMkMsU0FBUyxFQUNUMm9CLE9BQU8sRUFDUGpzRSxJQUFLLEtBQ0xrc0UsY0FBYyxJQUl0QnRzRSxVQUNJdXNFLHVCQUF3QixXQUNwQixPQUFPcnBFLFVBQVUsK0JBQ2ZzcEUsU0FBWSx3Q0FDWkMsWUFBZSxpQ0FLekJ2L0QsU0FDSThRLFNBQVUsV0FDTnhkLEtBQUttVCxVQUFVLHdCQUduQncxRCxTQUFVLFdBQ04zb0UsS0FBS2tqRCxTQUFVLEVBRWZsakQsS0FBS3lQLE1BQU00MUMsS0FBS3JsRCxLQUFLQyxRQUFRZ1AsSUFBSSxZQUM3QnJQLElBQUtJLEtBQUtKLE1BQ1hnUSxRQUFRLFNBQVNDLEdBQ2hCN1AsS0FBSzRQLFFBQVVDLEVBQVNELFFBQ3hCNVAsS0FBS0osSUFBTWlRLEVBQVNqUSxJQUNwQkksS0FBS2tqRCxTQUFVLEVBRVhyekMsRUFBU2pRLE1BQ1RJLEtBQUs4ckUsY0FBZSxHQUdwQjlyRSxLQUFLNFAsVUFDTDVQLEtBQUs2ckUsT0FBUSxFQUNiN3JFLEtBQUttVCxVQUFVLG9CQUFxQixXQUVwQzBqRCxXQUFXLFdBQ1A3MkQsS0FBS3dkLFlBQ1B1bEQsS0FBSy9pRSxNQUFPLFVBTTlCd00sTUFBTyxXQUNIeE0sS0FBSzJvRSw0QkN0RGIxcEUsRUFBQUMsUUFBQSxpaUNDQUEsU0FBQXdCLEdBQUF6QixFQUFPQyxTQUVISyxTQUFVUCxFQUFRLEtBRWxCYyxPQUFRLFlBRVJxTSxLQUFNLFdBQ0YsT0FDSSsyQyxTQUFTLEVBQ1R0ekMsUUFBUyxLQUNUeW9CLE9BQU8sRUFDUGhzQixVQUNJRCxPQUFRLEtBQ1I4L0QsS0FBTSxRQUNON3JFLEtBQU0sVUFDTjRPLElBQUsrQixTQUFTQyxTQUFTazdELE9BQU8sTUFFbENDLFVBQVdwc0UsS0FBS3FzRSxpQkFJeEI3c0UsVUFDSU8sU0FBVSxXQUNOLE9BQ0lzNEIsTUFBT3I0QixLQUFLcTRCLE1BQ1poc0IsUUFBU3JNLEtBQUtxTSxRQUNkaWdFLFNBQVV0c0UsS0FBS3NzRSxTQUFTLE1BS3BDNS9ELFNBQ0l1cUQsT0FBUSxXQUNKajNELEtBQUtrakQsU0FBVSxFQUVmbGpELEtBQUt5UCxNQUFNNDFDLEtBQUtybEQsS0FBS0MsUUFBUWdQLElBQUksWUFBYWpQLEtBQUtELFVBQVU2UCxRQUFRLFNBQVNDLEdBQzFFN1AsS0FBS2tqRCxTQUFVLEVBQ2ZsakQsS0FBSzRQLFFBQVVDLEVBQVNELFFBRXBCNVAsS0FBSzRQLFNBQ0xpbkQsV0FBVyxXQUNQNzJELEtBQUttVCxVQUFVLHNCQUNqQjR2RCxLQUFLL2lFLE1BQU8sUUFLMUJxc0UsYUFoQkssV0FpQkQsSUFBSUQsS0FNSixPQUpBMXJFLEVBQUVxQixLQUFLL0MsRUFBUSxLQUFnQixTQUFDdXRFLEdBQzVCSCxFQUFVL3FFLE1BQU9rTCxLQUFNZ2dFLEVBQUlyckUsTUFBT3FyRSxNQUcvQkgsbUNDdERuQm50RSxFQUFBQyxRQUFBLCtpQ0NBQUQsRUFBT0MsU0FDSCxNQUNBLGlCQUNBLGVBQ0EscUJBQ0EsaUJBQ0EsZ0JBQ0EsZ0JBQ0EsZ0JBQ0EsZ0JBQ0EsZ0JBQ0Esa0JBQ0EscUJBQ0EsbUJBQ0EsZUFDQSxvQkFDQSxlQUNBLGlCQUNBLGVBQ0EsdUJBQ0Esa0JBQ0EsZ0JBQ0Esa0JBQ0Esa0JBQ0Esa0JBQ0EsZ0JBQ0Esc0JBQ0EsY0FDQSxpQkFDQSxrQkFDQSxnQkFDQSxrQkFDQSxlQUNBLG9CQUNBLGNBQ0EsZ0JBQ0Esb0JBQ0EsZ0JBQ0EsZ0JBQ0EsZ0JBQ0EsZ0JBQ0EsaUJBQ0EsbUJBQ0Esa0JBQ0EsaUJBQ0Esa0JBQ0EsZ0JBQ0Esb0JBQ0EscUJBQ0Esb0JBQ0Esa0JBQ0EsaUJBQ0EsZUFDQSxrQkFDQSxlQUNBLG9CQUNBLG1CQUNBLGtCQUNBLG9CQUNBLGlDQUNBLDhCQUNBLDRCQUNBLDBCQUNBLDZCQUNBLDRCQUNBLGlDQUNBLDBCQUNBLDZCQUNBLDZCQUNBLDRCQUNBLDRCQUNBLGdCQUNBLG1CQUNBLG1CQUNBLGdCQUNBLHlCQUNBLG1CQUNBLGdCQUNBLGlCQUNBLHVCQUNBLG9CQUNBLGlCQUNBLGdCQUNBLHdCQUNBLHVCQUNBLGlCQUNBLGtCQUNBLGtCQUNBLGlCQUNBLGtCQUNBLG9CQUNBLHFCQUNBLGtCQUNBLGlCQUNBLGtCQUNBLHVCQUNBLGlCQUNBLHVCQUNBLGlCQUNBLGtCQUNBLG1CQUNBLG1CQUNBLG1CQUNBLHNCQUNBLHNCQUNBLG9CQUNBLG9CQUNBLGtCQUNBLG9CQUNBLHFCQUNBLGtCQUNBLHFCQUNBLG9CQUNBLG9CQUNBLGlCQUNBLGtCQUNBLGlCQUNBLHFCQUNBLCtCQUNBLHVCQUNBLDBCQUNBLDZCQUNBLDRCQUNBLHdCQUNBLDRCQUNBLDBCQUNBLGlCQUNBLGtCQUNBLGtCQUNBLGlCQUNBLDhCQUNBLDhCQUNBLHFCQUNBLGlCQUNBLGVBQ0Esc0JBQ0Esd0JBQ0EsaUJBQ0Esa0JBQ0EsaUJBQ0Esa0JBQ0EscUJBQ0Esb0JBQ0EsbUJBQ0Esb0JBQ0EsaUJBQ0EscUJBQ0Esc0JBQ0EsbUJBQ0Esa0JBQ0Esb0JBQ0EscUJBQ0EscUJBQ0EsaUJBQ0EsbUJBQ0Esa0JBQ0EsZUFDQSxrQkFDQSw4QkFDQSw4QkFDQSxpQ0FDQSxrQkFD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LFFBSXRFM0MsS0FBS3lpRCxHQUFHZ1gsVUFBVSxrQkFBTWg1RCxFQUFLNlUsR0FBRytDLCtFQ2ZwQ3hZLEVBQUEsR0FFSXM3QyxRQUFTLFdBRVQ4TCxPQUpXLFdBS0RqbkQsS0FBS203QyxPQUFPeXlELFVBRWxCNXRHLEtBQUtzVixHQUFHdTRGLGFBQWEsUUFBUzd0RyxLQUFLbTdDLE9BQU95eUQsU0FFMUNFLElBQU05dEcsS0FBS3NWLElBQ1A4N0MsS0FBTSxRQUNOMjhDLGFBQWEsRUFDYjFCLE1BQU8sUUFDUDJCLGFBQWEsMERDYnpCbnVHLEVBQUEsR0FDSWtqRSxLQUFNLFdBQ0ZsTSxXQUFXLFdBQ1B3OEIsSUFBU3J6RixLQUFLc1YsS0FDaEJ5dEQsS0FBSy9pRSxNQUFPIiwiZmlsZSI6Ii9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2Rpc3QvanMvYm9vdHN0cmFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWRhcHRzUmVsYXRlRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQWRhcHRzUmVsYXRlRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZpZWxkcy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZpZWxkcy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvRmllbGRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWydjb25maWcnXSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgZm9ybURhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcGFyZW50LiRwYXJlbnQuJHBhcmVudC4kcGFyZW50LmZvcm1EYXRhOyAvLyBjb3VsZCByZWFsbHkgZG8gd2l0aCB2dWUyK3Z1ZXggcmlnaHQgYWJvdXQgbm93LlxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvTWV0YUZpZWxkdHlwZS5qcyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NlbGVjdG9yLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2VsZWN0b3IudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvU2VsZWN0b3IudnVlXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9VcGxvYWRlci52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1VwbG9hZGVyLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL1VwbG9hZGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiY2xhc3MgRmllbGRzZXQge1xuXG4gICAgY29uc3RydWN0b3IoZmllbGRzZXQpIHtcbiAgICAgICAgdGhpcy5maWVsZHNldCA9IGZpZWxkc2V0O1xuICAgICAgICB0aGlzLm5hbWUgPSBmaWVsZHNldC5uYW1lO1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gdGhpcy5wYXJzZVNlY3Rpb25zKGZpZWxkc2V0LnNlY3Rpb25zKTtcbiAgICAgICAgdGhpcy5tZXRhRmllbGRzID0gW107XG4gICAgfVxuXG4gICAgcGFyc2VTZWN0aW9ucyhzZWN0aW9ucykge1xuICAgICAgICByZXR1cm4gXy5jaGFpbihzZWN0aW9ucykubWFwT2JqZWN0KChzZWN0aW9uLCBoYW5kbGUpID0+IHtcbiAgICAgICAgICAgIHNlY3Rpb24uaGFuZGxlID0gaGFuZGxlO1xuICAgICAgICAgICAgc2VjdGlvbi5maWVsZHMgPSB0aGlzLnBhcnNlRmllbGRzKHNlY3Rpb24uZmllbGRzKTtcbiAgICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgICB9KS52YWx1ZXMoKS52YWx1ZSgpO1xuICAgIH1cblxuICAgIHBhcnNlRmllbGRzKGZpZWxkcykge1xuICAgICAgICByZXR1cm4gXy5jaGFpbihmaWVsZHMpLm1hcE9iamVjdCgoY29uZmlnLCBoYW5kbGUpID0+IHtcbiAgICAgICAgICAgIGNvbmZpZy5uYW1lID0gaGFuZGxlO1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSkudmFsdWVzKCkudmFsdWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgc2x1ZyBmaWVsZCB3b24ndCBiZSBzaG93bi5cbiAgICAgKiBUaGlzIGxldHMgeW91IHNwZWNpZnkgd2hldGhlciBvciBub3QgaXQgc2hvdWxkIGJlIHNob3duLlxuICAgICAqL1xuICAgIHNob3dTbHVnKHNob3cpIHtcbiAgICAgICAgaWYgKHNob3cpIHRoaXMubWV0YUZpZWxkcy5wdXNoKCdzbHVnJyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBkYXRlIGZpZWxkIHdvbid0IGJlIHNob3duLlxuICAgICAqIFRoaXMgbGV0cyB5b3Ugc3BlY2lmeSB3aGV0aGVyIG9yIG5vdCBpdCBzaG91bGQgYmUgc2hvd24uXG4gICAgICovXG4gICAgc2hvd0RhdGUoc2hvdykge1xuICAgICAgICBpZiAoc2hvdykgdGhpcy5tZXRhRmllbGRzLnB1c2goJ2RhdGUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxhY2UgYSB0aXRsZSBmaWVsZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmaXJzdCBzZWN0aW9uXG4gICAgICogaWYgaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBwbGFjZWQgc29tZXdoZXJlIGVsc2UuXG4gICAgICovXG4gICAgcHJlcGVuZFRpdGxlKCkge1xuICAgICAgICBpZiAoISB0aGlzLmZpZWxkc0luU2VjdGlvbnMoKS5pbmNsdWRlcygndGl0bGUnKSkge1xuICAgICAgICAgICAgdGhpcy5maXJzdFNlY3Rpb25GaWVsZHMoKS51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICBuYW1lOiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnM6IG51bGwsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVwZW5kIGFueSByZXF1aXJlZCBtZXRhIGZpZWxkcyB0byB0aGUgc3RhcnQgb2YgdGhlIHNpZGViYXIuXG4gICAgICovXG4gICAgcHJlcGVuZE1ldGEoKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlU2lkZWJhcigpO1xuXG4gICAgICAgIGxldCBmaWVsZHMgPSB0aGlzLmZpZWxkc0luU2VjdGlvbnMoKTtcblxuICAgICAgICBfLmVhY2godGhpcy5tZXRhRmllbGRzLCBmaWVsZCA9PiB7XG4gICAgICAgICAgICBpZiAoIWZpZWxkcy5pbmNsdWRlcyhmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hTaWRlYmFyRmllbGQoeyBuYW1lOiBmaWVsZCwgdHlwZTogZmllbGQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVtb3ZlRW1wdHlTaWRlYmFyKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVzaCBhIGZpZWxkIGludG8gdGhlIHNpZGViYXJcbiAgICAgKi9cbiAgICBwdXNoU2lkZWJhckZpZWxkKGNvbmZpZykge1xuICAgICAgICBsZXQgc2lkZWJhciA9IHRoaXMuc2lkZWJhclNlY3Rpb25GaWVsZHMoKTtcblxuICAgICAgICBsZXQgZmllbGQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGlzTWV0YTogdHJ1ZSxcbiAgICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgICBsb2NhbGl6YWJsZTogdHJ1ZVxuICAgICAgICB9LCBjb25maWcgfHwge30pO1xuXG4gICAgICAgIHNpZGViYXIudW5zaGlmdChmaWVsZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3VzdG9taXppbmcgdGhlIHNpZGViYXIgaXMgbm90IGEgcmVxdWlyZW1lbnQsIGJ1dCB3ZSBleHBlY3Qgb25lIHRvXG4gICAgICogZXhpc3QuIElmIGl0J3Mgbm90IGFscmVhZHkgZGVmaW5lZCwgd2UnbGwgY3JlYXRlIGEgYmxhbmsgb25lIGhlcmUuXG4gICAgICovXG4gICAgZW5zdXJlU2lkZWJhcigpIHtcbiAgICAgICAgY29uc3Qgc2lkZWJhciA9IF8uZmluZCh0aGlzLnNlY3Rpb25zLCB7IGhhbmRsZTogJ3NpZGViYXInIH0pO1xuXG4gICAgICAgIGlmICghIHNpZGViYXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvbnMucHVzaCh7IGhhbmRsZTogJ3NpZGViYXInLCBkaXNwbGF5OiB0cmFuc2xhdGUoJ2NwLm1ldGEnKSwgZmllbGRzOiBbXSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0J3MgcG9zc2libGUgdGhhdCBhbGwgdGhlIGZpZWxkcyB0aGF0IHdvdWxkIG5vcm1hbGx5IGJlIGluIHRoZVxuICAgICAqIHNpZGViYXIgaGF2ZSBiZWVuIHBsYWNlZCBpbiBvdGhlciBzZWN0aW9ucywgcmVzdWx0aW5nIGluIGFuXG4gICAgICogZW1wdHkgc2lkZWJhci4gSWYgaXQncyBlbXB0eSwgd2UnbGwganVzdCBnZXQgcmlkIG9mIGl0LlxuICAgICAqL1xuICAgIHJlbW92ZUVtcHR5U2lkZWJhcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2lkZWJhclNlY3Rpb25GaWVsZHMoKS5sZW5ndGggPiAwKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucyA9IF8ucmVqZWN0KHRoaXMuc2VjdGlvbnMsIHNlY3Rpb24gPT4gc2VjdGlvbi5oYW5kbGUgPT0gJ3NpZGViYXInKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIG5hbWVzIG9mIGZpZWxkcyB0aGF0IGhhdmUgYmVlbiBwbGFjZWQgaW50byBhIHNlY3Rpb24uXG4gICAgICovXG4gICAgZmllbGRzSW5TZWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIF8uY2hhaW4odGhpcy5zZWN0aW9ucykubWFwKHNlY3Rpb24gPT4gc2VjdGlvbi5maWVsZHMpLmZsYXR0ZW4oKS5wbHVjaygnbmFtZScpLnZhbHVlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmaWVsZHMgdGhhdCBhcmUgaW4gdGhlIGZpcnN0IHNlY3Rpb24uXG4gICAgICovXG4gICAgZmlyc3RTZWN0aW9uRmllbGRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWN0aW9uc1swXS5maWVsZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmaWVsZHMgdGhhdCBhcmUgaW4gdGhlIHNpZGViYXIuXG4gICAgICovXG4gICAgc2lkZWJhclNlY3Rpb25GaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBfLmZpbmQodGhpcy5zZWN0aW9ucywgeyBoYW5kbGU6ICdzaWRlYmFyJyB9KS5maWVsZHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCB0aGUgZmllbGRzIGZyb20gYWxsIHRoZSBzZWN0aW9ucy5cbiAgICAgKi9cbiAgICBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBfLmNoYWluKHRoaXMuc2VjdGlvbnMpLnBsdWNrKCdmaWVsZHMnKS5mbGF0dGVuKCkudmFsdWUoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmllbGRzZXQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9GaWVsZHNldC5qcyIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgaHRtbENvbmZpZyA9IHtcbiAgYXV0b1NlbGZDbG9zZXJzOiB7J2FyZWEnOiB0cnVlLCAnYmFzZSc6IHRydWUsICdicic6IHRydWUsICdjb2wnOiB0cnVlLCAnY29tbWFuZCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICdlbWJlZCc6IHRydWUsICdmcmFtZSc6IHRydWUsICdocic6IHRydWUsICdpbWcnOiB0cnVlLCAnaW5wdXQnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAna2V5Z2VuJzogdHJ1ZSwgJ2xpbmsnOiB0cnVlLCAnbWV0YSc6IHRydWUsICdwYXJhbSc6IHRydWUsICdzb3VyY2UnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAndHJhY2snOiB0cnVlLCAnd2JyJzogdHJ1ZSwgJ21lbnVpdGVtJzogdHJ1ZX0sXG4gIGltcGxpY2l0bHlDbG9zZWQ6IHsnZGQnOiB0cnVlLCAnbGknOiB0cnVlLCAnb3B0Z3JvdXAnOiB0cnVlLCAnb3B0aW9uJzogdHJ1ZSwgJ3AnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgJ3JwJzogdHJ1ZSwgJ3J0JzogdHJ1ZSwgJ3Rib2R5JzogdHJ1ZSwgJ3RkJzogdHJ1ZSwgJ3Rmb290JzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICd0aCc6IHRydWUsICd0cic6IHRydWV9LFxuICBjb250ZXh0R3JhYmJlcnM6IHtcbiAgICAnZGQnOiB7J2RkJzogdHJ1ZSwgJ2R0JzogdHJ1ZX0sXG4gICAgJ2R0JzogeydkZCc6IHRydWUsICdkdCc6IHRydWV9LFxuICAgICdsaSc6IHsnbGknOiB0cnVlfSxcbiAgICAnb3B0aW9uJzogeydvcHRpb24nOiB0cnVlLCAnb3B0Z3JvdXAnOiB0cnVlfSxcbiAgICAnb3B0Z3JvdXAnOiB7J29wdGdyb3VwJzogdHJ1ZX0sXG4gICAgJ3AnOiB7J2FkZHJlc3MnOiB0cnVlLCAnYXJ0aWNsZSc6IHRydWUsICdhc2lkZSc6IHRydWUsICdibG9ja3F1b3RlJzogdHJ1ZSwgJ2Rpcic6IHRydWUsXG4gICAgICAgICAgJ2Rpdic6IHRydWUsICdkbCc6IHRydWUsICdmaWVsZHNldCc6IHRydWUsICdmb290ZXInOiB0cnVlLCAnZm9ybSc6IHRydWUsXG4gICAgICAgICAgJ2gxJzogdHJ1ZSwgJ2gyJzogdHJ1ZSwgJ2gzJzogdHJ1ZSwgJ2g0JzogdHJ1ZSwgJ2g1JzogdHJ1ZSwgJ2g2JzogdHJ1ZSxcbiAgICAgICAgICAnaGVhZGVyJzogdHJ1ZSwgJ2hncm91cCc6IHRydWUsICdocic6IHRydWUsICdtZW51JzogdHJ1ZSwgJ25hdic6IHRydWUsICdvbCc6IHRydWUsXG4gICAgICAgICAgJ3AnOiB0cnVlLCAncHJlJzogdHJ1ZSwgJ3NlY3Rpb24nOiB0cnVlLCAndGFibGUnOiB0cnVlLCAndWwnOiB0cnVlfSxcbiAgICAncnAnOiB7J3JwJzogdHJ1ZSwgJ3J0JzogdHJ1ZX0sXG4gICAgJ3J0JzogeydycCc6IHRydWUsICdydCc6IHRydWV9LFxuICAgICd0Ym9keSc6IHsndGJvZHknOiB0cnVlLCAndGZvb3QnOiB0cnVlfSxcbiAgICAndGQnOiB7J3RkJzogdHJ1ZSwgJ3RoJzogdHJ1ZX0sXG4gICAgJ3Rmb290Jzogeyd0Ym9keSc6IHRydWV9LFxuICAgICd0aCc6IHsndGQnOiB0cnVlLCAndGgnOiB0cnVlfSxcbiAgICAndGhlYWQnOiB7J3Rib2R5JzogdHJ1ZSwgJ3Rmb290JzogdHJ1ZX0sXG4gICAgJ3RyJzogeyd0cic6IHRydWV9XG4gIH0sXG4gIGRvTm90SW5kZW50OiB7XCJwcmVcIjogdHJ1ZX0sXG4gIGFsbG93VW5xdW90ZWQ6IHRydWUsXG4gIGFsbG93TWlzc2luZzogdHJ1ZSxcbiAgY2FzZUZvbGQ6IHRydWVcbn1cblxudmFyIHhtbENvbmZpZyA9IHtcbiAgYXV0b1NlbGZDbG9zZXJzOiB7fSxcbiAgaW1wbGljaXRseUNsb3NlZDoge30sXG4gIGNvbnRleHRHcmFiYmVyczoge30sXG4gIGRvTm90SW5kZW50OiB7fSxcbiAgYWxsb3dVbnF1b3RlZDogZmFsc2UsXG4gIGFsbG93TWlzc2luZzogZmFsc2UsXG4gIGFsbG93TWlzc2luZ1RhZ05hbWU6IGZhbHNlLFxuICBjYXNlRm9sZDogZmFsc2Vcbn1cblxuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwieG1sXCIsIGZ1bmN0aW9uKGVkaXRvckNvbmYsIGNvbmZpZ18pIHtcbiAgdmFyIGluZGVudFVuaXQgPSBlZGl0b3JDb25mLmluZGVudFVuaXRcbiAgdmFyIGNvbmZpZyA9IHt9XG4gIHZhciBkZWZhdWx0cyA9IGNvbmZpZ18uaHRtbE1vZGUgPyBodG1sQ29uZmlnIDogeG1sQ29uZmlnXG4gIGZvciAodmFyIHByb3AgaW4gZGVmYXVsdHMpIGNvbmZpZ1twcm9wXSA9IGRlZmF1bHRzW3Byb3BdXG4gIGZvciAodmFyIHByb3AgaW4gY29uZmlnXykgY29uZmlnW3Byb3BdID0gY29uZmlnX1twcm9wXVxuXG4gIC8vIFJldHVybiB2YXJpYWJsZXMgZm9yIHRva2VuaXplcnNcbiAgdmFyIHR5cGUsIHNldFN0eWxlO1xuXG4gIGZ1bmN0aW9uIGluVGV4dChzdHJlYW0sIHN0YXRlKSB7XG4gICAgZnVuY3Rpb24gY2hhaW4ocGFyc2VyKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHBhcnNlcjtcbiAgICAgIHJldHVybiBwYXJzZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcbiAgICBpZiAoY2ggPT0gXCI8XCIpIHtcbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiIVwiKSkge1xuICAgICAgICBpZiAoc3RyZWFtLmVhdChcIltcIikpIHtcbiAgICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKFwiQ0RBVEFbXCIpKSByZXR1cm4gY2hhaW4oaW5CbG9jayhcImF0b21cIiwgXCJdXT5cIikpO1xuICAgICAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKFwiLS1cIikpIHtcbiAgICAgICAgICByZXR1cm4gY2hhaW4oaW5CbG9jayhcImNvbW1lbnRcIiwgXCItLT5cIikpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaChcIkRPQ1RZUEVcIiwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXC5fXFwtXS8pO1xuICAgICAgICAgIHJldHVybiBjaGFpbihkb2N0eXBlKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJlYW0uZWF0KFwiP1wiKSkge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXC5fXFwtXS8pO1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IGluQmxvY2soXCJtZXRhXCIsIFwiPz5cIik7XG4gICAgICAgIHJldHVybiBcIm1ldGFcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSBzdHJlYW0uZWF0KFwiL1wiKSA/IFwiY2xvc2VUYWdcIiA6IFwib3BlblRhZ1wiO1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IGluVGFnO1xuICAgICAgICByZXR1cm4gXCJ0YWcgYnJhY2tldFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCImXCIpIHtcbiAgICAgIHZhciBvaztcbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiI1wiKSkge1xuICAgICAgICBpZiAoc3RyZWFtLmVhdChcInhcIikpIHtcbiAgICAgICAgICBvayA9IHN0cmVhbS5lYXRXaGlsZSgvW2EtZkEtRlxcZF0vKSAmJiBzdHJlYW0uZWF0KFwiO1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvayA9IHN0cmVhbS5lYXRXaGlsZSgvW1xcZF0vKSAmJiBzdHJlYW0uZWF0KFwiO1wiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2sgPSBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXC5cXC06XS8pICYmIHN0cmVhbS5lYXQoXCI7XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9rID8gXCJhdG9tXCIgOiBcImVycm9yXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW14mPF0vKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBpblRleHQuaXNJblRleHQgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIGluVGFnKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpO1xuICAgIGlmIChjaCA9PSBcIj5cIiB8fCAoY2ggPT0gXCIvXCIgJiYgc3RyZWFtLmVhdChcIj5cIikpKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IGluVGV4dDtcbiAgICAgIHR5cGUgPSBjaCA9PSBcIj5cIiA/IFwiZW5kVGFnXCIgOiBcInNlbGZjbG9zZVRhZ1wiO1xuICAgICAgcmV0dXJuIFwidGFnIGJyYWNrZXRcIjtcbiAgICB9IGVsc2UgaWYgKGNoID09IFwiPVwiKSB7XG4gICAgICB0eXBlID0gXCJlcXVhbHNcIjtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCI8XCIpIHtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gaW5UZXh0O1xuICAgICAgc3RhdGUuc3RhdGUgPSBiYXNlU3RhdGU7XG4gICAgICBzdGF0ZS50YWdOYW1lID0gc3RhdGUudGFnU3RhcnQgPSBudWxsO1xuICAgICAgdmFyIG5leHQgPSBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHJldHVybiBuZXh0ID8gbmV4dCArIFwiIHRhZyBlcnJvclwiIDogXCJ0YWcgZXJyb3JcIjtcbiAgICB9IGVsc2UgaWYgKC9bXFwnXFxcIl0vLnRlc3QoY2gpKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IGluQXR0cmlidXRlKGNoKTtcbiAgICAgIHN0YXRlLnN0cmluZ1N0YXJ0Q29sID0gc3RyZWFtLmNvbHVtbigpO1xuICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJlYW0ubWF0Y2goL15bXlxcc1xcdTAwYTA9PD5cXFwiXFwnXSpbXlxcc1xcdTAwYTA9PD5cXFwiXFwnXFwvXS8pO1xuICAgICAgcmV0dXJuIFwid29yZFwiO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluQXR0cmlidXRlKHF1b3RlKSB7XG4gICAgdmFyIGNsb3N1cmUgPSBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB3aGlsZSAoIXN0cmVhbS5lb2woKSkge1xuICAgICAgICBpZiAoc3RyZWFtLm5leHQoKSA9PSBxdW90ZSkge1xuICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gaW5UYWc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgIH07XG4gICAgY2xvc3VyZS5pc0luQXR0cmlidXRlID0gdHJ1ZTtcbiAgICByZXR1cm4gY2xvc3VyZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluQmxvY2soc3R5bGUsIHRlcm1pbmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgd2hpbGUgKCFzdHJlYW0uZW9sKCkpIHtcbiAgICAgICAgaWYgKHN0cmVhbS5tYXRjaCh0ZXJtaW5hdG9yKSkge1xuICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gaW5UZXh0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkb2N0eXBlKGRlcHRoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBjaDtcbiAgICAgIHdoaWxlICgoY2ggPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChjaCA9PSBcIjxcIikge1xuICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gZG9jdHlwZShkZXB0aCArIDEpO1xuICAgICAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PSBcIj5cIikge1xuICAgICAgICAgIGlmIChkZXB0aCA9PSAxKSB7XG4gICAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IGluVGV4dDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IGRvY3R5cGUoZGVwdGggLSAxKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBcIm1ldGFcIjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dChzdGF0ZSwgdGFnTmFtZSwgc3RhcnRPZkxpbmUpIHtcbiAgICB0aGlzLnByZXYgPSBzdGF0ZS5jb250ZXh0O1xuICAgIHRoaXMudGFnTmFtZSA9IHRhZ05hbWU7XG4gICAgdGhpcy5pbmRlbnQgPSBzdGF0ZS5pbmRlbnRlZDtcbiAgICB0aGlzLnN0YXJ0T2ZMaW5lID0gc3RhcnRPZkxpbmU7XG4gICAgaWYgKGNvbmZpZy5kb05vdEluZGVudC5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSB8fCAoc3RhdGUuY29udGV4dCAmJiBzdGF0ZS5jb250ZXh0Lm5vSW5kZW50KSlcbiAgICAgIHRoaXMubm9JbmRlbnQgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHBvcENvbnRleHQoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuY29udGV4dCkgc3RhdGUuY29udGV4dCA9IHN0YXRlLmNvbnRleHQucHJldjtcbiAgfVxuICBmdW5jdGlvbiBtYXliZVBvcENvbnRleHQoc3RhdGUsIG5leHRUYWdOYW1lKSB7XG4gICAgdmFyIHBhcmVudFRhZ05hbWU7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICghc3RhdGUuY29udGV4dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYXJlbnRUYWdOYW1lID0gc3RhdGUuY29udGV4dC50YWdOYW1lO1xuICAgICAgaWYgKCFjb25maWcuY29udGV4dEdyYWJiZXJzLmhhc093blByb3BlcnR5KHBhcmVudFRhZ05hbWUpIHx8XG4gICAgICAgICAgIWNvbmZpZy5jb250ZXh0R3JhYmJlcnNbcGFyZW50VGFnTmFtZV0uaGFzT3duUHJvcGVydHkobmV4dFRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBvcENvbnRleHQoc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJhc2VTdGF0ZSh0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJvcGVuVGFnXCIpIHtcbiAgICAgIHN0YXRlLnRhZ1N0YXJ0ID0gc3RyZWFtLmNvbHVtbigpO1xuICAgICAgcmV0dXJuIHRhZ05hbWVTdGF0ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJjbG9zZVRhZ1wiKSB7XG4gICAgICByZXR1cm4gY2xvc2VUYWdOYW1lU3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBiYXNlU3RhdGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHRhZ05hbWVTdGF0ZSh0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIpIHtcbiAgICAgIHN0YXRlLnRhZ05hbWUgPSBzdHJlYW0uY3VycmVudCgpO1xuICAgICAgc2V0U3R5bGUgPSBcInRhZ1wiO1xuICAgICAgcmV0dXJuIGF0dHJTdGF0ZTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5hbGxvd01pc3NpbmdUYWdOYW1lICYmIHR5cGUgPT0gXCJlbmRUYWdcIikge1xuICAgICAgc2V0U3R5bGUgPSBcInRhZyBicmFja2V0XCI7XG4gICAgICByZXR1cm4gYXR0clN0YXRlKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTdHlsZSA9IFwiZXJyb3JcIjtcbiAgICAgIHJldHVybiB0YWdOYW1lU3RhdGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNsb3NlVGFnTmFtZVN0YXRlKHR5cGUsIHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAodHlwZSA9PSBcIndvcmRcIikge1xuICAgICAgdmFyIHRhZ05hbWUgPSBzdHJlYW0uY3VycmVudCgpO1xuICAgICAgaWYgKHN0YXRlLmNvbnRleHQgJiYgc3RhdGUuY29udGV4dC50YWdOYW1lICE9IHRhZ05hbWUgJiZcbiAgICAgICAgICBjb25maWcuaW1wbGljaXRseUNsb3NlZC5oYXNPd25Qcm9wZXJ0eShzdGF0ZS5jb250ZXh0LnRhZ05hbWUpKVxuICAgICAgICBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgIGlmICgoc3RhdGUuY29udGV4dCAmJiBzdGF0ZS5jb250ZXh0LnRhZ05hbWUgPT0gdGFnTmFtZSkgfHwgY29uZmlnLm1hdGNoQ2xvc2luZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgc2V0U3R5bGUgPSBcInRhZ1wiO1xuICAgICAgICByZXR1cm4gY2xvc2VTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFN0eWxlID0gXCJ0YWcgZXJyb3JcIjtcbiAgICAgICAgcmV0dXJuIGNsb3NlU3RhdGVFcnI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb25maWcuYWxsb3dNaXNzaW5nVGFnTmFtZSAmJiB0eXBlID09IFwiZW5kVGFnXCIpIHtcbiAgICAgIHNldFN0eWxlID0gXCJ0YWcgYnJhY2tldFwiO1xuICAgICAgcmV0dXJuIGNsb3NlU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN0eWxlID0gXCJlcnJvclwiO1xuICAgICAgcmV0dXJuIGNsb3NlU3RhdGVFcnI7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VTdGF0ZSh0eXBlLCBfc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlICE9IFwiZW5kVGFnXCIpIHtcbiAgICAgIHNldFN0eWxlID0gXCJlcnJvclwiO1xuICAgICAgcmV0dXJuIGNsb3NlU3RhdGU7XG4gICAgfVxuICAgIHBvcENvbnRleHQoc3RhdGUpO1xuICAgIHJldHVybiBiYXNlU3RhdGU7XG4gIH1cbiAgZnVuY3Rpb24gY2xvc2VTdGF0ZUVycih0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgc2V0U3R5bGUgPSBcImVycm9yXCI7XG4gICAgcmV0dXJuIGNsb3NlU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyU3RhdGUodHlwZSwgX3N0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAodHlwZSA9PSBcIndvcmRcIikge1xuICAgICAgc2V0U3R5bGUgPSBcImF0dHJpYnV0ZVwiO1xuICAgICAgcmV0dXJuIGF0dHJFcVN0YXRlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImVuZFRhZ1wiIHx8IHR5cGUgPT0gXCJzZWxmY2xvc2VUYWdcIikge1xuICAgICAgdmFyIHRhZ05hbWUgPSBzdGF0ZS50YWdOYW1lLCB0YWdTdGFydCA9IHN0YXRlLnRhZ1N0YXJ0O1xuICAgICAgc3RhdGUudGFnTmFtZSA9IHN0YXRlLnRhZ1N0YXJ0ID0gbnVsbDtcbiAgICAgIGlmICh0eXBlID09IFwic2VsZmNsb3NlVGFnXCIgfHxcbiAgICAgICAgICBjb25maWcuYXV0b1NlbGZDbG9zZXJzLmhhc093blByb3BlcnR5KHRhZ05hbWUpKSB7XG4gICAgICAgIG1heWJlUG9wQ29udGV4dChzdGF0ZSwgdGFnTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXliZVBvcENvbnRleHQoc3RhdGUsIHRhZ05hbWUpO1xuICAgICAgICBzdGF0ZS5jb250ZXh0ID0gbmV3IENvbnRleHQoc3RhdGUsIHRhZ05hbWUsIHRhZ1N0YXJ0ID09IHN0YXRlLmluZGVudGVkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU3RhdGU7XG4gICAgfVxuICAgIHNldFN0eWxlID0gXCJlcnJvclwiO1xuICAgIHJldHVybiBhdHRyU3RhdGU7XG4gIH1cbiAgZnVuY3Rpb24gYXR0ckVxU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwiZXF1YWxzXCIpIHJldHVybiBhdHRyVmFsdWVTdGF0ZTtcbiAgICBpZiAoIWNvbmZpZy5hbGxvd01pc3NpbmcpIHNldFN0eWxlID0gXCJlcnJvclwiO1xuICAgIHJldHVybiBhdHRyU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gYXR0clZhbHVlU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwic3RyaW5nXCIpIHJldHVybiBhdHRyQ29udGludWVkU3RhdGU7XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIgJiYgY29uZmlnLmFsbG93VW5xdW90ZWQpIHtzZXRTdHlsZSA9IFwic3RyaW5nXCI7IHJldHVybiBhdHRyU3RhdGU7fVxuICAgIHNldFN0eWxlID0gXCJlcnJvclwiO1xuICAgIHJldHVybiBhdHRyU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gYXR0ckNvbnRpbnVlZFN0YXRlKHR5cGUsIHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAodHlwZSA9PSBcInN0cmluZ1wiKSByZXR1cm4gYXR0ckNvbnRpbnVlZFN0YXRlO1xuICAgIHJldHVybiBhdHRyU3RhdGUodHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKGJhc2VJbmRlbnQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHt0b2tlbml6ZTogaW5UZXh0LFxuICAgICAgICAgICAgICAgICAgIHN0YXRlOiBiYXNlU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgaW5kZW50ZWQ6IGJhc2VJbmRlbnQgfHwgMCxcbiAgICAgICAgICAgICAgICAgICB0YWdOYW1lOiBudWxsLCB0YWdTdGFydDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBudWxsfVxuICAgICAgaWYgKGJhc2VJbmRlbnQgIT0gbnVsbCkgc3RhdGUuYmFzZUluZGVudCA9IGJhc2VJbmRlbnRcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG5cbiAgICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgaWYgKCFzdGF0ZS50YWdOYW1lICYmIHN0cmVhbS5zb2woKSlcbiAgICAgICAgc3RhdGUuaW5kZW50ZWQgPSBzdHJlYW0uaW5kZW50YXRpb24oKTtcblxuICAgICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSByZXR1cm4gbnVsbDtcbiAgICAgIHR5cGUgPSBudWxsO1xuICAgICAgdmFyIHN0eWxlID0gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBpZiAoKHN0eWxlIHx8IHR5cGUpICYmIHN0eWxlICE9IFwiY29tbWVudFwiKSB7XG4gICAgICAgIHNldFN0eWxlID0gbnVsbDtcbiAgICAgICAgc3RhdGUuc3RhdGUgPSBzdGF0ZS5zdGF0ZSh0eXBlIHx8IHN0eWxlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgaWYgKHNldFN0eWxlKVxuICAgICAgICAgIHN0eWxlID0gc2V0U3R5bGUgPT0gXCJlcnJvclwiID8gc3R5bGUgKyBcIiBlcnJvclwiIDogc2V0U3R5bGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcblxuICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlciwgZnVsbExpbmUpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gc3RhdGUuY29udGV4dDtcbiAgICAgIC8vIEluZGVudCBtdWx0aS1saW5lIHN0cmluZ3MgKGUuZy4gY3NzKS5cbiAgICAgIGlmIChzdGF0ZS50b2tlbml6ZS5pc0luQXR0cmlidXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZS50YWdTdGFydCA9PSBzdGF0ZS5pbmRlbnRlZClcbiAgICAgICAgICByZXR1cm4gc3RhdGUuc3RyaW5nU3RhcnRDb2wgKyAxO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIHN0YXRlLmluZGVudGVkICsgaW5kZW50VW5pdDtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQubm9JbmRlbnQpIHJldHVybiBDb2RlTWlycm9yLlBhc3M7XG4gICAgICBpZiAoc3RhdGUudG9rZW5pemUgIT0gaW5UYWcgJiYgc3RhdGUudG9rZW5pemUgIT0gaW5UZXh0KVxuICAgICAgICByZXR1cm4gZnVsbExpbmUgPyBmdWxsTGluZS5tYXRjaCgvXihcXHMqKS8pWzBdLmxlbmd0aCA6IDA7XG4gICAgICAvLyBJbmRlbnQgdGhlIHN0YXJ0cyBvZiBhdHRyaWJ1dGUgbmFtZXMuXG4gICAgICBpZiAoc3RhdGUudGFnTmFtZSkge1xuICAgICAgICBpZiAoY29uZmlnLm11bHRpbGluZVRhZ0luZGVudFBhc3RUYWcgIT09IGZhbHNlKVxuICAgICAgICAgIHJldHVybiBzdGF0ZS50YWdTdGFydCArIHN0YXRlLnRhZ05hbWUubGVuZ3RoICsgMjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiBzdGF0ZS50YWdTdGFydCArIGluZGVudFVuaXQgKiAoY29uZmlnLm11bHRpbGluZVRhZ0luZGVudEZhY3RvciB8fCAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25maWcuYWxpZ25DREFUQSAmJiAvPCFcXFtDREFUQVxcWy8udGVzdCh0ZXh0QWZ0ZXIpKSByZXR1cm4gMDtcbiAgICAgIHZhciB0YWdBZnRlciA9IHRleHRBZnRlciAmJiAvXjwoXFwvKT8oW1xcd186XFwuLV0qKS8uZXhlYyh0ZXh0QWZ0ZXIpO1xuICAgICAgaWYgKHRhZ0FmdGVyICYmIHRhZ0FmdGVyWzFdKSB7IC8vIENsb3NpbmcgdGFnIHNwb3R0ZWRcbiAgICAgICAgd2hpbGUgKGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC50YWdOYW1lID09IHRhZ0FmdGVyWzJdKSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC5wcmV2O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuaW1wbGljaXRseUNsb3NlZC5oYXNPd25Qcm9wZXJ0eShjb250ZXh0LnRhZ05hbWUpKSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gY29udGV4dC5wcmV2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFnQWZ0ZXIpIHsgLy8gT3BlbmluZyB0YWcgc3BvdHRlZFxuICAgICAgICB3aGlsZSAoY29udGV4dCkge1xuICAgICAgICAgIHZhciBncmFiYmVycyA9IGNvbmZpZy5jb250ZXh0R3JhYmJlcnNbY29udGV4dC50YWdOYW1lXTtcbiAgICAgICAgICBpZiAoZ3JhYmJlcnMgJiYgZ3JhYmJlcnMuaGFzT3duUHJvcGVydHkodGFnQWZ0ZXJbMl0pKVxuICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHQucHJldjtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKGNvbnRleHQgJiYgY29udGV4dC5wcmV2ICYmICFjb250ZXh0LnN0YXJ0T2ZMaW5lKVxuICAgICAgICBjb250ZXh0ID0gY29udGV4dC5wcmV2O1xuICAgICAgaWYgKGNvbnRleHQpIHJldHVybiBjb250ZXh0LmluZGVudCArIGluZGVudFVuaXQ7XG4gICAgICBlbHNlIHJldHVybiBzdGF0ZS5iYXNlSW5kZW50IHx8IDA7XG4gICAgfSxcblxuICAgIGVsZWN0cmljSW5wdXQ6IC88XFwvW1xcc1xcdzpdKz4kLyxcbiAgICBibG9ja0NvbW1lbnRTdGFydDogXCI8IS0tXCIsXG4gICAgYmxvY2tDb21tZW50RW5kOiBcIi0tPlwiLFxuXG4gICAgY29uZmlndXJhdGlvbjogY29uZmlnLmh0bWxNb2RlID8gXCJodG1sXCIgOiBcInhtbFwiLFxuICAgIGhlbHBlclR5cGU6IGNvbmZpZy5odG1sTW9kZSA/IFwiaHRtbFwiIDogXCJ4bWxcIixcblxuICAgIHNraXBBdHRyaWJ1dGU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgPT0gYXR0clZhbHVlU3RhdGUpXG4gICAgICAgIHN0YXRlLnN0YXRlID0gYXR0clN0YXRlXG4gICAgfVxuICB9O1xufSk7XG5cbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQveG1sXCIsIFwieG1sXCIpO1xuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwiYXBwbGljYXRpb24veG1sXCIsIFwieG1sXCIpO1xuaWYgKCFDb2RlTWlycm9yLm1pbWVNb2Rlcy5oYXNPd25Qcm9wZXJ0eShcInRleHQvaHRtbFwiKSlcbiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC9odG1sXCIsIHtuYW1lOiBcInhtbFwiLCBodG1sTW9kZTogdHJ1ZX0pO1xuXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvbW9kZS94bWwveG1sLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxlOiBudWxsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgbG9jYWxlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBfLm1hcChTdGF0YW1pYy5sb2NhbGVzLCAobG9jYWxlLCBoYW5kbGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB0ZXh0OiBsb2NhbGUubmFtZSwgdmFsdWU6IGhhbmRsZSB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSB0aGlzLmdldEluaXRpYWxMb2NhbGUoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGdldEluaXRpYWxMb2NhbGUoKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0TG9jYWxlID0gT2JqZWN0LmtleXMoU3RhdGFtaWMubG9jYWxlcylbMF07XG5cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhTdGF0YW1pYy5sb2NhbGVzKS5sZW5ndGggPT09IDEpIHJldHVybiBkZWZhdWx0TG9jYWxlO1xuXG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmdldExvY2FsZUxvY2FsU3RvcmFnZUtleSgpO1xuXG4gICAgICAgICAgICBpZiAoISBrZXkpIHJldHVybiBkZWZhdWx0TG9jYWxlO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSB8fCBkZWZhdWx0TG9jYWxlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldExvY2FsZUxvY2FsU3RvcmFnZUtleSgpIHtcbiAgICAgICAgICAgIHJldHVybiAnc3RhdGFtaWMubG9jYWxlJztcbiAgICAgICAgfSxcblxuICAgICAgICBvbkxvY2FsZUNoYW5nZWQoKSB7XG4gICAgICAgICAgICAvL1xuICAgICAgICB9LFxuXG4gICAgICAgIGJpbmRMb2NhbGVXYXRjaGVyKCkge1xuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ2xvY2FsZScsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25Mb2NhbGVDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRMb2NhbGVMb2NhbFN0b3JhZ2VLZXkoKTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5KSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvSGFzTG9jYWxlU2VsZWN0b3IuanMiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvd0RyYWZ0czogdHJ1ZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGRyYWZ0T3B0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogdHJ1ZSwgdGV4dDogdHJhbnNsYXRlKCdjcC5zaG93X2RyYWZ0cycpIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogZmFsc2UsIHRleHQ6IHRyYW5zbGF0ZSgnY3AuaGlkZV9kcmFmdHMnKSB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIHRoaXMuc2hvd0RyYWZ0cyA9IHRoaXMuZ2V0SW5pdGlhbFNob3dEcmFmdHMoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGdldEluaXRpYWxTaG93RHJhZnRzKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRTaG93RHJhZnRzTG9jYWxTdG9yYWdlS2V5KCk7XG5cbiAgICAgICAgICAgIGlmICghIGtleSkgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTaG93RHJhZnRzTG9jYWxTdG9yYWdlS2V5KCkge1xuICAgICAgICAgICAgcmV0dXJuICdzdGF0YW1pYy5kcmFmdHMnO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uU2hvd0RyYWZ0c0NoYW5nZWQoKSB7XG4gICAgICAgICAgICAvL1xuICAgICAgICB9LFxuXG4gICAgICAgIGJpbmRTaG93RHJhZnRzV2F0Y2hlcigpIHtcbiAgICAgICAgICAgIHRoaXMuJHdhdGNoKCdzaG93RHJhZnRzJywgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblNob3dEcmFmdHNDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRTaG93RHJhZnRzTG9jYWxTdG9yYWdlS2V5KCk7XG4gICAgICAgICAgICAgICAgaWYgKGtleSkgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0hhc1Nob3dEcmFmdHNTZWxlY3Rvci5qcyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL01vdmVyLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTW92ZXIudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvTW92ZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAxNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRyYWdnaW5nRmlsZTogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiB0aGUgZHJhZ292ZXIgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIHNvbWV0aGluZyBpcyBkcmFnZ2VkIG9udG8gdGhlIHNwZWNpZmllZCBlbGVtZW50LlxuICAgICAgICAgKiBJZiB0aGUgdGhpbmcgYmVpbmcgZHJhZ2dlZCBpcyBub3QgYSBmaWxlLCB3ZSB3YW50IHRvIHByZXZlbnQgYW55dGhpbmdcbiAgICAgICAgICogZnJvbSBoYXBwZW5pbmcuIFdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBmaWxlcy5cbiAgICAgICAgICovXG4gICAgICAgIGRyYWdPdmVyKCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy4kcm9vdC5kcmFnZ2luZ05vbkZpbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYWdnaW5nRmlsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdGhlIGRyYWdnaW5nIGhhcyBlbmRlZC5cbiAgICAgICAgICovXG4gICAgICAgIGRyYWdTdG9wKCkge1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZ0ZpbGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRGV0ZWN0c0ZpbGVEcmFnZ2luZy5qcyIsImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbXG4gICAgICAgICdjb250YWluZXInLFxuICAgICAgICAnYXNzZXRzJyxcbiAgICAgICAgJ2ZvbGRlcicsXG4gICAgICAgICdzdWJmb2xkZXJzJyxcbiAgICAgICAgJ2xvYWRpbmcnLFxuICAgICAgICAnc2VsZWN0ZWRBc3NldHMnLFxuICAgICAgICAncmVzdHJpY3ROYXZpZ2F0aW9uJyxcbiAgICAgICAgJ2lzU2VhcmNoaW5nJ1xuICAgIF0sXG5cblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaGFzUmVzdWx0cygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0cy5sZW5ndGggfHwgdGhpcy5zdWJmb2xkZXJzLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNQYXJlbnQoKSB7XG4gICAgICAgICAgICBpZiAoISB0aGlzLmZvbGRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9sZGVyLnBhcmVudF9wYXRoICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlbGVjdCBhIGZvbGRlciB0byBuYXZpZ2F0ZSB0by5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdEZvbGRlcihwYXRoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdmb2xkZXItc2VsZWN0ZWQnLCBwYXRoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2VsZWN0IChjaGVjaykgYW4gYXNzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RBc3NldChpZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FuKCdhc3NldHM6JysgdGhpcy5jb250YWluZXIgKyc6ZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnYXNzZXQtc2VsZWN0ZWQnLCBpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlc2VsZWN0ICh1bmNoZWNrKSBhbiBhc3NldC5cbiAgICAgICAgICovXG4gICAgICAgIGRlc2VsZWN0QXNzZXQoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Fzc2V0LWRlc2VsZWN0ZWQnLCBpZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgZWRpdGluZyBvZiB0aGlzIGFzc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZWRpdEFzc2V0KGlkKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdhc3NldC1lZGl0aW5nJywgaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIHRoZSBkZWxldGluZyBvZiB0aGlzIGFzc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlQXNzZXQoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Fzc2V0LWRlc2VsZWN0ZWQnLCBpZCk7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdhc3NldC1kZWxldGluZycsIGlkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhc3NldERvdWJsZWNsaWNrZWQoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Fzc2V0LWRvdWJsZWNsaWNrZWQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlciBlZGl0aW5nIG9mIHRoaXMgZm9sZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZWRpdEZvbGRlcihwYXRoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdmb2xkZXItZWRpdGluZycsIHBhdGgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxldGUgYSBmb2xkZXIuXG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVGb2xkZXIocGF0aCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gY3BfdXJsKCdhc3NldHMvZm9sZGVycy9kZWxldGUnKTtcblxuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbmZpcm1fZGVsZXRlX2ZvbGRlcicpLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0cmFuc2xhdGUoJ2NwLnllc19pbV9zdXJlJyksXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kaHR0cC5kZWxldGUodXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIGZvbGRlcnM6IHBhdGhcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdmb2xkZXItZGVsZXRlZCcsIHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXNzZXREcmFnU3RhcnQoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0QXNzZXQoaWQpO1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZ0Fzc2V0cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvTGlzdGluZy5qcyIsImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2Fzc2V0JywgJ3NlbGVjdGVkQXNzZXRzJ10sXG5cblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZSBpZiBhbiBhc3NldCBzaG91bGQgYmUgaW4gdGhlIHNlbGVjdGVkIHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgaXNTZWxlY3RlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmNvbnRhaW5zKHRoaXMuc2VsZWN0ZWRBc3NldHMsIHRoaXMuYXNzZXQuaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSBhc3NldCBjYW4gYmUgcmVuZGVyZWQgYXMgc3ZnXG4gICAgICAgICAqL1xuICAgICAgICBjYW5TaG93U3ZnKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXQuZXh0ZW5zaW9uID09PSAnc3ZnJyAmJiAhdGhpcy5hc3NldC51cmwuaW5jbHVkZXMoJzonKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGlubGluZSBzdHlsZSB1c2VkIHRvIGRpc3BsYXkgYW4gU1ZHIGJhY2tncm91bmQgaW1hZ2VcbiAgICAgICAgICovXG4gICAgICAgIHN2Z0JhY2tncm91bmRTdHlsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiAnYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiJyArIHRoaXMuYXNzZXQudXJsICsgJ1wiKSc7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgYSB0b2dnbGUgb2YgdGhlIHNlbGVjdGVkIHN0YXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdG9nZ2xlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3QoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzZWxlY3QoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3RlZCcsIHRoaXMuYXNzZXQuaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlc2VsZWN0KCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnZGVzZWxlY3RlZCcsIHRoaXMuYXNzZXQuaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIGVkaXRpbmcgb2YgYW4gYXNzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBlZGl0QXNzZXQoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdlZGl0aW5nJywgdGhpcy5hc3NldC5pZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgZGVsZXRpbmcgb2YgYW4gYXNzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVBc3NldCgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0aW5nJywgdGhpcy5hc3NldC5pZClcbiAgICAgICAgfSxcblxuICAgICAgICBhc3NldERyYWdTdGFydChlKSB7XG4gICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCdhc3NldCcsIHRoaXMuYXNzZXQuaWQpO1xuICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Fzc2V0ZHJhZ3N0YXJ0JywgdGhpcy5hc3NldC5pZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZG91YmxlQ2xpY2tlZCgpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gaW4gdGhlIGNvbnRleHQgb2YgdGhlIGFzc2V0IG1hbmFnZXIsIHdlIHdhbnQgdG8gZWRpdCB0aGUgYXNzZXQuIE90aGVyd2lzZSwgd2Ugd2FudCB0b1xuICAgICAgICAgICAgLy8gc2VsZWN0IHRoZSBhc3NldCBhbmQgY2xvc2UgdGhlIGRpYWxvZywgd2hpY2ggd2lsbCBiZSBoYW5kbGVkIGluIHRoZSBwYXJlbnQgY29tcG9uZW50cy5cbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpWzJdID09PSAnYXNzZXRzJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdEFzc2V0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnZG91YmxlY2xpY2tlZCcsIHRoaXMuYXNzZXQuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0Fzc2V0LmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnZm9sZGVyJ10sXG5cblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzZWxlY3RGb2xkZXIoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3RlZCcsIHRoaXMuZm9sZGVyLnBhdGgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVkaXRGb2xkZXIoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdlZGl0aW5nJywgdGhpcy5mb2xkZXIucGF0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2hvd0FjdGlvbnNEcm9wZG93biA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZUZvbGRlcigpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0aW5nJywgdGhpcy5mb2xkZXIucGF0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2hvd0FjdGlvbnNEcm9wZG93biA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyb3AoZSkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnZHJvcHBlZC1vbi1mb2xkZXInLCB0aGlzLmZvbGRlci5wYXRoLCBlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Gb2xkZXIuanMiLCJpbXBvcnQgeyBtaXhpbiBhcyBjbGlja2F3YXkgfSBmcm9tICd2dWUtY2xpY2thd2F5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG1peGluczogWyBjbGlja2F3YXkgXSxcblxuICAgIGRhdGEgKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvd0FjdGlvbnNEcm9wZG93bjogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBldmVudHM6IHtcbiAgICAgICAgJ2Nsb3NlLWRyb3Bkb3duJzogZnVuY3Rpb24gKHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMgPT0gcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNob3dBY3Rpb25zRHJvcGRvd24gPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICB0b2dnbGVBY3Rpb25zKCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnb3Blbi1kcm9wZG93bicsIHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLnNob3dBY3Rpb25zRHJvcGRvd24gPSAhdGhpcy5zaG93QWN0aW9uc0Ryb3Bkb3duO1xuICAgICAgICB9LFxuXG4gICAgICAgIGF3YXkoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBY3Rpb25zRHJvcGRvd24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Sb3cuanMiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9VcGxvYWRzLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVXBsb2Fkcy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9VcGxvYWRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0VkaXRvci52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0VkaXRvci52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9FZGl0b3IvRWRpdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImNvbnN0IGRlZmF1bHRMb2NhbGUgPSBPYmplY3Qua2V5cyhTdGF0YW1pYy5sb2NhbGVzKVswXTtcbmNvbnN0IGN1cnJlbnRMb2NhbGUgPSBTdGF0YW1pYy5QdWJsaXNoID8gKFN0YXRhbWljLlB1Ymxpc2gubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGUpIDogZGVmYXVsdExvY2FsZTtcbmNvbnN0IGlzRWRpdGluZ0RlZmF1bHRMb2NhbGUgPSBjdXJyZW50TG9jYWxlID09PSBkZWZhdWx0TG9jYWxlO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWydmaWVsZCcsICdkYXRhJywgJ2NvbmZpZycsICdhdXRvZm9jdXMnLCAnZW52J10sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGlzVmlzaWJsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy4kcGFyZW50LmhpZGRlbkZpZWxkcy5pbmNsdWRlcyh0aGlzLmZpZWxkLm5hbWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUmVhZE9ubHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gIWlzRWRpdGluZ0RlZmF1bHRMb2NhbGUgJiYgIXRoaXMuaXNMb2NhbGl6YWJsZTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNFcnJvcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmhhcyh0aGlzLiRwYXJlbnQuZXJyb3JzLCAnZmllbGRzLicrdGhpcy5maWVsZC5uYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbGFzc2VzKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAnZm9ybS1ncm91cCcsXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHR5cGVDbGFzcyxcbiAgICAgICAgICAgICAgICB0YWlsd2luZF93aWR0aF9jbGFzcyh0aGlzLmZpZWxkLndpZHRoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5jbGFzc2VzIHx8ICcnLFxuICAgICAgICAgICAgICAgIHsgJ2hhcy1lcnJvcic6IHRoaXMuaGFzRXJyb3IgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZHR5cGVDbGFzcygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLnR5cGUgKyAnLWZpZWxkdHlwZSc7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuXG4gICAgICAgIGlzVmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgICAgICAgICAvLyBXaGVuIHNob3dpbmcgZmllbGRzLCBkaXNwYXRjaCBhIHJlc2l6ZSBldmVudC4gRmllbGRzIGxpa2UgR3JpZCBtYXkgYmVcbiAgICAgICAgICAgIC8vIGxpc3RlbmluZyBmb3IgaXQgdG8ga25vdyB3aGV0aGVyIHRoZXkgc2hvdWxkIGJlIGluIHN0YWNrZWQvdGFibGUgbGF5b3V0LlxuICAgICAgICAgICAgaWYgKHZpc2libGUpIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL0ZpZWxkLmpzIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxucmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcImlkXFxcIjoxLFxcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanMhc2Fzcy1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGUmaW5kZXg9MCEuL0RyaXZlckxvY2FsLnZ1ZVwiKVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vRHJpdmVyTG9jYWwudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ecml2ZXJMb2NhbC52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0RyaXZlckxvY2FsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0RyaXZlclMzLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vRHJpdmVyUzMudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9Ecml2ZXJTMy52dWVcbi8vIG1vZHVsZSBpZCA9IDE2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9CcmFuY2gudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9CcmFuY2gudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvQnJhbmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0JyYW5jaGVzLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQnJhbmNoZXMudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvQnJhbmNoZXMudnVlXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi91c2VyLW9wdGlvbnMudGVtcGxhdGUuaHRtbCcpLFxuXG4gICAgcHJvcHM6IFsndXNlcm5hbWUnLCAnc3RhdHVzJ10sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2VuZFJlc2V0RW1haWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gdHJhbnNsYXRlKCdjcC5wYXNzd29yZF9yZXNldF9lbWFpbF9ub3Rfc2VudCcpO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldChjcF91cmwoJ3VzZXJzLycrdGhpcy51c2VybmFtZSsnL3NlbmQtcmVzZXQtZW1haWwnKSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3NldEZsYXNoU3VjY2VzcycsIHRyYW5zbGF0ZSgnY3AuZW1haWxfc2VudCcpKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdzZXRGbGFzaEVycm9yJywgZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnc2V0Rmxhc2hFcnJvcicsIGVycm9yKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29weVJlc2V0TGluazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSB0cmFuc2xhdGUoJ2NwLmNvcHlfcGFzc3dvcmRfcmVzZXRfbGlua19mYWlsZWQnKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQoY3BfdXJsKCd1c2Vycy8nK3RoaXMudXNlcm5hbWUrJy9yZXNldC11cmwnKSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbXB0KCcnLCBkYXRhLnVybCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3NldEZsYXNoRXJyb3InLCBlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdzZXRGbGFzaEVycm9yJywgZXJyb3IpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC91c2VyLW9wdGlvbnMuanMiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9GaWVsZC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZpZWxkLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9GaWVsZC52dWVcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBMb29wcyB0aHJvdWdoIHRoZSBjb2xsZWN0aW9uIGFuZCBjYWxscyB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggZWxlbWVudC4gaWYgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1dGh5LCB0aGUgbG9vcCBpcyBicm9rZW4gYW5kIHJldHVybnMgdGhlIHNhbWUgdmFsdWUuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0geyp9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gbG9vcCB0aHJvdWdoLiBOZWVkcyB0byBoYXZlIGEgbGVuZ3RoIHByb3BlcnR5IHNldCBhbmQgaGF2ZSBpbmRpY2VzIHNldCBmcm9tIDAgdG8gbGVuZ3RoIC0gMS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBiZSBnaXZlbiBhcyBhIHBhcmFtZXRlciB0byB0aGUgY2FsbGJhY2suIElmIHRoaXMgY2FsbGJhY2sgcmV0dXJucyB0cnV0aHksIHRoZSBsb29wIGlzIGJyb2tlbiBhbmQgdGhlIHNhbWUgdmFsdWUgaXMgcmV0dXJuZWQuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgYSBjYWxsYmFjayBoYXMgcmV0dXJuZWQgKGlmIHRydXRoeSkuIE90aGVyd2lzZSBub3RoaW5nLlxuICovXG51dGlscy5mb3JFYWNoID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgY2FsbGJhY2spIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soY29sbGVjdGlvbltpXSk7XG4gICAgICAgIGlmKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvY29sbGVjdGlvbi11dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZGV0ZWN0b3IgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5kZXRlY3Rvci5pc0lFID0gZnVuY3Rpb24odmVyc2lvbikge1xuICAgIGZ1bmN0aW9uIGlzQW55SWVWZXJzaW9uKCkge1xuICAgICAgICB2YXIgYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBhZ2VudC5pbmRleE9mKFwibXNpZVwiKSAhPT0gLTEgfHwgYWdlbnQuaW5kZXhPZihcInRyaWRlbnRcIikgIT09IC0xIHx8IGFnZW50LmluZGV4T2YoXCIgZWRnZS9cIikgIT09IC0xO1xuICAgIH1cblxuICAgIGlmKCFpc0FueUllVmVyc2lvbigpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZighdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvL1NoYW1lbGVzc2x5IHN0b2xlbiBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhZG9sc2V5LzUyNzY4M1xuICAgIHZhciBpZVZlcnNpb24gPSAoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHVuZGVmLFxuICAgICAgICAgICAgdiA9IDMsXG4gICAgICAgICAgICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICAgICAgYWxsID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaVwiKTtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gXCI8IS0tW2lmIGd0IElFIFwiICsgKCsrdikgKyBcIl0+PGk+PC9pPjwhW2VuZGlmXS0tPlwiO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhbGxbMF0pO1xuXG4gICAgICAgIHJldHVybiB2ID4gNCA/IHYgOiB1bmRlZjtcbiAgICB9KCkpO1xuXG4gICAgcmV0dXJuIHZlcnNpb24gPT09IGllVmVyc2lvbjtcbn07XG5cbmRldGVjdG9yLmlzTGVnYWN5T3BlcmEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISF3aW5kb3cub3BlcmE7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2Jyb3dzZXItZGV0ZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9XaWR0aFNlbGVjdG9yLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vV2lkdGhTZWxlY3Rvci52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvV2lkdGhTZWxlY3Rvci52dWVcbi8vIG1vZHVsZSBpZCA9IDE3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgTHVtaW5vdXMgZnJvbSAnbHVtaW5vdXMtbGlnaHRib3gnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEFzc2V0RWRpdG9yOiByZXF1aXJlKCcuLi8uLi9hc3NldHMvRWRpdG9yL0VkaXRvci52dWUnKVxuICAgIH0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBhc3NldDogT2JqZWN0XG4gICAgfSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlZGl0aW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBpc0ltYWdlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXQuaXNfaW1hZ2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuU2hvd1N2ZygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0LmV4dGVuc2lvbiA9PT0gJ3N2ZycgJiYgISB0aGlzLmFzc2V0LnVybC5pbmNsdWRlcygnOicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRodW1ibmFpbCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0LnRodW1ibmFpbDtcbiAgICAgICAgfSxcblxuICAgICAgICB0b2VuYWlsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXQudG9lbmFpbDtcbiAgICAgICAgfSxcblxuICAgICAgICBsYWJlbCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0LnRpdGxlIHx8IHRoaXMuYXNzZXQuYmFzZW5hbWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZWRpdCgpIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdGluZyA9IHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlKCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgncmVtb3ZlZCcsIHRoaXMuYXNzZXQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ha2Vab29tYWJsZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gJCh0aGlzLiRlbCkuZmluZCgnYS56b29tJylbMF07XG5cbiAgICAgICAgICAgIGlmICghIGVsIHx8ICEgdGhpcy5pc0ltYWdlKSByZXR1cm47XG5cbiAgICAgICAgICAgIG5ldyBMdW1pbm91cyhlbCwge1xuICAgICAgICAgICAgICAgIGNsb3NlT25TY3JvbGw6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FwdGlvbkF0dHJpYnV0ZTogJ3RpdGxlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvc2VFZGl0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBhc3NldFNhdmVkKGFzc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmFzc2V0ID0gYXNzZXQ7XG4gICAgICAgICAgICB0aGlzLmNsb3NlRWRpdG9yKCk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLm1ha2Vab29tYWJsZSgpO1xuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYXNzZXRzL0Fzc2V0LmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmxhbms6IHt9LFxuICAgICAgICAgICAgc29ydGFibGVPcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGF1dG9CaW5kQ2hhbmdlV2F0Y2hlcjogZmFsc2UsXG4gICAgICAgICAgICBjaGFuZ2VXYXRjaGVyV2F0Y2hEZWVwOiBmYWxzZSxcbiAgICAgICAgICAgIGFjY29yZGlvbk1vZGU6IHRydWVcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIHRoaXMuYWNjb3JkaW9uTW9kZSA9IHRoaXMuZ2V0QWNjb3JkaW9uTW9kZUZyb21TdG9yYWdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYWNjb3JkaW9uTW9kZSkgdGhpcy5jb2xsYXBzZUFsbCgpO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2V0Q29uZmlnOiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZmluZFdoZXJlKHRoaXMuY29uZmlnLnNldHMsIHsgbmFtZTogdHlwZSB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVTZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZXhwYW5kQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfLmVhY2godGhpcy4kcmVmcy5zZXQsIHNldCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXQuZXhwYW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5leHBhbmQodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0QWNjb3JkaW9uTW9kZShmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29sbGFwc2VBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLiRyZWZzLnNldCwgc2V0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldC5jb2xsYXBzZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBzZXQuY29sbGFwc2UodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0QWNjb3JkaW9uTW9kZSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRBY2NvcmRpb25Nb2RlRnJvbVN0b3JhZ2UoKSB7XG4gICAgICAgICAgICBsZXQgbW9kZSA9IHRoaXMuYWNjb3JkaW9uTW9kZTtcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzdGF0YW1pYy5yZXBsaWNhdG9yLmFjY29yZGlvbicpO1xuXG4gICAgICAgICAgICBpZiAoc3RvcmVkID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICBtb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvcmVkID09PSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAgICAgbW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW9kZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRBY2NvcmRpb25Nb2RlKG1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuYWNjb3JkaW9uTW9kZSA9IG1vZGU7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc3RhdGFtaWMucmVwbGljYXRvci5hY2NvcmRpb24nLCBtb2RlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yLmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnZGF0YScsICdpbmRleCcsICdjb25maWcnLCAncGFyZW50TmFtZScsICdzZXRzJ10sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sbGFwc2VkUHJldmlldzogbnVsbFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgZGlzcGxheSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5kaXNwbGF5IHx8IHRoaXMuZGF0YS50eXBlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluc3RydWN0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5pbnN0cnVjdGlvbnM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzTXVsdGlwbGVGaWVsZHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZmllbGRzLmxlbmd0aCA+IDE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNIaWRkZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhWycjaGlkZGVuJ10gPT09IHRydWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5jb2xsYXBzZWRQcmV2aWV3ID0gdGhpcy5nZXRDb2xsYXBzZWRQcmV2aWV3KCk7XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZGVlcDogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzZWRQcmV2aWV3ID0gdGhpcy5nZXRDb2xsYXBzZWRQcmV2aWV3KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZGVsZXRlKCkge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0cmFuc2xhdGUoJ2NwLnllc19pbV9zdXJlJyksXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnZGVsZXRlZCcsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlKCkge1xuICAgICAgICAgICAgKHRoaXMuaXNIaWRkZW4pID8gdGhpcy5leHBhbmQoKSA6IHRoaXMuY29sbGFwc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBleHBhbmQoYWxsKSB7XG4gICAgICAgICAgICBWdWUuc2V0KHRoaXMuZGF0YSwgJyNoaWRkZW4nLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIFRoZSAnYWxsJyB2YXJpYWJsZSB3aWxsIGJlIHRydWUgaWYgaXQgd2FzIGNhbGxlZCBmcm9tIHRoZSBleHBhbmRBbGwoKSBtZXRob2QuXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdleHBhbmRlZCcsIHRoaXMsIGFsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29sbGFwc2UoKSB7XG4gICAgICAgICAgICBWdWUuc2V0KHRoaXMuZGF0YSwgJyNoaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDb2xsYXBzZWRQcmV2aWV3KCkge1xuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHRoaXMuJGNoaWxkcmVuLCAoZmllbGR0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkdHlwZS5jb25maWcucmVwbGljYXRvcl9wcmV2aWV3ID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgZmllbGR0eXBlLmdldFJlcGxpY2F0b3JQcmV2aWV3VGV4dCAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgID8gZmllbGR0eXBlLmdldFJlcGxpY2F0b3JQcmV2aWV3VGV4dCgpXG4gICAgICAgICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkoZmllbGR0eXBlLmRhdGEpO1xuICAgICAgICAgICAgfSkuZmlsdGVyKHQgPT4gdCAhPT0gbnVsbCAmJiB0ICE9PSAnJyAmJiB0ICE9PSB1bmRlZmluZWQpLmpvaW4oJyAvICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBmb2N1cyB0aGUgZmlyc3QgZmllbGQuXG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuJGNoaWxkcmVuWzBdO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgY29tcG9uZW50IGRvZXNuJ3Qga25vdyBob3cgdG8gZm9jdXMsIHdlIGNhbm5vdC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmllbGQuZm9jdXMgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgICAgICAgICAgZmllbGQuZm9jdXMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZENsYXNzZXM6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBgZm9ybS1ncm91cCBwLTIgbS0wICR7ZmllbGQudHlwZX0tZmllbGR0eXBlYCxcbiAgICAgICAgICAgICAgICB0YWlsd2luZF93aWR0aF9jbGFzcyhmaWVsZC53aWR0aClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcG9uZW50TmFtZSh0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZS5yZXBsYWNlKCcuJywgJy0nKSArICctZmllbGR0eXBlJztcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZXBsaWNhdG9yL1JlcGxpY2F0b3JTZXQuanMiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VsZWN0ZWRBc3NldHM6IFtdLFxuICAgICAgICAgICAgc2VsZWN0b3JWaWV3TW9kZTogbnVsbCxcbiAgICAgICAgICAgIHNob3dBc3NldFNlbGVjdG9yOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBhc3NldHNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGaWVsZHR5cGVDb25maWcoKSAmJiB0eXBlb2YgdGhpcy5nZXRGaWVsZHR5cGVDb25maWcoKS5jb250YWluZXIgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbnRhaW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGR0eXBlQ29uZmlnKCkuY29udGFpbmVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvbGRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmllbGR0eXBlQ29uZmlnKCkuZm9sZGVyIHx8ICcvJztcbiAgICAgICAgfSxcblxuICAgICAgICByZXN0cmljdEFzc2V0TmF2aWdhdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZpZWxkdHlwZUNvbmZpZygpLnJlc3RyaWN0X2Fzc2V0cyB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RvclZpZXdNb2RlID0gQ29va2llcy5nZXQoJ3N0YXRhbWljLmFzc2V0cy5saXN0aW5nX3ZpZXdfbW9kZScpIHx8ICdncmlkJztcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGFkZEFzc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBc3NldFNlbGVjdG9yID0gdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNsb3NlQXNzZXRTZWxlY3RvcigpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0Fzc2V0U2VsZWN0b3IgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgIH1cblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0luc2VydHNBc3NldHMuanMiLCIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHA6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIiksIHJlcXVpcmUoXCIuLi94bWwveG1sXCIpLCByZXF1aXJlKFwiLi4vamF2YXNjcmlwdC9qYXZhc2NyaXB0XCIpLCByZXF1aXJlKFwiLi4vY3NzL2Nzc1wiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiLCBcIi4uL3htbC94bWxcIiwgXCIuLi9qYXZhc2NyaXB0L2phdmFzY3JpcHRcIiwgXCIuLi9jc3MvY3NzXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgZGVmYXVsdFRhZ3MgPSB7XG4gICAgc2NyaXB0OiBbXG4gICAgICBbXCJsYW5nXCIsIC8oamF2YXNjcmlwdHxiYWJlbCkvaSwgXCJqYXZhc2NyaXB0XCJdLFxuICAgICAgW1widHlwZVwiLCAvXig/OnRleHR8YXBwbGljYXRpb24pXFwvKD86eC0pPyg/OmphdmF8ZWNtYSlzY3JpcHQkfF5tb2R1bGUkfF4kL2ksIFwiamF2YXNjcmlwdFwiXSxcbiAgICAgIFtcInR5cGVcIiwgLy4vLCBcInRleHQvcGxhaW5cIl0sXG4gICAgICBbbnVsbCwgbnVsbCwgXCJqYXZhc2NyaXB0XCJdXG4gICAgXSxcbiAgICBzdHlsZTogIFtcbiAgICAgIFtcImxhbmdcIiwgL15jc3MkL2ksIFwiY3NzXCJdLFxuICAgICAgW1widHlwZVwiLCAvXih0ZXh0XFwvKT8oeC0pPyhzdHlsZXNoZWV0fGNzcykkL2ksIFwiY3NzXCJdLFxuICAgICAgW1widHlwZVwiLCAvLi8sIFwidGV4dC9wbGFpblwiXSxcbiAgICAgIFtudWxsLCBudWxsLCBcImNzc1wiXVxuICAgIF1cbiAgfTtcblxuICBmdW5jdGlvbiBtYXliZUJhY2t1cChzdHJlYW0sIHBhdCwgc3R5bGUpIHtcbiAgICB2YXIgY3VyID0gc3RyZWFtLmN1cnJlbnQoKSwgY2xvc2UgPSBjdXIuc2VhcmNoKHBhdCk7XG4gICAgaWYgKGNsb3NlID4gLTEpIHtcbiAgICAgIHN0cmVhbS5iYWNrVXAoY3VyLmxlbmd0aCAtIGNsb3NlKTtcbiAgICB9IGVsc2UgaWYgKGN1ci5tYXRjaCgvPFxcLz8kLykpIHtcbiAgICAgIHN0cmVhbS5iYWNrVXAoY3VyLmxlbmd0aCk7XG4gICAgICBpZiAoIXN0cmVhbS5tYXRjaChwYXQsIGZhbHNlKSkgc3RyZWFtLm1hdGNoKGN1cik7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHZhciBhdHRyUmVnZXhwQ2FjaGUgPSB7fTtcbiAgZnVuY3Rpb24gZ2V0QXR0clJlZ2V4cChhdHRyKSB7XG4gICAgdmFyIHJlZ2V4cCA9IGF0dHJSZWdleHBDYWNoZVthdHRyXTtcbiAgICBpZiAocmVnZXhwKSByZXR1cm4gcmVnZXhwO1xuICAgIHJldHVybiBhdHRyUmVnZXhwQ2FjaGVbYXR0cl0gPSBuZXcgUmVnRXhwKFwiXFxcXHMrXCIgKyBhdHRyICsgXCJcXFxccyo9XFxcXHMqKCd8XFxcIik/KFteJ1xcXCJdKykoJ3xcXFwiKT9cXFxccypcIik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdHRyVmFsdWUodGV4dCwgYXR0cikge1xuICAgIHZhciBtYXRjaCA9IHRleHQubWF0Y2goZ2V0QXR0clJlZ2V4cChhdHRyKSlcbiAgICByZXR1cm4gbWF0Y2ggPyAvXlxccyooLio/KVxccyokLy5leGVjKG1hdGNoWzJdKVsxXSA6IFwiXCJcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhZ1JlZ2V4cCh0YWdOYW1lLCBhbmNob3JlZCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKChhbmNob3JlZCA/IFwiXlwiIDogXCJcIikgKyBcIjxcXC9cXHMqXCIgKyB0YWdOYW1lICsgXCJcXHMqPlwiLCBcImlcIik7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUYWdzKGZyb20sIHRvKSB7XG4gICAgZm9yICh2YXIgdGFnIGluIGZyb20pIHtcbiAgICAgIHZhciBkZXN0ID0gdG9bdGFnXSB8fCAodG9bdGFnXSA9IFtdKTtcbiAgICAgIHZhciBzb3VyY2UgPSBmcm9tW3RhZ107XG4gICAgICBmb3IgKHZhciBpID0gc291cmNlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICBkZXN0LnVuc2hpZnQoc291cmNlW2ldKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRNYXRjaGluZ01vZGUodGFnSW5mbywgdGFnVGV4dCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFnSW5mby5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNwZWMgPSB0YWdJbmZvW2ldO1xuICAgICAgaWYgKCFzcGVjWzBdIHx8IHNwZWNbMV0udGVzdChnZXRBdHRyVmFsdWUodGFnVGV4dCwgc3BlY1swXSkpKSByZXR1cm4gc3BlY1syXTtcbiAgICB9XG4gIH1cblxuICBDb2RlTWlycm9yLmRlZmluZU1vZGUoXCJodG1sbWl4ZWRcIiwgZnVuY3Rpb24gKGNvbmZpZywgcGFyc2VyQ29uZmlnKSB7XG4gICAgdmFyIGh0bWxNb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNvbmZpZywge1xuICAgICAgbmFtZTogXCJ4bWxcIixcbiAgICAgIGh0bWxNb2RlOiB0cnVlLFxuICAgICAgbXVsdGlsaW5lVGFnSW5kZW50RmFjdG9yOiBwYXJzZXJDb25maWcubXVsdGlsaW5lVGFnSW5kZW50RmFjdG9yLFxuICAgICAgbXVsdGlsaW5lVGFnSW5kZW50UGFzdFRhZzogcGFyc2VyQ29uZmlnLm11bHRpbGluZVRhZ0luZGVudFBhc3RUYWdcbiAgICB9KTtcblxuICAgIHZhciB0YWdzID0ge307XG4gICAgdmFyIGNvbmZpZ1RhZ3MgPSBwYXJzZXJDb25maWcgJiYgcGFyc2VyQ29uZmlnLnRhZ3MsIGNvbmZpZ1NjcmlwdCA9IHBhcnNlckNvbmZpZyAmJiBwYXJzZXJDb25maWcuc2NyaXB0VHlwZXM7XG4gICAgYWRkVGFncyhkZWZhdWx0VGFncywgdGFncyk7XG4gICAgaWYgKGNvbmZpZ1RhZ3MpIGFkZFRhZ3MoY29uZmlnVGFncywgdGFncyk7XG4gICAgaWYgKGNvbmZpZ1NjcmlwdCkgZm9yICh2YXIgaSA9IGNvbmZpZ1NjcmlwdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgIHRhZ3Muc2NyaXB0LnVuc2hpZnQoW1widHlwZVwiLCBjb25maWdTY3JpcHRbaV0ubWF0Y2hlcywgY29uZmlnU2NyaXB0W2ldLm1vZGVdKVxuXG4gICAgZnVuY3Rpb24gaHRtbChzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBodG1sTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmh0bWxTdGF0ZSksIHRhZyA9IC9cXGJ0YWdcXGIvLnRlc3Qoc3R5bGUpLCB0YWdOYW1lXG4gICAgICBpZiAodGFnICYmICEvWzw+XFxzXFwvXS8udGVzdChzdHJlYW0uY3VycmVudCgpKSAmJlxuICAgICAgICAgICh0YWdOYW1lID0gc3RhdGUuaHRtbFN0YXRlLnRhZ05hbWUgJiYgc3RhdGUuaHRtbFN0YXRlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgJiZcbiAgICAgICAgICB0YWdzLmhhc093blByb3BlcnR5KHRhZ05hbWUpKSB7XG4gICAgICAgIHN0YXRlLmluVGFnID0gdGFnTmFtZSArIFwiIFwiXG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmluVGFnICYmIHRhZyAmJiAvPiQvLnRlc3Qoc3RyZWFtLmN1cnJlbnQoKSkpIHtcbiAgICAgICAgdmFyIGluVGFnID0gL14oW1xcU10rKSAoLiopLy5leGVjKHN0YXRlLmluVGFnKVxuICAgICAgICBzdGF0ZS5pblRhZyA9IG51bGxcbiAgICAgICAgdmFyIG1vZGVTcGVjID0gc3RyZWFtLmN1cnJlbnQoKSA9PSBcIj5cIiAmJiBmaW5kTWF0Y2hpbmdNb2RlKHRhZ3NbaW5UYWdbMV1dLCBpblRhZ1syXSlcbiAgICAgICAgdmFyIG1vZGUgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBtb2RlU3BlYylcbiAgICAgICAgdmFyIGVuZFRhZ0EgPSBnZXRUYWdSZWdleHAoaW5UYWdbMV0sIHRydWUpLCBlbmRUYWcgPSBnZXRUYWdSZWdleHAoaW5UYWdbMV0sIGZhbHNlKTtcbiAgICAgICAgc3RhdGUudG9rZW4gPSBmdW5jdGlvbiAoc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICAgIGlmIChzdHJlYW0ubWF0Y2goZW5kVGFnQSwgZmFsc2UpKSB7XG4gICAgICAgICAgICBzdGF0ZS50b2tlbiA9IGh0bWw7XG4gICAgICAgICAgICBzdGF0ZS5sb2NhbFN0YXRlID0gc3RhdGUubG9jYWxNb2RlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWF5YmVCYWNrdXAoc3RyZWFtLCBlbmRUYWcsIHN0YXRlLmxvY2FsTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmxvY2FsU3RhdGUpKTtcbiAgICAgICAgfTtcbiAgICAgICAgc3RhdGUubG9jYWxNb2RlID0gbW9kZTtcbiAgICAgICAgc3RhdGUubG9jYWxTdGF0ZSA9IENvZGVNaXJyb3Iuc3RhcnRTdGF0ZShtb2RlLCBodG1sTW9kZS5pbmRlbnQoc3RhdGUuaHRtbFN0YXRlLCBcIlwiKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmluVGFnKSB7XG4gICAgICAgIHN0YXRlLmluVGFnICs9IHN0cmVhbS5jdXJyZW50KClcbiAgICAgICAgaWYgKHN0cmVhbS5lb2woKSkgc3RhdGUuaW5UYWcgKz0gXCIgXCJcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gQ29kZU1pcnJvci5zdGFydFN0YXRlKGh0bWxNb2RlKTtcbiAgICAgICAgcmV0dXJuIHt0b2tlbjogaHRtbCwgaW5UYWc6IG51bGwsIGxvY2FsTW9kZTogbnVsbCwgbG9jYWxTdGF0ZTogbnVsbCwgaHRtbFN0YXRlOiBzdGF0ZX07XG4gICAgICB9LFxuXG4gICAgICBjb3B5U3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgbG9jYWw7XG4gICAgICAgIGlmIChzdGF0ZS5sb2NhbFN0YXRlKSB7XG4gICAgICAgICAgbG9jYWwgPSBDb2RlTWlycm9yLmNvcHlTdGF0ZShzdGF0ZS5sb2NhbE1vZGUsIHN0YXRlLmxvY2FsU3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7dG9rZW46IHN0YXRlLnRva2VuLCBpblRhZzogc3RhdGUuaW5UYWcsXG4gICAgICAgICAgICAgICAgbG9jYWxNb2RlOiBzdGF0ZS5sb2NhbE1vZGUsIGxvY2FsU3RhdGU6IGxvY2FsLFxuICAgICAgICAgICAgICAgIGh0bWxTdGF0ZTogQ29kZU1pcnJvci5jb3B5U3RhdGUoaHRtbE1vZGUsIHN0YXRlLmh0bWxTdGF0ZSl9O1xuICAgICAgfSxcblxuICAgICAgdG9rZW46IGZ1bmN0aW9uIChzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS50b2tlbihzdHJlYW0sIHN0YXRlKTtcbiAgICAgIH0sXG5cbiAgICAgIGluZGVudDogZnVuY3Rpb24gKHN0YXRlLCB0ZXh0QWZ0ZXIsIGxpbmUpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5sb2NhbE1vZGUgfHwgL15cXHMqPFxcLy8udGVzdCh0ZXh0QWZ0ZXIpKVxuICAgICAgICAgIHJldHVybiBodG1sTW9kZS5pbmRlbnQoc3RhdGUuaHRtbFN0YXRlLCB0ZXh0QWZ0ZXIpO1xuICAgICAgICBlbHNlIGlmIChzdGF0ZS5sb2NhbE1vZGUuaW5kZW50KVxuICAgICAgICAgIHJldHVybiBzdGF0ZS5sb2NhbE1vZGUuaW5kZW50KHN0YXRlLmxvY2FsU3RhdGUsIHRleHRBZnRlciwgbGluZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gQ29kZU1pcnJvci5QYXNzO1xuICAgICAgfSxcblxuICAgICAgaW5uZXJNb2RlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHtzdGF0ZTogc3RhdGUubG9jYWxTdGF0ZSB8fCBzdGF0ZS5odG1sU3RhdGUsIG1vZGU6IHN0YXRlLmxvY2FsTW9kZSB8fCBodG1sTW9kZX07XG4gICAgICB9XG4gICAgfTtcbiAgfSwgXCJ4bWxcIiwgXCJqYXZhc2NyaXB0XCIsIFwiY3NzXCIpO1xuXG4gIENvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQvaHRtbFwiLCBcImh0bWxtaXhlZFwiKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL2h0bWxtaXhlZC9odG1sbWl4ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDE3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHA6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwiamF2YXNjcmlwdFwiLCBmdW5jdGlvbihjb25maWcsIHBhcnNlckNvbmZpZykge1xuICB2YXIgaW5kZW50VW5pdCA9IGNvbmZpZy5pbmRlbnRVbml0O1xuICB2YXIgc3RhdGVtZW50SW5kZW50ID0gcGFyc2VyQ29uZmlnLnN0YXRlbWVudEluZGVudDtcbiAgdmFyIGpzb25sZE1vZGUgPSBwYXJzZXJDb25maWcuanNvbmxkO1xuICB2YXIganNvbk1vZGUgPSBwYXJzZXJDb25maWcuanNvbiB8fCBqc29ubGRNb2RlO1xuICB2YXIgaXNUUyA9IHBhcnNlckNvbmZpZy50eXBlc2NyaXB0O1xuICB2YXIgd29yZFJFID0gcGFyc2VyQ29uZmlnLndvcmRDaGFyYWN0ZXJzIHx8IC9bXFx3JFxceGExLVxcdWZmZmZdLztcblxuICAvLyBUb2tlbml6ZXJcblxuICB2YXIga2V5d29yZHMgPSBmdW5jdGlvbigpe1xuICAgIGZ1bmN0aW9uIGt3KHR5cGUpIHtyZXR1cm4ge3R5cGU6IHR5cGUsIHN0eWxlOiBcImtleXdvcmRcIn07fVxuICAgIHZhciBBID0ga3coXCJrZXl3b3JkIGFcIiksIEIgPSBrdyhcImtleXdvcmQgYlwiKSwgQyA9IGt3KFwia2V5d29yZCBjXCIpLCBEID0ga3coXCJrZXl3b3JkIGRcIik7XG4gICAgdmFyIG9wZXJhdG9yID0ga3coXCJvcGVyYXRvclwiKSwgYXRvbSA9IHt0eXBlOiBcImF0b21cIiwgc3R5bGU6IFwiYXRvbVwifTtcblxuICAgIHJldHVybiB7XG4gICAgICBcImlmXCI6IGt3KFwiaWZcIiksIFwid2hpbGVcIjogQSwgXCJ3aXRoXCI6IEEsIFwiZWxzZVwiOiBCLCBcImRvXCI6IEIsIFwidHJ5XCI6IEIsIFwiZmluYWxseVwiOiBCLFxuICAgICAgXCJyZXR1cm5cIjogRCwgXCJicmVha1wiOiBELCBcImNvbnRpbnVlXCI6IEQsIFwibmV3XCI6IGt3KFwibmV3XCIpLCBcImRlbGV0ZVwiOiBDLCBcInZvaWRcIjogQywgXCJ0aHJvd1wiOiBDLFxuICAgICAgXCJkZWJ1Z2dlclwiOiBrdyhcImRlYnVnZ2VyXCIpLCBcInZhclwiOiBrdyhcInZhclwiKSwgXCJjb25zdFwiOiBrdyhcInZhclwiKSwgXCJsZXRcIjoga3coXCJ2YXJcIiksXG4gICAgICBcImZ1bmN0aW9uXCI6IGt3KFwiZnVuY3Rpb25cIiksIFwiY2F0Y2hcIjoga3coXCJjYXRjaFwiKSxcbiAgICAgIFwiZm9yXCI6IGt3KFwiZm9yXCIpLCBcInN3aXRjaFwiOiBrdyhcInN3aXRjaFwiKSwgXCJjYXNlXCI6IGt3KFwiY2FzZVwiKSwgXCJkZWZhdWx0XCI6IGt3KFwiZGVmYXVsdFwiKSxcbiAgICAgIFwiaW5cIjogb3BlcmF0b3IsIFwidHlwZW9mXCI6IG9wZXJhdG9yLCBcImluc3RhbmNlb2ZcIjogb3BlcmF0b3IsXG4gICAgICBcInRydWVcIjogYXRvbSwgXCJmYWxzZVwiOiBhdG9tLCBcIm51bGxcIjogYXRvbSwgXCJ1bmRlZmluZWRcIjogYXRvbSwgXCJOYU5cIjogYXRvbSwgXCJJbmZpbml0eVwiOiBhdG9tLFxuICAgICAgXCJ0aGlzXCI6IGt3KFwidGhpc1wiKSwgXCJjbGFzc1wiOiBrdyhcImNsYXNzXCIpLCBcInN1cGVyXCI6IGt3KFwiYXRvbVwiKSxcbiAgICAgIFwieWllbGRcIjogQywgXCJleHBvcnRcIjoga3coXCJleHBvcnRcIiksIFwiaW1wb3J0XCI6IGt3KFwiaW1wb3J0XCIpLCBcImV4dGVuZHNcIjogQyxcbiAgICAgIFwiYXdhaXRcIjogQ1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgaXNPcGVyYXRvckNoYXIgPSAvWytcXC0qJiU9PD4hP3x+XkBdLztcbiAgdmFyIGlzSnNvbmxkS2V5d29yZCA9IC9eQChjb250ZXh0fGlkfHZhbHVlfGxhbmd1YWdlfHR5cGV8Y29udGFpbmVyfGxpc3R8c2V0fHJldmVyc2V8aW5kZXh8YmFzZXx2b2NhYnxncmFwaClcIi87XG5cbiAgZnVuY3Rpb24gcmVhZFJlZ2V4cChzdHJlYW0pIHtcbiAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBuZXh0LCBpblNldCA9IGZhbHNlO1xuICAgIHdoaWxlICgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICAgIGlmICghZXNjYXBlZCkge1xuICAgICAgICBpZiAobmV4dCA9PSBcIi9cIiAmJiAhaW5TZXQpIHJldHVybjtcbiAgICAgICAgaWYgKG5leHQgPT0gXCJbXCIpIGluU2V0ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoaW5TZXQgJiYgbmV4dCA9PSBcIl1cIikgaW5TZXQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZCAmJiBuZXh0ID09IFwiXFxcXFwiO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVzZWQgYXMgc2NyYXRjaCB2YXJpYWJsZXMgdG8gY29tbXVuaWNhdGUgbXVsdGlwbGUgdmFsdWVzIHdpdGhvdXRcbiAgLy8gY29uc2luZyB1cCB0b25zIG9mIG9iamVjdHMuXG4gIHZhciB0eXBlLCBjb250ZW50O1xuICBmdW5jdGlvbiByZXQodHAsIHN0eWxlLCBjb250KSB7XG4gICAgdHlwZSA9IHRwOyBjb250ZW50ID0gY29udDtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cbiAgZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpO1xuICAgIGlmIChjaCA9PSAnXCInIHx8IGNoID09IFwiJ1wiKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuU3RyaW5nKGNoKTtcbiAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKGNoID09IFwiLlwiICYmIHN0cmVhbS5tYXRjaCgvXlxcZCsoPzpbZUVdWytcXC1dP1xcZCspPy8pKSB7XG4gICAgICByZXR1cm4gcmV0KFwibnVtYmVyXCIsIFwibnVtYmVyXCIpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIuXCIgJiYgc3RyZWFtLm1hdGNoKFwiLi5cIikpIHtcbiAgICAgIHJldHVybiByZXQoXCJzcHJlYWRcIiwgXCJtZXRhXCIpO1xuICAgIH0gZWxzZSBpZiAoL1tcXFtcXF17fVxcKFxcKSw7XFw6XFwuXS8udGVzdChjaCkpIHtcbiAgICAgIHJldHVybiByZXQoY2gpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCI9XCIgJiYgc3RyZWFtLmVhdChcIj5cIikpIHtcbiAgICAgIHJldHVybiByZXQoXCI9PlwiLCBcIm9wZXJhdG9yXCIpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIwXCIgJiYgc3RyZWFtLmVhdCgveC9pKSkge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFxkYS1mXS9pKTtcbiAgICAgIHJldHVybiByZXQoXCJudW1iZXJcIiwgXCJudW1iZXJcIik7XG4gICAgfSBlbHNlIGlmIChjaCA9PSBcIjBcIiAmJiBzdHJlYW0uZWF0KC9vL2kpKSB7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoL1swLTddL2kpO1xuICAgICAgcmV0dXJuIHJldChcIm51bWJlclwiLCBcIm51bWJlclwiKTtcbiAgICB9IGVsc2UgaWYgKGNoID09IFwiMFwiICYmIHN0cmVhbS5lYXQoL2IvaSkpIHtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvWzAxXS9pKTtcbiAgICAgIHJldHVybiByZXQoXCJudW1iZXJcIiwgXCJudW1iZXJcIik7XG4gICAgfSBlbHNlIGlmICgvXFxkLy50ZXN0KGNoKSkge1xuICAgICAgc3RyZWFtLm1hdGNoKC9eXFxkKig/OlxcLlxcZCopPyg/OltlRV1bK1xcLV0/XFxkKyk/Lyk7XG4gICAgICByZXR1cm4gcmV0KFwibnVtYmVyXCIsIFwibnVtYmVyXCIpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIvXCIpIHtcbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiKlwiKSkge1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ29tbWVudDtcbiAgICAgICAgcmV0dXJuIHRva2VuQ29tbWVudChzdHJlYW0sIHN0YXRlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLmVhdChcIi9cIikpIHtcbiAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICByZXR1cm4gcmV0KFwiY29tbWVudFwiLCBcImNvbW1lbnRcIik7XG4gICAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb25BbGxvd2VkKHN0cmVhbSwgc3RhdGUsIDEpKSB7XG4gICAgICAgIHJlYWRSZWdleHAoc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLm1hdGNoKC9eXFxiKChbZ2lteXVdKSg/IVtnaW15dV0qXFwyKSkrXFxiLyk7XG4gICAgICAgIHJldHVybiByZXQoXCJyZWdleHBcIiwgXCJzdHJpbmctMlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmVhbS5lYXQoXCI9XCIpO1xuICAgICAgICByZXR1cm4gcmV0KFwib3BlcmF0b3JcIiwgXCJvcGVyYXRvclwiLCBzdHJlYW0uY3VycmVudCgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoID09IFwiYFwiKSB7XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuUXVhc2k7XG4gICAgICByZXR1cm4gdG9rZW5RdWFzaShzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKGNoID09IFwiI1wiKSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICByZXR1cm4gcmV0KFwiZXJyb3JcIiwgXCJlcnJvclwiKTtcbiAgICB9IGVsc2UgaWYgKGlzT3BlcmF0b3JDaGFyLnRlc3QoY2gpKSB7XG4gICAgICBpZiAoY2ggIT0gXCI+XCIgfHwgIXN0YXRlLmxleGljYWwgfHwgc3RhdGUubGV4aWNhbC50eXBlICE9IFwiPlwiKSB7XG4gICAgICAgIGlmIChzdHJlYW0uZWF0KFwiPVwiKSkge1xuICAgICAgICAgIGlmIChjaCA9PSBcIiFcIiB8fCBjaCA9PSBcIj1cIikgc3RyZWFtLmVhdChcIj1cIilcbiAgICAgICAgfSBlbHNlIGlmICgvWzw+KitcXC1dLy50ZXN0KGNoKSkge1xuICAgICAgICAgIHN0cmVhbS5lYXQoY2gpXG4gICAgICAgICAgaWYgKGNoID09IFwiPlwiKSBzdHJlYW0uZWF0KGNoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0KFwib3BlcmF0b3JcIiwgXCJvcGVyYXRvclwiLCBzdHJlYW0uY3VycmVudCgpKTtcbiAgICB9IGVsc2UgaWYgKHdvcmRSRS50ZXN0KGNoKSkge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKHdvcmRSRSk7XG4gICAgICB2YXIgd29yZCA9IHN0cmVhbS5jdXJyZW50KClcbiAgICAgIGlmIChzdGF0ZS5sYXN0VHlwZSAhPSBcIi5cIikge1xuICAgICAgICBpZiAoa2V5d29yZHMucHJvcGVydHlJc0VudW1lcmFibGUod29yZCkpIHtcbiAgICAgICAgICB2YXIga3cgPSBrZXl3b3Jkc1t3b3JkXVxuICAgICAgICAgIHJldHVybiByZXQoa3cudHlwZSwga3cuc3R5bGUsIHdvcmQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdvcmQgPT0gXCJhc3luY1wiICYmIHN0cmVhbS5tYXRjaCgvXihcXHN8XFwvXFwqLio/XFwqXFwvKSpbXFxbXFwoXFx3XS8sIGZhbHNlKSlcbiAgICAgICAgICByZXR1cm4gcmV0KFwiYXN5bmNcIiwgXCJrZXl3b3JkXCIsIHdvcmQpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0KFwidmFyaWFibGVcIiwgXCJ2YXJpYWJsZVwiLCB3b3JkKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRva2VuU3RyaW5nKHF1b3RlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsIG5leHQ7XG4gICAgICBpZiAoanNvbmxkTW9kZSAmJiBzdHJlYW0ucGVlaygpID09IFwiQFwiICYmIHN0cmVhbS5tYXRjaChpc0pzb25sZEtleXdvcmQpKXtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICAgIHJldHVybiByZXQoXCJqc29ubGQta2V5d29yZFwiLCBcIm1ldGFcIik7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKG5leHQgPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChuZXh0ID09IHF1b3RlICYmICFlc2NhcGVkKSBicmVhaztcbiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICBpZiAoIWVzY2FwZWQpIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgcmV0dXJuIHJldChcInN0cmluZ1wiLCBcInN0cmluZ1wiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5Db21tZW50KHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgbWF5YmVFbmQgPSBmYWxzZSwgY2g7XG4gICAgd2hpbGUgKGNoID0gc3RyZWFtLm5leHQoKSkge1xuICAgICAgaWYgKGNoID09IFwiL1wiICYmIG1heWJlRW5kKSB7XG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG1heWJlRW5kID0gKGNoID09IFwiKlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldChcImNvbW1lbnRcIiwgXCJjb21tZW50XCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5RdWFzaShzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgbmV4dDtcbiAgICB3aGlsZSAoKG5leHQgPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICBpZiAoIWVzY2FwZWQgJiYgKG5leHQgPT0gXCJgXCIgfHwgbmV4dCA9PSBcIiRcIiAmJiBzdHJlYW0uZWF0KFwie1wiKSkpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCI7XG4gICAgfVxuICAgIHJldHVybiByZXQoXCJxdWFzaVwiLCBcInN0cmluZy0yXCIsIHN0cmVhbS5jdXJyZW50KCkpO1xuICB9XG5cbiAgdmFyIGJyYWNrZXRzID0gXCIoW3t9XSlcIjtcbiAgLy8gVGhpcyBpcyBhIGNydWRlIGxvb2thaGVhZCB0cmljayB0byB0cnkgYW5kIG5vdGljZSB0aGF0IHdlJ3JlXG4gIC8vIHBhcnNpbmcgdGhlIGFyZ3VtZW50IHBhdHRlcm5zIGZvciBhIGZhdC1hcnJvdyBmdW5jdGlvbiBiZWZvcmUgd2VcbiAgLy8gYWN0dWFsbHkgaGl0IHRoZSBhcnJvdyB0b2tlbi4gSXQgb25seSB3b3JrcyBpZiB0aGUgYXJyb3cgaXMgb25cbiAgLy8gdGhlIHNhbWUgbGluZSBhcyB0aGUgYXJndW1lbnRzIGFuZCB0aGVyZSdzIG5vIHN0cmFuZ2Ugbm9pc2VcbiAgLy8gKGNvbW1lbnRzKSBpbiBiZXR3ZWVuLiBGYWxsYmFjayBpcyB0byBvbmx5IG5vdGljZSB3aGVuIHdlIGhpdCB0aGVcbiAgLy8gYXJyb3csIGFuZCBub3QgZGVjbGFyZSB0aGUgYXJndW1lbnRzIGFzIGxvY2FscyBmb3IgdGhlIGFycm93XG4gIC8vIGJvZHkuXG4gIGZ1bmN0aW9uIGZpbmRGYXRBcnJvdyhzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLmZhdEFycm93QXQpIHN0YXRlLmZhdEFycm93QXQgPSBudWxsO1xuICAgIHZhciBhcnJvdyA9IHN0cmVhbS5zdHJpbmcuaW5kZXhPZihcIj0+XCIsIHN0cmVhbS5zdGFydCk7XG4gICAgaWYgKGFycm93IDwgMCkgcmV0dXJuO1xuXG4gICAgaWYgKGlzVFMpIHsgLy8gVHJ5IHRvIHNraXAgVHlwZVNjcmlwdCByZXR1cm4gdHlwZSBkZWNsYXJhdGlvbnMgYWZ0ZXIgdGhlIGFyZ3VtZW50c1xuICAgICAgdmFyIG0gPSAvOlxccyooPzpcXHcrKD86PFtePl0qPnxcXFtcXF0pP3xcXHtbXn1dKlxcfSlcXHMqJC8uZXhlYyhzdHJlYW0uc3RyaW5nLnNsaWNlKHN0cmVhbS5zdGFydCwgYXJyb3cpKVxuICAgICAgaWYgKG0pIGFycm93ID0gbS5pbmRleFxuICAgIH1cblxuICAgIHZhciBkZXB0aCA9IDAsIHNhd1NvbWV0aGluZyA9IGZhbHNlO1xuICAgIGZvciAodmFyIHBvcyA9IGFycm93IC0gMTsgcG9zID49IDA7IC0tcG9zKSB7XG4gICAgICB2YXIgY2ggPSBzdHJlYW0uc3RyaW5nLmNoYXJBdChwb3MpO1xuICAgICAgdmFyIGJyYWNrZXQgPSBicmFja2V0cy5pbmRleE9mKGNoKTtcbiAgICAgIGlmIChicmFja2V0ID49IDAgJiYgYnJhY2tldCA8IDMpIHtcbiAgICAgICAgaWYgKCFkZXB0aCkgeyArK3BvczsgYnJlYWs7IH1cbiAgICAgICAgaWYgKC0tZGVwdGggPT0gMCkgeyBpZiAoY2ggPT0gXCIoXCIpIHNhd1NvbWV0aGluZyA9IHRydWU7IGJyZWFrOyB9XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXQgPj0gMyAmJiBicmFja2V0IDwgNikge1xuICAgICAgICArK2RlcHRoO1xuICAgICAgfSBlbHNlIGlmICh3b3JkUkUudGVzdChjaCkpIHtcbiAgICAgICAgc2F3U29tZXRoaW5nID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoL1tcIidcXC9dLy50ZXN0KGNoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHNhd1NvbWV0aGluZyAmJiAhZGVwdGgpIHtcbiAgICAgICAgKytwb3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2F3U29tZXRoaW5nICYmICFkZXB0aCkgc3RhdGUuZmF0QXJyb3dBdCA9IHBvcztcbiAgfVxuXG4gIC8vIFBhcnNlclxuXG4gIHZhciBhdG9taWNUeXBlcyA9IHtcImF0b21cIjogdHJ1ZSwgXCJudW1iZXJcIjogdHJ1ZSwgXCJ2YXJpYWJsZVwiOiB0cnVlLCBcInN0cmluZ1wiOiB0cnVlLCBcInJlZ2V4cFwiOiB0cnVlLCBcInRoaXNcIjogdHJ1ZSwgXCJqc29ubGQta2V5d29yZFwiOiB0cnVlfTtcblxuICBmdW5jdGlvbiBKU0xleGljYWwoaW5kZW50ZWQsIGNvbHVtbiwgdHlwZSwgYWxpZ24sIHByZXYsIGluZm8pIHtcbiAgICB0aGlzLmluZGVudGVkID0gaW5kZW50ZWQ7XG4gICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgIHRoaXMuaW5mbyA9IGluZm87XG4gICAgaWYgKGFsaWduICE9IG51bGwpIHRoaXMuYWxpZ24gPSBhbGlnbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluU2NvcGUoc3RhdGUsIHZhcm5hbWUpIHtcbiAgICBmb3IgKHZhciB2ID0gc3RhdGUubG9jYWxWYXJzOyB2OyB2ID0gdi5uZXh0KVxuICAgICAgaWYgKHYubmFtZSA9PSB2YXJuYW1lKSByZXR1cm4gdHJ1ZTtcbiAgICBmb3IgKHZhciBjeCA9IHN0YXRlLmNvbnRleHQ7IGN4OyBjeCA9IGN4LnByZXYpIHtcbiAgICAgIGZvciAodmFyIHYgPSBjeC52YXJzOyB2OyB2ID0gdi5uZXh0KVxuICAgICAgICBpZiAodi5uYW1lID09IHZhcm5hbWUpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSlMoc3RhdGUsIHN0eWxlLCB0eXBlLCBjb250ZW50LCBzdHJlYW0pIHtcbiAgICB2YXIgY2MgPSBzdGF0ZS5jYztcbiAgICAvLyBDb21tdW5pY2F0ZSBvdXIgY29udGV4dCB0byB0aGUgY29tYmluYXRvcnMuXG4gICAgLy8gKExlc3Mgd2FzdGVmdWwgdGhhbiBjb25zaW5nIHVwIGEgaHVuZHJlZCBjbG9zdXJlcyBvbiBldmVyeSBjYWxsLilcbiAgICBjeC5zdGF0ZSA9IHN0YXRlOyBjeC5zdHJlYW0gPSBzdHJlYW07IGN4Lm1hcmtlZCA9IG51bGwsIGN4LmNjID0gY2M7IGN4LnN0eWxlID0gc3R5bGU7XG5cbiAgICBpZiAoIXN0YXRlLmxleGljYWwuaGFzT3duUHJvcGVydHkoXCJhbGlnblwiKSlcbiAgICAgIHN0YXRlLmxleGljYWwuYWxpZ24gPSB0cnVlO1xuXG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGNvbWJpbmF0b3IgPSBjYy5sZW5ndGggPyBjYy5wb3AoKSA6IGpzb25Nb2RlID8gZXhwcmVzc2lvbiA6IHN0YXRlbWVudDtcbiAgICAgIGlmIChjb21iaW5hdG9yKHR5cGUsIGNvbnRlbnQpKSB7XG4gICAgICAgIHdoaWxlKGNjLmxlbmd0aCAmJiBjY1tjYy5sZW5ndGggLSAxXS5sZXgpXG4gICAgICAgICAgY2MucG9wKCkoKTtcbiAgICAgICAgaWYgKGN4Lm1hcmtlZCkgcmV0dXJuIGN4Lm1hcmtlZDtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJ2YXJpYWJsZVwiICYmIGluU2NvcGUoc3RhdGUsIGNvbnRlbnQpKSByZXR1cm4gXCJ2YXJpYWJsZS0yXCI7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21iaW5hdG9yIHV0aWxzXG5cbiAgdmFyIGN4ID0ge3N0YXRlOiBudWxsLCBjb2x1bW46IG51bGwsIG1hcmtlZDogbnVsbCwgY2M6IG51bGx9O1xuICBmdW5jdGlvbiBwYXNzKCkge1xuICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGN4LmNjLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgfVxuICBmdW5jdGlvbiBjb250KCkge1xuICAgIHBhc3MuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiByZWdpc3Rlcih2YXJuYW1lKSB7XG4gICAgZnVuY3Rpb24gaW5MaXN0KGxpc3QpIHtcbiAgICAgIGZvciAodmFyIHYgPSBsaXN0OyB2OyB2ID0gdi5uZXh0KVxuICAgICAgICBpZiAodi5uYW1lID09IHZhcm5hbWUpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgc3RhdGUgPSBjeC5zdGF0ZTtcbiAgICBjeC5tYXJrZWQgPSBcImRlZlwiO1xuICAgIGlmIChzdGF0ZS5jb250ZXh0KSB7XG4gICAgICBpZiAoaW5MaXN0KHN0YXRlLmxvY2FsVmFycykpIHJldHVybjtcbiAgICAgIHN0YXRlLmxvY2FsVmFycyA9IHtuYW1lOiB2YXJuYW1lLCBuZXh0OiBzdGF0ZS5sb2NhbFZhcnN9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5MaXN0KHN0YXRlLmdsb2JhbFZhcnMpKSByZXR1cm47XG4gICAgICBpZiAocGFyc2VyQ29uZmlnLmdsb2JhbFZhcnMpXG4gICAgICAgIHN0YXRlLmdsb2JhbFZhcnMgPSB7bmFtZTogdmFybmFtZSwgbmV4dDogc3RhdGUuZ2xvYmFsVmFyc307XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNNb2RpZmllcihuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgPT0gXCJwdWJsaWNcIiB8fCBuYW1lID09IFwicHJpdmF0ZVwiIHx8IG5hbWUgPT0gXCJwcm90ZWN0ZWRcIiB8fCBuYW1lID09IFwiYWJzdHJhY3RcIiB8fCBuYW1lID09IFwicmVhZG9ubHlcIlxuICB9XG5cbiAgLy8gQ29tYmluYXRvcnNcblxuICB2YXIgZGVmYXVsdFZhcnMgPSB7bmFtZTogXCJ0aGlzXCIsIG5leHQ6IHtuYW1lOiBcImFyZ3VtZW50c1wifX07XG4gIGZ1bmN0aW9uIHB1c2hjb250ZXh0KCkge1xuICAgIGN4LnN0YXRlLmNvbnRleHQgPSB7cHJldjogY3guc3RhdGUuY29udGV4dCwgdmFyczogY3guc3RhdGUubG9jYWxWYXJzfTtcbiAgICBjeC5zdGF0ZS5sb2NhbFZhcnMgPSBkZWZhdWx0VmFycztcbiAgfVxuICBmdW5jdGlvbiBwb3Bjb250ZXh0KCkge1xuICAgIGN4LnN0YXRlLmxvY2FsVmFycyA9IGN4LnN0YXRlLmNvbnRleHQudmFycztcbiAgICBjeC5zdGF0ZS5jb250ZXh0ID0gY3guc3RhdGUuY29udGV4dC5wcmV2O1xuICB9XG4gIGZ1bmN0aW9uIHB1c2hsZXgodHlwZSwgaW5mbykge1xuICAgIHZhciByZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGN4LnN0YXRlLCBpbmRlbnQgPSBzdGF0ZS5pbmRlbnRlZDtcbiAgICAgIGlmIChzdGF0ZS5sZXhpY2FsLnR5cGUgPT0gXCJzdGF0XCIpIGluZGVudCA9IHN0YXRlLmxleGljYWwuaW5kZW50ZWQ7XG4gICAgICBlbHNlIGZvciAodmFyIG91dGVyID0gc3RhdGUubGV4aWNhbDsgb3V0ZXIgJiYgb3V0ZXIudHlwZSA9PSBcIilcIiAmJiBvdXRlci5hbGlnbjsgb3V0ZXIgPSBvdXRlci5wcmV2KVxuICAgICAgICBpbmRlbnQgPSBvdXRlci5pbmRlbnRlZDtcbiAgICAgIHN0YXRlLmxleGljYWwgPSBuZXcgSlNMZXhpY2FsKGluZGVudCwgY3guc3RyZWFtLmNvbHVtbigpLCB0eXBlLCBudWxsLCBzdGF0ZS5sZXhpY2FsLCBpbmZvKTtcbiAgICB9O1xuICAgIHJlc3VsdC5sZXggPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gcG9wbGV4KCkge1xuICAgIHZhciBzdGF0ZSA9IGN4LnN0YXRlO1xuICAgIGlmIChzdGF0ZS5sZXhpY2FsLnByZXYpIHtcbiAgICAgIGlmIChzdGF0ZS5sZXhpY2FsLnR5cGUgPT0gXCIpXCIpXG4gICAgICAgIHN0YXRlLmluZGVudGVkID0gc3RhdGUubGV4aWNhbC5pbmRlbnRlZDtcbiAgICAgIHN0YXRlLmxleGljYWwgPSBzdGF0ZS5sZXhpY2FsLnByZXY7XG4gICAgfVxuICB9XG4gIHBvcGxleC5sZXggPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIGV4cGVjdCh3YW50ZWQpIHtcbiAgICBmdW5jdGlvbiBleHAodHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT0gd2FudGVkKSByZXR1cm4gY29udCgpO1xuICAgICAgZWxzZSBpZiAod2FudGVkID09IFwiO1wiKSByZXR1cm4gcGFzcygpO1xuICAgICAgZWxzZSByZXR1cm4gY29udChleHApO1xuICAgIH07XG4gICAgcmV0dXJuIGV4cDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXRlbWVudCh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwidmFyXCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJ2YXJkZWZcIiwgdmFsdWUubGVuZ3RoKSwgdmFyZGVmLCBleHBlY3QoXCI7XCIpLCBwb3BsZXgpO1xuICAgIGlmICh0eXBlID09IFwia2V5d29yZCBhXCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJmb3JtXCIpLCBwYXJlbkV4cHIsIHN0YXRlbWVudCwgcG9wbGV4KTtcbiAgICBpZiAodHlwZSA9PSBcImtleXdvcmQgYlwiKSByZXR1cm4gY29udChwdXNobGV4KFwiZm9ybVwiKSwgc3RhdGVtZW50LCBwb3BsZXgpO1xuICAgIGlmICh0eXBlID09IFwia2V5d29yZCBkXCIpIHJldHVybiBjeC5zdHJlYW0ubWF0Y2goL15cXHMqJC8sIGZhbHNlKSA/IGNvbnQoKSA6IGNvbnQocHVzaGxleChcInN0YXRcIiksIG1heWJlZXhwcmVzc2lvbiwgZXhwZWN0KFwiO1wiKSwgcG9wbGV4KTtcbiAgICBpZiAodHlwZSA9PSBcImRlYnVnZ2VyXCIpIHJldHVybiBjb250KGV4cGVjdChcIjtcIikpO1xuICAgIGlmICh0eXBlID09IFwie1wiKSByZXR1cm4gY29udChwdXNobGV4KFwifVwiKSwgYmxvY2ssIHBvcGxleCk7XG4gICAgaWYgKHR5cGUgPT0gXCI7XCIpIHJldHVybiBjb250KCk7XG4gICAgaWYgKHR5cGUgPT0gXCJpZlwiKSB7XG4gICAgICBpZiAoY3guc3RhdGUubGV4aWNhbC5pbmZvID09IFwiZWxzZVwiICYmIGN4LnN0YXRlLmNjW2N4LnN0YXRlLmNjLmxlbmd0aCAtIDFdID09IHBvcGxleClcbiAgICAgICAgY3guc3RhdGUuY2MucG9wKCkoKTtcbiAgICAgIHJldHVybiBjb250KHB1c2hsZXgoXCJmb3JtXCIpLCBwYXJlbkV4cHIsIHN0YXRlbWVudCwgcG9wbGV4LCBtYXliZWVsc2UpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjb250KGZ1bmN0aW9uZGVmKTtcbiAgICBpZiAodHlwZSA9PSBcImZvclwiKSByZXR1cm4gY29udChwdXNobGV4KFwiZm9ybVwiKSwgZm9yc3BlYywgc3RhdGVtZW50LCBwb3BsZXgpO1xuICAgIGlmICh0eXBlID09IFwiY2xhc3NcIiB8fCAoaXNUUyAmJiB2YWx1ZSA9PSBcImludGVyZmFjZVwiKSkgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQocHVzaGxleChcImZvcm1cIiksIGNsYXNzTmFtZSwgcG9wbGV4KTsgfVxuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIikge1xuICAgICAgaWYgKGlzVFMgJiYgdmFsdWUgPT0gXCJkZWNsYXJlXCIpIHtcbiAgICAgICAgY3gubWFya2VkID0gXCJrZXl3b3JkXCJcbiAgICAgICAgcmV0dXJuIGNvbnQoc3RhdGVtZW50KVxuICAgICAgfSBlbHNlIGlmIChpc1RTICYmICh2YWx1ZSA9PSBcIm1vZHVsZVwiIHx8IHZhbHVlID09IFwiZW51bVwiIHx8IHZhbHVlID09IFwidHlwZVwiKSAmJiBjeC5zdHJlYW0ubWF0Y2goL15cXHMqXFx3LywgZmFsc2UpKSB7XG4gICAgICAgIGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiXG4gICAgICAgIGlmICh2YWx1ZSA9PSBcImVudW1cIikgcmV0dXJuIGNvbnQoZW51bWRlZik7XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09IFwidHlwZVwiKSByZXR1cm4gY29udCh0eXBlZXhwciwgZXhwZWN0KFwib3BlcmF0b3JcIiksIHR5cGVleHByLCBleHBlY3QoXCI7XCIpKTtcbiAgICAgICAgZWxzZSByZXR1cm4gY29udChwdXNobGV4KFwiZm9ybVwiKSwgcGF0dGVybiwgZXhwZWN0KFwie1wiKSwgcHVzaGxleChcIn1cIiksIGJsb2NrLCBwb3BsZXgsIHBvcGxleClcbiAgICAgIH0gZWxzZSBpZiAoaXNUUyAmJiB2YWx1ZSA9PSBcIm5hbWVzcGFjZVwiKSB7XG4gICAgICAgIGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiXG4gICAgICAgIHJldHVybiBjb250KHB1c2hsZXgoXCJmb3JtXCIpLCBleHByZXNzaW9uLCBibG9jaywgcG9wbGV4KVxuICAgICAgfSBlbHNlIGlmIChpc1RTICYmIHZhbHVlID09IFwiYWJzdHJhY3RcIikge1xuICAgICAgICBjeC5tYXJrZWQgPSBcImtleXdvcmRcIlxuICAgICAgICByZXR1cm4gY29udChzdGF0ZW1lbnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udChwdXNobGV4KFwic3RhdFwiKSwgbWF5YmVsYWJlbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlID09IFwic3dpdGNoXCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJmb3JtXCIpLCBwYXJlbkV4cHIsIGV4cGVjdChcIntcIiksIHB1c2hsZXgoXCJ9XCIsIFwic3dpdGNoXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jaywgcG9wbGV4LCBwb3BsZXgpO1xuICAgIGlmICh0eXBlID09IFwiY2FzZVwiKSByZXR1cm4gY29udChleHByZXNzaW9uLCBleHBlY3QoXCI6XCIpKTtcbiAgICBpZiAodHlwZSA9PSBcImRlZmF1bHRcIikgcmV0dXJuIGNvbnQoZXhwZWN0KFwiOlwiKSk7XG4gICAgaWYgKHR5cGUgPT0gXCJjYXRjaFwiKSByZXR1cm4gY29udChwdXNobGV4KFwiZm9ybVwiKSwgcHVzaGNvbnRleHQsIGV4cGVjdChcIihcIiksIGZ1bmFyZywgZXhwZWN0KFwiKVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQsIHBvcGxleCwgcG9wY29udGV4dCk7XG4gICAgaWYgKHR5cGUgPT0gXCJleHBvcnRcIikgcmV0dXJuIGNvbnQocHVzaGxleChcInN0YXRcIiksIGFmdGVyRXhwb3J0LCBwb3BsZXgpO1xuICAgIGlmICh0eXBlID09IFwiaW1wb3J0XCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJzdGF0XCIpLCBhZnRlckltcG9ydCwgcG9wbGV4KTtcbiAgICBpZiAodHlwZSA9PSBcImFzeW5jXCIpIHJldHVybiBjb250KHN0YXRlbWVudClcbiAgICBpZiAodmFsdWUgPT0gXCJAXCIpIHJldHVybiBjb250KGV4cHJlc3Npb24sIHN0YXRlbWVudClcbiAgICByZXR1cm4gcGFzcyhwdXNobGV4KFwic3RhdFwiKSwgZXhwcmVzc2lvbiwgZXhwZWN0KFwiO1wiKSwgcG9wbGV4KTtcbiAgfVxuICBmdW5jdGlvbiBleHByZXNzaW9uKHR5cGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25Jbm5lcih0eXBlLCB2YWx1ZSwgZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIGV4cHJlc3Npb25Ob0NvbW1hKHR5cGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25Jbm5lcih0eXBlLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFyZW5FeHByKHR5cGUpIHtcbiAgICBpZiAodHlwZSAhPSBcIihcIikgcmV0dXJuIHBhc3MoKVxuICAgIHJldHVybiBjb250KHB1c2hsZXgoXCIpXCIpLCBleHByZXNzaW9uLCBleHBlY3QoXCIpXCIpLCBwb3BsZXgpXG4gIH1cbiAgZnVuY3Rpb24gZXhwcmVzc2lvbklubmVyKHR5cGUsIHZhbHVlLCBub0NvbW1hKSB7XG4gICAgaWYgKGN4LnN0YXRlLmZhdEFycm93QXQgPT0gY3guc3RyZWFtLnN0YXJ0KSB7XG4gICAgICB2YXIgYm9keSA9IG5vQ29tbWEgPyBhcnJvd0JvZHlOb0NvbW1hIDogYXJyb3dCb2R5O1xuICAgICAgaWYgKHR5cGUgPT0gXCIoXCIpIHJldHVybiBjb250KHB1c2hjb250ZXh0LCBwdXNobGV4KFwiKVwiKSwgY29tbWFzZXAoZnVuYXJnLCBcIilcIiksIHBvcGxleCwgZXhwZWN0KFwiPT5cIiksIGJvZHksIHBvcGNvbnRleHQpO1xuICAgICAgZWxzZSBpZiAodHlwZSA9PSBcInZhcmlhYmxlXCIpIHJldHVybiBwYXNzKHB1c2hjb250ZXh0LCBwYXR0ZXJuLCBleHBlY3QoXCI9PlwiKSwgYm9keSwgcG9wY29udGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIG1heWJlb3AgPSBub0NvbW1hID8gbWF5YmVvcGVyYXRvck5vQ29tbWEgOiBtYXliZW9wZXJhdG9yQ29tbWE7XG4gICAgaWYgKGF0b21pY1R5cGVzLmhhc093blByb3BlcnR5KHR5cGUpKSByZXR1cm4gY29udChtYXliZW9wKTtcbiAgICBpZiAodHlwZSA9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjb250KGZ1bmN0aW9uZGVmLCBtYXliZW9wKTtcbiAgICBpZiAodHlwZSA9PSBcImNsYXNzXCIgfHwgKGlzVFMgJiYgdmFsdWUgPT0gXCJpbnRlcmZhY2VcIikpIHsgY3gubWFya2VkID0gXCJrZXl3b3JkXCI7IHJldHVybiBjb250KHB1c2hsZXgoXCJmb3JtXCIpLCBjbGFzc0V4cHJlc3Npb24sIHBvcGxleCk7IH1cbiAgICBpZiAodHlwZSA9PSBcImtleXdvcmQgY1wiIHx8IHR5cGUgPT0gXCJhc3luY1wiKSByZXR1cm4gY29udChub0NvbW1hID8gZXhwcmVzc2lvbk5vQ29tbWEgOiBleHByZXNzaW9uKTtcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIGNvbnQocHVzaGxleChcIilcIiksIG1heWJlZXhwcmVzc2lvbiwgZXhwZWN0KFwiKVwiKSwgcG9wbGV4LCBtYXliZW9wKTtcbiAgICBpZiAodHlwZSA9PSBcIm9wZXJhdG9yXCIgfHwgdHlwZSA9PSBcInNwcmVhZFwiKSByZXR1cm4gY29udChub0NvbW1hID8gZXhwcmVzc2lvbk5vQ29tbWEgOiBleHByZXNzaW9uKTtcbiAgICBpZiAodHlwZSA9PSBcIltcIikgcmV0dXJuIGNvbnQocHVzaGxleChcIl1cIiksIGFycmF5TGl0ZXJhbCwgcG9wbGV4LCBtYXliZW9wKTtcbiAgICBpZiAodHlwZSA9PSBcIntcIikgcmV0dXJuIGNvbnRDb21tYXNlcChvYmpwcm9wLCBcIn1cIiwgbnVsbCwgbWF5YmVvcCk7XG4gICAgaWYgKHR5cGUgPT0gXCJxdWFzaVwiKSByZXR1cm4gcGFzcyhxdWFzaSwgbWF5YmVvcCk7XG4gICAgaWYgKHR5cGUgPT0gXCJuZXdcIikgcmV0dXJuIGNvbnQobWF5YmVUYXJnZXQobm9Db21tYSkpO1xuICAgIGlmICh0eXBlID09IFwiaW1wb3J0XCIpIHJldHVybiBjb250KGV4cHJlc3Npb24pO1xuICAgIHJldHVybiBjb250KCk7XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVleHByZXNzaW9uKHR5cGUpIHtcbiAgICBpZiAodHlwZS5tYXRjaCgvWztcXH1cXClcXF0sXS8pKSByZXR1cm4gcGFzcygpO1xuICAgIHJldHVybiBwYXNzKGV4cHJlc3Npb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVvcGVyYXRvckNvbW1hKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCIsXCIpIHJldHVybiBjb250KGV4cHJlc3Npb24pO1xuICAgIHJldHVybiBtYXliZW9wZXJhdG9yTm9Db21tYSh0eXBlLCB2YWx1ZSwgZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlb3BlcmF0b3JOb0NvbW1hKHR5cGUsIHZhbHVlLCBub0NvbW1hKSB7XG4gICAgdmFyIG1lID0gbm9Db21tYSA9PSBmYWxzZSA/IG1heWJlb3BlcmF0b3JDb21tYSA6IG1heWJlb3BlcmF0b3JOb0NvbW1hO1xuICAgIHZhciBleHByID0gbm9Db21tYSA9PSBmYWxzZSA/IGV4cHJlc3Npb24gOiBleHByZXNzaW9uTm9Db21tYTtcbiAgICBpZiAodHlwZSA9PSBcIj0+XCIpIHJldHVybiBjb250KHB1c2hjb250ZXh0LCBub0NvbW1hID8gYXJyb3dCb2R5Tm9Db21tYSA6IGFycm93Qm9keSwgcG9wY29udGV4dCk7XG4gICAgaWYgKHR5cGUgPT0gXCJvcGVyYXRvclwiKSB7XG4gICAgICBpZiAoL1xcK1xcK3wtLS8udGVzdCh2YWx1ZSkgfHwgaXNUUyAmJiB2YWx1ZSA9PSBcIiFcIikgcmV0dXJuIGNvbnQobWUpO1xuICAgICAgaWYgKGlzVFMgJiYgdmFsdWUgPT0gXCI8XCIgJiYgY3guc3RyZWFtLm1hdGNoKC9eKFtePl18PC4qPz4pKj5cXHMqXFwoLywgZmFsc2UpKVxuICAgICAgICByZXR1cm4gY29udChwdXNobGV4KFwiPlwiKSwgY29tbWFzZXAodHlwZWV4cHIsIFwiPlwiKSwgcG9wbGV4LCBtZSk7XG4gICAgICBpZiAodmFsdWUgPT0gXCI/XCIpIHJldHVybiBjb250KGV4cHJlc3Npb24sIGV4cGVjdChcIjpcIiksIGV4cHIpO1xuICAgICAgcmV0dXJuIGNvbnQoZXhwcik7XG4gICAgfVxuICAgIGlmICh0eXBlID09IFwicXVhc2lcIikgeyByZXR1cm4gcGFzcyhxdWFzaSwgbWUpOyB9XG4gICAgaWYgKHR5cGUgPT0gXCI7XCIpIHJldHVybjtcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIGNvbnRDb21tYXNlcChleHByZXNzaW9uTm9Db21tYSwgXCIpXCIsIFwiY2FsbFwiLCBtZSk7XG4gICAgaWYgKHR5cGUgPT0gXCIuXCIpIHJldHVybiBjb250KHByb3BlcnR5LCBtZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJbXCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJdXCIpLCBtYXliZWV4cHJlc3Npb24sIGV4cGVjdChcIl1cIiksIHBvcGxleCwgbWUpO1xuICAgIGlmIChpc1RTICYmIHZhbHVlID09IFwiYXNcIikgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQodHlwZWV4cHIsIG1lKSB9XG4gICAgaWYgKHR5cGUgPT0gXCJyZWdleHBcIikge1xuICAgICAgY3guc3RhdGUubGFzdFR5cGUgPSBjeC5tYXJrZWQgPSBcIm9wZXJhdG9yXCJcbiAgICAgIGN4LnN0cmVhbS5iYWNrVXAoY3guc3RyZWFtLnBvcyAtIGN4LnN0cmVhbS5zdGFydCAtIDEpXG4gICAgICByZXR1cm4gY29udChleHByKVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBxdWFzaSh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlICE9IFwicXVhc2lcIikgcmV0dXJuIHBhc3MoKTtcbiAgICBpZiAodmFsdWUuc2xpY2UodmFsdWUubGVuZ3RoIC0gMikgIT0gXCIke1wiKSByZXR1cm4gY29udChxdWFzaSk7XG4gICAgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgY29udGludWVRdWFzaSk7XG4gIH1cbiAgZnVuY3Rpb24gY29udGludWVRdWFzaSh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ9XCIpIHtcbiAgICAgIGN4Lm1hcmtlZCA9IFwic3RyaW5nLTJcIjtcbiAgICAgIGN4LnN0YXRlLnRva2VuaXplID0gdG9rZW5RdWFzaTtcbiAgICAgIHJldHVybiBjb250KHF1YXNpKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYXJyb3dCb2R5KHR5cGUpIHtcbiAgICBmaW5kRmF0QXJyb3coY3guc3RyZWFtLCBjeC5zdGF0ZSk7XG4gICAgcmV0dXJuIHBhc3ModHlwZSA9PSBcIntcIiA/IHN0YXRlbWVudCA6IGV4cHJlc3Npb24pO1xuICB9XG4gIGZ1bmN0aW9uIGFycm93Qm9keU5vQ29tbWEodHlwZSkge1xuICAgIGZpbmRGYXRBcnJvdyhjeC5zdHJlYW0sIGN4LnN0YXRlKTtcbiAgICByZXR1cm4gcGFzcyh0eXBlID09IFwie1wiID8gc3RhdGVtZW50IDogZXhwcmVzc2lvbk5vQ29tbWEpO1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlVGFyZ2V0KG5vQ29tbWEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT0gXCIuXCIpIHJldHVybiBjb250KG5vQ29tbWEgPyB0YXJnZXROb0NvbW1hIDogdGFyZ2V0KTtcbiAgICAgIGVsc2UgaWYgKHR5cGUgPT0gXCJ2YXJpYWJsZVwiICYmIGlzVFMpIHJldHVybiBjb250KG1heWJlVHlwZUFyZ3MsIG5vQ29tbWEgPyBtYXliZW9wZXJhdG9yTm9Db21tYSA6IG1heWJlb3BlcmF0b3JDb21tYSlcbiAgICAgIGVsc2UgcmV0dXJuIHBhc3Mobm9Db21tYSA/IGV4cHJlc3Npb25Ob0NvbW1hIDogZXhwcmVzc2lvbik7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB0YXJnZXQoXywgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gXCJ0YXJnZXRcIikgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQobWF5YmVvcGVyYXRvckNvbW1hKTsgfVxuICB9XG4gIGZ1bmN0aW9uIHRhcmdldE5vQ29tbWEoXywgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gXCJ0YXJnZXRcIikgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQobWF5YmVvcGVyYXRvck5vQ29tbWEpOyB9XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVsYWJlbCh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCI6XCIpIHJldHVybiBjb250KHBvcGxleCwgc3RhdGVtZW50KTtcbiAgICByZXR1cm4gcGFzcyhtYXliZW9wZXJhdG9yQ29tbWEsIGV4cGVjdChcIjtcIiksIHBvcGxleCk7XG4gIH1cbiAgZnVuY3Rpb24gcHJvcGVydHkodHlwZSkge1xuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIikge2N4Lm1hcmtlZCA9IFwicHJvcGVydHlcIjsgcmV0dXJuIGNvbnQoKTt9XG4gIH1cbiAgZnVuY3Rpb24gb2JqcHJvcCh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwiYXN5bmNcIikge1xuICAgICAgY3gubWFya2VkID0gXCJwcm9wZXJ0eVwiO1xuICAgICAgcmV0dXJuIGNvbnQob2JqcHJvcCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwidmFyaWFibGVcIiB8fCBjeC5zdHlsZSA9PSBcImtleXdvcmRcIikge1xuICAgICAgY3gubWFya2VkID0gXCJwcm9wZXJ0eVwiO1xuICAgICAgaWYgKHZhbHVlID09IFwiZ2V0XCIgfHwgdmFsdWUgPT0gXCJzZXRcIikgcmV0dXJuIGNvbnQoZ2V0dGVyU2V0dGVyKTtcbiAgICAgIHZhciBtIC8vIFdvcmsgYXJvdW5kIGZhdC1hcnJvdy1kZXRlY3Rpb24gY29tcGxpY2F0aW9uIGZvciBkZXRlY3RpbmcgdHlwZXNjcmlwdCB0eXBlZCBhcnJvdyBwYXJhbXNcbiAgICAgIGlmIChpc1RTICYmIGN4LnN0YXRlLmZhdEFycm93QXQgPT0gY3guc3RyZWFtLnN0YXJ0ICYmIChtID0gY3guc3RyZWFtLm1hdGNoKC9eXFxzKjpcXHMqLywgZmFsc2UpKSlcbiAgICAgICAgY3guc3RhdGUuZmF0QXJyb3dBdCA9IGN4LnN0cmVhbS5wb3MgKyBtWzBdLmxlbmd0aFxuICAgICAgcmV0dXJuIGNvbnQoYWZ0ZXJwcm9wKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJudW1iZXJcIiB8fCB0eXBlID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGN4Lm1hcmtlZCA9IGpzb25sZE1vZGUgPyBcInByb3BlcnR5XCIgOiAoY3guc3R5bGUgKyBcIiBwcm9wZXJ0eVwiKTtcbiAgICAgIHJldHVybiBjb250KGFmdGVycHJvcCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwianNvbmxkLWtleXdvcmRcIikge1xuICAgICAgcmV0dXJuIGNvbnQoYWZ0ZXJwcm9wKTtcbiAgICB9IGVsc2UgaWYgKGlzVFMgJiYgaXNNb2RpZmllcih2YWx1ZSkpIHtcbiAgICAgIGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiXG4gICAgICByZXR1cm4gY29udChvYmpwcm9wKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIltcIikge1xuICAgICAgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgbWF5YmV0eXBlLCBleHBlY3QoXCJdXCIpLCBhZnRlcnByb3ApO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcInNwcmVhZFwiKSB7XG4gICAgICByZXR1cm4gY29udChleHByZXNzaW9uTm9Db21tYSwgYWZ0ZXJwcm9wKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09IFwiKlwiKSB7XG4gICAgICBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjtcbiAgICAgIHJldHVybiBjb250KG9ianByb3ApO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIjpcIikge1xuICAgICAgcmV0dXJuIHBhc3MoYWZ0ZXJwcm9wKVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXR0ZXJTZXR0ZXIodHlwZSkge1xuICAgIGlmICh0eXBlICE9IFwidmFyaWFibGVcIikgcmV0dXJuIHBhc3MoYWZ0ZXJwcm9wKTtcbiAgICBjeC5tYXJrZWQgPSBcInByb3BlcnR5XCI7XG4gICAgcmV0dXJuIGNvbnQoZnVuY3Rpb25kZWYpO1xuICB9XG4gIGZ1bmN0aW9uIGFmdGVycHJvcCh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCI6XCIpIHJldHVybiBjb250KGV4cHJlc3Npb25Ob0NvbW1hKTtcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIHBhc3MoZnVuY3Rpb25kZWYpO1xuICB9XG4gIGZ1bmN0aW9uIGNvbW1hc2VwKHdoYXQsIGVuZCwgc2VwKSB7XG4gICAgZnVuY3Rpb24gcHJvY2VlZCh0eXBlLCB2YWx1ZSkge1xuICAgICAgaWYgKHNlcCA/IHNlcC5pbmRleE9mKHR5cGUpID4gLTEgOiB0eXBlID09IFwiLFwiKSB7XG4gICAgICAgIHZhciBsZXggPSBjeC5zdGF0ZS5sZXhpY2FsO1xuICAgICAgICBpZiAobGV4LmluZm8gPT0gXCJjYWxsXCIpIGxleC5wb3MgPSAobGV4LnBvcyB8fCAwKSArIDE7XG4gICAgICAgIHJldHVybiBjb250KGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT0gZW5kIHx8IHZhbHVlID09IGVuZCkgcmV0dXJuIHBhc3MoKVxuICAgICAgICAgIHJldHVybiBwYXNzKHdoYXQpXG4gICAgICAgIH0sIHByb2NlZWQpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT0gZW5kIHx8IHZhbHVlID09IGVuZCkgcmV0dXJuIGNvbnQoKTtcbiAgICAgIHJldHVybiBjb250KGV4cGVjdChlbmQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZSA9PSBlbmQgfHwgdmFsdWUgPT0gZW5kKSByZXR1cm4gY29udCgpO1xuICAgICAgcmV0dXJuIHBhc3Mod2hhdCwgcHJvY2VlZCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjb250Q29tbWFzZXAod2hhdCwgZW5kLCBpbmZvKSB7XG4gICAgZm9yICh2YXIgaSA9IDM7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBjeC5jYy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgcmV0dXJuIGNvbnQocHVzaGxleChlbmQsIGluZm8pLCBjb21tYXNlcCh3aGF0LCBlbmQpLCBwb3BsZXgpO1xuICB9XG4gIGZ1bmN0aW9uIGJsb2NrKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PSBcIn1cIikgcmV0dXJuIGNvbnQoKTtcbiAgICByZXR1cm4gcGFzcyhzdGF0ZW1lbnQsIGJsb2NrKTtcbiAgfVxuICBmdW5jdGlvbiBtYXliZXR5cGUodHlwZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNUUykge1xuICAgICAgaWYgKHR5cGUgPT0gXCI6XCIpIHJldHVybiBjb250KHR5cGVleHByKTtcbiAgICAgIGlmICh2YWx1ZSA9PSBcIj9cIikgcmV0dXJuIGNvbnQobWF5YmV0eXBlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVyZXR0eXBlKHR5cGUpIHtcbiAgICBpZiAoaXNUUyAmJiB0eXBlID09IFwiOlwiKSB7XG4gICAgICBpZiAoY3guc3RyZWFtLm1hdGNoKC9eXFxzKlxcdytcXHMraXNcXGIvLCBmYWxzZSkpIHJldHVybiBjb250KGV4cHJlc3Npb24sIGlzS1csIHR5cGVleHByKVxuICAgICAgZWxzZSByZXR1cm4gY29udCh0eXBlZXhwcilcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNLVyhfLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBcImlzXCIpIHtcbiAgICAgIGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiXG4gICAgICByZXR1cm4gY29udCgpXG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHR5cGVleHByKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwia2V5b2ZcIiB8fCB2YWx1ZSA9PSBcInR5cGVvZlwiKSB7XG4gICAgICBjeC5tYXJrZWQgPSBcImtleXdvcmRcIlxuICAgICAgcmV0dXJuIGNvbnQodmFsdWUgPT0gXCJrZXlvZlwiID8gdHlwZWV4cHIgOiBleHByZXNzaW9uTm9Db21tYSlcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gXCJ2YXJpYWJsZVwiIHx8IHZhbHVlID09IFwidm9pZFwiKSB7XG4gICAgICBjeC5tYXJrZWQgPSBcInR5cGVcIlxuICAgICAgcmV0dXJuIGNvbnQoYWZ0ZXJUeXBlKVxuICAgIH1cbiAgICBpZiAodHlwZSA9PSBcInN0cmluZ1wiIHx8IHR5cGUgPT0gXCJudW1iZXJcIiB8fCB0eXBlID09IFwiYXRvbVwiKSByZXR1cm4gY29udChhZnRlclR5cGUpO1xuICAgIGlmICh0eXBlID09IFwiW1wiKSByZXR1cm4gY29udChwdXNobGV4KFwiXVwiKSwgY29tbWFzZXAodHlwZWV4cHIsIFwiXVwiLCBcIixcIiksIHBvcGxleCwgYWZ0ZXJUeXBlKVxuICAgIGlmICh0eXBlID09IFwie1wiKSByZXR1cm4gY29udChwdXNobGV4KFwifVwiKSwgY29tbWFzZXAodHlwZXByb3AsIFwifVwiLCBcIiw7XCIpLCBwb3BsZXgsIGFmdGVyVHlwZSlcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIGNvbnQoY29tbWFzZXAodHlwZWFyZywgXCIpXCIpLCBtYXliZVJldHVyblR5cGUpXG4gICAgaWYgKHR5cGUgPT0gXCI8XCIpIHJldHVybiBjb250KGNvbW1hc2VwKHR5cGVleHByLCBcIj5cIiksIHR5cGVleHByKVxuICB9XG4gIGZ1bmN0aW9uIG1heWJlUmV0dXJuVHlwZSh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCI9PlwiKSByZXR1cm4gY29udCh0eXBlZXhwcilcbiAgfVxuICBmdW5jdGlvbiB0eXBlcHJvcCh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIiB8fCBjeC5zdHlsZSA9PSBcImtleXdvcmRcIikge1xuICAgICAgY3gubWFya2VkID0gXCJwcm9wZXJ0eVwiXG4gICAgICByZXR1cm4gY29udCh0eXBlcHJvcClcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09IFwiP1wiKSB7XG4gICAgICByZXR1cm4gY29udCh0eXBlcHJvcClcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCI6XCIpIHtcbiAgICAgIHJldHVybiBjb250KHR5cGVleHByKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIltcIikge1xuICAgICAgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgbWF5YmV0eXBlLCBleHBlY3QoXCJdXCIpLCB0eXBlcHJvcClcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdHlwZWFyZyh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIiAmJiBjeC5zdHJlYW0ubWF0Y2goL15cXHMqWz86XS8sIGZhbHNlKSB8fCB2YWx1ZSA9PSBcIj9cIikgcmV0dXJuIGNvbnQodHlwZWFyZylcbiAgICBpZiAodHlwZSA9PSBcIjpcIikgcmV0dXJuIGNvbnQodHlwZWV4cHIpXG4gICAgcmV0dXJuIHBhc3ModHlwZWV4cHIpXG4gIH1cbiAgZnVuY3Rpb24gYWZ0ZXJUeXBlKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwiPFwiKSByZXR1cm4gY29udChwdXNobGV4KFwiPlwiKSwgY29tbWFzZXAodHlwZWV4cHIsIFwiPlwiKSwgcG9wbGV4LCBhZnRlclR5cGUpXG4gICAgaWYgKHZhbHVlID09IFwifFwiIHx8IHR5cGUgPT0gXCIuXCIgfHwgdmFsdWUgPT0gXCImXCIpIHJldHVybiBjb250KHR5cGVleHByKVxuICAgIGlmICh0eXBlID09IFwiW1wiKSByZXR1cm4gY29udChleHBlY3QoXCJdXCIpLCBhZnRlclR5cGUpXG4gICAgaWYgKHZhbHVlID09IFwiZXh0ZW5kc1wiIHx8IHZhbHVlID09IFwiaW1wbGVtZW50c1wiKSB7IGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiOyByZXR1cm4gY29udCh0eXBlZXhwcikgfVxuICB9XG4gIGZ1bmN0aW9uIG1heWJlVHlwZUFyZ3MoXywgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gXCI8XCIpIHJldHVybiBjb250KHB1c2hsZXgoXCI+XCIpLCBjb21tYXNlcCh0eXBlZXhwciwgXCI+XCIpLCBwb3BsZXgsIGFmdGVyVHlwZSlcbiAgfVxuICBmdW5jdGlvbiB0eXBlcGFyYW0oKSB7XG4gICAgcmV0dXJuIHBhc3ModHlwZWV4cHIsIG1heWJlVHlwZURlZmF1bHQpXG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVUeXBlRGVmYXVsdChfLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBcIj1cIikgcmV0dXJuIGNvbnQodHlwZWV4cHIpXG4gIH1cbiAgZnVuY3Rpb24gdmFyZGVmKF8sIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwiZW51bVwiKSB7Y3gubWFya2VkID0gXCJrZXl3b3JkXCI7IHJldHVybiBjb250KGVudW1kZWYpfVxuICAgIHJldHVybiBwYXNzKHBhdHRlcm4sIG1heWJldHlwZSwgbWF5YmVBc3NpZ24sIHZhcmRlZkNvbnQpO1xuICB9XG4gIGZ1bmN0aW9uIHBhdHRlcm4odHlwZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNUUyAmJiBpc01vZGlmaWVyKHZhbHVlKSkgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQocGF0dGVybikgfVxuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIikgeyByZWdpc3Rlcih2YWx1ZSk7IHJldHVybiBjb250KCk7IH1cbiAgICBpZiAodHlwZSA9PSBcInNwcmVhZFwiKSByZXR1cm4gY29udChwYXR0ZXJuKTtcbiAgICBpZiAodHlwZSA9PSBcIltcIikgcmV0dXJuIGNvbnRDb21tYXNlcChwYXR0ZXJuLCBcIl1cIik7XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIpIHJldHVybiBjb250Q29tbWFzZXAocHJvcHBhdHRlcm4sIFwifVwiKTtcbiAgfVxuICBmdW5jdGlvbiBwcm9wcGF0dGVybih0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIiAmJiAhY3guc3RyZWFtLm1hdGNoKC9eXFxzKjovLCBmYWxzZSkpIHtcbiAgICAgIHJlZ2lzdGVyKHZhbHVlKTtcbiAgICAgIHJldHVybiBjb250KG1heWJlQXNzaWduKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gXCJ2YXJpYWJsZVwiKSBjeC5tYXJrZWQgPSBcInByb3BlcnR5XCI7XG4gICAgaWYgKHR5cGUgPT0gXCJzcHJlYWRcIikgcmV0dXJuIGNvbnQocGF0dGVybik7XG4gICAgaWYgKHR5cGUgPT0gXCJ9XCIpIHJldHVybiBwYXNzKCk7XG4gICAgcmV0dXJuIGNvbnQoZXhwZWN0KFwiOlwiKSwgcGF0dGVybiwgbWF5YmVBc3NpZ24pO1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlQXNzaWduKF90eXBlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBcIj1cIikgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbk5vQ29tbWEpO1xuICB9XG4gIGZ1bmN0aW9uIHZhcmRlZkNvbnQodHlwZSkge1xuICAgIGlmICh0eXBlID09IFwiLFwiKSByZXR1cm4gY29udCh2YXJkZWYpO1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlZWxzZSh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwia2V5d29yZCBiXCIgJiYgdmFsdWUgPT0gXCJlbHNlXCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJmb3JtXCIsIFwiZWxzZVwiKSwgc3RhdGVtZW50LCBwb3BsZXgpO1xuICB9XG4gIGZ1bmN0aW9uIGZvcnNwZWModHlwZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gXCJhd2FpdFwiKSByZXR1cm4gY29udChmb3JzcGVjKTtcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIGNvbnQocHVzaGxleChcIilcIiksIGZvcnNwZWMxLCBleHBlY3QoXCIpXCIpLCBwb3BsZXgpO1xuICB9XG4gIGZ1bmN0aW9uIGZvcnNwZWMxKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PSBcInZhclwiKSByZXR1cm4gY29udCh2YXJkZWYsIGV4cGVjdChcIjtcIiksIGZvcnNwZWMyKTtcbiAgICBpZiAodHlwZSA9PSBcIjtcIikgcmV0dXJuIGNvbnQoZm9yc3BlYzIpO1xuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIikgcmV0dXJuIGNvbnQoZm9ybWF5YmVpbm9mKTtcbiAgICByZXR1cm4gcGFzcyhleHByZXNzaW9uLCBleHBlY3QoXCI7XCIpLCBmb3JzcGVjMik7XG4gIH1cbiAgZnVuY3Rpb24gZm9ybWF5YmVpbm9mKF90eXBlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBcImluXCIgfHwgdmFsdWUgPT0gXCJvZlwiKSB7IGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiOyByZXR1cm4gY29udChleHByZXNzaW9uKTsgfVxuICAgIHJldHVybiBjb250KG1heWJlb3BlcmF0b3JDb21tYSwgZm9yc3BlYzIpO1xuICB9XG4gIGZ1bmN0aW9uIGZvcnNwZWMyKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCI7XCIpIHJldHVybiBjb250KGZvcnNwZWMzKTtcbiAgICBpZiAodmFsdWUgPT0gXCJpblwiIHx8IHZhbHVlID09IFwib2ZcIikgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbik7IH1cbiAgICByZXR1cm4gcGFzcyhleHByZXNzaW9uLCBleHBlY3QoXCI7XCIpLCBmb3JzcGVjMyk7XG4gIH1cbiAgZnVuY3Rpb24gZm9yc3BlYzModHlwZSkge1xuICAgIGlmICh0eXBlICE9IFwiKVwiKSBjb250KGV4cHJlc3Npb24pO1xuICB9XG4gIGZ1bmN0aW9uIGZ1bmN0aW9uZGVmKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwiKlwiKSB7Y3gubWFya2VkID0gXCJrZXl3b3JkXCI7IHJldHVybiBjb250KGZ1bmN0aW9uZGVmKTt9XG4gICAgaWYgKHR5cGUgPT0gXCJ2YXJpYWJsZVwiKSB7cmVnaXN0ZXIodmFsdWUpOyByZXR1cm4gY29udChmdW5jdGlvbmRlZik7fVxuICAgIGlmICh0eXBlID09IFwiKFwiKSByZXR1cm4gY29udChwdXNoY29udGV4dCwgcHVzaGxleChcIilcIiksIGNvbW1hc2VwKGZ1bmFyZywgXCIpXCIpLCBwb3BsZXgsIG1heWJlcmV0dHlwZSwgc3RhdGVtZW50LCBwb3Bjb250ZXh0KTtcbiAgICBpZiAoaXNUUyAmJiB2YWx1ZSA9PSBcIjxcIikgcmV0dXJuIGNvbnQocHVzaGxleChcIj5cIiksIGNvbW1hc2VwKHR5cGVwYXJhbSwgXCI+XCIpLCBwb3BsZXgsIGZ1bmN0aW9uZGVmKVxuICB9XG4gIGZ1bmN0aW9uIGZ1bmFyZyh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBcIkBcIikgY29udChleHByZXNzaW9uLCBmdW5hcmcpXG4gICAgaWYgKHR5cGUgPT0gXCJzcHJlYWRcIikgcmV0dXJuIGNvbnQoZnVuYXJnKTtcbiAgICBpZiAoaXNUUyAmJiBpc01vZGlmaWVyKHZhbHVlKSkgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQoZnVuYXJnKTsgfVxuICAgIHJldHVybiBwYXNzKHBhdHRlcm4sIG1heWJldHlwZSwgbWF5YmVBc3NpZ24pO1xuICB9XG4gIGZ1bmN0aW9uIGNsYXNzRXhwcmVzc2lvbih0eXBlLCB2YWx1ZSkge1xuICAgIC8vIENsYXNzIGV4cHJlc3Npb25zIG1heSBoYXZlIGFuIG9wdGlvbmFsIG5hbWUuXG4gICAgaWYgKHR5cGUgPT0gXCJ2YXJpYWJsZVwiKSByZXR1cm4gY2xhc3NOYW1lKHR5cGUsIHZhbHVlKTtcbiAgICByZXR1cm4gY2xhc3NOYW1lQWZ0ZXIodHlwZSwgdmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIGNsYXNzTmFtZSh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwidmFyaWFibGVcIikge3JlZ2lzdGVyKHZhbHVlKTsgcmV0dXJuIGNvbnQoY2xhc3NOYW1lQWZ0ZXIpO31cbiAgfVxuICBmdW5jdGlvbiBjbGFzc05hbWVBZnRlcih0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBcIjxcIikgcmV0dXJuIGNvbnQocHVzaGxleChcIj5cIiksIGNvbW1hc2VwKHR5cGVwYXJhbSwgXCI+XCIpLCBwb3BsZXgsIGNsYXNzTmFtZUFmdGVyKVxuICAgIGlmICh2YWx1ZSA9PSBcImV4dGVuZHNcIiB8fCB2YWx1ZSA9PSBcImltcGxlbWVudHNcIiB8fCAoaXNUUyAmJiB0eXBlID09IFwiLFwiKSkge1xuICAgICAgaWYgKHZhbHVlID09IFwiaW1wbGVtZW50c1wiKSBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjtcbiAgICAgIHJldHVybiBjb250KGlzVFMgPyB0eXBlZXhwciA6IGV4cHJlc3Npb24sIGNsYXNzTmFtZUFmdGVyKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIpIHJldHVybiBjb250KHB1c2hsZXgoXCJ9XCIpLCBjbGFzc0JvZHksIHBvcGxleCk7XG4gIH1cbiAgZnVuY3Rpb24gY2xhc3NCb2R5KHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJhc3luY1wiIHx8XG4gICAgICAgICh0eXBlID09IFwidmFyaWFibGVcIiAmJlxuICAgICAgICAgKHZhbHVlID09IFwic3RhdGljXCIgfHwgdmFsdWUgPT0gXCJnZXRcIiB8fCB2YWx1ZSA9PSBcInNldFwiIHx8IChpc1RTICYmIGlzTW9kaWZpZXIodmFsdWUpKSkgJiZcbiAgICAgICAgIGN4LnN0cmVhbS5tYXRjaCgvXlxccytbXFx3JFxceGExLVxcdWZmZmZdLywgZmFsc2UpKSkge1xuICAgICAgY3gubWFya2VkID0gXCJrZXl3b3JkXCI7XG4gICAgICByZXR1cm4gY29udChjbGFzc0JvZHkpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PSBcInZhcmlhYmxlXCIgfHwgY3guc3R5bGUgPT0gXCJrZXl3b3JkXCIpIHtcbiAgICAgIGN4Lm1hcmtlZCA9IFwicHJvcGVydHlcIjtcbiAgICAgIHJldHVybiBjb250KGlzVFMgPyBjbGFzc2ZpZWxkIDogZnVuY3Rpb25kZWYsIGNsYXNzQm9keSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09IFwiW1wiKVxuICAgICAgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgbWF5YmV0eXBlLCBleHBlY3QoXCJdXCIpLCBpc1RTID8gY2xhc3NmaWVsZCA6IGZ1bmN0aW9uZGVmLCBjbGFzc0JvZHkpXG4gICAgaWYgKHZhbHVlID09IFwiKlwiKSB7XG4gICAgICBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjtcbiAgICAgIHJldHVybiBjb250KGNsYXNzQm9keSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09IFwiO1wiKSByZXR1cm4gY29udChjbGFzc0JvZHkpO1xuICAgIGlmICh0eXBlID09IFwifVwiKSByZXR1cm4gY29udCgpO1xuICAgIGlmICh2YWx1ZSA9PSBcIkBcIikgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgY2xhc3NCb2R5KVxuICB9XG4gIGZ1bmN0aW9uIGNsYXNzZmllbGQodHlwZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gXCI/XCIpIHJldHVybiBjb250KGNsYXNzZmllbGQpXG4gICAgaWYgKHR5cGUgPT0gXCI6XCIpIHJldHVybiBjb250KHR5cGVleHByLCBtYXliZUFzc2lnbilcbiAgICBpZiAodmFsdWUgPT0gXCI9XCIpIHJldHVybiBjb250KGV4cHJlc3Npb25Ob0NvbW1hKVxuICAgIHJldHVybiBwYXNzKGZ1bmN0aW9uZGVmKVxuICB9XG4gIGZ1bmN0aW9uIGFmdGVyRXhwb3J0KHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwiKlwiKSB7IGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiOyByZXR1cm4gY29udChtYXliZUZyb20sIGV4cGVjdChcIjtcIikpOyB9XG4gICAgaWYgKHZhbHVlID09IFwiZGVmYXVsdFwiKSB7IGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiOyByZXR1cm4gY29udChleHByZXNzaW9uLCBleHBlY3QoXCI7XCIpKTsgfVxuICAgIGlmICh0eXBlID09IFwie1wiKSByZXR1cm4gY29udChjb21tYXNlcChleHBvcnRGaWVsZCwgXCJ9XCIpLCBtYXliZUZyb20sIGV4cGVjdChcIjtcIikpO1xuICAgIHJldHVybiBwYXNzKHN0YXRlbWVudCk7XG4gIH1cbiAgZnVuY3Rpb24gZXhwb3J0RmllbGQodHlwZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gXCJhc1wiKSB7IGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiOyByZXR1cm4gY29udChleHBlY3QoXCJ2YXJpYWJsZVwiKSk7IH1cbiAgICBpZiAodHlwZSA9PSBcInZhcmlhYmxlXCIpIHJldHVybiBwYXNzKGV4cHJlc3Npb25Ob0NvbW1hLCBleHBvcnRGaWVsZCk7XG4gIH1cbiAgZnVuY3Rpb24gYWZ0ZXJJbXBvcnQodHlwZSkge1xuICAgIGlmICh0eXBlID09IFwic3RyaW5nXCIpIHJldHVybiBjb250KCk7XG4gICAgaWYgKHR5cGUgPT0gXCIoXCIpIHJldHVybiBwYXNzKGV4cHJlc3Npb24pO1xuICAgIHJldHVybiBwYXNzKGltcG9ydFNwZWMsIG1heWJlTW9yZUltcG9ydHMsIG1heWJlRnJvbSk7XG4gIH1cbiAgZnVuY3Rpb24gaW1wb3J0U3BlYyh0eXBlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlID09IFwie1wiKSByZXR1cm4gY29udENvbW1hc2VwKGltcG9ydFNwZWMsIFwifVwiKTtcbiAgICBpZiAodHlwZSA9PSBcInZhcmlhYmxlXCIpIHJlZ2lzdGVyKHZhbHVlKTtcbiAgICBpZiAodmFsdWUgPT0gXCIqXCIpIGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiO1xuICAgIHJldHVybiBjb250KG1heWJlQXMpO1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlTW9yZUltcG9ydHModHlwZSkge1xuICAgIGlmICh0eXBlID09IFwiLFwiKSByZXR1cm4gY29udChpbXBvcnRTcGVjLCBtYXliZU1vcmVJbXBvcnRzKVxuICB9XG4gIGZ1bmN0aW9uIG1heWJlQXMoX3R5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwiYXNcIikgeyBjeC5tYXJrZWQgPSBcImtleXdvcmRcIjsgcmV0dXJuIGNvbnQoaW1wb3J0U3BlYyk7IH1cbiAgfVxuICBmdW5jdGlvbiBtYXliZUZyb20oX3R5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IFwiZnJvbVwiKSB7IGN4Lm1hcmtlZCA9IFwia2V5d29yZFwiOyByZXR1cm4gY29udChleHByZXNzaW9uKTsgfVxuICB9XG4gIGZ1bmN0aW9uIGFycmF5TGl0ZXJhbCh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJdXCIpIHJldHVybiBjb250KCk7XG4gICAgcmV0dXJuIHBhc3MoY29tbWFzZXAoZXhwcmVzc2lvbk5vQ29tbWEsIFwiXVwiKSk7XG4gIH1cbiAgZnVuY3Rpb24gZW51bWRlZigpIHtcbiAgICByZXR1cm4gcGFzcyhwdXNobGV4KFwiZm9ybVwiKSwgcGF0dGVybiwgZXhwZWN0KFwie1wiKSwgcHVzaGxleChcIn1cIiksIGNvbW1hc2VwKGVudW1tZW1iZXIsIFwifVwiKSwgcG9wbGV4LCBwb3BsZXgpXG4gIH1cbiAgZnVuY3Rpb24gZW51bW1lbWJlcigpIHtcbiAgICByZXR1cm4gcGFzcyhwYXR0ZXJuLCBtYXliZUFzc2lnbik7XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvbnRpbnVlZFN0YXRlbWVudChzdGF0ZSwgdGV4dEFmdGVyKSB7XG4gICAgcmV0dXJuIHN0YXRlLmxhc3RUeXBlID09IFwib3BlcmF0b3JcIiB8fCBzdGF0ZS5sYXN0VHlwZSA9PSBcIixcIiB8fFxuICAgICAgaXNPcGVyYXRvckNoYXIudGVzdCh0ZXh0QWZ0ZXIuY2hhckF0KDApKSB8fFxuICAgICAgL1ssLl0vLnRlc3QodGV4dEFmdGVyLmNoYXJBdCgwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHByZXNzaW9uQWxsb3dlZChzdHJlYW0sIHN0YXRlLCBiYWNrVXApIHtcbiAgICByZXR1cm4gc3RhdGUudG9rZW5pemUgPT0gdG9rZW5CYXNlICYmXG4gICAgICAvXig/Om9wZXJhdG9yfHNvZnxrZXl3b3JkIFtiY2RdfGNhc2V8bmV3fGV4cG9ydHxkZWZhdWx0fHNwcmVhZHxbXFxbe31cXCgsOzpdfD0+KSQvLnRlc3Qoc3RhdGUubGFzdFR5cGUpIHx8XG4gICAgICAoc3RhdGUubGFzdFR5cGUgPT0gXCJxdWFzaVwiICYmIC9cXHtcXHMqJC8udGVzdChzdHJlYW0uc3RyaW5nLnNsaWNlKDAsIHN0cmVhbS5wb3MgLSAoYmFja1VwIHx8IDApKSkpXG4gIH1cblxuICAvLyBJbnRlcmZhY2VcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKGJhc2Vjb2x1bW4pIHtcbiAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgdG9rZW5pemU6IHRva2VuQmFzZSxcbiAgICAgICAgbGFzdFR5cGU6IFwic29mXCIsXG4gICAgICAgIGNjOiBbXSxcbiAgICAgICAgbGV4aWNhbDogbmV3IEpTTGV4aWNhbCgoYmFzZWNvbHVtbiB8fCAwKSAtIGluZGVudFVuaXQsIDAsIFwiYmxvY2tcIiwgZmFsc2UpLFxuICAgICAgICBsb2NhbFZhcnM6IHBhcnNlckNvbmZpZy5sb2NhbFZhcnMsXG4gICAgICAgIGNvbnRleHQ6IHBhcnNlckNvbmZpZy5sb2NhbFZhcnMgJiYge3ZhcnM6IHBhcnNlckNvbmZpZy5sb2NhbFZhcnN9LFxuICAgICAgICBpbmRlbnRlZDogYmFzZWNvbHVtbiB8fCAwXG4gICAgICB9O1xuICAgICAgaWYgKHBhcnNlckNvbmZpZy5nbG9iYWxWYXJzICYmIHR5cGVvZiBwYXJzZXJDb25maWcuZ2xvYmFsVmFycyA9PSBcIm9iamVjdFwiKVxuICAgICAgICBzdGF0ZS5nbG9iYWxWYXJzID0gcGFyc2VyQ29uZmlnLmdsb2JhbFZhcnM7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcblxuICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgICAgIGlmICghc3RhdGUubGV4aWNhbC5oYXNPd25Qcm9wZXJ0eShcImFsaWduXCIpKVxuICAgICAgICAgIHN0YXRlLmxleGljYWwuYWxpZ24gPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuaW5kZW50ZWQgPSBzdHJlYW0uaW5kZW50YXRpb24oKTtcbiAgICAgICAgZmluZEZhdEFycm93KHN0cmVhbSwgc3RhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLnRva2VuaXplICE9IHRva2VuQ29tbWVudCAmJiBzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgc3R5bGUgPSBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIGlmICh0eXBlID09IFwiY29tbWVudFwiKSByZXR1cm4gc3R5bGU7XG4gICAgICBzdGF0ZS5sYXN0VHlwZSA9IHR5cGUgPT0gXCJvcGVyYXRvclwiICYmIChjb250ZW50ID09IFwiKytcIiB8fCBjb250ZW50ID09IFwiLS1cIikgPyBcImluY2RlY1wiIDogdHlwZTtcbiAgICAgIHJldHVybiBwYXJzZUpTKHN0YXRlLCBzdHlsZSwgdHlwZSwgY29udGVudCwgc3RyZWFtKTtcbiAgICB9LFxuXG4gICAgaW5kZW50OiBmdW5jdGlvbihzdGF0ZSwgdGV4dEFmdGVyKSB7XG4gICAgICBpZiAoc3RhdGUudG9rZW5pemUgPT0gdG9rZW5Db21tZW50KSByZXR1cm4gQ29kZU1pcnJvci5QYXNzO1xuICAgICAgaWYgKHN0YXRlLnRva2VuaXplICE9IHRva2VuQmFzZSkgcmV0dXJuIDA7XG4gICAgICB2YXIgZmlyc3RDaGFyID0gdGV4dEFmdGVyICYmIHRleHRBZnRlci5jaGFyQXQoMCksIGxleGljYWwgPSBzdGF0ZS5sZXhpY2FsLCB0b3BcbiAgICAgIC8vIEtsdWRnZSB0byBwcmV2ZW50ICdtYXliZWxzZScgZnJvbSBibG9ja2luZyBsZXhpY2FsIHNjb3BlIHBvcHNcbiAgICAgIGlmICghL15cXHMqZWxzZVxcYi8udGVzdCh0ZXh0QWZ0ZXIpKSBmb3IgKHZhciBpID0gc3RhdGUuY2MubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGMgPSBzdGF0ZS5jY1tpXTtcbiAgICAgICAgaWYgKGMgPT0gcG9wbGV4KSBsZXhpY2FsID0gbGV4aWNhbC5wcmV2O1xuICAgICAgICBlbHNlIGlmIChjICE9IG1heWJlZWxzZSkgYnJlYWs7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKGxleGljYWwudHlwZSA9PSBcInN0YXRcIiB8fCBsZXhpY2FsLnR5cGUgPT0gXCJmb3JtXCIpICYmXG4gICAgICAgICAgICAgKGZpcnN0Q2hhciA9PSBcIn1cIiB8fCAoKHRvcCA9IHN0YXRlLmNjW3N0YXRlLmNjLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG9wID09IG1heWJlb3BlcmF0b3JDb21tYSB8fCB0b3AgPT0gbWF5YmVvcGVyYXRvck5vQ29tbWEpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEvXlssXFwuPStcXC0qOj9bXFwoXS8udGVzdCh0ZXh0QWZ0ZXIpKSkpXG4gICAgICAgIGxleGljYWwgPSBsZXhpY2FsLnByZXY7XG4gICAgICBpZiAoc3RhdGVtZW50SW5kZW50ICYmIGxleGljYWwudHlwZSA9PSBcIilcIiAmJiBsZXhpY2FsLnByZXYudHlwZSA9PSBcInN0YXRcIilcbiAgICAgICAgbGV4aWNhbCA9IGxleGljYWwucHJldjtcbiAgICAgIHZhciB0eXBlID0gbGV4aWNhbC50eXBlLCBjbG9zaW5nID0gZmlyc3RDaGFyID09IHR5cGU7XG5cbiAgICAgIGlmICh0eXBlID09IFwidmFyZGVmXCIpIHJldHVybiBsZXhpY2FsLmluZGVudGVkICsgKHN0YXRlLmxhc3RUeXBlID09IFwib3BlcmF0b3JcIiB8fCBzdGF0ZS5sYXN0VHlwZSA9PSBcIixcIiA/IGxleGljYWwuaW5mbyArIDEgOiAwKTtcbiAgICAgIGVsc2UgaWYgKHR5cGUgPT0gXCJmb3JtXCIgJiYgZmlyc3RDaGFyID09IFwie1wiKSByZXR1cm4gbGV4aWNhbC5pbmRlbnRlZDtcbiAgICAgIGVsc2UgaWYgKHR5cGUgPT0gXCJmb3JtXCIpIHJldHVybiBsZXhpY2FsLmluZGVudGVkICsgaW5kZW50VW5pdDtcbiAgICAgIGVsc2UgaWYgKHR5cGUgPT0gXCJzdGF0XCIpXG4gICAgICAgIHJldHVybiBsZXhpY2FsLmluZGVudGVkICsgKGlzQ29udGludWVkU3RhdGVtZW50KHN0YXRlLCB0ZXh0QWZ0ZXIpID8gc3RhdGVtZW50SW5kZW50IHx8IGluZGVudFVuaXQgOiAwKTtcbiAgICAgIGVsc2UgaWYgKGxleGljYWwuaW5mbyA9PSBcInN3aXRjaFwiICYmICFjbG9zaW5nICYmIHBhcnNlckNvbmZpZy5kb3VibGVJbmRlbnRTd2l0Y2ggIT0gZmFsc2UpXG4gICAgICAgIHJldHVybiBsZXhpY2FsLmluZGVudGVkICsgKC9eKD86Y2FzZXxkZWZhdWx0KVxcYi8udGVzdCh0ZXh0QWZ0ZXIpID8gaW5kZW50VW5pdCA6IDIgKiBpbmRlbnRVbml0KTtcbiAgICAgIGVsc2UgaWYgKGxleGljYWwuYWxpZ24pIHJldHVybiBsZXhpY2FsLmNvbHVtbiArIChjbG9zaW5nID8gMCA6IDEpO1xuICAgICAgZWxzZSByZXR1cm4gbGV4aWNhbC5pbmRlbnRlZCArIChjbG9zaW5nID8gMCA6IGluZGVudFVuaXQpO1xuICAgIH0sXG5cbiAgICBlbGVjdHJpY0lucHV0OiAvXlxccyooPzpjYXNlIC4qPzp8ZGVmYXVsdDp8XFx7fFxcfSkkLyxcbiAgICBibG9ja0NvbW1lbnRTdGFydDoganNvbk1vZGUgPyBudWxsIDogXCIvKlwiLFxuICAgIGJsb2NrQ29tbWVudEVuZDoganNvbk1vZGUgPyBudWxsIDogXCIqL1wiLFxuICAgIGJsb2NrQ29tbWVudENvbnRpbnVlOiBqc29uTW9kZSA/IG51bGwgOiBcIiAqIFwiLFxuICAgIGxpbmVDb21tZW50OiBqc29uTW9kZSA/IG51bGwgOiBcIi8vXCIsXG4gICAgZm9sZDogXCJicmFjZVwiLFxuICAgIGNsb3NlQnJhY2tldHM6IFwiKClbXXt9JydcXFwiXFxcImBgXCIsXG5cbiAgICBoZWxwZXJUeXBlOiBqc29uTW9kZSA/IFwianNvblwiIDogXCJqYXZhc2NyaXB0XCIsXG4gICAganNvbmxkTW9kZToganNvbmxkTW9kZSxcbiAgICBqc29uTW9kZToganNvbk1vZGUsXG5cbiAgICBleHByZXNzaW9uQWxsb3dlZDogZXhwcmVzc2lvbkFsbG93ZWQsXG5cbiAgICBza2lwRXhwcmVzc2lvbjogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciB0b3AgPSBzdGF0ZS5jY1tzdGF0ZS5jYy5sZW5ndGggLSAxXVxuICAgICAgaWYgKHRvcCA9PSBleHByZXNzaW9uIHx8IHRvcCA9PSBleHByZXNzaW9uTm9Db21tYSkgc3RhdGUuY2MucG9wKClcbiAgICB9XG4gIH07XG59KTtcblxuQ29kZU1pcnJvci5yZWdpc3RlckhlbHBlcihcIndvcmRDaGFyc1wiLCBcImphdmFzY3JpcHRcIiwgL1tcXHckXS8pO1xuXG5Db2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L2phdmFzY3JpcHRcIiwgXCJqYXZhc2NyaXB0XCIpO1xuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC9lY21hc2NyaXB0XCIsIFwiamF2YXNjcmlwdFwiKTtcbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIiwgXCJqYXZhc2NyaXB0XCIpO1xuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwiYXBwbGljYXRpb24veC1qYXZhc2NyaXB0XCIsIFwiamF2YXNjcmlwdFwiKTtcbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIiwgXCJqYXZhc2NyaXB0XCIpO1xuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwiYXBwbGljYXRpb24vanNvblwiLCB7bmFtZTogXCJqYXZhc2NyaXB0XCIsIGpzb246IHRydWV9KTtcbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcImFwcGxpY2F0aW9uL3gtanNvblwiLCB7bmFtZTogXCJqYXZhc2NyaXB0XCIsIGpzb246IHRydWV9KTtcbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcImFwcGxpY2F0aW9uL2xkK2pzb25cIiwge25hbWU6IFwiamF2YXNjcmlwdFwiLCBqc29ubGQ6IHRydWV9KTtcbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQvdHlwZXNjcmlwdFwiLCB7IG5hbWU6IFwiamF2YXNjcmlwdFwiLCB0eXBlc2NyaXB0OiB0cnVlIH0pO1xuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwiYXBwbGljYXRpb24vdHlwZXNjcmlwdFwiLCB7IG5hbWU6IFwiamF2YXNjcmlwdFwiLCB0eXBlc2NyaXB0OiB0cnVlIH0pO1xuXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvbW9kZS9qYXZhc2NyaXB0L2phdmFzY3JpcHQuanNcbi8vIG1vZHVsZSBpZCA9IDE4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHA6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwiY3NzXCIsIGZ1bmN0aW9uKGNvbmZpZywgcGFyc2VyQ29uZmlnKSB7XG4gIHZhciBpbmxpbmUgPSBwYXJzZXJDb25maWcuaW5saW5lXG4gIGlmICghcGFyc2VyQ29uZmlnLnByb3BlcnR5S2V5d29yZHMpIHBhcnNlckNvbmZpZyA9IENvZGVNaXJyb3IucmVzb2x2ZU1vZGUoXCJ0ZXh0L2Nzc1wiKTtcblxuICB2YXIgaW5kZW50VW5pdCA9IGNvbmZpZy5pbmRlbnRVbml0LFxuICAgICAgdG9rZW5Ib29rcyA9IHBhcnNlckNvbmZpZy50b2tlbkhvb2tzLFxuICAgICAgZG9jdW1lbnRUeXBlcyA9IHBhcnNlckNvbmZpZy5kb2N1bWVudFR5cGVzIHx8IHt9LFxuICAgICAgbWVkaWFUeXBlcyA9IHBhcnNlckNvbmZpZy5tZWRpYVR5cGVzIHx8IHt9LFxuICAgICAgbWVkaWFGZWF0dXJlcyA9IHBhcnNlckNvbmZpZy5tZWRpYUZlYXR1cmVzIHx8IHt9LFxuICAgICAgbWVkaWFWYWx1ZUtleXdvcmRzID0gcGFyc2VyQ29uZmlnLm1lZGlhVmFsdWVLZXl3b3JkcyB8fCB7fSxcbiAgICAgIHByb3BlcnR5S2V5d29yZHMgPSBwYXJzZXJDb25maWcucHJvcGVydHlLZXl3b3JkcyB8fCB7fSxcbiAgICAgIG5vblN0YW5kYXJkUHJvcGVydHlLZXl3b3JkcyA9IHBhcnNlckNvbmZpZy5ub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHMgfHwge30sXG4gICAgICBmb250UHJvcGVydGllcyA9IHBhcnNlckNvbmZpZy5mb250UHJvcGVydGllcyB8fCB7fSxcbiAgICAgIGNvdW50ZXJEZXNjcmlwdG9ycyA9IHBhcnNlckNvbmZpZy5jb3VudGVyRGVzY3JpcHRvcnMgfHwge30sXG4gICAgICBjb2xvcktleXdvcmRzID0gcGFyc2VyQ29uZmlnLmNvbG9yS2V5d29yZHMgfHwge30sXG4gICAgICB2YWx1ZUtleXdvcmRzID0gcGFyc2VyQ29uZmlnLnZhbHVlS2V5d29yZHMgfHwge30sXG4gICAgICBhbGxvd05lc3RlZCA9IHBhcnNlckNvbmZpZy5hbGxvd05lc3RlZCxcbiAgICAgIGxpbmVDb21tZW50ID0gcGFyc2VyQ29uZmlnLmxpbmVDb21tZW50LFxuICAgICAgc3VwcG9ydHNBdENvbXBvbmVudCA9IHBhcnNlckNvbmZpZy5zdXBwb3J0c0F0Q29tcG9uZW50ID09PSB0cnVlO1xuXG4gIHZhciB0eXBlLCBvdmVycmlkZTtcbiAgZnVuY3Rpb24gcmV0KHN0eWxlLCB0cCkgeyB0eXBlID0gdHA7IHJldHVybiBzdHlsZTsgfVxuXG4gIC8vIFRva2VuaXplcnNcblxuICBmdW5jdGlvbiB0b2tlbkJhc2Uoc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG4gICAgaWYgKHRva2VuSG9va3NbY2hdKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9rZW5Ib29rc1tjaF0oc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKGNoID09IFwiQFwiKSB7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXFxcXFwtXS8pO1xuICAgICAgcmV0dXJuIHJldChcImRlZlwiLCBzdHJlYW0uY3VycmVudCgpKTtcbiAgICB9IGVsc2UgaWYgKGNoID09IFwiPVwiIHx8IChjaCA9PSBcIn5cIiB8fCBjaCA9PSBcInxcIikgJiYgc3RyZWFtLmVhdChcIj1cIikpIHtcbiAgICAgIHJldHVybiByZXQobnVsbCwgXCJjb21wYXJlXCIpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCJcXFwiXCIgfHwgY2ggPT0gXCInXCIpIHtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmcoY2gpO1xuICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIjXCIpIHtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcXFxcXC1dLyk7XG4gICAgICByZXR1cm4gcmV0KFwiYXRvbVwiLCBcImhhc2hcIik7XG4gICAgfSBlbHNlIGlmIChjaCA9PSBcIiFcIikge1xuICAgICAgc3RyZWFtLm1hdGNoKC9eXFxzKlxcdyovKTtcbiAgICAgIHJldHVybiByZXQoXCJrZXl3b3JkXCIsIFwiaW1wb3J0YW50XCIpO1xuICAgIH0gZWxzZSBpZiAoL1xcZC8udGVzdChjaCkgfHwgY2ggPT0gXCIuXCIgJiYgc3RyZWFtLmVhdCgvXFxkLykpIHtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcdy4lXS8pO1xuICAgICAgcmV0dXJuIHJldChcIm51bWJlclwiLCBcInVuaXRcIik7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCItXCIpIHtcbiAgICAgIGlmICgvW1xcZC5dLy50ZXN0KHN0cmVhbS5wZWVrKCkpKSB7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcdy4lXS8pO1xuICAgICAgICByZXR1cm4gcmV0KFwibnVtYmVyXCIsIFwidW5pdFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eLVtcXHdcXFxcXFwtXSsvKSkge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXFxcXFwtXS8pO1xuICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKC9eXFxzKjovLCBmYWxzZSkpXG4gICAgICAgICAgcmV0dXJuIHJldChcInZhcmlhYmxlLTJcIiwgXCJ2YXJpYWJsZS1kZWZpbml0aW9uXCIpO1xuICAgICAgICByZXR1cm4gcmV0KFwidmFyaWFibGUtMlwiLCBcInZhcmlhYmxlXCIpO1xuICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL15cXHcrLS8pKSB7XG4gICAgICAgIHJldHVybiByZXQoXCJtZXRhXCIsIFwibWV0YVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC9bLCs+KlxcL10vLnRlc3QoY2gpKSB7XG4gICAgICByZXR1cm4gcmV0KG51bGwsIFwic2VsZWN0LW9wXCIpO1xuICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIuXCIgJiYgc3RyZWFtLm1hdGNoKC9eLT9bX2Etel1bX2EtejAtOS1dKi9pKSkge1xuICAgICAgcmV0dXJuIHJldChcInF1YWxpZmllclwiLCBcInF1YWxpZmllclwiKTtcbiAgICB9IGVsc2UgaWYgKC9bOjt7fVxcW1xcXVxcKFxcKV0vLnRlc3QoY2gpKSB7XG4gICAgICByZXR1cm4gcmV0KG51bGwsIGNoKTtcbiAgICB9IGVsc2UgaWYgKCgoY2ggPT0gXCJ1XCIgfHwgY2ggPT0gXCJVXCIpICYmIHN0cmVhbS5tYXRjaCgvcmwoLXByZWZpeCk/XFwoL2kpKSB8fFxuICAgICAgICAgICAgICAgKChjaCA9PSBcImRcIiB8fCBjaCA9PSBcIkRcIikgJiYgc3RyZWFtLm1hdGNoKFwib21haW4oXCIsIHRydWUsIHRydWUpKSB8fFxuICAgICAgICAgICAgICAgKChjaCA9PSBcInJcIiB8fCBjaCA9PSBcIlJcIikgJiYgc3RyZWFtLm1hdGNoKFwiZWdleHAoXCIsIHRydWUsIHRydWUpKSkge1xuICAgICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5QYXJlbnRoZXNpemVkO1xuICAgICAgcmV0dXJuIHJldChcInByb3BlcnR5XCIsIFwid29yZFwiKTtcbiAgICB9IGVsc2UgaWYgKC9bXFx3XFxcXFxcLV0vLnRlc3QoY2gpKSB7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXFxcXFwtXS8pO1xuICAgICAgcmV0dXJuIHJldChcInByb3BlcnR5XCIsIFwid29yZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJldChudWxsLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlblN0cmluZyhxdW90ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBjaDtcbiAgICAgIHdoaWxlICgoY2ggPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChjaCA9PSBxdW90ZSAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgIGlmIChxdW90ZSA9PSBcIilcIikgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQgJiYgY2ggPT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICBpZiAoY2ggPT0gcXVvdGUgfHwgIWVzY2FwZWQgJiYgcXVvdGUgIT0gXCIpXCIpIHN0YXRlLnRva2VuaXplID0gbnVsbDtcbiAgICAgIHJldHVybiByZXQoXCJzdHJpbmdcIiwgXCJzdHJpbmdcIik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRva2VuUGFyZW50aGVzaXplZChzdHJlYW0sIHN0YXRlKSB7XG4gICAgc3RyZWFtLm5leHQoKTsgLy8gTXVzdCBiZSAnKCdcbiAgICBpZiAoIXN0cmVhbS5tYXRjaCgvXFxzKltcXFwiXFwnKV0vLCBmYWxzZSkpXG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuU3RyaW5nKFwiKVwiKTtcbiAgICBlbHNlXG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IG51bGw7XG4gICAgcmV0dXJuIHJldChudWxsLCBcIihcIik7XG4gIH1cblxuICAvLyBDb250ZXh0IG1hbmFnZW1lbnRcblxuICBmdW5jdGlvbiBDb250ZXh0KHR5cGUsIGluZGVudCwgcHJldikge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5pbmRlbnQgPSBpbmRlbnQ7XG4gICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIHR5cGUsIGluZGVudCkge1xuICAgIHN0YXRlLmNvbnRleHQgPSBuZXcgQ29udGV4dCh0eXBlLCBzdHJlYW0uaW5kZW50YXRpb24oKSArIChpbmRlbnQgPT09IGZhbHNlID8gMCA6IGluZGVudFVuaXQpLCBzdGF0ZS5jb250ZXh0KTtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcENvbnRleHQoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuY29udGV4dC5wcmV2KVxuICAgICAgc3RhdGUuY29udGV4dCA9IHN0YXRlLmNvbnRleHQucHJldjtcbiAgICByZXR1cm4gc3RhdGUuY29udGV4dC50eXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFzcyh0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlc1tzdGF0ZS5jb250ZXh0LnR5cGVdKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIHBvcEFuZFBhc3ModHlwZSwgc3RyZWFtLCBzdGF0ZSwgbikge1xuICAgIGZvciAodmFyIGkgPSBuIHx8IDE7IGkgPiAwOyBpLS0pXG4gICAgICBzdGF0ZS5jb250ZXh0ID0gc3RhdGUuY29udGV4dC5wcmV2O1xuICAgIHJldHVybiBwYXNzKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICB9XG5cbiAgLy8gUGFyc2VyXG5cbiAgZnVuY3Rpb24gd29yZEFzVmFsdWUoc3RyZWFtKSB7XG4gICAgdmFyIHdvcmQgPSBzdHJlYW0uY3VycmVudCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHZhbHVlS2V5d29yZHMuaGFzT3duUHJvcGVydHkod29yZCkpXG4gICAgICBvdmVycmlkZSA9IFwiYXRvbVwiO1xuICAgIGVsc2UgaWYgKGNvbG9yS2V5d29yZHMuaGFzT3duUHJvcGVydHkod29yZCkpXG4gICAgICBvdmVycmlkZSA9IFwia2V5d29yZFwiO1xuICAgIGVsc2VcbiAgICAgIG92ZXJyaWRlID0gXCJ2YXJpYWJsZVwiO1xuICB9XG5cbiAgdmFyIHN0YXRlcyA9IHt9O1xuXG4gIHN0YXRlcy50b3AgPSBmdW5jdGlvbih0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIpIHtcbiAgICAgIHJldHVybiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBcImJsb2NrXCIpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIn1cIiAmJiBzdGF0ZS5jb250ZXh0LnByZXYpIHtcbiAgICAgIHJldHVybiBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnRzQXRDb21wb25lbnQgJiYgL0Bjb21wb25lbnQvaS50ZXN0KHR5cGUpKSB7XG4gICAgICByZXR1cm4gcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbSwgXCJhdENvbXBvbmVudEJsb2NrXCIpO1xuICAgIH0gZWxzZSBpZiAoL15AKC1tb3otKT9kb2N1bWVudCQvaS50ZXN0KHR5cGUpKSB7XG4gICAgICByZXR1cm4gcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbSwgXCJkb2N1bWVudFR5cGVzXCIpO1xuICAgIH0gZWxzZSBpZiAoL15AKG1lZGlhfHN1cHBvcnRzfCgtbW96LSk/ZG9jdW1lbnR8aW1wb3J0KSQvaS50ZXN0KHR5cGUpKSB7XG4gICAgICByZXR1cm4gcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbSwgXCJhdEJsb2NrXCIpO1xuICAgIH0gZWxzZSBpZiAoL15AKGZvbnQtZmFjZXxjb3VudGVyLXN0eWxlKS9pLnRlc3QodHlwZSkpIHtcbiAgICAgIHN0YXRlLnN0YXRlQXJnID0gdHlwZTtcbiAgICAgIHJldHVybiBcInJlc3RyaWN0ZWRfYXRCbG9ja19iZWZvcmVcIjtcbiAgICB9IGVsc2UgaWYgKC9eQCgtKG1venxtc3xvfHdlYmtpdCktKT9rZXlmcmFtZXMkL2kudGVzdCh0eXBlKSkge1xuICAgICAgcmV0dXJuIFwia2V5ZnJhbWVzXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlICYmIHR5cGUuY2hhckF0KDApID09IFwiQFwiKSB7XG4gICAgICByZXR1cm4gcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbSwgXCJhdFwiKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJoYXNoXCIpIHtcbiAgICAgIG92ZXJyaWRlID0gXCJidWlsdGluXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwid29yZFwiKSB7XG4gICAgICBvdmVycmlkZSA9IFwidGFnXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwidmFyaWFibGUtZGVmaW5pdGlvblwiKSB7XG4gICAgICByZXR1cm4gXCJtYXliZXByb3BcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJpbnRlcnBvbGF0aW9uXCIpIHtcbiAgICAgIHJldHVybiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBcImludGVycG9sYXRpb25cIik7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiOlwiKSB7XG4gICAgICByZXR1cm4gXCJwc2V1ZG9cIjtcbiAgICB9IGVsc2UgaWYgKGFsbG93TmVzdGVkICYmIHR5cGUgPT0gXCIoXCIpIHtcbiAgICAgIHJldHVybiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBcInBhcmVuc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmNvbnRleHQudHlwZTtcbiAgfTtcblxuICBzdGF0ZXMuYmxvY2sgPSBmdW5jdGlvbih0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIpIHtcbiAgICAgIHZhciB3b3JkID0gc3RyZWFtLmN1cnJlbnQoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHByb3BlcnR5S2V5d29yZHMuaGFzT3duUHJvcGVydHkod29yZCkpIHtcbiAgICAgICAgb3ZlcnJpZGUgPSBcInByb3BlcnR5XCI7XG4gICAgICAgIHJldHVybiBcIm1heWJlcHJvcFwiO1xuICAgICAgfSBlbHNlIGlmIChub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHMuaGFzT3duUHJvcGVydHkod29yZCkpIHtcbiAgICAgICAgb3ZlcnJpZGUgPSBcInN0cmluZy0yXCI7XG4gICAgICAgIHJldHVybiBcIm1heWJlcHJvcFwiO1xuICAgICAgfSBlbHNlIGlmIChhbGxvd05lc3RlZCkge1xuICAgICAgICBvdmVycmlkZSA9IHN0cmVhbS5tYXRjaCgvXlxccyo6KD86XFxzfCQpLywgZmFsc2UpID8gXCJwcm9wZXJ0eVwiIDogXCJ0YWdcIjtcbiAgICAgICAgcmV0dXJuIFwiYmxvY2tcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG92ZXJyaWRlICs9IFwiIGVycm9yXCI7XG4gICAgICAgIHJldHVybiBcIm1heWJlcHJvcFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcIm1ldGFcIikge1xuICAgICAgcmV0dXJuIFwiYmxvY2tcIjtcbiAgICB9IGVsc2UgaWYgKCFhbGxvd05lc3RlZCAmJiAodHlwZSA9PSBcImhhc2hcIiB8fCB0eXBlID09IFwicXVhbGlmaWVyXCIpKSB7XG4gICAgICBvdmVycmlkZSA9IFwiZXJyb3JcIjtcbiAgICAgIHJldHVybiBcImJsb2NrXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGF0ZXMudG9wKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0ZXMubWF5YmVwcm9wID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwiOlwiKSByZXR1cm4gcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbSwgXCJwcm9wXCIpO1xuICAgIHJldHVybiBwYXNzKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICB9O1xuXG4gIHN0YXRlcy5wcm9wID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwiO1wiKSByZXR1cm4gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIgJiYgYWxsb3dOZXN0ZWQpIHJldHVybiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBcInByb3BCbG9ja1wiKTtcbiAgICBpZiAodHlwZSA9PSBcIn1cIiB8fCB0eXBlID09IFwie1wiKSByZXR1cm4gcG9wQW5kUGFzcyh0eXBlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIFwicGFyZW5zXCIpO1xuXG4gICAgaWYgKHR5cGUgPT0gXCJoYXNoXCIgJiYgIS9eIyhbMC05YS1mQS1mXXszLDR9fFswLTlhLWZBLWZdezZ9fFswLTlhLWZBLWZdezh9KSQvLnRlc3Qoc3RyZWFtLmN1cnJlbnQoKSkpIHtcbiAgICAgIG92ZXJyaWRlICs9IFwiIGVycm9yXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwid29yZFwiKSB7XG4gICAgICB3b3JkQXNWYWx1ZShzdHJlYW0pO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImludGVycG9sYXRpb25cIikge1xuICAgICAgcmV0dXJuIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIFwiaW50ZXJwb2xhdGlvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFwicHJvcFwiO1xuICB9O1xuXG4gIHN0YXRlcy5wcm9wQmxvY2sgPSBmdW5jdGlvbih0eXBlLCBfc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwifVwiKSByZXR1cm4gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIpIHsgb3ZlcnJpZGUgPSBcInByb3BlcnR5XCI7IHJldHVybiBcIm1heWJlcHJvcFwiOyB9XG4gICAgcmV0dXJuIHN0YXRlLmNvbnRleHQudHlwZTtcbiAgfTtcblxuICBzdGF0ZXMucGFyZW5zID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwie1wiIHx8IHR5cGUgPT0gXCJ9XCIpIHJldHVybiBwb3BBbmRQYXNzKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmICh0eXBlID09IFwiKVwiKSByZXR1cm4gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCIoXCIpIHJldHVybiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBcInBhcmVuc1wiKTtcbiAgICBpZiAodHlwZSA9PSBcImludGVycG9sYXRpb25cIikgcmV0dXJuIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIFwiaW50ZXJwb2xhdGlvblwiKTtcbiAgICBpZiAodHlwZSA9PSBcIndvcmRcIikgd29yZEFzVmFsdWUoc3RyZWFtKTtcbiAgICByZXR1cm4gXCJwYXJlbnNcIjtcbiAgfTtcblxuICBzdGF0ZXMucHNldWRvID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwibWV0YVwiKSByZXR1cm4gXCJwc2V1ZG9cIjtcblxuICAgIGlmICh0eXBlID09IFwid29yZFwiKSB7XG4gICAgICBvdmVycmlkZSA9IFwidmFyaWFibGUtM1wiO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvbnRleHQudHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhc3ModHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gIH07XG5cbiAgc3RhdGVzLmRvY3VtZW50VHlwZXMgPSBmdW5jdGlvbih0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIgJiYgZG9jdW1lbnRUeXBlcy5oYXNPd25Qcm9wZXJ0eShzdHJlYW0uY3VycmVudCgpKSkge1xuICAgICAgb3ZlcnJpZGUgPSBcInRhZ1wiO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvbnRleHQudHlwZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YXRlcy5hdEJsb2NrKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0ZXMuYXRCbG9jayA9IGZ1bmN0aW9uKHR5cGUsIHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAodHlwZSA9PSBcIihcIikgcmV0dXJuIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIFwiYXRCbG9ja19wYXJlbnNcIik7XG4gICAgaWYgKHR5cGUgPT0gXCJ9XCIgfHwgdHlwZSA9PSBcIjtcIikgcmV0dXJuIHBvcEFuZFBhc3ModHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIpIHJldHVybiBwb3BDb250ZXh0KHN0YXRlKSAmJiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBhbGxvd05lc3RlZCA/IFwiYmxvY2tcIiA6IFwidG9wXCIpO1xuXG4gICAgaWYgKHR5cGUgPT0gXCJpbnRlcnBvbGF0aW9uXCIpIHJldHVybiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBcImludGVycG9sYXRpb25cIik7XG5cbiAgICBpZiAodHlwZSA9PSBcIndvcmRcIikge1xuICAgICAgdmFyIHdvcmQgPSBzdHJlYW0uY3VycmVudCgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAod29yZCA9PSBcIm9ubHlcIiB8fCB3b3JkID09IFwibm90XCIgfHwgd29yZCA9PSBcImFuZFwiIHx8IHdvcmQgPT0gXCJvclwiKVxuICAgICAgICBvdmVycmlkZSA9IFwia2V5d29yZFwiO1xuICAgICAgZWxzZSBpZiAobWVkaWFUeXBlcy5oYXNPd25Qcm9wZXJ0eSh3b3JkKSlcbiAgICAgICAgb3ZlcnJpZGUgPSBcImF0dHJpYnV0ZVwiO1xuICAgICAgZWxzZSBpZiAobWVkaWFGZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eSh3b3JkKSlcbiAgICAgICAgb3ZlcnJpZGUgPSBcInByb3BlcnR5XCI7XG4gICAgICBlbHNlIGlmIChtZWRpYVZhbHVlS2V5d29yZHMuaGFzT3duUHJvcGVydHkod29yZCkpXG4gICAgICAgIG92ZXJyaWRlID0gXCJrZXl3b3JkXCI7XG4gICAgICBlbHNlIGlmIChwcm9wZXJ0eUtleXdvcmRzLmhhc093blByb3BlcnR5KHdvcmQpKVxuICAgICAgICBvdmVycmlkZSA9IFwicHJvcGVydHlcIjtcbiAgICAgIGVsc2UgaWYgKG5vblN0YW5kYXJkUHJvcGVydHlLZXl3b3Jkcy5oYXNPd25Qcm9wZXJ0eSh3b3JkKSlcbiAgICAgICAgb3ZlcnJpZGUgPSBcInN0cmluZy0yXCI7XG4gICAgICBlbHNlIGlmICh2YWx1ZUtleXdvcmRzLmhhc093blByb3BlcnR5KHdvcmQpKVxuICAgICAgICBvdmVycmlkZSA9IFwiYXRvbVwiO1xuICAgICAgZWxzZSBpZiAoY29sb3JLZXl3b3Jkcy5oYXNPd25Qcm9wZXJ0eSh3b3JkKSlcbiAgICAgICAgb3ZlcnJpZGUgPSBcImtleXdvcmRcIjtcbiAgICAgIGVsc2VcbiAgICAgICAgb3ZlcnJpZGUgPSBcImVycm9yXCI7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5jb250ZXh0LnR5cGU7XG4gIH07XG5cbiAgc3RhdGVzLmF0Q29tcG9uZW50QmxvY2sgPSBmdW5jdGlvbih0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ9XCIpXG4gICAgICByZXR1cm4gcG9wQW5kUGFzcyh0eXBlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAodHlwZSA9PSBcIntcIilcbiAgICAgIHJldHVybiBwb3BDb250ZXh0KHN0YXRlKSAmJiBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLCBhbGxvd05lc3RlZCA/IFwiYmxvY2tcIiA6IFwidG9wXCIsIGZhbHNlKTtcbiAgICBpZiAodHlwZSA9PSBcIndvcmRcIilcbiAgICAgIG92ZXJyaWRlID0gXCJlcnJvclwiO1xuICAgIHJldHVybiBzdGF0ZS5jb250ZXh0LnR5cGU7XG4gIH07XG5cbiAgc3RhdGVzLmF0QmxvY2tfcGFyZW5zID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwiKVwiKSByZXR1cm4gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIgfHwgdHlwZSA9PSBcIn1cIikgcmV0dXJuIHBvcEFuZFBhc3ModHlwZSwgc3RyZWFtLCBzdGF0ZSwgMik7XG4gICAgcmV0dXJuIHN0YXRlcy5hdEJsb2NrKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICB9O1xuXG4gIHN0YXRlcy5yZXN0cmljdGVkX2F0QmxvY2tfYmVmb3JlID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwie1wiKVxuICAgICAgcmV0dXJuIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIFwicmVzdHJpY3RlZF9hdEJsb2NrXCIpO1xuICAgIGlmICh0eXBlID09IFwid29yZFwiICYmIHN0YXRlLnN0YXRlQXJnID09IFwiQGNvdW50ZXItc3R5bGVcIikge1xuICAgICAgb3ZlcnJpZGUgPSBcInZhcmlhYmxlXCI7XG4gICAgICByZXR1cm4gXCJyZXN0cmljdGVkX2F0QmxvY2tfYmVmb3JlXCI7XG4gICAgfVxuICAgIHJldHVybiBwYXNzKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICB9O1xuXG4gIHN0YXRlcy5yZXN0cmljdGVkX2F0QmxvY2sgPSBmdW5jdGlvbih0eXBlLCBzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHR5cGUgPT0gXCJ9XCIpIHtcbiAgICAgIHN0YXRlLnN0YXRlQXJnID0gbnVsbDtcbiAgICAgIHJldHVybiBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIpIHtcbiAgICAgIGlmICgoc3RhdGUuc3RhdGVBcmcgPT0gXCJAZm9udC1mYWNlXCIgJiYgIWZvbnRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHN0cmVhbS5jdXJyZW50KCkudG9Mb3dlckNhc2UoKSkpIHx8XG4gICAgICAgICAgKHN0YXRlLnN0YXRlQXJnID09IFwiQGNvdW50ZXItc3R5bGVcIiAmJiAhY291bnRlckRlc2NyaXB0b3JzLmhhc093blByb3BlcnR5KHN0cmVhbS5jdXJyZW50KCkudG9Mb3dlckNhc2UoKSkpKVxuICAgICAgICBvdmVycmlkZSA9IFwiZXJyb3JcIjtcbiAgICAgIGVsc2VcbiAgICAgICAgb3ZlcnJpZGUgPSBcInByb3BlcnR5XCI7XG4gICAgICByZXR1cm4gXCJtYXliZXByb3BcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwicmVzdHJpY3RlZF9hdEJsb2NrXCI7XG4gIH07XG5cbiAgc3RhdGVzLmtleWZyYW1lcyA9IGZ1bmN0aW9uKHR5cGUsIHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAodHlwZSA9PSBcIndvcmRcIikgeyBvdmVycmlkZSA9IFwidmFyaWFibGVcIjsgcmV0dXJuIFwia2V5ZnJhbWVzXCI7IH1cbiAgICBpZiAodHlwZSA9PSBcIntcIikgcmV0dXJuIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0sIFwidG9wXCIpO1xuICAgIHJldHVybiBwYXNzKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICB9O1xuXG4gIHN0YXRlcy5hdCA9IGZ1bmN0aW9uKHR5cGUsIHN0cmVhbSwgc3RhdGUpIHtcbiAgICBpZiAodHlwZSA9PSBcIjtcIikgcmV0dXJuIHBvcENvbnRleHQoc3RhdGUpO1xuICAgIGlmICh0eXBlID09IFwie1wiIHx8IHR5cGUgPT0gXCJ9XCIpIHJldHVybiBwb3BBbmRQYXNzKHR5cGUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmICh0eXBlID09IFwid29yZFwiKSBvdmVycmlkZSA9IFwidGFnXCI7XG4gICAgZWxzZSBpZiAodHlwZSA9PSBcImhhc2hcIikgb3ZlcnJpZGUgPSBcImJ1aWx0aW5cIjtcbiAgICByZXR1cm4gXCJhdFwiO1xuICB9O1xuXG4gIHN0YXRlcy5pbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24odHlwZSwgc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICh0eXBlID09IFwifVwiKSByZXR1cm4gcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJ7XCIgfHwgdHlwZSA9PSBcIjtcIikgcmV0dXJuIHBvcEFuZFBhc3ModHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHR5cGUgPT0gXCJ3b3JkXCIpIG92ZXJyaWRlID0gXCJ2YXJpYWJsZVwiO1xuICAgIGVsc2UgaWYgKHR5cGUgIT0gXCJ2YXJpYWJsZVwiICYmIHR5cGUgIT0gXCIoXCIgJiYgdHlwZSAhPSBcIilcIikgb3ZlcnJpZGUgPSBcImVycm9yXCI7XG4gICAgcmV0dXJuIFwiaW50ZXJwb2xhdGlvblwiO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oYmFzZSkge1xuICAgICAgcmV0dXJuIHt0b2tlbml6ZTogbnVsbCxcbiAgICAgICAgICAgICAgc3RhdGU6IGlubGluZSA/IFwiYmxvY2tcIiA6IFwidG9wXCIsXG4gICAgICAgICAgICAgIHN0YXRlQXJnOiBudWxsLFxuICAgICAgICAgICAgICBjb250ZXh0OiBuZXcgQ29udGV4dChpbmxpbmUgPyBcImJsb2NrXCIgOiBcInRvcFwiLCBiYXNlIHx8IDAsIG51bGwpfTtcbiAgICB9LFxuXG4gICAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIGlmICghc3RhdGUudG9rZW5pemUgJiYgc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHN0eWxlID0gKHN0YXRlLnRva2VuaXplIHx8IHRva2VuQmFzZSkoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdHlwZSA9IHN0eWxlWzFdO1xuICAgICAgICBzdHlsZSA9IHN0eWxlWzBdO1xuICAgICAgfVxuICAgICAgb3ZlcnJpZGUgPSBzdHlsZTtcbiAgICAgIGlmICh0eXBlICE9IFwiY29tbWVudFwiKVxuICAgICAgICBzdGF0ZS5zdGF0ZSA9IHN0YXRlc1tzdGF0ZS5zdGF0ZV0odHlwZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgICByZXR1cm4gb3ZlcnJpZGU7XG4gICAgfSxcblxuICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikge1xuICAgICAgdmFyIGN4ID0gc3RhdGUuY29udGV4dCwgY2ggPSB0ZXh0QWZ0ZXIgJiYgdGV4dEFmdGVyLmNoYXJBdCgwKTtcbiAgICAgIHZhciBpbmRlbnQgPSBjeC5pbmRlbnQ7XG4gICAgICBpZiAoY3gudHlwZSA9PSBcInByb3BcIiAmJiAoY2ggPT0gXCJ9XCIgfHwgY2ggPT0gXCIpXCIpKSBjeCA9IGN4LnByZXY7XG4gICAgICBpZiAoY3gucHJldikge1xuICAgICAgICBpZiAoY2ggPT0gXCJ9XCIgJiYgKGN4LnR5cGUgPT0gXCJibG9ja1wiIHx8IGN4LnR5cGUgPT0gXCJ0b3BcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjeC50eXBlID09IFwiaW50ZXJwb2xhdGlvblwiIHx8IGN4LnR5cGUgPT0gXCJyZXN0cmljdGVkX2F0QmxvY2tcIikpIHtcbiAgICAgICAgICAvLyBSZXN1bWUgaW5kZW50YXRpb24gZnJvbSBwYXJlbnQgY29udGV4dC5cbiAgICAgICAgICBjeCA9IGN4LnByZXY7XG4gICAgICAgICAgaW5kZW50ID0gY3guaW5kZW50O1xuICAgICAgICB9IGVsc2UgaWYgKGNoID09IFwiKVwiICYmIChjeC50eXBlID09IFwicGFyZW5zXCIgfHwgY3gudHlwZSA9PSBcImF0QmxvY2tfcGFyZW5zXCIpIHx8XG4gICAgICAgICAgICBjaCA9PSBcIntcIiAmJiAoY3gudHlwZSA9PSBcImF0XCIgfHwgY3gudHlwZSA9PSBcImF0QmxvY2tcIikpIHtcbiAgICAgICAgICAvLyBEZWRlbnQgcmVsYXRpdmUgdG8gY3VycmVudCBjb250ZXh0LlxuICAgICAgICAgIGluZGVudCA9IE1hdGgubWF4KDAsIGN4LmluZGVudCAtIGluZGVudFVuaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZW50O1xuICAgIH0sXG5cbiAgICBlbGVjdHJpY0NoYXJzOiBcIn1cIixcbiAgICBibG9ja0NvbW1lbnRTdGFydDogXCIvKlwiLFxuICAgIGJsb2NrQ29tbWVudEVuZDogXCIqL1wiLFxuICAgIGJsb2NrQ29tbWVudENvbnRpbnVlOiBcIiAqIFwiLFxuICAgIGxpbmVDb21tZW50OiBsaW5lQ29tbWVudCxcbiAgICBmb2xkOiBcImJyYWNlXCJcbiAgfTtcbn0pO1xuXG4gIGZ1bmN0aW9uIGtleVNldChhcnJheSkge1xuICAgIHZhciBrZXlzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSkge1xuICAgICAga2V5c1thcnJheVtpXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50VHlwZXNfID0gW1xuICAgIFwiZG9tYWluXCIsIFwicmVnZXhwXCIsIFwidXJsXCIsIFwidXJsLXByZWZpeFwiXG4gIF0sIGRvY3VtZW50VHlwZXMgPSBrZXlTZXQoZG9jdW1lbnRUeXBlc18pO1xuXG4gIHZhciBtZWRpYVR5cGVzXyA9IFtcbiAgICBcImFsbFwiLCBcImF1cmFsXCIsIFwiYnJhaWxsZVwiLCBcImhhbmRoZWxkXCIsIFwicHJpbnRcIiwgXCJwcm9qZWN0aW9uXCIsIFwic2NyZWVuXCIsXG4gICAgXCJ0dHlcIiwgXCJ0dlwiLCBcImVtYm9zc2VkXCJcbiAgXSwgbWVkaWFUeXBlcyA9IGtleVNldChtZWRpYVR5cGVzXyk7XG5cbiAgdmFyIG1lZGlhRmVhdHVyZXNfID0gW1xuICAgIFwid2lkdGhcIiwgXCJtaW4td2lkdGhcIiwgXCJtYXgtd2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJtaW4taGVpZ2h0XCIsIFwibWF4LWhlaWdodFwiLFxuICAgIFwiZGV2aWNlLXdpZHRoXCIsIFwibWluLWRldmljZS13aWR0aFwiLCBcIm1heC1kZXZpY2Utd2lkdGhcIiwgXCJkZXZpY2UtaGVpZ2h0XCIsXG4gICAgXCJtaW4tZGV2aWNlLWhlaWdodFwiLCBcIm1heC1kZXZpY2UtaGVpZ2h0XCIsIFwiYXNwZWN0LXJhdGlvXCIsXG4gICAgXCJtaW4tYXNwZWN0LXJhdGlvXCIsIFwibWF4LWFzcGVjdC1yYXRpb1wiLCBcImRldmljZS1hc3BlY3QtcmF0aW9cIixcbiAgICBcIm1pbi1kZXZpY2UtYXNwZWN0LXJhdGlvXCIsIFwibWF4LWRldmljZS1hc3BlY3QtcmF0aW9cIiwgXCJjb2xvclwiLCBcIm1pbi1jb2xvclwiLFxuICAgIFwibWF4LWNvbG9yXCIsIFwiY29sb3ItaW5kZXhcIiwgXCJtaW4tY29sb3ItaW5kZXhcIiwgXCJtYXgtY29sb3ItaW5kZXhcIixcbiAgICBcIm1vbm9jaHJvbWVcIiwgXCJtaW4tbW9ub2Nocm9tZVwiLCBcIm1heC1tb25vY2hyb21lXCIsIFwicmVzb2x1dGlvblwiLFxuICAgIFwibWluLXJlc29sdXRpb25cIiwgXCJtYXgtcmVzb2x1dGlvblwiLCBcInNjYW5cIiwgXCJncmlkXCIsIFwib3JpZW50YXRpb25cIixcbiAgICBcImRldmljZS1waXhlbC1yYXRpb1wiLCBcIm1pbi1kZXZpY2UtcGl4ZWwtcmF0aW9cIiwgXCJtYXgtZGV2aWNlLXBpeGVsLXJhdGlvXCIsXG4gICAgXCJwb2ludGVyXCIsIFwiYW55LXBvaW50ZXJcIiwgXCJob3ZlclwiLCBcImFueS1ob3ZlclwiXG4gIF0sIG1lZGlhRmVhdHVyZXMgPSBrZXlTZXQobWVkaWFGZWF0dXJlc18pO1xuXG4gIHZhciBtZWRpYVZhbHVlS2V5d29yZHNfID0gW1xuICAgIFwibGFuZHNjYXBlXCIsIFwicG9ydHJhaXRcIiwgXCJub25lXCIsIFwiY29hcnNlXCIsIFwiZmluZVwiLCBcIm9uLWRlbWFuZFwiLCBcImhvdmVyXCIsXG4gICAgXCJpbnRlcmxhY2VcIiwgXCJwcm9ncmVzc2l2ZVwiXG4gIF0sIG1lZGlhVmFsdWVLZXl3b3JkcyA9IGtleVNldChtZWRpYVZhbHVlS2V5d29yZHNfKTtcblxuICB2YXIgcHJvcGVydHlLZXl3b3Jkc18gPSBbXG4gICAgXCJhbGlnbi1jb250ZW50XCIsIFwiYWxpZ24taXRlbXNcIiwgXCJhbGlnbi1zZWxmXCIsIFwiYWxpZ25tZW50LWFkanVzdFwiLFxuICAgIFwiYWxpZ25tZW50LWJhc2VsaW5lXCIsIFwiYW5jaG9yLXBvaW50XCIsIFwiYW5pbWF0aW9uXCIsIFwiYW5pbWF0aW9uLWRlbGF5XCIsXG4gICAgXCJhbmltYXRpb24tZGlyZWN0aW9uXCIsIFwiYW5pbWF0aW9uLWR1cmF0aW9uXCIsIFwiYW5pbWF0aW9uLWZpbGwtbW9kZVwiLFxuICAgIFwiYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudFwiLCBcImFuaW1hdGlvbi1uYW1lXCIsIFwiYW5pbWF0aW9uLXBsYXktc3RhdGVcIixcbiAgICBcImFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIiwgXCJhcHBlYXJhbmNlXCIsIFwiYXppbXV0aFwiLCBcImJhY2tmYWNlLXZpc2liaWxpdHlcIixcbiAgICBcImJhY2tncm91bmRcIiwgXCJiYWNrZ3JvdW5kLWF0dGFjaG1lbnRcIiwgXCJiYWNrZ3JvdW5kLWJsZW5kLW1vZGVcIiwgXCJiYWNrZ3JvdW5kLWNsaXBcIixcbiAgICBcImJhY2tncm91bmQtY29sb3JcIiwgXCJiYWNrZ3JvdW5kLWltYWdlXCIsIFwiYmFja2dyb3VuZC1vcmlnaW5cIiwgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCIsXG4gICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiLCBcImJhY2tncm91bmQtc2l6ZVwiLCBcImJhc2VsaW5lLXNoaWZ0XCIsIFwiYmluZGluZ1wiLFxuICAgIFwiYmxlZWRcIiwgXCJib29rbWFyay1sYWJlbFwiLCBcImJvb2ttYXJrLWxldmVsXCIsIFwiYm9va21hcmstc3RhdGVcIixcbiAgICBcImJvb2ttYXJrLXRhcmdldFwiLCBcImJvcmRlclwiLCBcImJvcmRlci1ib3R0b21cIiwgXCJib3JkZXItYm90dG9tLWNvbG9yXCIsXG4gICAgXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCIsIFwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcIixcbiAgICBcImJvcmRlci1ib3R0b20tc3R5bGVcIiwgXCJib3JkZXItYm90dG9tLXdpZHRoXCIsIFwiYm9yZGVyLWNvbGxhcHNlXCIsXG4gICAgXCJib3JkZXItY29sb3JcIiwgXCJib3JkZXItaW1hZ2VcIiwgXCJib3JkZXItaW1hZ2Utb3V0c2V0XCIsXG4gICAgXCJib3JkZXItaW1hZ2UtcmVwZWF0XCIsIFwiYm9yZGVyLWltYWdlLXNsaWNlXCIsIFwiYm9yZGVyLWltYWdlLXNvdXJjZVwiLFxuICAgIFwiYm9yZGVyLWltYWdlLXdpZHRoXCIsIFwiYm9yZGVyLWxlZnRcIiwgXCJib3JkZXItbGVmdC1jb2xvclwiLFxuICAgIFwiYm9yZGVyLWxlZnQtc3R5bGVcIiwgXCJib3JkZXItbGVmdC13aWR0aFwiLCBcImJvcmRlci1yYWRpdXNcIiwgXCJib3JkZXItcmlnaHRcIixcbiAgICBcImJvcmRlci1yaWdodC1jb2xvclwiLCBcImJvcmRlci1yaWdodC1zdHlsZVwiLCBcImJvcmRlci1yaWdodC13aWR0aFwiLFxuICAgIFwiYm9yZGVyLXNwYWNpbmdcIiwgXCJib3JkZXItc3R5bGVcIiwgXCJib3JkZXItdG9wXCIsIFwiYm9yZGVyLXRvcC1jb2xvclwiLFxuICAgIFwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1wiLCBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCIsIFwiYm9yZGVyLXRvcC1zdHlsZVwiLFxuICAgIFwiYm9yZGVyLXRvcC13aWR0aFwiLCBcImJvcmRlci13aWR0aFwiLCBcImJvdHRvbVwiLCBcImJveC1kZWNvcmF0aW9uLWJyZWFrXCIsXG4gICAgXCJib3gtc2hhZG93XCIsIFwiYm94LXNpemluZ1wiLCBcImJyZWFrLWFmdGVyXCIsIFwiYnJlYWstYmVmb3JlXCIsIFwiYnJlYWstaW5zaWRlXCIsXG4gICAgXCJjYXB0aW9uLXNpZGVcIiwgXCJjYXJldC1jb2xvclwiLCBcImNsZWFyXCIsIFwiY2xpcFwiLCBcImNvbG9yXCIsIFwiY29sb3ItcHJvZmlsZVwiLCBcImNvbHVtbi1jb3VudFwiLFxuICAgIFwiY29sdW1uLWZpbGxcIiwgXCJjb2x1bW4tZ2FwXCIsIFwiY29sdW1uLXJ1bGVcIiwgXCJjb2x1bW4tcnVsZS1jb2xvclwiLFxuICAgIFwiY29sdW1uLXJ1bGUtc3R5bGVcIiwgXCJjb2x1bW4tcnVsZS13aWR0aFwiLCBcImNvbHVtbi1zcGFuXCIsIFwiY29sdW1uLXdpZHRoXCIsXG4gICAgXCJjb2x1bW5zXCIsIFwiY29udGVudFwiLCBcImNvdW50ZXItaW5jcmVtZW50XCIsIFwiY291bnRlci1yZXNldFwiLCBcImNyb3BcIiwgXCJjdWVcIixcbiAgICBcImN1ZS1hZnRlclwiLCBcImN1ZS1iZWZvcmVcIiwgXCJjdXJzb3JcIiwgXCJkaXJlY3Rpb25cIiwgXCJkaXNwbGF5XCIsXG4gICAgXCJkb21pbmFudC1iYXNlbGluZVwiLCBcImRyb3AtaW5pdGlhbC1hZnRlci1hZGp1c3RcIixcbiAgICBcImRyb3AtaW5pdGlhbC1hZnRlci1hbGlnblwiLCBcImRyb3AtaW5pdGlhbC1iZWZvcmUtYWRqdXN0XCIsXG4gICAgXCJkcm9wLWluaXRpYWwtYmVmb3JlLWFsaWduXCIsIFwiZHJvcC1pbml0aWFsLXNpemVcIiwgXCJkcm9wLWluaXRpYWwtdmFsdWVcIixcbiAgICBcImVsZXZhdGlvblwiLCBcImVtcHR5LWNlbGxzXCIsIFwiZml0XCIsIFwiZml0LXBvc2l0aW9uXCIsIFwiZmxleFwiLCBcImZsZXgtYmFzaXNcIixcbiAgICBcImZsZXgtZGlyZWN0aW9uXCIsIFwiZmxleC1mbG93XCIsIFwiZmxleC1ncm93XCIsIFwiZmxleC1zaHJpbmtcIiwgXCJmbGV4LXdyYXBcIixcbiAgICBcImZsb2F0XCIsIFwiZmxvYXQtb2Zmc2V0XCIsIFwiZmxvdy1mcm9tXCIsIFwiZmxvdy1pbnRvXCIsIFwiZm9udFwiLCBcImZvbnQtZmVhdHVyZS1zZXR0aW5nc1wiLFxuICAgIFwiZm9udC1mYW1pbHlcIiwgXCJmb250LWtlcm5pbmdcIiwgXCJmb250LWxhbmd1YWdlLW92ZXJyaWRlXCIsIFwiZm9udC1zaXplXCIsIFwiZm9udC1zaXplLWFkanVzdFwiLFxuICAgIFwiZm9udC1zdHJldGNoXCIsIFwiZm9udC1zdHlsZVwiLCBcImZvbnQtc3ludGhlc2lzXCIsIFwiZm9udC12YXJpYW50XCIsXG4gICAgXCJmb250LXZhcmlhbnQtYWx0ZXJuYXRlc1wiLCBcImZvbnQtdmFyaWFudC1jYXBzXCIsIFwiZm9udC12YXJpYW50LWVhc3QtYXNpYW5cIixcbiAgICBcImZvbnQtdmFyaWFudC1saWdhdHVyZXNcIiwgXCJmb250LXZhcmlhbnQtbnVtZXJpY1wiLCBcImZvbnQtdmFyaWFudC1wb3NpdGlvblwiLFxuICAgIFwiZm9udC13ZWlnaHRcIiwgXCJncmlkXCIsIFwiZ3JpZC1hcmVhXCIsIFwiZ3JpZC1hdXRvLWNvbHVtbnNcIiwgXCJncmlkLWF1dG8tZmxvd1wiLFxuICAgIFwiZ3JpZC1hdXRvLXJvd3NcIiwgXCJncmlkLWNvbHVtblwiLCBcImdyaWQtY29sdW1uLWVuZFwiLCBcImdyaWQtY29sdW1uLWdhcFwiLFxuICAgIFwiZ3JpZC1jb2x1bW4tc3RhcnRcIiwgXCJncmlkLWdhcFwiLCBcImdyaWQtcm93XCIsIFwiZ3JpZC1yb3ctZW5kXCIsIFwiZ3JpZC1yb3ctZ2FwXCIsXG4gICAgXCJncmlkLXJvdy1zdGFydFwiLCBcImdyaWQtdGVtcGxhdGVcIiwgXCJncmlkLXRlbXBsYXRlLWFyZWFzXCIsIFwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXCIsXG4gICAgXCJncmlkLXRlbXBsYXRlLXJvd3NcIiwgXCJoYW5naW5nLXB1bmN0dWF0aW9uXCIsIFwiaGVpZ2h0XCIsIFwiaHlwaGVuc1wiLFxuICAgIFwiaWNvblwiLCBcImltYWdlLW9yaWVudGF0aW9uXCIsIFwiaW1hZ2UtcmVuZGVyaW5nXCIsIFwiaW1hZ2UtcmVzb2x1dGlvblwiLFxuICAgIFwiaW5saW5lLWJveC1hbGlnblwiLCBcImp1c3RpZnktY29udGVudFwiLCBcImp1c3RpZnktaXRlbXNcIiwgXCJqdXN0aWZ5LXNlbGZcIiwgXCJsZWZ0XCIsIFwibGV0dGVyLXNwYWNpbmdcIixcbiAgICBcImxpbmUtYnJlYWtcIiwgXCJsaW5lLWhlaWdodFwiLCBcImxpbmUtc3RhY2tpbmdcIiwgXCJsaW5lLXN0YWNraW5nLXJ1YnlcIixcbiAgICBcImxpbmUtc3RhY2tpbmctc2hpZnRcIiwgXCJsaW5lLXN0YWNraW5nLXN0cmF0ZWd5XCIsIFwibGlzdC1zdHlsZVwiLFxuICAgIFwibGlzdC1zdHlsZS1pbWFnZVwiLCBcImxpc3Qtc3R5bGUtcG9zaXRpb25cIiwgXCJsaXN0LXN0eWxlLXR5cGVcIiwgXCJtYXJnaW5cIixcbiAgICBcIm1hcmdpbi1ib3R0b21cIiwgXCJtYXJnaW4tbGVmdFwiLCBcIm1hcmdpbi1yaWdodFwiLCBcIm1hcmdpbi10b3BcIixcbiAgICBcIm1hcmtzXCIsIFwibWFycXVlZS1kaXJlY3Rpb25cIiwgXCJtYXJxdWVlLWxvb3BcIixcbiAgICBcIm1hcnF1ZWUtcGxheS1jb3VudFwiLCBcIm1hcnF1ZWUtc3BlZWRcIiwgXCJtYXJxdWVlLXN0eWxlXCIsIFwibWF4LWhlaWdodFwiLFxuICAgIFwibWF4LXdpZHRoXCIsIFwibWluLWhlaWdodFwiLCBcIm1pbi13aWR0aFwiLCBcIm1vdmUtdG9cIiwgXCJuYXYtZG93blwiLCBcIm5hdi1pbmRleFwiLFxuICAgIFwibmF2LWxlZnRcIiwgXCJuYXYtcmlnaHRcIiwgXCJuYXYtdXBcIiwgXCJvYmplY3QtZml0XCIsIFwib2JqZWN0LXBvc2l0aW9uXCIsXG4gICAgXCJvcGFjaXR5XCIsIFwib3JkZXJcIiwgXCJvcnBoYW5zXCIsIFwib3V0bGluZVwiLFxuICAgIFwib3V0bGluZS1jb2xvclwiLCBcIm91dGxpbmUtb2Zmc2V0XCIsIFwib3V0bGluZS1zdHlsZVwiLCBcIm91dGxpbmUtd2lkdGhcIixcbiAgICBcIm92ZXJmbG93XCIsIFwib3ZlcmZsb3ctc3R5bGVcIiwgXCJvdmVyZmxvdy13cmFwXCIsIFwib3ZlcmZsb3cteFwiLCBcIm92ZXJmbG93LXlcIixcbiAgICBcInBhZGRpbmdcIiwgXCJwYWRkaW5nLWJvdHRvbVwiLCBcInBhZGRpbmctbGVmdFwiLCBcInBhZGRpbmctcmlnaHRcIiwgXCJwYWRkaW5nLXRvcFwiLFxuICAgIFwicGFnZVwiLCBcInBhZ2UtYnJlYWstYWZ0ZXJcIiwgXCJwYWdlLWJyZWFrLWJlZm9yZVwiLCBcInBhZ2UtYnJlYWstaW5zaWRlXCIsXG4gICAgXCJwYWdlLXBvbGljeVwiLCBcInBhdXNlXCIsIFwicGF1c2UtYWZ0ZXJcIiwgXCJwYXVzZS1iZWZvcmVcIiwgXCJwZXJzcGVjdGl2ZVwiLFxuICAgIFwicGVyc3BlY3RpdmUtb3JpZ2luXCIsIFwicGl0Y2hcIiwgXCJwaXRjaC1yYW5nZVwiLCBcInBsYWNlLWNvbnRlbnRcIiwgXCJwbGFjZS1pdGVtc1wiLCBcInBsYWNlLXNlbGZcIiwgXCJwbGF5LWR1cmluZ1wiLCBcInBvc2l0aW9uXCIsXG4gICAgXCJwcmVzZW50YXRpb24tbGV2ZWxcIiwgXCJwdW5jdHVhdGlvbi10cmltXCIsIFwicXVvdGVzXCIsIFwicmVnaW9uLWJyZWFrLWFmdGVyXCIsXG4gICAgXCJyZWdpb24tYnJlYWstYmVmb3JlXCIsIFwicmVnaW9uLWJyZWFrLWluc2lkZVwiLCBcInJlZ2lvbi1mcmFnbWVudFwiLFxuICAgIFwicmVuZGVyaW5nLWludGVudFwiLCBcInJlc2l6ZVwiLCBcInJlc3RcIiwgXCJyZXN0LWFmdGVyXCIsIFwicmVzdC1iZWZvcmVcIiwgXCJyaWNobmVzc1wiLFxuICAgIFwicmlnaHRcIiwgXCJyb3RhdGlvblwiLCBcInJvdGF0aW9uLXBvaW50XCIsIFwicnVieS1hbGlnblwiLCBcInJ1Ynktb3ZlcmhhbmdcIixcbiAgICBcInJ1YnktcG9zaXRpb25cIiwgXCJydWJ5LXNwYW5cIiwgXCJzaGFwZS1pbWFnZS10aHJlc2hvbGRcIiwgXCJzaGFwZS1pbnNpZGVcIiwgXCJzaGFwZS1tYXJnaW5cIixcbiAgICBcInNoYXBlLW91dHNpZGVcIiwgXCJzaXplXCIsIFwic3BlYWtcIiwgXCJzcGVhay1hc1wiLCBcInNwZWFrLWhlYWRlclwiLFxuICAgIFwic3BlYWstbnVtZXJhbFwiLCBcInNwZWFrLXB1bmN0dWF0aW9uXCIsIFwic3BlZWNoLXJhdGVcIiwgXCJzdHJlc3NcIiwgXCJzdHJpbmctc2V0XCIsXG4gICAgXCJ0YWItc2l6ZVwiLCBcInRhYmxlLWxheW91dFwiLCBcInRhcmdldFwiLCBcInRhcmdldC1uYW1lXCIsIFwidGFyZ2V0LW5ld1wiLFxuICAgIFwidGFyZ2V0LXBvc2l0aW9uXCIsIFwidGV4dC1hbGlnblwiLCBcInRleHQtYWxpZ24tbGFzdFwiLCBcInRleHQtZGVjb3JhdGlvblwiLFxuICAgIFwidGV4dC1kZWNvcmF0aW9uLWNvbG9yXCIsIFwidGV4dC1kZWNvcmF0aW9uLWxpbmVcIiwgXCJ0ZXh0LWRlY29yYXRpb24tc2tpcFwiLFxuICAgIFwidGV4dC1kZWNvcmF0aW9uLXN0eWxlXCIsIFwidGV4dC1lbXBoYXNpc1wiLCBcInRleHQtZW1waGFzaXMtY29sb3JcIixcbiAgICBcInRleHQtZW1waGFzaXMtcG9zaXRpb25cIiwgXCJ0ZXh0LWVtcGhhc2lzLXN0eWxlXCIsIFwidGV4dC1oZWlnaHRcIixcbiAgICBcInRleHQtaW5kZW50XCIsIFwidGV4dC1qdXN0aWZ5XCIsIFwidGV4dC1vdXRsaW5lXCIsIFwidGV4dC1vdmVyZmxvd1wiLCBcInRleHQtc2hhZG93XCIsXG4gICAgXCJ0ZXh0LXNpemUtYWRqdXN0XCIsIFwidGV4dC1zcGFjZS1jb2xsYXBzZVwiLCBcInRleHQtdHJhbnNmb3JtXCIsIFwidGV4dC11bmRlcmxpbmUtcG9zaXRpb25cIixcbiAgICBcInRleHQtd3JhcFwiLCBcInRvcFwiLCBcInRyYW5zZm9ybVwiLCBcInRyYW5zZm9ybS1vcmlnaW5cIiwgXCJ0cmFuc2Zvcm0tc3R5bGVcIixcbiAgICBcInRyYW5zaXRpb25cIiwgXCJ0cmFuc2l0aW9uLWRlbGF5XCIsIFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLFxuICAgIFwidHJhbnNpdGlvbi1wcm9wZXJ0eVwiLCBcInRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsIFwidW5pY29kZS1iaWRpXCIsXG4gICAgXCJ1c2VyLXNlbGVjdFwiLCBcInZlcnRpY2FsLWFsaWduXCIsIFwidmlzaWJpbGl0eVwiLCBcInZvaWNlLWJhbGFuY2VcIiwgXCJ2b2ljZS1kdXJhdGlvblwiLFxuICAgIFwidm9pY2UtZmFtaWx5XCIsIFwidm9pY2UtcGl0Y2hcIiwgXCJ2b2ljZS1yYW5nZVwiLCBcInZvaWNlLXJhdGVcIiwgXCJ2b2ljZS1zdHJlc3NcIixcbiAgICBcInZvaWNlLXZvbHVtZVwiLCBcInZvbHVtZVwiLCBcIndoaXRlLXNwYWNlXCIsIFwid2lkb3dzXCIsIFwid2lkdGhcIiwgXCJ3aWxsLWNoYW5nZVwiLCBcIndvcmQtYnJlYWtcIixcbiAgICBcIndvcmQtc3BhY2luZ1wiLCBcIndvcmQtd3JhcFwiLCBcInotaW5kZXhcIixcbiAgICAvLyBTVkctc3BlY2lmaWNcbiAgICBcImNsaXAtcGF0aFwiLCBcImNsaXAtcnVsZVwiLCBcIm1hc2tcIiwgXCJlbmFibGUtYmFja2dyb3VuZFwiLCBcImZpbHRlclwiLCBcImZsb29kLWNvbG9yXCIsXG4gICAgXCJmbG9vZC1vcGFjaXR5XCIsIFwibGlnaHRpbmctY29sb3JcIiwgXCJzdG9wLWNvbG9yXCIsIFwic3RvcC1vcGFjaXR5XCIsIFwicG9pbnRlci1ldmVudHNcIixcbiAgICBcImNvbG9yLWludGVycG9sYXRpb25cIiwgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIixcbiAgICBcImNvbG9yLXJlbmRlcmluZ1wiLCBcImZpbGxcIiwgXCJmaWxsLW9wYWNpdHlcIiwgXCJmaWxsLXJ1bGVcIiwgXCJpbWFnZS1yZW5kZXJpbmdcIixcbiAgICBcIm1hcmtlclwiLCBcIm1hcmtlci1lbmRcIiwgXCJtYXJrZXItbWlkXCIsIFwibWFya2VyLXN0YXJ0XCIsIFwic2hhcGUtcmVuZGVyaW5nXCIsIFwic3Ryb2tlXCIsXG4gICAgXCJzdHJva2UtZGFzaGFycmF5XCIsIFwic3Ryb2tlLWRhc2hvZmZzZXRcIiwgXCJzdHJva2UtbGluZWNhcFwiLCBcInN0cm9rZS1saW5lam9pblwiLFxuICAgIFwic3Ryb2tlLW1pdGVybGltaXRcIiwgXCJzdHJva2Utb3BhY2l0eVwiLCBcInN0cm9rZS13aWR0aFwiLCBcInRleHQtcmVuZGVyaW5nXCIsXG4gICAgXCJiYXNlbGluZS1zaGlmdFwiLCBcImRvbWluYW50LWJhc2VsaW5lXCIsIFwiZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbFwiLFxuICAgIFwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWxcIiwgXCJ0ZXh0LWFuY2hvclwiLCBcIndyaXRpbmctbW9kZVwiXG4gIF0sIHByb3BlcnR5S2V5d29yZHMgPSBrZXlTZXQocHJvcGVydHlLZXl3b3Jkc18pO1xuXG4gIHZhciBub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHNfID0gW1xuICAgIFwic2Nyb2xsYmFyLWFycm93LWNvbG9yXCIsIFwic2Nyb2xsYmFyLWJhc2UtY29sb3JcIiwgXCJzY3JvbGxiYXItZGFyay1zaGFkb3ctY29sb3JcIixcbiAgICBcInNjcm9sbGJhci1mYWNlLWNvbG9yXCIsIFwic2Nyb2xsYmFyLWhpZ2hsaWdodC1jb2xvclwiLCBcInNjcm9sbGJhci1zaGFkb3ctY29sb3JcIixcbiAgICBcInNjcm9sbGJhci0zZC1saWdodC1jb2xvclwiLCBcInNjcm9sbGJhci10cmFjay1jb2xvclwiLCBcInNoYXBlLWluc2lkZVwiLFxuICAgIFwic2VhcmNoZmllbGQtY2FuY2VsLWJ1dHRvblwiLCBcInNlYXJjaGZpZWxkLWRlY29yYXRpb25cIiwgXCJzZWFyY2hmaWVsZC1yZXN1bHRzLWJ1dHRvblwiLFxuICAgIFwic2VhcmNoZmllbGQtcmVzdWx0cy1kZWNvcmF0aW9uXCIsIFwiem9vbVwiXG4gIF0sIG5vblN0YW5kYXJkUHJvcGVydHlLZXl3b3JkcyA9IGtleVNldChub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHNfKTtcblxuICB2YXIgZm9udFByb3BlcnRpZXNfID0gW1xuICAgIFwiZm9udC1mYW1pbHlcIiwgXCJzcmNcIiwgXCJ1bmljb2RlLXJhbmdlXCIsIFwiZm9udC12YXJpYW50XCIsIFwiZm9udC1mZWF0dXJlLXNldHRpbmdzXCIsXG4gICAgXCJmb250LXN0cmV0Y2hcIiwgXCJmb250LXdlaWdodFwiLCBcImZvbnQtc3R5bGVcIlxuICBdLCBmb250UHJvcGVydGllcyA9IGtleVNldChmb250UHJvcGVydGllc18pO1xuXG4gIHZhciBjb3VudGVyRGVzY3JpcHRvcnNfID0gW1xuICAgIFwiYWRkaXRpdmUtc3ltYm9sc1wiLCBcImZhbGxiYWNrXCIsIFwibmVnYXRpdmVcIiwgXCJwYWRcIiwgXCJwcmVmaXhcIiwgXCJyYW5nZVwiLFxuICAgIFwic3BlYWstYXNcIiwgXCJzdWZmaXhcIiwgXCJzeW1ib2xzXCIsIFwic3lzdGVtXCJcbiAgXSwgY291bnRlckRlc2NyaXB0b3JzID0ga2V5U2V0KGNvdW50ZXJEZXNjcmlwdG9yc18pO1xuXG4gIHZhciBjb2xvcktleXdvcmRzXyA9IFtcbiAgICBcImFsaWNlYmx1ZVwiLCBcImFudGlxdWV3aGl0ZVwiLCBcImFxdWFcIiwgXCJhcXVhbWFyaW5lXCIsIFwiYXp1cmVcIiwgXCJiZWlnZVwiLFxuICAgIFwiYmlzcXVlXCIsIFwiYmxhY2tcIiwgXCJibGFuY2hlZGFsbW9uZFwiLCBcImJsdWVcIiwgXCJibHVldmlvbGV0XCIsIFwiYnJvd25cIixcbiAgICBcImJ1cmx5d29vZFwiLCBcImNhZGV0Ymx1ZVwiLCBcImNoYXJ0cmV1c2VcIiwgXCJjaG9jb2xhdGVcIiwgXCJjb3JhbFwiLCBcImNvcm5mbG93ZXJibHVlXCIsXG4gICAgXCJjb3Juc2lsa1wiLCBcImNyaW1zb25cIiwgXCJjeWFuXCIsIFwiZGFya2JsdWVcIiwgXCJkYXJrY3lhblwiLCBcImRhcmtnb2xkZW5yb2RcIixcbiAgICBcImRhcmtncmF5XCIsIFwiZGFya2dyZWVuXCIsIFwiZGFya2toYWtpXCIsIFwiZGFya21hZ2VudGFcIiwgXCJkYXJrb2xpdmVncmVlblwiLFxuICAgIFwiZGFya29yYW5nZVwiLCBcImRhcmtvcmNoaWRcIiwgXCJkYXJrcmVkXCIsIFwiZGFya3NhbG1vblwiLCBcImRhcmtzZWFncmVlblwiLFxuICAgIFwiZGFya3NsYXRlYmx1ZVwiLCBcImRhcmtzbGF0ZWdyYXlcIiwgXCJkYXJrdHVycXVvaXNlXCIsIFwiZGFya3Zpb2xldFwiLFxuICAgIFwiZGVlcHBpbmtcIiwgXCJkZWVwc2t5Ymx1ZVwiLCBcImRpbWdyYXlcIiwgXCJkb2RnZXJibHVlXCIsIFwiZmlyZWJyaWNrXCIsXG4gICAgXCJmbG9yYWx3aGl0ZVwiLCBcImZvcmVzdGdyZWVuXCIsIFwiZnVjaHNpYVwiLCBcImdhaW5zYm9yb1wiLCBcImdob3N0d2hpdGVcIixcbiAgICBcImdvbGRcIiwgXCJnb2xkZW5yb2RcIiwgXCJncmF5XCIsIFwiZ3JleVwiLCBcImdyZWVuXCIsIFwiZ3JlZW55ZWxsb3dcIiwgXCJob25leWRld1wiLFxuICAgIFwiaG90cGlua1wiLCBcImluZGlhbnJlZFwiLCBcImluZGlnb1wiLCBcIml2b3J5XCIsIFwia2hha2lcIiwgXCJsYXZlbmRlclwiLFxuICAgIFwibGF2ZW5kZXJibHVzaFwiLCBcImxhd25ncmVlblwiLCBcImxlbW9uY2hpZmZvblwiLCBcImxpZ2h0Ymx1ZVwiLCBcImxpZ2h0Y29yYWxcIixcbiAgICBcImxpZ2h0Y3lhblwiLCBcImxpZ2h0Z29sZGVucm9keWVsbG93XCIsIFwibGlnaHRncmF5XCIsIFwibGlnaHRncmVlblwiLCBcImxpZ2h0cGlua1wiLFxuICAgIFwibGlnaHRzYWxtb25cIiwgXCJsaWdodHNlYWdyZWVuXCIsIFwibGlnaHRza3libHVlXCIsIFwibGlnaHRzbGF0ZWdyYXlcIixcbiAgICBcImxpZ2h0c3RlZWxibHVlXCIsIFwibGlnaHR5ZWxsb3dcIiwgXCJsaW1lXCIsIFwibGltZWdyZWVuXCIsIFwibGluZW5cIiwgXCJtYWdlbnRhXCIsXG4gICAgXCJtYXJvb25cIiwgXCJtZWRpdW1hcXVhbWFyaW5lXCIsIFwibWVkaXVtYmx1ZVwiLCBcIm1lZGl1bW9yY2hpZFwiLCBcIm1lZGl1bXB1cnBsZVwiLFxuICAgIFwibWVkaXVtc2VhZ3JlZW5cIiwgXCJtZWRpdW1zbGF0ZWJsdWVcIiwgXCJtZWRpdW1zcHJpbmdncmVlblwiLCBcIm1lZGl1bXR1cnF1b2lzZVwiLFxuICAgIFwibWVkaXVtdmlvbGV0cmVkXCIsIFwibWlkbmlnaHRibHVlXCIsIFwibWludGNyZWFtXCIsIFwibWlzdHlyb3NlXCIsIFwibW9jY2FzaW5cIixcbiAgICBcIm5hdmFqb3doaXRlXCIsIFwibmF2eVwiLCBcIm9sZGxhY2VcIiwgXCJvbGl2ZVwiLCBcIm9saXZlZHJhYlwiLCBcIm9yYW5nZVwiLCBcIm9yYW5nZXJlZFwiLFxuICAgIFwib3JjaGlkXCIsIFwicGFsZWdvbGRlbnJvZFwiLCBcInBhbGVncmVlblwiLCBcInBhbGV0dXJxdW9pc2VcIiwgXCJwYWxldmlvbGV0cmVkXCIsXG4gICAgXCJwYXBheWF3aGlwXCIsIFwicGVhY2hwdWZmXCIsIFwicGVydVwiLCBcInBpbmtcIiwgXCJwbHVtXCIsIFwicG93ZGVyYmx1ZVwiLFxuICAgIFwicHVycGxlXCIsIFwicmViZWNjYXB1cnBsZVwiLCBcInJlZFwiLCBcInJvc3licm93blwiLCBcInJveWFsYmx1ZVwiLCBcInNhZGRsZWJyb3duXCIsXG4gICAgXCJzYWxtb25cIiwgXCJzYW5keWJyb3duXCIsIFwic2VhZ3JlZW5cIiwgXCJzZWFzaGVsbFwiLCBcInNpZW5uYVwiLCBcInNpbHZlclwiLCBcInNreWJsdWVcIixcbiAgICBcInNsYXRlYmx1ZVwiLCBcInNsYXRlZ3JheVwiLCBcInNub3dcIiwgXCJzcHJpbmdncmVlblwiLCBcInN0ZWVsYmx1ZVwiLCBcInRhblwiLFxuICAgIFwidGVhbFwiLCBcInRoaXN0bGVcIiwgXCJ0b21hdG9cIiwgXCJ0dXJxdW9pc2VcIiwgXCJ2aW9sZXRcIiwgXCJ3aGVhdFwiLCBcIndoaXRlXCIsXG4gICAgXCJ3aGl0ZXNtb2tlXCIsIFwieWVsbG93XCIsIFwieWVsbG93Z3JlZW5cIlxuICBdLCBjb2xvcktleXdvcmRzID0ga2V5U2V0KGNvbG9yS2V5d29yZHNfKTtcblxuICB2YXIgdmFsdWVLZXl3b3Jkc18gPSBbXG4gICAgXCJhYm92ZVwiLCBcImFic29sdXRlXCIsIFwiYWN0aXZlYm9yZGVyXCIsIFwiYWRkaXRpdmVcIiwgXCJhY3RpdmVjYXB0aW9uXCIsIFwiYWZhclwiLFxuICAgIFwiYWZ0ZXItd2hpdGUtc3BhY2VcIiwgXCJhaGVhZFwiLCBcImFsaWFzXCIsIFwiYWxsXCIsIFwiYWxsLXNjcm9sbFwiLCBcImFscGhhYmV0aWNcIiwgXCJhbHRlcm5hdGVcIixcbiAgICBcImFsd2F5c1wiLCBcImFtaGFyaWNcIiwgXCJhbWhhcmljLWFiZWdlZGVcIiwgXCJhbnRpYWxpYXNlZFwiLCBcImFwcHdvcmtzcGFjZVwiLFxuICAgIFwiYXJhYmljLWluZGljXCIsIFwiYXJtZW5pYW5cIiwgXCJhc3Rlcmlza3NcIiwgXCJhdHRyXCIsIFwiYXV0b1wiLCBcImF1dG8tZmxvd1wiLCBcImF2b2lkXCIsIFwiYXZvaWQtY29sdW1uXCIsIFwiYXZvaWQtcGFnZVwiLFxuICAgIFwiYXZvaWQtcmVnaW9uXCIsIFwiYmFja2dyb3VuZFwiLCBcImJhY2t3YXJkc1wiLCBcImJhc2VsaW5lXCIsIFwiYmVsb3dcIiwgXCJiaWRpLW92ZXJyaWRlXCIsIFwiYmluYXJ5XCIsXG4gICAgXCJiZW5nYWxpXCIsIFwiYmxpbmtcIiwgXCJibG9ja1wiLCBcImJsb2NrLWF4aXNcIiwgXCJib2xkXCIsIFwiYm9sZGVyXCIsIFwiYm9yZGVyXCIsIFwiYm9yZGVyLWJveFwiLFxuICAgIFwiYm90aFwiLCBcImJvdHRvbVwiLCBcImJyZWFrXCIsIFwiYnJlYWstYWxsXCIsIFwiYnJlYWstd29yZFwiLCBcImJ1bGxldHNcIiwgXCJidXR0b25cIiwgXCJidXR0b24tYmV2ZWxcIixcbiAgICBcImJ1dHRvbmZhY2VcIiwgXCJidXR0b25oaWdobGlnaHRcIiwgXCJidXR0b25zaGFkb3dcIiwgXCJidXR0b250ZXh0XCIsIFwiY2FsY1wiLCBcImNhbWJvZGlhblwiLFxuICAgIFwiY2FwaXRhbGl6ZVwiLCBcImNhcHMtbG9jay1pbmRpY2F0b3JcIiwgXCJjYXB0aW9uXCIsIFwiY2FwdGlvbnRleHRcIiwgXCJjYXJldFwiLFxuICAgIFwiY2VsbFwiLCBcImNlbnRlclwiLCBcImNoZWNrYm94XCIsIFwiY2lyY2xlXCIsIFwiY2prLWRlY2ltYWxcIiwgXCJjamstZWFydGhseS1icmFuY2hcIixcbiAgICBcImNqay1oZWF2ZW5seS1zdGVtXCIsIFwiY2prLWlkZW9ncmFwaGljXCIsIFwiY2xlYXJcIiwgXCJjbGlwXCIsIFwiY2xvc2UtcXVvdGVcIixcbiAgICBcImNvbC1yZXNpemVcIiwgXCJjb2xsYXBzZVwiLCBcImNvbG9yXCIsIFwiY29sb3ItYnVyblwiLCBcImNvbG9yLWRvZGdlXCIsIFwiY29sdW1uXCIsIFwiY29sdW1uLXJldmVyc2VcIixcbiAgICBcImNvbXBhY3RcIiwgXCJjb25kZW5zZWRcIiwgXCJjb250YWluXCIsIFwiY29udGVudFwiLCBcImNvbnRlbnRzXCIsXG4gICAgXCJjb250ZW50LWJveFwiLCBcImNvbnRleHQtbWVudVwiLCBcImNvbnRpbnVvdXNcIiwgXCJjb3B5XCIsIFwiY291bnRlclwiLCBcImNvdW50ZXJzXCIsIFwiY292ZXJcIiwgXCJjcm9wXCIsXG4gICAgXCJjcm9zc1wiLCBcImNyb3NzaGFpclwiLCBcImN1cnJlbnRjb2xvclwiLCBcImN1cnNpdmVcIiwgXCJjeWNsaWNcIiwgXCJkYXJrZW5cIiwgXCJkYXNoZWRcIiwgXCJkZWNpbWFsXCIsXG4gICAgXCJkZWNpbWFsLWxlYWRpbmctemVyb1wiLCBcImRlZmF1bHRcIiwgXCJkZWZhdWx0LWJ1dHRvblwiLCBcImRlbnNlXCIsIFwiZGVzdGluYXRpb24tYXRvcFwiLFxuICAgIFwiZGVzdGluYXRpb24taW5cIiwgXCJkZXN0aW5hdGlvbi1vdXRcIiwgXCJkZXN0aW5hdGlvbi1vdmVyXCIsIFwiZGV2YW5hZ2FyaVwiLCBcImRpZmZlcmVuY2VcIixcbiAgICBcImRpc2NcIiwgXCJkaXNjYXJkXCIsIFwiZGlzY2xvc3VyZS1jbG9zZWRcIiwgXCJkaXNjbG9zdXJlLW9wZW5cIiwgXCJkb2N1bWVudFwiLFxuICAgIFwiZG90LWRhc2hcIiwgXCJkb3QtZG90LWRhc2hcIixcbiAgICBcImRvdHRlZFwiLCBcImRvdWJsZVwiLCBcImRvd25cIiwgXCJlLXJlc2l6ZVwiLCBcImVhc2VcIiwgXCJlYXNlLWluXCIsIFwiZWFzZS1pbi1vdXRcIiwgXCJlYXNlLW91dFwiLFxuICAgIFwiZWxlbWVudFwiLCBcImVsbGlwc2VcIiwgXCJlbGxpcHNpc1wiLCBcImVtYmVkXCIsIFwiZW5kXCIsIFwiZXRoaW9waWNcIiwgXCJldGhpb3BpYy1hYmVnZWRlXCIsXG4gICAgXCJldGhpb3BpYy1hYmVnZWRlLWFtLWV0XCIsIFwiZXRoaW9waWMtYWJlZ2VkZS1nZXpcIiwgXCJldGhpb3BpYy1hYmVnZWRlLXRpLWVyXCIsXG4gICAgXCJldGhpb3BpYy1hYmVnZWRlLXRpLWV0XCIsIFwiZXRoaW9waWMtaGFsZWhhbWUtYWEtZXJcIixcbiAgICBcImV0aGlvcGljLWhhbGVoYW1lLWFhLWV0XCIsIFwiZXRoaW9waWMtaGFsZWhhbWUtYW0tZXRcIixcbiAgICBcImV0aGlvcGljLWhhbGVoYW1lLWdlelwiLCBcImV0aGlvcGljLWhhbGVoYW1lLW9tLWV0XCIsXG4gICAgXCJldGhpb3BpYy1oYWxlaGFtZS1zaWQtZXRcIiwgXCJldGhpb3BpYy1oYWxlaGFtZS1zby1ldFwiLFxuICAgIFwiZXRoaW9waWMtaGFsZWhhbWUtdGktZXJcIiwgXCJldGhpb3BpYy1oYWxlaGFtZS10aS1ldFwiLCBcImV0aGlvcGljLWhhbGVoYW1lLXRpZ1wiLFxuICAgIFwiZXRoaW9waWMtbnVtZXJpY1wiLCBcImV3LXJlc2l6ZVwiLCBcImV4Y2x1c2lvblwiLCBcImV4cGFuZGVkXCIsIFwiZXh0ZW5kc1wiLCBcImV4dHJhLWNvbmRlbnNlZFwiLFxuICAgIFwiZXh0cmEtZXhwYW5kZWRcIiwgXCJmYW50YXN5XCIsIFwiZmFzdFwiLCBcImZpbGxcIiwgXCJmaXhlZFwiLCBcImZsYXRcIiwgXCJmbGV4XCIsIFwiZmxleC1lbmRcIiwgXCJmbGV4LXN0YXJ0XCIsIFwiZm9vdG5vdGVzXCIsXG4gICAgXCJmb3J3YXJkc1wiLCBcImZyb21cIiwgXCJnZW9tZXRyaWNQcmVjaXNpb25cIiwgXCJnZW9yZ2lhblwiLCBcImdyYXl0ZXh0XCIsIFwiZ3JpZFwiLCBcImdyb292ZVwiLFxuICAgIFwiZ3VqYXJhdGlcIiwgXCJndXJtdWtoaVwiLCBcImhhbmRcIiwgXCJoYW5ndWxcIiwgXCJoYW5ndWwtY29uc29uYW50XCIsIFwiaGFyZC1saWdodFwiLCBcImhlYnJld1wiLFxuICAgIFwiaGVscFwiLCBcImhpZGRlblwiLCBcImhpZGVcIiwgXCJoaWdoZXJcIiwgXCJoaWdobGlnaHRcIiwgXCJoaWdobGlnaHR0ZXh0XCIsXG4gICAgXCJoaXJhZ2FuYVwiLCBcImhpcmFnYW5hLWlyb2hhXCIsIFwiaG9yaXpvbnRhbFwiLCBcImhzbFwiLCBcImhzbGFcIiwgXCJodWVcIiwgXCJpY29uXCIsIFwiaWdub3JlXCIsXG4gICAgXCJpbmFjdGl2ZWJvcmRlclwiLCBcImluYWN0aXZlY2FwdGlvblwiLCBcImluYWN0aXZlY2FwdGlvbnRleHRcIiwgXCJpbmZpbml0ZVwiLFxuICAgIFwiaW5mb2JhY2tncm91bmRcIiwgXCJpbmZvdGV4dFwiLCBcImluaGVyaXRcIiwgXCJpbml0aWFsXCIsIFwiaW5saW5lXCIsIFwiaW5saW5lLWF4aXNcIixcbiAgICBcImlubGluZS1ibG9ja1wiLCBcImlubGluZS1mbGV4XCIsIFwiaW5saW5lLWdyaWRcIiwgXCJpbmxpbmUtdGFibGVcIiwgXCJpbnNldFwiLCBcImluc2lkZVwiLCBcImludHJpbnNpY1wiLCBcImludmVydFwiLFxuICAgIFwiaXRhbGljXCIsIFwiamFwYW5lc2UtZm9ybWFsXCIsIFwiamFwYW5lc2UtaW5mb3JtYWxcIiwgXCJqdXN0aWZ5XCIsIFwia2FubmFkYVwiLFxuICAgIFwia2F0YWthbmFcIiwgXCJrYXRha2FuYS1pcm9oYVwiLCBcImtlZXAtYWxsXCIsIFwia2htZXJcIixcbiAgICBcImtvcmVhbi1oYW5ndWwtZm9ybWFsXCIsIFwia29yZWFuLWhhbmphLWZvcm1hbFwiLCBcImtvcmVhbi1oYW5qYS1pbmZvcm1hbFwiLFxuICAgIFwibGFuZHNjYXBlXCIsIFwibGFvXCIsIFwibGFyZ2VcIiwgXCJsYXJnZXJcIiwgXCJsZWZ0XCIsIFwibGV2ZWxcIiwgXCJsaWdodGVyXCIsIFwibGlnaHRlblwiLFxuICAgIFwibGluZS10aHJvdWdoXCIsIFwibGluZWFyXCIsIFwibGluZWFyLWdyYWRpZW50XCIsIFwibGluZXNcIiwgXCJsaXN0LWl0ZW1cIiwgXCJsaXN0Ym94XCIsIFwibGlzdGl0ZW1cIixcbiAgICBcImxvY2FsXCIsIFwibG9naWNhbFwiLCBcImxvdWRcIiwgXCJsb3dlclwiLCBcImxvd2VyLWFscGhhXCIsIFwibG93ZXItYXJtZW5pYW5cIixcbiAgICBcImxvd2VyLWdyZWVrXCIsIFwibG93ZXItaGV4YWRlY2ltYWxcIiwgXCJsb3dlci1sYXRpblwiLCBcImxvd2VyLW5vcndlZ2lhblwiLFxuICAgIFwibG93ZXItcm9tYW5cIiwgXCJsb3dlcmNhc2VcIiwgXCJsdHJcIiwgXCJsdW1pbm9zaXR5XCIsIFwibWFsYXlhbGFtXCIsIFwibWF0Y2hcIiwgXCJtYXRyaXhcIiwgXCJtYXRyaXgzZFwiLFxuICAgIFwibWVkaWEtY29udHJvbHMtYmFja2dyb3VuZFwiLCBcIm1lZGlhLWN1cnJlbnQtdGltZS1kaXNwbGF5XCIsXG4gICAgXCJtZWRpYS1mdWxsc2NyZWVuLWJ1dHRvblwiLCBcIm1lZGlhLW11dGUtYnV0dG9uXCIsIFwibWVkaWEtcGxheS1idXR0b25cIixcbiAgICBcIm1lZGlhLXJldHVybi10by1yZWFsdGltZS1idXR0b25cIiwgXCJtZWRpYS1yZXdpbmQtYnV0dG9uXCIsXG4gICAgXCJtZWRpYS1zZWVrLWJhY2stYnV0dG9uXCIsIFwibWVkaWEtc2Vlay1mb3J3YXJkLWJ1dHRvblwiLCBcIm1lZGlhLXNsaWRlclwiLFxuICAgIFwibWVkaWEtc2xpZGVydGh1bWJcIiwgXCJtZWRpYS10aW1lLXJlbWFpbmluZy1kaXNwbGF5XCIsIFwibWVkaWEtdm9sdW1lLXNsaWRlclwiLFxuICAgIFwibWVkaWEtdm9sdW1lLXNsaWRlci1jb250YWluZXJcIiwgXCJtZWRpYS12b2x1bWUtc2xpZGVydGh1bWJcIiwgXCJtZWRpdW1cIixcbiAgICBcIm1lbnVcIiwgXCJtZW51bGlzdFwiLCBcIm1lbnVsaXN0LWJ1dHRvblwiLCBcIm1lbnVsaXN0LXRleHRcIixcbiAgICBcIm1lbnVsaXN0LXRleHRmaWVsZFwiLCBcIm1lbnV0ZXh0XCIsIFwibWVzc2FnZS1ib3hcIiwgXCJtaWRkbGVcIiwgXCJtaW4taW50cmluc2ljXCIsXG4gICAgXCJtaXhcIiwgXCJtb25nb2xpYW5cIiwgXCJtb25vc3BhY2VcIiwgXCJtb3ZlXCIsIFwibXVsdGlwbGVcIiwgXCJtdWx0aXBseVwiLCBcIm15YW5tYXJcIiwgXCJuLXJlc2l6ZVwiLFxuICAgIFwibmFycm93ZXJcIiwgXCJuZS1yZXNpemVcIiwgXCJuZXN3LXJlc2l6ZVwiLCBcIm5vLWNsb3NlLXF1b3RlXCIsIFwibm8tZHJvcFwiLFxuICAgIFwibm8tb3Blbi1xdW90ZVwiLCBcIm5vLXJlcGVhdFwiLCBcIm5vbmVcIiwgXCJub3JtYWxcIiwgXCJub3QtYWxsb3dlZFwiLCBcIm5vd3JhcFwiLFxuICAgIFwibnMtcmVzaXplXCIsIFwibnVtYmVyc1wiLCBcIm51bWVyaWNcIiwgXCJudy1yZXNpemVcIiwgXCJud3NlLXJlc2l6ZVwiLCBcIm9ibGlxdWVcIiwgXCJvY3RhbFwiLCBcIm9wYWNpdHlcIiwgXCJvcGVuLXF1b3RlXCIsXG4gICAgXCJvcHRpbWl6ZUxlZ2liaWxpdHlcIiwgXCJvcHRpbWl6ZVNwZWVkXCIsIFwib3JpeWFcIiwgXCJvcm9tb1wiLCBcIm91dHNldFwiLFxuICAgIFwib3V0c2lkZVwiLCBcIm91dHNpZGUtc2hhcGVcIiwgXCJvdmVybGF5XCIsIFwib3ZlcmxpbmVcIiwgXCJwYWRkaW5nXCIsIFwicGFkZGluZy1ib3hcIixcbiAgICBcInBhaW50ZWRcIiwgXCJwYWdlXCIsIFwicGF1c2VkXCIsIFwicGVyc2lhblwiLCBcInBlcnNwZWN0aXZlXCIsIFwicGx1cy1kYXJrZXJcIiwgXCJwbHVzLWxpZ2h0ZXJcIixcbiAgICBcInBvaW50ZXJcIiwgXCJwb2x5Z29uXCIsIFwicG9ydHJhaXRcIiwgXCJwcmVcIiwgXCJwcmUtbGluZVwiLCBcInByZS13cmFwXCIsIFwicHJlc2VydmUtM2RcIixcbiAgICBcInByb2dyZXNzXCIsIFwicHVzaC1idXR0b25cIiwgXCJyYWRpYWwtZ3JhZGllbnRcIiwgXCJyYWRpb1wiLCBcInJlYWQtb25seVwiLFxuICAgIFwicmVhZC13cml0ZVwiLCBcInJlYWQtd3JpdGUtcGxhaW50ZXh0LW9ubHlcIiwgXCJyZWN0YW5nbGVcIiwgXCJyZWdpb25cIixcbiAgICBcInJlbGF0aXZlXCIsIFwicmVwZWF0XCIsIFwicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudFwiLFxuICAgIFwicmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgXCJyZXNldFwiLCBcInJldmVyc2VcIixcbiAgICBcInJnYlwiLCBcInJnYmFcIiwgXCJyaWRnZVwiLCBcInJpZ2h0XCIsIFwicm90YXRlXCIsIFwicm90YXRlM2RcIiwgXCJyb3RhdGVYXCIsIFwicm90YXRlWVwiLFxuICAgIFwicm90YXRlWlwiLCBcInJvdW5kXCIsIFwicm93XCIsIFwicm93LXJlc2l6ZVwiLCBcInJvdy1yZXZlcnNlXCIsIFwicnRsXCIsIFwicnVuLWluXCIsIFwicnVubmluZ1wiLFxuICAgIFwicy1yZXNpemVcIiwgXCJzYW5zLXNlcmlmXCIsIFwic2F0dXJhdGlvblwiLCBcInNjYWxlXCIsIFwic2NhbGUzZFwiLCBcInNjYWxlWFwiLCBcInNjYWxlWVwiLCBcInNjYWxlWlwiLCBcInNjcmVlblwiLFxuICAgIFwic2Nyb2xsXCIsIFwic2Nyb2xsYmFyXCIsIFwic2Nyb2xsLXBvc2l0aW9uXCIsIFwic2UtcmVzaXplXCIsIFwic2VhcmNoZmllbGRcIixcbiAgICBcInNlYXJjaGZpZWxkLWNhbmNlbC1idXR0b25cIiwgXCJzZWFyY2hmaWVsZC1kZWNvcmF0aW9uXCIsXG4gICAgXCJzZWFyY2hmaWVsZC1yZXN1bHRzLWJ1dHRvblwiLCBcInNlYXJjaGZpZWxkLXJlc3VsdHMtZGVjb3JhdGlvblwiLCBcInNlbGYtc3RhcnRcIiwgXCJzZWxmLWVuZFwiLFxuICAgIFwic2VtaS1jb25kZW5zZWRcIiwgXCJzZW1pLWV4cGFuZGVkXCIsIFwic2VwYXJhdGVcIiwgXCJzZXJpZlwiLCBcInNob3dcIiwgXCJzaWRhbWFcIixcbiAgICBcInNpbXAtY2hpbmVzZS1mb3JtYWxcIiwgXCJzaW1wLWNoaW5lc2UtaW5mb3JtYWxcIiwgXCJzaW5nbGVcIixcbiAgICBcInNrZXdcIiwgXCJza2V3WFwiLCBcInNrZXdZXCIsIFwic2tpcC13aGl0ZS1zcGFjZVwiLCBcInNsaWRlXCIsIFwic2xpZGVyLWhvcml6b250YWxcIixcbiAgICBcInNsaWRlci12ZXJ0aWNhbFwiLCBcInNsaWRlcnRodW1iLWhvcml6b250YWxcIiwgXCJzbGlkZXJ0aHVtYi12ZXJ0aWNhbFwiLCBcInNsb3dcIixcbiAgICBcInNtYWxsXCIsIFwic21hbGwtY2Fwc1wiLCBcInNtYWxsLWNhcHRpb25cIiwgXCJzbWFsbGVyXCIsIFwic29mdC1saWdodFwiLCBcInNvbGlkXCIsIFwic29tYWxpXCIsXG4gICAgXCJzb3VyY2UtYXRvcFwiLCBcInNvdXJjZS1pblwiLCBcInNvdXJjZS1vdXRcIiwgXCJzb3VyY2Utb3ZlclwiLCBcInNwYWNlXCIsIFwic3BhY2UtYXJvdW5kXCIsIFwic3BhY2UtYmV0d2VlblwiLCBcInNwYWNlLWV2ZW5seVwiLCBcInNwZWxsLW91dFwiLCBcInNxdWFyZVwiLFxuICAgIFwic3F1YXJlLWJ1dHRvblwiLCBcInN0YXJ0XCIsIFwic3RhdGljXCIsIFwic3RhdHVzLWJhclwiLCBcInN0cmV0Y2hcIiwgXCJzdHJva2VcIiwgXCJzdWJcIixcbiAgICBcInN1YnBpeGVsLWFudGlhbGlhc2VkXCIsIFwic3VwZXJcIiwgXCJzdy1yZXNpemVcIiwgXCJzeW1ib2xpY1wiLCBcInN5bWJvbHNcIiwgXCJzeXN0ZW0tdWlcIiwgXCJ0YWJsZVwiLFxuICAgIFwidGFibGUtY2FwdGlvblwiLCBcInRhYmxlLWNlbGxcIiwgXCJ0YWJsZS1jb2x1bW5cIiwgXCJ0YWJsZS1jb2x1bW4tZ3JvdXBcIixcbiAgICBcInRhYmxlLWZvb3Rlci1ncm91cFwiLCBcInRhYmxlLWhlYWRlci1ncm91cFwiLCBcInRhYmxlLXJvd1wiLCBcInRhYmxlLXJvdy1ncm91cFwiLFxuICAgIFwidGFtaWxcIixcbiAgICBcInRlbHVndVwiLCBcInRleHRcIiwgXCJ0ZXh0LWJvdHRvbVwiLCBcInRleHQtdG9wXCIsIFwidGV4dGFyZWFcIiwgXCJ0ZXh0ZmllbGRcIiwgXCJ0aGFpXCIsXG4gICAgXCJ0aGlja1wiLCBcInRoaW5cIiwgXCJ0aHJlZWRkYXJrc2hhZG93XCIsIFwidGhyZWVkZmFjZVwiLCBcInRocmVlZGhpZ2hsaWdodFwiLFxuICAgIFwidGhyZWVkbGlnaHRzaGFkb3dcIiwgXCJ0aHJlZWRzaGFkb3dcIiwgXCJ0aWJldGFuXCIsIFwidGlncmVcIiwgXCJ0aWdyaW55YS1lclwiLFxuICAgIFwidGlncmlueWEtZXItYWJlZ2VkZVwiLCBcInRpZ3JpbnlhLWV0XCIsIFwidGlncmlueWEtZXQtYWJlZ2VkZVwiLCBcInRvXCIsIFwidG9wXCIsXG4gICAgXCJ0cmFkLWNoaW5lc2UtZm9ybWFsXCIsIFwidHJhZC1jaGluZXNlLWluZm9ybWFsXCIsIFwidHJhbnNmb3JtXCIsXG4gICAgXCJ0cmFuc2xhdGVcIiwgXCJ0cmFuc2xhdGUzZFwiLCBcInRyYW5zbGF0ZVhcIiwgXCJ0cmFuc2xhdGVZXCIsIFwidHJhbnNsYXRlWlwiLFxuICAgIFwidHJhbnNwYXJlbnRcIiwgXCJ1bHRyYS1jb25kZW5zZWRcIiwgXCJ1bHRyYS1leHBhbmRlZFwiLCBcInVuZGVybGluZVwiLCBcInVuc2V0XCIsIFwidXBcIixcbiAgICBcInVwcGVyLWFscGhhXCIsIFwidXBwZXItYXJtZW5pYW5cIiwgXCJ1cHBlci1ncmVla1wiLCBcInVwcGVyLWhleGFkZWNpbWFsXCIsXG4gICAgXCJ1cHBlci1sYXRpblwiLCBcInVwcGVyLW5vcndlZ2lhblwiLCBcInVwcGVyLXJvbWFuXCIsIFwidXBwZXJjYXNlXCIsIFwidXJkdVwiLCBcInVybFwiLFxuICAgIFwidmFyXCIsIFwidmVydGljYWxcIiwgXCJ2ZXJ0aWNhbC10ZXh0XCIsIFwidmlzaWJsZVwiLCBcInZpc2libGVGaWxsXCIsIFwidmlzaWJsZVBhaW50ZWRcIixcbiAgICBcInZpc2libGVTdHJva2VcIiwgXCJ2aXN1YWxcIiwgXCJ3LXJlc2l6ZVwiLCBcIndhaXRcIiwgXCJ3YXZlXCIsIFwid2lkZXJcIixcbiAgICBcIndpbmRvd1wiLCBcIndpbmRvd2ZyYW1lXCIsIFwid2luZG93dGV4dFwiLCBcIndvcmRzXCIsIFwid3JhcFwiLCBcIndyYXAtcmV2ZXJzZVwiLCBcIngtbGFyZ2VcIiwgXCJ4LXNtYWxsXCIsIFwieG9yXCIsXG4gICAgXCJ4eC1sYXJnZVwiLCBcInh4LXNtYWxsXCJcbiAgXSwgdmFsdWVLZXl3b3JkcyA9IGtleVNldCh2YWx1ZUtleXdvcmRzXyk7XG5cbiAgdmFyIGFsbFdvcmRzID0gZG9jdW1lbnRUeXBlc18uY29uY2F0KG1lZGlhVHlwZXNfKS5jb25jYXQobWVkaWFGZWF0dXJlc18pLmNvbmNhdChtZWRpYVZhbHVlS2V5d29yZHNfKVxuICAgIC5jb25jYXQocHJvcGVydHlLZXl3b3Jkc18pLmNvbmNhdChub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHNfKS5jb25jYXQoY29sb3JLZXl3b3Jkc18pXG4gICAgLmNvbmNhdCh2YWx1ZUtleXdvcmRzXyk7XG4gIENvZGVNaXJyb3IucmVnaXN0ZXJIZWxwZXIoXCJoaW50V29yZHNcIiwgXCJjc3NcIiwgYWxsV29yZHMpO1xuXG4gIGZ1bmN0aW9uIHRva2VuQ0NvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBtYXliZUVuZCA9IGZhbHNlLCBjaDtcbiAgICB3aGlsZSAoKGNoID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgaWYgKG1heWJlRW5kICYmIGNoID09IFwiL1wiKSB7XG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBtYXliZUVuZCA9IChjaCA9PSBcIipcIik7XG4gICAgfVxuICAgIHJldHVybiBbXCJjb21tZW50XCIsIFwiY29tbWVudFwiXTtcbiAgfVxuXG4gIENvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQvY3NzXCIsIHtcbiAgICBkb2N1bWVudFR5cGVzOiBkb2N1bWVudFR5cGVzLFxuICAgIG1lZGlhVHlwZXM6IG1lZGlhVHlwZXMsXG4gICAgbWVkaWFGZWF0dXJlczogbWVkaWFGZWF0dXJlcyxcbiAgICBtZWRpYVZhbHVlS2V5d29yZHM6IG1lZGlhVmFsdWVLZXl3b3JkcyxcbiAgICBwcm9wZXJ0eUtleXdvcmRzOiBwcm9wZXJ0eUtleXdvcmRzLFxuICAgIG5vblN0YW5kYXJkUHJvcGVydHlLZXl3b3Jkczogbm9uU3RhbmRhcmRQcm9wZXJ0eUtleXdvcmRzLFxuICAgIGZvbnRQcm9wZXJ0aWVzOiBmb250UHJvcGVydGllcyxcbiAgICBjb3VudGVyRGVzY3JpcHRvcnM6IGNvdW50ZXJEZXNjcmlwdG9ycyxcbiAgICBjb2xvcktleXdvcmRzOiBjb2xvcktleXdvcmRzLFxuICAgIHZhbHVlS2V5d29yZHM6IHZhbHVlS2V5d29yZHMsXG4gICAgdG9rZW5Ib29rczoge1xuICAgICAgXCIvXCI6IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKCFzdHJlYW0uZWF0KFwiKlwiKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ0NvbW1lbnQ7XG4gICAgICAgIHJldHVybiB0b2tlbkNDb21tZW50KHN0cmVhbSwgc3RhdGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbmFtZTogXCJjc3NcIlxuICB9KTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gtc2Nzc1wiLCB7XG4gICAgbWVkaWFUeXBlczogbWVkaWFUeXBlcyxcbiAgICBtZWRpYUZlYXR1cmVzOiBtZWRpYUZlYXR1cmVzLFxuICAgIG1lZGlhVmFsdWVLZXl3b3JkczogbWVkaWFWYWx1ZUtleXdvcmRzLFxuICAgIHByb3BlcnR5S2V5d29yZHM6IHByb3BlcnR5S2V5d29yZHMsXG4gICAgbm9uU3RhbmRhcmRQcm9wZXJ0eUtleXdvcmRzOiBub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHMsXG4gICAgY29sb3JLZXl3b3JkczogY29sb3JLZXl3b3JkcyxcbiAgICB2YWx1ZUtleXdvcmRzOiB2YWx1ZUtleXdvcmRzLFxuICAgIGZvbnRQcm9wZXJ0aWVzOiBmb250UHJvcGVydGllcyxcbiAgICBhbGxvd05lc3RlZDogdHJ1ZSxcbiAgICBsaW5lQ29tbWVudDogXCIvL1wiLFxuICAgIHRva2VuSG9va3M6IHtcbiAgICAgIFwiL1wiOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdHJlYW0uZWF0KFwiL1wiKSkge1xuICAgICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgICByZXR1cm4gW1wiY29tbWVudFwiLCBcImNvbW1lbnRcIl07XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLmVhdChcIipcIikpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ0NvbW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ0NvbW1lbnQoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtcIm9wZXJhdG9yXCIsIFwib3BlcmF0b3JcIl07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIjpcIjogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL1xccypcXHsvLCBmYWxzZSkpXG4gICAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgICAgXCIkXCI6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICBzdHJlYW0ubWF0Y2goL15bXFx3LV0rLyk7XG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXHMqOi8sIGZhbHNlKSlcbiAgICAgICAgICByZXR1cm4gW1widmFyaWFibGUtMlwiLCBcInZhcmlhYmxlLWRlZmluaXRpb25cIl07XG4gICAgICAgIHJldHVybiBbXCJ2YXJpYWJsZS0yXCIsIFwidmFyaWFibGVcIl07XG4gICAgICB9LFxuICAgICAgXCIjXCI6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICBpZiAoIXN0cmVhbS5lYXQoXCJ7XCIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBbbnVsbCwgXCJpbnRlcnBvbGF0aW9uXCJdO1xuICAgICAgfVxuICAgIH0sXG4gICAgbmFtZTogXCJjc3NcIixcbiAgICBoZWxwZXJUeXBlOiBcInNjc3NcIlxuICB9KTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gtbGVzc1wiLCB7XG4gICAgbWVkaWFUeXBlczogbWVkaWFUeXBlcyxcbiAgICBtZWRpYUZlYXR1cmVzOiBtZWRpYUZlYXR1cmVzLFxuICAgIG1lZGlhVmFsdWVLZXl3b3JkczogbWVkaWFWYWx1ZUtleXdvcmRzLFxuICAgIHByb3BlcnR5S2V5d29yZHM6IHByb3BlcnR5S2V5d29yZHMsXG4gICAgbm9uU3RhbmRhcmRQcm9wZXJ0eUtleXdvcmRzOiBub25TdGFuZGFyZFByb3BlcnR5S2V5d29yZHMsXG4gICAgY29sb3JLZXl3b3JkczogY29sb3JLZXl3b3JkcyxcbiAgICB2YWx1ZUtleXdvcmRzOiB2YWx1ZUtleXdvcmRzLFxuICAgIGZvbnRQcm9wZXJ0aWVzOiBmb250UHJvcGVydGllcyxcbiAgICBhbGxvd05lc3RlZDogdHJ1ZSxcbiAgICBsaW5lQ29tbWVudDogXCIvL1wiLFxuICAgIHRva2VuSG9va3M6IHtcbiAgICAgIFwiL1wiOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdHJlYW0uZWF0KFwiL1wiKSkge1xuICAgICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgICByZXR1cm4gW1wiY29tbWVudFwiLCBcImNvbW1lbnRcIl07XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLmVhdChcIipcIikpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ0NvbW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQ0NvbW1lbnQoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtcIm9wZXJhdG9yXCIsIFwib3BlcmF0b3JcIl07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIkBcIjogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIGlmIChzdHJlYW0uZWF0KFwie1wiKSkgcmV0dXJuIFtudWxsLCBcImludGVycG9sYXRpb25cIl07XG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14oY2hhcnNldHxkb2N1bWVudHxmb250LWZhY2V8aW1wb3J0fCgtKG1venxtc3xvfHdlYmtpdCktKT9rZXlmcmFtZXN8bWVkaWF8bmFtZXNwYWNlfHBhZ2V8c3VwcG9ydHMpXFxiL2ksIGZhbHNlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXFxcXFwtXS8pO1xuICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKC9eXFxzKjovLCBmYWxzZSkpXG4gICAgICAgICAgcmV0dXJuIFtcInZhcmlhYmxlLTJcIiwgXCJ2YXJpYWJsZS1kZWZpbml0aW9uXCJdO1xuICAgICAgICByZXR1cm4gW1widmFyaWFibGUtMlwiLCBcInZhcmlhYmxlXCJdO1xuICAgICAgfSxcbiAgICAgIFwiJlwiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtcImF0b21cIiwgXCJhdG9tXCJdO1xuICAgICAgfVxuICAgIH0sXG4gICAgbmFtZTogXCJjc3NcIixcbiAgICBoZWxwZXJUeXBlOiBcImxlc3NcIlxuICB9KTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gtZ3NzXCIsIHtcbiAgICBkb2N1bWVudFR5cGVzOiBkb2N1bWVudFR5cGVzLFxuICAgIG1lZGlhVHlwZXM6IG1lZGlhVHlwZXMsXG4gICAgbWVkaWFGZWF0dXJlczogbWVkaWFGZWF0dXJlcyxcbiAgICBwcm9wZXJ0eUtleXdvcmRzOiBwcm9wZXJ0eUtleXdvcmRzLFxuICAgIG5vblN0YW5kYXJkUHJvcGVydHlLZXl3b3Jkczogbm9uU3RhbmRhcmRQcm9wZXJ0eUtleXdvcmRzLFxuICAgIGZvbnRQcm9wZXJ0aWVzOiBmb250UHJvcGVydGllcyxcbiAgICBjb3VudGVyRGVzY3JpcHRvcnM6IGNvdW50ZXJEZXNjcmlwdG9ycyxcbiAgICBjb2xvcktleXdvcmRzOiBjb2xvcktleXdvcmRzLFxuICAgIHZhbHVlS2V5d29yZHM6IHZhbHVlS2V5d29yZHMsXG4gICAgc3VwcG9ydHNBdENvbXBvbmVudDogdHJ1ZSxcbiAgICB0b2tlbkhvb2tzOiB7XG4gICAgICBcIi9cIjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICBpZiAoIXN0cmVhbS5lYXQoXCIqXCIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5DQ29tbWVudDtcbiAgICAgICAgcmV0dXJuIHRva2VuQ0NvbW1lbnQoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBuYW1lOiBcImNzc1wiLFxuICAgIGhlbHBlclR5cGU6IFwiZ3NzXCJcbiAgfSk7XG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL2Nzcy9jc3MuanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHA6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vLi4vbGliL2NvZGVtaXJyb3JcIiksIHJlcXVpcmUoXCIuLi94bWwveG1sXCIpLCByZXF1aXJlKFwiLi4vbWV0YVwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiLCBcIi4uL3htbC94bWxcIiwgXCIuLi9tZXRhXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbkNvZGVNaXJyb3IuZGVmaW5lTW9kZShcIm1hcmtkb3duXCIsIGZ1bmN0aW9uKGNtQ2ZnLCBtb2RlQ2ZnKSB7XG5cbiAgdmFyIGh0bWxNb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNtQ2ZnLCBcInRleHQvaHRtbFwiKTtcbiAgdmFyIGh0bWxNb2RlTWlzc2luZyA9IGh0bWxNb2RlLm5hbWUgPT0gXCJudWxsXCJcblxuICBmdW5jdGlvbiBnZXRNb2RlKG5hbWUpIHtcbiAgICBpZiAoQ29kZU1pcnJvci5maW5kTW9kZUJ5TmFtZSkge1xuICAgICAgdmFyIGZvdW5kID0gQ29kZU1pcnJvci5maW5kTW9kZUJ5TmFtZShuYW1lKTtcbiAgICAgIGlmIChmb3VuZCkgbmFtZSA9IGZvdW5kLm1pbWUgfHwgZm91bmQubWltZXNbMF07XG4gICAgfVxuICAgIHZhciBtb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNtQ2ZnLCBuYW1lKTtcbiAgICByZXR1cm4gbW9kZS5uYW1lID09IFwibnVsbFwiID8gbnVsbCA6IG1vZGU7XG4gIH1cblxuICAvLyBTaG91bGQgY2hhcmFjdGVycyB0aGF0IGFmZmVjdCBoaWdobGlnaHRpbmcgYmUgaGlnaGxpZ2h0ZWQgc2VwYXJhdGU/XG4gIC8vIERvZXMgbm90IGluY2x1ZGUgY2hhcmFjdGVycyB0aGF0IHdpbGwgYmUgb3V0cHV0IChzdWNoIGFzIGAxLmAgYW5kIGAtYCBmb3IgbGlzdHMpXG4gIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcgPT09IHVuZGVmaW5lZClcbiAgICBtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcgPSBmYWxzZTtcblxuICAvLyBNYXhpbXVtIG51bWJlciBvZiBuZXN0ZWQgYmxvY2txdW90ZXMuIFNldCB0byAwIGZvciBpbmZpbml0ZSBuZXN0aW5nLlxuICAvLyBFeGNlc3MgYD5gIHdpbGwgZW1pdCBgZXJyb3JgIHRva2VuLlxuICBpZiAobW9kZUNmZy5tYXhCbG9ja3F1b3RlRGVwdGggPT09IHVuZGVmaW5lZClcbiAgICBtb2RlQ2ZnLm1heEJsb2NrcXVvdGVEZXB0aCA9IDA7XG5cbiAgLy8gVHVybiBvbiB0YXNrIGxpc3RzPyAoXCItIFsgXSBcIiBhbmQgXCItIFt4XSBcIilcbiAgaWYgKG1vZGVDZmcudGFza0xpc3RzID09PSB1bmRlZmluZWQpIG1vZGVDZmcudGFza0xpc3RzID0gZmFsc2U7XG5cbiAgLy8gVHVybiBvbiBzdHJpa2V0aHJvdWdoIHN5bnRheFxuICBpZiAobW9kZUNmZy5zdHJpa2V0aHJvdWdoID09PSB1bmRlZmluZWQpXG4gICAgbW9kZUNmZy5zdHJpa2V0aHJvdWdoID0gZmFsc2U7XG5cbiAgaWYgKG1vZGVDZmcuZW1vamkgPT09IHVuZGVmaW5lZClcbiAgICBtb2RlQ2ZnLmVtb2ppID0gZmFsc2U7XG5cbiAgaWYgKG1vZGVDZmcuZmVuY2VkQ29kZUJsb2NrSGlnaGxpZ2h0aW5nID09PSB1bmRlZmluZWQpXG4gICAgbW9kZUNmZy5mZW5jZWRDb2RlQmxvY2tIaWdobGlnaHRpbmcgPSB0cnVlO1xuXG4gIGlmIChtb2RlQ2ZnLnhtbCA9PT0gdW5kZWZpbmVkKVxuICAgIG1vZGVDZmcueG1sID0gdHJ1ZTtcblxuICAvLyBBbGxvdyB0b2tlbiB0eXBlcyB0byBiZSBvdmVycmlkZGVuIGJ5IHVzZXItcHJvdmlkZWQgdG9rZW4gdHlwZXMuXG4gIGlmIChtb2RlQ2ZnLnRva2VuVHlwZU92ZXJyaWRlcyA9PT0gdW5kZWZpbmVkKVxuICAgIG1vZGVDZmcudG9rZW5UeXBlT3ZlcnJpZGVzID0ge307XG5cbiAgdmFyIHRva2VuVHlwZXMgPSB7XG4gICAgaGVhZGVyOiBcImhlYWRlclwiLFxuICAgIGNvZGU6IFwiY29tbWVudFwiLFxuICAgIHF1b3RlOiBcInF1b3RlXCIsXG4gICAgbGlzdDE6IFwidmFyaWFibGUtMlwiLFxuICAgIGxpc3QyOiBcInZhcmlhYmxlLTNcIixcbiAgICBsaXN0MzogXCJrZXl3b3JkXCIsXG4gICAgaHI6IFwiaHJcIixcbiAgICBpbWFnZTogXCJpbWFnZVwiLFxuICAgIGltYWdlQWx0VGV4dDogXCJpbWFnZS1hbHQtdGV4dFwiLFxuICAgIGltYWdlTWFya2VyOiBcImltYWdlLW1hcmtlclwiLFxuICAgIGZvcm1hdHRpbmc6IFwiZm9ybWF0dGluZ1wiLFxuICAgIGxpbmtJbmxpbmU6IFwibGlua1wiLFxuICAgIGxpbmtFbWFpbDogXCJsaW5rXCIsXG4gICAgbGlua1RleHQ6IFwibGlua1wiLFxuICAgIGxpbmtIcmVmOiBcInN0cmluZ1wiLFxuICAgIGVtOiBcImVtXCIsXG4gICAgc3Ryb25nOiBcInN0cm9uZ1wiLFxuICAgIHN0cmlrZXRocm91Z2g6IFwic3RyaWtldGhyb3VnaFwiLFxuICAgIGVtb2ppOiBcImJ1aWx0aW5cIlxuICB9O1xuXG4gIGZvciAodmFyIHRva2VuVHlwZSBpbiB0b2tlblR5cGVzKSB7XG4gICAgaWYgKHRva2VuVHlwZXMuaGFzT3duUHJvcGVydHkodG9rZW5UeXBlKSAmJiBtb2RlQ2ZnLnRva2VuVHlwZU92ZXJyaWRlc1t0b2tlblR5cGVdKSB7XG4gICAgICB0b2tlblR5cGVzW3Rva2VuVHlwZV0gPSBtb2RlQ2ZnLnRva2VuVHlwZU92ZXJyaWRlc1t0b2tlblR5cGVdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoclJFID0gL14oWypcXC1fXSkoPzpcXHMqXFwxKXsyLH1cXHMqJC9cbiAgLCAgIGxpc3RSRSA9IC9eKD86WypcXC0rXXxeWzAtOV0rKFsuKV0pKVxccysvXG4gICwgICB0YXNrTGlzdFJFID0gL15cXFsoeHwgKVxcXSg/PVxccykvaSAvLyBNdXN0IGZvbGxvdyBsaXN0UkVcbiAgLCAgIGF0eEhlYWRlclJFID0gbW9kZUNmZy5hbGxvd0F0eEhlYWRlcldpdGhvdXRTcGFjZSA/IC9eKCMrKS8gOiAvXigjKykoPzogfCQpL1xuICAsICAgc2V0ZXh0SGVhZGVyUkUgPSAvXiAqKD86XFw9ezEsfXwtezEsfSlcXHMqJC9cbiAgLCAgIHRleHRSRSA9IC9eW14jIVxcW1xcXSpfXFxcXDw+YCBcIicofjpdKy9cbiAgLCAgIGZlbmNlZENvZGVSRSA9IC9eKH5+fit8YGBgKylbIFxcdF0qKFtcXHcrIy1dKilbXlxcbmBdKiQvXG4gICwgICBsaW5rRGVmUkUgPSAvXlxccypcXFtbXlxcXV0rP1xcXTouKiQvIC8vIG5haXZlIGxpbmstZGVmaW5pdGlvblxuICAsICAgcHVuY3R1YXRpb24gPSAvWyFcXFwiIyQlJlxcJygpKissXFwtXFwuXFwvOjs8PT4/QFxcW1xcXFxcXF1eX2B7fH1+4oCUXS9cbiAgLCAgIGV4cGFuZGVkVGFiID0gXCIgICAgXCIgLy8gQ29tbW9uTWFyayBzcGVjaWZpZXMgdGFiIGFzIDQgc3BhY2VzXG5cbiAgZnVuY3Rpb24gc3dpdGNoSW5saW5lKHN0cmVhbSwgc3RhdGUsIGYpIHtcbiAgICBzdGF0ZS5mID0gc3RhdGUuaW5saW5lID0gZjtcbiAgICByZXR1cm4gZihzdHJlYW0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN3aXRjaEJsb2NrKHN0cmVhbSwgc3RhdGUsIGYpIHtcbiAgICBzdGF0ZS5mID0gc3RhdGUuYmxvY2sgPSBmO1xuICAgIHJldHVybiBmKHN0cmVhbSwgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZUlzRW1wdHkobGluZSkge1xuICAgIHJldHVybiAhbGluZSB8fCAhL1xcUy8udGVzdChsaW5lLnN0cmluZylcbiAgfVxuXG4gIC8vIEJsb2Nrc1xuXG4gIGZ1bmN0aW9uIGJsYW5rTGluZShzdGF0ZSkge1xuICAgIC8vIFJlc2V0IGxpbmtUaXRsZSBzdGF0ZVxuICAgIHN0YXRlLmxpbmtUaXRsZSA9IGZhbHNlO1xuICAgIHN0YXRlLmxpbmtIcmVmID0gZmFsc2U7XG4gICAgc3RhdGUubGlua1RleHQgPSBmYWxzZTtcbiAgICAvLyBSZXNldCBFTSBzdGF0ZVxuICAgIHN0YXRlLmVtID0gZmFsc2U7XG4gICAgLy8gUmVzZXQgU1RST05HIHN0YXRlXG4gICAgc3RhdGUuc3Ryb25nID0gZmFsc2U7XG4gICAgLy8gUmVzZXQgc3RyaWtldGhyb3VnaCBzdGF0ZVxuICAgIHN0YXRlLnN0cmlrZXRocm91Z2ggPSBmYWxzZTtcbiAgICAvLyBSZXNldCBzdGF0ZS5xdW90ZVxuICAgIHN0YXRlLnF1b3RlID0gMDtcbiAgICAvLyBSZXNldCBzdGF0ZS5pbmRlbnRlZENvZGVcbiAgICBzdGF0ZS5pbmRlbnRlZENvZGUgPSBmYWxzZTtcbiAgICBpZiAoc3RhdGUuZiA9PSBodG1sQmxvY2spIHtcbiAgICAgIHN0YXRlLmYgPSBpbmxpbmVOb3JtYWw7XG4gICAgICBzdGF0ZS5ibG9jayA9IGJsb2NrTm9ybWFsO1xuICAgIH1cbiAgICAvLyBSZXNldCBzdGF0ZS50cmFpbGluZ1NwYWNlXG4gICAgc3RhdGUudHJhaWxpbmdTcGFjZSA9IDA7XG4gICAgc3RhdGUudHJhaWxpbmdTcGFjZU5ld0xpbmUgPSBmYWxzZTtcbiAgICAvLyBNYXJrIHRoaXMgbGluZSBhcyBibGFua1xuICAgIHN0YXRlLnByZXZMaW5lID0gc3RhdGUudGhpc0xpbmVcbiAgICBzdGF0ZS50aGlzTGluZSA9IHtzdHJlYW06IG51bGx9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBibG9ja05vcm1hbChzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGZpcnN0VG9rZW5PbkxpbmUgPSBzdHJlYW0uY29sdW1uKCkgPT09IHN0YXRlLmluZGVudGF0aW9uO1xuICAgIHZhciBwcmV2TGluZUxpbmVJc0VtcHR5ID0gbGluZUlzRW1wdHkoc3RhdGUucHJldkxpbmUuc3RyZWFtKTtcbiAgICB2YXIgcHJldkxpbmVJc0luZGVudGVkQ29kZSA9IHN0YXRlLmluZGVudGVkQ29kZTtcbiAgICB2YXIgcHJldkxpbmVJc0hyID0gc3RhdGUucHJldkxpbmUuaHI7XG4gICAgdmFyIHByZXZMaW5lSXNMaXN0ID0gc3RhdGUubGlzdCAhPT0gZmFsc2U7XG4gICAgdmFyIG1heE5vbkNvZGVJbmRlbnRhdGlvbiA9IChzdGF0ZS5saXN0U3RhY2tbc3RhdGUubGlzdFN0YWNrLmxlbmd0aCAtIDFdIHx8IDApICsgMztcblxuICAgIHN0YXRlLmluZGVudGVkQ29kZSA9IGZhbHNlO1xuXG4gICAgdmFyIGxpbmVJbmRlbnRhdGlvbiA9IHN0YXRlLmluZGVudGF0aW9uO1xuICAgIC8vIGNvbXB1dGUgb25jZSBwZXIgbGluZSAob24gZmlyc3QgdG9rZW4pXG4gICAgaWYgKHN0YXRlLmluZGVudGF0aW9uRGlmZiA9PT0gbnVsbCkge1xuICAgICAgc3RhdGUuaW5kZW50YXRpb25EaWZmID0gc3RhdGUuaW5kZW50YXRpb247XG4gICAgICBpZiAocHJldkxpbmVJc0xpc3QpIHtcbiAgICAgICAgLy8gUmVzZXQgaW5saW5lIHN0eWxlcyB3aGljaCBzaG91bGRuJ3QgcHJvcGFnYXRlIGFyb3NzIGxpc3QgaXRlbXNcbiAgICAgICAgc3RhdGUuZW0gPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuc3Ryb25nID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmNvZGUgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuc3RyaWtldGhyb3VnaCA9IGZhbHNlO1xuXG4gICAgICAgIHN0YXRlLmxpc3QgPSBudWxsO1xuICAgICAgICAvLyBXaGlsZSB0aGlzIGxpc3QgaXRlbSdzIG1hcmtlcidzIGluZGVudGF0aW9uIGlzIGxlc3MgdGhhbiB0aGUgZGVlcGVzdFxuICAgICAgICAvLyAgbGlzdCBpdGVtJ3MgY29udGVudCdzIGluZGVudGF0aW9uLHBvcCB0aGUgZGVlcGVzdCBsaXN0IGl0ZW1cbiAgICAgICAgLy8gIGluZGVudGF0aW9uIG9mZiB0aGUgc3RhY2ssIGFuZCB1cGRhdGUgYmxvY2sgaW5kZW50YXRpb24gc3RhdGVcbiAgICAgICAgd2hpbGUgKGxpbmVJbmRlbnRhdGlvbiA8IHN0YXRlLmxpc3RTdGFja1tzdGF0ZS5saXN0U3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICBzdGF0ZS5saXN0U3RhY2sucG9wKCk7XG4gICAgICAgICAgaWYgKHN0YXRlLmxpc3RTdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0YXRlLmluZGVudGF0aW9uID0gc3RhdGUubGlzdFN0YWNrW3N0YXRlLmxpc3RTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAvLyBsZXNzIHRoYW4gdGhlIGZpcnN0IGxpc3QncyBpbmRlbnQgLT4gdGhlIGxpbmUgaXMgbm8gbG9uZ2VyIGEgbGlzdFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZS5saXN0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5saXN0ICE9PSBmYWxzZSkge1xuICAgICAgICAgIHN0YXRlLmluZGVudGF0aW9uRGlmZiA9IGxpbmVJbmRlbnRhdGlvbiAtIHN0YXRlLmxpc3RTdGFja1tzdGF0ZS5saXN0U3RhY2subGVuZ3RoIC0gMV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG5vdCBjb21wcmVoZW5zaXZlIChjdXJyZW50bHkgb25seSBmb3Igc2V0ZXh0IGRldGVjdGlvbiBwdXJwb3NlcylcbiAgICB2YXIgYWxsb3dzSW5saW5lQ29udGludWF0aW9uID0gKFxuICAgICAgICAhcHJldkxpbmVMaW5lSXNFbXB0eSAmJiAhcHJldkxpbmVJc0hyICYmICFzdGF0ZS5wcmV2TGluZS5oZWFkZXIgJiZcbiAgICAgICAgKCFwcmV2TGluZUlzTGlzdCB8fCAhcHJldkxpbmVJc0luZGVudGVkQ29kZSkgJiZcbiAgICAgICAgIXN0YXRlLnByZXZMaW5lLmZlbmNlZENvZGVFbmRcbiAgICApO1xuXG4gICAgdmFyIGlzSHIgPSAoc3RhdGUubGlzdCA9PT0gZmFsc2UgfHwgcHJldkxpbmVJc0hyIHx8IHByZXZMaW5lTGluZUlzRW1wdHkpICYmXG4gICAgICBzdGF0ZS5pbmRlbnRhdGlvbiA8PSBtYXhOb25Db2RlSW5kZW50YXRpb24gJiYgc3RyZWFtLm1hdGNoKGhyUkUpO1xuXG4gICAgdmFyIG1hdGNoID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuaW5kZW50YXRpb25EaWZmID49IDQgJiYgKHByZXZMaW5lSXNJbmRlbnRlZENvZGUgfHwgc3RhdGUucHJldkxpbmUuZmVuY2VkQ29kZUVuZCB8fFxuICAgICAgICAgc3RhdGUucHJldkxpbmUuaGVhZGVyIHx8IHByZXZMaW5lTGluZUlzRW1wdHkpKSB7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICBzdGF0ZS5pbmRlbnRlZENvZGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRva2VuVHlwZXMuY29kZTtcbiAgICB9IGVsc2UgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGZpcnN0VG9rZW5PbkxpbmUgJiYgc3RhdGUuaW5kZW50YXRpb24gPD0gbWF4Tm9uQ29kZUluZGVudGF0aW9uICYmIChtYXRjaCA9IHN0cmVhbS5tYXRjaChhdHhIZWFkZXJSRSkpICYmIG1hdGNoWzFdLmxlbmd0aCA8PSA2KSB7XG4gICAgICBzdGF0ZS5xdW90ZSA9IDA7XG4gICAgICBzdGF0ZS5oZWFkZXIgPSBtYXRjaFsxXS5sZW5ndGg7XG4gICAgICBzdGF0ZS50aGlzTGluZS5oZWFkZXIgPSB0cnVlO1xuICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwiaGVhZGVyXCI7XG4gICAgICBzdGF0ZS5mID0gc3RhdGUuaW5saW5lO1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuaW5kZW50YXRpb24gPD0gbWF4Tm9uQ29kZUluZGVudGF0aW9uICYmIHN0cmVhbS5lYXQoJz4nKSkge1xuICAgICAgc3RhdGUucXVvdGUgPSBmaXJzdFRva2VuT25MaW5lID8gMSA6IHN0YXRlLnF1b3RlICsgMTtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHN0YXRlLmZvcm1hdHRpbmcgPSBcInF1b3RlXCI7XG4gICAgICBzdHJlYW0uZWF0U3BhY2UoKTtcbiAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKCFpc0hyICYmICFzdGF0ZS5zZXRleHQgJiYgZmlyc3RUb2tlbk9uTGluZSAmJiBzdGF0ZS5pbmRlbnRhdGlvbiA8PSBtYXhOb25Db2RlSW5kZW50YXRpb24gJiYgKG1hdGNoID0gc3RyZWFtLm1hdGNoKGxpc3RSRSkpKSB7XG4gICAgICB2YXIgbGlzdFR5cGUgPSBtYXRjaFsxXSA/IFwib2xcIiA6IFwidWxcIjtcblxuICAgICAgc3RhdGUuaW5kZW50YXRpb24gPSBsaW5lSW5kZW50YXRpb24gKyBzdHJlYW0uY3VycmVudCgpLmxlbmd0aDtcbiAgICAgIHN0YXRlLmxpc3QgPSB0cnVlO1xuICAgICAgc3RhdGUucXVvdGUgPSAwO1xuXG4gICAgICAvLyBBZGQgdGhpcyBsaXN0IGl0ZW0ncyBjb250ZW50J3MgaW5kZW50YXRpb24gdG8gdGhlIHN0YWNrXG4gICAgICBzdGF0ZS5saXN0U3RhY2sucHVzaChzdGF0ZS5pbmRlbnRhdGlvbik7XG5cbiAgICAgIGlmIChtb2RlQ2ZnLnRhc2tMaXN0cyAmJiBzdHJlYW0ubWF0Y2godGFza0xpc3RSRSwgZmFsc2UpKSB7XG4gICAgICAgIHN0YXRlLnRhc2tMaXN0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmYgPSBzdGF0ZS5pbmxpbmU7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gW1wibGlzdFwiLCBcImxpc3QtXCIgKyBsaXN0VHlwZV07XG4gICAgICByZXR1cm4gZ2V0VHlwZShzdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChmaXJzdFRva2VuT25MaW5lICYmIHN0YXRlLmluZGVudGF0aW9uIDw9IG1heE5vbkNvZGVJbmRlbnRhdGlvbiAmJiAobWF0Y2ggPSBzdHJlYW0ubWF0Y2goZmVuY2VkQ29kZVJFLCB0cnVlKSkpIHtcbiAgICAgIHN0YXRlLnF1b3RlID0gMDtcbiAgICAgIHN0YXRlLmZlbmNlZEVuZFJFID0gbmV3IFJlZ0V4cChtYXRjaFsxXSArIFwiKyAqJFwiKTtcbiAgICAgIC8vIHRyeSBzd2l0Y2hpbmcgbW9kZVxuICAgICAgc3RhdGUubG9jYWxNb2RlID0gbW9kZUNmZy5mZW5jZWRDb2RlQmxvY2tIaWdobGlnaHRpbmcgJiYgZ2V0TW9kZShtYXRjaFsyXSk7XG4gICAgICBpZiAoc3RhdGUubG9jYWxNb2RlKSBzdGF0ZS5sb2NhbFN0YXRlID0gQ29kZU1pcnJvci5zdGFydFN0YXRlKHN0YXRlLmxvY2FsTW9kZSk7XG4gICAgICBzdGF0ZS5mID0gc3RhdGUuYmxvY2sgPSBsb2NhbDtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHN0YXRlLmZvcm1hdHRpbmcgPSBcImNvZGUtYmxvY2tcIjtcbiAgICAgIHN0YXRlLmNvZGUgPSAtMVxuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIC8vIFNFVEVYVCBoYXMgbG93ZXN0IGJsb2NrLXNjb3BlIHByZWNlZGVuY2UgYWZ0ZXIgSFIsIHNvIGNoZWNrIGl0IGFmdGVyXG4gICAgLy8gIHRoZSBvdGhlcnMgKGNvZGUsIGJsb2NrcXVvdGUsIGxpc3QuLi4pXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIGlmIHNldGV4dCBzZXQsIGluZGljYXRlcyBsaW5lIGFmdGVyIC0tLS89PT1cbiAgICAgIHN0YXRlLnNldGV4dCB8fCAoXG4gICAgICAgIC8vIGxpbmUgYmVmb3JlIC0tLS89PT1cbiAgICAgICAgKCFhbGxvd3NJbmxpbmVDb250aW51YXRpb24gfHwgIXByZXZMaW5lSXNMaXN0KSAmJiAhc3RhdGUucXVvdGUgJiYgc3RhdGUubGlzdCA9PT0gZmFsc2UgJiZcbiAgICAgICAgIXN0YXRlLmNvZGUgJiYgIWlzSHIgJiYgIWxpbmtEZWZSRS50ZXN0KHN0cmVhbS5zdHJpbmcpICYmXG4gICAgICAgIChtYXRjaCA9IHN0cmVhbS5sb29rQWhlYWQoMSkpICYmIChtYXRjaCA9IG1hdGNoLm1hdGNoKHNldGV4dEhlYWRlclJFKSlcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGlmICggIXN0YXRlLnNldGV4dCApIHtcbiAgICAgICAgc3RhdGUuaGVhZGVyID0gbWF0Y2hbMF0uY2hhckF0KDApID09ICc9JyA/IDEgOiAyO1xuICAgICAgICBzdGF0ZS5zZXRleHQgPSBzdGF0ZS5oZWFkZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5oZWFkZXIgPSBzdGF0ZS5zZXRleHQ7XG4gICAgICAgIC8vIGhhcyBubyBlZmZlY3Qgb24gdHlwZSBzbyB3ZSBjYW4gcmVzZXQgaXQgbm93XG4gICAgICAgIHN0YXRlLnNldGV4dCA9IDA7XG4gICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwiaGVhZGVyXCI7XG4gICAgICB9XG4gICAgICBzdGF0ZS50aGlzTGluZS5oZWFkZXIgPSB0cnVlO1xuICAgICAgc3RhdGUuZiA9IHN0YXRlLmlubGluZTtcbiAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKGlzSHIpIHtcbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHN0YXRlLmhyID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnRoaXNMaW5lLmhyID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0b2tlblR5cGVzLmhyO1xuICAgIH0gZWxzZSBpZiAoc3RyZWFtLnBlZWsoKSA9PT0gJ1snKSB7XG4gICAgICByZXR1cm4gc3dpdGNoSW5saW5lKHN0cmVhbSwgc3RhdGUsIGZvb3Rub3RlTGluayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN3aXRjaElubGluZShzdHJlYW0sIHN0YXRlLCBzdGF0ZS5pbmxpbmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaHRtbEJsb2NrKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBodG1sTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmh0bWxTdGF0ZSk7XG4gICAgaWYgKCFodG1sTW9kZU1pc3NpbmcpIHtcbiAgICAgIHZhciBpbm5lciA9IENvZGVNaXJyb3IuaW5uZXJNb2RlKGh0bWxNb2RlLCBzdGF0ZS5odG1sU3RhdGUpXG4gICAgICBpZiAoKGlubmVyLm1vZGUubmFtZSA9PSBcInhtbFwiICYmIGlubmVyLnN0YXRlLnRhZ1N0YXJ0ID09PSBudWxsICYmXG4gICAgICAgICAgICghaW5uZXIuc3RhdGUuY29udGV4dCAmJiBpbm5lci5zdGF0ZS50b2tlbml6ZS5pc0luVGV4dCkpIHx8XG4gICAgICAgICAgKHN0YXRlLm1kX2luc2lkZSAmJiBzdHJlYW0uY3VycmVudCgpLmluZGV4T2YoXCI+XCIpID4gLTEpKSB7XG4gICAgICAgIHN0YXRlLmYgPSBpbmxpbmVOb3JtYWw7XG4gICAgICAgIHN0YXRlLmJsb2NrID0gYmxvY2tOb3JtYWw7XG4gICAgICAgIHN0YXRlLmh0bWxTdGF0ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvY2FsKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgY3Vyckxpc3RJbmQgPSBzdGF0ZS5saXN0U3RhY2tbc3RhdGUubGlzdFN0YWNrLmxlbmd0aCAtIDFdIHx8IDA7XG4gICAgdmFyIGhhc0V4aXRlZExpc3QgPSBzdGF0ZS5pbmRlbnRhdGlvbiA8IGN1cnJMaXN0SW5kO1xuICAgIHZhciBtYXhGZW5jZWRFbmRJbmQgPSBjdXJyTGlzdEluZCArIDM7XG4gICAgaWYgKHN0YXRlLmZlbmNlZEVuZFJFICYmIHN0YXRlLmluZGVudGF0aW9uIDw9IG1heEZlbmNlZEVuZEluZCAmJiAoaGFzRXhpdGVkTGlzdCB8fCBzdHJlYW0ubWF0Y2goc3RhdGUuZmVuY2VkRW5kUkUpKSkge1xuICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwiY29kZS1ibG9ja1wiO1xuICAgICAgdmFyIHJldHVyblR5cGU7XG4gICAgICBpZiAoIWhhc0V4aXRlZExpc3QpIHJldHVyblR5cGUgPSBnZXRUeXBlKHN0YXRlKVxuICAgICAgc3RhdGUubG9jYWxNb2RlID0gc3RhdGUubG9jYWxTdGF0ZSA9IG51bGw7XG4gICAgICBzdGF0ZS5ibG9jayA9IGJsb2NrTm9ybWFsO1xuICAgICAgc3RhdGUuZiA9IGlubGluZU5vcm1hbDtcbiAgICAgIHN0YXRlLmZlbmNlZEVuZFJFID0gbnVsbDtcbiAgICAgIHN0YXRlLmNvZGUgPSAwXG4gICAgICBzdGF0ZS50aGlzTGluZS5mZW5jZWRDb2RlRW5kID0gdHJ1ZTtcbiAgICAgIGlmIChoYXNFeGl0ZWRMaXN0KSByZXR1cm4gc3dpdGNoQmxvY2soc3RyZWFtLCBzdGF0ZSwgc3RhdGUuYmxvY2spO1xuICAgICAgcmV0dXJuIHJldHVyblR5cGU7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5sb2NhbE1vZGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5sb2NhbE1vZGUudG9rZW4oc3RyZWFtLCBzdGF0ZS5sb2NhbFN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgcmV0dXJuIHRva2VuVHlwZXMuY29kZTtcbiAgICB9XG4gIH1cblxuICAvLyBJbmxpbmVcbiAgZnVuY3Rpb24gZ2V0VHlwZShzdGF0ZSkge1xuICAgIHZhciBzdHlsZXMgPSBbXTtcblxuICAgIGlmIChzdGF0ZS5mb3JtYXR0aW5nKSB7XG4gICAgICBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmZvcm1hdHRpbmcpO1xuXG4gICAgICBpZiAodHlwZW9mIHN0YXRlLmZvcm1hdHRpbmcgPT09IFwic3RyaW5nXCIpIHN0YXRlLmZvcm1hdHRpbmcgPSBbc3RhdGUuZm9ybWF0dGluZ107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuZm9ybWF0dGluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmZvcm1hdHRpbmcgKyBcIi1cIiArIHN0YXRlLmZvcm1hdHRpbmdbaV0pO1xuXG4gICAgICAgIGlmIChzdGF0ZS5mb3JtYXR0aW5nW2ldID09PSBcImhlYWRlclwiKSB7XG4gICAgICAgICAgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5mb3JtYXR0aW5nICsgXCItXCIgKyBzdGF0ZS5mb3JtYXR0aW5nW2ldICsgXCItXCIgKyBzdGF0ZS5oZWFkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGBmb3JtYXR0aW5nLXF1b3RlYCBhbmQgYGZvcm1hdHRpbmctcXVvdGUtI2AgZm9yIGJsb2NrcXVvdGVzXG4gICAgICAgIC8vIEFkZCBgZXJyb3JgIGluc3RlYWQgaWYgdGhlIG1heGltdW0gYmxvY2txdW90ZSBuZXN0aW5nIGRlcHRoIGlzIHBhc3NlZFxuICAgICAgICBpZiAoc3RhdGUuZm9ybWF0dGluZ1tpXSA9PT0gXCJxdW90ZVwiKSB7XG4gICAgICAgICAgaWYgKCFtb2RlQ2ZnLm1heEJsb2NrcXVvdGVEZXB0aCB8fCBtb2RlQ2ZnLm1heEJsb2NrcXVvdGVEZXB0aCA+PSBzdGF0ZS5xdW90ZSkge1xuICAgICAgICAgICAgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5mb3JtYXR0aW5nICsgXCItXCIgKyBzdGF0ZS5mb3JtYXR0aW5nW2ldICsgXCItXCIgKyBzdGF0ZS5xdW90ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlcy5wdXNoKFwiZXJyb3JcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnRhc2tPcGVuKSB7XG4gICAgICBzdHlsZXMucHVzaChcIm1ldGFcIik7XG4gICAgICByZXR1cm4gc3R5bGVzLmxlbmd0aCA/IHN0eWxlcy5qb2luKCcgJykgOiBudWxsO1xuICAgIH1cbiAgICBpZiAoc3RhdGUudGFza0Nsb3NlZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJwcm9wZXJ0eVwiKTtcbiAgICAgIHJldHVybiBzdHlsZXMubGVuZ3RoID8gc3R5bGVzLmpvaW4oJyAnKSA6IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmxpbmtIcmVmKSB7XG4gICAgICBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmxpbmtIcmVmLCBcInVybFwiKTtcbiAgICB9IGVsc2UgeyAvLyBPbmx5IGFwcGx5IGlubGluZSBzdHlsZXMgdG8gbm9uLXVybCB0ZXh0XG4gICAgICBpZiAoc3RhdGUuc3Ryb25nKSB7IHN0eWxlcy5wdXNoKHRva2VuVHlwZXMuc3Ryb25nKTsgfVxuICAgICAgaWYgKHN0YXRlLmVtKSB7IHN0eWxlcy5wdXNoKHRva2VuVHlwZXMuZW0pOyB9XG4gICAgICBpZiAoc3RhdGUuc3RyaWtldGhyb3VnaCkgeyBzdHlsZXMucHVzaCh0b2tlblR5cGVzLnN0cmlrZXRocm91Z2gpOyB9XG4gICAgICBpZiAoc3RhdGUuZW1vamkpIHsgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5lbW9qaSk7IH1cbiAgICAgIGlmIChzdGF0ZS5saW5rVGV4dCkgeyBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmxpbmtUZXh0KTsgfVxuICAgICAgaWYgKHN0YXRlLmNvZGUpIHsgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5jb2RlKTsgfVxuICAgICAgaWYgKHN0YXRlLmltYWdlKSB7IHN0eWxlcy5wdXNoKHRva2VuVHlwZXMuaW1hZ2UpOyB9XG4gICAgICBpZiAoc3RhdGUuaW1hZ2VBbHRUZXh0KSB7IHN0eWxlcy5wdXNoKHRva2VuVHlwZXMuaW1hZ2VBbHRUZXh0LCBcImxpbmtcIik7IH1cbiAgICAgIGlmIChzdGF0ZS5pbWFnZU1hcmtlcikgeyBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmltYWdlTWFya2VyKTsgfVxuICAgIH1cblxuICAgIGlmIChzdGF0ZS5oZWFkZXIpIHsgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5oZWFkZXIsIHRva2VuVHlwZXMuaGVhZGVyICsgXCItXCIgKyBzdGF0ZS5oZWFkZXIpOyB9XG5cbiAgICBpZiAoc3RhdGUucXVvdGUpIHtcbiAgICAgIHN0eWxlcy5wdXNoKHRva2VuVHlwZXMucXVvdGUpO1xuXG4gICAgICAvLyBBZGQgYHF1b3RlLSNgIHdoZXJlIHRoZSBtYXhpbXVtIGZvciBgI2AgaXMgbW9kZUNmZy5tYXhCbG9ja3F1b3RlRGVwdGhcbiAgICAgIGlmICghbW9kZUNmZy5tYXhCbG9ja3F1b3RlRGVwdGggfHwgbW9kZUNmZy5tYXhCbG9ja3F1b3RlRGVwdGggPj0gc3RhdGUucXVvdGUpIHtcbiAgICAgICAgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5xdW90ZSArIFwiLVwiICsgc3RhdGUucXVvdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVzLnB1c2godG9rZW5UeXBlcy5xdW90ZSArIFwiLVwiICsgbW9kZUNmZy5tYXhCbG9ja3F1b3RlRGVwdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGF0ZS5saXN0ICE9PSBmYWxzZSkge1xuICAgICAgdmFyIGxpc3RNb2QgPSAoc3RhdGUubGlzdFN0YWNrLmxlbmd0aCAtIDEpICUgMztcbiAgICAgIGlmICghbGlzdE1vZCkge1xuICAgICAgICBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmxpc3QxKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdE1vZCA9PT0gMSkge1xuICAgICAgICBzdHlsZXMucHVzaCh0b2tlblR5cGVzLmxpc3QyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlcy5wdXNoKHRva2VuVHlwZXMubGlzdDMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGF0ZS50cmFpbGluZ1NwYWNlTmV3TGluZSkge1xuICAgICAgc3R5bGVzLnB1c2goXCJ0cmFpbGluZy1zcGFjZS1uZXctbGluZVwiKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnRyYWlsaW5nU3BhY2UpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwidHJhaWxpbmctc3BhY2UtXCIgKyAoc3RhdGUudHJhaWxpbmdTcGFjZSAlIDIgPyBcImFcIiA6IFwiYlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlcy5sZW5ndGggPyBzdHlsZXMuam9pbignICcpIDogbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVRleHQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2godGV4dFJFLCB0cnVlKSkge1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5saW5lTm9ybWFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS50ZXh0KHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmICh0eXBlb2Ygc3R5bGUgIT09ICd1bmRlZmluZWQnKVxuICAgICAgcmV0dXJuIHN0eWxlO1xuXG4gICAgaWYgKHN0YXRlLmxpc3QpIHsgLy8gTGlzdCBtYXJrZXIgKCosICssIC0sIDEuLCBldGMpXG4gICAgICBzdGF0ZS5saXN0ID0gbnVsbDtcbiAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUudGFza0xpc3QpIHtcbiAgICAgIHZhciB0YXNrT3BlbiA9IHN0cmVhbS5tYXRjaCh0YXNrTGlzdFJFLCB0cnVlKVsxXSA9PT0gXCIgXCI7XG4gICAgICBpZiAodGFza09wZW4pIHN0YXRlLnRhc2tPcGVuID0gdHJ1ZTtcbiAgICAgIGVsc2Ugc3RhdGUudGFza0Nsb3NlZCA9IHRydWU7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJ0YXNrXCI7XG4gICAgICBzdGF0ZS50YXNrTGlzdCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH1cblxuICAgIHN0YXRlLnRhc2tPcGVuID0gZmFsc2U7XG4gICAgc3RhdGUudGFza0Nsb3NlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHN0YXRlLmhlYWRlciAmJiBzdHJlYW0ubWF0Y2goL14jKyQvLCB0cnVlKSkge1xuICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwiaGVhZGVyXCI7XG4gICAgICByZXR1cm4gZ2V0VHlwZShzdGF0ZSk7XG4gICAgfVxuXG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAgIC8vIE1hdGNoZXMgbGluayB0aXRsZXMgcHJlc2VudCBvbiBuZXh0IGxpbmVcbiAgICBpZiAoc3RhdGUubGlua1RpdGxlKSB7XG4gICAgICBzdGF0ZS5saW5rVGl0bGUgPSBmYWxzZTtcbiAgICAgIHZhciBtYXRjaENoID0gY2g7XG4gICAgICBpZiAoY2ggPT09ICcoJykge1xuICAgICAgICBtYXRjaENoID0gJyknO1xuICAgICAgfVxuICAgICAgbWF0Y2hDaCA9IChtYXRjaENoKycnKS5yZXBsYWNlKC8oWy4/KiteXFxbXFxdXFxcXCgpe318LV0pL2csIFwiXFxcXCQxXCIpO1xuICAgICAgdmFyIHJlZ2V4ID0gJ15cXFxccyooPzpbXicgKyBtYXRjaENoICsgJ1xcXFxcXFxcXSt8XFxcXFxcXFxcXFxcXFxcXHxcXFxcXFxcXC4pJyArIG1hdGNoQ2g7XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKG5ldyBSZWdFeHAocmVnZXgpLCB0cnVlKSkge1xuICAgICAgICByZXR1cm4gdG9rZW5UeXBlcy5saW5rSHJlZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIGJsb2NrIGlzIGNoYW5nZWQsIGl0IG1heSBuZWVkIHRvIGJlIHVwZGF0ZWQgaW4gR0ZNIG1vZGVcbiAgICBpZiAoY2ggPT09ICdgJykge1xuICAgICAgdmFyIHByZXZpb3VzRm9ybWF0dGluZyA9IHN0YXRlLmZvcm1hdHRpbmc7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJjb2RlXCI7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoJ2AnKTtcbiAgICAgIHZhciBjb3VudCA9IHN0cmVhbS5jdXJyZW50KCkubGVuZ3RoXG4gICAgICBpZiAoc3RhdGUuY29kZSA9PSAwICYmICghc3RhdGUucXVvdGUgfHwgY291bnQgPT0gMSkpIHtcbiAgICAgICAgc3RhdGUuY29kZSA9IGNvdW50XG4gICAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKVxuICAgICAgfSBlbHNlIGlmIChjb3VudCA9PSBzdGF0ZS5jb2RlKSB7IC8vIE11c3QgYmUgZXhhY3RcbiAgICAgICAgdmFyIHQgPSBnZXRUeXBlKHN0YXRlKVxuICAgICAgICBzdGF0ZS5jb2RlID0gMFxuICAgICAgICByZXR1cm4gdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUuZm9ybWF0dGluZyA9IHByZXZpb3VzRm9ybWF0dGluZ1xuICAgICAgICByZXR1cm4gZ2V0VHlwZShzdGF0ZSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0YXRlLmNvZGUpIHtcbiAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlKHN0YXRlKTtcbiAgICAgICAgdmFyIGZvcm1hdHRpbmdFc2NhcGUgPSB0b2tlblR5cGVzLmZvcm1hdHRpbmcgKyBcIi1lc2NhcGVcIjtcbiAgICAgICAgcmV0dXJuIHR5cGUgPyB0eXBlICsgXCIgXCIgKyBmb3JtYXR0aW5nRXNjYXBlIDogZm9ybWF0dGluZ0VzY2FwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2ggPT09ICchJyAmJiBzdHJlYW0ubWF0Y2goL1xcW1teXFxdXSpcXF0gPyg/OlxcKHxcXFspLywgZmFsc2UpKSB7XG4gICAgICBzdGF0ZS5pbWFnZU1hcmtlciA9IHRydWU7XG4gICAgICBzdGF0ZS5pbWFnZSA9IHRydWU7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJpbWFnZVwiO1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChjaCA9PT0gJ1snICYmIHN0YXRlLmltYWdlTWFya2VyICYmIHN0cmVhbS5tYXRjaCgvW15cXF1dKlxcXShcXCguKj9cXCl8ID9cXFsuKj9cXF0pLywgZmFsc2UpKSB7XG4gICAgICBzdGF0ZS5pbWFnZU1hcmtlciA9IGZhbHNlO1xuICAgICAgc3RhdGUuaW1hZ2VBbHRUZXh0ID0gdHJ1ZVxuICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwiaW1hZ2VcIjtcbiAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoY2ggPT09ICddJyAmJiBzdGF0ZS5pbWFnZUFsdFRleHQpIHtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHN0YXRlLmZvcm1hdHRpbmcgPSBcImltYWdlXCI7XG4gICAgICB2YXIgdHlwZSA9IGdldFR5cGUoc3RhdGUpO1xuICAgICAgc3RhdGUuaW1hZ2VBbHRUZXh0ID0gZmFsc2U7XG4gICAgICBzdGF0ZS5pbWFnZSA9IGZhbHNlO1xuICAgICAgc3RhdGUuaW5saW5lID0gc3RhdGUuZiA9IGxpbmtIcmVmO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGNoID09PSAnWycgJiYgIXN0YXRlLmltYWdlKSB7XG4gICAgICBzdGF0ZS5saW5rVGV4dCA9IHRydWU7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJsaW5rXCI7XG4gICAgICByZXR1cm4gZ2V0VHlwZShzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoID09PSAnXScgJiYgc3RhdGUubGlua1RleHQpIHtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHN0YXRlLmZvcm1hdHRpbmcgPSBcImxpbmtcIjtcbiAgICAgIHZhciB0eXBlID0gZ2V0VHlwZShzdGF0ZSk7XG4gICAgICBzdGF0ZS5saW5rVGV4dCA9IGZhbHNlO1xuICAgICAgc3RhdGUuaW5saW5lID0gc3RhdGUuZiA9IHN0cmVhbS5tYXRjaCgvXFwoLio/XFwpfCA/XFxbLio/XFxdLywgZmFsc2UpID8gbGlua0hyZWYgOiBpbmxpbmVOb3JtYWxcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGlmIChjaCA9PT0gJzwnICYmIHN0cmVhbS5tYXRjaCgvXihodHRwcz98ZnRwcz8pOlxcL1xcLyg/OlteXFxcXD5dfFxcXFwuKSs+LywgZmFsc2UpKSB7XG4gICAgICBzdGF0ZS5mID0gc3RhdGUuaW5saW5lID0gbGlua0lubGluZTtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHN0YXRlLmZvcm1hdHRpbmcgPSBcImxpbmtcIjtcbiAgICAgIHZhciB0eXBlID0gZ2V0VHlwZShzdGF0ZSk7XG4gICAgICBpZiAodHlwZSl7XG4gICAgICAgIHR5cGUgKz0gXCIgXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlICsgdG9rZW5UeXBlcy5saW5rSW5saW5lO1xuICAgIH1cblxuICAgIGlmIChjaCA9PT0gJzwnICYmIHN0cmVhbS5tYXRjaCgvXltePiBcXFxcXStAKD86W15cXFxcPl18XFxcXC4pKz4vLCBmYWxzZSkpIHtcbiAgICAgIHN0YXRlLmYgPSBzdGF0ZS5pbmxpbmUgPSBsaW5rSW5saW5lO1xuICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwibGlua1wiO1xuICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlKHN0YXRlKTtcbiAgICAgIGlmICh0eXBlKXtcbiAgICAgICAgdHlwZSArPSBcIiBcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGUgPSBcIlwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGUgKyB0b2tlblR5cGVzLmxpbmtFbWFpbDtcbiAgICB9XG5cbiAgICBpZiAobW9kZUNmZy54bWwgJiYgY2ggPT09ICc8JyAmJiBzdHJlYW0ubWF0Y2goL14oIS0tfFthLXpdW2EtejAtOS1dKig/OlxccytbYS16XzouXFwtXSsoPzpcXHMqPVxccypbXj5dKyk/KSpcXHMqPikvaSwgZmFsc2UpKSB7XG4gICAgICB2YXIgZW5kID0gc3RyZWFtLnN0cmluZy5pbmRleE9mKFwiPlwiLCBzdHJlYW0ucG9zKTtcbiAgICAgIGlmIChlbmQgIT0gLTEpIHtcbiAgICAgICAgdmFyIGF0dHMgPSBzdHJlYW0uc3RyaW5nLnN1YnN0cmluZyhzdHJlYW0uc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmICgvbWFya2Rvd25cXHMqPVxccyooJ3xcIil7MCwxfTEoJ3xcIil7MCwxfS8udGVzdChhdHRzKSkgc3RhdGUubWRfaW5zaWRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHN0cmVhbS5iYWNrVXAoMSk7XG4gICAgICBzdGF0ZS5odG1sU3RhdGUgPSBDb2RlTWlycm9yLnN0YXJ0U3RhdGUoaHRtbE1vZGUpO1xuICAgICAgcmV0dXJuIHN3aXRjaEJsb2NrKHN0cmVhbSwgc3RhdGUsIGh0bWxCbG9jayk7XG4gICAgfVxuXG4gICAgaWYgKG1vZGVDZmcueG1sICYmIGNoID09PSAnPCcgJiYgc3RyZWFtLm1hdGNoKC9eXFwvXFx3Kj8+LykpIHtcbiAgICAgIHN0YXRlLm1kX2luc2lkZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIFwidGFnXCI7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCIqXCIgfHwgY2ggPT09IFwiX1wiKSB7XG4gICAgICB2YXIgbGVuID0gMSwgYmVmb3JlID0gc3RyZWFtLnBvcyA9PSAxID8gXCIgXCIgOiBzdHJlYW0uc3RyaW5nLmNoYXJBdChzdHJlYW0ucG9zIC0gMilcbiAgICAgIHdoaWxlIChsZW4gPCAzICYmIHN0cmVhbS5lYXQoY2gpKSBsZW4rK1xuICAgICAgdmFyIGFmdGVyID0gc3RyZWFtLnBlZWsoKSB8fCBcIiBcIlxuICAgICAgLy8gU2VlIGh0dHA6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMjcvI2VtcGhhc2lzLWFuZC1zdHJvbmctZW1waGFzaXNcbiAgICAgIHZhciBsZWZ0RmxhbmtpbmcgPSAhL1xccy8udGVzdChhZnRlcikgJiYgKCFwdW5jdHVhdGlvbi50ZXN0KGFmdGVyKSB8fCAvXFxzLy50ZXN0KGJlZm9yZSkgfHwgcHVuY3R1YXRpb24udGVzdChiZWZvcmUpKVxuICAgICAgdmFyIHJpZ2h0RmxhbmtpbmcgPSAhL1xccy8udGVzdChiZWZvcmUpICYmICghcHVuY3R1YXRpb24udGVzdChiZWZvcmUpIHx8IC9cXHMvLnRlc3QoYWZ0ZXIpIHx8IHB1bmN0dWF0aW9uLnRlc3QoYWZ0ZXIpKVxuICAgICAgdmFyIHNldEVtID0gbnVsbCwgc2V0U3Ryb25nID0gbnVsbFxuICAgICAgaWYgKGxlbiAlIDIpIHsgLy8gRW1cbiAgICAgICAgaWYgKCFzdGF0ZS5lbSAmJiBsZWZ0RmxhbmtpbmcgJiYgKGNoID09PSBcIipcIiB8fCAhcmlnaHRGbGFua2luZyB8fCBwdW5jdHVhdGlvbi50ZXN0KGJlZm9yZSkpKVxuICAgICAgICAgIHNldEVtID0gdHJ1ZVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5lbSA9PSBjaCAmJiByaWdodEZsYW5raW5nICYmIChjaCA9PT0gXCIqXCIgfHwgIWxlZnRGbGFua2luZyB8fCBwdW5jdHVhdGlvbi50ZXN0KGFmdGVyKSkpXG4gICAgICAgICAgc2V0RW0gPSBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKGxlbiA+IDEpIHsgLy8gU3Ryb25nXG4gICAgICAgIGlmICghc3RhdGUuc3Ryb25nICYmIGxlZnRGbGFua2luZyAmJiAoY2ggPT09IFwiKlwiIHx8ICFyaWdodEZsYW5raW5nIHx8IHB1bmN0dWF0aW9uLnRlc3QoYmVmb3JlKSkpXG4gICAgICAgICAgc2V0U3Ryb25nID0gdHJ1ZVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5zdHJvbmcgPT0gY2ggJiYgcmlnaHRGbGFua2luZyAmJiAoY2ggPT09IFwiKlwiIHx8ICFsZWZ0RmxhbmtpbmcgfHwgcHVuY3R1YXRpb24udGVzdChhZnRlcikpKVxuICAgICAgICAgIHNldFN0cm9uZyA9IGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAoc2V0U3Ryb25nICE9IG51bGwgfHwgc2V0RW0gIT0gbnVsbCkge1xuICAgICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gc2V0RW0gPT0gbnVsbCA/IFwic3Ryb25nXCIgOiBzZXRTdHJvbmcgPT0gbnVsbCA/IFwiZW1cIiA6IFwic3Ryb25nIGVtXCJcbiAgICAgICAgaWYgKHNldEVtID09PSB0cnVlKSBzdGF0ZS5lbSA9IGNoXG4gICAgICAgIGlmIChzZXRTdHJvbmcgPT09IHRydWUpIHN0YXRlLnN0cm9uZyA9IGNoXG4gICAgICAgIHZhciB0ID0gZ2V0VHlwZShzdGF0ZSlcbiAgICAgICAgaWYgKHNldEVtID09PSBmYWxzZSkgc3RhdGUuZW0gPSBmYWxzZVxuICAgICAgICBpZiAoc2V0U3Ryb25nID09PSBmYWxzZSkgc3RhdGUuc3Ryb25nID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIHRcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoID09PSAnICcpIHtcbiAgICAgIGlmIChzdHJlYW0uZWF0KCcqJykgfHwgc3RyZWFtLmVhdCgnXycpKSB7IC8vIFByb2JhYmx5IHN1cnJvdW5kZWQgYnkgc3BhY2VzXG4gICAgICAgIGlmIChzdHJlYW0ucGVlaygpID09PSAnICcpIHsgLy8gU3Vycm91bmRlZCBieSBzcGFjZXMsIGlnbm9yZVxuICAgICAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gTm90IHN1cnJvdW5kZWQgYnkgc3BhY2VzLCBiYWNrIHVwIHBvaW50ZXJcbiAgICAgICAgICBzdHJlYW0uYmFja1VwKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZGVDZmcuc3RyaWtldGhyb3VnaCkge1xuICAgICAgaWYgKGNoID09PSAnficgJiYgc3RyZWFtLmVhdFdoaWxlKGNoKSkge1xuICAgICAgICBpZiAoc3RhdGUuc3RyaWtldGhyb3VnaCkgey8vIFJlbW92ZSBzdHJpa2V0aHJvdWdoXG4gICAgICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwic3RyaWtldGhyb3VnaFwiO1xuICAgICAgICAgIHZhciB0ID0gZ2V0VHlwZShzdGF0ZSk7XG4gICAgICAgICAgc3RhdGUuc3RyaWtldGhyb3VnaCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvXlteXFxzXS8sIGZhbHNlKSkgey8vIEFkZCBzdHJpa2V0aHJvdWdoXG4gICAgICAgICAgc3RhdGUuc3RyaWtldGhyb3VnaCA9IHRydWU7XG4gICAgICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwic3RyaWtldGhyb3VnaFwiO1xuICAgICAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJyAnKSB7XG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL15+fi8sIHRydWUpKSB7IC8vIFByb2JhYmx5IHN1cnJvdW5kZWQgYnkgc3BhY2VcbiAgICAgICAgICBpZiAoc3RyZWFtLnBlZWsoKSA9PT0gJyAnKSB7IC8vIFN1cnJvdW5kZWQgYnkgc3BhY2VzLCBpZ25vcmVcbiAgICAgICAgICAgIHJldHVybiBnZXRUeXBlKHN0YXRlKTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBOb3Qgc3Vycm91bmRlZCBieSBzcGFjZXMsIGJhY2sgdXAgcG9pbnRlclxuICAgICAgICAgICAgc3RyZWFtLmJhY2tVcCgyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kZUNmZy5lbW9qaSAmJiBjaCA9PT0gXCI6XCIgJiYgc3RyZWFtLm1hdGNoKC9eW2Etel9cXGQrLV0rOi8pKSB7XG4gICAgICBzdGF0ZS5lbW9qaSA9IHRydWU7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJlbW9qaVwiO1xuICAgICAgdmFyIHJldFR5cGUgPSBnZXRUeXBlKHN0YXRlKTtcbiAgICAgIHN0YXRlLmVtb2ppID0gZmFsc2U7XG4gICAgICByZXR1cm4gcmV0VHlwZTtcbiAgICB9XG5cbiAgICBpZiAoY2ggPT09ICcgJykge1xuICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvICskLywgZmFsc2UpKSB7XG4gICAgICAgIHN0YXRlLnRyYWlsaW5nU3BhY2UrKztcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUudHJhaWxpbmdTcGFjZSkge1xuICAgICAgICBzdGF0ZS50cmFpbGluZ1NwYWNlTmV3TGluZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlua0lubGluZShzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAgIGlmIChjaCA9PT0gXCI+XCIpIHtcbiAgICAgIHN0YXRlLmYgPSBzdGF0ZS5pbmxpbmUgPSBpbmxpbmVOb3JtYWw7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJsaW5rXCI7XG4gICAgICB2YXIgdHlwZSA9IGdldFR5cGUoc3RhdGUpO1xuICAgICAgaWYgKHR5cGUpe1xuICAgICAgICB0eXBlICs9IFwiIFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZSA9IFwiXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZSArIHRva2VuVHlwZXMubGlua0lubGluZTtcbiAgICB9XG5cbiAgICBzdHJlYW0ubWF0Y2goL15bXj5dKy8sIHRydWUpO1xuXG4gICAgcmV0dXJuIHRva2VuVHlwZXMubGlua0lubGluZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmtIcmVmKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAvLyBDaGVjayBpZiBzcGFjZSwgYW5kIHJldHVybiBOVUxMIGlmIHNvICh0byBhdm9pZCBtYXJraW5nIHRoZSBzcGFjZSlcbiAgICBpZihzdHJlYW0uZWF0U3BhY2UoKSl7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcbiAgICBpZiAoY2ggPT09ICcoJyB8fCBjaCA9PT0gJ1snKSB7XG4gICAgICBzdGF0ZS5mID0gc3RhdGUuaW5saW5lID0gZ2V0TGlua0hyZWZJbnNpZGUoY2ggPT09IFwiKFwiID8gXCIpXCIgOiBcIl1cIik7XG4gICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJsaW5rLXN0cmluZ1wiO1xuICAgICAgc3RhdGUubGlua0hyZWYgPSB0cnVlO1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gJ2Vycm9yJztcbiAgfVxuXG4gIHZhciBsaW5rUkUgPSB7XG4gICAgXCIpXCI6IC9eKD86W15cXFxcXFwoXFwpXXxcXFxcLnxcXCgoPzpbXlxcXFxcXChcXCldfFxcXFwuKSpcXCkpKj8oPz1cXCkpLyxcbiAgICBcIl1cIjogL14oPzpbXlxcXFxcXFtcXF1dfFxcXFwufFxcWyg/OlteXFxcXFxcW1xcXV18XFxcXC4pKlxcXSkqPyg/PVxcXSkvXG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaW5rSHJlZkluc2lkZShlbmRDaGFyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG5cbiAgICAgIGlmIChjaCA9PT0gZW5kQ2hhcikge1xuICAgICAgICBzdGF0ZS5mID0gc3RhdGUuaW5saW5lID0gaW5saW5lTm9ybWFsO1xuICAgICAgICBpZiAobW9kZUNmZy5oaWdobGlnaHRGb3JtYXR0aW5nKSBzdGF0ZS5mb3JtYXR0aW5nID0gXCJsaW5rLXN0cmluZ1wiO1xuICAgICAgICB2YXIgcmV0dXJuU3RhdGUgPSBnZXRUeXBlKHN0YXRlKTtcbiAgICAgICAgc3RhdGUubGlua0hyZWYgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHJldHVyblN0YXRlO1xuICAgICAgfVxuXG4gICAgICBzdHJlYW0ubWF0Y2gobGlua1JFW2VuZENoYXJdKVxuICAgICAgc3RhdGUubGlua0hyZWYgPSB0cnVlO1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmb290bm90ZUxpbmsoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL14oW15cXF1cXFxcXXxcXFxcLikqXFxdOi8sIGZhbHNlKSkge1xuICAgICAgc3RhdGUuZiA9IGZvb3Rub3RlTGlua0luc2lkZTtcbiAgICAgIHN0cmVhbS5uZXh0KCk7IC8vIENvbnN1bWUgW1xuICAgICAgaWYgKG1vZGVDZmcuaGlnaGxpZ2h0Rm9ybWF0dGluZykgc3RhdGUuZm9ybWF0dGluZyA9IFwibGlua1wiO1xuICAgICAgc3RhdGUubGlua1RleHQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGdldFR5cGUoc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3dpdGNoSW5saW5lKHN0cmVhbSwgc3RhdGUsIGlubGluZU5vcm1hbCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb290bm90ZUxpbmtJbnNpZGUoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXF06LywgdHJ1ZSkpIHtcbiAgICAgIHN0YXRlLmYgPSBzdGF0ZS5pbmxpbmUgPSBmb290bm90ZVVybDtcbiAgICAgIGlmIChtb2RlQ2ZnLmhpZ2hsaWdodEZvcm1hdHRpbmcpIHN0YXRlLmZvcm1hdHRpbmcgPSBcImxpbmtcIjtcbiAgICAgIHZhciByZXR1cm5UeXBlID0gZ2V0VHlwZShzdGF0ZSk7XG4gICAgICBzdGF0ZS5saW5rVGV4dCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJldHVyblR5cGU7XG4gICAgfVxuXG4gICAgc3RyZWFtLm1hdGNoKC9eKFteXFxdXFxcXF18XFxcXC4pKy8sIHRydWUpO1xuXG4gICAgcmV0dXJuIHRva2VuVHlwZXMubGlua1RleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb290bm90ZVVybChzdHJlYW0sIHN0YXRlKSB7XG4gICAgLy8gQ2hlY2sgaWYgc3BhY2UsIGFuZCByZXR1cm4gTlVMTCBpZiBzbyAodG8gYXZvaWQgbWFya2luZyB0aGUgc3BhY2UpXG4gICAgaWYoc3RyZWFtLmVhdFNwYWNlKCkpe1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIE1hdGNoIFVSTFxuICAgIHN0cmVhbS5tYXRjaCgvXlteXFxzXSsvLCB0cnVlKTtcbiAgICAvLyBDaGVjayBmb3IgbGluayB0aXRsZVxuICAgIGlmIChzdHJlYW0ucGVlaygpID09PSB1bmRlZmluZWQpIHsgLy8gRW5kIG9mIGxpbmUsIHNldCBmbGFnIHRvIGNoZWNrIG5leHQgbGluZVxuICAgICAgc3RhdGUubGlua1RpdGxlID0gdHJ1ZTtcbiAgICB9IGVsc2UgeyAvLyBNb3JlIGNvbnRlbnQgb24gbGluZSwgY2hlY2sgaWYgbGluayB0aXRsZVxuICAgICAgc3RyZWFtLm1hdGNoKC9eKD86XFxzKyg/OlwiKD86W15cIlxcXFxdfFxcXFxcXFxcfFxcXFwuKStcInwnKD86W14nXFxcXF18XFxcXFxcXFx8XFxcXC4pKyd8XFwoKD86W14pXFxcXF18XFxcXFxcXFx8XFxcXC4pK1xcKSkpPy8sIHRydWUpO1xuICAgIH1cbiAgICBzdGF0ZS5mID0gc3RhdGUuaW5saW5lID0gaW5saW5lTm9ybWFsO1xuICAgIHJldHVybiB0b2tlblR5cGVzLmxpbmtIcmVmICsgXCIgdXJsXCI7XG4gIH1cblxuICB2YXIgbW9kZSA9IHtcbiAgICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGY6IGJsb2NrTm9ybWFsLFxuXG4gICAgICAgIHByZXZMaW5lOiB7c3RyZWFtOiBudWxsfSxcbiAgICAgICAgdGhpc0xpbmU6IHtzdHJlYW06IG51bGx9LFxuXG4gICAgICAgIGJsb2NrOiBibG9ja05vcm1hbCxcbiAgICAgICAgaHRtbFN0YXRlOiBudWxsLFxuICAgICAgICBpbmRlbnRhdGlvbjogMCxcblxuICAgICAgICBpbmxpbmU6IGlubGluZU5vcm1hbCxcbiAgICAgICAgdGV4dDogaGFuZGxlVGV4dCxcblxuICAgICAgICBmb3JtYXR0aW5nOiBmYWxzZSxcbiAgICAgICAgbGlua1RleHQ6IGZhbHNlLFxuICAgICAgICBsaW5rSHJlZjogZmFsc2UsXG4gICAgICAgIGxpbmtUaXRsZTogZmFsc2UsXG4gICAgICAgIGNvZGU6IDAsXG4gICAgICAgIGVtOiBmYWxzZSxcbiAgICAgICAgc3Ryb25nOiBmYWxzZSxcbiAgICAgICAgaGVhZGVyOiAwLFxuICAgICAgICBzZXRleHQ6IDAsXG4gICAgICAgIGhyOiBmYWxzZSxcbiAgICAgICAgdGFza0xpc3Q6IGZhbHNlLFxuICAgICAgICBsaXN0OiBmYWxzZSxcbiAgICAgICAgbGlzdFN0YWNrOiBbXSxcbiAgICAgICAgcXVvdGU6IDAsXG4gICAgICAgIHRyYWlsaW5nU3BhY2U6IDAsXG4gICAgICAgIHRyYWlsaW5nU3BhY2VOZXdMaW5lOiBmYWxzZSxcbiAgICAgICAgc3RyaWtldGhyb3VnaDogZmFsc2UsXG4gICAgICAgIGVtb2ppOiBmYWxzZSxcbiAgICAgICAgZmVuY2VkRW5kUkU6IG51bGxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGNvcHlTdGF0ZTogZnVuY3Rpb24ocykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZjogcy5mLFxuXG4gICAgICAgIHByZXZMaW5lOiBzLnByZXZMaW5lLFxuICAgICAgICB0aGlzTGluZTogcy50aGlzTGluZSxcblxuICAgICAgICBibG9jazogcy5ibG9jayxcbiAgICAgICAgaHRtbFN0YXRlOiBzLmh0bWxTdGF0ZSAmJiBDb2RlTWlycm9yLmNvcHlTdGF0ZShodG1sTW9kZSwgcy5odG1sU3RhdGUpLFxuICAgICAgICBpbmRlbnRhdGlvbjogcy5pbmRlbnRhdGlvbixcblxuICAgICAgICBsb2NhbE1vZGU6IHMubG9jYWxNb2RlLFxuICAgICAgICBsb2NhbFN0YXRlOiBzLmxvY2FsTW9kZSA/IENvZGVNaXJyb3IuY29weVN0YXRlKHMubG9jYWxNb2RlLCBzLmxvY2FsU3RhdGUpIDogbnVsbCxcblxuICAgICAgICBpbmxpbmU6IHMuaW5saW5lLFxuICAgICAgICB0ZXh0OiBzLnRleHQsXG4gICAgICAgIGZvcm1hdHRpbmc6IGZhbHNlLFxuICAgICAgICBsaW5rVGV4dDogcy5saW5rVGV4dCxcbiAgICAgICAgbGlua1RpdGxlOiBzLmxpbmtUaXRsZSxcbiAgICAgICAgbGlua0hyZWY6IHMubGlua0hyZWYsXG4gICAgICAgIGNvZGU6IHMuY29kZSxcbiAgICAgICAgZW06IHMuZW0sXG4gICAgICAgIHN0cm9uZzogcy5zdHJvbmcsXG4gICAgICAgIHN0cmlrZXRocm91Z2g6IHMuc3RyaWtldGhyb3VnaCxcbiAgICAgICAgZW1vamk6IHMuZW1vamksXG4gICAgICAgIGhlYWRlcjogcy5oZWFkZXIsXG4gICAgICAgIHNldGV4dDogcy5zZXRleHQsXG4gICAgICAgIGhyOiBzLmhyLFxuICAgICAgICB0YXNrTGlzdDogcy50YXNrTGlzdCxcbiAgICAgICAgbGlzdDogcy5saXN0LFxuICAgICAgICBsaXN0U3RhY2s6IHMubGlzdFN0YWNrLnNsaWNlKDApLFxuICAgICAgICBxdW90ZTogcy5xdW90ZSxcbiAgICAgICAgaW5kZW50ZWRDb2RlOiBzLmluZGVudGVkQ29kZSxcbiAgICAgICAgdHJhaWxpbmdTcGFjZTogcy50cmFpbGluZ1NwYWNlLFxuICAgICAgICB0cmFpbGluZ1NwYWNlTmV3TGluZTogcy50cmFpbGluZ1NwYWNlTmV3TGluZSxcbiAgICAgICAgbWRfaW5zaWRlOiBzLm1kX2luc2lkZSxcbiAgICAgICAgZmVuY2VkRW5kUkU6IHMuZmVuY2VkRW5kUkVcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG5cbiAgICAgIC8vIFJlc2V0IHN0YXRlLmZvcm1hdHRpbmdcbiAgICAgIHN0YXRlLmZvcm1hdHRpbmcgPSBmYWxzZTtcblxuICAgICAgaWYgKHN0cmVhbSAhPSBzdGF0ZS50aGlzTGluZS5zdHJlYW0pIHtcbiAgICAgICAgc3RhdGUuaGVhZGVyID0gMDtcbiAgICAgICAgc3RhdGUuaHIgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKC9eXFxzKiQvLCB0cnVlKSkge1xuICAgICAgICAgIGJsYW5rTGluZShzdGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5wcmV2TGluZSA9IHN0YXRlLnRoaXNMaW5lXG4gICAgICAgIHN0YXRlLnRoaXNMaW5lID0ge3N0cmVhbTogc3RyZWFtfVxuXG4gICAgICAgIC8vIFJlc2V0IHN0YXRlLnRhc2tMaXN0XG4gICAgICAgIHN0YXRlLnRhc2tMaXN0ID0gZmFsc2U7XG5cbiAgICAgICAgLy8gUmVzZXQgc3RhdGUudHJhaWxpbmdTcGFjZVxuICAgICAgICBzdGF0ZS50cmFpbGluZ1NwYWNlID0gMDtcbiAgICAgICAgc3RhdGUudHJhaWxpbmdTcGFjZU5ld0xpbmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXN0YXRlLmxvY2FsU3RhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5mID0gc3RhdGUuYmxvY2s7XG4gICAgICAgICAgaWYgKHN0YXRlLmYgIT0gaHRtbEJsb2NrKSB7XG4gICAgICAgICAgICB2YXIgaW5kZW50YXRpb24gPSBzdHJlYW0ubWF0Y2goL15cXHMqLywgdHJ1ZSlbMF0ucmVwbGFjZSgvXFx0L2csIGV4cGFuZGVkVGFiKS5sZW5ndGg7XG4gICAgICAgICAgICBzdGF0ZS5pbmRlbnRhdGlvbiA9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgc3RhdGUuaW5kZW50YXRpb25EaWZmID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpbmRlbnRhdGlvbiA+IDApIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlLmYoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSxcblxuICAgIGlubmVyTW9kZTogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIGlmIChzdGF0ZS5ibG9jayA9PSBodG1sQmxvY2spIHJldHVybiB7c3RhdGU6IHN0YXRlLmh0bWxTdGF0ZSwgbW9kZTogaHRtbE1vZGV9O1xuICAgICAgaWYgKHN0YXRlLmxvY2FsU3RhdGUpIHJldHVybiB7c3RhdGU6IHN0YXRlLmxvY2FsU3RhdGUsIG1vZGU6IHN0YXRlLmxvY2FsTW9kZX07XG4gICAgICByZXR1cm4ge3N0YXRlOiBzdGF0ZSwgbW9kZTogbW9kZX07XG4gICAgfSxcblxuICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlciwgbGluZSkge1xuICAgICAgaWYgKHN0YXRlLmJsb2NrID09IGh0bWxCbG9jayAmJiBodG1sTW9kZS5pbmRlbnQpIHJldHVybiBodG1sTW9kZS5pbmRlbnQoc3RhdGUuaHRtbFN0YXRlLCB0ZXh0QWZ0ZXIsIGxpbmUpXG4gICAgICBpZiAoc3RhdGUubG9jYWxTdGF0ZSAmJiBzdGF0ZS5sb2NhbE1vZGUuaW5kZW50KSByZXR1cm4gc3RhdGUubG9jYWxNb2RlLmluZGVudChzdGF0ZS5sb2NhbFN0YXRlLCB0ZXh0QWZ0ZXIsIGxpbmUpXG4gICAgICByZXR1cm4gQ29kZU1pcnJvci5QYXNzXG4gICAgfSxcblxuICAgIGJsYW5rTGluZTogYmxhbmtMaW5lLFxuXG4gICAgZ2V0VHlwZTogZ2V0VHlwZSxcblxuICAgIGNsb3NlQnJhY2tldHM6IFwiKClbXXt9JydcXFwiXFxcImBgXCIsXG4gICAgZm9sZDogXCJtYXJrZG93blwiXG4gIH07XG4gIHJldHVybiBtb2RlO1xufSwgXCJ4bWxcIik7XG5cbkNvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQvbWFya2Rvd25cIiwgXCJtYXJrZG93blwiKTtcblxuQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwidGV4dC94LW1hcmtkb3duXCIsIFwibWFya2Rvd25cIik7XG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL21hcmtkb3duL21hcmtkb3duLmpzXG4vLyBtb2R1bGUgaWQgPSAxODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRVxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpKTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIENvbnRleHQoaW5kZW50ZWQsIGNvbHVtbiwgdHlwZSwgaW5mbywgYWxpZ24sIHByZXYpIHtcbiAgdGhpcy5pbmRlbnRlZCA9IGluZGVudGVkO1xuICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5pbmZvID0gaW5mbztcbiAgdGhpcy5hbGlnbiA9IGFsaWduO1xuICB0aGlzLnByZXYgPSBwcmV2O1xufVxuZnVuY3Rpb24gcHVzaENvbnRleHQoc3RhdGUsIGNvbCwgdHlwZSwgaW5mbykge1xuICB2YXIgaW5kZW50ID0gc3RhdGUuaW5kZW50ZWQ7XG4gIGlmIChzdGF0ZS5jb250ZXh0ICYmIHN0YXRlLmNvbnRleHQudHlwZSA9PSBcInN0YXRlbWVudFwiICYmIHR5cGUgIT0gXCJzdGF0ZW1lbnRcIilcbiAgICBpbmRlbnQgPSBzdGF0ZS5jb250ZXh0LmluZGVudGVkO1xuICByZXR1cm4gc3RhdGUuY29udGV4dCA9IG5ldyBDb250ZXh0KGluZGVudCwgY29sLCB0eXBlLCBpbmZvLCBudWxsLCBzdGF0ZS5jb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHBvcENvbnRleHQoc3RhdGUpIHtcbiAgdmFyIHQgPSBzdGF0ZS5jb250ZXh0LnR5cGU7XG4gIGlmICh0ID09IFwiKVwiIHx8IHQgPT0gXCJdXCIgfHwgdCA9PSBcIn1cIilcbiAgICBzdGF0ZS5pbmRlbnRlZCA9IHN0YXRlLmNvbnRleHQuaW5kZW50ZWQ7XG4gIHJldHVybiBzdGF0ZS5jb250ZXh0ID0gc3RhdGUuY29udGV4dC5wcmV2O1xufVxuXG5mdW5jdGlvbiB0eXBlQmVmb3JlKHN0cmVhbSwgc3RhdGUsIHBvcykge1xuICBpZiAoc3RhdGUucHJldlRva2VuID09IFwidmFyaWFibGVcIiB8fCBzdGF0ZS5wcmV2VG9rZW4gPT0gXCJ0eXBlXCIpIHJldHVybiB0cnVlO1xuICBpZiAoL1xcUyg/OlteLSBdPnxbKlxcXV0pXFxzKiR8XFwqJC8udGVzdChzdHJlYW0uc3RyaW5nLnNsaWNlKDAsIHBvcykpKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKHN0YXRlLnR5cGVBdEVuZE9mTGluZSAmJiBzdHJlYW0uY29sdW1uKCkgPT0gc3RyZWFtLmluZGVudGF0aW9uKCkpIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc1RvcFNjb3BlKGNvbnRleHQpIHtcbiAgZm9yICg7Oykge1xuICAgIGlmICghY29udGV4dCB8fCBjb250ZXh0LnR5cGUgPT0gXCJ0b3BcIikgcmV0dXJuIHRydWU7XG4gICAgaWYgKGNvbnRleHQudHlwZSA9PSBcIn1cIiAmJiBjb250ZXh0LnByZXYuaW5mbyAhPSBcIm5hbWVzcGFjZVwiKSByZXR1cm4gZmFsc2U7XG4gICAgY29udGV4dCA9IGNvbnRleHQucHJldjtcbiAgfVxufVxuXG5Db2RlTWlycm9yLmRlZmluZU1vZGUoXCJjbGlrZVwiLCBmdW5jdGlvbihjb25maWcsIHBhcnNlckNvbmZpZykge1xuICB2YXIgaW5kZW50VW5pdCA9IGNvbmZpZy5pbmRlbnRVbml0LFxuICAgICAgc3RhdGVtZW50SW5kZW50VW5pdCA9IHBhcnNlckNvbmZpZy5zdGF0ZW1lbnRJbmRlbnRVbml0IHx8IGluZGVudFVuaXQsXG4gICAgICBkb250QWxpZ25DYWxscyA9IHBhcnNlckNvbmZpZy5kb250QWxpZ25DYWxscyxcbiAgICAgIGtleXdvcmRzID0gcGFyc2VyQ29uZmlnLmtleXdvcmRzIHx8IHt9LFxuICAgICAgdHlwZXMgPSBwYXJzZXJDb25maWcudHlwZXMgfHwge30sXG4gICAgICBidWlsdGluID0gcGFyc2VyQ29uZmlnLmJ1aWx0aW4gfHwge30sXG4gICAgICBibG9ja0tleXdvcmRzID0gcGFyc2VyQ29uZmlnLmJsb2NrS2V5d29yZHMgfHwge30sXG4gICAgICBkZWZLZXl3b3JkcyA9IHBhcnNlckNvbmZpZy5kZWZLZXl3b3JkcyB8fCB7fSxcbiAgICAgIGF0b21zID0gcGFyc2VyQ29uZmlnLmF0b21zIHx8IHt9LFxuICAgICAgaG9va3MgPSBwYXJzZXJDb25maWcuaG9va3MgfHwge30sXG4gICAgICBtdWx0aUxpbmVTdHJpbmdzID0gcGFyc2VyQ29uZmlnLm11bHRpTGluZVN0cmluZ3MsXG4gICAgICBpbmRlbnRTdGF0ZW1lbnRzID0gcGFyc2VyQ29uZmlnLmluZGVudFN0YXRlbWVudHMgIT09IGZhbHNlLFxuICAgICAgaW5kZW50U3dpdGNoID0gcGFyc2VyQ29uZmlnLmluZGVudFN3aXRjaCAhPT0gZmFsc2UsXG4gICAgICBuYW1lc3BhY2VTZXBhcmF0b3IgPSBwYXJzZXJDb25maWcubmFtZXNwYWNlU2VwYXJhdG9yLFxuICAgICAgaXNQdW5jdHVhdGlvbkNoYXIgPSBwYXJzZXJDb25maWcuaXNQdW5jdHVhdGlvbkNoYXIgfHwgL1tcXFtcXF17fVxcKFxcKSw7XFw6XFwuXS8sXG4gICAgICBudW1iZXJTdGFydCA9IHBhcnNlckNvbmZpZy5udW1iZXJTdGFydCB8fCAvW1xcZFxcLl0vLFxuICAgICAgbnVtYmVyID0gcGFyc2VyQ29uZmlnLm51bWJlciB8fCAvXig/OjB4W2EtZlxcZF0rfDBiWzAxXSt8KD86XFxkK1xcLj9cXGQqfFxcLlxcZCspKD86ZVstK10/XFxkKyk/KSh1fGxsP3xsfGYpPy9pLFxuICAgICAgaXNPcGVyYXRvckNoYXIgPSBwYXJzZXJDb25maWcuaXNPcGVyYXRvckNoYXIgfHwgL1srXFwtKiYlPTw+IT98XFwvXS8sXG4gICAgICBpc0lkZW50aWZpZXJDaGFyID0gcGFyc2VyQ29uZmlnLmlzSWRlbnRpZmllckNoYXIgfHwgL1tcXHdcXCRfXFx4YTEtXFx1ZmZmZl0vO1xuXG4gIHZhciBjdXJQdW5jLCBpc0RlZktleXdvcmQ7XG5cbiAgZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpO1xuICAgIGlmIChob29rc1tjaF0pIHtcbiAgICAgIHZhciByZXN1bHQgPSBob29rc1tjaF0oc3RyZWFtLCBzdGF0ZSk7XG4gICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKGNoID09ICdcIicgfHwgY2ggPT0gXCInXCIpIHtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmcoY2gpO1xuICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgICBpZiAoaXNQdW5jdHVhdGlvbkNoYXIudGVzdChjaCkpIHtcbiAgICAgIGN1clB1bmMgPSBjaDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAobnVtYmVyU3RhcnQudGVzdChjaCkpIHtcbiAgICAgIHN0cmVhbS5iYWNrVXAoMSlcbiAgICAgIGlmIChzdHJlYW0ubWF0Y2gobnVtYmVyKSkgcmV0dXJuIFwibnVtYmVyXCJcbiAgICAgIHN0cmVhbS5uZXh0KClcbiAgICB9XG4gICAgaWYgKGNoID09IFwiL1wiKSB7XG4gICAgICBpZiAoc3RyZWFtLmVhdChcIipcIikpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkNvbW1lbnQ7XG4gICAgICAgIHJldHVybiB0b2tlbkNvbW1lbnQoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtLmVhdChcIi9cIikpIHtcbiAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc09wZXJhdG9yQ2hhci50ZXN0KGNoKSkge1xuICAgICAgd2hpbGUgKCFzdHJlYW0ubWF0Y2goL15cXC9bXFwvKl0vLCBmYWxzZSkgJiYgc3RyZWFtLmVhdChpc09wZXJhdG9yQ2hhcikpIHt9XG4gICAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICAgIH1cbiAgICBzdHJlYW0uZWF0V2hpbGUoaXNJZGVudGlmaWVyQ2hhcik7XG4gICAgaWYgKG5hbWVzcGFjZVNlcGFyYXRvcikgd2hpbGUgKHN0cmVhbS5tYXRjaChuYW1lc3BhY2VTZXBhcmF0b3IpKVxuICAgICAgc3RyZWFtLmVhdFdoaWxlKGlzSWRlbnRpZmllckNoYXIpO1xuXG4gICAgdmFyIGN1ciA9IHN0cmVhbS5jdXJyZW50KCk7XG4gICAgaWYgKGNvbnRhaW5zKGtleXdvcmRzLCBjdXIpKSB7XG4gICAgICBpZiAoY29udGFpbnMoYmxvY2tLZXl3b3JkcywgY3VyKSkgY3VyUHVuYyA9IFwibmV3c3RhdGVtZW50XCI7XG4gICAgICBpZiAoY29udGFpbnMoZGVmS2V5d29yZHMsIGN1cikpIGlzRGVmS2V5d29yZCA9IHRydWU7XG4gICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgfVxuICAgIGlmIChjb250YWlucyh0eXBlcywgY3VyKSkgcmV0dXJuIFwidHlwZVwiO1xuICAgIGlmIChjb250YWlucyhidWlsdGluLCBjdXIpKSB7XG4gICAgICBpZiAoY29udGFpbnMoYmxvY2tLZXl3b3JkcywgY3VyKSkgY3VyUHVuYyA9IFwibmV3c3RhdGVtZW50XCI7XG4gICAgICByZXR1cm4gXCJidWlsdGluXCI7XG4gICAgfVxuICAgIGlmIChjb250YWlucyhhdG9tcywgY3VyKSkgcmV0dXJuIFwiYXRvbVwiO1xuICAgIHJldHVybiBcInZhcmlhYmxlXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlblN0cmluZyhxdW90ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBuZXh0LCBlbmQgPSBmYWxzZTtcbiAgICAgIHdoaWxlICgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG5leHQgPT0gcXVvdGUgJiYgIWVzY2FwZWQpIHtlbmQgPSB0cnVlOyBicmVhazt9XG4gICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZCAmJiBuZXh0ID09IFwiXFxcXFwiO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCB8fCAhKGVzY2FwZWQgfHwgbXVsdGlMaW5lU3RyaW5ncykpXG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gbnVsbDtcbiAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlbkNvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBtYXliZUVuZCA9IGZhbHNlLCBjaDtcbiAgICB3aGlsZSAoY2ggPSBzdHJlYW0ubmV4dCgpKSB7XG4gICAgICBpZiAoY2ggPT0gXCIvXCIgJiYgbWF5YmVFbmQpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG1heWJlRW5kID0gKGNoID09IFwiKlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVFT0woc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChwYXJzZXJDb25maWcudHlwZUZpcnN0RGVmaW5pdGlvbnMgJiYgc3RyZWFtLmVvbCgpICYmIGlzVG9wU2NvcGUoc3RhdGUuY29udGV4dCkpXG4gICAgICBzdGF0ZS50eXBlQXRFbmRPZkxpbmUgPSB0eXBlQmVmb3JlKHN0cmVhbSwgc3RhdGUsIHN0cmVhbS5wb3MpXG4gIH1cblxuICAvLyBJbnRlcmZhY2VcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKGJhc2Vjb2x1bW4pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuaXplOiBudWxsLFxuICAgICAgICBjb250ZXh0OiBuZXcgQ29udGV4dCgoYmFzZWNvbHVtbiB8fCAwKSAtIGluZGVudFVuaXQsIDAsIFwidG9wXCIsIG51bGwsIGZhbHNlKSxcbiAgICAgICAgaW5kZW50ZWQ6IDAsXG4gICAgICAgIHN0YXJ0T2ZMaW5lOiB0cnVlLFxuICAgICAgICBwcmV2VG9rZW46IG51bGxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgY3R4ID0gc3RhdGUuY29udGV4dDtcbiAgICAgIGlmIChzdHJlYW0uc29sKCkpIHtcbiAgICAgICAgaWYgKGN0eC5hbGlnbiA9PSBudWxsKSBjdHguYWxpZ24gPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuaW5kZW50ZWQgPSBzdHJlYW0uaW5kZW50YXRpb24oKTtcbiAgICAgICAgc3RhdGUuc3RhcnRPZkxpbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSB7IG1heWJlRU9MKHN0cmVhbSwgc3RhdGUpOyByZXR1cm4gbnVsbDsgfVxuICAgICAgY3VyUHVuYyA9IGlzRGVmS2V5d29yZCA9IG51bGw7XG4gICAgICB2YXIgc3R5bGUgPSAoc3RhdGUudG9rZW5pemUgfHwgdG9rZW5CYXNlKShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIGlmIChzdHlsZSA9PSBcImNvbW1lbnRcIiB8fCBzdHlsZSA9PSBcIm1ldGFcIikgcmV0dXJuIHN0eWxlO1xuICAgICAgaWYgKGN0eC5hbGlnbiA9PSBudWxsKSBjdHguYWxpZ24gPSB0cnVlO1xuXG4gICAgICBpZiAoY3VyUHVuYyA9PSBcIjtcIiB8fCBjdXJQdW5jID09IFwiOlwiIHx8IChjdXJQdW5jID09IFwiLFwiICYmIHN0cmVhbS5tYXRjaCgvXlxccyooPzpcXC9cXC8uKik/JC8sIGZhbHNlKSkpXG4gICAgICAgIHdoaWxlIChzdGF0ZS5jb250ZXh0LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIikgcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICBlbHNlIGlmIChjdXJQdW5jID09IFwie1wiKSBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcIn1cIik7XG4gICAgICBlbHNlIGlmIChjdXJQdW5jID09IFwiW1wiKSBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcIl1cIik7XG4gICAgICBlbHNlIGlmIChjdXJQdW5jID09IFwiKFwiKSBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcIilcIik7XG4gICAgICBlbHNlIGlmIChjdXJQdW5jID09IFwifVwiKSB7XG4gICAgICAgIHdoaWxlIChjdHgudHlwZSA9PSBcInN0YXRlbWVudFwiKSBjdHggPSBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgICAgaWYgKGN0eC50eXBlID09IFwifVwiKSBjdHggPSBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgICAgd2hpbGUgKGN0eC50eXBlID09IFwic3RhdGVtZW50XCIpIGN0eCA9IHBvcENvbnRleHQoc3RhdGUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY3VyUHVuYyA9PSBjdHgudHlwZSkgcG9wQ29udGV4dChzdGF0ZSk7XG4gICAgICBlbHNlIGlmIChpbmRlbnRTdGF0ZW1lbnRzICYmXG4gICAgICAgICAgICAgICAoKChjdHgudHlwZSA9PSBcIn1cIiB8fCBjdHgudHlwZSA9PSBcInRvcFwiKSAmJiBjdXJQdW5jICE9IFwiO1wiKSB8fFxuICAgICAgICAgICAgICAgIChjdHgudHlwZSA9PSBcInN0YXRlbWVudFwiICYmIGN1clB1bmMgPT0gXCJuZXdzdGF0ZW1lbnRcIikpKSB7XG4gICAgICAgIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0uY29sdW1uKCksIFwic3RhdGVtZW50XCIsIHN0cmVhbS5jdXJyZW50KCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3R5bGUgPT0gXCJ2YXJpYWJsZVwiICYmXG4gICAgICAgICAgKChzdGF0ZS5wcmV2VG9rZW4gPT0gXCJkZWZcIiB8fFxuICAgICAgICAgICAgKHBhcnNlckNvbmZpZy50eXBlRmlyc3REZWZpbml0aW9ucyAmJiB0eXBlQmVmb3JlKHN0cmVhbSwgc3RhdGUsIHN0cmVhbS5zdGFydCkgJiZcbiAgICAgICAgICAgICBpc1RvcFNjb3BlKHN0YXRlLmNvbnRleHQpICYmIHN0cmVhbS5tYXRjaCgvXlxccypcXCgvLCBmYWxzZSkpKSkpXG4gICAgICAgIHN0eWxlID0gXCJkZWZcIjtcblxuICAgICAgaWYgKGhvb2tzLnRva2VuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBob29rcy50b2tlbihzdHJlYW0sIHN0YXRlLCBzdHlsZSk7XG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgc3R5bGUgPSByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHlsZSA9PSBcImRlZlwiICYmIHBhcnNlckNvbmZpZy5zdHlsZURlZnMgPT09IGZhbHNlKSBzdHlsZSA9IFwidmFyaWFibGVcIjtcblxuICAgICAgc3RhdGUuc3RhcnRPZkxpbmUgPSBmYWxzZTtcbiAgICAgIHN0YXRlLnByZXZUb2tlbiA9IGlzRGVmS2V5d29yZCA/IFwiZGVmXCIgOiBzdHlsZSB8fCBjdXJQdW5jO1xuICAgICAgbWF5YmVFT0woc3RyZWFtLCBzdGF0ZSk7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcblxuICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikge1xuICAgICAgaWYgKHN0YXRlLnRva2VuaXplICE9IHRva2VuQmFzZSAmJiBzdGF0ZS50b2tlbml6ZSAhPSBudWxsIHx8IHN0YXRlLnR5cGVBdEVuZE9mTGluZSkgcmV0dXJuIENvZGVNaXJyb3IuUGFzcztcbiAgICAgIHZhciBjdHggPSBzdGF0ZS5jb250ZXh0LCBmaXJzdENoYXIgPSB0ZXh0QWZ0ZXIgJiYgdGV4dEFmdGVyLmNoYXJBdCgwKTtcbiAgICAgIGlmIChjdHgudHlwZSA9PSBcInN0YXRlbWVudFwiICYmIGZpcnN0Q2hhciA9PSBcIn1cIikgY3R4ID0gY3R4LnByZXY7XG4gICAgICBpZiAocGFyc2VyQ29uZmlnLmRvbnRJbmRlbnRTdGF0ZW1lbnRzKVxuICAgICAgICB3aGlsZSAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIiAmJiBwYXJzZXJDb25maWcuZG9udEluZGVudFN0YXRlbWVudHMudGVzdChjdHguaW5mbykpXG4gICAgICAgICAgY3R4ID0gY3R4LnByZXZcbiAgICAgIGlmIChob29rcy5pbmRlbnQpIHtcbiAgICAgICAgdmFyIGhvb2sgPSBob29rcy5pbmRlbnQoc3RhdGUsIGN0eCwgdGV4dEFmdGVyKTtcbiAgICAgICAgaWYgKHR5cGVvZiBob29rID09IFwibnVtYmVyXCIpIHJldHVybiBob29rXG4gICAgICB9XG4gICAgICB2YXIgY2xvc2luZyA9IGZpcnN0Q2hhciA9PSBjdHgudHlwZTtcbiAgICAgIHZhciBzd2l0Y2hCbG9jayA9IGN0eC5wcmV2ICYmIGN0eC5wcmV2LmluZm8gPT0gXCJzd2l0Y2hcIjtcbiAgICAgIGlmIChwYXJzZXJDb25maWcuYWxsbWFuSW5kZW50YXRpb24gJiYgL1t7KF0vLnRlc3QoZmlyc3RDaGFyKSkge1xuICAgICAgICB3aGlsZSAoY3R4LnR5cGUgIT0gXCJ0b3BcIiAmJiBjdHgudHlwZSAhPSBcIn1cIikgY3R4ID0gY3R4LnByZXZcbiAgICAgICAgcmV0dXJuIGN0eC5pbmRlbnRlZFxuICAgICAgfVxuICAgICAgaWYgKGN0eC50eXBlID09IFwic3RhdGVtZW50XCIpXG4gICAgICAgIHJldHVybiBjdHguaW5kZW50ZWQgKyAoZmlyc3RDaGFyID09IFwie1wiID8gMCA6IHN0YXRlbWVudEluZGVudFVuaXQpO1xuICAgICAgaWYgKGN0eC5hbGlnbiAmJiAoIWRvbnRBbGlnbkNhbGxzIHx8IGN0eC50eXBlICE9IFwiKVwiKSlcbiAgICAgICAgcmV0dXJuIGN0eC5jb2x1bW4gKyAoY2xvc2luZyA/IDAgOiAxKTtcbiAgICAgIGlmIChjdHgudHlwZSA9PSBcIilcIiAmJiAhY2xvc2luZylcbiAgICAgICAgcmV0dXJuIGN0eC5pbmRlbnRlZCArIHN0YXRlbWVudEluZGVudFVuaXQ7XG5cbiAgICAgIHJldHVybiBjdHguaW5kZW50ZWQgKyAoY2xvc2luZyA/IDAgOiBpbmRlbnRVbml0KSArXG4gICAgICAgICghY2xvc2luZyAmJiBzd2l0Y2hCbG9jayAmJiAhL14oPzpjYXNlfGRlZmF1bHQpXFxiLy50ZXN0KHRleHRBZnRlcikgPyBpbmRlbnRVbml0IDogMCk7XG4gICAgfSxcblxuICAgIGVsZWN0cmljSW5wdXQ6IGluZGVudFN3aXRjaCA/IC9eXFxzKig/OmNhc2UgLio/OnxkZWZhdWx0OnxcXHtcXH0/fFxcfSkkLyA6IC9eXFxzKlt7fV0kLyxcbiAgICBibG9ja0NvbW1lbnRTdGFydDogXCIvKlwiLFxuICAgIGJsb2NrQ29tbWVudEVuZDogXCIqL1wiLFxuICAgIGJsb2NrQ29tbWVudENvbnRpbnVlOiBcIiAqIFwiLFxuICAgIGxpbmVDb21tZW50OiBcIi8vXCIsXG4gICAgZm9sZDogXCJicmFjZVwiXG4gIH07XG59KTtcblxuICBmdW5jdGlvbiB3b3JkcyhzdHIpIHtcbiAgICB2YXIgb2JqID0ge30sIHdvcmRzID0gc3RyLnNwbGl0KFwiIFwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSBvYmpbd29yZHNbaV1dID0gdHJ1ZTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGZ1bmN0aW9uIGNvbnRhaW5zKHdvcmRzLCB3b3JkKSB7XG4gICAgaWYgKHR5cGVvZiB3b3JkcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gd29yZHMod29yZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3b3Jkcy5wcm9wZXJ0eUlzRW51bWVyYWJsZSh3b3JkKTtcbiAgICB9XG4gIH1cbiAgdmFyIGNLZXl3b3JkcyA9IFwiYXV0byBpZiBicmVhayBjYXNlIHJlZ2lzdGVyIGNvbnRpbnVlIHJldHVybiBkZWZhdWx0IGRvIHNpemVvZiBcIiArXG4gICAgXCJzdGF0aWMgZWxzZSBzdHJ1Y3Qgc3dpdGNoIGV4dGVybiB0eXBlZGVmIHVuaW9uIGZvciBnb3RvIHdoaWxlIGVudW0gY29uc3Qgdm9sYXRpbGVcIjtcbiAgdmFyIGNUeXBlcyA9IFwiaW50IGxvbmcgY2hhciBzaG9ydCBkb3VibGUgZmxvYXQgdW5zaWduZWQgc2lnbmVkIHZvaWQgc2l6ZV90IHB0cmRpZmZfdFwiO1xuXG4gIGZ1bmN0aW9uIGNwcEhvb2soc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmICghc3RhdGUuc3RhcnRPZkxpbmUpIHJldHVybiBmYWxzZVxuICAgIGZvciAodmFyIGNoLCBuZXh0ID0gbnVsbDsgY2ggPSBzdHJlYW0ucGVlaygpOykge1xuICAgICAgaWYgKGNoID09IFwiXFxcXFwiICYmIHN0cmVhbS5tYXRjaCgvXi4kLykpIHtcbiAgICAgICAgbmV4dCA9IGNwcEhvb2tcbiAgICAgICAgYnJlYWtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIvXCIgJiYgc3RyZWFtLm1hdGNoKC9eXFwvW1xcL1xcKl0vLCBmYWxzZSkpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHN0cmVhbS5uZXh0KClcbiAgICB9XG4gICAgc3RhdGUudG9rZW5pemUgPSBuZXh0XG4gICAgcmV0dXJuIFwibWV0YVwiXG4gIH1cblxuICBmdW5jdGlvbiBwb2ludGVySG9vayhfc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wcmV2VG9rZW4gPT0gXCJ0eXBlXCIpIHJldHVybiBcInR5cGVcIjtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcHAxNExpdGVyYWwoc3RyZWFtKSB7XG4gICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwuJ10vKTtcbiAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNwcDExU3RyaW5nSG9vayhzdHJlYW0sIHN0YXRlKSB7XG4gICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICAvLyBSYXcgc3RyaW5ncy5cbiAgICBpZiAoc3RyZWFtLm1hdGNoKC8oUnx1OFJ8dVJ8VVJ8TFIpLykpIHtcbiAgICAgIHZhciBtYXRjaCA9IHN0cmVhbS5tYXRjaCgvXCIoW15cXHNcXFxcKCldezAsMTZ9KVxcKC8pO1xuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGF0ZS5jcHAxMVJhd1N0cmluZ0RlbGltID0gbWF0Y2hbMV07XG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuUmF3U3RyaW5nO1xuICAgICAgcmV0dXJuIHRva2VuUmF3U3RyaW5nKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgICAvLyBVbmljb2RlIHN0cmluZ3MvY2hhcnMuXG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvKHU4fHV8VXxMKS8pKSB7XG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC9bXCInXS8sIC8qIGVhdCAqLyBmYWxzZSkpIHtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIElnbm9yZSB0aGlzIGhvb2suXG4gICAgc3RyZWFtLm5leHQoKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcHBMb29rc0xpa2VDb25zdHJ1Y3Rvcih3b3JkKSB7XG4gICAgdmFyIGxhc3RUd28gPSAvKFxcdyspOjp+PyhcXHcrKSQvLmV4ZWMod29yZCk7XG4gICAgcmV0dXJuIGxhc3RUd28gJiYgbGFzdFR3b1sxXSA9PSBsYXN0VHdvWzJdO1xuICB9XG5cbiAgLy8gQyMtc3R5bGUgc3RyaW5ncyB3aGVyZSBcIlwiIGVzY2FwZXMgYSBxdW90ZS5cbiAgZnVuY3Rpb24gdG9rZW5BdFN0cmluZyhzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIG5leHQ7XG4gICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgaWYgKG5leHQgPT0gJ1wiJyAmJiAhc3RyZWFtLmVhdCgnXCInKSkge1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgfVxuXG4gIC8vIEMrKzExIHJhdyBzdHJpbmcgbGl0ZXJhbCBpcyA8cHJlZml4PlwiPGRlbGltPiggYW55dGhpbmcgKTxkZWxpbT5cIiwgd2hlcmVcbiAgLy8gPGRlbGltPiBjYW4gYmUgYSBzdHJpbmcgdXAgdG8gMTYgY2hhcmFjdGVycyBsb25nLlxuICBmdW5jdGlvbiB0b2tlblJhd1N0cmluZyhzdHJlYW0sIHN0YXRlKSB7XG4gICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIHNwZWNpYWwgcmVnZXggbWVhbmluZ3MuXG4gICAgdmFyIGRlbGltID0gc3RhdGUuY3BwMTFSYXdTdHJpbmdEZWxpbS5yZXBsYWNlKC9bXlxcd1xcc10vZywgJ1xcXFwkJicpO1xuICAgIHZhciBtYXRjaCA9IHN0cmVhbS5tYXRjaChuZXcgUmVnRXhwKFwiLio/XFxcXClcIiArIGRlbGltICsgJ1wiJykpO1xuICAgIGlmIChtYXRjaClcbiAgICAgIHN0YXRlLnRva2VuaXplID0gbnVsbDtcbiAgICBlbHNlXG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gIH1cblxuICBmdW5jdGlvbiBkZWYobWltZXMsIG1vZGUpIHtcbiAgICBpZiAodHlwZW9mIG1pbWVzID09IFwic3RyaW5nXCIpIG1pbWVzID0gW21pbWVzXTtcbiAgICB2YXIgd29yZHMgPSBbXTtcbiAgICBmdW5jdGlvbiBhZGQob2JqKSB7XG4gICAgICBpZiAob2JqKSBmb3IgKHZhciBwcm9wIGluIG9iaikgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSlcbiAgICAgICAgd29yZHMucHVzaChwcm9wKTtcbiAgICB9XG4gICAgYWRkKG1vZGUua2V5d29yZHMpO1xuICAgIGFkZChtb2RlLnR5cGVzKTtcbiAgICBhZGQobW9kZS5idWlsdGluKTtcbiAgICBhZGQobW9kZS5hdG9tcyk7XG4gICAgaWYgKHdvcmRzLmxlbmd0aCkge1xuICAgICAgbW9kZS5oZWxwZXJUeXBlID0gbWltZXNbMF07XG4gICAgICBDb2RlTWlycm9yLnJlZ2lzdGVySGVscGVyKFwiaGludFdvcmRzXCIsIG1pbWVzWzBdLCB3b3Jkcyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW1lcy5sZW5ndGg7ICsraSlcbiAgICAgIENvZGVNaXJyb3IuZGVmaW5lTUlNRShtaW1lc1tpXSwgbW9kZSk7XG4gIH1cblxuICBkZWYoW1widGV4dC94LWNzcmNcIiwgXCJ0ZXh0L3gtY1wiLCBcInRleHQveC1jaGRyXCJdLCB7XG4gICAgbmFtZTogXCJjbGlrZVwiLFxuICAgIGtleXdvcmRzOiB3b3JkcyhjS2V5d29yZHMpLFxuICAgIHR5cGVzOiB3b3JkcyhjVHlwZXMgKyBcIiBib29sIF9Db21wbGV4IF9Cb29sIGZsb2F0X3QgZG91YmxlX3QgaW50cHRyX3QgaW50bWF4X3QgXCIgK1xuICAgICAgICAgICAgICAgICBcImludDhfdCBpbnQxNl90IGludDMyX3QgaW50NjRfdCB1aW50cHRyX3QgdWludG1heF90IHVpbnQ4X3QgdWludDE2X3QgXCIgK1xuICAgICAgICAgICAgICAgICBcInVpbnQzMl90IHVpbnQ2NF90XCIpLFxuICAgIGJsb2NrS2V5d29yZHM6IHdvcmRzKFwiY2FzZSBkbyBlbHNlIGZvciBpZiBzd2l0Y2ggd2hpbGUgc3RydWN0XCIpLFxuICAgIGRlZktleXdvcmRzOiB3b3JkcyhcInN0cnVjdFwiKSxcbiAgICB0eXBlRmlyc3REZWZpbml0aW9uczogdHJ1ZSxcbiAgICBhdG9tczogd29yZHMoXCJOVUxMIHRydWUgZmFsc2VcIiksXG4gICAgaG9va3M6IHtcIiNcIjogY3BwSG9vaywgXCIqXCI6IHBvaW50ZXJIb29rfSxcbiAgICBtb2RlUHJvcHM6IHtmb2xkOiBbXCJicmFjZVwiLCBcImluY2x1ZGVcIl19XG4gIH0pO1xuXG4gIGRlZihbXCJ0ZXh0L3gtYysrc3JjXCIsIFwidGV4dC94LWMrK2hkclwiXSwge1xuICAgIG5hbWU6IFwiY2xpa2VcIixcbiAgICBrZXl3b3Jkczogd29yZHMoY0tleXdvcmRzICsgXCIgYXNtIGR5bmFtaWNfY2FzdCBuYW1lc3BhY2UgcmVpbnRlcnByZXRfY2FzdCB0cnkgZXhwbGljaXQgbmV3IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJzdGF0aWNfY2FzdCB0eXBlaWQgY2F0Y2ggb3BlcmF0b3IgdGVtcGxhdGUgdHlwZW5hbWUgY2xhc3MgZnJpZW5kIHByaXZhdGUgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInRoaXMgdXNpbmcgY29uc3RfY2FzdCBpbmxpbmUgcHVibGljIHRocm93IHZpcnR1YWwgZGVsZXRlIG11dGFibGUgcHJvdGVjdGVkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlnbmFzIGFsaWdub2YgY29uc3RleHByIGRlY2x0eXBlIG51bGxwdHIgbm9leGNlcHQgdGhyZWFkX2xvY2FsIGZpbmFsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJzdGF0aWNfYXNzZXJ0IG92ZXJyaWRlXCIpLFxuICAgIHR5cGVzOiB3b3JkcyhjVHlwZXMgKyBcIiBib29sIHdjaGFyX3RcIiksXG4gICAgYmxvY2tLZXl3b3Jkczogd29yZHMoXCJjYXRjaCBjbGFzcyBkbyBlbHNlIGZpbmFsbHkgZm9yIGlmIHN0cnVjdCBzd2l0Y2ggdHJ5IHdoaWxlXCIpLFxuICAgIGRlZktleXdvcmRzOiB3b3JkcyhcImNsYXNzIG5hbWVzcGFjZSBzdHJ1Y3QgZW51bSB1bmlvblwiKSxcbiAgICB0eXBlRmlyc3REZWZpbml0aW9uczogdHJ1ZSxcbiAgICBhdG9tczogd29yZHMoXCJ0cnVlIGZhbHNlIE5VTExcIiksXG4gICAgZG9udEluZGVudFN0YXRlbWVudHM6IC9edGVtcGxhdGUkLyxcbiAgICBpc0lkZW50aWZpZXJDaGFyOiAvW1xcd1xcJF9+XFx4YTEtXFx1ZmZmZl0vLFxuICAgIGhvb2tzOiB7XG4gICAgICBcIiNcIjogY3BwSG9vayxcbiAgICAgIFwiKlwiOiBwb2ludGVySG9vayxcbiAgICAgIFwidVwiOiBjcHAxMVN0cmluZ0hvb2ssXG4gICAgICBcIlVcIjogY3BwMTFTdHJpbmdIb29rLFxuICAgICAgXCJMXCI6IGNwcDExU3RyaW5nSG9vayxcbiAgICAgIFwiUlwiOiBjcHAxMVN0cmluZ0hvb2ssXG4gICAgICBcIjBcIjogY3BwMTRMaXRlcmFsLFxuICAgICAgXCIxXCI6IGNwcDE0TGl0ZXJhbCxcbiAgICAgIFwiMlwiOiBjcHAxNExpdGVyYWwsXG4gICAgICBcIjNcIjogY3BwMTRMaXRlcmFsLFxuICAgICAgXCI0XCI6IGNwcDE0TGl0ZXJhbCxcbiAgICAgIFwiNVwiOiBjcHAxNExpdGVyYWwsXG4gICAgICBcIjZcIjogY3BwMTRMaXRlcmFsLFxuICAgICAgXCI3XCI6IGNwcDE0TGl0ZXJhbCxcbiAgICAgIFwiOFwiOiBjcHAxNExpdGVyYWwsXG4gICAgICBcIjlcIjogY3BwMTRMaXRlcmFsLFxuICAgICAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUsIHN0eWxlKSB7XG4gICAgICAgIGlmIChzdHlsZSA9PSBcInZhcmlhYmxlXCIgJiYgc3RyZWFtLnBlZWsoKSA9PSBcIihcIiAmJlxuICAgICAgICAgICAgKHN0YXRlLnByZXZUb2tlbiA9PSBcIjtcIiB8fCBzdGF0ZS5wcmV2VG9rZW4gPT0gbnVsbCB8fFxuICAgICAgICAgICAgIHN0YXRlLnByZXZUb2tlbiA9PSBcIn1cIikgJiZcbiAgICAgICAgICAgIGNwcExvb2tzTGlrZUNvbnN0cnVjdG9yKHN0cmVhbS5jdXJyZW50KCkpKVxuICAgICAgICAgIHJldHVybiBcImRlZlwiO1xuICAgICAgfVxuICAgIH0sXG4gICAgbmFtZXNwYWNlU2VwYXJhdG9yOiBcIjo6XCIsXG4gICAgbW9kZVByb3BzOiB7Zm9sZDogW1wiYnJhY2VcIiwgXCJpbmNsdWRlXCJdfVxuICB9KTtcblxuICBkZWYoXCJ0ZXh0L3gtamF2YVwiLCB7XG4gICAgbmFtZTogXCJjbGlrZVwiLFxuICAgIGtleXdvcmRzOiB3b3JkcyhcImFic3RyYWN0IGFzc2VydCBicmVhayBjYXNlIGNhdGNoIGNsYXNzIGNvbnN0IGNvbnRpbnVlIGRlZmF1bHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImRvIGVsc2UgZW51bSBleHRlbmRzIGZpbmFsIGZpbmFsbHkgZmxvYXQgZm9yIGdvdG8gaWYgaW1wbGVtZW50cyBpbXBvcnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImluc3RhbmNlb2YgaW50ZXJmYWNlIG5hdGl2ZSBuZXcgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInJldHVybiBzdGF0aWMgc3RyaWN0ZnAgc3VwZXIgc3dpdGNoIHN5bmNocm9uaXplZCB0aGlzIHRocm93IHRocm93cyB0cmFuc2llbnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInRyeSB2b2xhdGlsZSB3aGlsZSBAaW50ZXJmYWNlXCIpLFxuICAgIHR5cGVzOiB3b3JkcyhcImJ5dGUgc2hvcnQgaW50IGxvbmcgZmxvYXQgZG91YmxlIGJvb2xlYW4gY2hhciB2b2lkIEJvb2xlYW4gQnl0ZSBDaGFyYWN0ZXIgRG91YmxlIEZsb2F0IFwiICtcbiAgICAgICAgICAgICAgICAgXCJJbnRlZ2VyIExvbmcgTnVtYmVyIE9iamVjdCBTaG9ydCBTdHJpbmcgU3RyaW5nQnVmZmVyIFN0cmluZ0J1aWxkZXIgVm9pZFwiKSxcbiAgICBibG9ja0tleXdvcmRzOiB3b3JkcyhcImNhdGNoIGNsYXNzIGRvIGVsc2UgZmluYWxseSBmb3IgaWYgc3dpdGNoIHRyeSB3aGlsZVwiKSxcbiAgICBkZWZLZXl3b3Jkczogd29yZHMoXCJjbGFzcyBpbnRlcmZhY2UgZW51bSBAaW50ZXJmYWNlXCIpLFxuICAgIHR5cGVGaXJzdERlZmluaXRpb25zOiB0cnVlLFxuICAgIGF0b21zOiB3b3JkcyhcInRydWUgZmFsc2UgbnVsbFwiKSxcbiAgICBudW1iZXI6IC9eKD86MHhbYS1mXFxkX10rfDBiWzAxX10rfCg/OltcXGRfXStcXC4/XFxkKnxcXC5cXGQrKSg/OmVbLStdP1tcXGRfXSspPykodXxsbD98bHxmKT8vaSxcbiAgICBob29rczoge1xuICAgICAgXCJAXCI6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICAvLyBEb24ndCBtYXRjaCB0aGUgQGludGVyZmFjZSBrZXl3b3JkLlxuICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKCdpbnRlcmZhY2UnLCBmYWxzZSkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXCRfXS8pO1xuICAgICAgICByZXR1cm4gXCJtZXRhXCI7XG4gICAgICB9XG4gICAgfSxcbiAgICBtb2RlUHJvcHM6IHtmb2xkOiBbXCJicmFjZVwiLCBcImltcG9ydFwiXX1cbiAgfSk7XG5cbiAgZGVmKFwidGV4dC94LWNzaGFycFwiLCB7XG4gICAgbmFtZTogXCJjbGlrZVwiLFxuICAgIGtleXdvcmRzOiB3b3JkcyhcImFic3RyYWN0IGFzIGFzeW5jIGF3YWl0IGJhc2UgYnJlYWsgY2FzZSBjYXRjaCBjaGVja2VkIGNsYXNzIGNvbnN0IGNvbnRpbnVlXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBkZWZhdWx0IGRlbGVnYXRlIGRvIGVsc2UgZW51bSBldmVudCBleHBsaWNpdCBleHRlcm4gZmluYWxseSBmaXhlZCBmb3JcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIGZvcmVhY2ggZ290byBpZiBpbXBsaWNpdCBpbiBpbnRlcmZhY2UgaW50ZXJuYWwgaXMgbG9jayBuYW1lc3BhY2UgbmV3XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiBvcGVyYXRvciBvdXQgb3ZlcnJpZGUgcGFyYW1zIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyByZWFkb25seSByZWYgcmV0dXJuIHNlYWxlZFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgc2l6ZW9mIHN0YWNrYWxsb2Mgc3RhdGljIHN0cnVjdCBzd2l0Y2ggdGhpcyB0aHJvdyB0cnkgdHlwZW9mIHVuY2hlY2tlZFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgdW5zYWZlIHVzaW5nIHZpcnR1YWwgdm9pZCB2b2xhdGlsZSB3aGlsZSBhZGQgYWxpYXMgYXNjZW5kaW5nIGRlc2NlbmRpbmcgZHluYW1pYyBmcm9tIGdldFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCIgZ2xvYmFsIGdyb3VwIGludG8gam9pbiBsZXQgb3JkZXJieSBwYXJ0aWFsIHJlbW92ZSBzZWxlY3Qgc2V0IHZhbHVlIHZhciB5aWVsZFwiKSxcbiAgICB0eXBlczogd29yZHMoXCJBY3Rpb24gQm9vbGVhbiBCeXRlIENoYXIgRGF0ZVRpbWUgRGF0ZVRpbWVPZmZzZXQgRGVjaW1hbCBEb3VibGUgRnVuY1wiICtcbiAgICAgICAgICAgICAgICAgXCIgR3VpZCBJbnQxNiBJbnQzMiBJbnQ2NCBPYmplY3QgU0J5dGUgU2luZ2xlIFN0cmluZyBUYXNrIFRpbWVTcGFuIFVJbnQxNiBVSW50MzJcIiArXG4gICAgICAgICAgICAgICAgIFwiIFVJbnQ2NCBib29sIGJ5dGUgY2hhciBkZWNpbWFsIGRvdWJsZSBzaG9ydCBpbnQgbG9uZyBvYmplY3RcIiAgK1xuICAgICAgICAgICAgICAgICBcIiBzYnl0ZSBmbG9hdCBzdHJpbmcgdXNob3J0IHVpbnQgdWxvbmdcIiksXG4gICAgYmxvY2tLZXl3b3Jkczogd29yZHMoXCJjYXRjaCBjbGFzcyBkbyBlbHNlIGZpbmFsbHkgZm9yIGZvcmVhY2ggaWYgc3RydWN0IHN3aXRjaCB0cnkgd2hpbGVcIiksXG4gICAgZGVmS2V5d29yZHM6IHdvcmRzKFwiY2xhc3MgaW50ZXJmYWNlIG5hbWVzcGFjZSBzdHJ1Y3QgdmFyXCIpLFxuICAgIHR5cGVGaXJzdERlZmluaXRpb25zOiB0cnVlLFxuICAgIGF0b21zOiB3b3JkcyhcInRydWUgZmFsc2UgbnVsbFwiKSxcbiAgICBob29rczoge1xuICAgICAgXCJAXCI6IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0cmVhbS5lYXQoJ1wiJykpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQXRTdHJpbmc7XG4gICAgICAgICAgcmV0dXJuIHRva2VuQXRTdHJpbmcoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gdG9rZW5UcmlwbGVTdHJpbmcoc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciBlc2NhcGVkID0gZmFsc2U7XG4gICAgd2hpbGUgKCFzdHJlYW0uZW9sKCkpIHtcbiAgICAgIGlmICghZXNjYXBlZCAmJiBzdHJlYW0ubWF0Y2goJ1wiXCJcIicpKSB7XG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBlc2NhcGVkID0gc3RyZWFtLm5leHQoKSA9PSBcIlxcXFxcIiAmJiAhZXNjYXBlZDtcbiAgICB9XG4gICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0b2tlbk5lc3RlZENvbW1lbnQoZGVwdGgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBjaFxuICAgICAgd2hpbGUgKGNoID0gc3RyZWFtLm5leHQoKSkge1xuICAgICAgICBpZiAoY2ggPT0gXCIqXCIgJiYgc3RyZWFtLmVhdChcIi9cIikpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPT0gMSkge1xuICAgICAgICAgICAgc3RhdGUudG9rZW5pemUgPSBudWxsXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuTmVzdGVkQ29tbWVudChkZXB0aCAtIDEpXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gXCIvXCIgJiYgc3RyZWFtLmVhdChcIipcIikpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuTmVzdGVkQ29tbWVudChkZXB0aCArIDEpXG4gICAgICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBcImNvbW1lbnRcIlxuICAgIH1cbiAgfVxuXG4gIGRlZihcInRleHQveC1zY2FsYVwiLCB7XG4gICAgbmFtZTogXCJjbGlrZVwiLFxuICAgIGtleXdvcmRzOiB3b3JkcyhcblxuICAgICAgLyogc2NhbGEgKi9cbiAgICAgIFwiYWJzdHJhY3QgY2FzZSBjYXRjaCBjbGFzcyBkZWYgZG8gZWxzZSBleHRlbmRzIGZpbmFsIGZpbmFsbHkgZm9yIGZvclNvbWUgaWYgXCIgK1xuICAgICAgXCJpbXBsaWNpdCBpbXBvcnQgbGF6eSBtYXRjaCBuZXcgbnVsbCBvYmplY3Qgb3ZlcnJpZGUgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCByZXR1cm4gXCIgK1xuICAgICAgXCJzZWFsZWQgc3VwZXIgdGhpcyB0aHJvdyB0cmFpdCB0cnkgdHlwZSB2YWwgdmFyIHdoaWxlIHdpdGggeWllbGQgXyBcIiArXG5cbiAgICAgIC8qIHBhY2thZ2Ugc2NhbGEgKi9cbiAgICAgIFwiYXNzZXJ0IGFzc3VtZSByZXF1aXJlIHByaW50IHByaW50bG4gcHJpbnRmIHJlYWRMaW5lIHJlYWRCb29sZWFuIHJlYWRCeXRlIHJlYWRTaG9ydCBcIiArXG4gICAgICBcInJlYWRDaGFyIHJlYWRJbnQgcmVhZExvbmcgcmVhZEZsb2F0IHJlYWREb3VibGVcIlxuICAgICksXG4gICAgdHlwZXM6IHdvcmRzKFxuICAgICAgXCJBbnlWYWwgQXBwIEFwcGxpY2F0aW9uIEFycmF5IEJ1ZmZlcmVkSXRlcmF0b3IgQmlnRGVjaW1hbCBCaWdJbnQgQ2hhciBDb25zb2xlIEVpdGhlciBcIiArXG4gICAgICBcIkVudW1lcmF0aW9uIEVxdWl2IEVycm9yIEV4Y2VwdGlvbiBGcmFjdGlvbmFsIEZ1bmN0aW9uIEluZGV4ZWRTZXEgSW50IEludGVncmFsIEl0ZXJhYmxlIFwiICtcbiAgICAgIFwiSXRlcmF0b3IgTGlzdCBNYXAgTnVtZXJpYyBOaWwgTm90TnVsbCBPcHRpb24gT3JkZXJlZCBPcmRlcmluZyBQYXJ0aWFsRnVuY3Rpb24gUGFydGlhbE9yZGVyaW5nIFwiICtcbiAgICAgIFwiUHJvZHVjdCBQcm94eSBSYW5nZSBSZXNwb25kZXIgU2VxIFNlcmlhbGl6YWJsZSBTZXQgU3BlY2lhbGl6YWJsZSBTdHJlYW0gU3RyaW5nQnVpbGRlciBcIiArXG4gICAgICBcIlN0cmluZ0NvbnRleHQgU3ltYm9sIFRocm93YWJsZSBUcmF2ZXJzYWJsZSBUcmF2ZXJzYWJsZU9uY2UgVHVwbGUgVW5pdCBWZWN0b3IgXCIgK1xuXG4gICAgICAvKiBwYWNrYWdlIGphdmEubGFuZyAqL1xuICAgICAgXCJCb29sZWFuIEJ5dGUgQ2hhcmFjdGVyIENoYXJTZXF1ZW5jZSBDbGFzcyBDbGFzc0xvYWRlciBDbG9uZWFibGUgQ29tcGFyYWJsZSBcIiArXG4gICAgICBcIkNvbXBpbGVyIERvdWJsZSBFeGNlcHRpb24gRmxvYXQgSW50ZWdlciBMb25nIE1hdGggTnVtYmVyIE9iamVjdCBQYWNrYWdlIFBhaXIgUHJvY2VzcyBcIiArXG4gICAgICBcIlJ1bnRpbWUgUnVubmFibGUgU2VjdXJpdHlNYW5hZ2VyIFNob3J0IFN0YWNrVHJhY2VFbGVtZW50IFN0cmljdE1hdGggU3RyaW5nIFwiICtcbiAgICAgIFwiU3RyaW5nQnVmZmVyIFN5c3RlbSBUaHJlYWQgVGhyZWFkR3JvdXAgVGhyZWFkTG9jYWwgVGhyb3dhYmxlIFRyaXBsZSBWb2lkXCJcbiAgICApLFxuICAgIG11bHRpTGluZVN0cmluZ3M6IHRydWUsXG4gICAgYmxvY2tLZXl3b3Jkczogd29yZHMoXCJjYXRjaCBjbGFzcyBlbnVtIGRvIGVsc2UgZmluYWxseSBmb3IgZm9yU29tZSBpZiBtYXRjaCBzd2l0Y2ggdHJ5IHdoaWxlXCIpLFxuICAgIGRlZktleXdvcmRzOiB3b3JkcyhcImNsYXNzIGVudW0gZGVmIG9iamVjdCBwYWNrYWdlIHRyYWl0IHR5cGUgdmFsIHZhclwiKSxcbiAgICBhdG9tczogd29yZHMoXCJ0cnVlIGZhbHNlIG51bGxcIiksXG4gICAgaW5kZW50U3RhdGVtZW50czogZmFsc2UsXG4gICAgaW5kZW50U3dpdGNoOiBmYWxzZSxcbiAgICBpc09wZXJhdG9yQ2hhcjogL1srXFwtKiYlPTw+IT98XFwvIzpAXS8sXG4gICAgaG9va3M6IHtcbiAgICAgIFwiQFwiOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgICAgfSxcbiAgICAgICdcIic6IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKCFzdHJlYW0ubWF0Y2goJ1wiXCInKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuVHJpcGxlU3RyaW5nO1xuICAgICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICB9LFxuICAgICAgXCInXCI6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXCRfXFx4YTEtXFx1ZmZmZl0vKTtcbiAgICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgICAgfSxcbiAgICAgIFwiPVwiOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIHZhciBjeCA9IHN0YXRlLmNvbnRleHRcbiAgICAgICAgaWYgKGN4LnR5cGUgPT0gXCJ9XCIgJiYgY3guYWxpZ24gJiYgc3RyZWFtLmVhdChcIj5cIikpIHtcbiAgICAgICAgICBzdGF0ZS5jb250ZXh0ID0gbmV3IENvbnRleHQoY3guaW5kZW50ZWQsIGN4LmNvbHVtbiwgY3gudHlwZSwgY3guaW5mbywgbnVsbCwgY3gucHJldilcbiAgICAgICAgICByZXR1cm4gXCJvcGVyYXRvclwiXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIFwiL1wiOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIGlmICghc3RyZWFtLmVhdChcIipcIikpIHJldHVybiBmYWxzZVxuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuTmVzdGVkQ29tbWVudCgxKVxuICAgICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSlcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vZGVQcm9wczoge2Nsb3NlQnJhY2tldHM6IHt0cmlwbGVzOiAnXCInfX1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gdG9rZW5Lb3RsaW5TdHJpbmcodHJpcGxlU3RyaW5nKXtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsIG5leHQsIGVuZCA9IGZhbHNlO1xuICAgICAgd2hpbGUgKCFzdHJlYW0uZW9sKCkpIHtcbiAgICAgICAgaWYgKCF0cmlwbGVTdHJpbmcgJiYgIWVzY2FwZWQgJiYgc3RyZWFtLm1hdGNoKCdcIicpICkge2VuZCA9IHRydWU7IGJyZWFrO31cbiAgICAgICAgaWYgKHRyaXBsZVN0cmluZyAmJiBzdHJlYW0ubWF0Y2goJ1wiXCJcIicpKSB7ZW5kID0gdHJ1ZTsgYnJlYWs7fVxuICAgICAgICBuZXh0ID0gc3RyZWFtLm5leHQoKTtcbiAgICAgICAgaWYoIWVzY2FwZWQgJiYgbmV4dCA9PSBcIiRcIiAmJiBzdHJlYW0ubWF0Y2goJ3snKSlcbiAgICAgICAgICBzdHJlYW0uc2tpcFRvKFwifVwiKTtcbiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCIgJiYgIXRyaXBsZVN0cmluZztcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgfHwgIXRyaXBsZVN0cmluZylcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSBudWxsO1xuICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgfVxuICB9XG5cbiAgZGVmKFwidGV4dC94LWtvdGxpblwiLCB7XG4gICAgbmFtZTogXCJjbGlrZVwiLFxuICAgIGtleXdvcmRzOiB3b3JkcyhcbiAgICAgIC8qa2V5d29yZHMqL1xuICAgICAgXCJwYWNrYWdlIGFzIHR5cGVhbGlhcyBjbGFzcyBpbnRlcmZhY2UgdGhpcyBzdXBlciB2YWwgb3BlcmF0b3IgXCIgK1xuICAgICAgXCJ2YXIgZnVuIGZvciBpcyBpbiBUaGlzIHRocm93IHJldHVybiBhbm5vdGF0aW9uIFwiICtcbiAgICAgIFwiYnJlYWsgY29udGludWUgb2JqZWN0IGlmIGVsc2Ugd2hpbGUgZG8gdHJ5IHdoZW4gIWluICFpcyBhcz8gXCIgK1xuXG4gICAgICAvKnNvZnQga2V5d29yZHMqL1xuICAgICAgXCJmaWxlIGltcG9ydCB3aGVyZSBieSBnZXQgc2V0IGFic3RyYWN0IGVudW0gb3BlbiBpbm5lciBvdmVycmlkZSBwcml2YXRlIHB1YmxpYyBpbnRlcm5hbCBcIiArXG4gICAgICBcInByb3RlY3RlZCBjYXRjaCBmaW5hbGx5IG91dCBmaW5hbCB2YXJhcmcgcmVpZmllZCBkeW5hbWljIGNvbXBhbmlvbiBjb25zdHJ1Y3RvciBpbml0IFwiICtcbiAgICAgIFwic2VhbGVkIGZpZWxkIHByb3BlcnR5IHJlY2VpdmVyIHBhcmFtIHNwYXJhbSBsYXRlaW5pdCBkYXRhIGlubGluZSBub2lubGluZSB0YWlscmVjIFwiICtcbiAgICAgIFwiZXh0ZXJuYWwgYW5ub3RhdGlvbiBjcm9zc2lubGluZSBjb25zdCBvcGVyYXRvciBpbmZpeCBzdXNwZW5kIGFjdHVhbCBleHBlY3Qgc2V0cGFyYW1cIlxuICAgICksXG4gICAgdHlwZXM6IHdvcmRzKFxuICAgICAgLyogcGFja2FnZSBqYXZhLmxhbmcgKi9cbiAgICAgIFwiQm9vbGVhbiBCeXRlIENoYXJhY3RlciBDaGFyU2VxdWVuY2UgQ2xhc3MgQ2xhc3NMb2FkZXIgQ2xvbmVhYmxlIENvbXBhcmFibGUgXCIgK1xuICAgICAgXCJDb21waWxlciBEb3VibGUgRXhjZXB0aW9uIEZsb2F0IEludGVnZXIgTG9uZyBNYXRoIE51bWJlciBPYmplY3QgUGFja2FnZSBQYWlyIFByb2Nlc3MgXCIgK1xuICAgICAgXCJSdW50aW1lIFJ1bm5hYmxlIFNlY3VyaXR5TWFuYWdlciBTaG9ydCBTdGFja1RyYWNlRWxlbWVudCBTdHJpY3RNYXRoIFN0cmluZyBcIiArXG4gICAgICBcIlN0cmluZ0J1ZmZlciBTeXN0ZW0gVGhyZWFkIFRocmVhZEdyb3VwIFRocmVhZExvY2FsIFRocm93YWJsZSBUcmlwbGUgVm9pZCBBbm5vdGF0aW9uIEFueSBCb29sZWFuQXJyYXkgXCIgK1xuICAgICAgXCJCeXRlQXJyYXkgQ2hhciBDaGFyQXJyYXkgRGVwcmVjYXRpb25MZXZlbCBEb3VibGVBcnJheSBFbnVtIEZsb2F0QXJyYXkgRnVuY3Rpb24gSW50IEludEFycmF5IExhenkgXCIgK1xuICAgICAgXCJMYXp5VGhyZWFkU2FmZXR5TW9kZSBMb25nQXJyYXkgTm90aGluZyBTaG9ydEFycmF5IFVuaXRcIlxuICAgICksXG4gICAgaW50ZW5kU3dpdGNoOiBmYWxzZSxcbiAgICBpbmRlbnRTdGF0ZW1lbnRzOiBmYWxzZSxcbiAgICBtdWx0aUxpbmVTdHJpbmdzOiB0cnVlLFxuICAgIG51bWJlcjogL14oPzoweFthLWZcXGRfXSt8MGJbMDFfXSt8KD86W1xcZF9dKyhcXC5cXGQrKT98XFwuXFxkKykoPzplWy0rXT9bXFxkX10rKT8pKHV8bGw/fGx8Zik/L2ksXG4gICAgYmxvY2tLZXl3b3Jkczogd29yZHMoXCJjYXRjaCBjbGFzcyBkbyBlbHNlIGZpbmFsbHkgZm9yIGlmIHdoZXJlIHRyeSB3aGlsZSBlbnVtXCIpLFxuICAgIGRlZktleXdvcmRzOiB3b3JkcyhcImNsYXNzIHZhbCB2YXIgb2JqZWN0IGludGVyZmFjZSBmdW5cIiksXG4gICAgYXRvbXM6IHdvcmRzKFwidHJ1ZSBmYWxzZSBudWxsIHRoaXNcIiksXG4gICAgaG9va3M6IHtcbiAgICAgIFwiQFwiOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgICAgfSxcbiAgICAgICdcIic6IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbktvdGxpblN0cmluZyhzdHJlYW0ubWF0Y2goJ1wiXCInKSk7XG4gICAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vZGVQcm9wczoge2Nsb3NlQnJhY2tldHM6IHt0cmlwbGVzOiAnXCInfX1cbiAgfSk7XG5cbiAgZGVmKFtcIngtc2hhZGVyL3gtdmVydGV4XCIsIFwieC1zaGFkZXIveC1mcmFnbWVudFwiXSwge1xuICAgIG5hbWU6IFwiY2xpa2VcIixcbiAgICBrZXl3b3Jkczogd29yZHMoXCJzYW1wbGVyMUQgc2FtcGxlcjJEIHNhbXBsZXIzRCBzYW1wbGVyQ3ViZSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwic2FtcGxlcjFEU2hhZG93IHNhbXBsZXIyRFNoYWRvdyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiY29uc3QgYXR0cmlidXRlIHVuaWZvcm0gdmFyeWluZyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiYnJlYWsgY29udGludWUgZGlzY2FyZCByZXR1cm4gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImZvciB3aGlsZSBkbyBpZiBlbHNlIHN0cnVjdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiaW4gb3V0IGlub3V0XCIpLFxuICAgIHR5cGVzOiB3b3JkcyhcImZsb2F0IGludCBib29sIHZvaWQgXCIgK1xuICAgICAgICAgICAgICAgICBcInZlYzIgdmVjMyB2ZWM0IGl2ZWMyIGl2ZWMzIGl2ZWM0IGJ2ZWMyIGJ2ZWMzIGJ2ZWM0IFwiICtcbiAgICAgICAgICAgICAgICAgXCJtYXQyIG1hdDMgbWF0NFwiKSxcbiAgICBibG9ja0tleXdvcmRzOiB3b3JkcyhcImZvciB3aGlsZSBkbyBpZiBlbHNlIHN0cnVjdFwiKSxcbiAgICBidWlsdGluOiB3b3JkcyhcInJhZGlhbnMgZGVncmVlcyBzaW4gY29zIHRhbiBhc2luIGFjb3MgYXRhbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwicG93IGV4cCBsb2cgZXhwMiBzcXJ0IGludmVyc2VzcXJ0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJhYnMgc2lnbiBmbG9vciBjZWlsIGZyYWN0IG1vZCBtaW4gbWF4IGNsYW1wIG1peCBzdGVwIHNtb290aHN0ZXAgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImxlbmd0aCBkaXN0YW5jZSBkb3QgY3Jvc3Mgbm9ybWFsaXplIGZ0cmFuc2Zvcm0gZmFjZWZvcndhcmQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInJlZmxlY3QgcmVmcmFjdCBtYXRyaXhDb21wTXVsdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwibGVzc1RoYW4gbGVzc1RoYW5FcXVhbCBncmVhdGVyVGhhbiBncmVhdGVyVGhhbkVxdWFsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJlcXVhbCBub3RFcXVhbCBhbnkgYWxsIG5vdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwidGV4dHVyZTFEIHRleHR1cmUxRFByb2ogdGV4dHVyZTFETG9kIHRleHR1cmUxRFByb2pMb2QgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInRleHR1cmUyRCB0ZXh0dXJlMkRQcm9qIHRleHR1cmUyRExvZCB0ZXh0dXJlMkRQcm9qTG9kIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0dXJlM0QgdGV4dHVyZTNEUHJvaiB0ZXh0dXJlM0RMb2QgdGV4dHVyZTNEUHJvakxvZCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwidGV4dHVyZUN1YmUgdGV4dHVyZUN1YmVMb2QgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInNoYWRvdzFEIHNoYWRvdzJEIHNoYWRvdzFEUHJvaiBzaGFkb3cyRFByb2ogXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInNoYWRvdzFETG9kIHNoYWRvdzJETG9kIHNoYWRvdzFEUHJvakxvZCBzaGFkb3cyRFByb2pMb2QgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImRGZHggZEZkeSBmd2lkdGggXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIm5vaXNlMSBub2lzZTIgbm9pc2UzIG5vaXNlNFwiKSxcbiAgICBhdG9tczogd29yZHMoXCJ0cnVlIGZhbHNlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX0ZyYWdDb2xvciBnbF9TZWNvbmRhcnlDb2xvciBnbF9Ob3JtYWwgZ2xfVmVydGV4IFwiICtcbiAgICAgICAgICAgICAgICBcImdsX011bHRpVGV4Q29vcmQwIGdsX011bHRpVGV4Q29vcmQxIGdsX011bHRpVGV4Q29vcmQyIGdsX011bHRpVGV4Q29vcmQzIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX011bHRpVGV4Q29vcmQ0IGdsX011bHRpVGV4Q29vcmQ1IGdsX011bHRpVGV4Q29vcmQ2IGdsX011bHRpVGV4Q29vcmQ3IFwiICtcbiAgICAgICAgICAgICAgICBcImdsX0ZvZ0Nvb3JkIGdsX1BvaW50Q29vcmQgXCIgK1xuICAgICAgICAgICAgICAgIFwiZ2xfUG9zaXRpb24gZ2xfUG9pbnRTaXplIGdsX0NsaXBWZXJ0ZXggXCIgK1xuICAgICAgICAgICAgICAgIFwiZ2xfRnJvbnRDb2xvciBnbF9CYWNrQ29sb3IgZ2xfRnJvbnRTZWNvbmRhcnlDb2xvciBnbF9CYWNrU2Vjb25kYXJ5Q29sb3IgXCIgK1xuICAgICAgICAgICAgICAgIFwiZ2xfVGV4Q29vcmQgZ2xfRm9nRnJhZ0Nvb3JkIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX0ZyYWdDb29yZCBnbF9Gcm9udEZhY2luZyBcIiArXG4gICAgICAgICAgICAgICAgXCJnbF9GcmFnRGF0YSBnbF9GcmFnRGVwdGggXCIgK1xuICAgICAgICAgICAgICAgIFwiZ2xfTW9kZWxWaWV3TWF0cml4IGdsX1Byb2plY3Rpb25NYXRyaXggZ2xfTW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCBcIiArXG4gICAgICAgICAgICAgICAgXCJnbF9UZXh0dXJlTWF0cml4IGdsX05vcm1hbE1hdHJpeCBnbF9Nb2RlbFZpZXdNYXRyaXhJbnZlcnNlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlIGdsX01vZGVsVmlld1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX1RleHVyZU1hdHJpeFRyYW5zcG9zZSBnbF9Nb2RlbFZpZXdNYXRyaXhJbnZlcnNlVHJhbnNwb3NlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlVHJhbnNwb3NlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX01vZGVsVmlld1Byb2plY3Rpb25NYXRyaXhJbnZlcnNlVHJhbnNwb3NlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX1RleHR1cmVNYXRyaXhJbnZlcnNlVHJhbnNwb3NlIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX05vcm1hbFNjYWxlIGdsX0RlcHRoUmFuZ2UgZ2xfQ2xpcFBsYW5lIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX1BvaW50IGdsX0Zyb250TWF0ZXJpYWwgZ2xfQmFja01hdGVyaWFsIGdsX0xpZ2h0U291cmNlIGdsX0xpZ2h0TW9kZWwgXCIgK1xuICAgICAgICAgICAgICAgIFwiZ2xfRnJvbnRMaWdodE1vZGVsUHJvZHVjdCBnbF9CYWNrTGlnaHRNb2RlbFByb2R1Y3QgXCIgK1xuICAgICAgICAgICAgICAgIFwiZ2xfVGV4dHVyZUNvbG9yIGdsX0V5ZVBsYW5lUyBnbF9FeWVQbGFuZVQgZ2xfRXllUGxhbmVSIGdsX0V5ZVBsYW5lUSBcIiArXG4gICAgICAgICAgICAgICAgXCJnbF9Gb2dQYXJhbWV0ZXJzIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX01heExpZ2h0cyBnbF9NYXhDbGlwUGxhbmVzIGdsX01heFRleHR1cmVVbml0cyBnbF9NYXhUZXh0dXJlQ29vcmRzIFwiICtcbiAgICAgICAgICAgICAgICBcImdsX01heFZlcnRleEF0dHJpYnMgZ2xfTWF4VmVydGV4VW5pZm9ybUNvbXBvbmVudHMgZ2xfTWF4VmFyeWluZ0Zsb2F0cyBcIiArXG4gICAgICAgICAgICAgICAgXCJnbF9NYXhWZXJ0ZXhUZXh0dXJlSW1hZ2VVbml0cyBnbF9NYXhUZXh0dXJlSW1hZ2VVbml0cyBcIiArXG4gICAgICAgICAgICAgICAgXCJnbF9NYXhGcmFnbWVudFVuaWZvcm1Db21wb25lbnRzIGdsX01heENvbWJpbmVUZXh0dXJlSW1hZ2VVbml0cyBcIiArXG4gICAgICAgICAgICAgICAgXCJnbF9NYXhEcmF3QnVmZmVyc1wiKSxcbiAgICBpbmRlbnRTd2l0Y2g6IGZhbHNlLFxuICAgIGhvb2tzOiB7XCIjXCI6IGNwcEhvb2t9LFxuICAgIG1vZGVQcm9wczoge2ZvbGQ6IFtcImJyYWNlXCIsIFwiaW5jbHVkZVwiXX1cbiAgfSk7XG5cbiAgZGVmKFwidGV4dC94LW5lc2NcIiwge1xuICAgIG5hbWU6IFwiY2xpa2VcIixcbiAgICBrZXl3b3Jkczogd29yZHMoY0tleXdvcmRzICsgXCJhcyBhdG9taWMgYXN5bmMgY2FsbCBjb21tYW5kIGNvbXBvbmVudCBjb21wb25lbnRzIGNvbmZpZ3VyYXRpb24gZXZlbnQgZ2VuZXJpYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiaW1wbGVtZW50YXRpb24gaW5jbHVkZXMgaW50ZXJmYWNlIG1vZHVsZSBuZXcgbm9yYWNlIG54X3N0cnVjdCBueF91bmlvbiBwb3N0IHByb3ZpZGVzIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJzaWduYWwgdGFzayB1c2VzIGFic3RyYWN0IGV4dGVuZHNcIiksXG4gICAgdHlwZXM6IHdvcmRzKGNUeXBlcyksXG4gICAgYmxvY2tLZXl3b3Jkczogd29yZHMoXCJjYXNlIGRvIGVsc2UgZm9yIGlmIHN3aXRjaCB3aGlsZSBzdHJ1Y3RcIiksXG4gICAgYXRvbXM6IHdvcmRzKFwibnVsbCB0cnVlIGZhbHNlXCIpLFxuICAgIGhvb2tzOiB7XCIjXCI6IGNwcEhvb2t9LFxuICAgIG1vZGVQcm9wczoge2ZvbGQ6IFtcImJyYWNlXCIsIFwiaW5jbHVkZVwiXX1cbiAgfSk7XG5cbiAgZGVmKFwidGV4dC94LW9iamVjdGl2ZWNcIiwge1xuICAgIG5hbWU6IFwiY2xpa2VcIixcbiAgICBrZXl3b3Jkczogd29yZHMoY0tleXdvcmRzICsgXCJpbmxpbmUgcmVzdHJpY3QgX0Jvb2wgX0NvbXBsZXggX0ltYWdpbmFyeSBCT09MIENsYXNzIGJ5Y29weSBieXJlZiBpZCBJTVAgaW4gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcImlub3V0IG5pbCBvbmV3YXkgb3V0IFByb3RvY29sIFNFTCBzZWxmIHN1cGVyIGF0b21pYyBub25hdG9taWMgcmV0YWluIGNvcHkgcmVhZHdyaXRlIHJlYWRvbmx5XCIpLFxuICAgIHR5cGVzOiB3b3JkcyhjVHlwZXMpLFxuICAgIGF0b21zOiB3b3JkcyhcIllFUyBOTyBOVUxMIE5JTEwgT04gT0ZGIHRydWUgZmFsc2VcIiksXG4gICAgaG9va3M6IHtcbiAgICAgIFwiQFwiOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkXS8pO1xuICAgICAgICByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgICB9LFxuICAgICAgXCIjXCI6IGNwcEhvb2ssXG4gICAgICBpbmRlbnQ6IGZ1bmN0aW9uKF9zdGF0ZSwgY3R4LCB0ZXh0QWZ0ZXIpIHtcbiAgICAgICAgaWYgKGN0eC50eXBlID09IFwic3RhdGVtZW50XCIgJiYgL15AXFx3Ly50ZXN0KHRleHRBZnRlcikpIHJldHVybiBjdHguaW5kZW50ZWRcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vZGVQcm9wczoge2ZvbGQ6IFwiYnJhY2VcIn1cbiAgfSk7XG5cbiAgZGVmKFwidGV4dC94LXNxdWlycmVsXCIsIHtcbiAgICBuYW1lOiBcImNsaWtlXCIsXG4gICAga2V5d29yZHM6IHdvcmRzKFwiYmFzZSBicmVhayBjbG9uZSBjb250aW51ZSBjb25zdCBkZWZhdWx0IGRlbGV0ZSBlbnVtIGV4dGVuZHMgZnVuY3Rpb24gaW4gY2xhc3NcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIGZvcmVhY2ggbG9jYWwgcmVzdW1lIHJldHVybiB0aGlzIHRocm93IHR5cGVvZiB5aWVsZCBjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIHN0YXRpY1wiKSxcbiAgICB0eXBlczogd29yZHMoY1R5cGVzKSxcbiAgICBibG9ja0tleXdvcmRzOiB3b3JkcyhcImNhc2UgY2F0Y2ggY2xhc3MgZWxzZSBmb3IgZm9yZWFjaCBpZiBzd2l0Y2ggdHJ5IHdoaWxlXCIpLFxuICAgIGRlZktleXdvcmRzOiB3b3JkcyhcImZ1bmN0aW9uIGxvY2FsIGNsYXNzXCIpLFxuICAgIHR5cGVGaXJzdERlZmluaXRpb25zOiB0cnVlLFxuICAgIGF0b21zOiB3b3JkcyhcInRydWUgZmFsc2UgbnVsbFwiKSxcbiAgICBob29rczoge1wiI1wiOiBjcHBIb29rfSxcbiAgICBtb2RlUHJvcHM6IHtmb2xkOiBbXCJicmFjZVwiLCBcImluY2x1ZGVcIl19XG4gIH0pO1xuXG4gIC8vIENleWxvbiBTdHJpbmdzIG5lZWQgdG8gZGVhbCB3aXRoIGludGVycG9sYXRpb25cbiAgdmFyIHN0cmluZ1Rva2VuaXplciA9IG51bGw7XG4gIGZ1bmN0aW9uIHRva2VuQ2V5bG9uU3RyaW5nKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgbmV4dCwgZW5kID0gZmFsc2U7XG4gICAgICB3aGlsZSAoIXN0cmVhbS5lb2woKSkge1xuICAgICAgICBpZiAoIWVzY2FwZWQgJiYgc3RyZWFtLm1hdGNoKCdcIicpICYmXG4gICAgICAgICAgICAgICh0eXBlID09IFwic2luZ2xlXCIgfHwgc3RyZWFtLm1hdGNoKCdcIlwiJykpKSB7XG4gICAgICAgICAgZW5kID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVzY2FwZWQgJiYgc3RyZWFtLm1hdGNoKCdgYCcpKSB7XG4gICAgICAgICAgc3RyaW5nVG9rZW5pemVyID0gdG9rZW5DZXlsb25TdHJpbmcodHlwZSk7XG4gICAgICAgICAgZW5kID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gc3RyZWFtLm5leHQoKTtcbiAgICAgICAgZXNjYXBlZCA9IHR5cGUgPT0gXCJzaW5nbGVcIiAmJiAhZXNjYXBlZCAmJiBuZXh0ID09IFwiXFxcXFwiO1xuICAgICAgfVxuICAgICAgaWYgKGVuZClcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IG51bGw7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9XG4gIH1cblxuICBkZWYoXCJ0ZXh0L3gtY2V5bG9uXCIsIHtcbiAgICBuYW1lOiBcImNsaWtlXCIsXG4gICAga2V5d29yZHM6IHdvcmRzKFwiYWJzdHJhY3RzIGFsaWFzIGFzc2VtYmx5IGFzc2VydCBhc3NpZ24gYnJlYWsgY2FzZSBjYXRjaCBjbGFzcyBjb250aW51ZSBkeW5hbWljIGVsc2VcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIGV4aXN0cyBleHRlbmRzIGZpbmFsbHkgZm9yIGZ1bmN0aW9uIGdpdmVuIGlmIGltcG9ydCBpbiBpbnRlcmZhY2UgaXMgbGV0IG1vZHVsZSBuZXdcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIG5vbmVtcHR5IG9iamVjdCBvZiBvdXQgb3V0ZXIgcGFja2FnZSByZXR1cm4gc2F0aXNmaWVzIHN1cGVyIHN3aXRjaCB0aGVuIHRoaXMgdGhyb3dcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIHRyeSB2YWx1ZSB2b2lkIHdoaWxlXCIpLFxuICAgIHR5cGVzOiBmdW5jdGlvbih3b3JkKSB7XG4gICAgICAgIC8vIEluIENleWxvbiBhbGwgaWRlbnRpZmllcnMgdGhhdCBzdGFydCB3aXRoIGFuIHVwcGVyY2FzZSBhcmUgdHlwZXNcbiAgICAgICAgdmFyIGZpcnN0ID0gd29yZC5jaGFyQXQoMCk7XG4gICAgICAgIHJldHVybiAoZmlyc3QgPT09IGZpcnN0LnRvVXBwZXJDYXNlKCkgJiYgZmlyc3QgIT09IGZpcnN0LnRvTG93ZXJDYXNlKCkpO1xuICAgIH0sXG4gICAgYmxvY2tLZXl3b3Jkczogd29yZHMoXCJjYXNlIGNhdGNoIGNsYXNzIGR5bmFtaWMgZWxzZSBmaW5hbGx5IGZvciBmdW5jdGlvbiBpZiBpbnRlcmZhY2UgbW9kdWxlIG5ldyBvYmplY3Qgc3dpdGNoIHRyeSB3aGlsZVwiKSxcbiAgICBkZWZLZXl3b3Jkczogd29yZHMoXCJjbGFzcyBkeW5hbWljIGZ1bmN0aW9uIGludGVyZmFjZSBtb2R1bGUgb2JqZWN0IHBhY2thZ2UgdmFsdWVcIiksXG4gICAgYnVpbHRpbjogd29yZHMoXCJhYnN0cmFjdCBhY3R1YWwgYWxpYXNlZCBhbm5vdGF0aW9uIGJ5IGRlZmF1bHQgZGVwcmVjYXRlZCBkb2MgZmluYWwgZm9ybWFsIGxhdGUgbGljZW5zZVwiICtcbiAgICAgICAgICAgICAgICAgICBcIiBuYXRpdmUgb3B0aW9uYWwgc2VhbGVkIHNlZSBzZXJpYWxpemFibGUgc2hhcmVkIHN1cHByZXNzV2FybmluZ3MgdGFnZ2VkIHRocm93cyB2YXJpYWJsZVwiKSxcbiAgICBpc1B1bmN0dWF0aW9uQ2hhcjogL1tcXFtcXF17fVxcKFxcKSw7XFw6XFwuYF0vLFxuICAgIGlzT3BlcmF0b3JDaGFyOiAvWytcXC0qJiU9PD4hP3xefjpcXC9dLyxcbiAgICBudW1iZXJTdGFydDogL1tcXGQjJF0vLFxuICAgIG51bWJlcjogL14oPzojW1xcZGEtZkEtRl9dK3xcXCRbMDFfXSt8W1xcZF9dK1trTUdUUG11bnBmXT98W1xcZF9dK1xcLltcXGRfXSsoPzpbZUVdWy0rXT9cXGQrfFtrTUdUUG11bnBmXXwpfCkvaSxcbiAgICBtdWx0aUxpbmVTdHJpbmdzOiB0cnVlLFxuICAgIHR5cGVGaXJzdERlZmluaXRpb25zOiB0cnVlLFxuICAgIGF0b21zOiB3b3JkcyhcInRydWUgZmFsc2UgbnVsbCBsYXJnZXIgc21hbGxlciBlcXVhbCBlbXB0eSBmaW5pc2hlZFwiKSxcbiAgICBpbmRlbnRTd2l0Y2g6IGZhbHNlLFxuICAgIHN0eWxlRGVmczogZmFsc2UsXG4gICAgaG9va3M6IHtcbiAgICAgIFwiQFwiOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXFx3XFwkX10vKTtcbiAgICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgICAgfSxcbiAgICAgICdcIic6IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ2V5bG9uU3RyaW5nKHN0cmVhbS5tYXRjaCgnXCJcIicpID8gXCJ0cmlwbGVcIiA6IFwic2luZ2xlXCIpO1xuICAgICAgICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSxcbiAgICAgICdgJzogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICAgIGlmICghc3RyaW5nVG9rZW5pemVyIHx8ICFzdHJlYW0ubWF0Y2goJ2AnKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gc3RyaW5nVG9rZW5pemVyO1xuICAgICAgICAgIHN0cmluZ1Rva2VuaXplciA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgXCInXCI6IGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgICAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXCRfXFx4YTEtXFx1ZmZmZl0vKTtcbiAgICAgICAgcmV0dXJuIFwiYXRvbVwiO1xuICAgICAgfSxcbiAgICAgIHRva2VuOiBmdW5jdGlvbihfc3RyZWFtLCBzdGF0ZSwgc3R5bGUpIHtcbiAgICAgICAgICBpZiAoKHN0eWxlID09IFwidmFyaWFibGVcIiB8fCBzdHlsZSA9PSBcInR5cGVcIikgJiZcbiAgICAgICAgICAgICAgc3RhdGUucHJldlRva2VuID09IFwiLlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ2YXJpYWJsZS0yXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtb2RlUHJvcHM6IHtcbiAgICAgICAgZm9sZDogW1wiYnJhY2VcIiwgXCJpbXBvcnRcIl0sXG4gICAgICAgIGNsb3NlQnJhY2tldHM6IHt0cmlwbGVzOiAnXCInfVxuICAgIH1cbiAgfSk7XG5cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL2NsaWtlL2NsaWtlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnNcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRVxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpKTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbkNvZGVNaXJyb3IuZGVmaW5lTW9kZShcInlhbWxcIiwgZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGNvbnMgPSBbJ3RydWUnLCAnZmFsc2UnLCAnb24nLCAnb2ZmJywgJ3llcycsICdubyddO1xuICB2YXIga2V5d29yZFJlZ2V4ID0gbmV3IFJlZ0V4cChcIlxcXFxiKChcIitjb25zLmpvaW4oXCIpfChcIikrXCIpKSRcIiwgJ2knKTtcblxuICByZXR1cm4ge1xuICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgICB2YXIgY2ggPSBzdHJlYW0ucGVlaygpO1xuICAgICAgdmFyIGVzYyA9IHN0YXRlLmVzY2FwZWQ7XG4gICAgICBzdGF0ZS5lc2NhcGVkID0gZmFsc2U7XG4gICAgICAvKiBjb21tZW50cyAqL1xuICAgICAgaWYgKGNoID09IFwiI1wiICYmIChzdHJlYW0ucG9zID09IDAgfHwgL1xccy8udGVzdChzdHJlYW0uc3RyaW5nLmNoYXJBdChzdHJlYW0ucG9zIC0gMSkpKSkge1xuICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXignKFteJ118XFxcXC4pKic/fFwiKFteXCJdfFxcXFwuKSpcIj8pLykpXG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuXG4gICAgICBpZiAoc3RhdGUubGl0ZXJhbCAmJiBzdHJlYW0uaW5kZW50YXRpb24oKSA+IHN0YXRlLmtleUNvbCkge1xuICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7IHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saXRlcmFsKSB7IHN0YXRlLmxpdGVyYWwgPSBmYWxzZTsgfVxuICAgICAgaWYgKHN0cmVhbS5zb2woKSkge1xuICAgICAgICBzdGF0ZS5rZXlDb2wgPSAwO1xuICAgICAgICBzdGF0ZS5wYWlyID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBhaXJTdGFydCA9IGZhbHNlO1xuICAgICAgICAvKiBkb2N1bWVudCBzdGFydCAqL1xuICAgICAgICBpZihzdHJlYW0ubWF0Y2goLy0tLS8pKSB7IHJldHVybiBcImRlZlwiOyB9XG4gICAgICAgIC8qIGRvY3VtZW50IGVuZCAqL1xuICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKC9cXC5cXC5cXC4vKSkgeyByZXR1cm4gXCJkZWZcIjsgfVxuICAgICAgICAvKiBhcnJheSBsaXN0IGl0ZW0gKi9cbiAgICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXFxzKi1cXHMrLykpIHsgcmV0dXJuICdtZXRhJzsgfVxuICAgICAgfVxuICAgICAgLyogaW5saW5lIHBhaXJzL2xpc3RzICovXG4gICAgICBpZiAoc3RyZWFtLm1hdGNoKC9eKFxce3xcXH18XFxbfFxcXSkvKSkge1xuICAgICAgICBpZiAoY2ggPT0gJ3snKVxuICAgICAgICAgIHN0YXRlLmlubGluZVBhaXJzKys7XG4gICAgICAgIGVsc2UgaWYgKGNoID09ICd9JylcbiAgICAgICAgICBzdGF0ZS5pbmxpbmVQYWlycy0tO1xuICAgICAgICBlbHNlIGlmIChjaCA9PSAnWycpXG4gICAgICAgICAgc3RhdGUuaW5saW5lTGlzdCsrO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgc3RhdGUuaW5saW5lTGlzdC0tO1xuICAgICAgICByZXR1cm4gJ21ldGEnO1xuICAgICAgfVxuXG4gICAgICAvKiBsaXN0IHNlcGVyYXRvciAqL1xuICAgICAgaWYgKHN0YXRlLmlubGluZUxpc3QgPiAwICYmICFlc2MgJiYgY2ggPT0gJywnKSB7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIHJldHVybiAnbWV0YSc7XG4gICAgICB9XG4gICAgICAvKiBwYWlycyBzZXBlcmF0b3IgKi9cbiAgICAgIGlmIChzdGF0ZS5pbmxpbmVQYWlycyA+IDAgJiYgIWVzYyAmJiBjaCA9PSAnLCcpIHtcbiAgICAgICAgc3RhdGUua2V5Q29sID0gMDtcbiAgICAgICAgc3RhdGUucGFpciA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wYWlyU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgICAgcmV0dXJuICdtZXRhJztcbiAgICAgIH1cblxuICAgICAgLyogc3RhcnQgb2YgdmFsdWUgb2YgYSBwYWlyICovXG4gICAgICBpZiAoc3RhdGUucGFpclN0YXJ0KSB7XG4gICAgICAgIC8qIGJsb2NrIGxpdGVyYWxzICovXG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXHMqKFxcfHxcXD4pXFxzKi8pKSB7IHN0YXRlLmxpdGVyYWwgPSB0cnVlOyByZXR1cm4gJ21ldGEnOyB9O1xuICAgICAgICAvKiByZWZlcmVuY2VzICovXG4gICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL15cXHMqKFxcJnxcXCopW2EtejAtOVxcLl8tXStcXGIvaSkpIHsgcmV0dXJuICd2YXJpYWJsZS0yJzsgfVxuICAgICAgICAvKiBudW1iZXJzICovXG4gICAgICAgIGlmIChzdGF0ZS5pbmxpbmVQYWlycyA9PSAwICYmIHN0cmVhbS5tYXRjaCgvXlxccyotP1swLTlcXC5cXCxdK1xccz8kLykpIHsgcmV0dXJuICdudW1iZXInOyB9XG4gICAgICAgIGlmIChzdGF0ZS5pbmxpbmVQYWlycyA+IDAgJiYgc3RyZWFtLm1hdGNoKC9eXFxzKi0/WzAtOVxcLlxcLF0rXFxzPyg/PSgsfH0pKS8pKSB7IHJldHVybiAnbnVtYmVyJzsgfVxuICAgICAgICAvKiBrZXl3b3JkcyAqL1xuICAgICAgICBpZiAoc3RyZWFtLm1hdGNoKGtleXdvcmRSZWdleCkpIHsgcmV0dXJuICdrZXl3b3JkJzsgfVxuICAgICAgfVxuXG4gICAgICAvKiBwYWlycyAoYXNzb2NpYXRpdmUgYXJyYXlzKSAtPiBrZXkgKi9cbiAgICAgIGlmICghc3RhdGUucGFpciAmJiBzdHJlYW0ubWF0Y2goL15cXHMqKD86WyxcXFtcXF17fSYqIXw+J1wiJUBgXVteXFxzJ1wiOl18W14sXFxbXFxde30jJiohfD4nXCIlQGBdKVteI10qPyg/PVxccyo6KCR8XFxzKSkvKSkge1xuICAgICAgICBzdGF0ZS5wYWlyID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUua2V5Q29sID0gc3RyZWFtLmluZGVudGF0aW9uKCk7XG4gICAgICAgIHJldHVybiBcImF0b21cIjtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5wYWlyICYmIHN0cmVhbS5tYXRjaCgvXjpcXHMqLykpIHsgc3RhdGUucGFpclN0YXJ0ID0gdHJ1ZTsgcmV0dXJuICdtZXRhJzsgfVxuXG4gICAgICAvKiBub3RoaW5nIGZvdW5kLCBjb250aW51ZSAqL1xuICAgICAgc3RhdGUucGFpclN0YXJ0ID0gZmFsc2U7XG4gICAgICBzdGF0ZS5lc2NhcGVkID0gKGNoID09ICdcXFxcJyk7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhaXI6IGZhbHNlLFxuICAgICAgICBwYWlyU3RhcnQ6IGZhbHNlLFxuICAgICAgICBrZXlDb2w6IDAsXG4gICAgICAgIGlubGluZVBhaXJzOiAwLFxuICAgICAgICBpbmxpbmVMaXN0OiAwLFxuICAgICAgICBsaXRlcmFsOiBmYWxzZSxcbiAgICAgICAgZXNjYXBlZDogZmFsc2VcbiAgICAgIH07XG4gICAgfSxcbiAgICBsaW5lQ29tbWVudDogXCIjXCJcbiAgfTtcbn0pO1xuXG5Db2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gteWFtbFwiLCBcInlhbWxcIik7XG5Db2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3lhbWxcIiwgXCJ5YW1sXCIpO1xuXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvZGVtaXJyb3IvbW9kZS95YW1sL3lhbWwuanNcbi8vIG1vZHVsZSBpZCA9IDE4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGxvd3MgXCJzdWdnZXN0LWlzaFwiIGZpZWxkcyAoU3VnZ2VzdCwgUmVsYXRlLCBldGMpIHRvIHdvcmsgb3V0IHRoZSBrZXkgdXNlZCB0byBnZXQgcHJlZmV0Y2hlZFxuICAgICAgICAgKiBzdWdnZXN0aW9ucyBnZW5lcmF0ZWQgb24gdGhlIHNlcnZlciBzaWRlIGFuZCBpbnNlcnRlZCBpbnRvIFN0YXRhbWljLlB1Ymxpc2guc3VnZ2VzdGlvbnMuXG4gICAgICAgICAqIFRoaXMgd2lsbCBwcmV2ZW50IGFuIEFKQVggcmVxdWVzdCBmb3IgZXZlcnkgaW5zdGFuY2Ugb2YgdGhpcyBmaWVsZHR5cGUuXG4gICAgICAgICAqL1xuICAgICAgICBzdWdnZXN0S2V5KCkge1xuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IF8ub21pdCh0aGlzLmNvbmZpZywgW1xuICAgICAgICAgICAgICAgICdkaXNwbGF5JywgJ2luc3RydWN0aW9ucycsICdtYXhfaXRlbXMnLCAnbG9jYWxpemFibGUnLCAncmVxdWlyZWQnLCAnbmFtZScsICdwbGFjZWhvbGRlcidcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0dldHNTdWdnZXN0S2V5LmpzIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuXG5WdWUuY29uZmlnLmRlYnVnID0gZmFsc2U7XG5WdWUuY29uZmlnLnNpbGVudCA9IHRydWU7XG5WdWUuY29uZmlnLmRldnRvb2xzID0gdHJ1ZTtcblxud2luZG93LlZ1ZSA9IFZ1ZTtcbndpbmRvdy5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xud2luZG93LiQgPSB3aW5kb3cualF1ZXJ5ID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG53aW5kb3cuTWVkaXVtRWRpdG9yID0gcmVxdWlyZSgnbWVkaXVtLWVkaXRvcicpO1xud2luZG93Lm1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xud2luZG93LnJhbmd5ID0gcmVxdWlyZSgncmFuZ3knKTtcblxucmVxdWlyZSgnLi9ib290c3RyYXAvdnVlLXJlc291cmNlJyk7XG5yZXF1aXJlKCcuL2Jvb3RzdHJhcC9nbG9iYWxzJyk7XG5yZXF1aXJlKCcuL2Jvb3RzdHJhcC9wb2x5ZmlsbHMnKTtcbnJlcXVpcmUoJy4vYm9vdHN0cmFwL3VuZGVyc2NvcmUtbWl4aW5zJyk7XG5yZXF1aXJlKCcuL2Jvb3RzdHJhcC9qcXVlcnktcGx1Z2lucycpO1xucmVxdWlyZSgnLi9ib290c3RyYXAvcmVkYWN0b3ItcGx1Z2lucycpO1xucmVxdWlyZSgnLi9sMTBuL2wxMG4nKTtcbnJlcXVpcmUoJy4vYm9vdHN0cmFwL3BsdWdpbnMnKTtcbnJlcXVpcmUoJy4vYm9vdHN0cmFwL2ZpbHRlcnMnKTtcbnJlcXVpcmUoJy4vYm9vdHN0cmFwL21peGlucycpO1xucmVxdWlyZSgnLi9ib290c3RyYXAvY29tcG9uZW50cycpO1xucmVxdWlyZSgnLi9ib290c3RyYXAvZmllbGR0eXBlcycpO1xucmVxdWlyZSgnLi9ib290c3RyYXAvZGlyZWN0aXZlcycpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAuanMiLCIvKipcclxuICogUmFuZ3ksIGEgY3Jvc3MtYnJvd3NlciBKYXZhU2NyaXB0IHJhbmdlIGFuZCBzZWxlY3Rpb24gbGlicmFyeVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGltZG93bi9yYW5neVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgMjAxNSwgVGltIERvd25cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4gKiBWZXJzaW9uOiAxLjMuMFxyXG4gKiBCdWlsZCBkYXRlOiAxMCBNYXkgMjAxNVxyXG4gKi9cclxuXHJcbihmdW5jdGlvbihmYWN0b3J5LCByb290KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgLy8gTm9kZS9Db21tb25KUyBzdHlsZVxyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBObyBBTUQgb3IgQ29tbW9uSlMgc3VwcG9ydCBzbyB3ZSBwbGFjZSBSYW5neSBpbiAocHJvYmFibHkpIHRoZSBnbG9iYWwgdmFyaWFibGVcclxuICAgICAgICByb290LnJhbmd5ID0gZmFjdG9yeSgpO1xyXG4gICAgfVxyXG59KShmdW5jdGlvbigpIHtcclxuXHJcbiAgICB2YXIgT0JKRUNUID0gXCJvYmplY3RcIiwgRlVOQ1RJT04gPSBcImZ1bmN0aW9uXCIsIFVOREVGSU5FRCA9IFwidW5kZWZpbmVkXCI7XHJcblxyXG4gICAgLy8gTWluaW1hbCBzZXQgb2YgcHJvcGVydGllcyByZXF1aXJlZCBmb3IgRE9NIExldmVsIDIgUmFuZ2UgY29tcGxpYW5jZS4gQ29tcGFyaXNvbiBjb25zdGFudHMgc3VjaCBhcyBTVEFSVF9UT19TVEFSVFxyXG4gICAgLy8gYXJlIG9taXR0ZWQgYmVjYXVzZSByYW5nZXMgaW4gS0hUTUwgZG8gbm90IGhhdmUgdGhlbSBidXQgb3RoZXJ3aXNlIHdvcmsgcGVyZmVjdGx5IHdlbGwuIFNlZSBpc3N1ZSAxMTMuXHJcbiAgICB2YXIgZG9tUmFuZ2VQcm9wZXJ0aWVzID0gW1wic3RhcnRDb250YWluZXJcIiwgXCJzdGFydE9mZnNldFwiLCBcImVuZENvbnRhaW5lclwiLCBcImVuZE9mZnNldFwiLCBcImNvbGxhcHNlZFwiLFxyXG4gICAgICAgIFwiY29tbW9uQW5jZXN0b3JDb250YWluZXJcIl07XHJcblxyXG4gICAgLy8gTWluaW1hbCBzZXQgb2YgbWV0aG9kcyByZXF1aXJlZCBmb3IgRE9NIExldmVsIDIgUmFuZ2UgY29tcGxpYW5jZVxyXG4gICAgdmFyIGRvbVJhbmdlTWV0aG9kcyA9IFtcInNldFN0YXJ0XCIsIFwic2V0U3RhcnRCZWZvcmVcIiwgXCJzZXRTdGFydEFmdGVyXCIsIFwic2V0RW5kXCIsIFwic2V0RW5kQmVmb3JlXCIsXHJcbiAgICAgICAgXCJzZXRFbmRBZnRlclwiLCBcImNvbGxhcHNlXCIsIFwic2VsZWN0Tm9kZVwiLCBcInNlbGVjdE5vZGVDb250ZW50c1wiLCBcImNvbXBhcmVCb3VuZGFyeVBvaW50c1wiLCBcImRlbGV0ZUNvbnRlbnRzXCIsXHJcbiAgICAgICAgXCJleHRyYWN0Q29udGVudHNcIiwgXCJjbG9uZUNvbnRlbnRzXCIsIFwiaW5zZXJ0Tm9kZVwiLCBcInN1cnJvdW5kQ29udGVudHNcIiwgXCJjbG9uZVJhbmdlXCIsIFwidG9TdHJpbmdcIiwgXCJkZXRhY2hcIl07XHJcblxyXG4gICAgdmFyIHRleHRSYW5nZVByb3BlcnRpZXMgPSBbXCJib3VuZGluZ0hlaWdodFwiLCBcImJvdW5kaW5nTGVmdFwiLCBcImJvdW5kaW5nVG9wXCIsIFwiYm91bmRpbmdXaWR0aFwiLCBcImh0bWxUZXh0XCIsIFwidGV4dFwiXTtcclxuXHJcbiAgICAvLyBTdWJzZXQgb2YgVGV4dFJhbmdlJ3MgZnVsbCBzZXQgb2YgbWV0aG9kcyB0aGF0IHdlJ3JlIGludGVyZXN0ZWQgaW5cclxuICAgIHZhciB0ZXh0UmFuZ2VNZXRob2RzID0gW1wiY29sbGFwc2VcIiwgXCJjb21wYXJlRW5kUG9pbnRzXCIsIFwiZHVwbGljYXRlXCIsIFwibW92ZVRvRWxlbWVudFRleHRcIiwgXCJwYXJlbnRFbGVtZW50XCIsIFwic2VsZWN0XCIsXHJcbiAgICAgICAgXCJzZXRFbmRQb2ludFwiLCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiXTtcclxuXHJcbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5cclxuICAgIC8vIFRyaW8gb2YgZnVuY3Rpb25zIHRha2VuIGZyb20gUGV0ZXIgTWljaGF1eCdzIGFydGljbGU6XHJcbiAgICAvLyBodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9mZWF0dXJlLWRldGVjdGlvbi1zdGF0ZS1vZi10aGUtYXJ0LWJyb3dzZXItc2NyaXB0aW5nXHJcbiAgICBmdW5jdGlvbiBpc0hvc3RNZXRob2QobywgcCkge1xyXG4gICAgICAgIHZhciB0ID0gdHlwZW9mIG9bcF07XHJcbiAgICAgICAgcmV0dXJuIHQgPT0gRlVOQ1RJT04gfHwgKCEhKHQgPT0gT0JKRUNUICYmIG9bcF0pKSB8fCB0ID09IFwidW5rbm93blwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzSG9zdE9iamVjdChvLCBwKSB7XHJcbiAgICAgICAgcmV0dXJuICEhKHR5cGVvZiBvW3BdID09IE9CSkVDVCAmJiBvW3BdKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc0hvc3RQcm9wZXJ0eShvLCBwKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvW3BdICE9IFVOREVGSU5FRDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDcmVhdGVzIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gdG8gc2F2ZSB2ZXJib3NlIHJlcGVhdGVkIGNhbGxzIHRvIHRlc3RzIGZ1bmN0aW9uc1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QodGVzdEZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obywgcHJvcHMpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSBwcm9wcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGVzdEZ1bmMobywgcHJvcHNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTmV4dCB0cmlvIG9mIGZ1bmN0aW9ucyBhcmUgYSBjb252ZW5pZW5jZSB0byBzYXZlIHZlcmJvc2UgcmVwZWF0ZWQgY2FsbHMgdG8gcHJldmlvdXMgdHdvIGZ1bmN0aW9uc1xyXG4gICAgdmFyIGFyZUhvc3RNZXRob2RzID0gY3JlYXRlTXVsdGlwbGVQcm9wZXJ0eVRlc3QoaXNIb3N0TWV0aG9kKTtcclxuICAgIHZhciBhcmVIb3N0T2JqZWN0cyA9IGNyZWF0ZU11bHRpcGxlUHJvcGVydHlUZXN0KGlzSG9zdE9iamVjdCk7XHJcbiAgICB2YXIgYXJlSG9zdFByb3BlcnRpZXMgPSBjcmVhdGVNdWx0aXBsZVByb3BlcnR5VGVzdChpc0hvc3RQcm9wZXJ0eSk7XHJcblxyXG4gICAgZnVuY3Rpb24gaXNUZXh0UmFuZ2UocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gcmFuZ2UgJiYgYXJlSG9zdE1ldGhvZHMocmFuZ2UsIHRleHRSYW5nZU1ldGhvZHMpICYmIGFyZUhvc3RQcm9wZXJ0aWVzKHJhbmdlLCB0ZXh0UmFuZ2VQcm9wZXJ0aWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRCb2R5KGRvYykge1xyXG4gICAgICAgIHJldHVybiBpc0hvc3RPYmplY3QoZG9jLCBcImJvZHlcIikgPyBkb2MuYm9keSA6IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZvckVhY2ggPSBbXS5mb3JFYWNoID9cclxuICAgICAgICBmdW5jdGlvbihhcnIsIGZ1bmMpIHtcclxuICAgICAgICAgICAgYXJyLmZvckVhY2goZnVuYyk7XHJcbiAgICAgICAgfSA6XHJcbiAgICAgICAgZnVuY3Rpb24oYXJyLCBmdW5jKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmMoYXJyW2ldLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgdmFyIG1vZHVsZXMgPSB7fTtcclxuXHJcbiAgICB2YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgIT0gVU5ERUZJTkVEICYmIHR5cGVvZiBkb2N1bWVudCAhPSBVTkRFRklORUQpO1xyXG5cclxuICAgIHZhciB1dGlsID0ge1xyXG4gICAgICAgIGlzSG9zdE1ldGhvZDogaXNIb3N0TWV0aG9kLFxyXG4gICAgICAgIGlzSG9zdE9iamVjdDogaXNIb3N0T2JqZWN0LFxyXG4gICAgICAgIGlzSG9zdFByb3BlcnR5OiBpc0hvc3RQcm9wZXJ0eSxcclxuICAgICAgICBhcmVIb3N0TWV0aG9kczogYXJlSG9zdE1ldGhvZHMsXHJcbiAgICAgICAgYXJlSG9zdE9iamVjdHM6IGFyZUhvc3RPYmplY3RzLFxyXG4gICAgICAgIGFyZUhvc3RQcm9wZXJ0aWVzOiBhcmVIb3N0UHJvcGVydGllcyxcclxuICAgICAgICBpc1RleHRSYW5nZTogaXNUZXh0UmFuZ2UsXHJcbiAgICAgICAgZ2V0Qm9keTogZ2V0Qm9keSxcclxuICAgICAgICBmb3JFYWNoOiBmb3JFYWNoXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBhcGkgPSB7XHJcbiAgICAgICAgdmVyc2lvbjogXCIxLjMuMFwiLFxyXG4gICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcclxuICAgICAgICBpc0Jyb3dzZXI6IGlzQnJvd3NlcixcclxuICAgICAgICBzdXBwb3J0ZWQ6IHRydWUsXHJcbiAgICAgICAgdXRpbDogdXRpbCxcclxuICAgICAgICBmZWF0dXJlczoge30sXHJcbiAgICAgICAgbW9kdWxlczogbW9kdWxlcyxcclxuICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgYWxlcnRPbkZhaWw6IGZhbHNlLFxyXG4gICAgICAgICAgICBhbGVydE9uV2FybjogZmFsc2UsXHJcbiAgICAgICAgICAgIHByZWZlclRleHRSYW5nZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGF1dG9Jbml0aWFsaXplOiAodHlwZW9mIHJhbmd5QXV0b0luaXRpYWxpemUgPT0gVU5ERUZJTkVEKSA/IHRydWUgOiByYW5neUF1dG9Jbml0aWFsaXplXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKG1zZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPSBVTkRFRklORUQgJiYgaXNIb3N0TWV0aG9kKGNvbnNvbGUsIFwibG9nXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFsZXJ0T3JMb2cobXNnLCBzaG91bGRBbGVydCkge1xyXG4gICAgICAgIGlmIChpc0Jyb3dzZXIgJiYgc2hvdWxkQWxlcnQpIHtcclxuICAgICAgICAgICAgYWxlcnQobXNnKTtcclxuICAgICAgICB9IGVsc2UgIHtcclxuICAgICAgICAgICAgY29uc29sZUxvZyhtc2cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmYWlsKHJlYXNvbikge1xyXG4gICAgICAgIGFwaS5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgYXBpLnN1cHBvcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGFsZXJ0T3JMb2coXCJSYW5neSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuIFJlYXNvbjogXCIgKyByZWFzb24sIGFwaS5jb25maWcuYWxlcnRPbkZhaWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGFwaS5mYWlsID0gZmFpbDtcclxuXHJcbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xyXG4gICAgICAgIGFsZXJ0T3JMb2coXCJSYW5neSB3YXJuaW5nOiBcIiArIG1zZywgYXBpLmNvbmZpZy5hbGVydE9uV2Fybik7XHJcbiAgICB9XHJcblxyXG4gICAgYXBpLndhcm4gPSB3YXJuO1xyXG5cclxuICAgIC8vIEFkZCB1dGlsaXR5IGV4dGVuZCgpIG1ldGhvZFxyXG4gICAgdmFyIGV4dGVuZDtcclxuICAgIGlmICh7fS5oYXNPd25Qcm9wZXJ0eSkge1xyXG4gICAgICAgIHV0aWwuZXh0ZW5kID0gZXh0ZW5kID0gZnVuY3Rpb24ob2JqLCBwcm9wcywgZGVlcCkge1xyXG4gICAgICAgICAgICB2YXIgbywgcDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IG9ialtpXTtcclxuICAgICAgICAgICAgICAgICAgICBwID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgbyAhPT0gbnVsbCAmJiB0eXBlb2YgbyA9PSBcIm9iamVjdFwiICYmIHAgIT09IG51bGwgJiYgdHlwZW9mIHAgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQobywgcCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG9ialtpXSA9IHA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciB0b1N0cmluZywgd2hpY2ggZG9lcyBub3Qgc2hvdyB1cCBpbiBmb3IuLi5pbiBsb29wcyBpbiBJRSA8PSA4XHJcbiAgICAgICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShcInRvU3RyaW5nXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBvYmoudG9TdHJpbmcgPSBwcm9wcy50b1N0cmluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHV0aWwuY3JlYXRlT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnNQYXJhbSwgZGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIGRlZmF1bHRzKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnNQYXJhbSkge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKG9wdGlvbnMsIG9wdGlvbnNQYXJhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZmFpbChcImhhc093blByb3BlcnR5IG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGVzdCB3aGV0aGVyIHdlJ3JlIGluIGEgYnJvd3NlciBhbmQgYmFpbCBvdXQgaWYgbm90XHJcbiAgICBpZiAoIWlzQnJvd3Nlcikge1xyXG4gICAgICAgIGZhaWwoXCJSYW5neSBjYW4gb25seSBydW4gaW4gYSBicm93c2VyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRlc3Qgd2hldGhlciBBcnJheS5wcm90b3R5cGUuc2xpY2UgY2FuIGJlIHJlbGllZCBvbiBmb3IgTm9kZUxpc3RzIGFuZCB1c2UgYW4gYWx0ZXJuYXRpdmUgdG9BcnJheSgpIGlmIG5vdFxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0b0FycmF5O1xyXG5cclxuICAgICAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpKTtcclxuICAgICAgICAgICAgdmFyIHNsaWNlID0gW10uc2xpY2U7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2xpY2UuY2FsbChlbC5jaGlsZE5vZGVzLCAwKVswXS5ub2RlVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheUxpa2UsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRvQXJyYXkpIHtcclxuICAgICAgICAgICAgdG9BcnJheSA9IGZ1bmN0aW9uKGFycmF5TGlrZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5TGlrZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycltpXSA9IGFycmF5TGlrZVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1dGlsLnRvQXJyYXkgPSB0b0FycmF5O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICAvLyBWZXJ5IHNpbXBsZSBldmVudCBoYW5kbGVyIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IGF0dGVtcHQgdG8gc29sdmUgaXNzdWVzIHN1Y2ggYXMgXCJ0aGlzXCIgaGFuZGxpbmcgb3JcclxuICAgIC8vIG5vcm1hbGl6YXRpb24gb2YgZXZlbnQgcHJvcGVydGllc1xyXG4gICAgdmFyIGFkZExpc3RlbmVyO1xyXG4gICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsIFwiYWRkRXZlbnRMaXN0ZW5lclwiKSkge1xyXG4gICAgICAgICAgICBhZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKG9iaiwgZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNIb3N0TWV0aG9kKGRvY3VtZW50LCBcImF0dGFjaEV2ZW50XCIpKSB7XHJcbiAgICAgICAgICAgIGFkZExpc3RlbmVyID0gZnVuY3Rpb24ob2JqLCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouYXR0YWNoRXZlbnQoXCJvblwiICsgZXZlbnRUeXBlLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmFpbChcIkRvY3VtZW50IGRvZXMgbm90IGhhdmUgcmVxdWlyZWQgYWRkRXZlbnRMaXN0ZW5lciBvciBhdHRhY2hFdmVudCBtZXRob2RcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1dGlsLmFkZExpc3RlbmVyID0gYWRkTGlzdGVuZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRMaXN0ZW5lcnMgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRFcnJvckRlc2MoZXgpIHtcclxuICAgICAgICByZXR1cm4gZXgubWVzc2FnZSB8fCBleC5kZXNjcmlwdGlvbiB8fCBTdHJpbmcoZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluaXRpYWxpemF0aW9uXHJcbiAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8IGFwaS5pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0ZXN0UmFuZ2U7XHJcbiAgICAgICAgdmFyIGltcGxlbWVudHNEb21SYW5nZSA9IGZhbHNlLCBpbXBsZW1lbnRzVGV4dFJhbmdlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIEZpcnN0LCBwZXJmb3JtIGJhc2ljIGZlYXR1cmUgdGVzdHNcclxuXHJcbiAgICAgICAgaWYgKGlzSG9zdE1ldGhvZChkb2N1bWVudCwgXCJjcmVhdGVSYW5nZVwiKSkge1xyXG4gICAgICAgICAgICB0ZXN0UmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgICAgICBpZiAoYXJlSG9zdE1ldGhvZHModGVzdFJhbmdlLCBkb21SYW5nZU1ldGhvZHMpICYmIGFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RSYW5nZSwgZG9tUmFuZ2VQcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICAgICAgaW1wbGVtZW50c0RvbVJhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5KGRvY3VtZW50KTtcclxuICAgICAgICBpZiAoIWJvZHkgfHwgYm9keS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9IFwiYm9keVwiKSB7XHJcbiAgICAgICAgICAgIGZhaWwoXCJObyBib2R5IGVsZW1lbnQgZm91bmRcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChib2R5ICYmIGlzSG9zdE1ldGhvZChib2R5LCBcImNyZWF0ZVRleHRSYW5nZVwiKSkge1xyXG4gICAgICAgICAgICB0ZXN0UmFuZ2UgPSBib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xyXG4gICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UodGVzdFJhbmdlKSkge1xyXG4gICAgICAgICAgICAgICAgaW1wbGVtZW50c1RleHRSYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaW1wbGVtZW50c0RvbVJhbmdlICYmICFpbXBsZW1lbnRzVGV4dFJhbmdlKSB7XHJcbiAgICAgICAgICAgIGZhaWwoXCJOZWl0aGVyIFJhbmdlIG5vciBUZXh0UmFuZ2UgYXJlIGF2YWlsYWJsZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXBpLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICBhcGkuZmVhdHVyZXMgPSB7XHJcbiAgICAgICAgICAgIGltcGxlbWVudHNEb21SYW5nZTogaW1wbGVtZW50c0RvbVJhbmdlLFxyXG4gICAgICAgICAgICBpbXBsZW1lbnRzVGV4dFJhbmdlOiBpbXBsZW1lbnRzVGV4dFJhbmdlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2R1bGVzXHJcbiAgICAgICAgdmFyIG1vZHVsZSwgZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgIGZvciAodmFyIG1vZHVsZU5hbWUgaW4gbW9kdWxlcykge1xyXG4gICAgICAgICAgICBpZiAoIChtb2R1bGUgPSBtb2R1bGVzW21vZHVsZU5hbWVdKSBpbnN0YW5jZW9mIE1vZHVsZSApIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0KG1vZHVsZSwgYXBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2FsbCBpbml0IGxpc3RlbmVyc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbml0TGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpbml0TGlzdGVuZXJzW2ldKGFwaSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlJhbmd5IGluaXQgbGlzdGVuZXIgdGhyZXcgYW4gZXhjZXB0aW9uLiBDb250aW51aW5nLiBEZXRhaWw6IFwiICsgZ2V0RXJyb3JEZXNjKGV4KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZXByZWNhdGlvbk5vdGljZShkZXByZWNhdGVkLCByZXBsYWNlbWVudCwgbW9kdWxlKSB7XHJcbiAgICAgICAgaWYgKG1vZHVsZSkge1xyXG4gICAgICAgICAgICBkZXByZWNhdGVkICs9IFwiIGluIG1vZHVsZSBcIiArIG1vZHVsZS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcGkud2FybihcIkRFUFJFQ0FURUQ6IFwiICsgZGVwcmVjYXRlZCArIFwiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCIgK1xyXG4gICAgICAgIHJlcGxhY2VtZW50ICsgXCIgaW5zdGVhZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQWxpYXNGb3JEZXByZWNhdGVkTWV0aG9kKG93bmVyLCBkZXByZWNhdGVkLCByZXBsYWNlbWVudCwgbW9kdWxlKSB7XHJcbiAgICAgICAgb3duZXJbZGVwcmVjYXRlZF0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZGVwcmVjYXRpb25Ob3RpY2UoZGVwcmVjYXRlZCwgcmVwbGFjZW1lbnQsIG1vZHVsZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBvd25lcltyZXBsYWNlbWVudF0uYXBwbHkob3duZXIsIHV0aWwudG9BcnJheShhcmd1bWVudHMpKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHV0aWwuZGVwcmVjYXRpb25Ob3RpY2UgPSBkZXByZWNhdGlvbk5vdGljZTtcclxuICAgIHV0aWwuY3JlYXRlQWxpYXNGb3JEZXByZWNhdGVkTWV0aG9kID0gY3JlYXRlQWxpYXNGb3JEZXByZWNhdGVkTWV0aG9kO1xyXG5cclxuICAgIC8vIEFsbG93IGV4dGVybmFsIHNjcmlwdHMgdG8gaW5pdGlhbGl6ZSB0aGlzIGxpYnJhcnkgaW4gY2FzZSBpdCdzIGxvYWRlZCBhZnRlciB0aGUgZG9jdW1lbnQgaGFzIGxvYWRlZFxyXG4gICAgYXBpLmluaXQgPSBpbml0O1xyXG5cclxuICAgIC8vIEV4ZWN1dGUgbGlzdGVuZXIgaW1tZWRpYXRlbHkgaWYgYWxyZWFkeSBpbml0aWFsaXplZFxyXG4gICAgYXBpLmFkZEluaXRMaXN0ZW5lciA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKGFwaS5pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcihhcGkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluaXRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2hpbUxpc3RlbmVycyA9IFtdO1xyXG5cclxuICAgIGFwaS5hZGRTaGltTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xyXG4gICAgICAgIHNoaW1MaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHNoaW0od2luKSB7XHJcbiAgICAgICAgd2luID0gd2luIHx8IHdpbmRvdztcclxuICAgICAgICBpbml0KCk7XHJcblxyXG4gICAgICAgIC8vIE5vdGlmeSBsaXN0ZW5lcnNcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2hpbUxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICAgICAgICBzaGltTGlzdGVuZXJzW2ldKHdpbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0Jyb3dzZXIpIHtcclxuICAgICAgICBhcGkuc2hpbSA9IGFwaS5jcmVhdGVNaXNzaW5nTmF0aXZlQXBpID0gc2hpbTtcclxuICAgICAgICBjcmVhdGVBbGlhc0ZvckRlcHJlY2F0ZWRNZXRob2QoYXBpLCBcImNyZWF0ZU1pc3NpbmdOYXRpdmVBcGlcIiwgXCJzaGltXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIE1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGluaXRpYWxpemVyKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdXBwb3J0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVyID0gaW5pdGlhbGl6ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgTW9kdWxlLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJlcXVpcmVkTW9kdWxlTmFtZXMgPSB0aGlzLmRlcGVuZGVuY2llcyB8fCBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJlcXVpcmVkTW9kdWxlTmFtZXMubGVuZ3RoLCByZXF1aXJlZE1vZHVsZSwgbW9kdWxlTmFtZTsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVOYW1lID0gcmVxdWlyZWRNb2R1bGVOYW1lc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZE1vZHVsZSA9IG1vZHVsZXNbbW9kdWxlTmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVkTW9kdWxlIHx8ICEocmVxdWlyZWRNb2R1bGUgaW5zdGFuY2VvZiBNb2R1bGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVxdWlyZWQgbW9kdWxlICdcIiArIG1vZHVsZU5hbWUgKyBcIicgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kdWxlLmluaXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcXVpcmVkTW9kdWxlLnN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlcXVpcmVkIG1vZHVsZSAnXCIgKyBtb2R1bGVOYW1lICsgXCInIG5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE5vdyBydW4gaW5pdGlhbGl6ZXJcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplcih0aGlzKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBmYWlsOiBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFzb24pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHdhcm46IGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICBhcGkud2FybihcIk1vZHVsZSBcIiArIHRoaXMubmFtZSArIFwiOiBcIiArIG1zZyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVwcmVjYXRpb25Ob3RpY2U6IGZ1bmN0aW9uKGRlcHJlY2F0ZWQsIHJlcGxhY2VtZW50KSB7XHJcbiAgICAgICAgICAgIGFwaS53YXJuKFwiREVQUkVDQVRFRDogXCIgKyBkZXByZWNhdGVkICsgXCIgaW4gbW9kdWxlIFwiICsgdGhpcy5uYW1lICsgXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcIiArXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudCArIFwiIGluc3RlYWRcIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY3JlYXRlRXJyb3I6IGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiRXJyb3IgaW4gUmFuZ3kgXCIgKyB0aGlzLm5hbWUgKyBcIiBtb2R1bGU6IFwiICsgbXNnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1vZHVsZShuYW1lLCBkZXBlbmRlbmNpZXMsIGluaXRGdW5jKSB7XHJcbiAgICAgICAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUobmFtZSwgZGVwZW5kZW5jaWVzLCBmdW5jdGlvbihtb2R1bGUpIHtcclxuICAgICAgICAgICAgaWYgKCFtb2R1bGUuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZS5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRGdW5jKGFwaSwgbW9kdWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBtb2R1bGUuc3VwcG9ydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiTW9kdWxlICdcIiArIG5hbWUgKyBcIicgZmFpbGVkIHRvIGxvYWQ6IFwiICsgZ2V0RXJyb3JEZXNjKGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlTG9nKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4LnN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGVMb2coZXguc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG1vZHVsZXNbbmFtZV0gPSBuZXdNb2R1bGU7XHJcbiAgICAgICAgcmV0dXJuIG5ld01vZHVsZTtcclxuICAgIH1cclxuXHJcbiAgICBhcGkuY3JlYXRlTW9kdWxlID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIC8vIEFsbG93IDIgb3IgMyBhcmd1bWVudHMgKHNlY29uZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBhcnJheSBvZiBkZXBlbmRlbmNpZXMpXHJcbiAgICAgICAgdmFyIGluaXRGdW5jLCBkZXBlbmRlbmNpZXM7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBpbml0RnVuYyA9IGFyZ3VtZW50c1sxXTtcclxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzID0gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5pdEZ1bmMgPSBhcmd1bWVudHNbMl07XHJcbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IGFyZ3VtZW50c1sxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtb2R1bGUgPSBjcmVhdGVNb2R1bGUobmFtZSwgZGVwZW5kZW5jaWVzLCBpbml0RnVuYyk7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIG1vZHVsZSBpbW1lZGlhdGVseSBpZiB0aGUgY29yZSBpcyBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgICAgICAgaWYgKGFwaS5pbml0aWFsaXplZCAmJiBhcGkuc3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgIG1vZHVsZS5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZSA9IGZ1bmN0aW9uKG5hbWUsIGRlcGVuZGVuY2llcywgaW5pdEZ1bmMpIHtcclxuICAgICAgICBjcmVhdGVNb2R1bGUobmFtZSwgZGVwZW5kZW5jaWVzLCBpbml0RnVuYyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4gICAgLy8gRW5zdXJlIHJhbmd5LnJhbmdlUHJvdG90eXBlIGFuZCByYW5neS5zZWxlY3Rpb25Qcm90b3R5cGUgYXJlIGF2YWlsYWJsZSBpbW1lZGlhdGVseVxyXG5cclxuICAgIGZ1bmN0aW9uIFJhbmdlUHJvdG90eXBlKCkge31cclxuICAgIGFwaS5SYW5nZVByb3RvdHlwZSA9IFJhbmdlUHJvdG90eXBlO1xyXG4gICAgYXBpLnJhbmdlUHJvdG90eXBlID0gbmV3IFJhbmdlUHJvdG90eXBlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gU2VsZWN0aW9uUHJvdG90eXBlKCkge31cclxuICAgIGFwaS5zZWxlY3Rpb25Qcm90b3R5cGUgPSBuZXcgU2VsZWN0aW9uUHJvdG90eXBlKCk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBET00gdXRpbGl0eSBtZXRob2RzIHVzZWQgYnkgUmFuZ3lcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZShcIkRvbVV0aWxcIiwgW10sIGZ1bmN0aW9uKGFwaSwgbW9kdWxlKSB7XG4gICAgICAgIHZhciBVTkRFRiA9IFwidW5kZWZpbmVkXCI7XG4gICAgICAgIHZhciB1dGlsID0gYXBpLnV0aWw7XG4gICAgICAgIHZhciBnZXRCb2R5ID0gdXRpbC5nZXRCb2R5O1xuXG4gICAgICAgIC8vIFBlcmZvcm0gZmVhdHVyZSB0ZXN0c1xuICAgICAgICBpZiAoIXV0aWwuYXJlSG9zdE1ldGhvZHMoZG9jdW1lbnQsIFtcImNyZWF0ZURvY3VtZW50RnJhZ21lbnRcIiwgXCJjcmVhdGVFbGVtZW50XCIsIFwiY3JlYXRlVGV4dE5vZGVcIl0pKSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcImRvY3VtZW50IG1pc3NpbmcgYSBOb2RlIGNyZWF0aW9uIG1ldGhvZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdXRpbC5pc0hvc3RNZXRob2QoZG9jdW1lbnQsIFwiZ2V0RWxlbWVudHNCeVRhZ05hbWVcIikpIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiZG9jdW1lbnQgbWlzc2luZyBnZXRFbGVtZW50c0J5VGFnTmFtZSBtZXRob2RcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBpZiAoIXV0aWwuYXJlSG9zdE1ldGhvZHMoZWwsIFtcImluc2VydEJlZm9yZVwiLCBcImFwcGVuZENoaWxkXCIsIFwiY2xvbmVOb2RlXCJdIHx8XG4gICAgICAgICAgICAgICAgIXV0aWwuYXJlSG9zdE9iamVjdHMoZWwsIFtcInByZXZpb3VzU2libGluZ1wiLCBcIm5leHRTaWJsaW5nXCIsIFwiY2hpbGROb2Rlc1wiLCBcInBhcmVudE5vZGVcIl0pKSkge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJJbmNvbXBsZXRlIEVsZW1lbnQgaW1wbGVtZW50YXRpb25cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbm5lckhUTUwgaXMgcmVxdWlyZWQgZm9yIFJhbmdlJ3MgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IG1ldGhvZFxuICAgICAgICBpZiAoIXV0aWwuaXNIb3N0UHJvcGVydHkoZWwsIFwiaW5uZXJIVE1MXCIpKSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcIkVsZW1lbnQgaXMgbWlzc2luZyBpbm5lckhUTUwgcHJvcGVydHlcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcInRlc3RcIik7XG4gICAgICAgIGlmICghdXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXh0Tm9kZSwgW1wic3BsaXRUZXh0XCIsIFwiZGVsZXRlRGF0YVwiLCBcImluc2VydERhdGFcIiwgXCJhcHBlbmREYXRhXCIsIFwiY2xvbmVOb2RlXCJdIHx8XG4gICAgICAgICAgICAgICAgIXV0aWwuYXJlSG9zdE9iamVjdHMoZWwsIFtcInByZXZpb3VzU2libGluZ1wiLCBcIm5leHRTaWJsaW5nXCIsIFwiY2hpbGROb2Rlc1wiLCBcInBhcmVudE5vZGVcIl0pIHx8XG4gICAgICAgICAgICAgICAgIXV0aWwuYXJlSG9zdFByb3BlcnRpZXModGV4dE5vZGUsIFtcImRhdGFcIl0pKSkge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJJbmNvbXBsZXRlIFRleHQgTm9kZSBpbXBsZW1lbnRhdGlvblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gUmVtb3ZlZCB1c2Ugb2YgaW5kZXhPZiBiZWNhdXNlIG9mIGEgYml6YXJyZSBidWcgaW4gT3BlcmEgdGhhdCBpcyB0aHJvd24gaW4gb25lIG9mIHRoZSBBY2lkMyB0ZXN0cy4gSSBoYXZlbid0IGJlZW5cbiAgICAgICAgLy8gYWJsZSB0byByZXBsaWNhdGUgaXQgb3V0c2lkZSBvZiB0aGUgdGVzdC4gVGhlIGJ1ZyBpcyB0aGF0IGluZGV4T2YgcmV0dXJucyAtMSB3aGVuIGNhbGxlZCBvbiBhbiBBcnJheSB0aGF0XG4gICAgICAgIC8vIGNvbnRhaW5zIGp1c3QgdGhlIGRvY3VtZW50IGFzIGEgc2luZ2xlIGVsZW1lbnQgYW5kIHRoZSB2YWx1ZSBzZWFyY2hlZCBmb3IgaXMgdGhlIGRvY3VtZW50LlxuICAgICAgICB2YXIgYXJyYXlDb250YWlucyA9IC8qQXJyYXkucHJvdG90eXBlLmluZGV4T2YgP1xuICAgICAgICAgICAgZnVuY3Rpb24oYXJyLCB2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YodmFsKSA+IC0xO1xuICAgICAgICAgICAgfToqL1xuXG4gICAgICAgICAgICBmdW5jdGlvbihhcnIsIHZhbCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJbaV0gPT09IHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvLyBPcGVyYSAxMSBwdXRzIEhUTUwgZWxlbWVudHMgaW4gdGhlIG51bGwgbmFtZXNwYWNlLCBpdCBzZWVtcywgYW5kIElFIDcgaGFzIHVuZGVmaW5lZCBuYW1lc3BhY2VVUklcbiAgICAgICAgZnVuY3Rpb24gaXNIdG1sTmFtZXNwYWNlKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBucztcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygbm9kZS5uYW1lc3BhY2VVUkkgPT0gVU5ERUYgfHwgKChucyA9IG5vZGUubmFtZXNwYWNlVVJJKSA9PT0gbnVsbCB8fCBucyA9PSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXJlbnRFbGVtZW50KG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICByZXR1cm4gKHBhcmVudC5ub2RlVHlwZSA9PSAxKSA/IHBhcmVudCA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXROb2RlSW5kZXgobm9kZSkge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUoIChub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmcpICkge1xuICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZUxlbmd0aChub2RlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29tbW9uQW5jZXN0b3Iobm9kZTEsIG5vZGUyKSB7XG4gICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gW10sIG47XG4gICAgICAgICAgICBmb3IgKG4gPSBub2RlMTsgbjsgbiA9IG4ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGFuY2VzdG9ycy5wdXNoKG4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKG4gPSBub2RlMjsgbjsgbiA9IG4ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChhcnJheUNvbnRhaW5zKGFuY2VzdG9ycywgbikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzQW5jZXN0b3JPZihhbmNlc3RvciwgZGVzY2VuZGFudCwgc2VsZklzQW5jZXN0b3IpIHtcbiAgICAgICAgICAgIHZhciBuID0gc2VsZklzQW5jZXN0b3IgPyBkZXNjZW5kYW50IDogZGVzY2VuZGFudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgd2hpbGUgKG4pIHtcbiAgICAgICAgICAgICAgICBpZiAobiA9PT0gYW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc09ySXNBbmNlc3Rvck9mKGFuY2VzdG9yLCBkZXNjZW5kYW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBbmNlc3Rvck9mKGFuY2VzdG9yLCBkZXNjZW5kYW50LCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGUsIGFuY2VzdG9yLCBzZWxmSXNBbmNlc3Rvcikge1xuICAgICAgICAgICAgdmFyIHAsIG4gPSBzZWxmSXNBbmNlc3RvciA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB3aGlsZSAobikge1xuICAgICAgICAgICAgICAgIHAgPSBuLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgaWYgKHAgPT09IGFuY2VzdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuID0gcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSB7XG4gICAgICAgICAgICB2YXIgdCA9IG5vZGUubm9kZVR5cGU7XG4gICAgICAgICAgICByZXR1cm4gdCA9PSAzIHx8IHQgPT0gNCB8fCB0ID09IDggOyAvLyBUZXh0LCBDRGF0YVNlY3Rpb24gb3IgQ29tbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNUZXh0T3JDb21tZW50Tm9kZShub2RlKSB7XG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdCA9IG5vZGUubm9kZVR5cGU7XG4gICAgICAgICAgICByZXR1cm4gdCA9PSAzIHx8IHQgPT0gOCA7IC8vIFRleHQgb3IgQ29tbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIobm9kZSwgcHJlY2VkaW5nTm9kZSkge1xuICAgICAgICAgICAgdmFyIG5leHROb2RlID0gcHJlY2VkaW5nTm9kZS5uZXh0U2libGluZywgcGFyZW50ID0gcHJlY2VkaW5nTm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKG5leHROb2RlKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBuZXh0Tm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGNhbm5vdCB1c2Ugc3BsaXRUZXh0KCkgYmVjYXVzZSBpdCBpcyBidWdyaWRkZW4gaW4gSUUgOS5cbiAgICAgICAgZnVuY3Rpb24gc3BsaXREYXRhTm9kZShub2RlLCBpbmRleCwgcG9zaXRpb25zVG9QcmVzZXJ2ZSkge1xuICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBub2RlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICBuZXdOb2RlLmRlbGV0ZURhdGEoMCwgaW5kZXgpO1xuICAgICAgICAgICAgbm9kZS5kZWxldGVEYXRhKGluZGV4LCBub2RlLmxlbmd0aCAtIGluZGV4KTtcbiAgICAgICAgICAgIGluc2VydEFmdGVyKG5ld05vZGUsIG5vZGUpO1xuXG4gICAgICAgICAgICAvLyBQcmVzZXJ2ZSBwb3NpdGlvbnNcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbnNUb1ByZXNlcnZlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHBvc2l0aW9uOyBwb3NpdGlvbiA9IHBvc2l0aW9uc1RvUHJlc2VydmVbaSsrXTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZXJlIHBvc2l0aW9uIHdhcyBpbnNpZGUgdGhlIHBvcnRpb24gb2Ygbm9kZSBhZnRlciB0aGUgc3BsaXQgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uLm5vZGUgPT0gbm9kZSAmJiBwb3NpdGlvbi5vZmZzZXQgPiBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ubm9kZSA9IG5ld05vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi5vZmZzZXQgLT0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBhIG5vZGUgb2Zmc2V0IHdpdGhpbiBub2RlJ3MgcGFyZW50XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLm5vZGUgPT0gbm9kZS5wYXJlbnROb2RlICYmIHBvc2l0aW9uLm9mZnNldCA+IGdldE5vZGVJbmRleChub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKytwb3NpdGlvbi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldERvY3VtZW50KG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUub3duZXJEb2N1bWVudCAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlLmRvY3VtZW50ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXREb2N1bWVudChub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXREb2N1bWVudDogbm8gZG9jdW1lbnQgZm91bmQgZm9yIG5vZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KG5vZGUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2MuZGVmYXVsdFZpZXcgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jLnBhcmVudFdpbmRvdyAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2MucGFyZW50V2luZG93O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJDYW5ub3QgZ2V0IGEgd2luZG93IG9iamVjdCBmb3Igbm9kZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldElmcmFtZURvY3VtZW50KGlmcmFtZUVsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudCAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpZnJhbWVFbC5jb250ZW50V2luZG93ICE9IFVOREVGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcImdldElmcmFtZURvY3VtZW50OiBObyBEb2N1bWVudCBvYmplY3QgZm91bmQgZm9yIGlmcmFtZSBlbGVtZW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0SWZyYW1lV2luZG93KGlmcmFtZUVsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnRXaW5kb3cgIT0gVU5ERUYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWZyYW1lRWwuY29udGVudFdpbmRvdztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlmcmFtZUVsLmNvbnRlbnREb2N1bWVudCAhPSBVTkRFRikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZnJhbWVFbC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcImdldElmcmFtZVdpbmRvdzogTm8gV2luZG93IG9iamVjdCBmb3VuZCBmb3IgaWZyYW1lIGVsZW1lbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGxvb2tzIGJhZC4gSXMgaXQgd29ydGggaXQ/XG4gICAgICAgIGZ1bmN0aW9uIGlzV2luZG93KG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiB1dGlsLmlzSG9zdE1ldGhvZChvYmosIFwic2V0VGltZW91dFwiKSAmJiB1dGlsLmlzSG9zdE9iamVjdChvYmosIFwiZG9jdW1lbnRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDb250ZW50RG9jdW1lbnQob2JqLCBtb2R1bGUsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBkb2M7XG5cbiAgICAgICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICAgICAgZG9jID0gZG9jdW1lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRlc3QgaWYgYSBET00gbm9kZSBoYXMgYmVlbiBwYXNzZWQgYW5kIG9idGFpbiBhIGRvY3VtZW50IG9iamVjdCBmb3IgaXQgaWYgc29cbiAgICAgICAgICAgIGVsc2UgaWYgKHV0aWwuaXNIb3N0UHJvcGVydHkob2JqLCBcIm5vZGVUeXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZG9jID0gKG9iai5ub2RlVHlwZSA9PSAxICYmIG9iai50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJpZnJhbWVcIikgP1xuICAgICAgICAgICAgICAgICAgICBnZXRJZnJhbWVEb2N1bWVudChvYmopIDogZ2V0RG9jdW1lbnQob2JqKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGVzdCBpZiB0aGUgZG9jIHBhcmFtZXRlciBhcHBlYXJzIHRvIGJlIGEgV2luZG93IG9iamVjdFxuICAgICAgICAgICAgZWxzZSBpZiAoaXNXaW5kb3cob2JqKSkge1xuICAgICAgICAgICAgICAgIGRvYyA9IG9iai5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkb2MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IobWV0aG9kTmFtZSArIFwiKCk6IFBhcmFtZXRlciBtdXN0IGJlIGEgV2luZG93IG9iamVjdCBvciBET00gbm9kZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRvYztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFJvb3RDb250YWluZXIobm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudDtcbiAgICAgICAgICAgIHdoaWxlICggKHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZSkgKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZVBvaW50cyhub2RlQSwgb2Zmc2V0QSwgbm9kZUIsIG9mZnNldEIpIHtcbiAgICAgICAgICAgIC8vIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMi1UcmF2ZXJzYWwtUmFuZ2UvcmFuZ2VzLmh0bWwjTGV2ZWwtMi1SYW5nZS1Db21wYXJpbmdcbiAgICAgICAgICAgIHZhciBub2RlQywgcm9vdCwgY2hpbGRBLCBjaGlsZEIsIG47XG4gICAgICAgICAgICBpZiAobm9kZUEgPT0gbm9kZUIpIHtcbiAgICAgICAgICAgICAgICAvLyBDYXNlIDE6IG5vZGVzIGFyZSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXRBID09PSBvZmZzZXRCID8gMCA6IChvZmZzZXRBIDwgb2Zmc2V0QikgPyAtMSA6IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCAobm9kZUMgPSBnZXRDbG9zZXN0QW5jZXN0b3JJbihub2RlQiwgbm9kZUEsIHRydWUpKSApIHtcbiAgICAgICAgICAgICAgICAvLyBDYXNlIDI6IG5vZGUgQyAoY29udGFpbmVyIEIgb3IgYW4gYW5jZXN0b3IpIGlzIGEgY2hpbGQgbm9kZSBvZiBBXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldEEgPD0gZ2V0Tm9kZUluZGV4KG5vZGVDKSA/IC0xIDogMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIChub2RlQyA9IGdldENsb3Nlc3RBbmNlc3RvckluKG5vZGVBLCBub2RlQiwgdHJ1ZSkpICkge1xuICAgICAgICAgICAgICAgIC8vIENhc2UgMzogbm9kZSBDIChjb250YWluZXIgQSBvciBhbiBhbmNlc3RvcikgaXMgYSBjaGlsZCBub2RlIG9mIEJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZUluZGV4KG5vZGVDKSA8IG9mZnNldEIgID8gLTEgOiAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByb290ID0gZ2V0Q29tbW9uQW5jZXN0b3Iobm9kZUEsIG5vZGVCKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29tcGFyZVBvaW50cyBlcnJvcjogbm9kZXMgaGF2ZSBubyBjb21tb24gYW5jZXN0b3JcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2FzZSA0OiBjb250YWluZXJzIGFyZSBzaWJsaW5ncyBvciBkZXNjZW5kYW50cyBvZiBzaWJsaW5nc1xuICAgICAgICAgICAgICAgIGNoaWxkQSA9IChub2RlQSA9PT0gcm9vdCkgPyByb290IDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUEsIHJvb3QsIHRydWUpO1xuICAgICAgICAgICAgICAgIGNoaWxkQiA9IChub2RlQiA9PT0gcm9vdCkgPyByb290IDogZ2V0Q2xvc2VzdEFuY2VzdG9ySW4obm9kZUIsIHJvb3QsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkQSA9PT0gY2hpbGRCKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcImNvbXBhcmVQb2ludHMgZ290IHRvIGNhc2UgNCBhbmQgY2hpbGRBIGFuZCBjaGlsZEIgYXJlIHRoZSBzYW1lIVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuID0gcm9vdC5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IGNoaWxkQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiA9PT0gY2hpbGRCKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gVGVzdCBmb3IgSUUncyBjcmFzaCAoSUUgNi83KSBvciBleGNlcHRpb24gKElFID49IDgpIHdoZW4gYSByZWZlcmVuY2UgdG8gZ2FyYmFnZS1jb2xsZWN0ZWQgdGV4dCBub2RlIGlzIHF1ZXJpZWRcbiAgICAgICAgdmFyIGNyYXNoeVRleHROb2RlcyA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzQnJva2VuTm9kZShub2RlKSB7XG4gICAgICAgICAgICB2YXIgbjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbiA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYlwiKTtcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IFwiMVwiO1xuICAgICAgICAgICAgdmFyIHRleHROb2RlID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IFwiPGJyIC8+XCI7XG4gICAgICAgICAgICBjcmFzaHlUZXh0Tm9kZXMgPSBpc0Jyb2tlbk5vZGUodGV4dE5vZGUpO1xuXG4gICAgICAgICAgICBhcGkuZmVhdHVyZXMuY3Jhc2h5VGV4dE5vZGVzID0gY3Jhc2h5VGV4dE5vZGVzO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgZnVuY3Rpb24gaW5zcGVjdE5vZGUobm9kZSkge1xuICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW05vIG5vZGVdXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3Jhc2h5VGV4dE5vZGVzICYmIGlzQnJva2VuTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltCcm9rZW4gbm9kZV1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdcIicgKyBub2RlLmRhdGEgKyAnXCInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBpZEF0dHIgPSBub2RlLmlkID8gJyBpZD1cIicgKyBub2RlLmlkICsgJ1wiJyA6IFwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiPFwiICsgbm9kZS5ub2RlTmFtZSArIGlkQXR0ciArIFwiPltpbmRleDpcIiArIGdldE5vZGVJbmRleChub2RlKSArIFwiLGxlbmd0aDpcIiArIG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggKyBcIl1bXCIgKyAobm9kZS5pbm5lckhUTUwgfHwgXCJbaW5uZXJIVE1MIG5vdCBzdXBwb3J0ZWRdXCIpLnNsaWNlKDAsIDI1KSArIFwiXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4obm9kZSkge1xuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gZ2V0RG9jdW1lbnQobm9kZSkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBjaGlsZDtcbiAgICAgICAgICAgIHdoaWxlICggKGNoaWxkID0gbm9kZS5maXJzdENoaWxkKSApIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2V0Q29tcHV0ZWRTdHlsZVByb3BlcnR5O1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICE9IFVOREVGKSB7XG4gICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHkgPSBmdW5jdGlvbihlbCwgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0V2luZG93KGVsKS5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKVtwcm9wTmFtZV07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlICE9IFVOREVGKSB7XG4gICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHkgPSBmdW5jdGlvbihlbCwgcHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuY3VycmVudFN0eWxlID8gZWwuY3VycmVudFN0eWxlW3Byb3BOYW1lXSA6IFwiXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJObyBtZWFucyBvZiBvYnRhaW5pbmcgY29tcHV0ZWQgc3R5bGUgcHJvcGVydGllcyBmb3VuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRlc3RFbGVtZW50KGRvYywgaHRtbCwgY29udGVudEVkaXRhYmxlKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoZG9jKTtcbiAgICAgICAgICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZWwuY29udGVudEVkaXRhYmxlID0gXCJcIiArICEhY29udGVudEVkaXRhYmxlO1xuICAgICAgICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnNlcnQgdGhlIHRlc3QgZWxlbWVudCBhdCB0aGUgc3RhcnQgb2YgdGhlIGJvZHkgdG8gcHJldmVudCBzY3JvbGxpbmcgdG8gdGhlIGJvdHRvbSBpbiBpT1MgKGlzc3VlICMyOTIpXG4gICAgICAgICAgICB2YXIgYm9keUZpcnN0Q2hpbGQgPSBib2R5LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBpZiAoYm9keUZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBib2R5Lmluc2VydEJlZm9yZShlbCwgYm9keUZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gTm9kZUl0ZXJhdG9yKHJvb3QpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgICAgICAgICB0aGlzLl9uZXh0ID0gcm9vdDtcbiAgICAgICAgfVxuXG4gICAgICAgIE5vZGVJdGVyYXRvci5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBfY3VycmVudDogbnVsbCxcblxuICAgICAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fbmV4dDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5fY3VycmVudCA9IHRoaXMuX25leHQ7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkLCBuZXh0O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkID0gbi5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuICE9PSB0aGlzLnJvb3QpICYmICEobmV4dCA9IG4ubmV4dFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHQgPSBuZXh0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dCA9IHRoaXMucm9vdCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlSXRlcmF0b3Iocm9vdCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb2RlSXRlcmF0b3Iocm9vdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBEb21Qb3NpdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIERvbVBvc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGVxdWFsczogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhcG9zICYmIHRoaXMubm9kZSA9PT0gcG9zLm5vZGUgJiYgdGhpcy5vZmZzZXQgPT0gcG9zLm9mZnNldDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluc3BlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIltEb21Qb3NpdGlvbihcIiArIGluc3BlY3ROb2RlKHRoaXMubm9kZSkgKyBcIjpcIiArIHRoaXMub2Zmc2V0ICsgXCIpXVwiO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluc3BlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBET01FeGNlcHRpb24oY29kZU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuY29kZSA9IHRoaXNbY29kZU5hbWVdO1xuICAgICAgICAgICAgdGhpcy5jb2RlTmFtZSA9IGNvZGVOYW1lO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gXCJET01FeGNlcHRpb246IFwiICsgdGhpcy5jb2RlTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBJTkRFWF9TSVpFX0VSUjogMSxcbiAgICAgICAgICAgIEhJRVJBUkNIWV9SRVFVRVNUX0VSUjogMyxcbiAgICAgICAgICAgIFdST05HX0RPQ1VNRU5UX0VSUjogNCxcbiAgICAgICAgICAgIE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUjogNyxcbiAgICAgICAgICAgIE5PVF9GT1VORF9FUlI6IDgsXG4gICAgICAgICAgICBOT1RfU1VQUE9SVEVEX0VSUjogOSxcbiAgICAgICAgICAgIElOVkFMSURfU1RBVEVfRVJSOiAxMSxcbiAgICAgICAgICAgIElOVkFMSURfTk9ERV9UWVBFX0VSUjogMjRcbiAgICAgICAgfTtcblxuICAgICAgICBET01FeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFwaS5kb20gPSB7XG4gICAgICAgICAgICBhcnJheUNvbnRhaW5zOiBhcnJheUNvbnRhaW5zLFxuICAgICAgICAgICAgaXNIdG1sTmFtZXNwYWNlOiBpc0h0bWxOYW1lc3BhY2UsXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50OiBwYXJlbnRFbGVtZW50LFxuICAgICAgICAgICAgZ2V0Tm9kZUluZGV4OiBnZXROb2RlSW5kZXgsXG4gICAgICAgICAgICBnZXROb2RlTGVuZ3RoOiBnZXROb2RlTGVuZ3RoLFxuICAgICAgICAgICAgZ2V0Q29tbW9uQW5jZXN0b3I6IGdldENvbW1vbkFuY2VzdG9yLFxuICAgICAgICAgICAgaXNBbmNlc3Rvck9mOiBpc0FuY2VzdG9yT2YsXG4gICAgICAgICAgICBpc09ySXNBbmNlc3Rvck9mOiBpc09ySXNBbmNlc3Rvck9mLFxuICAgICAgICAgICAgZ2V0Q2xvc2VzdEFuY2VzdG9ySW46IGdldENsb3Nlc3RBbmNlc3RvckluLFxuICAgICAgICAgICAgaXNDaGFyYWN0ZXJEYXRhTm9kZTogaXNDaGFyYWN0ZXJEYXRhTm9kZSxcbiAgICAgICAgICAgIGlzVGV4dE9yQ29tbWVudE5vZGU6IGlzVGV4dE9yQ29tbWVudE5vZGUsXG4gICAgICAgICAgICBpbnNlcnRBZnRlcjogaW5zZXJ0QWZ0ZXIsXG4gICAgICAgICAgICBzcGxpdERhdGFOb2RlOiBzcGxpdERhdGFOb2RlLFxuICAgICAgICAgICAgZ2V0RG9jdW1lbnQ6IGdldERvY3VtZW50LFxuICAgICAgICAgICAgZ2V0V2luZG93OiBnZXRXaW5kb3csXG4gICAgICAgICAgICBnZXRJZnJhbWVXaW5kb3c6IGdldElmcmFtZVdpbmRvdyxcbiAgICAgICAgICAgIGdldElmcmFtZURvY3VtZW50OiBnZXRJZnJhbWVEb2N1bWVudCxcbiAgICAgICAgICAgIGdldEJvZHk6IGdldEJvZHksXG4gICAgICAgICAgICBpc1dpbmRvdzogaXNXaW5kb3csXG4gICAgICAgICAgICBnZXRDb250ZW50RG9jdW1lbnQ6IGdldENvbnRlbnREb2N1bWVudCxcbiAgICAgICAgICAgIGdldFJvb3RDb250YWluZXI6IGdldFJvb3RDb250YWluZXIsXG4gICAgICAgICAgICBjb21wYXJlUG9pbnRzOiBjb21wYXJlUG9pbnRzLFxuICAgICAgICAgICAgaXNCcm9rZW5Ob2RlOiBpc0Jyb2tlbk5vZGUsXG4gICAgICAgICAgICBpbnNwZWN0Tm9kZTogaW5zcGVjdE5vZGUsXG4gICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlUHJvcGVydHk6IGdldENvbXB1dGVkU3R5bGVQcm9wZXJ0eSxcbiAgICAgICAgICAgIGNyZWF0ZVRlc3RFbGVtZW50OiBjcmVhdGVUZXN0RWxlbWVudCxcbiAgICAgICAgICAgIHJlbW92ZU5vZGU6IHJlbW92ZU5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW46IGZyYWdtZW50RnJvbU5vZGVDaGlsZHJlbixcbiAgICAgICAgICAgIGNyZWF0ZUl0ZXJhdG9yOiBjcmVhdGVJdGVyYXRvcixcbiAgICAgICAgICAgIERvbVBvc2l0aW9uOiBEb21Qb3NpdGlvblxuICAgICAgICB9O1xuXG4gICAgICAgIGFwaS5ET01FeGNlcHRpb24gPSBET01FeGNlcHRpb247XG4gICAgfSk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBQdXJlIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgRE9NIFJhbmdlXG4gICAgYXBpLmNyZWF0ZUNvcmVNb2R1bGUoXCJEb21SYW5nZVwiLCBbXCJEb21VdGlsXCJdLCBmdW5jdGlvbihhcGksIG1vZHVsZSkge1xuICAgICAgICB2YXIgZG9tID0gYXBpLmRvbTtcbiAgICAgICAgdmFyIHV0aWwgPSBhcGkudXRpbDtcbiAgICAgICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uO1xuICAgICAgICB2YXIgRE9NRXhjZXB0aW9uID0gYXBpLkRPTUV4Y2VwdGlvbjtcblxuICAgICAgICB2YXIgaXNDaGFyYWN0ZXJEYXRhTm9kZSA9IGRvbS5pc0NoYXJhY3RlckRhdGFOb2RlO1xuICAgICAgICB2YXIgZ2V0Tm9kZUluZGV4ID0gZG9tLmdldE5vZGVJbmRleDtcbiAgICAgICAgdmFyIGlzT3JJc0FuY2VzdG9yT2YgPSBkb20uaXNPcklzQW5jZXN0b3JPZjtcbiAgICAgICAgdmFyIGdldERvY3VtZW50ID0gZG9tLmdldERvY3VtZW50O1xuICAgICAgICB2YXIgY29tcGFyZVBvaW50cyA9IGRvbS5jb21wYXJlUG9pbnRzO1xuICAgICAgICB2YXIgc3BsaXREYXRhTm9kZSA9IGRvbS5zcGxpdERhdGFOb2RlO1xuICAgICAgICB2YXIgZ2V0Q2xvc2VzdEFuY2VzdG9ySW4gPSBkb20uZ2V0Q2xvc2VzdEFuY2VzdG9ySW47XG4gICAgICAgIHZhciBnZXROb2RlTGVuZ3RoID0gZG9tLmdldE5vZGVMZW5ndGg7XG4gICAgICAgIHZhciBhcnJheUNvbnRhaW5zID0gZG9tLmFycmF5Q29udGFpbnM7XG4gICAgICAgIHZhciBnZXRSb290Q29udGFpbmVyID0gZG9tLmdldFJvb3RDb250YWluZXI7XG4gICAgICAgIHZhciBjcmFzaHlUZXh0Tm9kZXMgPSBhcGkuZmVhdHVyZXMuY3Jhc2h5VGV4dE5vZGVzO1xuXG4gICAgICAgIHZhciByZW1vdmVOb2RlID0gZG9tLnJlbW92ZU5vZGU7XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBVdGlsaXR5IGZ1bmN0aW9uc1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKG5vZGUsIHJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgIT0gMykgJiZcbiAgICAgICAgICAgICAgICAgICAoaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5zdGFydENvbnRhaW5lcikgfHwgaXNPcklzQW5jZXN0b3JPZihub2RlLCByYW5nZS5lbmRDb250YWluZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFJhbmdlRG9jdW1lbnQocmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiByYW5nZS5kb2N1bWVudCB8fCBnZXREb2N1bWVudChyYW5nZS5zdGFydENvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRSYW5nZVJvb3QocmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRSb290Q29udGFpbmVyKHJhbmdlLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5QmVmb3JlTm9kZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERvbVBvc2l0aW9uKG5vZGUucGFyZW50Tm9kZSwgZ2V0Tm9kZUluZGV4KG5vZGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tUG9zaXRpb24obm9kZS5wYXJlbnROb2RlLCBnZXROb2RlSW5kZXgobm9kZSkgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluc2VydE5vZGVBdFBvc2l0aW9uKG5vZGUsIG4sIG8pIHtcbiAgICAgICAgICAgIHZhciBmaXJzdE5vZGVJbnNlcnRlZCA9IG5vZGUubm9kZVR5cGUgPT0gMTEgPyBub2RlLmZpcnN0Q2hpbGQgOiBub2RlO1xuICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUobikpIHtcbiAgICAgICAgICAgICAgICBpZiAobyA9PSBuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkb20uaW5zZXJ0QWZ0ZXIobm9kZSwgbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBvID09IDAgPyBuIDogc3BsaXREYXRhTm9kZShuLCBvKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvID49IG4uY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBuLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuLmluc2VydEJlZm9yZShub2RlLCBuLmNoaWxkTm9kZXNbb10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZpcnN0Tm9kZUluc2VydGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmFuZ2VzSW50ZXJzZWN0KHJhbmdlQSwgcmFuZ2VCLCB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlQSk7XG4gICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHJhbmdlQik7XG5cbiAgICAgICAgICAgIGlmIChnZXRSYW5nZURvY3VtZW50KHJhbmdlQikgIT0gZ2V0UmFuZ2VEb2N1bWVudChyYW5nZUEpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIldST05HX0RPQ1VNRU5UX0VSUlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocmFuZ2VBLnN0YXJ0Q29udGFpbmVyLCByYW5nZUEuc3RhcnRPZmZzZXQsIHJhbmdlQi5lbmRDb250YWluZXIsIHJhbmdlQi5lbmRPZmZzZXQpLFxuICAgICAgICAgICAgICAgIGVuZENvbXBhcmlzb24gPSBjb21wYXJlUG9pbnRzKHJhbmdlQS5lbmRDb250YWluZXIsIHJhbmdlQS5lbmRPZmZzZXQsIHJhbmdlQi5zdGFydENvbnRhaW5lciwgcmFuZ2VCLnN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcgPyBzdGFydENvbXBhcmlzb24gPD0gMCAmJiBlbmRDb21wYXJpc29uID49IDAgOiBzdGFydENvbXBhcmlzb24gPCAwICYmIGVuZENvbXBhcmlzb24gPiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVTdWJ0cmVlKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgcGFydGlhbGx5U2VsZWN0ZWQ7XG4gICAgICAgICAgICBmb3IgKHZhciBub2RlLCBmcmFnID0gZ2V0UmFuZ2VEb2N1bWVudChpdGVyYXRvci5yYW5nZSkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBzdWJJdGVyYXRvcjsgbm9kZSA9IGl0ZXJhdG9yLm5leHQoKTsgKSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbGx5U2VsZWN0ZWQgPSBpdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSghcGFydGlhbGx5U2VsZWN0ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0aWFsbHlTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJJdGVyYXRvciA9IGl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNsb25lU3VidHJlZShzdWJJdGVyYXRvcikpO1xuICAgICAgICAgICAgICAgICAgICBzdWJJdGVyYXRvci5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxMCkgeyAvLyBEb2N1bWVudFR5cGVcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmcmFnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXRlcmF0ZVN1YnRyZWUocmFuZ2VJdGVyYXRvciwgZnVuYywgaXRlcmF0b3JTdGF0ZSkge1xuICAgICAgICAgICAgdmFyIGl0LCBuO1xuICAgICAgICAgICAgaXRlcmF0b3JTdGF0ZSA9IGl0ZXJhdG9yU3RhdGUgfHwgeyBzdG9wOiBmYWxzZSB9O1xuICAgICAgICAgICAgZm9yICh2YXIgbm9kZSwgc3ViUmFuZ2VJdGVyYXRvcjsgbm9kZSA9IHJhbmdlSXRlcmF0b3IubmV4dCgpOyApIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VJdGVyYXRvci5pc1BhcnRpYWxseVNlbGVjdGVkU3VidHJlZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmdW5jKG5vZGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3JTdGF0ZS5zdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlIGlzIHBhcnRpYWxseSBzZWxlY3RlZCBieSB0aGUgUmFuZ2UsIHNvIHdlIGNhbiB1c2UgYSBuZXcgUmFuZ2VJdGVyYXRvciBvbiB0aGUgcG9ydGlvbiBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG5vZGUgc2VsZWN0ZWQgYnkgdGhlIFJhbmdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViUmFuZ2VJdGVyYXRvciA9IHJhbmdlSXRlcmF0b3IuZ2V0U3VidHJlZUl0ZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlU3VidHJlZShzdWJSYW5nZUl0ZXJhdG9yLCBmdW5jLCBpdGVyYXRvclN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlJhbmdlSXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3JTdGF0ZS5zdG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHdob2xlIG5vZGUgaXMgc2VsZWN0ZWQsIHNvIHdlIGNhbiB1c2UgZWZmaWNpZW50IERPTSBpdGVyYXRpb24gdG8gaXRlcmF0ZSBvdmVyIHRoZSBub2RlIGFuZCBpdHNcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVzY2VuZGFudHNcbiAgICAgICAgICAgICAgICAgICAgaXQgPSBkb20uY3JlYXRlSXRlcmF0b3Iobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICggKG4gPSBpdC5uZXh0KCkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmMobikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3JTdGF0ZS5zdG9wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWxldGVTdWJ0cmVlKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICB2YXIgc3ViSXRlcmF0b3I7XG4gICAgICAgICAgICB3aGlsZSAoaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhdG9yLmlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViSXRlcmF0b3IgPSBpdGVyYXRvci5nZXRTdWJ0cmVlSXRlcmF0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlU3VidHJlZShzdWJJdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGV4dHJhY3RTdWJ0cmVlKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBub2RlLCBmcmFnID0gZ2V0UmFuZ2VEb2N1bWVudChpdGVyYXRvci5yYW5nZSkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBzdWJJdGVyYXRvcjsgbm9kZSA9IGl0ZXJhdG9yLm5leHQoKTsgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlcmF0b3IuaXNQYXJ0aWFsbHlTZWxlY3RlZFN1YnRyZWUoKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBzdWJJdGVyYXRvciA9IGl0ZXJhdG9yLmdldFN1YnRyZWVJdGVyYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGV4dHJhY3RTdWJ0cmVlKHN1Ykl0ZXJhdG9yKSk7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxMCkgeyAvLyBEb2N1bWVudFR5cGVcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmcmFnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9kZXNJblJhbmdlKHJhbmdlLCBub2RlVHlwZXMsIGZpbHRlcikge1xuICAgICAgICAgICAgdmFyIGZpbHRlck5vZGVUeXBlcyA9ICEhKG5vZGVUeXBlcyAmJiBub2RlVHlwZXMubGVuZ3RoKSwgcmVnZXg7XG4gICAgICAgICAgICB2YXIgZmlsdGVyRXhpc3RzID0gISFmaWx0ZXI7XG4gICAgICAgICAgICBpZiAoZmlsdGVyTm9kZVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKFwiXihcIiArIG5vZGVUeXBlcy5qb2luKFwifFwiKSArIFwiKSRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUobmV3IFJhbmdlSXRlcmF0b3IocmFuZ2UsIGZhbHNlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJOb2RlVHlwZXMgJiYgIXJlZ2V4LnRlc3Qobm9kZS5ub2RlVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyRXhpc3RzICYmICFmaWx0ZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEb24ndCBpbmNsdWRlIGEgYm91bmRhcnkgY29udGFpbmVyIGlmIGl0IGlzIGEgY2hhcmFjdGVyIGRhdGEgbm9kZSBhbmQgdGhlIHJhbmdlIGRvZXMgbm90IGNvbnRhaW4gYW55XG4gICAgICAgICAgICAgICAgLy8gb2YgaXRzIGNoYXJhY3RlciBkYXRhLiBTZWUgaXNzdWUgMTkwLlxuICAgICAgICAgICAgICAgIHZhciBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09IHNjICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoc2MpICYmIHJhbmdlLnN0YXJ0T2Zmc2V0ID09IHNjLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09IGVjICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoZWMpICYmIHJhbmdlLmVuZE9mZnNldCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbnNwZWN0KHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9ICh0eXBlb2YgcmFuZ2UuZ2V0TmFtZSA9PSBcInVuZGVmaW5lZFwiKSA/IFwiUmFuZ2VcIiA6IHJhbmdlLmdldE5hbWUoKTtcbiAgICAgICAgICAgIHJldHVybiBcIltcIiArIG5hbWUgKyBcIihcIiArIGRvbS5pbnNwZWN0Tm9kZShyYW5nZS5zdGFydENvbnRhaW5lcikgKyBcIjpcIiArIHJhbmdlLnN0YXJ0T2Zmc2V0ICsgXCIsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgZG9tLmluc3BlY3ROb2RlKHJhbmdlLmVuZENvbnRhaW5lcikgKyBcIjpcIiArIHJhbmdlLmVuZE9mZnNldCArIFwiKV1cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gUmFuZ2VJdGVyYXRvciBjb2RlIHBhcnRpYWxseSBib3Jyb3dzIGZyb20gSUVSYW5nZSBieSBUaW0gUnlhbiAoaHR0cDovL2dpdGh1Yi5jb20vdGltY2FtZXJvbnJ5YW4vSUVSYW5nZSlcblxuICAgICAgICBmdW5jdGlvbiBSYW5nZUl0ZXJhdG9yKHJhbmdlLCBjbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKSB7XG4gICAgICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgICAgICB0aGlzLmNsb25lUGFydGlhbGx5U2VsZWN0ZWRUZXh0Tm9kZXMgPSBjbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzO1xuXG5cbiAgICAgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICAgICAgICAgICAgICAgIHRoaXMuc28gPSByYW5nZS5zdGFydE9mZnNldDtcbiAgICAgICAgICAgICAgICB0aGlzLmVjID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xuICAgICAgICAgICAgICAgIHRoaXMuZW8gPSByYW5nZS5lbmRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHJvb3QgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjID09PSB0aGlzLmVjICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zYykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1NpbmdsZUNoYXJhY3RlckRhdGFOb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSB0aGlzLl9sYXN0ID0gdGhpcy5fbmV4dCA9IHRoaXMuc2M7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyc3QgPSB0aGlzLl9uZXh0ID0gKHRoaXMuc2MgPT09IHJvb3QgJiYgIWlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5zYykpID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2MuY2hpbGROb2Rlc1t0aGlzLnNvXSA6IGdldENsb3Nlc3RBbmNlc3RvckluKHRoaXMuc2MsIHJvb3QsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0ID0gKHRoaXMuZWMgPT09IHJvb3QgJiYgIWlzQ2hhcmFjdGVyRGF0YU5vZGUodGhpcy5lYykpID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWMuY2hpbGROb2Rlc1t0aGlzLmVvIC0gMV0gOiBnZXRDbG9zZXN0QW5jZXN0b3JJbih0aGlzLmVjLCByb290LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBSYW5nZUl0ZXJhdG9yLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIF9jdXJyZW50OiBudWxsLFxuICAgICAgICAgICAgX25leHQ6IG51bGwsXG4gICAgICAgICAgICBfZmlyc3Q6IG51bGwsXG4gICAgICAgICAgICBfbGFzdDogbnVsbCxcbiAgICAgICAgICAgIGlzU2luZ2xlQ2hhcmFjdGVyRGF0YU5vZGU6IGZhbHNlLFxuXG4gICAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmV4dCA9IHRoaXMuX2ZpcnN0O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaGFzTmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fbmV4dDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gbmV4dCBub2RlXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50ID0gdGhpcy5fbmV4dDtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0ID0gKGN1cnJlbnQgIT09IHRoaXMuX2xhc3QpID8gY3VycmVudC5uZXh0U2libGluZyA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHBhcnRpYWxseSBzZWxlY3RlZCB0ZXh0IG5vZGVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NoYXJhY3RlckRhdGFOb2RlKGN1cnJlbnQpICYmIHRoaXMuY2xvbmVQYXJ0aWFsbHlTZWxlY3RlZFRleHROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuZWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQuY2xvbmVOb2RlKHRydWUpKS5kZWxldGVEYXRhKHRoaXMuZW8sIGN1cnJlbnQubGVuZ3RoIC0gdGhpcy5lbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudCA9PT0gdGhpcy5zYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5jbG9uZU5vZGUodHJ1ZSkpLmRlbGV0ZURhdGEoMCwgdGhpcy5zbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9jdXJyZW50LCBzdGFydCwgZW5kO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyRGF0YU5vZGUoY3VycmVudCkgJiYgKGN1cnJlbnQgPT09IHRoaXMuc2MgfHwgY3VycmVudCA9PT0gdGhpcy5lYykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAoY3VycmVudCA9PT0gdGhpcy5zYykgPyB0aGlzLnNvIDogMDtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gKGN1cnJlbnQgPT09IHRoaXMuZWMpID8gdGhpcy5lbyA6IGN1cnJlbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnQgIT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmRlbGV0ZURhdGEoc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBDaGVja3MgaWYgdGhlIGN1cnJlbnQgbm9kZSBpcyBwYXJ0aWFsbHkgc2VsZWN0ZWRcbiAgICAgICAgICAgIGlzUGFydGlhbGx5U2VsZWN0ZWRTdWJ0cmVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGN1cnJlbnQsIHRoaXMucmFuZ2UpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0U3VidHJlZUl0ZXJhdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViUmFuZ2U7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVDaGFyYWN0ZXJEYXRhTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZSA9IHRoaXMucmFuZ2UuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJSYW5nZS5jb2xsYXBzZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViUmFuZ2UgPSBuZXcgUmFuZ2UoZ2V0UmFuZ2VEb2N1bWVudCh0aGlzLnJhbmdlKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29udGFpbmVyID0gY3VycmVudCwgc3RhcnRPZmZzZXQgPSAwLCBlbmRDb250YWluZXIgPSBjdXJyZW50LCBlbmRPZmZzZXQgPSBnZXROb2RlTGVuZ3RoKGN1cnJlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09ySXNBbmNlc3Rvck9mKGN1cnJlbnQsIHRoaXMuc2MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydENvbnRhaW5lciA9IHRoaXMuc2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IHRoaXMuc287XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3JJc0FuY2VzdG9yT2YoY3VycmVudCwgdGhpcy5lYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZENvbnRhaW5lciA9IHRoaXMuZWM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRPZmZzZXQgPSB0aGlzLmVvO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQm91bmRhcmllcyhzdWJSYW5nZSwgc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0LCBlbmRDb250YWluZXIsIGVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2VJdGVyYXRvcihzdWJSYW5nZSwgdGhpcy5jbG9uZVBhcnRpYWxseVNlbGVjdGVkVGV4dE5vZGVzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYW5nZSA9IHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9uZXh0ID0gdGhpcy5fZmlyc3QgPSB0aGlzLl9sYXN0ID0gdGhpcy5zYyA9IHRoaXMuc28gPSB0aGlzLmVjID0gdGhpcy5lbyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICB2YXIgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMgPSBbMSwgMywgNCwgNSwgNywgOCwgMTBdO1xuICAgICAgICB2YXIgcm9vdENvbnRhaW5lck5vZGVUeXBlcyA9IFsyLCA5LCAxMV07XG4gICAgICAgIHZhciByZWFkb25seU5vZGVUeXBlcyA9IFs1LCA2LCAxMCwgMTJdO1xuICAgICAgICB2YXIgaW5zZXJ0YWJsZU5vZGVUeXBlcyA9IFsxLCAzLCA0LCA1LCA3LCA4LCAxMCwgMTFdO1xuICAgICAgICB2YXIgc3Vycm91bmROb2RlVHlwZXMgPSBbMSwgMywgNCwgNSwgNywgOF07XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlQW5jZXN0b3JGaW5kZXIobm9kZVR5cGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSwgc2VsZklzQW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCwgbiA9IHNlbGZJc0FuY2VzdG9yID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobikge1xuICAgICAgICAgICAgICAgICAgICB0ID0gbi5ub2RlVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycmF5Q29udGFpbnMobm9kZVR5cGVzLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdldERvY3VtZW50T3JGcmFnbWVudENvbnRhaW5lciA9IGNyZWF0ZUFuY2VzdG9yRmluZGVyKCBbOSwgMTFdICk7XG4gICAgICAgIHZhciBnZXRSZWFkb25seUFuY2VzdG9yID0gY3JlYXRlQW5jZXN0b3JGaW5kZXIocmVhZG9ubHlOb2RlVHlwZXMpO1xuICAgICAgICB2YXIgZ2V0RG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3IgPSBjcmVhdGVBbmNlc3RvckZpbmRlciggWzYsIDEwLCAxMl0gKTtcblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikge1xuICAgICAgICAgICAgaWYgKGdldERvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIGFsbG93U2VsZikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSU5WQUxJRF9OT0RFX1RZUEVfRVJSXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBpbnZhbGlkVHlwZXMpIHtcbiAgICAgICAgICAgIGlmICghYXJyYXlDb250YWlucyhpbnZhbGlkVHlwZXMsIG5vZGUubm9kZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfTk9ERV9UWVBFX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gKGlzQ2hhcmFjdGVyRGF0YU5vZGUobm9kZSkgPyBub2RlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOREVYX1NJWkVfRVJSXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlMSwgbm9kZTIpIHtcbiAgICAgICAgICAgIGlmIChnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTEsIHRydWUpICE9PSBnZXREb2N1bWVudE9yRnJhZ21lbnRDb250YWluZXIobm9kZTIsIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIldST05HX0RPQ1VNRU5UX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVOb3RSZWFkT25seShub2RlKSB7XG4gICAgICAgICAgICBpZiAoZ2V0UmVhZG9ubHlBbmNlc3Rvcihub2RlLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUsIGNvZGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKGNvZGVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWRPZmZzZXQobm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0IDw9IChpc0NoYXJhY3RlckRhdGFOb2RlKG5vZGUpID8gbm9kZS5sZW5ndGggOiBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzUmFuZ2VWYWxpZChyYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuICghIXJhbmdlLnN0YXJ0Q29udGFpbmVyICYmICEhcmFuZ2UuZW5kQ29udGFpbmVyICYmXG4gICAgICAgICAgICAgICAgICAgICEoY3Jhc2h5VGV4dE5vZGVzICYmIChkb20uaXNCcm9rZW5Ob2RlKHJhbmdlLnN0YXJ0Q29udGFpbmVyKSB8fCBkb20uaXNCcm9rZW5Ob2RlKHJhbmdlLmVuZENvbnRhaW5lcikpKSAmJlxuICAgICAgICAgICAgICAgICAgICBnZXRSb290Q29udGFpbmVyKHJhbmdlLnN0YXJ0Q29udGFpbmVyKSA9PSBnZXRSb290Q29udGFpbmVyKHJhbmdlLmVuZENvbnRhaW5lcikgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZE9mZnNldChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWRPZmZzZXQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpIHtcbiAgICAgICAgICAgIGlmICghaXNSYW5nZVZhbGlkKHJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbmdlIGVycm9yOiBSYW5nZSBpcyBub3QgdmFsaWQuIFRoaXMgdXN1YWxseSBoYXBwZW5zIGFmdGVyIERPTSBtdXRhdGlvbi4gUmFuZ2U6IChcIiArIHJhbmdlLmluc3BlY3QoKSArIFwiKVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgLy8gVGVzdCB0aGUgYnJvd3NlcidzIGlubmVySFRNTCBzdXBwb3J0IHRvIGRlY2lkZSBob3cgdG8gaW1wbGVtZW50IGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudFxuICAgICAgICB2YXIgc3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgdmFyIGh0bWxQYXJzaW5nQ29uZm9ybXMgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0eWxlRWwuaW5uZXJIVE1MID0gXCI8Yj54PC9iPlwiO1xuICAgICAgICAgICAgaHRtbFBhcnNpbmdDb25mb3JtcyA9IChzdHlsZUVsLmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMyk7IC8vIE9wZXJhIGluY29ycmVjdGx5IGNyZWF0ZXMgYW4gZWxlbWVudCBub2RlXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIElFIDYgYW5kIDcgdGhyb3dcbiAgICAgICAgfVxuXG4gICAgICAgIGFwaS5mZWF0dXJlcy5odG1sUGFyc2luZ0NvbmZvcm1zID0gaHRtbFBhcnNpbmdDb25mb3JtcztcblxuICAgICAgICB2YXIgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50ID0gaHRtbFBhcnNpbmdDb25mb3JtcyA/XG5cbiAgICAgICAgICAgIC8vIEltcGxlbWVudGF0aW9uIGFzIHBlciBIVE1MIHBhcnNpbmcgc3BlYywgdHJ1c3RpbmcgaW4gdGhlIGJyb3dzZXIncyBpbXBsZW1lbnRhdGlvbiBvZiBpbm5lckhUTUwuIFNlZVxuICAgICAgICAgICAgLy8gZGlzY3Vzc2lvbiBhbmQgYmFzZSBjb2RlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uIGF0IGlzc3VlIDY3LlxuICAgICAgICAgICAgLy8gU3BlYzogaHR0cDovL2h0bWw1Lm9yZy9zcGVjcy9kb20tcGFyc2luZy5odG1sI2V4dGVuc2lvbnMtdG8tdGhlLXJhbmdlLWludGVyZmFjZVxuICAgICAgICAgICAgLy8gVGhhbmtzIHRvIEFsZWtzIFdpbGxpYW1zLlxuICAgICAgICAgICAgZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHtcbiAgICAgICAgICAgICAgICAvLyBcIkxldCBub2RlIHRoZSBjb250ZXh0IG9iamVjdCdzIHN0YXJ0J3Mgbm9kZS5cIlxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydENvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQobm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBcIklmIHRoZSBjb250ZXh0IG9iamVjdCdzIHN0YXJ0J3Mgbm9kZSBpcyBudWxsLCByYWlzZSBhbiBJTlZBTElEX1NUQVRFX0VSUlxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBhbmQgYWJvcnQgdGhlc2Ugc3RlcHMuXCJcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIklOVkFMSURfU1RBVEVfRVJSXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFwiTGV0IGVsZW1lbnQgYmUgYXMgZm9sbG93cywgZGVwZW5kaW5nIG9uIG5vZGUncyBpbnRlcmZhY2U6XCJcbiAgICAgICAgICAgICAgICAvLyBEb2N1bWVudCwgRG9jdW1lbnQgRnJhZ21lbnQ6IG51bGxcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gXCJFbGVtZW50OiBub2RlXCJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsID0gbm9kZTtcblxuICAgICAgICAgICAgICAgIC8vIFwiVGV4dCwgQ29tbWVudDogbm9kZSdzIHBhcmVudEVsZW1lbnRcIlxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGRvbS5wYXJlbnRFbGVtZW50KG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFwiSWYgZWl0aGVyIGVsZW1lbnQgaXMgbnVsbCBvciBlbGVtZW50J3Mgb3duZXJEb2N1bWVudCBpcyBhbiBIVE1MIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgLy8gYW5kIGVsZW1lbnQncyBsb2NhbCBuYW1lIGlzIFwiaHRtbFwiIGFuZCBlbGVtZW50J3MgbmFtZXNwYWNlIGlzIHRoZSBIVE1MXG4gICAgICAgICAgICAgICAgLy8gbmFtZXNwYWNlXCJcbiAgICAgICAgICAgICAgICBpZiAoZWwgPT09IG51bGwgfHwgKFxuICAgICAgICAgICAgICAgICAgICBlbC5ub2RlTmFtZSA9PSBcIkhUTUxcIiAmJlxuICAgICAgICAgICAgICAgICAgICBkb20uaXNIdG1sTmFtZXNwYWNlKGdldERvY3VtZW50KGVsKS5kb2N1bWVudEVsZW1lbnQpICYmXG4gICAgICAgICAgICAgICAgICAgIGRvbS5pc0h0bWxOYW1lc3BhY2UoZWwpXG4gICAgICAgICAgICAgICAgKSkge1xuXG4gICAgICAgICAgICAgICAgLy8gXCJsZXQgZWxlbWVudCBiZSBhIG5ldyBFbGVtZW50IHdpdGggXCJib2R5XCIgYXMgaXRzIGxvY2FsIG5hbWUgYW5kIHRoZSBIVE1MXG4gICAgICAgICAgICAgICAgLy8gbmFtZXNwYWNlIGFzIGl0cyBuYW1lc3BhY2UuXCJcIlxuICAgICAgICAgICAgICAgICAgICBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbCA9IGVsLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gXCJJZiB0aGUgbm9kZSdzIGRvY3VtZW50IGlzIGFuIEhUTUwgZG9jdW1lbnQ6IEludm9rZSB0aGUgSFRNTCBmcmFnbWVudCBwYXJzaW5nIGFsZ29yaXRobS5cIlxuICAgICAgICAgICAgICAgIC8vIFwiSWYgdGhlIG5vZGUncyBkb2N1bWVudCBpcyBhbiBYTUwgZG9jdW1lbnQ6IEludm9rZSB0aGUgWE1MIGZyYWdtZW50IHBhcnNpbmcgYWxnb3JpdGhtLlwiXG4gICAgICAgICAgICAgICAgLy8gXCJJbiBlaXRoZXIgY2FzZSwgdGhlIGFsZ29yaXRobSBtdXN0IGJlIGludm9rZWQgd2l0aCBmcmFnbWVudCBhcyB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAvLyBhbmQgZWxlbWVudCBhcyB0aGUgY29udGV4dCBlbGVtZW50LlwiXG4gICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gZnJhZ21lbnRTdHI7XG5cbiAgICAgICAgICAgICAgICAvLyBcIklmIHRoaXMgcmFpc2VzIGFuIGV4Y2VwdGlvbiwgdGhlbiBhYm9ydCB0aGVzZSBzdGVwcy4gT3RoZXJ3aXNlLCBsZXQgbmV3XG4gICAgICAgICAgICAgICAgLy8gY2hpbGRyZW4gYmUgdGhlIG5vZGVzIHJldHVybmVkLlwiXG5cbiAgICAgICAgICAgICAgICAvLyBcIkxldCBmcmFnbWVudCBiZSBhIG5ldyBEb2N1bWVudEZyYWdtZW50LlwiXG4gICAgICAgICAgICAgICAgLy8gXCJBcHBlbmQgYWxsIG5ldyBjaGlsZHJlbiB0byBmcmFnbWVudC5cIlxuICAgICAgICAgICAgICAgIC8vIFwiUmV0dXJuIGZyYWdtZW50LlwiXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbS5mcmFnbWVudEZyb21Ob2RlQ2hpbGRyZW4oZWwpO1xuICAgICAgICAgICAgfSA6XG5cbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgaW5uZXJIVE1MIGNhbm5vdCBiZSB0cnVzdGVkLCBzbyBmYWxsIGJhY2sgdG8gYSBzaW1wbGVyLCBub24tY29uZm9ybWFudCBpbXBsZW1lbnRhdGlvbiB0aGF0XG4gICAgICAgICAgICAvLyBwcmV2aW91cyB2ZXJzaW9ucyBvZiBSYW5neSB1c2VkICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdXNpbmcgYSBib2R5IGVsZW1lbnQgcmF0aGVyIHRoYW4gYSBkaXYpXG4gICAgICAgICAgICBmdW5jdGlvbihmcmFnbWVudFN0cikge1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBmcmFnbWVudFN0cjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkb20uZnJhZ21lbnRGcm9tTm9kZUNoaWxkcmVuKGVsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc3BsaXRSYW5nZUJvdW5kYXJpZXMocmFuZ2UsIHBvc2l0aW9uc1RvUHJlc2VydmUpIHtcbiAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQocmFuZ2UpO1xuXG4gICAgICAgICAgICB2YXIgc2MgPSByYW5nZS5zdGFydENvbnRhaW5lciwgc28gPSByYW5nZS5zdGFydE9mZnNldCwgZWMgPSByYW5nZS5lbmRDb250YWluZXIsIGVvID0gcmFuZ2UuZW5kT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIHN0YXJ0RW5kU2FtZSA9IChzYyA9PT0gZWMpO1xuXG4gICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShlYykgJiYgZW8gPiAwICYmIGVvIDwgZWMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3BsaXREYXRhTm9kZShlYywgZW8sIHBvc2l0aW9uc1RvUHJlc2VydmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykgJiYgc28gPiAwICYmIHNvIDwgc2MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2MgPSBzcGxpdERhdGFOb2RlKHNjLCBzbywgcG9zaXRpb25zVG9QcmVzZXJ2ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RW5kU2FtZSkge1xuICAgICAgICAgICAgICAgICAgICBlbyAtPSBzbztcbiAgICAgICAgICAgICAgICAgICAgZWMgPSBzYztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVjID09IHNjLnBhcmVudE5vZGUgJiYgZW8gPj0gZ2V0Tm9kZUluZGV4KHNjKSkge1xuICAgICAgICAgICAgICAgICAgICBlbysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzbyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydEFuZEVuZChzYywgc28sIGVjLCBlbyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByYW5nZVRvSHRtbChyYW5nZSkge1xuICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZChyYW5nZSk7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKCByYW5nZS5jbG9uZUNvbnRlbnRzKCkgKTtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIuaW5uZXJIVE1MO1xuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICB2YXIgcmFuZ2VQcm9wZXJ0aWVzID0gW1wic3RhcnRDb250YWluZXJcIiwgXCJzdGFydE9mZnNldFwiLCBcImVuZENvbnRhaW5lclwiLCBcImVuZE9mZnNldFwiLCBcImNvbGxhcHNlZFwiLFxuICAgICAgICAgICAgXCJjb21tb25BbmNlc3RvckNvbnRhaW5lclwiXTtcblxuICAgICAgICB2YXIgczJzID0gMCwgczJlID0gMSwgZTJlID0gMiwgZTJzID0gMztcbiAgICAgICAgdmFyIG5fYiA9IDAsIG5fYSA9IDEsIG5fYl9hID0gMiwgbl9pID0gMztcblxuICAgICAgICB1dGlsLmV4dGVuZChhcGkucmFuZ2VQcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbXBhcmVCb3VuZGFyeVBvaW50czogZnVuY3Rpb24oaG93LCByYW5nZSkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudCh0aGlzLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCO1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXhBID0gKGhvdyA9PSBlMnMgfHwgaG93ID09IHMycykgPyBcInN0YXJ0XCIgOiBcImVuZFwiO1xuICAgICAgICAgICAgICAgIHZhciBwcmVmaXhCID0gKGhvdyA9PSBzMmUgfHwgaG93ID09IHMycykgPyBcInN0YXJ0XCIgOiBcImVuZFwiO1xuICAgICAgICAgICAgICAgIG5vZGVBID0gdGhpc1twcmVmaXhBICsgXCJDb250YWluZXJcIl07XG4gICAgICAgICAgICAgICAgb2Zmc2V0QSA9IHRoaXNbcHJlZml4QSArIFwiT2Zmc2V0XCJdO1xuICAgICAgICAgICAgICAgIG5vZGVCID0gcmFuZ2VbcHJlZml4QiArIFwiQ29udGFpbmVyXCJdO1xuICAgICAgICAgICAgICAgIG9mZnNldEIgPSByYW5nZVtwcmVmaXhCICsgXCJPZmZzZXRcIl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMobm9kZUEsIG9mZnNldEEsIG5vZGVCLCBvZmZzZXRCKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluc2VydE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgaW5zZXJ0YWJsZU5vZGVUeXBlcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzT3JJc0FuY2VzdG9yT2Yobm9kZSwgdGhpcy5zdGFydENvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBObyBjaGVjayBmb3Igd2hldGhlciB0aGUgY29udGFpbmVyIG9mIHRoZSBzdGFydCBvZiB0aGUgUmFuZ2UgaXMgb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWxsb3dcbiAgICAgICAgICAgICAgICAvLyBjaGlsZHJlbiBvZiB0aGUgdHlwZSBvZiBub2RlOiB0aGUgYnJvd3NlcidzIERPTSBpbXBsZW1lbnRhdGlvbiBzaG91bGQgZG8gdGhpcyBmb3IgdXMgd2hlbiB3ZSBhdHRlbXB0XG4gICAgICAgICAgICAgICAgLy8gdG8gYWRkIHRoZSBub2RlXG5cbiAgICAgICAgICAgICAgICB2YXIgZmlyc3ROb2RlSW5zZXJ0ZWQgPSBpbnNlcnROb2RlQXRQb3NpdGlvbihub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKGZpcnN0Tm9kZUluc2VydGVkKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNsb25lQ29udGVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2xvbmUsIGZyYWc7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydENvbnRhaW5lciA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZSh0aGlzLnN0YXJ0Q29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLmRhdGEgPSBjbG9uZS5kYXRhLnNsaWNlKHRoaXMuc3RhcnRPZmZzZXQsIHRoaXMuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gY2xvbmVTdWJ0cmVlKGl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjYW5TdXJyb3VuZENvbnRlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGVOb3RSZWFkT25seSh0aGlzLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5lbmRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNvbnRlbnRzIGNhbiBiZSBzdXJyb3VuZGVkLiBTcGVjaWZpY2FsbHksIHRoaXMgbWVhbnMgd2hldGhlciB0aGUgcmFuZ2UgcGFydGlhbGx5IHNlbGVjdHNcbiAgICAgICAgICAgICAgICAvLyBubyBub24tdGV4dCBub2Rlcy5cbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcmllc0ludmFsaWQgPSAoaXRlcmF0b3IuX2ZpcnN0ICYmIChpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChpdGVyYXRvci5fZmlyc3QsIHRoaXMpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZXJhdG9yLl9sYXN0ICYmIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9sYXN0LCB0aGlzKSkpO1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhYm91bmRhcmllc0ludmFsaWQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzdXJyb3VuZENvbnRlbnRzOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWROb2RlVHlwZShub2RlLCBzdXJyb3VuZE5vZGVUeXBlcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2FuU3Vycm91bmRDb250ZW50cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTlZBTElEX1NUQVRFX0VSUlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBjb250ZW50c1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5leHRyYWN0Q29udGVudHMoKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBjaGlsZHJlbiBvZiB0aGUgbm9kZVxuICAgICAgICAgICAgICAgIGlmIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBuZXcgbm9kZSBhbmQgYWRkIHRoZSBleHRyYWN0ZWQgY29udGVudHNcbiAgICAgICAgICAgICAgICBpbnNlcnROb2RlQXRQb3NpdGlvbihub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlKG5vZGUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2xvbmVSYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBuZXcgUmFuZ2UoZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoLCBwcm9wO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcCA9IHJhbmdlUHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbcHJvcF0gPSB0aGlzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB2YXIgc2MgPSB0aGlzLnN0YXJ0Q29udGFpbmVyO1xuICAgICAgICAgICAgICAgIGlmIChzYyA9PT0gdGhpcy5lbmRDb250YWluZXIgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChzYy5ub2RlVHlwZSA9PSAzIHx8IHNjLm5vZGVUeXBlID09IDQpID8gc2MuZGF0YS5zbGljZSh0aGlzLnN0YXJ0T2Zmc2V0LCB0aGlzLmVuZE9mZnNldCkgOiBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0UGFydHMgPSBbXSwgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUoaXRlcmF0b3IsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjY2VwdCBvbmx5IHRleHQgb3IgQ0RBVEEgbm9kZXMsIG5vdCBjb21tZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyB8fCBub2RlLm5vZGVUeXBlID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UGFydHMucHVzaChub2RlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0UGFydHMuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBUaGUgbWV0aG9kcyBiZWxvdyBhcmUgYWxsIG5vbi1zdGFuZGFyZC4gVGhlIGZvbGxvd2luZyBiYXRjaCB3ZXJlIGludHJvZHVjZWQgYnkgTW96aWxsYSBidXQgaGF2ZSBzaW5jZVxuICAgICAgICAgICAgLy8gYmVlbiByZW1vdmVkIGZyb20gTW96aWxsYS5cblxuICAgICAgICAgICAgY29tcGFyZU5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUluZGV4ID0gZ2V0Tm9kZUluZGV4KG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIk5PVF9GT1VORF9FUlJcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q29tcGFyaXNvbiA9IHRoaXMuY29tcGFyZVBvaW50KHBhcmVudCwgbm9kZUluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IHRoaXMuY29tcGFyZVBvaW50KHBhcmVudCwgbm9kZUluZGV4ICsgMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRDb21wYXJpc29uIDwgMCkgeyAvLyBOb2RlIHN0YXJ0cyBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChlbmRDb21wYXJpc29uID4gMCkgPyBuX2JfYSA6IG5fYjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGVuZENvbXBhcmlzb24gPiAwKSA/IG5fYSA6IG5faTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb21wYXJlUG9pbnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZShub2RlLCBcIkhJRVJBUkNIWV9SRVFVRVNUX0VSUlwiKTtcbiAgICAgICAgICAgICAgICBhc3NlcnRTYW1lRG9jdW1lbnRPckZyYWdtZW50KG5vZGUsIHRoaXMuc3RhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudDogY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50LFxuXG4gICAgICAgICAgICB0b0h0bWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZVRvSHRtbCh0aGlzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIHRvdWNoaW5nSXNJbnRlcnNlY3RpbmcgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgbWV0aG9kIGNvbnNpZGVycyBhIG5vZGUgdGhhdCBib3JkZXJzIGEgcmFuZ2UgaW50ZXJzZWN0c1xuICAgICAgICAgICAgLy8gd2l0aCBpdCAoYXMgaW4gV2ViS2l0KSBvciBub3QgKGFzIGluIEdlY2tvIHByZS0xLjksIGFuZCB0aGUgZGVmYXVsdClcbiAgICAgICAgICAgIGludGVyc2VjdHNOb2RlOiBmdW5jdGlvbihub2RlLCB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0Um9vdENvbnRhaW5lcihub2RlKSAhPSBnZXRSYW5nZVJvb3QodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUsIG9mZnNldCA9IGdldE5vZGVJbmRleChub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyhwYXJlbnQsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHMocGFyZW50LCBvZmZzZXQgKyAxLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0b3VjaGluZ0lzSW50ZXJzZWN0aW5nID8gc3RhcnRDb21wYXJpc29uIDw9IDAgJiYgZW5kQ29tcGFyaXNvbiA+PSAwIDogc3RhcnRDb21wYXJpc29uIDwgMCAmJiBlbmRDb21wYXJpc29uID4gMDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzUG9pbnRJblJhbmdlOiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2VydE5vZGUobm9kZSwgXCJISUVSQVJDSFlfUkVRVUVTVF9FUlJcIik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0U2FtZURvY3VtZW50T3JGcmFnbWVudChub2RlLCB0aGlzLnN0YXJ0Q29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoY29tcGFyZVBvaW50cyhub2RlLCBvZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID49IDApICYmXG4gICAgICAgICAgICAgICAgICAgICAgIChjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgdGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0KSA8PSAwKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFRoZSBtZXRob2RzIGJlbG93IGFyZSBub24tc3RhbmRhcmQgYW5kIGludmVudGVkIGJ5IG1lLlxuXG4gICAgICAgICAgICAvLyBTaGFyaW5nIGEgYm91bmRhcnkgc3RhcnQtdG8tZW5kIG9yIGVuZC10by1zdGFydCBkb2VzIG5vdCBjb3VudCBhcyBpbnRlcnNlY3Rpb24uXG4gICAgICAgICAgICBpbnRlcnNlY3RzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlc0ludGVyc2VjdCh0aGlzLCByYW5nZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gU2hhcmluZyBhIGJvdW5kYXJ5IHN0YXJ0LXRvLWVuZCBvciBlbmQtdG8tc3RhcnQgZG9lcyBjb3VudCBhcyBpbnRlcnNlY3Rpb24uXG4gICAgICAgICAgICBpbnRlcnNlY3RzT3JUb3VjaGVzUmFuZ2U6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlc0ludGVyc2VjdCh0aGlzLCByYW5nZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbnRlcnNlY3Rpb246IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c1JhbmdlKHJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb21wYXJpc29uID0gY29tcGFyZVBvaW50cyh0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0LCByYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGFyaXNvbiA9IGNvbXBhcmVQb2ludHModGhpcy5lbmRDb250YWluZXIsIHRoaXMuZW5kT2Zmc2V0LCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvblJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydENvbXBhcmlzb24gPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbXBhcmlzb24gPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmFuZ2Uuc2V0RW5kKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uUmFuZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5pb246IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJzZWN0c09yVG91Y2hlc1JhbmdlKHJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5pb25SYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQsIHRoaXMuc3RhcnRDb250YWluZXIsIHRoaXMuc3RhcnRPZmZzZXQpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmlvblJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVQb2ludHMocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCkgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5pb25SYW5nZS5zZXRFbmQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlvblJhbmdlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJSYW5nZXMgZG8gbm90IGludGVyc2VjdFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc05vZGU6IGZ1bmN0aW9uKG5vZGUsIGFsbG93UGFydGlhbCkge1xuICAgICAgICAgICAgICAgIGlmIChhbGxvd1BhcnRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0c05vZGUobm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVOb2RlKG5vZGUpID09IG5faTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc05vZGVDb250ZW50czogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVQb2ludChub2RlLCAwKSA+PSAwICYmIHRoaXMuY29tcGFyZVBvaW50KG5vZGUsIGdldE5vZGVMZW5ndGgobm9kZSkpIDw9IDA7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb250YWluc1JhbmdlOiBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSB0aGlzLmludGVyc2VjdGlvbihyYW5nZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbiAhPT0gbnVsbCAmJiByYW5nZS5lcXVhbHMoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbnRhaW5zTm9kZVRleHQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZVJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNlbGVjdE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgdmFyIHRleHROb2RlcyA9IG5vZGVSYW5nZS5nZXROb2RlcyhbM10pO1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0Tm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlUmFuZ2Uuc2V0U3RhcnQodGV4dE5vZGVzWzBdLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RUZXh0Tm9kZSA9IHRleHROb2Rlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVJhbmdlLnNldEVuZChsYXN0VGV4dE5vZGUsIGxhc3RUZXh0Tm9kZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluc1JhbmdlKG5vZGVSYW5nZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbnNOb2RlQ29udGVudHMobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0Tm9kZXM6IGZ1bmN0aW9uKG5vZGVUeXBlcywgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Tm9kZXNJblJhbmdlKHRoaXMsIG5vZGVUeXBlcywgZmlsdGVyKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldERvY3VtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UmFuZ2VEb2N1bWVudCh0aGlzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNvbGxhcHNlQmVmb3JlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbmRCZWZvcmUobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzZShmYWxzZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjb2xsYXBzZUFmdGVyOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydEFmdGVyKG5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRCb29rbWFyazogZnVuY3Rpb24oY29udGFpbmVyTm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBkb2MgPSBnZXRSYW5nZURvY3VtZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVTZWxlY3Rpb25SYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUgPSBjb250YWluZXJOb2RlIHx8IGRvbS5nZXRCb2R5KGRvYyk7XG4gICAgICAgICAgICAgICAgcHJlU2VsZWN0aW9uUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGNvbnRhaW5lck5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuaW50ZXJzZWN0aW9uKHByZVNlbGVjdGlvblJhbmdlKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAwLCBlbmQgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBwcmVTZWxlY3Rpb25SYW5nZS5zZXRFbmQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwcmVTZWxlY3Rpb25SYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgKyByYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZW5kLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlOiBjb250YWluZXJOb2RlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1vdmVUb0Jvb2ttYXJrOiBmdW5jdGlvbihib29rbWFyaykge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJOb2RlID0gYm9va21hcmsuY29udGFpbmVyTm9kZTtcbiAgICAgICAgICAgICAgICB2YXIgY2hhckluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0KGNvbnRhaW5lck5vZGUsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVTdGFjayA9IFtjb250YWluZXJOb2RlXSwgbm9kZSwgZm91bmRTdGFydCA9IGZhbHNlLCBzdG9wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRDaGFySW5kZXgsIGksIGNoaWxkTm9kZXM7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoIXN0b3AgJiYgKG5vZGUgPSBub2RlU3RhY2sucG9wKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRDaGFySW5kZXggPSBjaGFySW5kZXggKyBub2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm91bmRTdGFydCAmJiBib29rbWFyay5zdGFydCA+PSBjaGFySW5kZXggJiYgYm9va21hcmsuc3RhcnQgPD0gbmV4dENoYXJJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnQobm9kZSwgYm9va21hcmsuc3RhcnQgLSBjaGFySW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kU3RhcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kU3RhcnQgJiYgYm9va21hcmsuZW5kID49IGNoYXJJbmRleCAmJiBib29rbWFyay5lbmQgPD0gbmV4dENoYXJJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kKG5vZGUsIGJvb2ttYXJrLmVuZCAtIGNoYXJJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFySW5kZXggPSBuZXh0Q2hhckluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBjaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlU3RhY2sucHVzaChjaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldE5hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkRvbVJhbmdlXCI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJhbmdlLnJhbmdlc0VxdWFsKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGlzVmFsaWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1JhbmdlVmFsaWQodGhpcyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbnNwZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zcGVjdCh0aGlzKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGRldGFjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gRE9NNCwgZGV0YWNoKCkgaXMgbm93IGEgbm8tb3AuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzVG9PYmplY3Qob2JqKSB7XG4gICAgICAgICAgICBvYmouU1RBUlRfVE9fU1RBUlQgPSBzMnM7XG4gICAgICAgICAgICBvYmouU1RBUlRfVE9fRU5EID0gczJlO1xuICAgICAgICAgICAgb2JqLkVORF9UT19FTkQgPSBlMmU7XG4gICAgICAgICAgICBvYmouRU5EX1RPX1NUQVJUID0gZTJzO1xuXG4gICAgICAgICAgICBvYmouTk9ERV9CRUZPUkUgPSBuX2I7XG4gICAgICAgICAgICBvYmouTk9ERV9BRlRFUiA9IG5fYTtcbiAgICAgICAgICAgIG9iai5OT0RFX0JFRk9SRV9BTkRfQUZURVIgPSBuX2JfYTtcbiAgICAgICAgICAgIG9iai5OT0RFX0lOU0lERSA9IG5faTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzKGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjb3B5Q29tcGFyaXNvbkNvbnN0YW50c1RvT2JqZWN0KGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICAgIGNvcHlDb21wYXJpc29uQ29uc3RhbnRzVG9PYmplY3QoY29uc3RydWN0b3IucHJvdG90eXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlQ29udGVudFJlbW92ZXIocmVtb3ZlciwgYm91bmRhcnlVcGRhdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcblxuICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgcm9vdCA9IHRoaXMuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmsgb3V0IHdoZXJlIHRvIHBvc2l0aW9uIHRoZSByYW5nZSBhZnRlciBjb250ZW50IHJlbW92YWxcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSwgYm91bmRhcnk7XG4gICAgICAgICAgICAgICAgaWYgKHNjICE9PSByb290KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBnZXRDbG9zZXN0QW5jZXN0b3JJbihzYywgcm9vdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5ID0gZ2V0Qm91bmRhcnlBZnRlck5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHNjID0gYm91bmRhcnkubm9kZTtcbiAgICAgICAgICAgICAgICAgICAgc28gPSBib3VuZGFyeS5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgbm9uZSBvZiB0aGUgcmFuZ2UgaXMgcmVhZC1vbmx5XG4gICAgICAgICAgICAgICAgaXRlcmF0ZVN1YnRyZWUoaXRlcmF0b3IsIGFzc2VydE5vZGVOb3RSZWFkT25seSk7XG5cbiAgICAgICAgICAgICAgICBpdGVyYXRvci5yZXNldCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250ZW50XG4gICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gcmVtb3ZlcihpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXcgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBzYywgc28pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb3RvdHlwZVJhbmdlKGNvbnN0cnVjdG9yLCBib3VuZGFyeVVwZGF0ZXIpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihpc0JlZm9yZSwgaXNTdGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkTm9kZVR5cGUobm9kZSwgYmVmb3JlQWZ0ZXJOb2RlVHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKGdldFJvb3RDb250YWluZXIobm9kZSksIHJvb3RDb250YWluZXJOb2RlVHlwZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeSA9IChpc0JlZm9yZSA/IGdldEJvdW5kYXJ5QmVmb3JlTm9kZSA6IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgKGlzU3RhcnQgPyBzZXRSYW5nZVN0YXJ0IDogc2V0UmFuZ2VFbmQpKHRoaXMsIGJvdW5kYXJ5Lm5vZGUsIGJvdW5kYXJ5Lm9mZnNldCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0UmFuZ2VTdGFydChyYW5nZSwgbm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVjID0gcmFuZ2UuZW5kQ29udGFpbmVyLCBlbyA9IHJhbmdlLmVuZE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSAhPT0gcmFuZ2Uuc3RhcnRDb250YWluZXIgfHwgb2Zmc2V0ICE9PSByYW5nZS5zdGFydE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgcm9vdCBjb250YWluZXJzIG9mIHRoZSByYW5nZSBhbmQgdGhlIG5ldyBib3VuZGFyeSwgYW5kIGFsc28gY2hlY2sgd2hldGhlciB0aGUgbmV3IGJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGFmdGVyIHRoZSBjdXJyZW50IGVuZC4gSW4gZWl0aGVyIGNhc2UsIGNvbGxhcHNlIHRoZSByYW5nZSB0byB0aGUgbmV3IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRSb290Q29udGFpbmVyKG5vZGUpICE9IGdldFJvb3RDb250YWluZXIoZWMpIHx8IGNvbXBhcmVQb2ludHMobm9kZSwgb2Zmc2V0LCBlYywgZW8pID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcihyYW5nZSwgbm9kZSwgb2Zmc2V0LCBlYywgZW8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0UmFuZ2VFbmQocmFuZ2UsIG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHZhciBzYyA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSByYW5nZS5lbmRDb250YWluZXIgfHwgb2Zmc2V0ICE9PSByYW5nZS5lbmRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJvb3QgY29udGFpbmVycyBvZiB0aGUgcmFuZ2UgYW5kIHRoZSBuZXcgYm91bmRhcnksIGFuZCBhbHNvIGNoZWNrIHdoZXRoZXIgdGhlIG5ldyBib3VuZGFyeVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBhZnRlciB0aGUgY3VycmVudCBlbmQuIEluIGVpdGhlciBjYXNlLCBjb2xsYXBzZSB0aGUgcmFuZ2UgdG8gdGhlIG5ldyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0Um9vdENvbnRhaW5lcihub2RlKSAhPSBnZXRSb290Q29udGFpbmVyKHNjKSB8fCBjb21wYXJlUG9pbnRzKG5vZGUsIG9mZnNldCwgc2MsIHNvKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2MgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc28gPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHJhbmdlLCBzYywgc28sIG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdXAgaW5oZXJpdGFuY2VcbiAgICAgICAgICAgIHZhciBGID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gYXBpLnJhbmdlUHJvdG90eXBlO1xuICAgICAgICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IEYoKTtcblxuICAgICAgICAgICAgdXRpbC5leHRlbmQoY29uc3RydWN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgICAgICAgICAgc2V0U3RhcnQ6IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb0RvY1R5cGVOb3RhdGlvbkVudGl0eUFuY2VzdG9yKG5vZGUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE9mZnNldChub2RlLCBvZmZzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFJhbmdlU3RhcnQodGhpcywgbm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2V0RW5kOiBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9Eb2NUeXBlTm90YXRpb25FbnRpdHlBbmNlc3Rvcihub2RlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0VmFsaWRPZmZzZXQobm9kZSwgb2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRSYW5nZUVuZCh0aGlzLCBub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gc2V0IGEgcmFuZ2UncyBzdGFydCBhbmQgZW5kIGJvdW5kYXJpZXMuIE92ZXJsb2FkZWQgYXMgZm9sbG93czpcbiAgICAgICAgICAgICAgICAgKiAtIFR3byBwYXJhbWV0ZXJzIChub2RlLCBvZmZzZXQpIGNyZWF0ZXMgYSBjb2xsYXBzZWQgcmFuZ2UgYXQgdGhhdCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAqIC0gVGhyZWUgcGFyYW1ldGVycyAobm9kZSwgc3RhcnRPZmZzZXQsIGVuZE9mZnNldCkgY3JlYXRlcyBhIHJhbmdlIGNvbnRhaW5lZCB3aXRoIG5vZGUgc3RhcnRpbmcgYXRcbiAgICAgICAgICAgICAgICAgKiAgIHN0YXJ0T2Zmc2V0IGFuZCBlbmRpbmcgYXQgZW5kT2Zmc2V0XG4gICAgICAgICAgICAgICAgICogLSBGb3VyIHBhcmFtZXRlcnMgKHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQsIGVuZE5vZGUsIGVuZE9mZnNldCkgY3JlYXRlcyBhIHJhbmdlIHN0YXJ0aW5nIGF0IHN0YXJ0T2Zmc2V0IGluXG4gICAgICAgICAgICAgICAgICogICBzdGFydE5vZGUgYW5kIGVuZGluZyBhdCBlbmRPZmZzZXQgaW4gZW5kTm9kZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNldFN0YXJ0QW5kRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYyA9IGFyZ3NbMF0sIHNvID0gYXJnc1sxXSwgZWMgPSBzYywgZW8gPSBzbztcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8gPSBhcmdzWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gYXJnc1syXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbyA9IGFyZ3NbM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc2MsIHNvLCBlYywgZW8pO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZXRCb3VuZGFyeTogZnVuY3Rpb24obm9kZSwgb2Zmc2V0LCBpc1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbXCJzZXRcIiArIChpc1N0YXJ0ID8gXCJTdGFydFwiIDogXCJFbmRcIildKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldFN0YXJ0QmVmb3JlOiBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXIodHJ1ZSwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgc2V0U3RhcnRBZnRlcjogY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKGZhbHNlLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBzZXRFbmRCZWZvcmU6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcih0cnVlLCBmYWxzZSksXG4gICAgICAgICAgICAgICAgc2V0RW5kQWZ0ZXI6IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihmYWxzZSwgZmFsc2UpLFxuXG4gICAgICAgICAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0LCB0aGlzLnN0YXJ0Q29udGFpbmVyLCB0aGlzLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCB0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQsIHRoaXMuZW5kQ29udGFpbmVyLCB0aGlzLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc2VsZWN0Tm9kZUNvbnRlbnRzOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlVcGRhdGVyKHRoaXMsIG5vZGUsIDAsIG5vZGUsIGdldE5vZGVMZW5ndGgobm9kZSkpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBzZWxlY3ROb2RlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRWYWxpZE5vZGVUeXBlKG5vZGUsIGJlZm9yZUFmdGVyTm9kZVR5cGVzKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBnZXRCb3VuZGFyeUJlZm9yZU5vZGUobm9kZSksIGVuZCA9IGdldEJvdW5kYXJ5QWZ0ZXJOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVVwZGF0ZXIodGhpcywgc3RhcnQubm9kZSwgc3RhcnQub2Zmc2V0LCBlbmQubm9kZSwgZW5kLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGV4dHJhY3RDb250ZW50czogY3JlYXRlUmFuZ2VDb250ZW50UmVtb3ZlcihleHRyYWN0U3VidHJlZSwgYm91bmRhcnlVcGRhdGVyKSxcblxuICAgICAgICAgICAgICAgIGRlbGV0ZUNvbnRlbnRzOiBjcmVhdGVSYW5nZUNvbnRlbnRSZW1vdmVyKGRlbGV0ZVN1YnRyZWUsIGJvdW5kYXJ5VXBkYXRlciksXG5cbiAgICAgICAgICAgICAgICBjYW5TdXJyb3VuZENvbnRlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0UmFuZ2VWYWxpZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0Tm9kZU5vdFJlYWRPbmx5KHRoaXMuc3RhcnRDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnROb2RlTm90UmVhZE9ubHkodGhpcy5lbmRDb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZW50cyBjYW4gYmUgc3Vycm91bmRlZC4gU3BlY2lmaWNhbGx5LCB0aGlzIG1lYW5zIHdoZXRoZXIgdGhlIHJhbmdlIHBhcnRpYWxseSBzZWxlY3RzXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIG5vbi10ZXh0IG5vZGVzLlxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgUmFuZ2VJdGVyYXRvcih0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvdW5kYXJpZXNJbnZhbGlkID0gKGl0ZXJhdG9yLl9maXJzdCAmJiBpc05vblRleHRQYXJ0aWFsbHlTZWxlY3RlZChpdGVyYXRvci5fZmlyc3QsIHRoaXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZXJhdG9yLl9sYXN0ICYmIGlzTm9uVGV4dFBhcnRpYWxseVNlbGVjdGVkKGl0ZXJhdG9yLl9sYXN0LCB0aGlzKSkpO1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvci5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFib3VuZGFyaWVzSW52YWxpZDtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc3BsaXRCb3VuZGFyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRSYW5nZUJvdW5kYXJpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNwbGl0Qm91bmRhcmllc1ByZXNlcnZpbmdQb3NpdGlvbnM6IGZ1bmN0aW9uKHBvc2l0aW9uc1RvUHJlc2VydmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3BsaXRSYW5nZUJvdW5kYXJpZXModGhpcywgcG9zaXRpb25zVG9QcmVzZXJ2ZSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUJvdW5kYXJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnRSYW5nZVZhbGlkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzYyA9IHRoaXMuc3RhcnRDb250YWluZXIsIHNvID0gdGhpcy5zdGFydE9mZnNldCwgZWMgPSB0aGlzLmVuZENvbnRhaW5lciwgZW8gPSB0aGlzLmVuZE9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2VGb3J3YXJkID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpYmxpbmcgJiYgc2libGluZy5ub2RlVHlwZSA9PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gbm9kZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmREYXRhKHNpYmxpbmcuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShzaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2VCYWNrd2FyZCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYyA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVMZW5ndGggPSBub2RlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbyA9IHNpYmxpbmcubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5zZXJ0RGF0YSgwLCBzaWJsaW5nLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoc2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjID09IGVjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvICs9IHNvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYyA9IHNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWMgPT0gbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBnZXROb2RlSW5kZXgobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbyA9PSBub2RlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gbm9kZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbyA+IG5vZGVJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW8tLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplU3RhcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2libGluZztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShlYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbyA9PSBlYy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUZvcndhcmQoZWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZyA9IGVjLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlID09IGVjLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVvID0gc2libGluZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzYyA9PSBlYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLmFwcGVuZERhdGEoZWMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoZWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYyA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVvID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmROb2RlID0gZWMuY2hpbGROb2Rlc1tlbyAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmROb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoZW5kTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VGb3J3YXJkKGVuZE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZVN0YXJ0ID0gIXRoaXMuY29sbGFwc2VkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJEYXRhTm9kZShzYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc28gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUJhY2t3YXJkKHNjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvID09IHNjLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nID0gc2MubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcubm9kZVR5cGUgPT0gc2Mubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlYyA9PSBzaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWMgPSBzYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbyArPSBzYy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYy5hcHBlbmREYXRhKHNpYmxpbmcuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKHNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc28gPCBzYy5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnROb2RlID0gc2MuY2hpbGROb2Rlc1tzb107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydE5vZGUgJiYgaXNDaGFyYWN0ZXJEYXRhTm9kZShzdGFydE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZUJhY2t3YXJkKHN0YXJ0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYyA9IGVjO1xuICAgICAgICAgICAgICAgICAgICAgICAgc28gPSBlbztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5VXBkYXRlcih0aGlzLCBzYywgc28sIGVjLCBlbyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIGNvbGxhcHNlVG9Qb2ludDogZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5vRG9jVHlwZU5vdGF0aW9uRW50aXR5QW5jZXN0b3Iobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkT2Zmc2V0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRBbmRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29weUNvbXBhcmlzb25Db25zdGFudHMoY29uc3RydWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAvLyBVcGRhdGVzIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIGFuZCBjb2xsYXBzZWQgYWZ0ZXIgYm91bmRhcnkgY2hhbmdlXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHJhbmdlKSB7XG4gICAgICAgICAgICByYW5nZS5jb2xsYXBzZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lciAmJiByYW5nZS5zdGFydE9mZnNldCA9PT0gcmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICAgICAgICAgIHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29sbGFwc2VkID9cbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2UuZW5kQ29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUJvdW5kYXJpZXMocmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpIHtcbiAgICAgICAgICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyID0gc3RhcnRDb250YWluZXI7XG4gICAgICAgICAgICByYW5nZS5zdGFydE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgcmFuZ2UuZW5kQ29udGFpbmVyID0gZW5kQ29udGFpbmVyO1xuICAgICAgICAgICAgcmFuZ2UuZW5kT2Zmc2V0ID0gZW5kT2Zmc2V0O1xuICAgICAgICAgICAgcmFuZ2UuZG9jdW1lbnQgPSBkb20uZ2V0RG9jdW1lbnQoc3RhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICB1cGRhdGVDb2xsYXBzZWRBbmRDb21tb25BbmNlc3RvcihyYW5nZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBSYW5nZShkb2MpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRDb250YWluZXIgPSBkb2M7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHRoaXMuZW5kQ29udGFpbmVyID0gZG9jO1xuICAgICAgICAgICAgdGhpcy5lbmRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvYztcbiAgICAgICAgICAgIHVwZGF0ZUNvbGxhcHNlZEFuZENvbW1vbkFuY2VzdG9yKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3JlYXRlUHJvdG90eXBlUmFuZ2UoUmFuZ2UsIHVwZGF0ZUJvdW5kYXJpZXMpO1xuXG4gICAgICAgIHV0aWwuZXh0ZW5kKFJhbmdlLCB7XG4gICAgICAgICAgICByYW5nZVByb3BlcnRpZXM6IHJhbmdlUHJvcGVydGllcyxcbiAgICAgICAgICAgIFJhbmdlSXRlcmF0b3I6IFJhbmdlSXRlcmF0b3IsXG4gICAgICAgICAgICBjb3B5Q29tcGFyaXNvbkNvbnN0YW50czogY29weUNvbXBhcmlzb25Db25zdGFudHMsXG4gICAgICAgICAgICBjcmVhdGVQcm90b3R5cGVSYW5nZTogY3JlYXRlUHJvdG90eXBlUmFuZ2UsXG4gICAgICAgICAgICBpbnNwZWN0OiBpbnNwZWN0LFxuICAgICAgICAgICAgdG9IdG1sOiByYW5nZVRvSHRtbCxcbiAgICAgICAgICAgIGdldFJhbmdlRG9jdW1lbnQ6IGdldFJhbmdlRG9jdW1lbnQsXG4gICAgICAgICAgICByYW5nZXNFcXVhbDogZnVuY3Rpb24ocjEsIHIyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIxLnN0YXJ0Q29udGFpbmVyID09PSByMi5zdGFydENvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgICAgICByMS5zdGFydE9mZnNldCA9PT0gcjIuc3RhcnRPZmZzZXQgJiZcbiAgICAgICAgICAgICAgICAgICAgcjEuZW5kQ29udGFpbmVyID09PSByMi5lbmRDb250YWluZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgcjEuZW5kT2Zmc2V0ID09PSByMi5lbmRPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwaS5Eb21SYW5nZSA9IFJhbmdlO1xuICAgIH0pO1xyXG5cclxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcblxyXG4gICAgLy8gV3JhcHBlcnMgZm9yIHRoZSBicm93c2VyJ3MgbmF0aXZlIERPTSBSYW5nZSBhbmQvb3IgVGV4dFJhbmdlIGltcGxlbWVudGF0aW9uXG4gICAgYXBpLmNyZWF0ZUNvcmVNb2R1bGUoXCJXcmFwcGVkUmFuZ2VcIiwgW1wiRG9tUmFuZ2VcIl0sIGZ1bmN0aW9uKGFwaSwgbW9kdWxlKSB7XG4gICAgICAgIHZhciBXcmFwcGVkUmFuZ2UsIFdyYXBwZWRUZXh0UmFuZ2U7XG4gICAgICAgIHZhciBkb20gPSBhcGkuZG9tO1xuICAgICAgICB2YXIgdXRpbCA9IGFwaS51dGlsO1xuICAgICAgICB2YXIgRG9tUG9zaXRpb24gPSBkb20uRG9tUG9zaXRpb247XG4gICAgICAgIHZhciBEb21SYW5nZSA9IGFwaS5Eb21SYW5nZTtcbiAgICAgICAgdmFyIGdldEJvZHkgPSBkb20uZ2V0Qm9keTtcbiAgICAgICAgdmFyIGdldENvbnRlbnREb2N1bWVudCA9IGRvbS5nZXRDb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIHZhciBpc0NoYXJhY3RlckRhdGFOb2RlID0gZG9tLmlzQ2hhcmFjdGVyRGF0YU5vZGU7XG5cblxuICAgICAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgIGlmIChhcGkuZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIGJyb3dzZXIncyBuYXRpdmUgRE9NIFJhbmdlLiBJdCBoYXMgdHdvIGFpbXM6XG4gICAgICAgICAgICAvLyAtIFByb3ZpZGUgd29ya2Fyb3VuZHMgZm9yIHNwZWNpZmljIGJyb3dzZXIgYnVnc1xuICAgICAgICAgICAgLy8gLSBwcm92aWRlIGNvbnZlbmllbnQgZXh0ZW5zaW9ucywgd2hpY2ggYXJlIGluaGVyaXRlZCBmcm9tIFJhbmd5J3MgRG9tUmFuZ2VcblxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZVByb3RvO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZVByb3BlcnRpZXMgPSBEb21SYW5nZS5yYW5nZVByb3BlcnRpZXM7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVSYW5nZVByb3BlcnRpZXMocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSByYW5nZVByb3BlcnRpZXMubGVuZ3RoLCBwcm9wO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wID0gcmFuZ2VQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbcHJvcF0gPSByYW5nZS5uYXRpdmVSYW5nZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBGaXggZm9yIGJyb2tlbiBjb2xsYXBzZWQgcHJvcGVydHkgaW4gSUUgOS5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2VkID0gKHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPT09IHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlTmF0aXZlUmFuZ2UocmFuZ2UsIHN0YXJ0Q29udGFpbmVyLCBzdGFydE9mZnNldCwgZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0TW92ZWQgPSAocmFuZ2Uuc3RhcnRDb250YWluZXIgIT09IHN0YXJ0Q29udGFpbmVyIHx8IHJhbmdlLnN0YXJ0T2Zmc2V0ICE9IHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZE1vdmVkID0gKHJhbmdlLmVuZENvbnRhaW5lciAhPT0gZW5kQ29udGFpbmVyIHx8IHJhbmdlLmVuZE9mZnNldCAhPSBlbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmF0aXZlUmFuZ2VEaWZmZXJlbnQgPSAhcmFuZ2UuZXF1YWxzKHJhbmdlLm5hdGl2ZVJhbmdlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBbHdheXMgc2V0IGJvdGggYm91bmRhcmllcyBmb3IgdGhlIGJlbmVmaXQgb2YgSUU5IChzZWUgaXNzdWUgMzUpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydE1vdmVkIHx8IGVuZE1vdmVkIHx8IG5hdGl2ZVJhbmdlRGlmZmVyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQoZW5kQ29udGFpbmVyLCBlbmRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRDb250YWluZXIsIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjcmVhdGVCZWZvcmVBZnRlck5vZGVTZXR0ZXI7XG5cbiAgICAgICAgICAgICAgICBXcmFwcGVkUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJXcmFwcGVkUmFuZ2U6IFJhbmdlIG11c3QgYmUgc3BlY2lmaWVkXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UgPSByYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBEb21SYW5nZS5jcmVhdGVQcm90b3R5cGVSYW5nZShXcmFwcGVkUmFuZ2UsIHVwZGF0ZU5hdGl2ZVJhbmdlKTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8gPSBXcmFwcGVkUmFuZ2UucHJvdG90eXBlO1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZWxlY3ROb2RlID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNlbGVjdE5vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jbG9uZUNvbnRlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNsb25lQ29udGVudHMoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gRHVlIHRvIGEgbG9uZy1zdGFuZGluZyBGaXJlZm94IGJ1ZyB0aGF0IEkgaGF2ZSBub3QgYmVlbiBhYmxlIHRvIGZpbmQgYSByZWxpYWJsZSB3YXkgdG8gZGV0ZWN0LFxuICAgICAgICAgICAgICAgIC8vIGluc2VydE5vZGUoKSBpcyBuZXZlciBkZWxlZ2F0ZWQgdG8gdGhlIG5hdGl2ZSByYW5nZS5cblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc3Vycm91bmRDb250ZW50cyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zdXJyb3VuZENvbnRlbnRzKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY29sbGFwc2UgPSBmdW5jdGlvbihpc1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2UuY29sbGFwc2UoaXNTdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5jbG9uZVJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV3JhcHBlZFJhbmdlKHRoaXMubmF0aXZlUmFuZ2UuY2xvbmVSYW5nZSgpKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGVzdCByYW5nZSBhbmQgbm9kZSBmb3IgZmVhdHVyZSBkZXRlY3Rpb25cblxuICAgICAgICAgICAgICAgIHZhciB0ZXN0VGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcInRlc3RcIik7XG4gICAgICAgICAgICAgICAgZ2V0Qm9keShkb2N1bWVudCkuYXBwZW5kQ2hpbGQodGVzdFRleHROb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXG4gICAgICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGZvciBGaXJlZm94IDIgYnVnIHRoYXQgcHJldmVudHMgbW92aW5nIHRoZSBzdGFydCBvZiBhIFJhbmdlIHRvIGEgcG9pbnQgYWZ0ZXIgaXRzIGN1cnJlbnQgZW5kIGFuZFxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3QgZm9yIGl0XG5cbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZXN0VGV4dE5vZGUsIDApO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZCh0ZXN0VGV4dE5vZGUsIDApO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGVzdFRleHROb2RlLCAxKTtcblxuICAgICAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0ID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRFbmQgPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlW25hbWVdKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJhbmdlUHJvcGVydGllcyh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB9IGNhdGNoKGV4KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydCA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kID0gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlLnNldEVuZChub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlciA9IGZ1bmN0aW9uKG5hbWUsIG9wcG9zaXRlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVJhbmdlW25hbWVdKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlUmFuZ2Vbb3Bwb3NpdGVOYW1lXShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZVtuYW1lXShub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLnNldFN0YXJ0QmVmb3JlID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKFwic2V0U3RhcnRCZWZvcmVcIiwgXCJzZXRFbmRCZWZvcmVcIik7XG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRTdGFydEFmdGVyID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKFwic2V0U3RhcnRBZnRlclwiLCBcInNldEVuZEFmdGVyXCIpO1xuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2V0RW5kQmVmb3JlID0gY3JlYXRlQmVmb3JlQWZ0ZXJOb2RlU2V0dGVyKFwic2V0RW5kQmVmb3JlXCIsIFwic2V0U3RhcnRCZWZvcmVcIik7XG4gICAgICAgICAgICAgICAgcmFuZ2VQcm90by5zZXRFbmRBZnRlciA9IGNyZWF0ZUJlZm9yZUFmdGVyTm9kZVNldHRlcihcInNldEVuZEFmdGVyXCIsIFwic2V0U3RhcnRBZnRlclwiKTtcblxuICAgICAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgICAgICAgICAgICAgLy8gQWx3YXlzIHVzZSBET000LWNvbXBsaWFudCBzZWxlY3ROb2RlQ29udGVudHMgaW1wbGVtZW50YXRpb246IGl0J3Mgc2ltcGxlciBhbmQgbGVzcyBjb2RlIHRoYW4gdGVzdGluZ1xuICAgICAgICAgICAgICAgIC8vIHdoZXRoZXIgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBjYW4gYmUgdHJ1c3RlZFxuICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uc2VsZWN0Tm9kZUNvbnRlbnRzID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QW5kRW5kKG5vZGUsIDAsIGRvbS5nZXROb2RlTGVuZ3RoKG5vZGUpKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGZvciBhbmQgY29ycmVjdCBXZWJLaXQgYnVnIHRoYXQgaGFzIHRoZSBiZWhhdmlvdXIgb2YgY29tcGFyZUJvdW5kYXJ5UG9pbnRzIHJvdW5kIHRoZSB3cm9uZyB3YXkgZm9yXG4gICAgICAgICAgICAgICAgLy8gY29uc3RhbnRzIFNUQVJUX1RPX0VORCBhbmQgRU5EX1RPX1NUQVJUOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjA3MzhcblxuICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0ZXN0VGV4dE5vZGUpO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZCh0ZXN0VGV4dE5vZGUsIDMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlMiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgcmFuZ2UyLnNlbGVjdE5vZGVDb250ZW50cyh0ZXN0VGV4dE5vZGUpO1xuICAgICAgICAgICAgICAgIHJhbmdlMi5zZXRFbmQodGVzdFRleHROb2RlLCA0KTtcbiAgICAgICAgICAgICAgICByYW5nZTIuc2V0U3RhcnQodGVzdFRleHROb2RlLCAyKTtcblxuICAgICAgICAgICAgICAgIGlmIChyYW5nZS5jb21wYXJlQm91bmRhcnlQb2ludHMocmFuZ2UuU1RBUlRfVE9fRU5ELCByYW5nZTIpID09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb21wYXJlQm91bmRhcnlQb2ludHMocmFuZ2UuRU5EX1RPX1NUQVJULCByYW5nZTIpID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgd3Jvbmcgd2F5IHJvdW5kLCBzbyBjb3JyZWN0IGZvciBpdFxuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY29tcGFyZUJvdW5kYXJ5UG9pbnRzID0gZnVuY3Rpb24odHlwZSwgcmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gcmFuZ2UubmF0aXZlUmFuZ2UgfHwgcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSByYW5nZS5TVEFSVF9UT19FTkQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gcmFuZ2UuRU5EX1RPX1NUQVJUO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IHJhbmdlLkVORF9UT19TVEFSVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSByYW5nZS5TVEFSVF9UT19FTkQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYXRpdmVSYW5nZS5jb21wYXJlQm91bmRhcnlQb2ludHModHlwZSwgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY29tcGFyZUJvdW5kYXJ5UG9pbnRzID0gZnVuY3Rpb24odHlwZSwgcmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyh0eXBlLCByYW5nZS5uYXRpdmVSYW5nZSB8fCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGZvciBJRSBkZWxldGVDb250ZW50cygpIGFuZCBleHRyYWN0Q29udGVudHMoKSBidWcgYW5kIGNvcnJlY3QgaXQuIFNlZSBpc3N1ZSAxMDcuXG5cbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IFwiMTIzXCI7XG4gICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGdldEJvZHkoZG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGV4dE5vZGUsIDEpO1xuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZCh0ZXh0Tm9kZSwgMik7XG4gICAgICAgICAgICAgICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhID09IFwiMTNcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBCZWhhdmlvdXIgaXMgY29ycmVjdCBwZXIgRE9NNCBSYW5nZSBzbyB3cmFwIHRoZSBicm93c2VyJ3MgaW1wbGVtZW50YXRpb24gb2YgZGVsZXRlQ29udGVudHMoKSBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gZXh0cmFjdENvbnRlbnRzKClcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VQcm90by5kZWxldGVDb250ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVSYW5nZS5kZWxldGVDb250ZW50cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmFuZ2VQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uZXh0cmFjdENvbnRlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJhZyA9IHRoaXMubmF0aXZlUmFuZ2UuZXh0cmFjdENvbnRlbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVSYW5nZVByb3BlcnRpZXModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJhZztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgICAgIGJvZHkgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGZvciBleGlzdGVuY2Ugb2YgY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50IGFuZCBkZWxlZ2F0ZSB0byBpdCBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0hvc3RNZXRob2QocmFuZ2UsIFwiY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlUHJvdG8uY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50ID0gZnVuY3Rpb24oZnJhZ21lbnRTdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZVJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChmcmFnbWVudFN0cik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgIGdldEJvZHkoZG9jdW1lbnQpLnJlbW92ZUNoaWxkKHRlc3RUZXh0Tm9kZSk7XG5cbiAgICAgICAgICAgICAgICByYW5nZVByb3RvLmdldE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiV3JhcHBlZFJhbmdlXCI7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFwaS5XcmFwcGVkUmFuZ2UgPSBXcmFwcGVkUmFuZ2U7XG5cbiAgICAgICAgICAgICAgICBhcGkuY3JlYXRlTmF0aXZlUmFuZ2UgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jID0gZ2V0Q29udGVudERvY3VtZW50KGRvYywgbW9kdWxlLCBcImNyZWF0ZU5hdGl2ZVJhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXBpLmZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgYSBidWcgd2hlcmUgSUUgcmV0dXJucyB0aGUgd3JvbmcgY29udGFpbmVyIGVsZW1lbnQgZnJvbSB0aGUgVGV4dFJhbmdlJ3MgcGFyZW50RWxlbWVudCgpXG4gICAgICAgICAgICBtZXRob2QuIEZvciBleGFtcGxlLCBpbiB0aGUgZm9sbG93aW5nICh3aGVyZSBwaXBlcyBkZW5vdGUgdGhlIHNlbGVjdGlvbiBib3VuZGFyaWVzKTpcblxuICAgICAgICAgICAgPHVsIGlkPVwidWxcIj48bGkgaWQ9XCJhXCI+fCBhIDwvbGk+PGxpIGlkPVwiYlwiPiBiIHw8L2xpPjwvdWw+XG5cbiAgICAgICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgYWxlcnQocmFuZ2UucGFyZW50RWxlbWVudCgpLmlkKTsgLy8gU2hvdWxkIGFsZXJ0IFwidWxcIiBidXQgYWxlcnRzIFwiYlwiXG5cbiAgICAgICAgICAgIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGNvbW1vbiBhbmNlc3RvciBub2RlIG9mIHRoZSBmb2xsb3dpbmc6XG4gICAgICAgICAgICAtIHRoZSBwYXJlbnRFbGVtZW50KCkgb2YgdGhlIHRleHRSYW5nZVxuICAgICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2UgYWZ0ZXIgY2FsbGluZyBjb2xsYXBzZSh0cnVlKVxuICAgICAgICAgICAgLSB0aGUgcGFyZW50RWxlbWVudCgpIG9mIHRoZSB0ZXh0UmFuZ2UgYWZ0ZXIgY2FsbGluZyBjb2xsYXBzZShmYWxzZSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCA9IGZ1bmN0aW9uKHRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRFbCA9IHRleHRSYW5nZS5wYXJlbnRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEVsID0gcmFuZ2UucGFyZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHJhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kRWwgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0RW5kQ29udGFpbmVyID0gKHN0YXJ0RWwgPT0gZW5kRWwpID8gc3RhcnRFbCA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihzdGFydEVsLCBlbmRFbCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRFbmRDb250YWluZXIgPT0gcGFyZW50RWwgPyBzdGFydEVuZENvbnRhaW5lciA6IGRvbS5nZXRDb21tb25BbmNlc3RvcihwYXJlbnRFbCwgc3RhcnRFbmRDb250YWluZXIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHRleHRSYW5nZUlzQ29sbGFwc2VkID0gZnVuY3Rpb24odGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHRSYW5nZS5jb21wYXJlRW5kUG9pbnRzKFwiU3RhcnRUb0VuZFwiLCB0ZXh0UmFuZ2UpID09IDA7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBHZXRzIHRoZSBib3VuZGFyeSBvZiBhIFRleHRSYW5nZSBleHByZXNzZWQgYXMgYSBub2RlIGFuZCBhbiBvZmZzZXQgd2l0aGluIHRoYXQgbm9kZS4gVGhpcyBmdW5jdGlvbiBzdGFydGVkXG4gICAgICAgICAgICAvLyBvdXQgYXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBjb2RlIGZvdW5kIGluIFRpbSBDYW1lcm9uIFJ5YW4ncyBJRVJhbmdlIChodHRwOi8vY29kZS5nb29nbGUuY29tL3AvaWVyYW5nZS8pXG4gICAgICAgICAgICAvLyBidXQgaGFzIGdyb3duLCBmaXhpbmcgcHJvYmxlbXMgd2l0aCBsaW5lIGJyZWFrcyBpbiBwcmVmb3JtYXR0ZWQgdGV4dCwgYWRkaW5nIHdvcmthcm91bmQgZm9yIElFIFRleHRSYW5nZVxuICAgICAgICAgICAgLy8gYnVncywgaGFuZGxpbmcgZm9yIGlucHV0cyBhbmQgaW1hZ2VzLCBwbHVzIG9wdGltaXphdGlvbnMuXG4gICAgICAgICAgICB2YXIgZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbiA9IGZ1bmN0aW9uKHRleHRSYW5nZSwgd2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQsIGlzU3RhcnQsIGlzQ29sbGFwc2VkLCBzdGFydEluZm8pIHtcbiAgICAgICAgICAgICAgICB2YXIgd29ya2luZ1JhbmdlID0gdGV4dFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5jb2xsYXBzZShpc1N0YXJ0KTtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyRWxlbWVudCA9IHdvcmtpbmdSYW5nZS5wYXJlbnRFbGVtZW50KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTb21ldGltZXMgY29sbGFwc2luZyBhIFRleHRSYW5nZSB0aGF0J3MgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dCBub2RlIGNhbiBtb3ZlIGl0IGludG8gdGhlIHByZXZpb3VzIG5vZGUsIHNvXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHRoYXRcbiAgICAgICAgICAgICAgICBpZiAoIWRvbS5pc09ySXNBbmNlc3Rvck9mKHdob2xlUmFuZ2VDb250YWluZXJFbGVtZW50LCBjb250YWluZXJFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gd2hvbGVSYW5nZUNvbnRhaW5lckVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAvLyBEZWFsIHdpdGggbm9kZXMgdGhhdCBjYW5ub3QgXCJjb250YWluIHJpY2ggSFRNTCBtYXJrdXBcIi4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnMgZm9ybSBpbnB1dHMsIGltYWdlcyBhbmRcbiAgICAgICAgICAgICAgICAvLyBzaW1pbGFyLiBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2FhNzAzOTUwJTI4VlMuODUlMjkuYXNweFxuICAgICAgICAgICAgICAgIGlmICghY29udGFpbmVyRWxlbWVudC5jYW5IYXZlSFRNTCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQucGFyZW50Tm9kZSwgZG9tLmdldE5vZGVJbmRleChjb250YWluZXJFbGVtZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogcG9zLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBwb3Mubm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB3b3JraW5nTm9kZSA9IGRvbS5nZXREb2N1bWVudChjb250YWluZXJFbGVtZW50KS5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIEhUTUw1IFNoaXYncyBpbnNhbmUgdmlvbGF0aW9uIG9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoKS4gU2VlIFJhbmd5IGlzc3VlIDEwNCBhbmQgSFRNTDVcbiAgICAgICAgICAgICAgICAvLyBTaGl2IGlzc3VlIDY0OiBodHRwczovL2dpdGh1Yi5jb20vYUZhcmthcy9odG1sNXNoaXYvaXNzdWVzLzY0XG4gICAgICAgICAgICAgICAgaWYgKHdvcmtpbmdOb2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tLnJlbW92ZU5vZGUod29ya2luZ05vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJpc29uLCB3b3JraW5nQ29tcGFyaXNvblR5cGUgPSBpc1N0YXJ0ID8gXCJTdGFydFRvU3RhcnRcIiA6IFwiU3RhcnRUb0VuZFwiO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c05vZGUsIG5leHROb2RlLCBib3VuZGFyeVBvc2l0aW9uLCBib3VuZGFyeU5vZGU7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gKHN0YXJ0SW5mbyAmJiBzdGFydEluZm8uY29udGFpbmVyRWxlbWVudCA9PSBjb250YWluZXJFbGVtZW50KSA/IHN0YXJ0SW5mby5ub2RlSW5kZXggOiAwO1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGVDb3VudCA9IGNvbnRhaW5lckVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGNoaWxkTm9kZUNvdW50O1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZW5kIGZpcnN0LiBDb2RlIHdpdGhpbiB0aGUgbG9vcCBhc3N1bWVzIHRoYXQgdGhlIGVuZHRoIGNoaWxkIG5vZGUgb2YgdGhlIGNvbnRhaW5lciBpcyBkZWZpbml0ZWx5XG4gICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIHJhbmdlIGJvdW5kYXJ5LlxuICAgICAgICAgICAgICAgIHZhciBub2RlSW5kZXggPSBlbmQ7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZUluZGV4ID09IGNoaWxkTm9kZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5zZXJ0QmVmb3JlKHdvcmtpbmdOb2RlLCBjb250YWluZXJFbGVtZW50LmNoaWxkTm9kZXNbbm9kZUluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHdvcmtpbmdOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiA9IHdvcmtpbmdSYW5nZS5jb21wYXJlRW5kUG9pbnRzKHdvcmtpbmdDb21wYXJpc29uVHlwZSwgdGV4dFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmlzb24gPT0gMCB8fCBzdGFydCA9PSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmlzb24gPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPT0gc3RhcnQgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgZW5kdGggY2hpbGQgbm9kZSBpcyBhZnRlciB0aGUgcmFuZ2UgYm91bmRhcnksIHNvIHdlIG11c3QgYmUgZG9uZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBub2RlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSAoZW5kID09IHN0YXJ0ICsgMSkgPyBzdGFydCA6IG5vZGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub2RlSW5kZXggPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZCh3b3JraW5nTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAvLyBXZSd2ZSBub3cgcmVhY2hlZCBvciBnb25lIHBhc3QgdGhlIGJvdW5kYXJ5IG9mIHRoZSB0ZXh0IHJhbmdlIHdlJ3JlIGludGVyZXN0ZWQgaW5cbiAgICAgICAgICAgICAgICAvLyBzbyBoYXZlIGlkZW50aWZpZWQgdGhlIG5vZGUgd2Ugd2FudFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IHdvcmtpbmdOb2RlLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBhcmlzb24gPT0gLTEgJiYgYm91bmRhcnlOb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUoYm91bmRhcnlOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgY2hhcmFjdGVyIGRhdGEgbm9kZSAodGV4dCwgY29tbWVudCwgY2RhdGEpLiBUaGUgd29ya2luZyByYW5nZSBpcyBjb2xsYXBzZWQgYXQgdGhlIHN0YXJ0IG9mXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBub2RlIGNvbnRhaW5pbmcgdGhlIHRleHQgcmFuZ2UncyBib3VuZGFyeSwgc28gd2UgbW92ZSB0aGUgZW5kIG9mIHRoZSB3b3JraW5nIHJhbmdlIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBib3VuZGFyeSBwb2ludCBhbmQgbWVhc3VyZSB0aGUgbGVuZ3RoIG9mIGl0cyB0ZXh0IHRvIGdldCB0aGUgYm91bmRhcnkncyBvZmZzZXQgd2l0aGluIHRoZSBub2RlLlxuICAgICAgICAgICAgICAgICAgICB3b3JraW5nUmFuZ2Uuc2V0RW5kUG9pbnQoaXNTdGFydCA/IFwiRW5kVG9TdGFydFwiIDogXCJFbmRUb0VuZFwiLCB0ZXh0UmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC9bXFxyXFxuXS8udGVzdChib3VuZGFyeU5vZGUuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICBGb3IgdGhlIHBhcnRpY3VsYXIgY2FzZSBvZiBhIGJvdW5kYXJ5IHdpdGhpbiBhIHRleHQgbm9kZSBjb250YWluaW5nIHJlbmRlcmVkIGxpbmUgYnJlYWtzICh3aXRoaW4gYVxuICAgICAgICAgICAgICAgICAgICAgICAgPHByZT4gZWxlbWVudCwgZm9yIGV4YW1wbGUpLCB3ZSBuZWVkIGEgc2xpZ2h0bHkgY29tcGxpY2F0ZWQgYXBwcm9hY2ggdG8gZ2V0IHRoZSBib3VuZGFyeSdzIG9mZnNldCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgSUUuIFRoZSBmYWN0czpcblxuICAgICAgICAgICAgICAgICAgICAgICAgLSBFYWNoIGxpbmUgYnJlYWsgaXMgcmVwcmVzZW50ZWQgYXMgXFxyIGluIHRoZSB0ZXh0IG5vZGUncyBkYXRhL25vZGVWYWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAtIEVhY2ggbGluZSBicmVhayBpcyByZXByZXNlbnRlZCBhcyBcXHJcXG4gaW4gdGhlIFRleHRSYW5nZSdzICd0ZXh0JyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgICAgICAgLSBUaGUgJ3RleHQnIHByb3BlcnR5IG9mIHRoZSBUZXh0UmFuZ2UgZG9lcyBub3QgY29udGFpbiB0cmFpbGluZyBsaW5lIGJyZWFrc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBUbyBnZXQgcm91bmQgdGhlIHByb2JsZW0gcHJlc2VudGVkIGJ5IHRoZSBmaW5hbCBmYWN0IGFib3ZlLCB3ZSBjYW4gdXNlIHRoZSBmYWN0IHRoYXQgVGV4dFJhbmdlJ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVTdGFydCgpIGFuZCBtb3ZlRW5kKCkgbWV0aG9kcyByZXR1cm4gdGhlIGFjdHVhbCBudW1iZXIgb2YgY2hhcmFjdGVycyBtb3ZlZCwgd2hpY2ggaXMgbm90XG4gICAgICAgICAgICAgICAgICAgICAgICBuZWNlc3NhcmlseSB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaXQgd2FzIGluc3RydWN0ZWQgdG8gbW92ZS4gVGhlIHNpbXBsZXN0IGFwcHJvYWNoIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICB0byB1c2UgdGhpcyB0byBzdG9yZSB0aGUgY2hhcmFjdGVycyBtb3ZlZCB3aGVuIG1vdmluZyBib3RoIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSByYW5nZSB0byB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0IG9mIHRoZSBkb2N1bWVudCBib2R5IGFuZCBzdWJ0cmFjdGluZyB0aGUgc3RhcnQgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZmZzZXQgKHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtb3ZlLW5lZ2F0aXZlLWdhemlsbGlvblwiIG1ldGhvZCkuIEhvd2V2ZXIsIHRoaXMgaXMgZXh0cmVtZWx5IHNsb3cgd2hlbiB0aGUgZG9jdW1lbnQgaXMgbGFyZ2UgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGUgcmFuZ2UgaXMgbmVhciB0aGUgZW5kIG9mIGl0LiBDbGVhcmx5IGRvaW5nIHRoZSBtaXJyb3IgaW1hZ2UgKGkuZS4gbW92aW5nIHRoZSByYW5nZSBib3VuZGFyaWVzIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCkgaGFzIHRoZSBzYW1lIHByb2JsZW0uXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIEFub3RoZXIgYXBwcm9hY2ggdGhhdCB3b3JrcyBpcyB0byB1c2UgbW92ZVN0YXJ0KCkgdG8gbW92ZSB0aGUgc3RhcnQgYm91bmRhcnkgb2YgdGhlIHJhbmdlIHVwIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kIGJvdW5kYXJ5IG9uZSBjaGFyYWN0ZXIgYXQgYSB0aW1lIGFuZCBpbmNyZW1lbnRpbmcgYSBjb3VudGVyIHdpdGggdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVN0YXJ0KCkgY2FsbC4gSG93ZXZlciwgdGhlIGNoZWNrIGZvciB3aGV0aGVyIHRoZSBzdGFydCBib3VuZGFyeSBoYXMgcmVhY2hlZCB0aGUgZW5kIGJvdW5kYXJ5IGlzXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlbnNpdmUsIHNvIHRoaXMgbWV0aG9kIGlzIHNsb3cgKGFsdGhvdWdoIHVubGlrZSBcIm1vdmUtbmVnYXRpdmUtZ2F6aWxsaW9uXCIgaXMgbGFyZ2VseSB1bmFmZmVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgbG9jYXRpb24gb2YgdGhlIHJhbmdlIHdpdGhpbiB0aGUgZG9jdW1lbnQpLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgYXBwcm9hY2ggdXNlZCBiZWxvdyBpcyBhIGh5YnJpZCBvZiB0aGUgdHdvIG1ldGhvZHMgYWJvdmUuIEl0IHVzZXMgdGhlIGZhY3QgdGhhdCBhIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmluZyB0aGUgVGV4dFJhbmdlJ3MgJ3RleHQnIHByb3BlcnR5IHdpdGggZWFjaCBcXHJcXG4gY29udmVydGVkIHRvIGEgc2luZ2xlIFxcciBjaGFyYWN0ZXIgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICBiZSBsb25nZXIgdGhhbiB0aGUgdGV4dCBvZiB0aGUgVGV4dFJhbmdlLCBzbyB0aGUgc3RhcnQgb2YgdGhlIHJhbmdlIGlzIG1vdmVkIHRoYXQgbGVuZ3RoIGluaXRpYWxseVxuICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZW4gYSBjaGFyYWN0ZXIgYXQgYSB0aW1lIHRvIG1ha2UgdXAgZm9yIGFueSB0cmFpbGluZyBsaW5lIGJyZWFrcyBub3QgY29udGFpbmVkIGluIHRoZSAndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LiBUaGlzIGhhcyBnb29kIHBlcmZvcm1hbmNlIGluIG1vc3Qgc2l0dWF0aW9ucyBjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgdHdvIG1ldGhvZHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBSYW5nZSA9IHdvcmtpbmdSYW5nZS5kdXBsaWNhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZUxlbmd0aCA9IHRlbXBSYW5nZS50ZXh0LnJlcGxhY2UoL1xcclxcbi9nLCBcIlxcclwiKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRlbXBSYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgcmFuZ2VMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCAoY29tcGFyaXNvbiA9IHRlbXBSYW5nZS5jb21wYXJlRW5kUG9pbnRzKFwiU3RhcnRUb0VuZFwiLCB0ZW1wUmFuZ2UpKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBSYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB3b3JraW5nUmFuZ2UudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihib3VuZGFyeU5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYm91bmRhcnkgaW1tZWRpYXRlbHkgZm9sbG93cyBhIGNoYXJhY3RlciBkYXRhIG5vZGUgYW5kIHRoaXMgaXMgdGhlIGVuZCBib3VuZGFyeSwgd2Ugc2hvdWxkIGZhdm91clxuICAgICAgICAgICAgICAgICAgICAvLyBhIHBvc2l0aW9uIHdpdGhpbiB0aGF0LCBhbmQgbGlrZXdpc2UgZm9yIGEgc3RhcnQgYm91bmRhcnkgcHJlY2VkaW5nIGEgY2hhcmFjdGVyIGRhdGEgbm9kZVxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSAoaXNDb2xsYXBzZWQgfHwgIWlzU3RhcnQpICYmIHdvcmtpbmdOb2RlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSAoaXNDb2xsYXBzZWQgfHwgaXNTdGFydCkgJiYgd29ya2luZ05vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Tm9kZSAmJiBpc0NoYXJhY3RlckRhdGFOb2RlKG5leHROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihuZXh0Tm9kZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldmlvdXNOb2RlICYmIGlzQ2hhcmFjdGVyRGF0YU5vZGUocHJldmlvdXNOb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbiA9IG5ldyBEb21Qb3NpdGlvbihwcmV2aW91c05vZGUsIHByZXZpb3VzTm9kZS5kYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBvc2l0aW9uID0gbmV3IERvbVBvc2l0aW9uKGNvbnRhaW5lckVsZW1lbnQsIGRvbS5nZXROb2RlSW5kZXgod29ya2luZ05vZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgZG9tLnJlbW92ZU5vZGUod29ya2luZ05vZGUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQb3NpdGlvbjogYm91bmRhcnlQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgbm9kZUluZm86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVJbmRleDogbm9kZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudDogY29udGFpbmVyRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFJldHVybnMgYSBUZXh0UmFuZ2UgcmVwcmVzZW50aW5nIHRoZSBib3VuZGFyeSBvZiBhIFRleHRSYW5nZSBleHByZXNzZWQgYXMgYSBub2RlIGFuZCBhbiBvZmZzZXQgd2l0aGluIHRoYXRcbiAgICAgICAgICAgIC8vIG5vZGUuIFRoaXMgZnVuY3Rpb24gc3RhcnRlZCBvdXQgYXMgYW4gb3B0aW1pemVkIHZlcnNpb24gb2YgY29kZSBmb3VuZCBpbiBUaW0gQ2FtZXJvbiBSeWFuJ3MgSUVSYW5nZVxuICAgICAgICAgICAgLy8gKGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZXJhbmdlLylcbiAgICAgICAgICAgIHZhciBjcmVhdGVCb3VuZGFyeVRleHRSYW5nZSA9IGZ1bmN0aW9uKGJvdW5kYXJ5UG9zaXRpb24sIGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRhcnlOb2RlLCBib3VuZGFyeVBhcmVudCwgYm91bmRhcnlPZmZzZXQgPSBib3VuZGFyeVBvc2l0aW9uLm9mZnNldDtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZG9tLmdldERvY3VtZW50KGJvdW5kYXJ5UG9zaXRpb24ubm9kZSk7XG4gICAgICAgICAgICAgICAgdmFyIHdvcmtpbmdOb2RlLCBjaGlsZE5vZGVzLCB3b3JraW5nUmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVJc0RhdGFOb2RlID0gaXNDaGFyYWN0ZXJEYXRhTm9kZShib3VuZGFyeVBvc2l0aW9uLm5vZGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVJc0RhdGFOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IGJvdW5kYXJ5UG9zaXRpb24ubm9kZTtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQgPSBib3VuZGFyeU5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGVzID0gYm91bmRhcnlQb3NpdGlvbi5ub2RlLmNoaWxkTm9kZXM7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5Tm9kZSA9IChib3VuZGFyeU9mZnNldCA8IGNoaWxkTm9kZXMubGVuZ3RoKSA/IGNoaWxkTm9kZXNbYm91bmRhcnlPZmZzZXRdIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQgPSBib3VuZGFyeVBvc2l0aW9uLm5vZGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUG9zaXRpb24gdGhlIHJhbmdlIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgbm9kZSBjb250YWluaW5nIHRoZSBib3VuZGFyeVxuICAgICAgICAgICAgICAgIHdvcmtpbmdOb2RlID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG4gICAgICAgICAgICAgICAgLy8gTWFraW5nIHRoZSB3b3JraW5nIGVsZW1lbnQgbm9uLWVtcHR5IGVsZW1lbnQgcGVyc3VhZGVzIElFIHRvIGNvbnNpZGVyIHRoZSBUZXh0UmFuZ2UgYm91bmRhcnkgdG8gYmUgd2l0aGluXG4gICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgcmF0aGVyIHRoYW4gaW1tZWRpYXRlbHkgYmVmb3JlIG9yIGFmdGVyIGl0XG4gICAgICAgICAgICAgICAgd29ya2luZ05vZGUuaW5uZXJIVE1MID0gXCImI2ZlZmY7XCI7XG5cbiAgICAgICAgICAgICAgICAvLyBpbnNlcnRCZWZvcmUgaXMgc3VwcG9zZWQgdG8gd29yayBsaWtlIGFwcGVuZENoaWxkIGlmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIG51bGwuIEhvd2V2ZXIsIGEgYnVnIHJlcG9ydFxuICAgICAgICAgICAgICAgIC8vIGZvciBJRVJhbmdlIHN1Z2dlc3RzIHRoYXQgaXQgY2FuIGNyYXNoIHRoZSBicm93c2VyOiBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvaWVyYW5nZS9pc3N1ZXMvZGV0YWlsP2lkPTEyXG4gICAgICAgICAgICAgICAgaWYgKGJvdW5kYXJ5Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGFyeVBhcmVudC5pbnNlcnRCZWZvcmUod29ya2luZ05vZGUsIGJvdW5kYXJ5Tm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQuYXBwZW5kQ2hpbGQod29ya2luZ05vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCh3b3JraW5nTm9kZSk7XG4gICAgICAgICAgICAgICAgd29ya2luZ1JhbmdlLmNvbGxhcHNlKCFpc1N0YXJ0KTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgYm91bmRhcnlQYXJlbnQucmVtb3ZlQ2hpbGQod29ya2luZ05vZGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0aGUgd29ya2luZyByYW5nZSB0byB0aGUgdGV4dCBvZmZzZXQsIGlmIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVJc0RhdGFOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtpbmdSYW5nZVtpc1N0YXJ0ID8gXCJtb3ZlU3RhcnRcIiA6IFwibW92ZUVuZFwiXShcImNoYXJhY3RlclwiLCBib3VuZGFyeU9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtpbmdSYW5nZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHdyYXBwZXIgYXJvdW5kIGEgVGV4dFJhbmdlLCBwcm92aWRpbmcgZnVsbCBET00gUmFuZ2UgZnVuY3Rpb25hbGl0eSB1c2luZyByYW5neSdzIERvbVJhbmdlIGFzIGFcbiAgICAgICAgICAgIC8vIHByb3RvdHlwZVxuXG4gICAgICAgICAgICBXcmFwcGVkVGV4dFJhbmdlID0gZnVuY3Rpb24odGV4dFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0UmFuZ2UgPSB0ZXh0UmFuZ2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBXcmFwcGVkVGV4dFJhbmdlLnByb3RvdHlwZSA9IG5ldyBEb21SYW5nZShkb2N1bWVudCk7XG5cbiAgICAgICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQsIGVuZCwgc3RhcnRCb3VuZGFyeTtcblxuICAgICAgICAgICAgICAgIC8vIFRleHRSYW5nZSdzIHBhcmVudEVsZW1lbnQoKSBtZXRob2QgY2Fubm90IGJlIHRydXN0ZWQuIGdldFRleHRSYW5nZUNvbnRhaW5lckVsZW1lbnQoKSB3b3JrcyBhcm91bmQgdGhhdC5cbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VDb250YWluZXJFbGVtZW50ID0gZ2V0VGV4dFJhbmdlQ29udGFpbmVyRWxlbWVudCh0aGlzLnRleHRSYW5nZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGV4dFJhbmdlSXNDb2xsYXBzZWQodGhpcy50ZXh0UmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0ID0gZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbih0aGlzLnRleHRSYW5nZSwgcmFuZ2VDb250YWluZXJFbGVtZW50LCB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSkuYm91bmRhcnlQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGFydEJvdW5kYXJ5ID0gZ2V0VGV4dFJhbmdlQm91bmRhcnlQb3NpdGlvbih0aGlzLnRleHRSYW5nZSwgcmFuZ2VDb250YWluZXJFbGVtZW50LCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnRCb3VuZGFyeS5ib3VuZGFyeVBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFuIG9wdGltaXphdGlvbiB1c2VkIGhlcmUgaXMgdGhhdCBpZiB0aGUgc3RhcnQgYW5kIGVuZCBib3VuZGFyaWVzIGhhdmUgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQsIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggc2NvcGUgZm9yIHRoZSBlbmQgYm91bmRhcnkgY2FuIGJlIGxpbWl0ZWQgdG8gZXhjbHVkZSB0aGUgcG9ydGlvbiBvZiB0aGUgZWxlbWVudCB0aGF0IHByZWNlZGVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdGFydCBib3VuZGFyeVxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBnZXRUZXh0UmFuZ2VCb3VuZGFyeVBvc2l0aW9uKHRoaXMudGV4dFJhbmdlLCByYW5nZUNvbnRhaW5lckVsZW1lbnQsIGZhbHNlLCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Qm91bmRhcnkubm9kZUluZm8pLmJvdW5kYXJ5UG9zaXRpb247XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydChzdGFydC5ub2RlLCBzdGFydC5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kKGVuZC5ub2RlLCBlbmQub2Zmc2V0KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFdyYXBwZWRUZXh0UmFuZ2UucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJXcmFwcGVkVGV4dFJhbmdlXCI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBEb21SYW5nZS5jb3B5Q29tcGFyaXNvbkNvbnN0YW50cyhXcmFwcGVkVGV4dFJhbmdlKTtcblxuICAgICAgICAgICAgdmFyIHJhbmdlVG9UZXh0UmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRSYW5nZSA9IGNyZWF0ZUJvdW5kYXJ5VGV4dFJhbmdlKG5ldyBEb21Qb3NpdGlvbihyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZFJhbmdlID0gY3JlYXRlQm91bmRhcnlUZXh0UmFuZ2UobmV3IERvbVBvc2l0aW9uKHJhbmdlLmVuZENvbnRhaW5lciwgcmFuZ2UuZW5kT2Zmc2V0KSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dFJhbmdlID0gZ2V0Qm9keSggRG9tUmFuZ2UuZ2V0UmFuZ2VEb2N1bWVudChyYW5nZSkgKS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dFJhbmdlLnNldEVuZFBvaW50KFwiU3RhcnRUb1N0YXJ0XCIsIHN0YXJ0UmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0UmFuZ2Uuc2V0RW5kUG9pbnQoXCJFbmRUb0VuZFwiLCBlbmRSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0UmFuZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlID0gcmFuZ2VUb1RleHRSYW5nZTtcblxuICAgICAgICAgICAgV3JhcHBlZFRleHRSYW5nZS5wcm90b3R5cGUudG9UZXh0UmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2VUb1RleHRSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGFwaS5XcmFwcGVkVGV4dFJhbmdlID0gV3JhcHBlZFRleHRSYW5nZTtcblxuICAgICAgICAgICAgLy8gSUUgOSBhbmQgYWJvdmUgaGF2ZSBib3RoIGltcGxlbWVudGF0aW9ucyBhbmQgUmFuZ3kgbWFrZXMgYm90aCBhdmFpbGFibGUuIFRoZSBuZXh0IGZldyBsaW5lcyBzZXRzIHdoaWNoXG4gICAgICAgICAgICAvLyBpbXBsZW1lbnRhdGlvbiB0byB1c2UgYnkgZGVmYXVsdC5cbiAgICAgICAgICAgIGlmICghYXBpLmZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSB8fCBhcGkuY29uZmlnLnByZWZlclRleHRSYW5nZSkge1xuICAgICAgICAgICAgICAgIC8vIEFkZCBXcmFwcGVkVGV4dFJhbmdlIGFzIHRoZSBSYW5nZSBwcm9wZXJ0eSBvZiB0aGUgZ2xvYmFsIG9iamVjdCB0byBhbGxvdyBleHByZXNzaW9uIGxpa2UgUmFuZ2UuRU5EX1RPX0VORCB0byB3b3JrXG4gICAgICAgICAgICAgICAgdmFyIGdsb2JhbE9iaiA9IChmdW5jdGlvbihmKSB7IHJldHVybiBmKFwicmV0dXJuIHRoaXM7XCIpKCk7IH0pKEZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGdsb2JhbE9iai5SYW5nZSA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbE9iai5SYW5nZSA9IFdyYXBwZWRUZXh0UmFuZ2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlID0gZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgXCJjcmVhdGVOYXRpdmVSYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEJvZHkoZG9jKS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgYXBpLldyYXBwZWRSYW5nZSA9IFdyYXBwZWRUZXh0UmFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhcGkuY3JlYXRlUmFuZ2UgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgXCJjcmVhdGVSYW5nZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgYXBpLldyYXBwZWRSYW5nZShhcGkuY3JlYXRlTmF0aXZlUmFuZ2UoZG9jKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLmNyZWF0ZVJhbmd5UmFuZ2UgPSBmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgIGRvYyA9IGdldENvbnRlbnREb2N1bWVudChkb2MsIG1vZHVsZSwgXCJjcmVhdGVSYW5neVJhbmdlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb21SYW5nZShkb2MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHV0aWwuY3JlYXRlQWxpYXNGb3JEZXByZWNhdGVkTWV0aG9kKGFwaSwgXCJjcmVhdGVJZnJhbWVSYW5nZVwiLCBcImNyZWF0ZVJhbmdlXCIpO1xuICAgICAgICB1dGlsLmNyZWF0ZUFsaWFzRm9yRGVwcmVjYXRlZE1ldGhvZChhcGksIFwiY3JlYXRlSWZyYW1lUmFuZ3lSYW5nZVwiLCBcImNyZWF0ZVJhbmd5UmFuZ2VcIik7XG5cbiAgICAgICAgYXBpLmFkZFNoaW1MaXN0ZW5lcihmdW5jdGlvbih3aW4pIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvYy5jcmVhdGVSYW5nZSA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNyZWF0ZVJhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY3JlYXRlUmFuZ2UoZG9jKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jID0gd2luID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfSk7XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBUaGlzIG1vZHVsZSBjcmVhdGVzIGEgc2VsZWN0aW9uIG9iamVjdCB3cmFwcGVyIHRoYXQgY29uZm9ybXMgYXMgY2xvc2VseSBhcyBwb3NzaWJsZSB0byB0aGUgU2VsZWN0aW9uIHNwZWNpZmljYXRpb25cbiAgICAvLyBpbiB0aGUgSFRNTCBFZGl0aW5nIHNwZWMgKGh0dHA6Ly9kdmNzLnczLm9yZy9oZy9lZGl0aW5nL3Jhdy1maWxlL3RpcC9lZGl0aW5nLmh0bWwjc2VsZWN0aW9ucylcbiAgICBhcGkuY3JlYXRlQ29yZU1vZHVsZShcIldyYXBwZWRTZWxlY3Rpb25cIiwgW1wiRG9tUmFuZ2VcIiwgXCJXcmFwcGVkUmFuZ2VcIl0sIGZ1bmN0aW9uKGFwaSwgbW9kdWxlKSB7XG4gICAgICAgIGFwaS5jb25maWcuY2hlY2tTZWxlY3Rpb25SYW5nZXMgPSB0cnVlO1xuXG4gICAgICAgIHZhciBCT09MRUFOID0gXCJib29sZWFuXCI7XG4gICAgICAgIHZhciBOVU1CRVIgPSBcIm51bWJlclwiO1xuICAgICAgICB2YXIgZG9tID0gYXBpLmRvbTtcbiAgICAgICAgdmFyIHV0aWwgPSBhcGkudXRpbDtcbiAgICAgICAgdmFyIGlzSG9zdE1ldGhvZCA9IHV0aWwuaXNIb3N0TWV0aG9kO1xuICAgICAgICB2YXIgRG9tUmFuZ2UgPSBhcGkuRG9tUmFuZ2U7XG4gICAgICAgIHZhciBXcmFwcGVkUmFuZ2UgPSBhcGkuV3JhcHBlZFJhbmdlO1xuICAgICAgICB2YXIgRE9NRXhjZXB0aW9uID0gYXBpLkRPTUV4Y2VwdGlvbjtcbiAgICAgICAgdmFyIERvbVBvc2l0aW9uID0gZG9tLkRvbVBvc2l0aW9uO1xuICAgICAgICB2YXIgZ2V0TmF0aXZlU2VsZWN0aW9uO1xuICAgICAgICB2YXIgc2VsZWN0aW9uSXNDb2xsYXBzZWQ7XG4gICAgICAgIHZhciBmZWF0dXJlcyA9IGFwaS5mZWF0dXJlcztcbiAgICAgICAgdmFyIENPTlRST0wgPSBcIkNvbnRyb2xcIjtcbiAgICAgICAgdmFyIGdldERvY3VtZW50ID0gZG9tLmdldERvY3VtZW50O1xuICAgICAgICB2YXIgZ2V0Qm9keSA9IGRvbS5nZXRCb2R5O1xuICAgICAgICB2YXIgcmFuZ2VzRXF1YWwgPSBEb21SYW5nZS5yYW5nZXNFcXVhbDtcblxuXG4gICAgICAgIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gc3VwcG9ydCBkaXJlY3Rpb24gcGFyYW1ldGVycyBpbiB0aGUgQVBJIHRoYXQgbWF5IGJlIGEgc3RyaW5nIChcImJhY2t3YXJkXCIsIFwiYmFja3dhcmRzXCIsXG4gICAgICAgIC8vIFwiZm9yd2FyZFwiIG9yIFwiZm9yd2FyZHNcIikgb3IgYSBCb29sZWFuICh0cnVlIGZvciBiYWNrd2FyZHMpLlxuICAgICAgICBmdW5jdGlvbiBpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcikge1xuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgZGlyID09IFwic3RyaW5nXCIpID8gL15iYWNrd2FyZChzKT8kL2kudGVzdChkaXIpIDogISFkaXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRXaW5kb3cod2luLCBtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXdpbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvbS5pc1dpbmRvdyh3aW4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luIGluc3RhbmNlb2YgV3JhcHBlZFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW4ud2luO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZG9tLmdldENvbnRlbnREb2N1bWVudCh3aW4sIG1vZHVsZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbS5nZXRXaW5kb3coZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFdpblNlbGVjdGlvbih3aW5QYXJhbSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFdpbmRvdyh3aW5QYXJhbSwgXCJnZXRXaW5TZWxlY3Rpb25cIikuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXREb2NTZWxlY3Rpb24od2luUGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRXaW5kb3cod2luUGFyYW0sIFwiZ2V0RG9jU2VsZWN0aW9uXCIpLmRvY3VtZW50LnNlbGVjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHdpblNlbGVjdGlvbklzQmFja3dhcmQoc2VsKSB7XG4gICAgICAgICAgICB2YXIgYmFja3dhcmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzZWwuYW5jaG9yTm9kZSkge1xuICAgICAgICAgICAgICAgIGJhY2t3YXJkID0gKGRvbS5jb21wYXJlUG9pbnRzKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0LCBzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpID09IDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJhY2t3YXJkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBmb3IgdGhlIFJhbmdlL1RleHRSYW5nZSBhbmQgU2VsZWN0aW9uIGZlYXR1cmVzIHJlcXVpcmVkXG4gICAgICAgIC8vIFRlc3QgZm9yIGFiaWxpdHkgdG8gcmV0cmlldmUgc2VsZWN0aW9uXG4gICAgICAgIHZhciBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uID0gaXNIb3N0TWV0aG9kKHdpbmRvdywgXCJnZXRTZWxlY3Rpb25cIiksXG4gICAgICAgICAgICBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uID0gdXRpbC5pc0hvc3RPYmplY3QoZG9jdW1lbnQsIFwic2VsZWN0aW9uXCIpO1xuXG4gICAgICAgIGZlYXR1cmVzLmltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24gPSBpbXBsZW1lbnRzV2luR2V0U2VsZWN0aW9uO1xuICAgICAgICBmZWF0dXJlcy5pbXBsZW1lbnRzRG9jU2VsZWN0aW9uID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbjtcblxuICAgICAgICB2YXIgdXNlRG9jdW1lbnRTZWxlY3Rpb24gPSBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uICYmICghaW1wbGVtZW50c1dpbkdldFNlbGVjdGlvbiB8fCBhcGkuY29uZmlnLnByZWZlclRleHRSYW5nZSk7XG5cbiAgICAgICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBnZXROYXRpdmVTZWxlY3Rpb24gPSBnZXREb2NTZWxlY3Rpb247XG4gICAgICAgICAgICBhcGkuaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uKHdpblBhcmFtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldFdpbmRvdyh3aW5QYXJhbSwgXCJpc1NlbGVjdGlvblZhbGlkXCIpLmRvY3VtZW50LCBuYXRpdmVTZWwgPSBkb2Muc2VsZWN0aW9uO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0aW9uIFRleHRSYW5nZSBpcyBhY3R1YWxseSBjb250YWluZWQgd2l0aGluIHRoZSBjb3JyZWN0IGRvY3VtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIChuYXRpdmVTZWwudHlwZSAhPSBcIk5vbmVcIiB8fCBnZXREb2N1bWVudChuYXRpdmVTZWwuY3JlYXRlUmFuZ2UoKS5wYXJlbnRFbGVtZW50KCkpID09IGRvYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGltcGxlbWVudHNXaW5HZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldFdpblNlbGVjdGlvbjtcbiAgICAgICAgICAgIGFwaS5pc1NlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJOZWl0aGVyIGRvY3VtZW50LnNlbGVjdGlvbiBvciB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkgZGV0ZWN0ZWQuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBpLmdldE5hdGl2ZVNlbGVjdGlvbiA9IGdldE5hdGl2ZVNlbGVjdGlvbjtcblxuICAgICAgICB2YXIgdGVzdFNlbGVjdGlvbiA9IGdldE5hdGl2ZVNlbGVjdGlvbigpO1xuXG4gICAgICAgIC8vIEluIEZpcmVmb3gsIHRoZSBzZWxlY3Rpb24gaXMgbnVsbCBpbiBhbiBpZnJhbWUgd2l0aCBkaXNwbGF5OiBub25lLiBTZWUgaXNzdWUgIzEzOC5cbiAgICAgICAgaWYgKCF0ZXN0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBtb2R1bGUuZmFpbChcIk5hdGl2ZSBzZWxlY3Rpb24gd2FzIG51bGwgKHBvc3NpYmx5IGlzc3VlIDEzOD8pXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlc3RSYW5nZSA9IGFwaS5jcmVhdGVOYXRpdmVSYW5nZShkb2N1bWVudCk7XG4gICAgICAgIHZhciBib2R5ID0gZ2V0Qm9keShkb2N1bWVudCk7XG5cbiAgICAgICAgLy8gT2J0YWluaW5nIGEgcmFuZ2UgZnJvbSBhIHNlbGVjdGlvblxuICAgICAgICB2YXIgc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgPSB1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RTZWxlY3Rpb24sXG4gICAgICAgICAgICBbXCJhbmNob3JOb2RlXCIsIFwiZm9jdXNOb2RlXCIsIFwiYW5jaG9yT2Zmc2V0XCIsIFwiZm9jdXNPZmZzZXRcIl0pO1xuXG4gICAgICAgIGZlYXR1cmVzLnNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzID0gc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXM7XG5cbiAgICAgICAgLy8gVGVzdCBmb3IgZXhpc3RlbmNlIG9mIG5hdGl2ZSBzZWxlY3Rpb24gZXh0ZW5kKCkgbWV0aG9kXG4gICAgICAgIHZhciBzZWxlY3Rpb25IYXNFeHRlbmQgPSBpc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgXCJleHRlbmRcIik7XG4gICAgICAgIGZlYXR1cmVzLnNlbGVjdGlvbkhhc0V4dGVuZCA9IHNlbGVjdGlvbkhhc0V4dGVuZDtcblxuICAgICAgICAvLyBUZXN0IGlmIHJhbmdlQ291bnQgZXhpc3RzXG4gICAgICAgIHZhciBzZWxlY3Rpb25IYXNSYW5nZUNvdW50ID0gKHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gTlVNQkVSKTtcbiAgICAgICAgZmVhdHVyZXMuc2VsZWN0aW9uSGFzUmFuZ2VDb3VudCA9IHNlbGVjdGlvbkhhc1JhbmdlQ291bnQ7XG5cbiAgICAgICAgdmFyIHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG5cbiAgICAgICAgdmFyIGFkZFJhbmdlQmFja3dhcmRUb05hdGl2ZSA9IHNlbGVjdGlvbkhhc0V4dGVuZCA/XG4gICAgICAgICAgICBmdW5jdGlvbihuYXRpdmVTZWxlY3Rpb24sIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IERvbVJhbmdlLmdldFJhbmdlRG9jdW1lbnQocmFuZ2UpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRSYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgIGVuZFJhbmdlLmNvbGxhcHNlVG9Qb2ludChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgbmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGdldE5hdGl2ZVJhbmdlKGVuZFJhbmdlKSk7XG4gICAgICAgICAgICAgICAgbmF0aXZlU2VsZWN0aW9uLmV4dGVuZChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgfSA6IG51bGw7XG5cbiAgICAgICAgaWYgKHV0aWwuYXJlSG9zdE1ldGhvZHModGVzdFNlbGVjdGlvbiwgW1wiYWRkUmFuZ2VcIiwgXCJnZXRSYW5nZUF0XCIsIFwicmVtb3ZlQWxsUmFuZ2VzXCJdKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0ZXN0U2VsZWN0aW9uLnJhbmdlQ291bnQgPT0gTlVNQkVSICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkge1xuXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmlvdXNseSBhbiBpZnJhbWUgd2FzIHVzZWQgYnV0IHRoaXMgY2F1c2VkIHByb2JsZW1zIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyBpbiBJRSwgc28gdGVzdHMgYXJlXG4gICAgICAgICAgICAgICAgLy8gcGVyZm9ybWVkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50J3Mgc2VsZWN0aW9uLiBTZWUgaXNzdWUgMTA5LlxuXG4gICAgICAgICAgICAgICAgLy8gTm90ZSBhbHNvIHRoYXQgaWYgYSBzZWxlY3Rpb24gcHJldmlvdXNseSBleGlzdGVkLCBpdCBpcyB3aXBlZCBhbmQgbGF0ZXIgcmVzdG9yZWQgYnkgdGhlc2UgdGVzdHMuIFRoaXNcbiAgICAgICAgICAgICAgICAvLyB3aWxsIHJlc3VsdCBpbiB0aGUgc2VsZWN0aW9uIGRpcmVjdGlvbiBiZWdpbiByZXZlcnNlZCBpZiB0aGUgb3JpZ2luYWwgc2VsZWN0aW9uIHdhcyBiYWNrd2FyZHMgYW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBzZXR0aW5nIGJhY2t3YXJkcyBzZWxlY3Rpb25zIChJbnRlcm5ldCBFeHBsb3JlciwgSSdtIGxvb2tpbmcgYXQgeW91KS5cbiAgICAgICAgICAgICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFNlbGVjdGlvblJhbmdlQ291bnQgPSBzZWwucmFuZ2VDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbkhhc011bHRpcGxlUmFuZ2VzID0gKG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VDb3VudCA+IDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxTZWxlY3Rpb25SYW5nZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsU2VsZWN0aW9uQmFja3dhcmQgPSB3aW5TZWxlY3Rpb25Jc0JhY2t3YXJkKHNlbCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JpZ2luYWxTZWxlY3Rpb25SYW5nZUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzW2ldID0gc2VsLmdldFJhbmdlQXQoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc29tZSB0ZXN0IGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0RWwgPSBkb20uY3JlYXRlVGVzdEVsZW1lbnQoZG9jdW1lbnQsIFwiXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHROb2RlID0gdGVzdEVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlxcdTAwYTBcXHUwMGEwXFx1MDBhMFwiKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRlc3Qgd2hldGhlciB0aGUgbmF0aXZlIHNlbGVjdGlvbiB3aWxsIGFsbG93IGEgY29sbGFwc2VkIHNlbGVjdGlvbiB3aXRoaW4gYSBub24tZWRpdGFibGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB2YXIgcjEgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHIxLnNldFN0YXJ0KHRleHROb2RlLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcjEuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHIxKTtcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkTm9uRWRpdGFibGVTZWxlY3Rpb25zU3VwcG9ydGVkID0gKHNlbC5yYW5nZUNvdW50ID09IDEpO1xuICAgICAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGVzdCB3aGV0aGVyIHRoZSBuYXRpdmUgc2VsZWN0aW9uIGlzIGNhcGFibGUgb2Ygc3VwcG9ydGluZyBtdWx0aXBsZSByYW5nZXMuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0aW9uSGFzTXVsdGlwbGVSYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvaW5nIHRoZSBvcmlnaW5hbCBmZWF0dXJlIHRlc3QgaGVyZSBpbiBDaHJvbWUgMzYgKGFuZCBwcmVzdW1hYmx5IGxhdGVyIHZlcnNpb25zKSBwcmludHMgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZSBlcnJvciBvZiBcIkRpc2NvbnRpZ3VvdXMgc2VsZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQuXCIgdGhhdCBjYW5ub3QgYmUgc3VwcHJlc3NlZC4gVGhlcmUnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZyB3ZSBjYW4gZG8gYWJvdXQgdGhpcyB3aGlsZSByZXRhaW5pbmcgdGhlIGZlYXR1cmUgdGVzdCBzbyB3ZSBoYXZlIHRvIHJlc29ydCB0byBhIGJyb3dzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNuaWZmLiBJJ20gbm90IGhhcHB5IGFib3V0IGl0LiBTZWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zOTk3OTFcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHJvbWVNYXRjaCA9IHdpbmRvdy5uYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvQ2hyb21lXFwvKC4qPykgLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hyb21lTWF0Y2ggJiYgcGFyc2VJbnQoY2hyb21lTWF0Y2hbMV0pID49IDM2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uU3VwcG9ydHNNdWx0aXBsZVJhbmdlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcjIgPSByMS5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcjEuc2V0U3RhcnQodGV4dE5vZGUsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIyLnNldEVuZCh0ZXh0Tm9kZSwgMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcjIuc2V0U3RhcnQodGV4dE5vZGUsIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKHIyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25TdXBwb3J0c011bHRpcGxlUmFuZ2VzID0gKHNlbC5yYW5nZUNvdW50ID09IDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICAgICAgZG9tLnJlbW92ZU5vZGUodGVzdEVsKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmlnaW5hbFNlbGVjdGlvblJhbmdlQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gMCAmJiBvcmlnaW5hbFNlbGVjdGlvbkJhY2t3YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZFJhbmdlQmFja3dhcmRUb05hdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZUJhY2t3YXJkVG9OYXRpdmUoc2VsLCBvcmlnaW5hbFNlbGVjdGlvblJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLndhcm4oXCJSYW5neSBpbml0aWFsaXphdGlvbjogb3JpZ2luYWwgc2VsZWN0aW9uIHdhcyBiYWNrd2FyZHMgYnV0IHNlbGVjdGlvbiBoYXMgYmVlbiByZXN0b3JlZCBmb3J3YXJkcyBiZWNhdXNlIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgU2VsZWN0aW9uLmV4dGVuZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmFkZFJhbmdlKG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShvcmlnaW5hbFNlbGVjdGlvblJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmVhdHVyZXMuc2VsZWN0aW9uU3VwcG9ydHNNdWx0aXBsZVJhbmdlcyA9IHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXM7XG4gICAgICAgIGZlYXR1cmVzLmNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZCA9IGNvbGxhcHNlZE5vbkVkaXRhYmxlU2VsZWN0aW9uc1N1cHBvcnRlZDtcblxuICAgICAgICAvLyBDb250cm9sUmFuZ2VzXG4gICAgICAgIHZhciBpbXBsZW1lbnRzQ29udHJvbFJhbmdlID0gZmFsc2UsIHRlc3RDb250cm9sUmFuZ2U7XG5cbiAgICAgICAgaWYgKGJvZHkgJiYgaXNIb3N0TWV0aG9kKGJvZHksIFwiY3JlYXRlQ29udHJvbFJhbmdlXCIpKSB7XG4gICAgICAgICAgICB0ZXN0Q29udHJvbFJhbmdlID0gYm9keS5jcmVhdGVDb250cm9sUmFuZ2UoKTtcbiAgICAgICAgICAgIGlmICh1dGlsLmFyZUhvc3RQcm9wZXJ0aWVzKHRlc3RDb250cm9sUmFuZ2UsIFtcIml0ZW1cIiwgXCJhZGRcIl0pKSB7XG4gICAgICAgICAgICAgICAgaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmVhdHVyZXMuaW1wbGVtZW50c0NvbnRyb2xSYW5nZSA9IGltcGxlbWVudHNDb250cm9sUmFuZ2U7XG5cbiAgICAgICAgLy8gU2VsZWN0aW9uIGNvbGxhcHNlZG5lc3NcbiAgICAgICAgaWYgKHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Jc0NvbGxhcHNlZCA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWwuYW5jaG9yTm9kZSA9PT0gc2VsLmZvY3VzTm9kZSAmJiBzZWwuYW5jaG9yT2Zmc2V0ID09PSBzZWwuZm9jdXNPZmZzZXQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0aW9uSXNDb2xsYXBzZWQgPSBmdW5jdGlvbihzZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsLnJhbmdlQ291bnQgPyBzZWwuZ2V0UmFuZ2VBdChzZWwucmFuZ2VDb3VudCAtIDEpLmNvbGxhcHNlZCA6IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHNlbCwgcmFuZ2UsIGJhY2t3YXJkKSB7XG4gICAgICAgICAgICB2YXIgYW5jaG9yUHJlZml4ID0gYmFja3dhcmQgPyBcImVuZFwiIDogXCJzdGFydFwiLCBmb2N1c1ByZWZpeCA9IGJhY2t3YXJkID8gXCJzdGFydFwiIDogXCJlbmRcIjtcbiAgICAgICAgICAgIHNlbC5hbmNob3JOb2RlID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgXCJDb250YWluZXJcIl07XG4gICAgICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gcmFuZ2VbYW5jaG9yUHJlZml4ICsgXCJPZmZzZXRcIl07XG4gICAgICAgICAgICBzZWwuZm9jdXNOb2RlID0gcmFuZ2VbZm9jdXNQcmVmaXggKyBcIkNvbnRhaW5lclwiXTtcbiAgICAgICAgICAgIHNlbC5mb2N1c09mZnNldCA9IHJhbmdlW2ZvY3VzUHJlZml4ICsgXCJPZmZzZXRcIl07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21OYXRpdmVTZWxlY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICB2YXIgbmF0aXZlU2VsID0gc2VsLm5hdGl2ZVNlbGVjdGlvbjtcbiAgICAgICAgICAgIHNlbC5hbmNob3JOb2RlID0gbmF0aXZlU2VsLmFuY2hvck5vZGU7XG4gICAgICAgICAgICBzZWwuYW5jaG9yT2Zmc2V0ID0gbmF0aXZlU2VsLmFuY2hvck9mZnNldDtcbiAgICAgICAgICAgIHNlbC5mb2N1c05vZGUgPSBuYXRpdmVTZWwuZm9jdXNOb2RlO1xuICAgICAgICAgICAgc2VsLmZvY3VzT2Zmc2V0ID0gbmF0aXZlU2VsLmZvY3VzT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICBzZWwuYW5jaG9yTm9kZSA9IHNlbC5mb2N1c05vZGUgPSBudWxsO1xuICAgICAgICAgICAgc2VsLmFuY2hvck9mZnNldCA9IHNlbC5mb2N1c09mZnNldCA9IDA7XG4gICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IDA7XG4gICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5hdGl2ZVJhbmdlKHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgbmF0aXZlUmFuZ2U7XG4gICAgICAgICAgICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBEb21SYW5nZSkge1xuICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlID0gYXBpLmNyZWF0ZU5hdGl2ZVJhbmdlKHJhbmdlLmdldERvY3VtZW50KCkpO1xuICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLnNldEVuZChyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0U3RhcnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2UgaW5zdGFuY2VvZiBXcmFwcGVkUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHJhbmdlLm5hdGl2ZVJhbmdlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmZWF0dXJlcy5pbXBsZW1lbnRzRG9tUmFuZ2UgJiYgKHJhbmdlIGluc3RhbmNlb2YgZG9tLmdldFdpbmRvdyhyYW5nZS5zdGFydENvbnRhaW5lcikuUmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2UgPSByYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYXRpdmVSYW5nZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJhbmdlQ29udGFpbnNTaW5nbGVFbGVtZW50KHJhbmdlTm9kZXMpIHtcbiAgICAgICAgICAgIGlmICghcmFuZ2VOb2Rlcy5sZW5ndGggfHwgcmFuZ2VOb2Rlc1swXS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHJhbmdlTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRvbS5pc0FuY2VzdG9yT2YocmFuZ2VOb2Rlc1swXSwgcmFuZ2VOb2Rlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZSkge1xuICAgICAgICAgICAgdmFyIG5vZGVzID0gcmFuZ2UuZ2V0Tm9kZXMoKTtcbiAgICAgICAgICAgIGlmICghcmFuZ2VDb250YWluc1NpbmdsZUVsZW1lbnQobm9kZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbW9kdWxlLmNyZWF0ZUVycm9yKFwiZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZTogcmFuZ2UgXCIgKyByYW5nZS5pbnNwZWN0KCkgKyBcIiBkaWQgbm90IGNvbnNpc3Qgb2YgYSBzaW5nbGUgZWxlbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2Rlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNpbXBsZSwgcXVpY2sgdGVzdCB3aGljaCBvbmx5IG5lZWRzIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gYSBUZXh0UmFuZ2UgYW5kIGEgQ29udHJvbFJhbmdlXG4gICAgICAgIGZ1bmN0aW9uIGlzVGV4dFJhbmdlKHJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gISFyYW5nZSAmJiB0eXBlb2YgcmFuZ2UudGV4dCAhPSBcInVuZGVmaW5lZFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBSYW5nZSBmcm9tIHRoZSBzZWxlY3RlZCBUZXh0UmFuZ2VcbiAgICAgICAgICAgIHZhciB3cmFwcGVkUmFuZ2UgPSBuZXcgV3JhcHBlZFJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIHNlbC5fcmFuZ2VzID0gW3dyYXBwZWRSYW5nZV07XG5cbiAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbVJhbmdlKHNlbCwgd3JhcHBlZFJhbmdlLCBmYWxzZSk7XG4gICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSB3cmFwcGVkUmFuZ2UuY29sbGFwc2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvblxuICAgICAgICAgICAgc2VsLl9yYW5nZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gc2VsLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIGlmIChpc1RleHRSYW5nZShjb250cm9sUmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FzZSAod2hlcmUgdGhlIHNlbGVjdGlvbiB0eXBlIGlzIFwiQ29udHJvbFwiIGFuZCBjYWxsaW5nIGNyZWF0ZVJhbmdlKCkgb24gdGhlIHNlbGVjdGlvbiByZXR1cm5zXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgVGV4dFJhbmdlKSBjYW4gaGFwcGVuIGluIElFIDkuIEl0IGhhcHBlbnMsIGZvciBleGFtcGxlLCB3aGVuIGFsbCBlbGVtZW50cyBpbiB0aGUgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udHJvbFJhbmdlIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIENvbnRyb2xSYW5nZSBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIGNvbnRyb2xSYW5nZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsLnJhbmdlQ291bnQgPSBjb250cm9sUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UsIGRvYyA9IGdldERvY3VtZW50KGNvbnRyb2xSYW5nZS5pdGVtKDApKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWwucmFuZ2VDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShkb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShjb250cm9sUmFuZ2UuaXRlbShpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwuX3Jhbmdlcy5wdXNoKHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWwucmFuZ2VDb3VudCA9PSAxICYmIHNlbC5fcmFuZ2VzWzBdLmNvbGxhcHNlZDtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCBzZWwuX3Jhbmdlc1tzZWwucmFuZ2VDb3VudCAtIDFdLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkUmFuZ2VUb0NvbnRyb2xTZWxlY3Rpb24oc2VsLCByYW5nZSkge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xSYW5nZSA9IHNlbC5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIHZhciByYW5nZUVsZW1lbnQgPSBnZXRTaW5nbGVFbGVtZW50RnJvbVJhbmdlKHJhbmdlKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IENvbnRyb2xSYW5nZSBjb250YWluaW5nIGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIHNlbGVjdGVkIENvbnRyb2xSYW5nZSBwbHVzIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAvLyBjb250YWluZWQgYnkgdGhlIHN1cHBsaWVkIHJhbmdlXG4gICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpO1xuICAgICAgICAgICAgdmFyIG5ld0NvbnRyb2xSYW5nZSA9IGdldEJvZHkoZG9jKS5jcmVhdGVDb250cm9sUmFuZ2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb250cm9sUmFuZ2UubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLmFkZChyYW5nZUVsZW1lbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJhZGRSYW5nZSgpOiBFbGVtZW50IHdpdGhpbiB0aGUgc3BlY2lmaWVkIFJhbmdlIGNvdWxkIG5vdCBiZSBhZGRlZCB0byBjb250cm9sIHNlbGVjdGlvbiAoZG9lcyBpdCBoYXZlIGxheW91dD8pXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnZXRTZWxlY3Rpb25SYW5nZUF0O1xuXG4gICAgICAgIGlmIChpc0hvc3RNZXRob2QodGVzdFNlbGVjdGlvbiwgXCJnZXRSYW5nZUF0XCIpKSB7XG4gICAgICAgICAgICAvLyB0cnkvY2F0Y2ggaXMgcHJlc2VudCBiZWNhdXNlIGdldFJhbmdlQXQoKSBtdXN0IGhhdmUgdGhyb3duIGFuIGVycm9yIGluIHNvbWUgYnJvd3NlciBhbmQgc29tZSBzaXR1YXRpb24uXG4gICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBJIGRpZG4ndCB3cml0ZSBhIGNvbW1lbnQgYWJvdXQgdGhlIHNwZWNpZmljcyBhbmQgYW0gbm93IHNjYXJlZCB0byB0YWtlIGl0IG91dC4gTGV0IHRoYXQgYmUgYVxuICAgICAgICAgICAgLy8gbGVzc29uIHRvIHVzIGFsbCwgZXNwZWNpYWxseSBtZS5cbiAgICAgICAgICAgIGdldFNlbGVjdGlvblJhbmdlQXQgPSBmdW5jdGlvbihzZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbC5nZXRSYW5nZUF0KGluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzKSB7XG4gICAgICAgICAgICBnZXRTZWxlY3Rpb25SYW5nZUF0ID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IGdldERvY3VtZW50KHNlbC5hbmNob3JOb2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBhcGkuY3JlYXRlUmFuZ2UoZG9jKTtcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEFuZEVuZChzZWwuYW5jaG9yTm9kZSwgc2VsLmFuY2hvck9mZnNldCwgc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3Rpb24gd2FzIHNlbGVjdGVkIGJhY2t3YXJkcyAoZnJvbSB0aGUgZW5kIHRvIHRoZSBzdGFydCBpbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBkb2N1bWVudClcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkICE9PSB0aGlzLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QW5kRW5kKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBXcmFwcGVkU2VsZWN0aW9uKHNlbGVjdGlvbiwgZG9jU2VsZWN0aW9uLCB3aW4pIHtcbiAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5kb2NTZWxlY3Rpb24gPSBkb2NTZWxlY3Rpb247XG4gICAgICAgICAgICB0aGlzLl9yYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMud2luID0gd2luO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLnByb3RvdHlwZSA9IGFwaS5zZWxlY3Rpb25Qcm90b3R5cGU7XG5cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRlUHJvcGVydGllcyhzZWwpIHtcbiAgICAgICAgICAgIHNlbC53aW4gPSBzZWwuYW5jaG9yTm9kZSA9IHNlbC5mb2N1c05vZGUgPSBzZWwuX3JhbmdlcyA9IG51bGw7XG4gICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IHNlbC5hbmNob3JPZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQgPSAwO1xuICAgICAgICAgICAgc2VsLmRldGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYWNoZWRSYW5neVNlbGVjdGlvbnMgPSBbXTtcblxuICAgICAgICBmdW5jdGlvbiBhY3RPbkNhY2hlZFNlbGVjdGlvbih3aW4sIGFjdGlvbikge1xuICAgICAgICAgICAgdmFyIGkgPSBjYWNoZWRSYW5neVNlbGVjdGlvbnMubGVuZ3RoLCBjYWNoZWQsIHNlbDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBjYWNoZWQgPSBjYWNoZWRSYW5neVNlbGVjdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgc2VsID0gY2FjaGVkLnNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09IFwiZGVsZXRlQWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlUHJvcGVydGllcyhzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FjaGVkLndpbiA9PSB3aW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSBcImRlbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRSYW5neVNlbGVjdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSBcImRlbGV0ZUFsbFwiKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVkUmFuZ3lTZWxlY3Rpb25zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnZXRTZWxlY3Rpb24gPSBmdW5jdGlvbih3aW4pIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBwYXJhbWV0ZXIgaXMgYSBSYW5neSBTZWxlY3Rpb24gb2JqZWN0XG4gICAgICAgICAgICBpZiAod2luICYmIHdpbiBpbnN0YW5jZW9mIFdyYXBwZWRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB3aW4ucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbiA9IGdldFdpbmRvdyh3aW4sIFwiZ2V0TmF0aXZlU2VsZWN0aW9uXCIpO1xuXG4gICAgICAgICAgICB2YXIgc2VsID0gYWN0T25DYWNoZWRTZWxlY3Rpb24od2luKTtcbiAgICAgICAgICAgIHZhciBuYXRpdmVTZWwgPSBnZXROYXRpdmVTZWxlY3Rpb24od2luKSwgZG9jU2VsID0gaW1wbGVtZW50c0RvY1NlbGVjdGlvbiA/IGdldERvY1NlbGVjdGlvbih3aW4pIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChzZWwpIHtcbiAgICAgICAgICAgICAgICBzZWwubmF0aXZlU2VsZWN0aW9uID0gbmF0aXZlU2VsO1xuICAgICAgICAgICAgICAgIHNlbC5kb2NTZWxlY3Rpb24gPSBkb2NTZWw7XG4gICAgICAgICAgICAgICAgc2VsLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsID0gbmV3IFdyYXBwZWRTZWxlY3Rpb24obmF0aXZlU2VsLCBkb2NTZWwsIHdpbik7XG4gICAgICAgICAgICAgICAgY2FjaGVkUmFuZ3lTZWxlY3Rpb25zLnB1c2goIHsgd2luOiB3aW4sIHNlbGVjdGlvbjogc2VsIH0gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgYXBpLmdldFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbjtcblxuICAgICAgICB1dGlsLmNyZWF0ZUFsaWFzRm9yRGVwcmVjYXRlZE1ldGhvZChhcGksIFwiZ2V0SWZyYW1lU2VsZWN0aW9uXCIsIFwiZ2V0U2VsZWN0aW9uXCIpO1xuXG4gICAgICAgIHZhciBzZWxQcm90byA9IFdyYXBwZWRTZWxlY3Rpb24ucHJvdG90eXBlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsLCByYW5nZXMpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBzZWxlY3Rpb24gYmVjb21lcyBvZiB0eXBlIFwiQ29udHJvbFwiXG4gICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQocmFuZ2VzWzBdLnN0YXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSBnZXRCb2R5KGRvYykuY3JlYXRlQ29udHJvbFJhbmdlKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZWwsIGxlbiA9IHJhbmdlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGVsID0gZ2V0U2luZ2xlRWxlbWVudEZyb21SYW5nZShyYW5nZXNbaV0pO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xSYW5nZS5hZGQoZWwpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG1vZHVsZS5jcmVhdGVFcnJvcihcInNldFJhbmdlcygpOiBFbGVtZW50IHdpdGhpbiBvbmUgb2YgdGhlIHNwZWNpZmllZCBSYW5nZXMgY291bGQgbm90IGJlIGFkZGVkIHRvIGNvbnRyb2wgc2VsZWN0aW9uIChkb2VzIGl0IGhhdmUgbGF5b3V0PylcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbFJhbmdlLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZWQgc2VsZWN0aW9uIGJhc2VkIG9uIHdoYXQncyBub3cgaW4gdGhlIG5hdGl2ZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIHVwZGF0ZUNvbnRyb2xTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbGVjdGluZyBhIHJhbmdlXG4gICAgICAgIGlmICghdXNlRG9jdW1lbnRTZWxlY3Rpb24gJiYgc2VsZWN0aW9uSGFzQW5jaG9yQW5kRm9jdXMgJiYgdXRpbC5hcmVIb3N0TWV0aG9kcyh0ZXN0U2VsZWN0aW9uLCBbXCJyZW1vdmVBbGxSYW5nZXNcIiwgXCJhZGRSYW5nZVwiXSkpIHtcbiAgICAgICAgICAgIHNlbFByb3RvLnJlbW92ZUFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGFkZFJhbmdlQmFja3dhcmQgPSBmdW5jdGlvbihzZWwsIHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZFRvTmF0aXZlKHNlbC5uYXRpdmVTZWxlY3Rpb24sIHJhbmdlKTtcbiAgICAgICAgICAgICAgICBzZWwucmVmcmVzaCgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkhhc1JhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBzZWxQcm90by5hZGRSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltcGxlbWVudHNDb250cm9sUmFuZ2UgJiYgaW1wbGVtZW50c0RvY1NlbGVjdGlvbiAmJiB0aGlzLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcmVjdGlvbikgJiYgc2VsZWN0aW9uSGFzRXh0ZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkUmFuZ2VCYWNrd2FyZCh0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1JhbmdlQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblN1cHBvcnRzTXVsdGlwbGVSYW5nZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNSYW5nZUNvdW50ID0gdGhpcy5yYW5nZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmFuZ2VDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBuYXRpdmUgcmFuZ2Ugc28gdGhhdCBjaGFuZ2luZyB0aGUgc2VsZWN0ZWQgcmFuZ2UgZG9lcyBub3QgYWZmZWN0IHRoZSBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBjb250cmFyeSB0byB0aGUgc3BlYyBidXQgaXMgdGhlIG9ubHkgd2F5IHRvIGFjaGlldmUgY29uc2lzdGVuY3kgYmV0d2VlbiBicm93c2Vycy4gU2VlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXNzdWUgODAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lZE5hdGl2ZVJhbmdlID0gZ2V0TmF0aXZlUmFuZ2UocmFuZ2UpLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5hZGRSYW5nZShjbG9uZWROYXRpdmVSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB3aGV0aGVyIGFkZGluZyB0aGUgcmFuZ2Ugd2FzIHN1Y2Nlc3NmdWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhbmdlQ291bnQgPSB0aGlzLm5hdGl2ZVNlbGVjdGlvbi5yYW5nZUNvdW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCA9PSBwcmV2aW91c1JhbmdlQ291bnQgKyAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgcmFuZ2UgdGhhdCB3ZSBhZGRlZCB0byB0aGUgc2VsZWN0aW9uIGlzIHJlZmxlY3RlZCBpbiB0aGUgbGFzdCByYW5nZSBleHRyYWN0ZWQgZnJvbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcGkuY29uZmlnLmNoZWNrU2VsZWN0aW9uUmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmF0aXZlUmFuZ2UgPSBnZXRTZWxlY3Rpb25SYW5nZUF0KHRoaXMubmF0aXZlU2VsZWN0aW9uLCB0aGlzLnJhbmdlQ291bnQgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXRpdmVSYW5nZSAmJiAhcmFuZ2VzRXF1YWwobmF0aXZlUmFuZ2UsIHJhbmdlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhcHBlbnMgaW4gV2ViS2l0IHdpdGgsIGZvciBleGFtcGxlLCBhIHNlbGVjdGlvbiBwbGFjZWQgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dCBub2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgV3JhcHBlZFJhbmdlKG5hdGl2ZVJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXNbdGhpcy5yYW5nZUNvdW50IC0gMV0gPSByYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2UodGhpcywgcmFuZ2UsIHNlbGVjdGlvbklzQmFja3dhcmQodGhpcy5uYXRpdmVTZWxlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IHNlbGVjdGlvbklzQ29sbGFwc2VkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYW5nZSB3YXMgbm90IGFkZGVkIHN1Y2Nlc3NmdWxseS4gVGhlIHNpbXBsZXN0IHRoaW5nIGlzIHRvIHJlZnJlc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsUHJvdG8uYWRkUmFuZ2UgPSBmdW5jdGlvbihyYW5nZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RpcmVjdGlvbkJhY2t3YXJkKGRpcmVjdGlvbikgJiYgc2VsZWN0aW9uSGFzRXh0ZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRSYW5nZUJhY2t3YXJkKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlU2VsZWN0aW9uLmFkZFJhbmdlKGdldE5hdGl2ZVJhbmdlKHJhbmdlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbFByb3RvLnNldFJhbmdlcyA9IGZ1bmN0aW9uKHJhbmdlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgcmFuZ2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQ29udHJvbFNlbGVjdGlvbih0aGlzLCByYW5nZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sIFwiZW1wdHlcIikgJiYgaXNIb3N0TWV0aG9kKHRlc3RSYW5nZSwgXCJzZWxlY3RcIikgJiZcbiAgICAgICAgICAgICAgICAgICBpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIHVzZURvY3VtZW50U2VsZWN0aW9uKSB7XG5cbiAgICAgICAgICAgIHNlbFByb3RvLnJlbW92ZUFsbFJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIEFkZGVkIHRyeS9jYXRjaCBhcyBmaXggZm9yIGlzc3VlICMyMVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jU2VsZWN0aW9uLmVtcHR5KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGVtcHR5KCkgbm90IHdvcmtpbmcgKGlzc3VlICMyNClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgIT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdvcmsgYXJvdW5kIGZhaWx1cmUgdG8gZW1wdHkgYSBjb250cm9sIHNlbGVjdGlvbiBieSBpbnN0ZWFkIHNlbGVjdGluZyBhIFRleHRSYW5nZSBhbmQgdGhlblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGluZyBlbXB0eSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYW5jaG9yTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldERvY3VtZW50KHRoaXMuYW5jaG9yTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSB0aGlzLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sUmFuZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IGdldERvY3VtZW50KCBjb250cm9sUmFuZ2UuaXRlbSgwKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRSYW5nZS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY1NlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaChleCkge31cbiAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbih0aGlzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNlbFByb3RvLmFkZFJhbmdlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2NTZWxlY3Rpb24udHlwZSA9PSBDT05UUk9MKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlVG9Db250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcGkuV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlKHJhbmdlKS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzWzBdID0gcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0aGlzLl9yYW5nZXNbMF0uY29sbGFwc2VkO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVBbmNob3JBbmRGb2N1c0Zyb21SYW5nZSh0aGlzLCByYW5nZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNlbFByb3RvLnNldFJhbmdlcyA9IGZ1bmN0aW9uKHJhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlQ291bnQgPSByYW5nZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUNvdW50ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVDb250cm9sU2VsZWN0aW9uKHRoaXMsIHJhbmdlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2VzWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmZhaWwoXCJObyBtZWFucyBvZiBzZWxlY3RpbmcgYSBSYW5nZSBvciBUZXh0UmFuZ2Ugd2FzIGZvdW5kXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsUHJvdG8uZ2V0UmFuZ2VBdCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTkRFWF9TSVpFX0VSUlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgdGhlIHJhbmdlIHRvIHByZXNlcnZlIHNlbGVjdGlvbi1yYW5nZSBpbmRlcGVuZGVuY2UuIFNlZSBpc3N1ZSA4MC5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZ2VzW2luZGV4XS5jbG9uZVJhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlZnJlc2hTZWxlY3Rpb247XG5cbiAgICAgICAgaWYgKHVzZURvY3VtZW50U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZWZyZXNoU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgICAgIGlmIChhcGkuaXNTZWxlY3Rpb25WYWxpZChzZWwud2luKSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHNlbC5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGdldEJvZHkoc2VsLndpbi5kb2N1bWVudCkuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzZWwuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHNlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RleHRSYW5nZShyYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRnJvbVRleHRSYW5nZShzZWwsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNIb3N0TWV0aG9kKHRlc3RTZWxlY3Rpb24sIFwiZ2V0UmFuZ2VBdFwiKSAmJiB0eXBlb2YgdGVzdFNlbGVjdGlvbi5yYW5nZUNvdW50ID09IE5VTUJFUikge1xuICAgICAgICAgICAgcmVmcmVzaFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNlbCkge1xuICAgICAgICAgICAgICAgIGlmIChpbXBsZW1lbnRzQ29udHJvbFJhbmdlICYmIGltcGxlbWVudHNEb2NTZWxlY3Rpb24gJiYgc2VsLmRvY1NlbGVjdGlvbi50eXBlID09IENPTlRST0wpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29udHJvbFNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbC5fcmFuZ2VzLmxlbmd0aCA9IHNlbC5yYW5nZUNvdW50ID0gc2VsLm5hdGl2ZVNlbGVjdGlvbi5yYW5nZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWwucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLl9yYW5nZXNbaV0gPSBuZXcgYXBpLldyYXBwZWRSYW5nZShzZWwubmF0aXZlU2VsZWN0aW9uLmdldFJhbmdlQXQoaSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQW5jaG9yQW5kRm9jdXNGcm9tUmFuZ2Uoc2VsLCBzZWwuX3Jhbmdlc1tzZWwucmFuZ2VDb3VudCAtIDFdLCBzZWxlY3Rpb25Jc0JhY2t3YXJkKHNlbC5uYXRpdmVTZWxlY3Rpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5pc0NvbGxhcHNlZCA9IHNlbGVjdGlvbklzQ29sbGFwc2VkKHNlbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVFbXB0eVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rpb25IYXNBbmNob3JBbmRGb2N1cyAmJiB0eXBlb2YgdGVzdFNlbGVjdGlvbi5pc0NvbGxhcHNlZCA9PSBCT09MRUFOICYmIHR5cGVvZiB0ZXN0UmFuZ2UuY29sbGFwc2VkID09IEJPT0xFQU4gJiYgZmVhdHVyZXMuaW1wbGVtZW50c0RvbVJhbmdlKSB7XG4gICAgICAgICAgICByZWZyZXNoU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlLCBuYXRpdmVTZWwgPSBzZWwubmF0aXZlU2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChuYXRpdmVTZWwuYW5jaG9yTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGdldFNlbGVjdGlvblJhbmdlQXQobmF0aXZlU2VsLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsLl9yYW5nZXMgPSBbcmFuZ2VdO1xuICAgICAgICAgICAgICAgICAgICBzZWwucmFuZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuY2hvckFuZEZvY3VzRnJvbU5hdGl2ZVNlbGVjdGlvbihzZWwpO1xuICAgICAgICAgICAgICAgICAgICBzZWwuaXNDb2xsYXBzZWQgPSBzZWxlY3Rpb25Jc0NvbGxhcHNlZChzZWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUVtcHR5U2VsZWN0aW9uKHNlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5mYWlsKFwiTm8gbWVhbnMgb2Ygb2J0YWluaW5nIGEgUmFuZ2Ugb3IgVGV4dFJhbmdlIGZyb20gdGhlIHVzZXIncyBzZWxlY3Rpb24gd2FzIGZvdW5kXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsUHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uKGNoZWNrRm9yQ2hhbmdlcykge1xuICAgICAgICAgICAgdmFyIG9sZFJhbmdlcyA9IGNoZWNrRm9yQ2hhbmdlcyA/IHRoaXMuX3Jhbmdlcy5zbGljZSgwKSA6IG51bGw7XG4gICAgICAgICAgICB2YXIgb2xkQW5jaG9yTm9kZSA9IHRoaXMuYW5jaG9yTm9kZSwgb2xkQW5jaG9yT2Zmc2V0ID0gdGhpcy5hbmNob3JPZmZzZXQ7XG5cbiAgICAgICAgICAgIHJlZnJlc2hTZWxlY3Rpb24odGhpcyk7XG4gICAgICAgICAgICBpZiAoY2hlY2tGb3JDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHJhbmdlIGNvdW50IGZpcnN0XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBvbGRSYW5nZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChpICE9IHRoaXMuX3Jhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTm93IGNoZWNrIHRoZSBkaXJlY3Rpb24uIENoZWNraW5nIHRoZSBhbmNob3IgcG9zaXRpb24gaXMgdGhlIHNhbWUgaXMgZW5vdWdoIHNpbmNlIHdlJ3JlIGNoZWNraW5nIGFsbCB0aGVcbiAgICAgICAgICAgICAgICAvLyByYW5nZXMgYWZ0ZXIgdGhpc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvck5vZGUgIT0gb2xkQW5jaG9yTm9kZSB8fCB0aGlzLmFuY2hvck9mZnNldCAhPSBvbGRBbmNob3JPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRmluYWxseSwgY29tcGFyZSBlYWNoIHJhbmdlIGluIHR1cm5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2VzRXF1YWwob2xkUmFuZ2VzW2ldLCB0aGlzLl9yYW5nZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUmVtb3ZhbCBvZiBhIHNpbmdsZSByYW5nZVxuICAgICAgICB2YXIgcmVtb3ZlUmFuZ2VNYW51YWxseSA9IGZ1bmN0aW9uKHNlbCwgcmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSBzZWwuZ2V0QWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZXNFcXVhbChyYW5nZSwgcmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNlbC5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRW1wdHlTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBzZWxQcm90by5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbFJhbmdlID0gdGhpcy5kb2NTZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlRWxlbWVudCA9IGdldFNpbmdsZUVsZW1lbnRGcm9tUmFuZ2UocmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBDb250cm9sUmFuZ2UgY29udGFpbmluZyBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBzZWxlY3RlZCBDb250cm9sUmFuZ2UgbWludXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgY29udGFpbmVkIGJ5IHRoZSBzdXBwbGllZCByYW5nZVxuICAgICAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnQoY29udHJvbFJhbmdlLml0ZW0oMCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q29udHJvbFJhbmdlID0gZ2V0Qm9keShkb2MpLmNyZWF0ZUNvbnRyb2xSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWwsIHJlbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvbnRyb2xSYW5nZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBjb250cm9sUmFuZ2UuaXRlbShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbCAhPT0gcmFuZ2VFbGVtZW50IHx8IHJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250cm9sUmFuZ2UuYWRkKGNvbnRyb2xSYW5nZS5pdGVtKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV3Q29udHJvbFJhbmdlLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlZCBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCdzIG5vdyBpbiB0aGUgbmF0aXZlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb250cm9sU2VsZWN0aW9uKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJhbmdlTWFudWFsbHkodGhpcywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxQcm90by5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlUmFuZ2VNYW51YWxseSh0aGlzLCByYW5nZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZWN0aW5nIGlmIGEgc2VsZWN0aW9uIGlzIGJhY2t3YXJkXG4gICAgICAgIHZhciBzZWxlY3Rpb25Jc0JhY2t3YXJkO1xuICAgICAgICBpZiAoIXVzZURvY3VtZW50U2VsZWN0aW9uICYmIHNlbGVjdGlvbkhhc0FuY2hvckFuZEZvY3VzICYmIGZlYXR1cmVzLmltcGxlbWVudHNEb21SYW5nZSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uSXNCYWNrd2FyZCA9IHdpblNlbGVjdGlvbklzQmFja3dhcmQ7XG5cbiAgICAgICAgICAgIHNlbFByb3RvLmlzQmFja3dhcmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uSXNCYWNrd2FyZCh0aGlzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Jc0JhY2t3YXJkID0gc2VsUHJvdG8uaXNCYWNrd2FyZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYW4gYWxpYXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiBGcm9tIDEuMywgZXZlcnl0aGluZyBpcyBcImJhY2t3YXJkXCIgcmF0aGVyIHRoYW4gXCJiYWNrd2FyZHNcIlxuICAgICAgICBzZWxQcm90by5pc0JhY2t3YXJkcyA9IHNlbFByb3RvLmlzQmFja3dhcmQ7XG5cbiAgICAgICAgLy8gU2VsZWN0aW9uIHN0cmluZ2lmaWVyXG4gICAgICAgIC8vIFRoaXMgaXMgY29uZm9ybWFudCB0byB0aGUgb2xkIEhUTUw1IHNlbGVjdGlvbnMgZHJhZnQgc3BlYyBidXQgZGlmZmVycyBmcm9tIFdlYktpdCBhbmQgTW96aWxsYSdzIGltcGxlbWVudGF0aW9uLlxuICAgICAgICAvLyBUaGUgY3VycmVudCBzcGVjIGRvZXMgbm90IHlldCBkZWZpbmUgdGhpcyBtZXRob2QuXG4gICAgICAgIHNlbFByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VUZXh0cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMucmFuZ2VDb3VudDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VUZXh0c1tpXSA9IFwiXCIgKyB0aGlzLl9yYW5nZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VUZXh0cy5qb2luKFwiXCIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudChzZWwsIG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChzZWwud2luLmRvY3VtZW50ICE9IGdldERvY3VtZW50KG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIldST05HX0RPQ1VNRU5UX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIGN1cnJlbnQgYnJvd3NlciBjb25mb3JtcyBmdWxseSB0byB0aGUgc3BlYyBmb3IgdGhpcyBtZXRob2QsIHNvIFJhbmd5J3Mgb3duIG1ldGhvZCBpcyBhbHdheXMgdXNlZFxuICAgICAgICBzZWxQcm90by5jb2xsYXBzZSA9IGZ1bmN0aW9uKG5vZGUsIG9mZnNldCkge1xuICAgICAgICAgICAgYXNzZXJ0Tm9kZUluU2FtZURvY3VtZW50KHRoaXMsIG5vZGUpO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKG5vZGUpO1xuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2VUb1BvaW50KG5vZGUsIG9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLnNldFNpbmdsZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIHRoaXMuaXNDb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmNvbGxhcHNlVG9TdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuX3Jhbmdlc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJJTlZBTElEX1NUQVRFX0VSUlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5jb2xsYXBzZVRvRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5fcmFuZ2VzW3RoaXMucmFuZ2VDb3VudCAtIDFdO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiSU5WQUxJRF9TVEFURV9FUlJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhlIHNwZWMgaXMgdmVyeSBzcGVjaWZpYyBvbiBob3cgc2VsZWN0QWxsQ2hpbGRyZW4gc2hvdWxkIGJlIGltcGxlbWVudGVkIGFuZCBub3QgYWxsIGJyb3dzZXJzIGltcGxlbWVudCBpdCBhc1xuICAgICAgICAvLyBzcGVjaWZpZWQgc28gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyBuZXZlciB1c2VkIGJ5IFJhbmd5LlxuICAgICAgICBzZWxQcm90by5zZWxlY3RBbGxDaGlsZHJlbiA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGFzc2VydE5vZGVJblNhbWVEb2N1bWVudCh0aGlzLCBub2RlKTtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZShub2RlKTtcbiAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U2luZ2xlUmFuZ2UocmFuZ2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmRlbGV0ZUZyb21Eb2N1bWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gU2VwY2lhbCBiZWhhdmlvdXIgcmVxdWlyZWQgZm9yIElFJ3MgY29udHJvbCBzZWxlY3Rpb25zXG4gICAgICAgICAgICBpZiAoaW1wbGVtZW50c0NvbnRyb2xSYW5nZSAmJiBpbXBsZW1lbnRzRG9jU2VsZWN0aW9uICYmIHRoaXMuZG9jU2VsZWN0aW9uLnR5cGUgPT0gQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sUmFuZ2UgPSB0aGlzLmRvY1NlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50O1xuICAgICAgICAgICAgICAgIHdoaWxlIChjb250cm9sUmFuZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBjb250cm9sUmFuZ2UuaXRlbSgwKTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFJhbmdlLnJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZG9tLnJlbW92ZU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5nZXRBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZXNbaV0uZGVsZXRlQ29udGVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc3BlYyBzYXlzIG5vdGhpbmcgYWJvdXQgd2hhdCB0aGUgc2VsZWN0aW9uIHNob3VsZCBjb250YWluIGFmdGVyIGNhbGxpbmcgZGVsZXRlQ29udGVudHMgb24gZWFjaFxuICAgICAgICAgICAgICAgICAgICAvLyByYW5nZS4gRmlyZWZveCBtb3ZlcyB0aGUgc2VsZWN0aW9uIHRvIHdoZXJlIHRoZSBmaW5hbCBzZWxlY3RlZCByYW5nZSB3YXMsIHNvIHdlIGVtdWxhdGUgdGhhdFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlc1tsZW4gLSAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlIG5vbi1zdGFuZGFyZCBleHRlbnNpb25zXG4gICAgICAgIHNlbFByb3RvLmVhY2hSYW5nZSA9IGZ1bmN0aW9uKGZ1bmMsIHJldHVyblZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fcmFuZ2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBmdW5jKCB0aGlzLmdldFJhbmdlQXQoaSkgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5nZXRBbGxSYW5nZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLnNldFNpbmdsZVJhbmdlID0gZnVuY3Rpb24ocmFuZ2UsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIHRoaXMuYWRkUmFuZ2UocmFuZ2UsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY2FsbE1ldGhvZE9uRWFjaFJhbmdlID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgcGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5lYWNoUmFuZ2UoIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCByYW5nZVttZXRob2ROYW1lXS5hcHBseShyYW5nZSwgcGFyYW1zIHx8IFtdKSApO1xuICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlU3RhcnRPckVuZFNldHRlcihpc1N0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmdldFJhbmdlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlW1wic2V0XCIgKyAoaXNTdGFydCA/IFwiU3RhcnRcIiA6IFwiRW5kXCIpXShub2RlLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gYXBpLmNyZWF0ZVJhbmdlKHRoaXMud2luLmRvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBbmRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaW5nbGVSYW5nZShyYW5nZSwgdGhpcy5pc0JhY2t3YXJkKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbFByb3RvLnNldFN0YXJ0ID0gY3JlYXRlU3RhcnRPckVuZFNldHRlcih0cnVlKTtcbiAgICAgICAgc2VsUHJvdG8uc2V0RW5kID0gY3JlYXRlU3RhcnRPckVuZFNldHRlcihmYWxzZSk7XG5cbiAgICAgICAgLy8gQWRkIHNlbGVjdCgpIG1ldGhvZCB0byBSYW5nZSBwcm90b3R5cGUuIEFueSBleGlzdGluZyBzZWxlY3Rpb24gd2lsbCBiZSByZW1vdmVkLlxuICAgICAgICBhcGkucmFuZ2VQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBnZXRTZWxlY3Rpb24oIHRoaXMuZ2V0RG9jdW1lbnQoKSApLnNldFNpbmdsZVJhbmdlKHRoaXMsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY2hhbmdlRWFjaFJhbmdlID0gZnVuY3Rpb24oZnVuYykge1xuICAgICAgICAgICAgdmFyIHJhbmdlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGJhY2t3YXJkID0gdGhpcy5pc0JhY2t3YXJkKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZnVuYyhyYW5nZSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgICAgICBpZiAoYmFja3dhcmQgJiYgcmFuZ2VzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSYW5nZShyYW5nZXNbMF0sIFwiYmFja3dhcmRcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2VzKHJhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uY29udGFpbnNOb2RlID0gZnVuY3Rpb24obm9kZSwgYWxsb3dQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoUmFuZ2UoIGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlLmNvbnRhaW5zTm9kZShub2RlLCBhbGxvd1BhcnRpYWwpO1xuICAgICAgICAgICAgfSwgdHJ1ZSApIHx8IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLmdldEJvb2ttYXJrID0gZnVuY3Rpb24oY29udGFpbmVyTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiYWNrd2FyZDogdGhpcy5pc0JhY2t3YXJkKCksXG4gICAgICAgICAgICAgICAgcmFuZ2VCb29rbWFya3M6IHRoaXMuY2FsbE1ldGhvZE9uRWFjaFJhbmdlKFwiZ2V0Qm9va21hcmtcIiwgW2NvbnRhaW5lck5vZGVdKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxQcm90by5tb3ZlVG9Cb29rbWFyayA9IGZ1bmN0aW9uKGJvb2ttYXJrKSB7XG4gICAgICAgICAgICB2YXIgc2VsUmFuZ2VzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcmFuZ2VCb29rbWFyaywgcmFuZ2U7IHJhbmdlQm9va21hcmsgPSBib29rbWFyay5yYW5nZUJvb2ttYXJrc1tpKytdOyApIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IGFwaS5jcmVhdGVSYW5nZSh0aGlzLndpbik7XG4gICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsocmFuZ2VCb29rbWFyayk7XG4gICAgICAgICAgICAgICAgc2VsUmFuZ2VzLnB1c2gocmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJvb2ttYXJrLmJhY2t3YXJkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaW5nbGVSYW5nZShzZWxSYW5nZXNbMF0sIFwiYmFja3dhcmRcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmFuZ2VzKHNlbFJhbmdlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uc2F2ZVJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiYWNrd2FyZDogdGhpcy5pc0JhY2t3YXJkKCksXG4gICAgICAgICAgICAgICAgcmFuZ2VzOiB0aGlzLmNhbGxNZXRob2RPbkVhY2hSYW5nZShcImNsb25lUmFuZ2VcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8ucmVzdG9yZVJhbmdlcyA9IGZ1bmN0aW9uKHNlbFJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCByYW5nZTsgcmFuZ2UgPSBzZWxSYW5nZXMucmFuZ2VzW2ldOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJhbmdlKHJhbmdlLCAoc2VsUmFuZ2VzLmJhY2t3YXJkICYmIGkgPT0gMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbFByb3RvLnRvSHRtbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJhbmdlSHRtbHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZWFjaFJhbmdlKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VIdG1scy5wdXNoKCBEb21SYW5nZS50b0h0bWwocmFuZ2UpICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByYW5nZUh0bWxzLmpvaW4oXCJcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGZlYXR1cmVzLmltcGxlbWVudHNUZXh0UmFuZ2UpIHtcbiAgICAgICAgICAgIHNlbFByb3RvLmdldE5hdGl2ZVRleHRSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWwsIHRleHRSYW5nZTtcbiAgICAgICAgICAgICAgICBpZiAoIChzZWwgPSB0aGlzLmRvY1NlbGVjdGlvbikgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHNlbC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUZXh0UmFuZ2UocmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXROYXRpdmVUZXh0UmFuZ2U6IHNlbGVjdGlvbiBpcyBhIGNvbnRyb2wgc2VsZWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkuV3JhcHBlZFRleHRSYW5nZS5yYW5nZVRvVGV4dFJhbmdlKCB0aGlzLmdldFJhbmdlQXQoMCkgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBtb2R1bGUuY3JlYXRlRXJyb3IoXCJnZXROYXRpdmVUZXh0UmFuZ2U6IHNlbGVjdGlvbiBjb250YWlucyBubyByYW5nZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zcGVjdChzZWwpIHtcbiAgICAgICAgICAgIHZhciByYW5nZUluc3BlY3RzID0gW107XG4gICAgICAgICAgICB2YXIgYW5jaG9yID0gbmV3IERvbVBvc2l0aW9uKHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KTtcbiAgICAgICAgICAgIHZhciBmb2N1cyA9IG5ldyBEb21Qb3NpdGlvbihzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIHNlbC5nZXROYW1lID09IFwiZnVuY3Rpb25cIikgPyBzZWwuZ2V0TmFtZSgpIDogXCJTZWxlY3Rpb25cIjtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWwucmFuZ2VDb3VudCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlbC5yYW5nZUNvdW50OyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VJbnNwZWN0c1tpXSA9IERvbVJhbmdlLmluc3BlY3Qoc2VsLmdldFJhbmdlQXQoaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIltcIiArIG5hbWUgKyBcIihSYW5nZXM6IFwiICsgcmFuZ2VJbnNwZWN0cy5qb2luKFwiLCBcIikgK1xuICAgICAgICAgICAgICAgICAgICBcIikoYW5jaG9yOiBcIiArIGFuY2hvci5pbnNwZWN0KCkgKyBcIiwgZm9jdXM6IFwiICsgZm9jdXMuaW5zcGVjdCgpICsgXCJdXCI7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxQcm90by5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJXcmFwcGVkU2VsZWN0aW9uXCI7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uaW5zcGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3QodGhpcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsUHJvdG8uZGV0YWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhY3RPbkNhY2hlZFNlbGVjdGlvbih0aGlzLndpbiwgXCJkZWxldGVcIik7XG4gICAgICAgICAgICBkZWxldGVQcm9wZXJ0aWVzKHRoaXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFdyYXBwZWRTZWxlY3Rpb24uZGV0YWNoQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhY3RPbkNhY2hlZFNlbGVjdGlvbihudWxsLCBcImRlbGV0ZUFsbFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgICAgICBXcmFwcGVkU2VsZWN0aW9uLmlzRGlyZWN0aW9uQmFja3dhcmQgPSBpc0RpcmVjdGlvbkJhY2t3YXJkO1xuXG4gICAgICAgIGFwaS5TZWxlY3Rpb24gPSBXcmFwcGVkU2VsZWN0aW9uO1xuXG4gICAgICAgIGFwaS5zZWxlY3Rpb25Qcm90b3R5cGUgPSBzZWxQcm90bztcblxuICAgICAgICBhcGkuYWRkU2hpbUxpc3RlbmVyKGZ1bmN0aW9uKHdpbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW4uZ2V0U2VsZWN0aW9uID09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB3aW4uZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRTZWxlY3Rpb24od2luKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuXHJcbiAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBsb2FkIGJlZm9yZSBpbml0aWFsaXppbmdcclxuICAgIHZhciBkb2NSZWFkeSA9IGZhbHNlO1xyXG5cclxuICAgIHZhciBsb2FkSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoIWRvY1JlYWR5KSB7XHJcbiAgICAgICAgICAgIGRvY1JlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCFhcGkuaW5pdGlhbGl6ZWQgJiYgYXBpLmNvbmZpZy5hdXRvSW5pdGlhbGl6ZSkge1xyXG4gICAgICAgICAgICAgICAgaW5pdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgLy8gVGVzdCB3aGV0aGVyIHRoZSBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZCBhbmQgaW5pdGlhbGl6ZSBpbW1lZGlhdGVseSBpZiBzb1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikge1xyXG4gICAgICAgICAgICBsb2FkSGFuZGxlcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpc0hvc3RNZXRob2QoZG9jdW1lbnQsIFwiYWRkRXZlbnRMaXN0ZW5lclwiKSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbG9hZEhhbmRsZXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGEgZmFsbGJhY2sgaW4gY2FzZSB0aGUgRE9NQ29udGVudExvYWRlZCBldmVudCBpc24ndCBzdXBwb3J0ZWRcclxuICAgICAgICAgICAgYWRkTGlzdGVuZXIod2luZG93LCBcImxvYWRcIiwgbG9hZEhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXBpO1xyXG59LCB0aGlzKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yYW5neS9saWIvcmFuZ3ktY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcblZ1ZS51c2UocmVxdWlyZSgndnVlLXJlc291cmNlJykpO1xuXG5WdWUuaHR0cC5oZWFkZXJzLmNvbW1vblsnWC1DU1JGLVRPS0VOJ10gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3NyZi10b2tlbicpLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcblxuVnVlLmh0dHAuaW50ZXJjZXB0b3JzLnB1c2goe1xuICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgICB0aGlzLiRyb290LnNob3dMb2dpbk1vZGFsID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL3Z1ZS1yZXNvdXJjZS5qcyIsImdsb2JhbC5jcF91cmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB1cmwgPSBTdGF0YW1pYy5jcFJvb3QgKyAnLycgKyB1cmw7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXC8rL2csICcvJyk7XG59O1xuXG5nbG9iYWwucmVzb3VyY2VfdXJsID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdXJsID0gU3RhdGFtaWMucmVzb3VyY2VVcmwgKyAnLycgKyB1cmw7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXC8rL2csICcvJyk7XG59O1xuXG4vLyBHZXQgdXJsIHNlZ21lbnRzIGZyb20gdGhlIG50aCBzZWdtZW50XG5nbG9iYWwuZ2V0X2Zyb21fc2VnbWVudCA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgcmV0dXJuIFN0YXRhbWljLnVybFBhdGguc3BsaXQoJy8nKS5zcGxpY2UoY291bnQpLmpvaW4oJy8nKTtcbn07XG5cbmdsb2JhbC5mb3JtYXRfaW5wdXRfb3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuXHRpZiAodHlwZW9mIG9wdGlvbnNbMF0gPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIG9wdGlvbnM7XG5cdH1cblxuXHR2YXIgZm9ybWF0dGVkID0gW107XG5cdF8uZWFjaChvcHRpb25zLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBsaXN0KSB7XG5cdCAgICBmb3JtYXR0ZWQucHVzaCh7J3ZhbHVlJzoga2V5LCAndGV4dCc6IHZhbHVlfSk7XG5cdH0pO1xuXG5cdHJldHVybiBmb3JtYXR0ZWQ7XG59O1xuXG5nbG9iYWwuZmlsZV9pY29uID0gZnVuY3Rpb24oZXh0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIHJlc291cmNlX3VybCgnaW1nL2ZpbGV0eXBlcy8nKyBleHRlbnNpb24gKycucG5nJyk7XG59O1xuXG5nbG9iYWwuZGQgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgY29uc29sZS5sb2coYXJncyk7XG59O1xuXG5nbG9iYWwuZGF0YV9nZXQgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBrZXkuc3BsaXQoXCIuXCIpLnJlZHVjZShmdW5jdGlvbihvLCB4KSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIG8gPT0gXCJ1bmRlZmluZWRcIiB8fCBvID09PSBudWxsKSA/IG8gOiBvW3hdO1xuICAgIH0sIG9iaik7XG59O1xuXG5nbG9iYWwuQ29va2llcyA9IHJlcXVpcmUoJ2Nvb2tpZXMtanMnKTtcblxuZ2xvYmFsLnRhaWx3aW5kX3dpZHRoX2NsYXNzID0gZnVuY3Rpb24gKHdpZHRoKSB7XG4gICAgY29uc3Qgd2lkdGhzID0ge1xuICAgICAgICAyNTogJzEvNCcsXG4gICAgICAgIDMzOiAnMS8zJyxcbiAgICAgICAgNTA6ICcxLzInLFxuICAgICAgICA2NjogJzIvMycsXG4gICAgICAgIDc1OiAnMy80JyxcbiAgICAgICAgMTAwOiAnZnVsbCdcbiAgICB9O1xuXG4gICAgcmV0dXJuIGB3LSR7d2lkdGhzW3dpZHRoXSB8fCAnZnVsbCd9YDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL2dsb2JhbHMuanMiLCIvLyBTdHJpbmcuaW5jbHVkZXMoKSBwb2x5ZmlsbC5cbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvaW5jbHVkZXNcbmlmICghU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcykge1xuICAgIFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbihzZWFyY2gsIHN0YXJ0KSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgaWYgKHR5cGVvZiBzdGFydCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvcG9seWZpbGxzLmpzIiwiXy5taXhpbih7XG4gICAgLy8gIyMjIF8ub2JqTWFwXG4gICAgLy8gXy5tYXAgZm9yIG9iamVjdHMsIGtlZXBzIGtleS92YWx1ZSBhc3NvY2lhdGlvbnNcbiAgICBvYmpNYXA6IGZ1bmN0aW9uIChpbnB1dCwgbWFwcGVyLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gXy5yZWR1Y2UoaW5wdXQsIGZ1bmN0aW9uIChvYmosIHYsIGspIHtcbiAgICAgICAgICAgICAgIG9ialtrXSA9IG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGlucHV0KTtcbiAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgfSwge30sIGNvbnRleHQpO1xuICAgIH0sXG4gICAgLy8gIyMjIF8ub2JqRmlsdGVyXG4gICAgLy8gXy5maWx0ZXIgZm9yIG9iamVjdHMsIGtlZXBzIGtleS92YWx1ZSBhc3NvY2lhdGlvbnNcbiAgICAvLyBidXQgb25seSBpbmNsdWRlcyB0aGUgcHJvcGVydGllcyB0aGF0IHBhc3MgdGVzdCgpLlxuICAgIG9iakZpbHRlcjogZnVuY3Rpb24gKGlucHV0LCB0ZXN0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gXy5yZWR1Y2UoaW5wdXQsIGZ1bmN0aW9uIChvYmosIHYsIGspIHtcbiAgICAgICAgICAgICAgIGlmICh0ZXN0LmNhbGwoY29udGV4dCwgdiwgaywgaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgIG9ialtrXSA9IHY7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgIH0sIHt9LCBjb250ZXh0KTtcbiAgICB9LFxuICAgIC8vICMjIyBfLm9ialJlamVjdFxuICAgIC8vXG4gICAgLy8gXy5yZWplY3QgZm9yIG9iamVjdHMsIGtlZXBzIGtleS92YWx1ZSBhc3NvY2lhdGlvbnNcbiAgICAvLyBidXQgZG9lcyBub3QgaW5jbHVkZSB0aGUgcHJvcGVydGllcyB0aGF0IHBhc3MgdGVzdCgpLlxuICAgIG9ialJlamVjdDogZnVuY3Rpb24gKGlucHV0LCB0ZXN0LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gXy5yZWR1Y2UoaW5wdXQsIGZ1bmN0aW9uIChvYmosIHYsIGspIHtcbiAgICAgICAgICAgICAgIGlmICghdGVzdC5jYWxsKGNvbnRleHQsIHYsIGssIGlucHV0KSkge1xuICAgICAgICAgICAgICAgICBvYmpba10gPSB2O1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICB9LCB7fSwgY29udGV4dCk7XG4gICAgfVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC91bmRlcnNjb3JlLW1peGlucy5qcyIsImpRdWVyeS5leHRlbmQoIGpRdWVyeS5mbiwge1xuICAgIC8vIE5hbWUgb2Ygb3VyIG1ldGhvZCAmIG9uZSBhcmd1bWVudCAodGhlIHBhcmVudCBzZWxlY3RvcilcbiAgICB3aXRoaW46IGZ1bmN0aW9uKCBwU2VsZWN0b3IgKSB7XG4gICAgICAgIC8vIFJldHVybnMgYSBzdWJzZXQgb2YgaXRlbXMgdXNpbmcgalF1ZXJ5LmZpbHRlclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIFJldHVybiB0cnV0aHkvZmFsc2V5IGJhc2VkIG9uIHByZXNlbmNlIGluIHBhcmVudFxuICAgICAgICAgICAgcmV0dXJuICQodGhpcykuY2xvc2VzdCggcFNlbGVjdG9yICkubGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL2pxdWVyeS1wbHVnaW5zLmpzIiwiJC5SZWRhY3Rvci5wcm90b3R5cGUuYXNzZXRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBJZiBhc3NldHMgYXJlbid0IGVuYWJsZWQsIGRvbid0IGFkZCB0aGUgYnV0dG9uLlxuICAgICAgICAgICAgaWYgKCEgdGhpcy5hc3NldHMudnVlKCkuYXNzZXRzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuYnV0dG9uLmFkZCgnYXNzZXRzJywgdHJhbnNsYXRlX2Nob2ljZSgnY3AuYXNzZXRzJywgMikpO1xuICAgICAgICAgICAgdGhpcy5idXR0b24uYWRkQ2FsbGJhY2soYnV0dG9uLCB0aGlzLmFzc2V0cy5zaG93KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLmFzc2V0cy52dWUoKS5hZGRBc3NldCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHZ1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVkaXRvci5jbG9zZXN0KCcucmVkYWN0b3ItZmllbGR0eXBlLXdyYXBwZXInKVswXS5fX3Z1ZV9fO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC9yZWRhY3Rvci1wbHVnaW5zLmpzIiwiICAgIHZhciBMYW5nID0gZnVuY3Rpb24oKSB7XG4gICAgfTtcblxuICAgIC8vIE1ldGhvZHMgLy9cblxuICAgIC8qKlxuICAgICAqIFNldCBtZXNzYWdlcyBzb3VyY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZXMge29iamVjdH0gVGhlIG1lc3NhZ2VzIHNvdXJjZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIExhbmcucHJvdG90eXBlLnNldE1lc3NhZ2VzID0gZnVuY3Rpb24obWVzc2FnZXMpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdHJhbnNsYXRpb24gbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkge3N0cmluZ30gVGhlIGtleSBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gcmVwbGFjZW1lbnRzIHtvYmplY3R9IFRoZSByZXBsYWNlbWVudHMgdG8gYmUgZG9uZSBpbiB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0aW9uIG1lc3NhZ2UsIGlmIG5vdCBmb3VuZCB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqL1xuICAgIExhbmcucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5fZ2V0TWVzc2FnZShrZXksIHJlcGxhY2VtZW50cyk7XG4gICAgICAgIGlmIChtZXNzYWdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcGxhY2VtZW50cykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRoaXMuX2FwcGx5UmVwbGFjZW1lbnRzKG1lc3NhZ2UsIHJlcGxhY2VtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBrZXkgaXMgZGVmaW5lZCBvbiB0aGUgbWVzc2FnZXMgc291cmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSB7c3RyaW5nfSBUaGUga2V5IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4ga2V5IGlzIGRlZmluZWQgb24gdGhlIG1lc3NhZ2VzIHNvdXJjZSwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgICAqL1xuICAgIExhbmcucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycgfHwgIXRoaXMubWVzc2FnZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXNzYWdlKGtleSkgIT09IG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBsdXJhbCBvciBzaW5ndWxhciBmb3JtIG9mIHRoZSBtZXNzYWdlIHNwZWNpZmllZCBiYXNlZCBvbiBhbiBpbnRlZ2VyIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSB7c3RyaW5nfSBUaGUga2V5IG9mIHRoZSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSBjb3VudCB7aW50ZWdlcn0gVGhlIG51bWJlciBvZiBlbGVtZW50cy5cbiAgICAgKiBAcGFyYW0gcmVwbGFjZW1lbnRzIHtvYmplY3R9IFRoZSByZXBsYWNlbWVudHMgdG8gYmUgZG9uZSBpbiB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0aW9uIG1lc3NhZ2UgYWNjb3JkaW5nIHRvIGFuIGludGVnZXIgdmFsdWUuXG4gICAgICovXG4gICAgTGFuZy5wcm90b3R5cGUuY2hvaWNlID0gZnVuY3Rpb24oa2V5LCBjb3VudCwgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgIC8vIFNldCBkZWZhdWx0IHZhbHVlcyBmb3IgcGFyYW1ldGVycyByZXBsYWNlIGFuZCBsb2NhbGVcbiAgICAgICAgcmVwbGFjZW1lbnRzID0gdHlwZW9mIHJlcGxhY2VtZW50cyAhPT0gJ3VuZGVmaW5lZCcgPyByZXBsYWNlbWVudHMgOiB7fTtcblxuICAgICAgICAvLyBUaGUgY291bnQgbXVzdCBiZSByZXBsYWNlZCBpZiBmb3VuZCBpbiB0aGUgbWVzc2FnZVxuICAgICAgICByZXBsYWNlbWVudHNbJ2NvdW50J10gPSBjb3VudDtcblxuICAgICAgICAvLyBNZXNzYWdlIHRvIGdldCB0aGUgcGx1cmFsIG9yIHNpbmd1bGFyXG4gICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5nZXQoa2V5LCByZXBsYWNlbWVudHMpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIG1lc3NhZ2UgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGlmIChtZXNzYWdlID09PSBudWxsIHx8IG1lc3NhZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXBhcmF0ZSB0aGUgcGx1cmFsIGZyb20gdGhlIHNpbmd1bGFyLCBpZiBhbnlcbiAgICAgICAgdmFyIG1lc3NhZ2VQYXJ0cyA9IG1lc3NhZ2Uuc3BsaXQoJ3wnKTtcblxuICAgICAgICAvLyBHZXQgdGhlIGV4cGxpY2l0IHJ1bGVzLCBJZiBhbnlcbiAgICAgICAgdmFyIGV4cGxpY2l0UnVsZXMgPSBbXTtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL3tcXGQrfVxccyguKyl8XFxbXFxkKyxcXGQrXFxdXFxzKC4rKXxcXFtcXGQrLEluZlxcXVxccyguKykvO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtZXNzYWdlUGFydHNbaV0gPSBtZXNzYWdlUGFydHNbaV0udHJpbSgpO1xuXG4gICAgICAgICAgICBpZiAocmVnZXgudGVzdChtZXNzYWdlUGFydHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VTcGFjZVNwbGl0ID0gbWVzc2FnZVBhcnRzW2ldLnNwbGl0KC9cXHMvKTtcbiAgICAgICAgICAgICAgICBleHBsaWNpdFJ1bGVzLnB1c2gobWVzc2FnZVNwYWNlU3BsaXQuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVBhcnRzW2ldID0gbWVzc2FnZVNwYWNlU3BsaXQuam9pbignICcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBvbmx5IG9uZSBtZXNzYWdlXG4gICAgICAgIGlmIChtZXNzYWdlUGFydHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmVcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhlIGV4cGxpY2l0IHJ1bGVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwbGljaXRSdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rlc3RJbnRlcnZhbChjb3VudCwgZXhwbGljaXRSdWxlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZVBhcnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhbmRhcmQgcnVsZXNcbiAgICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZVBhcnRzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VQYXJ0c1sxXTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBhIG1lc3NhZ2Uga2V5IGludG8gY29tcG9uZW50cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkge3N0cmluZ30gVGhlIG1lc3NhZ2Uga2V5IHRvIHBhcnNlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBBIGtleSBvYmplY3Qgd2l0aCBzb3VyY2UgYW5kIGVudHJpZXMgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBMYW5nLnByb3RvdHlwZS5fcGFyc2VLZXkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWdtZW50cyA9IGtleS5zcGxpdCgnLicpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbm90ZSAgICBUaGlzIGlzIGRldGV0aW5nIGlmIHRoZSBrZXkgaXMgYW4gYWRkIG9uIGJ1dCB0byBiZSBob25lc3QsXG4gICAgICAgICAqICAgICAgICAgIHRoaXMgc2hvdWxkIGp1c3Qgd29yayB0aGUgc2FtZSBzaW5jZSB0aGUgaW5kZXhlcyBzdGF5cyB0aGVcbiAgICAgICAgICogICAgICAgICAgc2FtZSBhbGwgdGhyb3VnaG91dCB0aGUgdHJhbnNsYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgICBJJ20ganVzdCBub3Qgc3VyZSBpZiB0aGVyZSBhcmUgYW55IGVkZ2UgY2FzZXMgb2YgbmVzdGVkXG4gICAgICAgICAqICAgICAgICAgIHRyYW5zbGF0aW9ucyBhcmUgaW5jbHVkZWQgdGhvdWdoIEknbSBkb3VidGZ1bCB0aGVyZSBhcmUuXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgIEp1c3QgdG8gY2xhcmlmeSB0aG91Z2gsIHdlIF9jYW5fIGp1c3QgdXNlIHRoaXMgaWYgdGhlcmVcbiAgICAgICAgICogICAgICAgICAgYXJlbid0IGFueSBuZXN0ZWQgdHJhbnNsYXRpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGtleS5pbmNsdWRlcygnOjonKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHNlZ21lbnRzLnNwbGljZSgwLCBzZWdtZW50cy5sZW5ndGggLSAxKS5qb2luKCcuJyksXG4gICAgICAgICAgICAgICAgZW50cmllczogc2VnbWVudHMuc2xpY2Uoc2VnbWVudHMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBzZWdtZW50c1swXSxcbiAgICAgICAgICAgIGVudHJpZXM6IHNlZ21lbnRzLnNsaWNlKDEpXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB0cmFuc2xhdGlvbiBtZXNzYWdlLiBVc2UgYExhbmcuZ2V0KClgIG1ldGhvZCBpbnN0ZWFkLCB0aGlzIG1ldGhvZHMgYXNzdW1lcyB0aGUga2V5IGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkge3N0cmluZ30gVGhlIGtleSBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0aW9uIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBrZXkuXG4gICAgICovXG4gICAgTGFuZy5wcm90b3R5cGUuX2dldE1lc3NhZ2UgPSBmdW5jdGlvbihrZXkpIHtcblxuICAgICAgICBrZXkgPSB0aGlzLl9wYXJzZUtleShrZXkpO1xuXG4gICAgICAgIC8vIEVuc3VyZSBtZXNzYWdlIHNvdXJjZSBleGlzdHMuXG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2VzW2tleS5zb3VyY2VdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IG1lc3NhZ2UgdGV4dC5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzW2tleS5zb3VyY2VdO1xuICAgICAgICB3aGlsZSAoa2V5LmVudHJpZXMubGVuZ3RoICYmIChtZXNzYWdlID0gbWVzc2FnZVtrZXkuZW50cmllcy5zaGlmdCgpXSkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHJlcGxhY2VtZW50cyB0byBhIHN0cmluZyBtZXNzYWdlIGNvbnRhaW5pbmcgcGxhY2Vob2xkZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2Uge3N0cmluZ30gVGhlIHRleHQgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gcmVwbGFjZW1lbnRzIHtvYmplY3R9IFRoZSByZXBsYWNlbWVudHMgdG8gYmUgZG9uZSBpbiB0aGUgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyBtZXNzYWdlIHdpdGggcmVwbGFjZW1lbnRzIGFwcGxpZWQuXG4gICAgICovXG4gICAgTGFuZy5wcm90b3R5cGUuX2FwcGx5UmVwbGFjZW1lbnRzID0gZnVuY3Rpb24obWVzc2FnZSwgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgIGZvciAodmFyIHJlcGxhY2UgaW4gcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5zcGxpdCgnOicgKyByZXBsYWNlKS5qb2luKHJlcGxhY2VtZW50c1tyZXBsYWNlXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYGNvdW50YCBpcyB3aXRoaW4gdGhlIGludGVydmFsIGRlZmluZWQgYnkgdGhlIHtzdHJpbmd9IGBpbnRlcnZhbGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSAgY291bnQge2ludH0gIFRoZSBhbW91bnQgb2YgaXRlbXMuXG4gICAgICogQHBhcmFtICBpbnRlcnZhbCB7c3RyaW5nfSAgICBUaGUgaW50ZXJ2YWwgdG8gYmUgY29tcGFyZWQgd2l0aCB0aGUgY291bnQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gICAgUmV0dXJucyB0cnVlIGlmIGNvdW50IGlzIHdpdGhpbiBpbnRlcnZhbDsgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIExhbmcucHJvdG90eXBlLl90ZXN0SW50ZXJ2YWwgPSBmdW5jdGlvbihjb3VudCwgaW50ZXJ2YWwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZyb20gdGhlIFN5bWZvbnlcXENvbXBvbmVudFxcVHJhbnNsYXRpb25cXEludGVydmFsIERvY3NcbiAgICAgICAgICpcbiAgICAgICAgICogVGVzdHMgaWYgYSBnaXZlbiBudW1iZXIgYmVsb25ncyB0byBhIGdpdmVuIG1hdGggaW50ZXJ2YWwuXG4gICAgICAgICAqIEFuIGludGVydmFsIGNhbiByZXByZXNlbnQgYSBmaW5pdGUgc2V0IG9mIG51bWJlcnM6IHsxLDIsMyw0fVxuICAgICAgICAgKiBBbiBpbnRlcnZhbCBjYW4gcmVwcmVzZW50IG51bWJlcnMgYmV0d2VlbiB0d28gbnVtYmVyczogWzEsICtJbmZdIF0tMSwyW1xuICAgICAgICAgKiBUaGUgbGVmdCBkZWxpbWl0ZXIgY2FuIGJlIFsgKGluY2x1c2l2ZSkgb3IgXSAoZXhjbHVzaXZlKS5cbiAgICAgICAgICogVGhlIHJpZ2h0IGRlbGltaXRlciBjYW4gYmUgWyAoZXhjbHVzaXZlKSBvciBdIChpbmNsdXNpdmUpLlxuICAgICAgICAgKiBCZXNpZGUgbnVtYmVycywgeW91IGNhbiB1c2UgLUluZiBhbmQgK0luZiBmb3IgdGhlIGluZmluaXRlLlxuICAgICAgICAgKi9cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGV4cG9ydCBkZWZhdWx0IG5ldyBMYW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9sMTBuL2xhbmcuanMiLCIvLyBCcmluZyBpbiB0aGUgTGFuZyBsaWJyYXJ5XG5pbXBvcnQgTGFuZyBmcm9tICcuL2xhbmcnO1xuXG53aW5kb3cudHJhbnNsYXRlID0gZnVuY3Rpb24oa2V5LCByZXBsYWNlbWVudHMpIHtcbiAgICB2YXIgbWVzc2FnZSA9IExhbmcuZ2V0KGtleSwgcmVwbGFjZW1lbnRzKTtcblxuICAgIGlmIChtZXNzYWdlID09PSBrZXkpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VUaXRsZShtZXNzYWdlLnJlcGxhY2UoJ2NwLicsICcnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuXG53aW5kb3cudHJhbnNsYXRlX2Nob2ljZSA9IGZ1bmN0aW9uKGtleSwgY291bnQsIHJlcGxhY2VtZW50cykge1xuICAgIHJldHVybiBMYW5nLmNob2ljZShrZXksIGNvdW50LCByZXBsYWNlbWVudHMpO1xufTtcblxuLy8gU2V0IHRoZSB0cmFuc2xhdGlvbiBtZXNzYWdlcy4gVGhlIG9iamVjdCB3aWxsIGJlIGluIHRoZSBwYWdlIGJvZHkuXG5MYW5nLnNldE1lc3NhZ2VzKFN0YXRhbWljLnRyYW5zbGF0aW9ucyk7XG5cbmZ1bmN0aW9uIG1ha2VUaXRsZShzbHVnKSB7XG4gICAgdmFyIHdvcmRzID0gc2x1Zy5zcGxpdCgvWy1fXS8pO1xuXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgd29yZHNbaV0gPSB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd29yZHMuam9pbignICcpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9sMTBuL2wxMG4uanMiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBpbnN0YWxsKFZ1ZSwgb3B0aW9ucykge1xuXG4gICAgICAgIFZ1ZS5wcm90b3R5cGUuY3BfdXJsID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gY3BfdXJsKHVybCk7XG4gICAgICAgIH07XG5cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL3BsdWdpbnMvY3BfdXJsLmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgaW5zdGFsbChWdWUsIG9wdGlvbnMpIHtcblxuICAgICAgICBWdWUucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKGtleSwgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlKGtleSwgcmVwbGFjZW1lbnRzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBWdWUucHJvdG90eXBlLnRyYW5zbGF0ZV9jaG9pY2UgPSBmdW5jdGlvbihrZXksIGNvdW50LCByZXBsYWNlbWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVfY2hvaWNlKGtleSwgY291bnQsIHJlcGxhY2VtZW50cyk7XG4gICAgICAgIH07XG5cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL3BsdWdpbnMvdHJhbnNsYXRlLmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgaW5zdGFsbChWdWUsIG9wdGlvbnMpIHtcblxuICAgICAgICBWdWUucHJvdG90eXBlLnJlc291cmNlX3VybCA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlX3VybCh1cmwpO1xuICAgICAgICB9O1xuXG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9wbHVnaW5zL3Jlc291cmNlX3VybC5qcyIsImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGluc3RhbGwoVnVlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgVnVlLnByb3RvdHlwZS5maWxlX2ljb24gPSBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlX2ljb24odXJsKTtcbiAgICAgICAgfTtcblxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvcGx1Z2lucy9maWxlX2ljb24uanMiLCJpbXBvcnQgeyBzbHVnaWZ5IH0gZnJvbSAndHJhbnNsaXRlcmF0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGluc3RhbGwoVnVlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgVnVlLnByb3RvdHlwZS4kc2x1Z2lmeSA9IGZ1bmN0aW9uKHRleHQsIGdsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzbHVnaWZ5KHRleHQsIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3I6IGdsdWUgfHwgJy0nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvcGx1Z2lucy9zbHVnaWZ5LmpzIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgQ3BVcmwgZnJvbSAnLi4vcGx1Z2lucy9jcF91cmwnO1xuaW1wb3J0IFRyYW5zbGF0ZSBmcm9tICcuLi9wbHVnaW5zL3RyYW5zbGF0ZSc7XG5pbXBvcnQgUmVzb3VyY2VVcmwgZnJvbSAnLi4vcGx1Z2lucy9yZXNvdXJjZV91cmwnO1xuaW1wb3J0IEZpbGVJY29uIGZyb20gJy4uL3BsdWdpbnMvZmlsZV9pY29uJztcbmltcG9ydCBDYW4gZnJvbSAnLi4vcGx1Z2lucy9jYW4nO1xuaW1wb3J0IFNsdWdpZnkgZnJvbSAnLi4vcGx1Z2lucy9zbHVnaWZ5JztcblxuVnVlLnVzZShDcFVybCk7XG5WdWUudXNlKFRyYW5zbGF0ZSk7XG5WdWUudXNlKFJlc291cmNlVXJsKTtcblZ1ZS51c2UoRmlsZUljb24pO1xuVnVlLnVzZShDYW4pO1xuVnVlLnVzZShTbHVnaWZ5KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL3BsdWdpbnMuanMiLCJpZiAoU3RhdGFtaWMucGVybWlzc2lvbnMpIHtcbiAgICB2YXIgcGVybWlzc2lvbnMgPSBKU09OLnBhcnNlKGF0b2IoU3RhdGFtaWMucGVybWlzc2lvbnMpKTtcbn1cblxudmFyIGNhbiA9IGZ1bmN0aW9uKHBlcm1pc3Npb24pIHtcbiAgICBpZiAoXy5jb250YWlucyhwZXJtaXNzaW9ucywgJ3N1cGVyJykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNvbG9ucyA9IHBlcm1pc3Npb24uc3BsaXQoJzonKS5sZW5ndGggLSAxO1xuXG4gICAgaWYgKGNvbG9ucyA9PT0gMikge1xuICAgICAgICB2YXIgcGFydHMgPSBwZXJtaXNzaW9uLnNwbGl0KCc6Jyk7XG4gICAgICAgIHZhciBjYXNjYWRlID0gcGFydHNbMF0gKyAnOic7XG4gICAgICAgIGlmIChwYXJ0c1syXSA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgIGNhc2NhZGUgKz0gJ2RlbGV0ZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYXNjYWRlICs9ICdtYW5hZ2UnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uY29udGFpbnMocGVybWlzc2lvbnMsIGNhc2NhZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfLmNvbnRhaW5zKHBlcm1pc3Npb25zLCBwZXJtaXNzaW9uKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGluc3RhbGwoVnVlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgVnVlLnByb3RvdHlwZS5jYW4gPSBmdW5jdGlvbihwZXJtaXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FuKHBlcm1pc3Npb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIFZ1ZS5jYW4gPSBmdW5jdGlvbihwZXJtaXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FuKHBlcm1pc3Npb24pO1xuICAgICAgICB9O1xuXG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9wbHVnaW5zL2Nhbi5qcyIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuVnVlLmZpbHRlcignZGVzbHVnaWZ5JywgcmVxdWlyZSgnLi4vZmlsdGVycy9kZXNsdWdpZnknKSk7XG5WdWUuZmlsdGVyKCd0aXRsZWl6ZScsIHJlcXVpcmUoJy4uL2ZpbHRlcnMvdGl0bGVpemUnKSk7XG5WdWUuZmlsdGVyKCdwcmUnLCByZXF1aXJlKCcuLi9maWx0ZXJzL3ByZScpKTtcblZ1ZS5maWx0ZXIoJ3JldmVyc2UnLCByZXF1aXJlKCcuLi9maWx0ZXJzL3JldmVyc2UnKSk7XG5WdWUuZmlsdGVyKCdwbHVjaycsIHJlcXVpcmUoJy4uL2ZpbHRlcnMvcGx1Y2snKSk7XG5WdWUuZmlsdGVyKCdwYXJzZScsIHJlcXVpcmUoJy4uL2ZpbHRlcnMvcGFyc2UnKSk7XG5WdWUuZmlsdGVyKCdvcHRpb25pemUnLCByZXF1aXJlKCcuLi9maWx0ZXJzL29wdGlvbml6ZScpKTtcblZ1ZS5maWx0ZXIoJ21hcmtkb3duJywgcmVxdWlyZSgnLi4vZmlsdGVycy9tYXJrZG93bicpKTtcblZ1ZS5maWx0ZXIoJ2Nhc2VJbnNlbnNpdGl2ZU9yZGVyQnknLCByZXF1aXJlKCcuLi9maWx0ZXJzL29yZGVyYnknKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC9maWx0ZXJzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZSgvWy1fXS9nLCBcIiBcIilcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvZGVzbHVnaWZ5LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmKCF2YWx1ZS5zcGxpdCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgdmFyIF90aXRsZWl6ZVdvcmQgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgcmVzdWx0ID0gW107XG5cbiAgICB2YWx1ZS5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbih3KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKF90aXRsZWl6ZVdvcmQodykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiIFwiKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvdGl0bGVpemUuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICc8cHJlPjxjb2RlPicrSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIDIpKyc8L2NvZGU+PC9wcmU+Jztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvcHJlLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwpIHtcblx0cmV0dXJuIHZhbC5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvcmV2ZXJzZS5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUsIHBsdWNrZWQpIHtcblx0cmV0dXJuIHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG5cdCAgICByZXR1cm4gaXRlbVtwbHVja2VkXTtcblx0fSk7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvZmlsdGVycy9wbHVjay5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcblx0cmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvcGFyc2UuanMiLCIvLyBGb3JtYXQgb3B0aW9uIGxpc3RzIGNvcnJlY3RseSwgc3VwcG9ydGluZyBib3RoIHByaW1pdGl2ZSBhbmQgY29tcGxleCBvYmplY3RzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcblx0b3B0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcblxuXHRyZXR1cm4gZm9ybWF0X2lucHV0X29wdGlvbnMob3B0aW9ucyk7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvZmlsdGVycy9vcHRpb25pemUuanMiLCJ2YXIgbWFya2VkID0gcmVxdWlyZSgnbWFya2VkJyk7XG5cbm1hcmtlZC5zZXRPcHRpb25zKHtcbiAgICBnZm06IHRydWUsXG4gICAgYnJlYWtzOiBTdGF0YW1pYy5tYXJrZG93bkhhcmRXcmFwLFxuICAgIHRhYmxlczogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gbWFya2VkKHZhbHVlKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2ZpbHRlcnMvbWFya2Rvd24uanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcnIsIHNvcnRLZXksIHJldmVyc2UpIHtcbiAgaWYgKCFzb3J0S2V5KSB7XG4gICAgcmV0dXJuIGFyclxuICB9XG4gIHZhciBvcmRlciA9IChyZXZlcnNlICYmIHJldmVyc2UgPCAwKSA/IC0xIDogMVxuICAvLyBzb3J0IG9uIGEgY29weSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBhcnJheVxuICByZXR1cm4gYXJyLnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChzb3J0S2V5ICE9PSAnJGtleScpIHtcbiAgICAgIGlmIChWdWUudXRpbC5pc09iamVjdChhKSAmJiAnJHZhbHVlJyBpbiBhKSBhID0gYS4kdmFsdWVcbiAgICAgIGlmIChWdWUudXRpbC5pc09iamVjdChiKSAmJiAnJHZhbHVlJyBpbiBiKSBiID0gYi4kdmFsdWVcbiAgICB9XG4gICAgYSA9IFZ1ZS51dGlsLmlzT2JqZWN0KGEpID8gVnVlLnBhcnNlcnMucGF0aC5nZXRQYXRoKGEsIHNvcnRLZXkpIDogYVxuICAgIGIgPSBWdWUudXRpbC5pc09iamVjdChiKSA/IFZ1ZS5wYXJzZXJzLnBhdGguZ2V0UGF0aChiLCBzb3J0S2V5KSA6IGJcblxuICAgIGEgPSAodHlwZW9mIGEgPT09ICdzdHJpbmcnKSA/IGEudG9Mb3dlckNhc2UoKSA6IGFcbiAgICBiID0gKHR5cGVvZiBiID09PSAnc3RyaW5nJykgPyBiLnRvTG93ZXJDYXNlKCkgOiBiXG5cbiAgICByZXR1cm4gYSA9PT0gYiA/IDAgOiBhID4gYiA/IG9yZGVyIDogLW9yZGVyXG4gIH0pXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9maWx0ZXJzL29yZGVyYnkuanMiLCIvLyBNaXhpbnNcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IERvc3NpZXIgZnJvbSAnLi4vY29tcG9uZW50cy9kb3NzaWVyL0Rvc3NpZXIudnVlJ1xuaW1wb3J0IEZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRmllbGR0eXBlLmpzJ1xuaW1wb3J0IEF1dG9TbHVnIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BdXRvU2x1Zy5qcydcblxud2luZG93LkRvc3NpZXIgPSBEb3NzaWVyO1xud2luZG93LkZpZWxkdHlwZSA9IEZpZWxkdHlwZTtcbndpbmRvdy5BdXRvU2x1ZyA9IEF1dG9TbHVnO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvbWl4aW5zLmpzIiwiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZGF0YToge30sXG4gICAgICAgIGNvbmZpZzoge30sXG4gICAgICAgIG5hbWU6IHt9LFxuICAgICAgICBsZWF2ZUFsZXJ0OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdXRvQmluZENoYW5nZVdhdGNoZXI6IHRydWUsXG4gICAgICAgICAgICBjaGFuZ2VXYXRjaGVySXNCb3VuZDogZmFsc2UsXG4gICAgICAgICAgICBjaGFuZ2VXYXRjaGVyV2F0Y2hEZWVwOiB0cnVlXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyBuZXN0ZWQgc29tZXdoZXJlIGluc2lkZSBhIEdyaWQgZmllbGR0eXBlLlxuICAgICAgICAgKi9cbiAgICAgICAgaXNJbnNpZGVHcmlkRmllbGQoKSB7XG4gICAgICAgICAgICBsZXQgdm0gPSB0aGlzO1xuXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSB2bS4kcGFyZW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKCEgcGFyZW50KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdHcmlkRmllbGR0eXBlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2bSA9IHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICBpZiAodGhpcy5hdXRvQmluZENoYW5nZVdhdGNoZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZENoYW5nZVdhdGNoZXIoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgYmluZENoYW5nZVdhdGNoZXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMubGVhdmVBbGVydCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbmdlV2F0Y2hlcklzQm91bmQpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ2RhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2NoYW5nZXNNYWRlJywgdHJ1ZSk7XG4gICAgICAgICAgICB9LCB7IGRlZXA6IHRoaXMuY2hhbmdlV2F0Y2hlcldhdGNoRGVlcCB9KTtcblxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VXYXRjaGVySXNCb3VuZCA9IHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICAgICAgfSxcblxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0ZpZWxkdHlwZS5qcyIsImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdXRvU2x1Z09wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGF1dG9TbHVnUHVibGlzaEZpZWxkc0NvbXBvbmVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQuJHBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBhdXRvU2x1Zyhmcm9tLCB0bykge1xuICAgICAgICAgICAgLy8gVGhlIHNlY29uZCBhcmd1bWVudCBpbmRpY2F0ZXMgdGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlIHZhcmlhYmxlIHdlIHNob3VsZFxuICAgICAgICAgICAgLy8gYmUgdXBkYXRpbmcuIElmIGxlZnQgYmxhbmssIHdlJ2xsIGFzc3VtZSBpdCdzIHRoZSBmaWVsZCdzIGRhdGEgdmFyaWFibGUuXG4gICAgICAgICAgICB0byA9IHRvIHx8ICdkYXRhJztcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYWxyZWFkeSBkYXRhLCB3ZSBhc3N1bWUgdGhlcmUncyBhbHJlYWR5IGEgc2x1Zy5cbiAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZSBhbnl0aGluZy5cbiAgICAgICAgICAgIGlmICh0aGlzW3RvXSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBXaGVuZXZlciB0aGUgXCJ0b1wiIGZpZWxkIGlzIG1vZGlmaWVkLiBpZSwgd2hlbiB0aGUgc2x1ZyBmaWVsZCBpcyBlZGl0ZWQuLi5cbiAgICAgICAgICAgIHRoaXMuJHdhdGNoKHRvLCAoc2x1ZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyb21WYWwgPSB0aGlzLmF1dG9TbHVnUHVibGlzaEZpZWxkc0NvbXBvbmVudC5kYXRhW2Zyb21dIHx8ICcnO1xuICAgICAgICAgICAgICAgIC8vIE1hcmsgaXQgbW9kaWZpZWQgaWYgdGhlIHNsdWcgbWF0Y2hlcyB0aGUgc2x1Z2lmaWVkIHZlcnNpb24uIFRoaXMgYWxsb3dzXG4gICAgICAgICAgICAgICAgLy8gdGhlIGF1dG9tYXRpYyBzbHVnaWZpY2F0aW9uIHRvIHJlY29tbWVuY2UgaWYgdGhlIHNsdWcgaXMgbW9kaWZpZWQgdG9cbiAgICAgICAgICAgICAgICB0aGlzLmF1dG9TbHVnT3B0aW9ucy5pc0FjdGl2ZSA9IHNsdWcgPT09IHRoaXMuJHNsdWdpZnkoZnJvbVZhbCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gV2hlbmV2ZXIgdGhlIFwiZnJvbVwiIGZpZWxkIGlzIG1vZGlmaWVkLiBpZSwgd2hlbiB0aGUgd2F0Y2hlZCBmaWVsZCBpcyBlZGl0ZWQuLi5cbiAgICAgICAgICAgIHRoaXMuYXV0b1NsdWdQdWJsaXNoRmllbGRzQ29tcG9uZW50LiR3YXRjaChgZGF0YS4ke2Zyb219YCwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmF1dG9TbHVnT3B0aW9ucy5pc0FjdGl2ZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXNbdG9dID0gdGhpcy4kc2x1Z2lmeSh2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvQXV0b1NsdWcuanMiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Eb3NzaWVyLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZG9zc2llci9Eb3NzaWVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjxzY3JpcHQ+XG5pbXBvcnQgRG9zc2llclRhYmxlIGZyb20gJy4vRG9zc2llclRhYmxlLnZ1ZSdcbmltcG9ydCBQYWdpbmF0ZXMgZnJvbSAnLi4vUGFnaW5hdGVzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtQYWdpbmF0ZXNdLFxuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgIGNvbHVtbnM6IFtdLFxuICAgICAgICAgICAgc29ydDogbnVsbCxcbiAgICAgICAgICAgIHNvcnRPcmRlcjogbnVsbCxcbiAgICAgICAgICAgIHJlb3JkZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgc2VhcmNoVGVybTogbnVsbFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGhhc0l0ZW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5sb2FkaW5nICYmIHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbm9JdGVtczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMubG9hZGluZyAmJiB0aGlzLml0ZW1zICYmICF0aGlzLml0ZW1zLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja2VkSXRlbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jaGVja2VkO1xuICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFsbEl0ZW1zQ2hlY2tlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGggPT09IHRoaXMuY2hlY2tlZEl0ZW1zLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1NlYXJjaGluZygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlYXJjaFRlcm0ubGVuZ3RoID49IDM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UGFyYW1ldGVycygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc29ydDogdGhpcy5zb3J0LFxuICAgICAgICAgICAgICAgIG9yZGVyOiB0aGlzLnNvcnRPcmRlcixcbiAgICAgICAgICAgICAgICBwYWdlOiB0aGlzLnNlbGVjdGVkUGFnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZ2V0SXRlbXMoKTtcbiAgICB9LFxuXG4gICAgd2F0Y2g6IHtcblxuICAgICAgICBzZWFyY2hUZXJtKHRlcm0pIHtcbiAgICAgICAgICAgIGlmICh0ZXJtLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJmb3JtU2VhcmNoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0SXRlbXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ2Rvc3NpZXItdGFibGUnOiBEb3NzaWVyVGFibGVcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBnZXRJdGVtczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQodGhpcy5hamF4LmdldCwgdGhpcy5nZXRQYXJhbWV0ZXJzLCBmdW5jdGlvbihkYXRhLCBzdGF0dXMsIHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gZGF0YS5pdGVtcztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLnBhcnNlQ29sdW1ucyhkYXRhLmNvbHVtbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IGRhdGEucGFnaW5hdGlvbjtcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG5vdGlmeS5lcnJvcih0cmFuc2xhdGUoJ2NwLmVycm9yX2ZldGNoaW5nX2RhdGEnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBwZXJmb3JtU2VhcmNoKCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQodGhpcy5hamF4LnNlYXJjaCArICc/cT0nICsgdGhpcy5zZWFyY2hUZXJtLCBmdW5jdGlvbihkYXRhLCBzdGF0dXMsIHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG5vdGlmeS5lcnJvcih0cmFuc2xhdGUoJ2NwLmVycm9yX2ZldGNoaW5nX2RhdGEnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzb3J0Qnkoc29ydCwgb3JkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc29ydCA9IHNvcnQ7XG4gICAgICAgICAgICB0aGlzLnNvcnRPcmRlciA9IG9yZGVyO1xuICAgICAgICAgICAgdGhpcy5nZXRJdGVtcygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUl0ZW1Gcm9tTGlzdDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gXy5maW5kV2hlcmUodGhpcy5pdGVtcywge2lkOiBpZH0pO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gXy5pbmRleE9mKHRoaXMuaXRlbXMsIGl0ZW0pO1xuICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZU11bHRpcGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogdHJhbnNsYXRlKCdjcC5hcmVfeW91X3N1cmUnKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGVfY2hvaWNlKCdjcC5jb25maXJtX2RlbGV0ZV9pdGVtcycsIDIpLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0cmFuc2xhdGUoJ2NwLnllc19pbV9zdXJlJyksXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZWxmLiRodHRwLmRlbGV0ZShzZWxmLmFqYXguZGVsZXRlLCB7aWRzOiBzZWxmLmNoZWNrZWRJdGVtc30sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaChzZWxmLmNoZWNrZWRJdGVtcywgZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZUl0ZW1Gcm9tTGlzdChpZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cblxuICAgICAgICBkZWxldGVJdGVtOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbmZpcm1fZGVsZXRlX2l0ZW1zJywgMSksXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IHRyYW5zbGF0ZSgnY3AueWVzX2ltX3N1cmUnKSxcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiB0cmFuc2xhdGUoJ2NwLmNhbmNlbCcpLFxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWVcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuJGh0dHAuZGVsZXRlKHNlbGYuYWpheC5kZWxldGUsIHtpZHM6IFtpZF19LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZUl0ZW1Gcm9tTGlzdChpZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBlbmFibGVSZW9yZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucmVvcmRlcmluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRicm9hZGNhc3QoJ3Jlb3JkZXJpbmcuc3RhcnQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5jZWxPcmRlcigpIHtcbiAgICAgICAgICAgIHRoaXMucmVvcmRlcmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCdyZW9yZGVyaW5nLnN0b3AnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzYXZlT3JkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFyIG9yZGVyID0gXy5tYXAodGhpcy5pdGVtcywgZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QodGhpcy5hamF4LnJlb3JkZXIsIHtpZHM6IG9yZGVyfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCdyZW9yZGVyaW5nLnNhdmVkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdldEl0ZW1zKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW9yZGVyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZUNvbHVtbnMoY29sdW1ucykge1xuICAgICAgICAgICAgLy8gSWYgYSBsaW5rIGNvbHVtbiBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IGRlZmluZWQsIHdlJ2xsIG1ha2UgdGhlIGZpcnN0IGNvbHVtbiB0aGUgbGluay5cbiAgICAgICAgICAgIGNvbnN0IGxpbmtDb2x1bW5VbmRlZmluZWQgPSBfLmZpbmRXaGVyZShjb2x1bW5zLCB7IGxpbms6IHRydWUgfSkgPT09IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4sIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbHVtbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uID0geyB2YWx1ZTogY29sdW1uIH07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgdGV4dCBpc24ndCBwcm92aWRlZCwgaXQgc2hvdWxkIGZhbGwgYmFjayB0byB0aGUgZmllbGRcbiAgICAgICAgICAgICAgICAvLyBuYW1lLiBJZiB1c2luZyBhIGRvdC1ub3RhdGVkIGZpZWxkIGZvciByZWxhdGlvbnNoaXBzLCB3ZSdsbCB1c2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgZmlyc3QgcGFydCwgd2hpY2ggaXMgdGhlIGZpZWxkIG5hbWUgaW4gdGhlIHBhcmVudCBpdGVtLlxuICAgICAgICAgICAgICAgIGxldCBoZWFkZXJGYWxsYmFjayA9IGNvbHVtbi52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLnZhbHVlLmluY2x1ZGVzKCcuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyRmFsbGJhY2sgPSBjb2x1bW4udmFsdWUuc3BsaXQoJy4nKVswXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY29sdW1uLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHRyYW5zbGF0ZShgY3AuJHtjb2x1bW4uaGVhZGVyIHx8IGhlYWRlckZhbGxiYWNrfWApLFxuICAgICAgICAgICAgICAgICAgICBleHRyYTogY29sdW1uLmV4dHJhLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY29sdW1uLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBsaW5rOiBjb2x1bW4ubGluayB8fCAobGlua0NvbHVtblVuZGVmaW5lZCAmJiBpID09IDApXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRG9zc2llci52dWU/MDJiMWI1NDgiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Eb3NzaWVyVGFibGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Eb3NzaWVyVGFibGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9kb3NzaWVyL0Rvc3NpZXJUYWJsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDIzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImRvc3NpZXItdGFibGUtd3JhcHBlclwiPlxuICAgICAgICA8dGFibGUgOmNsYXNzPVwiWydkb3NzaWVyJywgeyAnaGFzLWNoZWNrYm94ZXMnOiBoYXNDaGVja2JveGVzIH1dXCI+XG4gICAgICAgICAgICA8dGhlYWQgdi1pZj1cImhhc0hlYWRlcnNcIj5cbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cImNoZWNrYm94LWNvbFwiIHYtaWY9XCJoYXNDaGVja2JveGVzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJjaGVja2JveC1hbGxcIiA6Y2hlY2tlZD1cImFsbEl0ZW1zQ2hlY2tlZFwiIEBjbGljaz1cImNoZWNrQWxsSXRlbXNcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNoZWNrYm94LWFsbFwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XG5cbiAgICAgICAgICAgICAgICAgICAgPHRoIHYtZm9yPVwiY29sdW1uIGluIGNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic29ydEJ5KGNvbHVtbilcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwiWydjb2x1bW4tJyArIGNvbHVtbi52YWx1ZSwgeydhY3RpdmUnOiBpc0NvbHVtbkFjdGl2ZShjb2x1bW4pLCAnY29sdW1uLXNvcnRhYmxlJzogIWlzU2VhcmNoaW5nLCAnZXh0cmEtY29sJzogY29sdW1uLmV4dHJhfSBdXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT1cInsgd2lkdGg6IHRhYmxlQ29sV2lkdGgoY29sdW1uLndpZHRoKSB9XCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgY29sdW1uLmhlYWRlciB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgdi1pZj1cImlzQ29sdW1uQWN0aXZlKGNvbHVtbilcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpY29uIGljb24tY2hldnJvbi17eyBzb3J0T3JkZXIgPT09ICdhc2MnID8gJ3VwJyA6ICdkb3duJyB9fVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPC90aD5cblxuICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJjb2x1bW4tYWN0aW9uc1wiIHYtaWY9XCJoYXNBY3Rpb25zXCI+PC90aD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keSB2LWVsOnRib2R5PlxuICAgICAgICAgICAgICAgIDx0ciB2LWZvcj1cIml0ZW0gaW4gaXRlbXNcIj5cblxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJjaGVja2JveC1jb2xcIiB2LWlmPVwiaGFzQ2hlY2tib3hlcyAmJiAhcmVvcmRlcmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIDppZD1cIidjaGVja2JveC0nICsgJGluZGV4XCIgOmNoZWNrZWQ9XCJpdGVtLmNoZWNrZWRcIiBAY2hhbmdlPVwidG9nZ2xlKGl0ZW0pXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVwiJ2NoZWNrYm94LScgKyAkaW5kZXhcIj48L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNoZWNrYm94LWNvbFwiIHYtaWY9XCJyZW9yZGVyaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJhZy1oYW5kbGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1tZW51XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG5cbiAgICAgICAgICAgICAgICAgICAgPHRkIHYtZm9yPVwiKGksIGNvbHVtbikgaW4gY29sdW1uc1wiIDpjbGFzcz1cIltcbiAgICAgICAgICAgICAgICAgICAgICAgIGBjZWxsLSR7Y29sdW1uLnZhbHVlfWAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXh0cmEtY29sJzogY29sdW1uLmV4dHJhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbXB0eS1jb2wnOiAhaXRlbVtjb2x1bW4udmFsdWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaXJzdC1jZWxsJzogaSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICAgICAgXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbHVtbi1sYWJlbFwiPnt7IGNvbHVtbi5oZWFkZXIgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cGFydGlhbCBuYW1lPVwiY2VsbFwiPjwvcGFydGlhbD5cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cblxuICAgICAgICAgICAgICAgICAgICA8IS0tIGFjdGlvbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNvbHVtbi1hY3Rpb25zXCIgdi1pZj1cImhhc0FjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgYWN0aW9uLW1vcmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tZG90cy10aHJlZS12ZXJ0aWNhbFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXJ0aWFsIG5hbWU9XCJhY3Rpb25zXCI+PC9wYXJ0aWFsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cblxuICAgICAgICA8ZGl2IHYtaWY9XCJzaG93QnVsa0FjdGlvbnNcIiA6Y2xhc3M9XCJ7ICdidWxrLWFjdGlvbnMnOiB0cnVlLCAnbm8tY2hlY2tib3hlcyc6ICFoYXNDaGVja2JveGVzIH1cIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGFjdGlvblwiIEBjbGljaz1cInVuY2hlY2tBbGxJdGVtc1wiPlxuICAgICAgICAgICAgICAgIHt7IHRyYW5zbGF0ZSgnY3AudW5jaGVja19hbGwnKSB9fVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVsZXRlIGFjdGlvblwiIEBjbGljay5wcmV2ZW50PVwiY2FsbCgnZGVsZXRlTXVsdGlwbGUnLCAnZm9vJywgJ2JhcicpXCI+XG4gICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fSB7eyBjaGVja2VkSXRlbXMubGVuZ3RoIH19IHt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLml0ZW1zJywgY2hlY2tlZEl0ZW1zLmxlbmd0aCl9fVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxwYWdpbmF0aW9uXG4gICAgICAgICAgICB2LWlmPVwiIWlzU2VhcmNoaW5nICYmIHBhZ2luYXRpb24udG90YWxQYWdlcyA+IDFcIlxuICAgICAgICAgICAgOnRvdGFsPVwicGFnaW5hdGlvbi50b3RhbFBhZ2VzXCJcbiAgICAgICAgICAgIDpjdXJyZW50PVwicGFnaW5hdGlvbi5jdXJyZW50UGFnZVwiXG4gICAgICAgICAgICA6c2VnbWVudHM9XCJwYWdpbmF0aW9uLnNlZ21lbnRzXCJcbiAgICAgICAgICAgIEBzZWxlY3RlZD1cInBhZ2luYXRpb25QYWdlU2VsZWN0ZWRcIj5cbiAgICAgICAgPC9wYWdpbmF0aW9uPlxuXG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnb3B0aW9ucycsICdpdGVtcycsICdpc1NlYXJjaGluZyddLFxuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sdW1uczogdGhpcy4kcGFyZW50LmNvbHVtbnMsXG4gICAgICAgICAgICByZW9yZGVyaW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHBhcnRpYWxzOiB7XG4gICAgICAgIC8vIFRoZSBkZWZhdWx0IGNlbGwgbWFya3VwIHdpbGwgYmUgYSBsaW5rIHRvIHRoZSBlZGl0X3VybCB3aXRoIGEgc3RhdHVzIHN5bWJvbFxuICAgICAgICAvLyBpZiBpdCdzIHRoZSBmaXJzdCBjZWxsLiBSZW1haW5pbmcgY2VsbHMganVzdCBnZXQgdGhlIGxhYmVsLlxuICAgICAgICBjZWxsOiBgXG4gICAgICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7ICdoYXMtc3RhdHVzLWljb24nOiAkaW5kZXggPT09IDAgfVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCIkaW5kZXggPT09IDBcIiBjbGFzcz1cInN0YXR1cyBzdGF0dXMte3sgKGl0ZW0ucHVibGlzaGVkKSA/ICdsaXZlJyA6ICdoaWRkZW4nIH19XCJcbiAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCIoaXRlbS5wdWJsaXNoZWQpID8gdHJhbnNsYXRlKCdjcC5wdWJsaXNoZWQnKSA6IHRyYW5zbGF0ZSgnY3AuZHJhZnQnKVwiXG4gICAgICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8YSB2LWlmPVwiY29sdW1uLmxpbmtcIiA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIiBjbGFzcz1cImhhcy1zdGF0dXMtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICB7e3sgZm9ybWF0VmFsdWUoaXRlbVtjb2x1bW4udmFsdWVdKSB9fX1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgICAge3t7IGZvcm1hdFZhbHVlKGl0ZW1bY29sdW1uLnZhbHVlXSkgfX19XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgYFxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNDaGVja2JveGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNoZWNrYm94ZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBpdGVtc0FyZUNoZWNrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tlZEl0ZW1zLmxlbmd0aCA+IDA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzSGVhZGVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzQWN0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wYXJ0aWFscy5hY3Rpb25zICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAmJiB0aGlzLm9wdGlvbnMucGFydGlhbHMuYWN0aW9ucyAhPT0gJyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0J1bGtBY3Rpb25zKCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmhhc0l0ZW1zICYmIHRoaXMuaGFzQ2hlY2tib3hlcyAmJiB0aGlzLml0ZW1zQXJlQ2hlY2tlZCAmJiAhIHRoaXMucmVvcmRlcmluZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzSXRlbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQuaGFzSXRlbXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVvcmRlcmFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVvcmRlcmFibGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hlY2tlZEl0ZW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY2hlY2tlZDtcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxJdGVtc0NoZWNrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoID09PSB0aGlzLmNoZWNrZWRJdGVtcy5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFnaW5hdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQucGFnaW5hdGlvbjtcbiAgICAgICAgfSxcblxuICAgICAgICBzb3J0T3JkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcGFyZW50LnNvcnRPcmRlcjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBiZWZvcmVDb21waWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBfLmVhY2goc2VsZi5vcHRpb25zLnBhcnRpYWxzLCBmdW5jdGlvbiAoc3RyLCBuYW1lKSB7XG4gICAgICAgICAgICBzZWxmLiRvcHRpb25zLnBhcnRpYWxzW25hbWVdID0gc3RyO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICByZWdpc3RlclBhcnRpYWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIF8uZWFjaChzZWxmLm9wdGlvbnMucGFydGlhbHMsIGZ1bmN0aW9uIChzdHIsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBWdWUucGFydGlhbChuYW1lLCBzdHIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc29ydEJ5OiBmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1NlYXJjaGluZykgcmV0dXJuO1xuXG4gICAgICAgICAgICBsZXQgc29ydCA9IGNvbC52YWx1ZTtcbiAgICAgICAgICAgIGxldCBzb3J0T3JkZXIgPSAnZGVzYyc7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IHNvcnQgb3JkZXIgd2FzIGNsaWNrZWQgYWdhaW4sIGNoYW5nZSB0aGUgZGlyZWN0aW9uLlxuICAgICAgICAgICAgaWYgKHRoaXMuJHBhcmVudC5zb3J0ID09PSBzb3J0KSB7XG4gICAgICAgICAgICAgICAgc29ydE9yZGVyID0gKHRoaXMuJHBhcmVudC5zb3J0T3JkZXIgPT09ICdhc2MnKSA/ICdkZXNjJyA6ICdhc2MnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRwYXJlbnQuc29ydEJ5KHNvcnQsIHNvcnRPcmRlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hlY2tBbGxJdGVtczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXR1cyA9ICEgdGhpcy5hbGxJdGVtc0NoZWNrZWQ7XG5cbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLml0ZW1zLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IHN0YXR1cztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVuY2hlY2tBbGxJdGVtczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgXy5lYWNoKHRoaXMuaXRlbXMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSAhaXRlbS5jaGVja2VkO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVuYWJsZVJlb3JkZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc2VsZi5yZW9yZGVyaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgJCh0aGlzLiRlbHMudGJvZHkpLnNvcnRhYmxlKHtcbiAgICAgICAgICAgICAgICBheGlzOiAneScsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0OiAxNzUsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdwbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiAnLmRyYWctaGFuZGxlJyxcbiAgICAgICAgICAgICAgICBmb3JjZVBsYWNlaG9sZGVyU2l6ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgICAgICAgICAgICAgICB1aS5pdGVtLmRhdGEoJ3N0YXJ0JywgdWkuaXRlbS5pbmRleCgpKVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHVpLml0ZW0uZGF0YSgnc3RhcnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCAgID0gdWkuaXRlbS5pbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaXRlbXMuc3BsaWNlKGVuZCwgMCwgc2VsZi5pdGVtcy5zcGxpY2Uoc3RhcnQsIDEpWzBdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2FibGVSZW9yZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlb3JkZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICQodGhpcy4kZWxzLnRib2R5KS5zb3J0YWJsZSgnZGVzdHJveScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNhdmVPcmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kcGFyZW50LnNhdmVPcmRlcigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEeW5hbWljYWxseSBjYWxsIGEgbWV0aG9kIG9uIHRoZSBwYXJlbnQgY29tcG9uZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEVnLiBgY2FsbCgnZm9vJywgJ2JhcicsICdiYXonKWAgd291bGQgYmUgdGhlIGVxdWl2YWxlbnRcbiAgICAgICAgICogb2YgZG9pbmcgYHRoaXMuJHBhcmVudC5mb28oJ2JhcicsICdiYXonKWBcbiAgICAgICAgICovXG4gICAgICAgIGNhbGw6IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudFttZXRob2RdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGEgcGFnZSB3YXMgc2VsZWN0ZWQgaW4gdGhlIHBhZ2luYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBwYWdpbmF0aW9uUGFnZVNlbGVjdGVkKHBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudC5zZWxlY3RlZFBhZ2UgPSBwYWdlO1xuICAgICAgICAgICAgdGhpcy4kcGFyZW50LmdldEl0ZW1zKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNDb2x1bW5BY3RpdmUoY29sKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1NlYXJjaGluZykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gY29sLnZhbHVlID09PSB0aGlzLiRwYXJlbnQuc29ydDtcbiAgICAgICAgfSxcblxuICAgICAgICB0YWJsZUNvbFdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xuICAgICAgICAgICAgaWYgKCEgd2lkdGggfHwgd2lkdGggPT09IDEwMCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCA9PT0gJ3N0cmluZycgJiYgd2lkdGguZW5kc1dpdGgoJ3B4JykpIHJldHVybiB3aWR0aDtcbiAgICAgICAgICAgIHJldHVybiBgJHt3aWR0aH0lYDtcbiAgICAgICAgfSxcblxuICAgICAgICBmb3JtYXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoKSAmJiB2YWx1ZS50aHVtYm5haWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgaHRtbCA9IGA8c3BhbiBjbGFzcz1cImltZ1wiPjxpbWcgc3JjPVwiJHt2YWx1ZS50aHVtYm5haWx9XCIgYWx0PVwiJHt2YWx1ZS52YWx1ZX1cIiAvPmA7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnZhbHVlKSBodG1sICs9IGA8c3Bhbj4ke3ZhbHVlLnZhbHVlfTwvc3Bhbj5gO1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gYDwvc3Bhbj5gO1xuICAgICAgICAgICAgICAgIHJldHVybiBodG1sO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdyZW9yZGVyaW5nLnN0YXJ0JzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZVJlb3JkZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgJ3Jlb3JkZXJpbmcuc2F2ZWQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlb3JkZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgJ3Jlb3JkZXJpbmcuc3RvcCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVvcmRlcigpO1xuICAgICAgICB9XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIERvc3NpZXJUYWJsZS52dWU/MTcxMDM2NjMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9ZG9zc2llci10YWJsZS13cmFwcGVyPiA8dGFibGUgOmNsYXNzPVxcXCJbJ2Rvc3NpZXInLCB7ICdoYXMtY2hlY2tib3hlcyc6IGhhc0NoZWNrYm94ZXMgfV1cXFwiPiA8dGhlYWQgdi1pZj1oYXNIZWFkZXJzPiA8dHI+IDx0aCBjbGFzcz1jaGVja2JveC1jb2wgdi1pZj1oYXNDaGVja2JveGVzPiA8aW5wdXQgdHlwZT1jaGVja2JveCBpZD1jaGVja2JveC1hbGwgOmNoZWNrZWQ9YWxsSXRlbXNDaGVja2VkIEBjbGljaz1jaGVja0FsbEl0ZW1zIC8+IDxsYWJlbCBmb3I9Y2hlY2tib3gtYWxsPjwvbGFiZWw+IDwvdGg+IDx0aCB2LWZvcj1cXFwiY29sdW1uIGluIGNvbHVtbnNcXFwiIEBjbGljaz1zb3J0QnkoY29sdW1uKSA6Y2xhc3M9XFxcIlsnY29sdW1uLScgKyBjb2x1bW4udmFsdWUsIHsnYWN0aXZlJzogaXNDb2x1bW5BY3RpdmUoY29sdW1uKSwgJ2NvbHVtbi1zb3J0YWJsZSc6ICFpc1NlYXJjaGluZywgJ2V4dHJhLWNvbCc6IGNvbHVtbi5leHRyYX0gXVxcXCIgOnN0eWxlPVxcXCJ7IHdpZHRoOiB0YWJsZUNvbFdpZHRoKGNvbHVtbi53aWR0aCkgfVxcXCI+IHt7IGNvbHVtbi5oZWFkZXIgfX0gPGkgdi1pZj1pc0NvbHVtbkFjdGl2ZShjb2x1bW4pIGNsYXNzPVxcXCJpY29uIGljb24tY2hldnJvbi17eyBzb3J0T3JkZXIgPT09ICdhc2MnID8gJ3VwJyA6ICdkb3duJyB9fVxcXCI+PC9pPiA8L3RoPiA8dGggY2xhc3M9Y29sdW1uLWFjdGlvbnMgdi1pZj1oYXNBY3Rpb25zPjwvdGg+IDwvdHI+IDwvdGhlYWQ+IDx0Ym9keSB2LWVsOnRib2R5PiA8dHIgdi1mb3I9XFxcIml0ZW0gaW4gaXRlbXNcXFwiPiA8dGQgY2xhc3M9Y2hlY2tib3gtY29sIHYtaWY9XFxcImhhc0NoZWNrYm94ZXMgJiYgIXJlb3JkZXJpbmdcXFwiPiA8aW5wdXQgdHlwZT1jaGVja2JveCA6aWQ9XFxcIidjaGVja2JveC0nICsgJGluZGV4XFxcIiA6Y2hlY2tlZD1pdGVtLmNoZWNrZWQgQGNoYW5nZT10b2dnbGUoaXRlbSkgLz4gPGxhYmVsIDpmb3I9XFxcIidjaGVja2JveC0nICsgJGluZGV4XFxcIj48L2xhYmVsPiA8L3RkPiA8dGQgY2xhc3M9Y2hlY2tib3gtY29sIHYtaWY9cmVvcmRlcmluZz4gPGRpdiBjbGFzcz1kcmFnLWhhbmRsZT4gPGkgY2xhc3M9XFxcImljb24gaWNvbi1tZW51XFxcIj48L2k+IDwvZGl2PiA8L3RkPiA8dGQgdi1mb3I9XFxcIihpLCBjb2x1bW4pIGluIGNvbHVtbnNcXFwiIDpjbGFzcz1cXFwiW1xcbiAgICAgICAgICAgICAgICAgICAgYGNlbGwtJHtjb2x1bW4udmFsdWV9YCwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICdleHRyYS1jb2wnOiBjb2x1bW4uZXh0cmEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VtcHR5LWNvbCc6ICFpdGVtW2NvbHVtbi52YWx1ZV0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0LWNlbGwnOiBpID09PSAwXFxuICAgICAgICAgICAgICAgICAgICB9XVxcbiAgICAgICAgICAgICAgICBcXFwiPiA8c3BhbiBjbGFzcz1jb2x1bW4tbGFiZWw+e3sgY29sdW1uLmhlYWRlciB9fTwvc3Bhbj4gPHBhcnRpYWwgbmFtZT1jZWxsPjwvcGFydGlhbD4gPC90ZD4gPHRkIGNsYXNzPWNvbHVtbi1hY3Rpb25zIHYtaWY9aGFzQWN0aW9ucz4gPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIGFjdGlvbi1tb3JlXFxcIj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuLW1vcmUgZHJvcGRvd24tdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1kcm9wZG93biBhcmlhLWhhc3BvcHVwPXRydWUgYXJpYS1leHBhbmRlZD1mYWxzZT4gPGkgY2xhc3M9XFxcImljb24gaWNvbi1kb3RzLXRocmVlLXZlcnRpY2FsXFxcIj48L2k+IDwvYnV0dG9uPiA8dWwgY2xhc3M9ZHJvcGRvd24tbWVudT4gPHBhcnRpYWwgbmFtZT1hY3Rpb25zPjwvcGFydGlhbD4gPC91bD4gPC9kaXY+IDwvdGQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDxkaXYgdi1pZj1zaG93QnVsa0FjdGlvbnMgOmNsYXNzPVxcXCJ7ICdidWxrLWFjdGlvbnMnOiB0cnVlLCAnbm8tY2hlY2tib3hlcyc6ICFoYXNDaGVja2JveGVzIH1cXFwiPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYWN0aW9uXFxcIiBAY2xpY2s9dW5jaGVja0FsbEl0ZW1zPiB7eyB0cmFuc2xhdGUoJ2NwLnVuY2hlY2tfYWxsJykgfX0gPC9idXR0b24+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVsZXRlIGFjdGlvblxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcImNhbGwoJ2RlbGV0ZU11bHRpcGxlJywgJ2ZvbycsICdiYXInKVxcXCI+IHt7IHRyYW5zbGF0ZSgnY3AuZGVsZXRlJykgfX0ge3sgY2hlY2tlZEl0ZW1zLmxlbmd0aCB9fSB7eyB0cmFuc2xhdGVfY2hvaWNlKCdjcC5pdGVtcycsIGNoZWNrZWRJdGVtcy5sZW5ndGgpfX0gPC9idXR0b24+IDwvZGl2PiA8cGFnaW5hdGlvbiB2LWlmPVxcXCIhaXNTZWFyY2hpbmcgJiYgcGFnaW5hdGlvbi50b3RhbFBhZ2VzID4gMVxcXCIgOnRvdGFsPXBhZ2luYXRpb24udG90YWxQYWdlcyA6Y3VycmVudD1wYWdpbmF0aW9uLmN1cnJlbnRQYWdlIDpzZWdtZW50cz1wYWdpbmF0aW9uLnNlZ21lbnRzIEBzZWxlY3RlZD1wYWdpbmF0aW9uUGFnZVNlbGVjdGVkPiA8L3BhZ2luYXRpb24+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Rvc3NpZXIvRG9zc2llclRhYmxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uOiB7fSxcbiAgICAgICAgICAgIHNlbGVjdGVkUGFnZTogMVxuICAgICAgICB9XG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUGFnaW5hdGVzLmpzIiwiaW1wb3J0IEhhc0xvY2FsZVNlbGVjdG9yIGZyb20gJy4uL0hhc0xvY2FsZVNlbGVjdG9yJztcbmltcG9ydCBIYXNTaG93RHJhZnRzU2VsZWN0b3IgZnJvbSAnLi4vSGFzU2hvd0RyYWZ0c1NlbGVjdG9yJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbSGFzTG9jYWxlU2VsZWN0b3IsIEhhc1Nob3dEcmFmdHNTZWxlY3RvciwgRG9zc2llcl0sXG5cbiAgICBwcm9wczogWydnZXQnLCAnZGVsZXRlJywgJ3Jlb3JkZXInLCAnc2VhcmNoJywgJ2NhbkNyZWF0ZScsICdjYW5EZWxldGUnLCAnc29ydCcsICdzb3J0T3JkZXInLCAncmVvcmRlcmFibGUnLCAnY29sbGVjdGlvbicsICdjcmVhdGVFbnRyeVJvdXRlJ10sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IHRoaXMuZ2V0LFxuICAgICAgICAgICAgICAgIGRlbGV0ZTogdGhpcy5kZWxldGUsXG4gICAgICAgICAgICAgICAgcmVvcmRlcjogdGhpcy5yZW9yZGVyLFxuICAgICAgICAgICAgICAgIHNlYXJjaDogdGhpcy5zZWFyY2hcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBzb3J0OiB0aGlzLnNvcnQsXG4gICAgICAgICAgICAgICAgc29ydE9yZGVyOiB0aGlzLnNvcnRPcmRlcixcbiAgICAgICAgICAgICAgICByZW9yZGVyYWJsZTogdGhpcy5yZW9yZGVyYWJsZSxcbiAgICAgICAgICAgICAgICBwYXJ0aWFsczoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGdldFBhcmFtZXRlcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNvcnQ6IHRoaXMuc29ydCxcbiAgICAgICAgICAgICAgICBvcmRlcjogdGhpcy5zb3J0T3JkZXIsXG4gICAgICAgICAgICAgICAgcGFnZTogdGhpcy5zZWxlY3RlZFBhZ2UsXG4gICAgICAgICAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZSxcbiAgICAgICAgICAgICAgICBkcmFmdHM6IHRoaXMuc2hvd0RyYWZ0cyA/IDEgOiAwXG4gICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVFbnRyeVVybCgpIHtcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLmNyZWF0ZUVudHJ5Um91dGU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmxvY2FsZSAhPT0gT2JqZWN0LmtleXMoU3RhdGFtaWMubG9jYWxlcylbMF0pIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz9sb2NhbGU9JyArIHRoaXMubG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGRBY3Rpb25QYXJ0aWFsKCk7XG4gICAgICAgIHRoaXMuYmluZExvY2FsZVdhdGNoZXIoKTtcbiAgICAgICAgdGhpcy5iaW5kU2hvd0RyYWZ0c1dhdGNoZXIoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGFkZEFjdGlvblBhcnRpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBgPGxpPjxhIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdCcpIH19PC9hPjwvbGk+YDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuQ3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGBcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2sucHJldmVudD1cImNhbGwoJ2R1cGxpY2F0ZScsIGl0ZW0uaWQpXCI+e3sgdHJhbnNsYXRlKCdjcC5kdXBsaWNhdGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW5EZWxldGUpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljay5wcmV2ZW50PVwiY2FsbCgnZGVsZXRlSXRlbScsIGl0ZW0uaWQpXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRhYmxlT3B0aW9ucy5wYXJ0aWFscy5hY3Rpb25zID0gc3RyO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uTG9jYWxlQ2hhbmdlZCgpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0SXRlbXMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvblNob3dEcmFmdHNDaGFuZ2VkKCkge1xuICAgICAgICAgICAgdGhpcy5nZXRJdGVtcygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGR1cGxpY2F0ZShpZCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gY3BfdXJsKGBjb2xsZWN0aW9ucy9lbnRyaWVzLyR7dGhpcy5jb2xsZWN0aW9ufS9kdXBsaWNhdGVgKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KHVybCwgeyBpZCB9KS5zdWNjZXNzKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gZGF0YS5yZWRpcmVjdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2VudHJpZXMuanMiLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBFbnRyeUxpc3RpbmcgZnJvbSAnLi4vY29tcG9uZW50cy9saXN0aW5ncy9lbnRyaWVzJztcblxuLy8gQ29yZVxuVnVlLmNvbXBvbmVudCgnYWRkb24tbGlzdGluZycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvbGlzdGluZ3MvYWRkb25zJykpO1xuVnVlLmNvbXBvbmVudCgnYXNzZXQtbWFuYWdlcicsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvYXNzZXRzL0Fzc2V0TWFuYWdlci52dWUnKSk7XG5WdWUuY29tcG9uZW50KCdhc3NldC1icm93c2VyJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9Ccm93c2VyLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2Fzc2V0LWNvbnRhaW5lci1mb3JtJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL0VkaXRGb3JtLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2Fzc2V0LWNvbnRhaW5lci1saXN0aW5nJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9saXN0aW5ncy9hc3NldC1jb250YWluZXJzJykpO1xuVnVlLmNvbXBvbmVudCgnYXNzZXQtY29udGFpbmVyLXdpemFyZCcsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9XaXphcmQvV2l6YXJkLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2NvbGxlY3Rpb24tbGlzdGluZycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvbGlzdGluZ3MvY29sbGVjdGlvbnMnKSk7XG5WdWUuY29tcG9uZW50KCdjb25maWd1cmUtYXNzZXQtY29udGFpbmVyLWxpc3RpbmcnLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL2xpc3RpbmdzL2Fzc2V0LWNvbnRhaW5lcnMtY29uZmlndXJlJykpO1xuVnVlLmNvbXBvbmVudCgnY29uZmlndXJlLWNvbGxlY3Rpb24tbGlzdGluZycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvbGlzdGluZ3MvY29sbGVjdGlvbnMtY29uZmlndXJlJykpO1xuVnVlLmNvbXBvbmVudCgnY29uZmlndXJlLWdsb2JhbHMtbGlzdGluZycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvbGlzdGluZ3MvZ2xvYmFscy1jb25maWd1cmUnKSk7XG5WdWUuY29tcG9uZW50KCdjb25maWd1cmUtdGF4b25vbWllcy1saXN0aW5nJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9saXN0aW5ncy90YXhvbm9taWVzLWNvbmZpZ3VyZScpKTtcblZ1ZS5jb21wb25lbnQoJ2VudHJ5LWxpc3RpbmcnLCBFbnRyeUxpc3RpbmcpO1xuVnVlLmNvbXBvbmVudCgnZm9ybXNldC1idWlsZGVyJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9mb3Jtc2V0LWJ1aWxkZXIvZm9ybXNldC1idWlsZGVyJykpO1xuVnVlLmNvbXBvbmVudCgnZmllbGRzZXQtYnVpbGRlcicsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9CdWlsZGVyLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ3BhZ2UtdHJlZScsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvcGFnZS10cmVlL1BhZ2VUcmVlLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ3B1Ymxpc2gnLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL3B1Ymxpc2gvUHVibGlzaC52dWUnKSk7XG5WdWUuY29tcG9uZW50KCdwdWJsaXNoLWZpZWxkcycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvcHVibGlzaC9GaWVsZHMudnVlJykpO1xuVnVlLmNvbXBvbmVudCgndHlwZWFoZWFkJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy90eXBlYWhlYWQvVHlwZWFoZWFkLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2luc3RhbGxlcicsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvaW5zdGFsbGVyL2luc3RhbGxlcicpKTtcblZ1ZS5jb21wb25lbnQoJ3VwZGF0ZXInLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL3VwZGF0ZXInKSk7XG5WdWUuY29tcG9uZW50KCdpbXBvcnRlcicsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvaW1wb3J0ZXIvaW1wb3J0ZXInKSk7XG5WdWUuY29tcG9uZW50KCd0ZXJtLWxpc3RpbmcnLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL2xpc3RpbmdzL3Rlcm1zJykpO1xuVnVlLmNvbXBvbmVudCgndGF4b25vbWllcy1saXN0aW5nJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9saXN0aW5ncy90YXhvbm9taWVzJykpO1xuVnVlLmNvbXBvbmVudCgnZ2xvYmFscy1saXN0aW5nJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9saXN0aW5ncy9nbG9iYWxzJykpO1xuVnVlLmNvbXBvbmVudCgndXNlci1saXN0aW5nJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9saXN0aW5ncy91c2VycycpKTtcblZ1ZS5jb21wb25lbnQoJ3VzZXItb3B0aW9ucycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvcHVibGlzaC91c2VyLW9wdGlvbnMnKSk7XG5WdWUuY29tcG9uZW50KCd1c2VyLWdyb3VwLWxpc3RpbmcnLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL2xpc3RpbmdzL3VzZXItZ3JvdXBzJykpO1xuVnVlLmNvbXBvbmVudCgndXNlci1yb2xlLWxpc3RpbmcnLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL2xpc3RpbmdzL3VzZXItcm9sZXMnKSk7XG5WdWUuY29tcG9uZW50KCdmaWVsZHNldC1saXN0aW5nJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9saXN0aW5ncy9maWVsZHNldHMnKSk7XG5WdWUuY29tcG9uZW50KCdmb3JtLXN1Ym1pc3Npb24tbGlzdGluZycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvbGlzdGluZ3MvZm9ybS1zdWJtaXNzaW9ucycpKTtcblZ1ZS5jb21wb25lbnQoJ3JvbGVzJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9yb2xlcy9yb2xlcycpKTtcblZ1ZS5jb21wb25lbnQoJ2xvZ2luJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9sb2dpbi9sb2dpbicpKTtcblZ1ZS5jb21wb25lbnQoJ2xvZ2luLW1vZGFsJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9sb2dpbi9Mb2dpbk1vZGFsLnZ1ZScpKTtcblxuLy8gUmV1c2FibGVcblZ1ZS5jb21wb25lbnQoJ3N2Zy1pY29uJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9TdmdJY29uLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2ZpbGUtaWNvbicsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvRmlsZUljb24udnVlJykpO1xuVnVlLmNvbXBvbmVudCgnbGlzdCcsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvbGlzdCcpKTtcblZ1ZS5jb21wb25lbnQoJ2FsZXJ0JywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9hbGVydCcpKTtcblZ1ZS5jb21wb25lbnQoJ2JyYW5jaCcsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvcGFnZS10cmVlL0JyYW5jaC52dWUnKSk7XG5WdWUuY29tcG9uZW50KCdicmFuY2hlcycsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvcGFnZS10cmVlL0JyYW5jaGVzLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2ZpZWxkcy1idWlsZGVyJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL2ZpZWxkcy1idWlsZGVyJykpO1xuVnVlLmNvbXBvbmVudCgnZmllbGRzZXQtZmllbGRzJywgcmVxdWlyZSgnLi4vY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL0ZpZWxkcy52dWUnKSk7XG5WdWUuY29tcG9uZW50KCdmaWVsZHNldC1maWVsZCcsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9GaWVsZC52dWUnKSk7XG5WdWUuY29tcG9uZW50KCdmaWVsZHR5cGUtc2VsZWN0b3InLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvRmllbGR0eXBlU2VsZWN0b3IudnVlJykpO1xuVnVlLmNvbXBvbmVudCgnbW9kYWwnLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL01vZGFsLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ3BhZ2luYXRpb24nLCByZXF1aXJlKCcuLi9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnaW5hdGlvbi52dWUnKSk7XG5cblZ1ZS5jb21wb25lbnQoJ3NlYXJjaCcsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvZG9zc2llci9Eb3NzaWVyU2VhcmNoLnZ1ZScpKTtcblZ1ZS5jb21wb25lbnQoJ2Rvc3NpZXItc29ydC1zZWxlY3RvcicsIHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvZG9zc2llci9Tb3J0U2VsZWN0b3IudnVlJykpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvY29tcG9uZW50cy5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgnY29uZmlndXJlL2FkZG9ucy9nZXQnKSxcbiAgICAgICAgICAgICAgICBkZWxldGU6IGNwX3VybCgnY29uZmlndXJlL2FkZG9ucy9kZWxldGUnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGw6IGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwiaXRlbS5zZXR0aW5nc191cmxcIiB2LWlmPVwiaXRlbS5zZXR0aW5nc191cmwgJiYgY29sdW1uLnZhbHVlID09PSAnbmFtZSdcIj57eyBpdGVtW2NvbHVtbi52YWx1ZV0gfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiY29sdW1uLnZhbHVlID09PSAnaW5zdGFsbGVkJ1wiPnt7IGl0ZW0uaW5zdGFsbGVkID8gJ+KclCcgOiAn4pyYJyB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT57eyBpdGVtW2NvbHVtbi52YWx1ZV0gfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgYCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJpdGVtLnNldHRpbmdzX3VybFwiPjxhIDpocmVmPVwiaXRlbS5zZXR0aW5nc191cmxcIj5TZXR0aW5nczwvYT48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwid2FybmluZ1wiIHYtaWY9XCJjYW4oJ3N1cGVyJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljay5wcmV2ZW50PVwiY2FsbCgnZGVsZXRlSXRlbScsIGl0ZW0uaWQpXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICByZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBjcF91cmwoJ2NvbmZpZ3VyZS9hZGRvbnMvcmVmcmVzaCcpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2FkZG9ucy5qcyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Fzc2V0TWFuYWdlci52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Fzc2V0TWFuYWdlci52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Bc3NldE1hbmFnZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImFzc2V0LW1hbmFnZXJcIj5cblxuICAgICAgICA8YXNzZXQtYnJvd3NlclxuICAgICAgICAgICAgOnNlbGVjdGVkLWNvbnRhaW5lcj1cImNvbnRhaW5lclwiXG4gICAgICAgICAgICA6c2VsZWN0ZWQtcGF0aD1cInBhdGhcIlxuICAgICAgICAgICAgOnNlbGVjdGVkLWFzc2V0cz1cInNlbGVjdGVkQXNzZXRzXCJcbiAgICAgICAgICAgIEBuYXZpZ2F0ZWQ9XCJuYXZpZ2F0ZVwiXG4gICAgICAgICAgICBAc2VsZWN0aW9ucy11cGRhdGVkPVwidXBkYXRlU2VsZWN0aW9uc1wiPlxuXG4gICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImNvbnRleHR1YWwtYWN0aW9uc1wiIHYtaWY9XCJzZWxlY3RlZEFzc2V0cy5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1sLTE2IG1yLTIgbWItM1wiIEBjbGljaz1cImRlbGV0ZVNlbGVjdGVkXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1iLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBAY2xpY2s9XCJzZWxlY3RlZEFzc2V0cyA9IFtdXCI+e3sgdHJhbnNsYXRlKCdjcC51bmNoZWNrX2FsbCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuXCIgQGNsaWNrPVwib3BlbkFzc2V0TW92ZXJcIj57eyB0cmFuc2xhdGUoJ2NwLm1vdmUnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPC9hc3NldC1icm93c2VyPlxuXG4gICAgICAgIDxtb3ZlclxuICAgICAgICAgICAgdi1pZj1cInNob3dBc3NldE1vdmVyXCJcbiAgICAgICAgICAgIDphc3NldHM9XCJzZWxlY3RlZEFzc2V0c1wiXG4gICAgICAgICAgICA6Y29udGFpbmVyPVwiY29udGFpbmVyXCJcbiAgICAgICAgICAgIDpmb2xkZXI9XCJwYXRoXCJcbiAgICAgICAgICAgIEBzYXZlZD1cImFzc2V0c01vdmVkXCJcbiAgICAgICAgICAgIEBjbG9zZWQ9XCJjbG9zZUFzc2V0TW92ZXJcIj5cbiAgICAgICAgPC9tb3Zlcj5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBNb3ZlcjogcmVxdWlyZSgnLi9Nb3Zlci52dWUnKVxuICAgIH0sXG5cblxuICAgIHByb3BzOiBbJ2NvbnRhaW5lcicsICdwYXRoJ10sXG5cblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWxlY3RlZEFzc2V0czogW10sXG4gICAgICAgICAgICBzaG93QXNzZXRNb3ZlcjogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLmJpbmRCcm93c2VyTmF2aWdhdGlvbigpO1xuICAgIH0sXG5cblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQmluZCBicm93c2VyIG5hdmlnYXRpb24gZmVhdHVyZXNcbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyB3aWxsIGluaXRpYWxpemUgdGhlIHN0YXRlIGZvciB1c2luZyB0aGUgaGlzdG9yeSBBUEkgdG8gYWxsb3dcbiAgICAgICAgICogbmF2aWdhdGlvbiBiYWNrIGFuZCBmb3J0aCB0aHJvdWdoIGZvbGRlcnMgdXNpbmcgYnJvd3NlciBidXR0b25zLlxuICAgICAgICAgKi9cbiAgICAgICAgYmluZEJyb3dzZXJOYXZpZ2F0aW9uKCkge1xuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lciwgcGF0aDogdGhpcy5wYXRoIH0sICcnKTtcblxuICAgICAgICAgICAgd2luZG93Lm9ucG9wc3RhdGUgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gZS5zdGF0ZS5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoID0gZS5zdGF0ZS5wYXRoO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHVzaCBhIG5ldyBzdGF0ZSBvbnRvIHRoZSBicm93c2VyJ3MgaGlzdG9yeVxuICAgICAgICAgKi9cbiAgICAgICAgcHVzaFN0YXRlKCkge1xuICAgICAgICAgICAgbGV0IHVybCA9IGNwX3VybCgnYXNzZXRzL2Jyb3dzZS8nICsgdGhpcy5jb250YWluZXIpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wYXRoICE9PSAnLycpIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJy8nICsgdGhpcy5wYXRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsIHBhdGg6IHRoaXMucGF0aFxuICAgICAgICAgICAgfSwgJycsIHVybCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYSB1c2VyIGhhcyBuYXZpZ2F0ZWQgdG8gYW5vdGhlciBmb2xkZXIgb3IgY29udGFpbmVyXG4gICAgICAgICAqL1xuICAgICAgICBuYXZpZ2F0ZShjb250YWluZXIsIHBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgICAgIHRoaXMucHVzaFN0YXRlKCk7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIG91dCBhbnkgc2VsZWN0aW9ucy4gSXQgd291bGQgYmUgY29uZnVzaW5nIHRvIG5hdmlnYXRlIHRvIGEgZGlmZmVyZW50XG4gICAgICAgICAgICAvLyBmb2xkZXIgYW5kL29yIGNvbnRhaW5lciwgcGVyZm9ybSBhbiBhY3Rpb24sIGFuZCBkaXNjb3ZlciB5b3UgcGVyZm9ybWVkXG4gICAgICAgICAgICAvLyBpdCBvbiBhbiBhc3NldCB0aGF0IHdhcyBzdGlsbCBzZWxlY3RlZCwgYnV0IG5vIGxvbmdlciB2aXNpYmxlLlxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFzc2V0cyA9IFtdO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHNlbGVjdGlvbnMgYXJlIGNoYW5nZWQsIHdlIG5lZWQgdGhlbSByZWZsZWN0ZWQgaGVyZS5cbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZVNlbGVjdGlvbnMoc2VsZWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFzc2V0cyA9IHNlbGVjdGlvbnM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlbGV0ZSBhbGwgdGhlIHNlbGVjdGVkIGFzc2V0cy5cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZVNlbGVjdGVkKCkge1xuICAgICAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCdkZWxldGUtYXNzZXRzJywgdGhpcy5zZWxlY3RlZEFzc2V0cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3BlbkFzc2V0TW92ZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBc3NldE1vdmVyID0gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZUFzc2V0TW92ZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBc3NldE1vdmVyID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXNzZXRzTW92ZWQoZm9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQXNzZXRNb3ZlcigpO1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0aGlzLmNvbnRhaW5lciwgZm9sZGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQXNzZXRNYW5hZ2VyLnZ1ZT81ZWFhODQzYyIsIjx0ZW1wbGF0ZT5cblxuICAgIDxtb2RhbCA6c2hvdy5zeW5jPVwic2hvd1wiIDpzYXZpbmc9XCJzYXZpbmdcIiBjbGFzcz1cIm1vZGFsLXNtYWxsXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiaGVhZGVyXCI+XG4gICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLm1vdmVfZmlsZScpIH19XG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJib2R5XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPnt7eyB3YXJuaW5nVGV4dCB8IG1hcmtkb3duIH19fTwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgdi1pZj1cImVycm9yc1wiPlxuICAgICAgICAgICAgICAgIDxwIHYtZm9yPVwiZXJyb3IgaW4gZXJyb3JzXCI+e3sgZXJyb3IgfX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5mb2xkZXInKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGFzc2V0X2ZvbGRlci1maWVsZHR5cGVcbiAgICAgICAgICAgICAgICAgICAgOmRhdGEuc3luYz1cInNlbGVjdGVkRm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgOmNvbmZpZz1cImZpZWxkdHlwZUNvbmZpZ1wiPlxuICAgICAgICAgICAgICAgIDwvYXNzZXRfZm9sZGVyLWZpZWxkdHlwZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiZm9vdGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiIWhhc0NoYW5nZWRcIiBAY2xpY2s9XCJzYXZlXCI+U2F2ZTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG5cIiBAY2xpY2s9XCJjYW5jZWxcIj57eyB0cmFuc2xhdGUoJ2NwLmNhbmNlbCcpIH19PC9idXR0b24+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9tb2RhbD5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnYXNzZXRzJywgJ2NvbnRhaW5lcicsICdmb2xkZXInXSxcblxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBzZWxlY3RlZEZvbGRlcjogbnVsbCxcbiAgICAgICAgICAgIHNhdmluZzogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgICAgICB3YXJuaW5nVGV4dDogdHJhbnNsYXRlKCdjcC5tb3ZlX2ZpbGVfd2FybmluZycpXG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGhhc0NoYW5nZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEZvbGRlciAhPT0gdGhpcy5mb2xkZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmllbGR0eXBlQ29uZmlnKCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lciB9O1xuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEZvbGRlciA9IHRoaXMuZm9sZGVyO1xuICAgIH0sXG5cblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgc2hvdyh2YWwpIHtcbiAgICAgICAgICAgIGlmICghdmFsKSB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2F2ZSgpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuaGFzQ2hhbmdlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLnNhdmluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGNwX3VybCgnL2Fzc2V0cy9tb3ZlJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRzOiB0aGlzLmFzc2V0cyxcbiAgICAgICAgICAgICAgICBmb2xkZXI6IHRoaXMuc2VsZWN0ZWRGb2xkZXIsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lclxuICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIHBheWxvYWQpLnN1Y2Nlc3MoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2F2ZWQnLCB0aGlzLnNlbGVjdGVkRm9sZGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICAgICAgfSkuZXJyb3IoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBNb3Zlci52dWU/ZjYyZjA1MTYiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxtb2RhbCA6c2hvdy5zeW5jPXNob3cgOnNhdmluZz1zYXZpbmcgY2xhc3M9bW9kYWwtc21hbGw+IDx0ZW1wbGF0ZSBzbG90PWhlYWRlcj4ge3sgdHJhbnNsYXRlKCdjcC5tb3ZlX2ZpbGUnKSB9fSA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1ib2R5PiA8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC13YXJuaW5nXFxcIj57e3sgd2FybmluZ1RleHQgfCBtYXJrZG93biB9fX08L2Rpdj4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiB2LWlmPWVycm9ycz4gPHAgdi1mb3I9XFxcImVycm9yIGluIGVycm9yc1xcXCI+e3sgZXJyb3IgfX08L3A+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmZvbGRlcicpIH19PC9sYWJlbD4gPGFzc2V0X2ZvbGRlci1maWVsZHR5cGUgOmRhdGEuc3luYz1zZWxlY3RlZEZvbGRlciA6Y29uZmlnPWZpZWxkdHlwZUNvbmZpZz4gPC9hc3NldF9mb2xkZXItZmllbGR0eXBlPiA8L2Rpdj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9Zm9vdGVyPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIDpkaXNhYmxlZD0haGFzQ2hhbmdlZCBAY2xpY2s9c2F2ZT5TYXZlPC9idXR0b24+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9YnRuIEBjbGljaz1jYW5jZWw+e3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fTwvYnV0dG9uPiA8L3RlbXBsYXRlPiA8L21vZGFsPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Nb3Zlci52dWVcbi8vIG1vZHVsZSBpZCA9IDI0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9YXNzZXQtbWFuYWdlcj4gPGFzc2V0LWJyb3dzZXIgOnNlbGVjdGVkLWNvbnRhaW5lcj1jb250YWluZXIgOnNlbGVjdGVkLXBhdGg9cGF0aCA6c2VsZWN0ZWQtYXNzZXRzPXNlbGVjdGVkQXNzZXRzIEBuYXZpZ2F0ZWQ9bmF2aWdhdGUgQHNlbGVjdGlvbnMtdXBkYXRlZD11cGRhdGVTZWxlY3Rpb25zPiA8dGVtcGxhdGUgc2xvdD1jb250ZXh0dWFsLWFjdGlvbnMgdi1pZj1zZWxlY3RlZEFzc2V0cy5sZW5ndGg+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGFuZ2VyIG1sLTE2IG1yLTIgbWItM1xcXCIgQGNsaWNrPWRlbGV0ZVNlbGVjdGVkPnt7IHRyYW5zbGF0ZSgnY3AuZGVsZXRlJykgfX08L2J1dHRvbj4gPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIG1iLTNcXFwiPiA8YnV0dG9uIGNsYXNzPWJ0biBAY2xpY2s9XFxcInNlbGVjdGVkQXNzZXRzID0gW11cXFwiPnt7IHRyYW5zbGF0ZSgnY3AudW5jaGVja19hbGwnKSB9fTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPWJ0biBAY2xpY2s9b3BlbkFzc2V0TW92ZXI+e3sgdHJhbnNsYXRlKCdjcC5tb3ZlJykgfX08L2J1dHRvbj4gPC9kaXY+IDwvdGVtcGxhdGU+IDwvYXNzZXQtYnJvd3Nlcj4gPG1vdmVyIHYtaWY9c2hvd0Fzc2V0TW92ZXIgOmFzc2V0cz1zZWxlY3RlZEFzc2V0cyA6Y29udGFpbmVyPWNvbnRhaW5lciA6Zm9sZGVyPXBhdGggQHNhdmVkPWFzc2V0c01vdmVkIEBjbG9zZWQ9Y2xvc2VBc3NldE1vdmVyPiA8L21vdmVyPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQXNzZXRNYW5hZ2VyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Jyb3dzZXIudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ccm93c2VyLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvQnJvd3Nlci52dWVcbi8vIG1vZHVsZSBpZCA9IDI0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtYnJvd3NlciBjYXJkXCJcbiAgICAgICAgIEBkcmFnb3Zlcj1cImRyYWdPdmVyXCJcbiAgICAgICAgIEBkcmFnbGVhdmU9XCJkcmFnU3RvcFwiXG4gICAgICAgICBAZHJvcD1cImRyYWdTdG9wXCI+XG5cbiAgICAgICAgPGRpdiB2LWlmPVwiISBpbml0aWFsaXplZFwiIGNsYXNzPVwiYXNzZXQtYnJvd3Nlci1sb2FkaW5nIGxvYWRpbmdcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZHJhZy1ub3RpZmljYXRpb25cIiB2LXNob3c9XCJjYW5FZGl0ICYmIGRyYWdnaW5nRmlsZVwiPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tZG93bmxvYWRcIj48L2k+XG4gICAgICAgICAgICA8aDM+e3sgdHJhbnNsYXRlKCdjcC5kcm9wX3RvX3VwbG9hZCcpIH19PC9oMz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiB2LWlmPVwic2hvd1NpZGViYXJcIiBjbGFzcz1cImFzc2V0LWJyb3dzZXItc2lkZWJhclwiPlxuICAgICAgICAgICAgPGg0Pnt7IHRyYW5zbGF0ZSgnY3AuY29udGFpbmVycycpIH19PC9oND5cbiAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJjIGluIGNvbnRhaW5lcnNcIiBjbGFzcz1cInNpZGViYXItaXRlbVwiIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IGNvbnRhaW5lci5pZCA9PSBjLmlkIH1cIj5cbiAgICAgICAgICAgICAgICA8YSBAY2xpY2s9XCJzZWxlY3RDb250YWluZXIoYy5pZClcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgYy50aXRsZSB9fVxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtYnJvd3Nlci1tYWluXCIgdi1pZj1cImluaXRpYWxpemVkXCI+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1icm93c2VyLWhlYWRlclwiPlxuICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cIm1iLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc1NlYXJjaGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5zZWFyY2hfcmVzdWx0cycpIH19XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInJlc3RyaWN0TmF2aWdhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGZvbGRlci50aXRsZSB8fCBmb2xkZXIucGF0aCB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29udGFpbmVyLnRpdGxlIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nLWluZGljYXRvclwiIHYtc2hvdz1cImxvYWRpbmdBc3NldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2gxPlxuXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJzZWFyY2ggZmlsdGVyLWNvbnRyb2wgbWItM1wiXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3sgdHJhbnNsYXRlKCdjcC5zZWFyY2gnKSB9fS4uLlwiXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWFyY2hUZXJtXCJcbiAgICAgICAgICAgICAgICAgICAgZGVib3VuY2U9XCI1MDBcIiAvPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LWJyb3dzZXItYWN0aW9ucyBmbGV4eSB3cmFwXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImNvbnRleHR1YWwtYWN0aW9uc1wiPjwvc2xvdD5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGFjdGlvbiBtYi0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4taWNvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsnZGVwcmVzc2VkJzogZGlzcGxheU1vZGUgPT0gJ2dyaWQnfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNldERpc3BsYXlNb2RlKCdncmlkJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1ncmlkXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4taWNvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsnZGVwcmVzc2VkJzogZGlzcGxheU1vZGUgPT0gJ3RhYmxlJ31cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzZXREaXNwbGF5TW9kZSgndGFibGUnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWxpc3RcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBhY3Rpb24gbWItM1wiIHYtaWY9XCJjYW5FZGl0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0blwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCIhcmVzdHJpY3ROYXZpZ2F0aW9uICYmICFpc1NlYXJjaGluZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwiY3JlYXRlRm9sZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5uZXdfZm9sZGVyJykgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG5cIiBAY2xpY2sucHJldmVudD1cInVwbG9hZEZpbGVcIiB2LWlmPVwiIWlzU2VhcmNoaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC51cGxvYWQnKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1icm93c2VyLWNvbnRlbnRcIj5cblxuICAgICAgICAgICAgICAgIDx1cGxvYWRlclxuICAgICAgICAgICAgICAgICAgICB2LXJlZjp1cGxvYWRlclxuICAgICAgICAgICAgICAgICAgICA6ZG9tLWVsZW1lbnQ9XCJ1cGxvYWRFbGVtZW50XCJcbiAgICAgICAgICAgICAgICAgICAgOmNvbnRhaW5lcj1cImNvbnRhaW5lci5pZFwiXG4gICAgICAgICAgICAgICAgICAgIDpwYXRoPVwicGF0aFwiXG4gICAgICAgICAgICAgICAgICAgIEB1cGRhdGVkPVwidXBsb2Fkc1VwZGF0ZWRcIlxuICAgICAgICAgICAgICAgICAgICBAdXBsb2FkLWNvbXBsZXRlPVwibG9hZEFzc2V0c1wiPlxuICAgICAgICAgICAgICAgIDwvdXBsb2FkZXI+XG5cbiAgICAgICAgICAgICAgICA8dXBsb2Fkc1xuICAgICAgICAgICAgICAgICAgICB2LWlmPVwidXBsb2Fkcy5sZW5ndGhcIlxuICAgICAgICAgICAgICAgICAgICA6dXBsb2Fkcz1cInVwbG9hZHNcIj5cbiAgICAgICAgICAgICAgICA8L3VwbG9hZHM+XG5cbiAgICAgICAgICAgICAgICA8Y29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIDppcz1cImxpc3RpbmdDb21wb25lbnRcIlxuICAgICAgICAgICAgICAgICAgICA6Y29udGFpbmVyPVwiY29udGFpbmVyLmlkXCJcbiAgICAgICAgICAgICAgICAgICAgOmFzc2V0cz1cImFzc2V0c1wiXG4gICAgICAgICAgICAgICAgICAgIDpmb2xkZXI9XCJmb2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICA6c3ViZm9sZGVycz1cInN1YmZvbGRlcnNcIlxuICAgICAgICAgICAgICAgICAgICA6bG9hZGluZz1cImxvYWRpbmdcIlxuICAgICAgICAgICAgICAgICAgICA6c2VsZWN0ZWQtYXNzZXRzPVwic2VsZWN0ZWRBc3NldHNcIlxuICAgICAgICAgICAgICAgICAgICA6cmVzdHJpY3QtbmF2aWdhdGlvbj1cInJlc3RyaWN0TmF2aWdhdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIDppcy1zZWFyY2hpbmc9XCJpc1NlYXJjaGluZ1wiXG4gICAgICAgICAgICAgICAgICAgIEBmb2xkZXItc2VsZWN0ZWQ9XCJmb2xkZXJTZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgIEBmb2xkZXItZWRpdGluZz1cImVkaXRGb2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICBAZm9sZGVyLWRlbGV0ZWQ9XCJmb2xkZXJEZWxldGVkXCJcbiAgICAgICAgICAgICAgICAgICAgQGFzc2V0LXNlbGVjdGVkPVwiYXNzZXRTZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgIEBhc3NldC1kZXNlbGVjdGVkPVwiYXNzZXREZXNlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgQGFzc2V0LWVkaXRpbmc9XCJlZGl0QXNzZXRcIlxuICAgICAgICAgICAgICAgICAgICBAYXNzZXQtZGVsZXRpbmc9XCJkZWxldGVBc3NldFwiXG4gICAgICAgICAgICAgICAgICAgIEBhc3NldHMtZHJhZ2dlZC10by1mb2xkZXI9XCJhc3NldHNEcmFnZ2VkVG9Gb2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICBAYXNzZXQtZG91YmxlY2xpY2tlZD1cImFzc2V0RG91YmxlY2xpY2tlZFwiXG4gICAgICAgICAgICAgICAgICAgIEBzb3J0ZWQ9XCJzb3J0QnlcIj5cbiAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuby1yZXN1bHRzXCIgdi1pZj1cImlzU2VhcmNoaW5nICYmIGlzRW1wdHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPHN2Zy1pY29uIG5hbWU9XCJmb2xkZXItc2VhcmNoLWVtcHR5XCIgY2xhc3M9XCJoLTE2IHctMTYgbXgtYXV0b1wiPjwvc3ZnLWljb24+XG4gICAgICAgICAgICAgICAgICAgIDxoMj57eyB0cmFuc2xhdGUoJ2NwLm5vX3NlYXJjaF9yZXN1bHRzJykgfX08L2gyPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPHBhZ2luYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cInBhZ2luYXRpb24udG90YWxQYWdlcyA+IDFcIlxuICAgICAgICAgICAgICAgICAgICA6dG90YWw9XCJwYWdpbmF0aW9uLnRvdGFsUGFnZXNcIlxuICAgICAgICAgICAgICAgICAgICA6Y3VycmVudD1cInBhZ2luYXRpb24uY3VycmVudFBhZ2VcIlxuICAgICAgICAgICAgICAgICAgICA6c2VnbWVudHM9XCJwYWdpbmF0aW9uLnNlZ21lbnRzXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdGVkPVwicGFnaW5hdGlvblBhZ2VTZWxlY3RlZFwiPlxuICAgICAgICAgICAgICAgIDwvcGFnaW5hdGlvbj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxicmVhZGNydW1ic1xuICAgICAgICAgICAgICAgIHYtaWY9XCIhcmVzdHJpY3ROYXZpZ2F0aW9uICYmICFpc1NlYXJjaGluZ1wiXG4gICAgICAgICAgICAgICAgOnBhdGg9XCJwYXRoXCJcbiAgICAgICAgICAgICAgICBAbmF2aWdhdGVkPVwiZm9sZGVyU2VsZWN0ZWRcIj5cbiAgICAgICAgICAgIDwvYnJlYWRjcnVtYnM+XG5cbiAgICAgICAgICAgIDxhc3NldC1lZGl0b3JcbiAgICAgICAgICAgICAgICB2LWlmPVwic2hvd0Fzc2V0RWRpdG9yXCJcbiAgICAgICAgICAgICAgICA6aWQ9XCJlZGl0ZWRBc3NldElkXCJcbiAgICAgICAgICAgICAgICA6aGFzLWNoaWxkLnN5bmM9XCJlZGl0b3JIYXNDaGlsZFwiXG4gICAgICAgICAgICAgICAgQGNsb3NlZD1cImNsb3NlQXNzZXRFZGl0b3JcIlxuICAgICAgICAgICAgICAgIEBzYXZlZD1cImFzc2V0U2F2ZWRcIlxuICAgICAgICAgICAgICAgIEBkZWxldGVkPVwiYXNzZXREZWxldGVkXCJcbiAgICAgICAgICAgICAgICBAbW92ZWQ9XCJhc3NldE1vdmVkXCI+XG4gICAgICAgICAgICA8L2Fzc2V0LWVkaXRvcj5cblxuICAgICAgICAgICAgPGZvbGRlci1lZGl0b3JcbiAgICAgICAgICAgICAgICB2LWlmPVwic2hvd0ZvbGRlckNyZWF0b3JcIlxuICAgICAgICAgICAgICAgIDpjcmVhdGU9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICA6Y29udGFpbmVyPVwiY29udGFpbmVyLmlkXCJcbiAgICAgICAgICAgICAgICA6cGF0aD1cInBhdGhcIlxuICAgICAgICAgICAgICAgIEBjbG9zZWQ9XCJmb2xkZXJDcmVhdG9yQ2xvc2VkXCJcbiAgICAgICAgICAgICAgICBAY3JlYXRlZD1cImZvbGRlckNyZWF0ZWRcIj5cbiAgICAgICAgICAgIDwvZm9sZGVyLWVkaXRvcj5cblxuICAgICAgICAgICAgPGZvbGRlci1lZGl0b3JcbiAgICAgICAgICAgICAgICB2LWlmPVwic2hvd0ZvbGRlckVkaXRvclwiXG4gICAgICAgICAgICAgICAgOmNyZWF0ZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICA6Y29udGFpbmVyPVwiY29udGFpbmVyLmlkXCJcbiAgICAgICAgICAgICAgICA6cGF0aD1cImVkaXRlZEZvbGRlclBhdGhcIlxuICAgICAgICAgICAgICAgIEBjbG9zZWQ9XCJmb2xkZXJFZGl0b3JDbG9zZWRcIlxuICAgICAgICAgICAgICAgIEB1cGRhdGVkPVwibG9hZEFzc2V0c1wiPlxuICAgICAgICAgICAgPC9mb2xkZXItZWRpdG9yPlxuXG4gICAgICAgIDwvZGl2PlxuXG5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBEZXRlY3RzRmlsZURyYWdnaW5nIGZyb20gJy4uLy4uL0RldGVjdHNGaWxlRHJhZ2dpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEdyaWRMaXN0aW5nOiByZXF1aXJlKCcuL0xpc3RpbmcvR3JpZExpc3RpbmcudnVlJyksXG4gICAgICAgIFRhYmxlTGlzdGluZzogcmVxdWlyZSgnLi9MaXN0aW5nL1RhYmxlTGlzdGluZy52dWUnKSxcbiAgICAgICAgVXBsb2FkZXI6IHJlcXVpcmUoJy4uL1VwbG9hZGVyLnZ1ZScpLFxuICAgICAgICBVcGxvYWRzOiByZXF1aXJlKCcuLi9VcGxvYWRzLnZ1ZScpLFxuICAgICAgICBBc3NldEVkaXRvcjogcmVxdWlyZSgnLi4vRWRpdG9yL0VkaXRvci52dWUnKSxcbiAgICAgICAgRm9sZGVyRWRpdG9yOiByZXF1aXJlKCcuL0ZvbGRlckVkaXRvci52dWUnKSxcbiAgICAgICAgQnJlYWRjcnVtYnM6IHJlcXVpcmUoJy4vQnJlYWRjcnVtYnMudnVlJylcbiAgICB9LFxuXG5cbiAgICBtaXhpbnM6IFtEZXRlY3RzRmlsZURyYWdnaW5nXSxcblxuXG4gICAgcHJvcHM6IFtcbiAgICAgICAgJ3NlbGVjdGVkQ29udGFpbmVyJywgICAvLyBUaGUgSUQgb2YgdGhlIGNvbnRhaW5lciB0byBkaXNwbGF5LCBkZXRlcm1pbmVkIGJ5IGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICAgICAgJ3NlbGVjdGVkUGF0aCcsICAgICAgICAvLyBUaGUgcGF0aCB0byBkaXNwbGF5LCBkZXRlcm1pbmVkIGJ5IGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICAgICAgJ3Jlc3RyaWN0TmF2aWdhdGlvbicsICAvLyBXaGV0aGVyIHRvIHJlc3RyaWN0IHRvIGEgc2luZ2xlIGZvbGRlciBhbmQgcHJldmVudCBuYXZpZ2F0aW9uLlxuICAgICAgICAnc2VsZWN0ZWRBc3NldHMnLFxuICAgICAgICAnbWF4RmlsZXMnXG4gICAgXSxcblxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWRpbmdBc3NldHM6IHRydWUsXG4gICAgICAgICAgICBpbml0aWFsaXplZEFzc2V0czogZmFsc2UsXG4gICAgICAgICAgICBsb2FkaW5nQ29udGFpbmVyczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcnM6IG51bGwsXG4gICAgICAgICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICAgICAgICBwYXRoOiBudWxsLFxuICAgICAgICAgICAgYXNzZXRzOiBbXSxcbiAgICAgICAgICAgIGZvbGRlcnM6IFtdLFxuICAgICAgICAgICAgZm9sZGVyOiB7fSxcbiAgICAgICAgICAgIGRpc3BsYXlNb2RlOiAndGFibGUnLFxuICAgICAgICAgICAgdXBsb2FkczogW10sXG4gICAgICAgICAgICBkcmFnZ2luZ0ZpbGU6IGZhbHNlLFxuICAgICAgICAgICAgcGFnaW5hdGlvbjoge30sXG4gICAgICAgICAgICBzZWxlY3RlZFBhZ2U6IDEsXG4gICAgICAgICAgICBlZGl0ZWRBc3NldElkOiBudWxsLFxuICAgICAgICAgICAgc2hvd0ZvbGRlckNyZWF0b3I6IGZhbHNlLFxuICAgICAgICAgICAgZWRpdGVkRm9sZGVyUGF0aDogbnVsbCxcbiAgICAgICAgICAgIGVkaXRvckhhc0NoaWxkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2VhcmNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHNvcnQ6ICd0aXRsZScsXG4gICAgICAgICAgICBzb3J0T3JkZXI6ICdhc2MnXG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGluaXRpYWxpemVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZWRBc3NldHMgJiYgIXRoaXMubG9hZGluZ0NvbnRhaW5lcnM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9hZGluZygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRpbmdBc3NldHMgfHwgdGhpcy5sb2FkaW5nQ29udGFpbmVycztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGUgY3VycmVudCBmb2xkZXIgaGFzIGFzc2V0cy5cbiAgICAgICAgICovXG4gICAgICAgIGhhc0Fzc2V0cygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0cy5sZW5ndGggPiAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc1N1YmZvbGRlcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJmb2xkZXJzLmxlbmd0aCA+IDA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNFbXB0eSgpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5oYXNBc3NldHMgJiYgIXRoaXMuaGFzU3ViZm9sZGVycztcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5FZGl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbignYXNzZXRzOicrIHRoaXMuY29udGFpbmVyLmlkICsnOmVkaXQnKVxuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dTaWRlYmFyKCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5pbml0aWFsaXplZCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1NlYXJjaGluZykgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yZXN0cmljdE5hdmlnYXRpb24pIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY29udGFpbmVycykubGVuZ3RoID4gMTtcbiAgICAgICAgfSxcblxuICAgICAgICBsaXN0aW5nQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRpc3BsYXlNb2RlID09PSAnZ3JpZCcpID8gJ0dyaWRMaXN0aW5nJyA6ICdUYWJsZUxpc3RpbmcnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZ1bGxQYXRoKCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5jb250YWluZXIpIHJldHVybjtcblxuICAgICAgICAgICAgbGV0IGZ1bGxQYXRoID0gdGhpcy5jb250YWluZXIuaWQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBhdGggIT09ICcvJykge1xuICAgICAgICAgICAgICAgIGZ1bGxQYXRoICs9ICcvJyArIHRoaXMucGF0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZ1bGxQYXRoO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN1YmZvbGRlcnMoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN0cmljdE5hdmlnYXRpb24pIHJldHVybiBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9sZGVycztcbiAgICAgICAgfSxcblxuICAgICAgICB1cGxvYWRFbGVtZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dBc3NldEVkaXRvcigpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZWRpdGVkQXNzZXRJZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0ZvbGRlckVkaXRvcigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVkaXRlZEZvbGRlclBhdGggIT09IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF4RmlsZXNSZWFjaGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF4RmlsZXNcbiAgICAgICAgICAgICAgICAmJiB0aGlzLnNlbGVjdGVkQXNzZXRzLmxlbmd0aCA+PSB0aGlzLm1heEZpbGVzXG4gICAgICAgIH1cblxuICAgIH0sXG5cblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLnBhdGggPSB0aGlzLnNlbGVjdGVkUGF0aDtcblxuICAgICAgICAvLyBXZSBuZWVkIGFsbCB0aGUgY29udGFpbmVycyBzaW5jZSB0aGV5J2xsIGJlIGRpc3BsYXllZCBpbiB0aGUgc2lkZWJhci4gVGhpcyB3aWxsIGFsc28gbG9hZFxuICAgICAgICAvLyB1cCB0aGUgY3VycmVudCBjb250YWluZXIgb2JqZWN0IHVzaW5nIHRoZSBpbml0aWFsIGNvbnRhaW5lciBpZC4gU2V0dGluZyB0aGUgY29udGFpbmVyXG4gICAgICAgIC8vIHByb3BlcnR5IHdpbGwgdHJpZ2dlciBsb2FkaW5nIG9mIGFzc2V0cyBzaW5jZSB0aGVyZSdzIGEgd2F0Y2hlciByZWFjdGluZyB0byBpdC5cbiAgICAgICAgdGhpcy5sb2FkQ29udGFpbmVycygpO1xuXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGUgPSBDb29raWVzLmdldCgnc3RhdGFtaWMuYXNzZXRzLmxpc3Rpbmdfdmlld19tb2RlJykgfHwgJ3RhYmxlJztcbiAgICB9LFxuXG5cbiAgICBldmVudHM6IHtcblxuICAgICAgICAnY2xvc2UtZWRpdG9yJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lZGl0b3JIYXNDaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRicm9hZGNhc3QoJ2Nsb3NlLWNoaWxkLWVkaXRvcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNob3dGb2xkZXJDcmVhdG9yID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVkaXRlZEFzc2V0SWQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5lZGl0ZWRGb2xkZXJQYXRoID0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICAncmVmcmVzaC1hc3NldHMnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZEFzc2V0cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgICdkZWxldGUtYXNzZXRzJzogZnVuY3Rpb24oaWRzKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZUFzc2V0KGlkcyk7XG4gICAgICAgIH0sXG5cbiAgICB9LFxuXG5cbiAgICB3YXRjaDoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuZXZlciB0aGUgZnVsbFBhdGggY29tcHV0ZWQgcHJvcGVydHkgaXMgY2hhbmdlZCwgaXQgbWVhbnNcbiAgICAgICAgICogdGhhdCBlaXRoZXIgdGhlIHBhdGggb3IgdGhlIGNvbnRhaW5lciBoYXMgYmVlbiBtb2RpZmllZCxcbiAgICAgICAgICogc28gdGhlbiBhIG5ldyBzZXQgb2YgYXNzZXRzIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBmdWxsUGF0aCgpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZEFzc2V0cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoZSBzZWxlY3RlZCBjb250YWluZXIgcHJvcCBoYXMgY2hhbmdlZCwgdGhlIHBhcmVudCBjb21wb25lbnRcbiAgICAgICAgICogaGFzIGluZGljYXRlZCB0aGF0IGEgZGlmZmVyZW50IHNldCBvZiBhc3NldHMgc2hvdWxkIGJlIHNob3duLlxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0ZWRDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJdO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoZSBzZWxlY3RlZCBwYXRoIHByb3AgaGFzIGNoYW5nZWQsIHRoZSBwYXJlbnQgY29tcG9uZW50XG4gICAgICAgICAqIGhhcyBpbmRpY2F0ZWQgdGhhdCBhIGRpZmZlcmVudCBzZXQgb2YgYXNzZXRzIHNob3VsZCBiZSBzaG93bi5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGVkUGF0aChwYXRoKSB7XG4gICAgICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHNlbGVjdGVkIGFzc2V0cyBhcmUgdXBkYXRlZC9tb2RpZmllZCwgdGhlIHBhcmVudCBjb21wb25lbnQgc2hvdWxkIGJlIG5vdGlmaWVkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0ZWRBc3NldHMoc2VsZWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0aW9ucy11cGRhdGVkJywgc2VsZWN0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VhcmNoVGVybSh0ZXJtKSB7XG4gICAgICAgICAgICBpZiAodGVybSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEFzc2V0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvYWQgYXNzZXQgY29udGFpbmVyIGRhdGFcbiAgICAgICAgICovXG4gICAgICAgIGxvYWRDb250YWluZXJzKCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQoY3BfdXJsKCdhc3NldHMvY29udGFpbmVycy9nZXQnKSkuc3VjY2VzcygocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGNvbnRhaW5lcnMgcHJvcGVydHkgdG8gYSBjb2xsZWN0aW9uIG9mIHRoZSBpdGVtcyBpbiB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBjZXJ0YWluIGtleXMsIGFuZCB3ZSB3YW50IHRoZW0gaW5kZXhlZCBieVxuICAgICAgICAgICAgICAgIC8vIElEIHRvIG1ha2UgcmV0cmlldmluZyBjb250YWluZXIgdmFsdWVzIHNpbXBsZXIgZG93biB0aGUgcm9hZC5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lcnMgPSBfLmNoYWluKHJlc3BvbnNlLml0ZW1zKS5tYXAoKGNvbnRhaW5lcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5waWNrKGNvbnRhaW5lciwgJ2lkJywgJ3RpdGxlJyk7XG4gICAgICAgICAgICAgICAgfSkuaW5kZXhCeSgnaWQnKS52YWx1ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0aGUgY29udGFpbmVyIHByb3BlcnR5IHRvIGJlIHRoZSByZXRyaWV2ZWQgZGF0YSBvYmplY3QuXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcnNbdGhpcy5zZWxlY3RlZENvbnRhaW5lcl07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdDb250YWluZXJzID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZCBhc3NldHMgZnJvbSB0aGUgY29udGFpbmVyIGFuZCBmb2xkZXIgc3BlY2lmaWVkXG4gICAgICAgICAqL1xuICAgICAgICBsb2FkQXNzZXRzKHBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0Fzc2V0cyA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ2Fzc2V0cy9icm93c2UnKSwge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIuaWQsXG4gICAgICAgICAgICAgICAgcGF0aDogdGhpcy5wYXRoLFxuICAgICAgICAgICAgICAgIHBhZ2U6IHRoaXMuc2VsZWN0ZWRQYWdlLFxuICAgICAgICAgICAgICAgIHNvcnQ6IHRoaXMuc29ydCxcbiAgICAgICAgICAgICAgICBkaXI6IHRoaXMuc29ydE9yZGVyXG4gICAgICAgICAgICB9KS5zdWNjZXNzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzID0gcmVzcG9uc2UuYXNzZXRzO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9sZGVycyA9IHJlc3BvbnNlLmZvbGRlcnM7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2xkZXIgPSByZXNwb25zZS5mb2xkZXI7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uID0gcmVzcG9uc2UucGFnaW5hdGlvbjtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUGFnZSA9IHJlc3BvbnNlLnBhZ2luYXRpb24uY3VycmVudFBhZ2U7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nQXNzZXRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZEFzc2V0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NlYXJjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VhcmNoKCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nQXNzZXRzID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnYXNzZXRzL3NlYXJjaCcpLCB7XG4gICAgICAgICAgICAgICAgdGVybTogdGhpcy5zZWFyY2hUZXJtLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIuaWQsXG4gICAgICAgICAgICAgICAgZm9sZGVyOiB0aGlzLmZvbGRlci5wYXRoLFxuICAgICAgICAgICAgICAgIHJlc3RyaWN0TmF2aWdhdGlvbjogdGhpcy5yZXN0cmljdE5hdmlnYXRpb25cbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NlYXJjaGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NldHMgPSByZXNwb25zZS5hc3NldHM7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2xkZXJzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nQXNzZXRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZEFzc2V0cyA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBhIGZvbGRlciB3YXMgc2VsZWN0ZWQgZnJvbSB3aXRoaW4gbGlzdGluZyBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBmb2xkZXJTZWxlY3RlZChwYXRoKSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyIHJlLWxvYWRpbmcgb2YgYXNzZXRzIGluIHRoZSBzZWxlY3RlZCBmb2xkZXIuXG4gICAgICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFBhZ2UgPSAxO1xuXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGFuIGV2ZW50IHNvIHRoZSBwYXJlbnQgY2FuIGRvIHNvbWV0aGluZy5cbiAgICAgICAgICAgIC8vIGVnLiBUaGUgYXNzZXQgbWFuYWdlciB3b3VsZCB3YW50IHRvIGNoYW5nZSB0aGUgYnJvd3NlciBVUkwuXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCduYXZpZ2F0ZWQnLCB0aGlzLmNvbnRhaW5lci5pZCwgdGhpcy5wYXRoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBhIGNvbnRhaW5lciBpcyBzZWxlY3RlZC9jbGlja2VkIGluIHRoZSBzaWRlYmFyXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyIHJlLWxvYWRpbmcgb2YgYXNzZXRzIGluIHRoZSBzZWxlY3RlZCBjb250YWluZXIuXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJdO1xuICAgICAgICAgICAgdGhpcy5wYXRoID0gJy8nO1xuXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGFuIGV2ZW50IHNvIHRoZSBwYXJlbnQgY2FuIGRvIHNvbWV0aGluZy5cbiAgICAgICAgICAgIC8vIGVnLiBUaGUgYXNzZXQgbWFuYWdlciB3b3VsZCB3YW50IHRvIGNoYW5nZSB0aGUgYnJvd3NlciBVUkwuXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCduYXZpZ2F0ZWQnLCB0aGlzLmNvbnRhaW5lci5pZCwgdGhpcy5wYXRoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBhbiBhc3NldCBoYXMgYmVlbiBzZWxlY3RlZC5cbiAgICAgICAgICovXG4gICAgICAgIGFzc2V0U2VsZWN0ZWQoaWQpIHtcbiAgICAgICAgICAgIC8vIEZvciBzaW5nbGUgYXNzZXQgc2VsZWN0aW9ucywgY2xpY2tpbmcgYSBkaWZmZXJlbnQgYXNzZXQgd2lsbCByZXBsYWNlIHRoZSBzZWxlY3Rpb24uXG4gICAgICAgICAgICBpZiAodGhpcy5tYXhGaWxlcyA9PT0gMSAmJiB0aGlzLm1heEZpbGVzUmVhY2hlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBc3NldHMgPSBbaWRdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb21wbGV0ZWx5IHByZXZlbnQgYWRkaXRpb25hbCBzZWxlY3Rpb25zIHdoZW4gdGhlIGxpbWl0IGhhcyBiZWVuIGhpdC5cbiAgICAgICAgICAgIGlmICh0aGlzLm1heEZpbGVzUmVhY2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRG9uJ3QgYWRkIHRoZSBzYW1lIGFzc2V0IHR3aWNlLlxuICAgICAgICAgICAgaWYgKF8odGhpcy5zZWxlY3RlZEFzc2V0cykuY29udGFpbnMoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQXNzZXRzLnB1c2goaWQpO1xuXG4gICAgICAgICAgICAvLyBGb3Igc29tZSByZWFzb24sIFZ1ZSB3YXNuJ3QgcmVhY3RpbmcgdG8gbmV3IGl0ZW0uXG4gICAgICAgICAgICAvLyBJdCB3b3VsZCBzaG93IHVwIGluIHRoZSBkYXRhLCBidXQgd291bGRuJ3QgYWRqdXN0IHRoZSB2aWV3LlxuICAgICAgICAgICAgLy8gTWFwcGluZyBvdmVyIGl0c2VsZiBmaXhlcyB0aGlzLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFzc2V0cyA9IF8odGhpcy5zZWxlY3RlZEFzc2V0cykubWFwKHZhbCA9PiB2YWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGFuIGFzc2V0IGhhcyBiZWVuIGRlc2VsZWN0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBhc3NldERlc2VsZWN0ZWQoaWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBc3NldHMgPSBfKHRoaXMuc2VsZWN0ZWRBc3NldHMpLndpdGhvdXQoaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGFuIGFzc2V0IGhhcyBiZWVuIGNob3NlbiBmb3IgZWRpdGluZy5cbiAgICAgICAgICovXG4gICAgICAgIGVkaXRBc3NldChpZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FuRWRpdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdGVkQXNzZXRJZCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxldGUgdGhlIGdpdmVuIGFzc2V0IGFuZCByZWZyZXNoIHRoZSBicm93c2VyLlxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlQXNzZXQoaWRzKSB7XG4gICAgICAgICAgICBpZHMgPSBBcnJheS5pc0FycmF5KGlkcykgPyBpZHMgOiBbaWRzXTtcblxuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbmZpcm1fZGVsZXRlX2l0ZW1zJywgaWRzKSxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC55ZXNfaW1fc3VyZScpLFxuICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IHRyYW5zbGF0ZSgnY3AuY2FuY2VsJyksXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZVxuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGNwX3VybCgnYXNzZXRzL2RlbGV0ZScpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kaHR0cC5kZWxldGUodXJsLCB7IGlkczogaWRzIH0pLnN1Y2Nlc3MoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZEFzc2V0cygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQXNzZXRzID0gXyh0aGlzLnNlbGVjdGVkQXNzZXRzKS5kaWZmZXJlbmNlKGlkcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xvc2UgdGhlIGFzc2V0IGVkaXRvci5cbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlQXNzZXRFZGl0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnbW9kYWwuY2xvc2UnKTtcbiAgICAgICAgICAgIHRoaXMuZWRpdGVkQXNzZXRJZCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYW4gYXNzZXQgaGFzIGJlZW4gc2F2ZWQgZnJvbSB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgYXNzZXRTYXZlZCgpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBc3NldEVkaXRvcigpO1xuICAgICAgICAgICAgdGhpcy5sb2FkQXNzZXRzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYW4gYXNzZXQgd2FzIGRlbGV0ZWQgZnJvbSB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgYXNzZXREZWxldGVkKCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFzc2V0RWRpdG9yKCk7XG4gICAgICAgICAgICB0aGlzLmxvYWRBc3NldHMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBhbiBhc3NldCB3YXMgbW92ZWQgdG8gYW5vdGhlciBmb2xkZXIgZnJvbSB0aGUgZWRpdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgYXNzZXRNb3ZlZChmb2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBc3NldEVkaXRvcigpO1xuICAgICAgICAgICAgdGhpcy5mb2xkZXJTZWxlY3RlZChmb2xkZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGFuIGFzc2V0IHdhcyBkb3VibGUgY2xpY2tlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBldmVudCB3b3VsZCBvbmx5IGV2ZXIgYmUgY2FsbGVkIHdoZW4gdGhlIGJyb3dzZXIgaXMgdXNlZCBpbiB0aGUgY29udGV4dCBvZiBhXG4gICAgICAgICAqIGZpZWxkdHlwZS4gV2hlbiB1c2VkIGluIHRoZSBcIkFzc2V0c1wiIHNlY3Rpb24sIHRoZSBkb3VibGUgY2xpY2sgd291bGQgYmUgaGFuZGxlZFxuICAgICAgICAgKiBmcm9tIHdpdGhpbiB0aGUgYXNzZXQgY29tcG9uZW50IGFuZCBjYXVzZWQgdGhlIGVkaXQgZGlhbG9nIHRvIGJlIG9wZW5lZC5cbiAgICAgICAgICovXG4gICAgICAgIGFzc2V0RG91YmxlY2xpY2tlZChpZCkge1xuICAgICAgICAgICAgdGhpcy5hc3NldFNlbGVjdGVkKGlkKTtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Fzc2V0LWRvdWJsZWNsaWNrZWQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyB0aGUgZmlsZSB1cGxvYWQgZmluZGVyIHdpbmRvdy5cbiAgICAgICAgICovXG4gICAgICAgIHVwbG9hZEZpbGUoKSB7XG4gICAgICAgICAgICB0aGlzLiRyZWZzLnVwbG9hZGVyLmJyb3dzZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGEgcGFnZSB3YXMgc2VsZWN0ZWQgaW4gdGhlIHBhZ2luYXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBwYWdpbmF0aW9uUGFnZVNlbGVjdGVkKHBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRQYWdlID0gcGFnZTtcbiAgICAgICAgICAgIHRoaXMubG9hZEFzc2V0cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUZvbGRlcigpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0ZvbGRlckNyZWF0b3IgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvbGRlckNyZWF0b3JDbG9zZWQoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dGb2xkZXJDcmVhdG9yID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9sZGVyQ3JlYXRlZChwYXRoKSB7XG4gICAgICAgICAgICB0aGlzLmZvbGRlclNlbGVjdGVkKHBhdGgpXG4gICAgICAgIH0sXG5cbiAgICAgICAgZWRpdEZvbGRlcihmb2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZWRpdGVkRm9sZGVyUGF0aCA9IGZvbGRlcjtcbiAgICAgICAgfSxcblxuICAgICAgICBmb2xkZXJFZGl0b3JDbG9zZWQoKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRlZEZvbGRlclBhdGggPSBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvbGRlckRlbGV0ZWQoZm9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRBc3NldHMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGxvYWRzVXBkYXRlZCh1cGxvYWRzKSB7XG4gICAgICAgICAgICB0aGlzLiRzZXQoJ3VwbG9hZHMnLCB1cGxvYWRzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBkaXNwbGF5IG1vZGUgYW5kIHJlbWVtYmVyIGl0IGluIGEgY29va2llXG4gICAgICAgICAqL1xuICAgICAgICBzZXREaXNwbGF5TW9kZShtb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlNb2RlID0gbW9kZTtcbiAgICAgICAgICAgIENvb2tpZXMuc2V0KCdzdGF0YW1pYy5hc3NldHMubGlzdGluZ192aWV3X21vZGUnLCBtb2RlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhc3NldHNEcmFnZ2VkVG9Gb2xkZXIoZm9sZGVyKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBjcF91cmwoJy9hc3NldHMvbW92ZScpO1xuXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0czogdGhpcy5zZWxlY3RlZEFzc2V0cyxcbiAgICAgICAgICAgICAgICBmb2xkZXI6IGZvbGRlcixcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLmlkXG4gICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KHVybCwgcGF5bG9hZCkuc3VjY2VzcygocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRBc3NldHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQXNzZXRzID0gW107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzb3J0Qnkoc29ydCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWFyY2hpbmcpIHJldHVybjtcblxuICAgICAgICAgICAgbGV0IHNvcnRPcmRlciA9ICdhc2MnO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBzb3J0IG9yZGVyIHdhcyBjbGlja2VkIGFnYWluLCBjaGFuZ2UgdGhlIGRpcmVjdGlvbi5cbiAgICAgICAgICAgIGlmICh0aGlzLnNvcnQgPT09IHNvcnQpIHtcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXIgPSB0aGlzLnNvcnRPcmRlciA9PT0gJ2FzYycgPyAnZGVzYycgOiAnYXNjJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zb3J0ID0gc29ydDtcbiAgICAgICAgICAgIHRoaXMuc29ydE9yZGVyID0gc29ydE9yZGVyO1xuICAgICAgICAgICAgdGhpcy5sb2FkQXNzZXRzKCk7XG4gICAgICAgIH0sXG5cbiAgICB9XG5cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBCcm93c2VyLnZ1ZT9mZWMwODU2YSIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0dyaWRMaXN0aW5nLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vR3JpZExpc3RpbmcudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0dyaWRMaXN0aW5nLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC1ncmlkLWxpc3RpbmdcIlxuICAgICAgICB2LWlmPVwiaGFzUGFyZW50ICYmICFyZXN0cmljdE5hdmlnYXRpb24gfHwgKCFpc1NlYXJjaGluZyB8fCAoaXNTZWFyY2hpbmcgJiYgaGFzUmVzdWx0cykpXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LXRpbGUgaXMtZm9sZGVyXCJcbiAgICAgICAgICAgICBAY2xpY2sucHJldmVudD1cInNlbGVjdEZvbGRlcihmb2xkZXIucGFyZW50X3BhdGgpXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtdGh1bWItY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGZpbGUtaWNvbiBleHRlbnNpb249XCJmb2xkZXJcIj48L2ZpbGUtaWNvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LW1ldGFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtZmlsZW5hbWVcIj4uLjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxmb2xkZXItdGlsZVxuICAgICAgICAgICAgdi1mb3I9XCJmb2xkZXIgaW4gc3ViZm9sZGVyc1wiXG4gICAgICAgICAgICA6Zm9sZGVyPVwiZm9sZGVyXCJcbiAgICAgICAgICAgIEBzZWxlY3RlZD1cInNlbGVjdEZvbGRlclwiXG4gICAgICAgICAgICBAZWRpdGluZz1cImVkaXRGb2xkZXJcIlxuICAgICAgICAgICAgQGRlbGV0aW5nPVwiZGVsZXRlRm9sZGVyXCI+XG4gICAgICAgIDwvZm9sZGVyLXRpbGU+XG5cbiAgICAgICAgPGFzc2V0LXRpbGVcbiAgICAgICAgICAgIHYtZm9yPVwiYXNzZXQgaW4gYXNzZXRzXCJcbiAgICAgICAgICAgIDphc3NldD1cImFzc2V0XCJcbiAgICAgICAgICAgIDpzZWxlY3RlZC1hc3NldHM9XCJzZWxlY3RlZEFzc2V0c1wiXG4gICAgICAgICAgICBAc2VsZWN0ZWQ9XCJzZWxlY3RBc3NldFwiXG4gICAgICAgICAgICBAZGVzZWxlY3RlZD1cImRlc2VsZWN0QXNzZXRcIlxuICAgICAgICAgICAgQGVkaXRpbmc9XCJlZGl0QXNzZXRcIlxuICAgICAgICAgICAgQGRvdWJsZWNsaWNrZWQ9XCJhc3NldERvdWJsZWNsaWNrZWRcIj5cbiAgICAgICAgPC9hc3NldC10aWxlPlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmltcG9ydCBMaXN0aW5nIGZyb20gJy4vTGlzdGluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0xpc3RpbmddLFxuXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEFzc2V0VGlsZTogcmVxdWlyZSgnLi9Bc3NldFRpbGUudnVlJyksXG4gICAgICAgIEZvbGRlclRpbGU6IHJlcXVpcmUoJy4vRm9sZGVyVGlsZS52dWUnKVxuICAgIH0sXG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEdyaWRMaXN0aW5nLnZ1ZT8yZDg2N2VhMiIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Fzc2V0VGlsZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Fzc2V0VGlsZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvQXNzZXRUaWxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC10aWxlXCJcbiAgICAgICAgIDpjbGFzcz1cIntcbiAgICAgICAgICAgICAnaXMtaW1hZ2UnOiBpc0ltYWdlICYmICFjYW5TaG93U3ZnLFxuICAgICAgICAgICAgICdpcy1zdmcnOiBjYW5TaG93U3ZnLFxuICAgICAgICAgICAgICdpcy1maWxlJzogIWlzSW1hZ2UgJiYgIWNhblNob3dTdmcsXG4gICAgICAgICAgICAgJ2lzLXNlbGVjdGVkJzogaXNTZWxlY3RlZFxuICAgICAgICAgfVwiXG4gICAgICAgICA6dGl0bGU9XCJhc3NldC5maWxlbmFtZVwiXG4gICAgICAgICBAY2xpY2s9XCJ0b2dnbGVcIlxuICAgICAgICAgQGRibGNsaWNrPVwiZG91YmxlQ2xpY2tlZFwiXG4gICAgICAgICBAZHJhZ3N0YXJ0PVwiYXNzZXREcmFnU3RhcnRcIlxuICAgID5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LXRodW1iLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiY2FuU2hvd1N2Z1wiXG4gICAgICAgICAgICAgICAgIGNsYXNzPVwic3ZnLWltZ1wiXG4gICAgICAgICAgICAgICAgIDpzdHlsZT1cInN2Z0JhY2tncm91bmRTdHlsZVwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC10aHVtYlwiIHYtaWY9XCJpc0ltYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz1cImFzc2V0LnRodW1ibmFpbFwiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxmaWxlLWljb24gdi1lbHNlIDpleHRlbnNpb249XCJhc3NldC5leHRlbnNpb25cIj48L2ZpbGUtaWNvbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1tZXRhXCIgOnRpdGxlPVwibGFiZWxcIj57eyBsYWJlbCB9fTwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmltcG9ydCBBc3NldCBmcm9tICcuL0Fzc2V0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQXNzZXRdLFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGlzSW1hZ2UoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hc3NldC5pc19pbWFnZTtcbiAgICAgICAgfSxcblxuICAgICAgICBpY29uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlX3VybCgnaW1nL2ZpbGV0eXBlcy8nKyB0aGlzLmFzc2V0LmV4dGVuc2lvbiArJy5wbmcnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBsYWJlbCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0LnRpdGxlIHx8IHRoaXMuYXNzZXQuYmFzZW5hbWU7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQXNzZXRUaWxlLnZ1ZT8wN2ZlNjQ0MiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC10aWxlIDpjbGFzcz1cXFwie1xcbiAgICAgICAgICdpcy1pbWFnZSc6IGlzSW1hZ2UgJiYgIWNhblNob3dTdmcsXFxuICAgICAgICAgJ2lzLXN2Zyc6IGNhblNob3dTdmcsXFxuICAgICAgICAgJ2lzLWZpbGUnOiAhaXNJbWFnZSAmJiAhY2FuU2hvd1N2ZyxcXG4gICAgICAgICAnaXMtc2VsZWN0ZWQnOiBpc1NlbGVjdGVkXFxuICAgICB9XFxcIiA6dGl0bGU9YXNzZXQuZmlsZW5hbWUgQGNsaWNrPXRvZ2dsZSBAZGJsY2xpY2s9ZG91YmxlQ2xpY2tlZCBAZHJhZ3N0YXJ0PWFzc2V0RHJhZ1N0YXJ0PiA8ZGl2IGNsYXNzPWFzc2V0LXRodW1iLWNvbnRhaW5lcj4gPGRpdiB2LWlmPWNhblNob3dTdmcgY2xhc3M9c3ZnLWltZyA6c3R5bGU9c3ZnQmFja2dyb3VuZFN0eWxlPiA8L2Rpdj4gPHRlbXBsYXRlIHYtZWxzZT4gPGRpdiBjbGFzcz1hc3NldC10aHVtYiB2LWlmPWlzSW1hZ2U+IDxpbWcgOnNyYz1hc3NldC50aHVtYm5haWw+IDwvZGl2PiA8ZmlsZS1pY29uIHYtZWxzZSA6ZXh0ZW5zaW9uPWFzc2V0LmV4dGVuc2lvbj48L2ZpbGUtaWNvbj4gPC90ZW1wbGF0ZT4gPC9kaXY+IDxkaXYgY2xhc3M9YXNzZXQtbWV0YSA6dGl0bGU9bGFiZWw+e3sgbGFiZWwgfX08L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Bc3NldFRpbGUudnVlXG4vLyBtb2R1bGUgaWQgPSAyNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vRm9sZGVyVGlsZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZvbGRlclRpbGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0ZvbGRlclRpbGUudnVlXG4vLyBtb2R1bGUgaWQgPSAyNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImFzc2V0LXRpbGUgaXMtZm9sZGVyXCJcbiAgICAgICAgIEBjbGljay5wcmV2ZW50PVwic2VsZWN0Rm9sZGVyKGZvbGRlci5wYXRoKVwiPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC10aHVtYi1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxmaWxlLWljb24gZXh0ZW5zaW9uPVwiZm9sZGVyXCI+PC9maWxlLWljb24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1tZXRhXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtZmlsZW5hbWVcIiA6dGl0bGU9XCJsYWJlbFwiPnt7IGZvbGRlci50aXRsZSB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgRm9sZGVyIGZyb20gJy4vRm9sZGVyJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRm9sZGVyXVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBGb2xkZXJUaWxlLnZ1ZT85ZGZiNzQwYyIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1cXFwiYXNzZXQtdGlsZSBpcy1mb2xkZXJcXFwiIEBjbGljay5wcmV2ZW50PXNlbGVjdEZvbGRlcihmb2xkZXIucGF0aCk+IDxkaXYgY2xhc3M9YXNzZXQtdGh1bWItY29udGFpbmVyPiA8ZmlsZS1pY29uIGV4dGVuc2lvbj1mb2xkZXI+PC9maWxlLWljb24+IDwvZGl2PiA8ZGl2IGNsYXNzPWFzc2V0LW1ldGE+IDxkaXYgY2xhc3M9YXNzZXQtZmlsZW5hbWUgOnRpdGxlPWxhYmVsPnt7IGZvbGRlci50aXRsZSB9fTwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Gb2xkZXJUaWxlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC1ncmlkLWxpc3Rpbmcgdi1pZj1cXFwiaGFzUGFyZW50ICYmICFyZXN0cmljdE5hdmlnYXRpb24gfHwgKCFpc1NlYXJjaGluZyB8fCAoaXNTZWFyY2hpbmcgJiYgaGFzUmVzdWx0cykpXFxcIj4gPGRpdiBjbGFzcz1cXFwiYXNzZXQtdGlsZSBpcy1mb2xkZXJcXFwiIEBjbGljay5wcmV2ZW50PXNlbGVjdEZvbGRlcihmb2xkZXIucGFyZW50X3BhdGgpPiA8ZGl2IGNsYXNzPWFzc2V0LXRodW1iLWNvbnRhaW5lcj4gPGZpbGUtaWNvbiBleHRlbnNpb249Zm9sZGVyPjwvZmlsZS1pY29uPiA8L2Rpdj4gPGRpdiBjbGFzcz1hc3NldC1tZXRhPiA8ZGl2IGNsYXNzPWFzc2V0LWZpbGVuYW1lPi4uPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGZvbGRlci10aWxlIHYtZm9yPVxcXCJmb2xkZXIgaW4gc3ViZm9sZGVyc1xcXCIgOmZvbGRlcj1mb2xkZXIgQHNlbGVjdGVkPXNlbGVjdEZvbGRlciBAZWRpdGluZz1lZGl0Rm9sZGVyIEBkZWxldGluZz1kZWxldGVGb2xkZXI+IDwvZm9sZGVyLXRpbGU+IDxhc3NldC10aWxlIHYtZm9yPVxcXCJhc3NldCBpbiBhc3NldHNcXFwiIDphc3NldD1hc3NldCA6c2VsZWN0ZWQtYXNzZXRzPXNlbGVjdGVkQXNzZXRzIEBzZWxlY3RlZD1zZWxlY3RBc3NldCBAZGVzZWxlY3RlZD1kZXNlbGVjdEFzc2V0IEBlZGl0aW5nPWVkaXRBc3NldCBAZG91YmxlY2xpY2tlZD1hc3NldERvdWJsZWNsaWNrZWQ+IDwvYXNzZXQtdGlsZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9HcmlkTGlzdGluZy52dWVcbi8vIG1vZHVsZSBpZCA9IDI1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UYWJsZUxpc3RpbmcudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9UYWJsZUxpc3RpbmcudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL1RhYmxlTGlzdGluZy52dWVcbi8vIG1vZHVsZSBpZCA9IDI1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtdGFibGUtbGlzdGluZ1wiPlxuXG4gICAgICAgIDx0YWJsZSB2LWlmPVwiIWlzU2VhcmNoaW5nIHx8IChpc1NlYXJjaGluZyAmJiBoYXNSZXN1bHRzKVwiPlxuXG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGg+PC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj1cImNvbHVtbiBpbiBjb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXh0cmEtY29sJzogY29sdW1uLmV4dHJhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3RpdmUnOiBpc0NvbHVtbkFjdGl2ZShjb2x1bW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb2x1bW4tc29ydGFibGUnOiAhaXNTZWFyY2hpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiJGVtaXQoJ3NvcnRlZCcsIGNvbHVtbi5maWVsZClcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBjb2x1bW4ubGFiZWwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIHYtaWY9XCJpc0NvbHVtbkFjdGl2ZShjb2x1bW4pXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvbiBpY29uLWNoZXZyb24te3sgc29ydE9yZGVyID09PSAnYXNjJyA/ICd1cCcgOiAnZG93bicgfX1cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cImNvbHVtbi1hY3Rpb25zXCI+PC90aD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cblxuICAgICAgICAgICAgPHRib2R5PlxuXG4gICAgICAgICAgICAgICAgPHRyIHYtaWY9XCJoYXNQYXJlbnQgJiYgIXJlc3RyaWN0TmF2aWdhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW1nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgQGNsaWNrLnByZXZlbnQ9XCJzZWxlY3RGb2xkZXIoZm9sZGVyLnBhcmVudF9wYXRoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsZS1pY29uIGV4dGVuc2lvbj1cImZvbGRlclwiPjwvZmlsZS1pY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgQGNsaWNrLnByZXZlbnQ9XCJzZWxlY3RGb2xkZXIoZm9sZGVyLnBhcmVudF9wYXRoKVwiPi4uPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj1cIjNcIj4uLjwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgICAgIDx0ciBpcz1cImZvbGRlclJvd1wiXG4gICAgICAgICAgICAgICAgICAgIHYtZm9yPVwiZm9sZGVyIGluIHN1YmZvbGRlcnNcIlxuICAgICAgICAgICAgICAgICAgICA6Zm9sZGVyPVwiZm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgQG9wZW4tZHJvcGRvd249XCJjbG9zZURyb3Bkb3duc1wiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3RlZD1cInNlbGVjdEZvbGRlclwiXG4gICAgICAgICAgICAgICAgICAgIEBlZGl0aW5nPVwiZWRpdEZvbGRlclwiXG4gICAgICAgICAgICAgICAgICAgIEBkZWxldGluZz1cImRlbGV0ZUZvbGRlclwiXG4gICAgICAgICAgICAgICAgICAgIEBkcm9wcGVkLW9uLWZvbGRlcj1cImRyb3BwZWRPbkZvbGRlclwiPlxuICAgICAgICAgICAgICAgIDwvdHI+XG5cbiAgICAgICAgICAgICAgICA8dHIgaXM9XCJhc3NldFJvd1wiXG4gICAgICAgICAgICAgICAgICAgIHYtZm9yPVwiYXNzZXQgaW4gYXNzZXRzXCJcbiAgICAgICAgICAgICAgICAgICAgOmFzc2V0PVwiYXNzZXRcIlxuICAgICAgICAgICAgICAgICAgICA6c2VsZWN0ZWQtYXNzZXRzPVwic2VsZWN0ZWRBc3NldHNcIlxuICAgICAgICAgICAgICAgICAgICBAb3Blbi1kcm9wZG93bj1cImNsb3NlRHJvcGRvd25zXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdGVkPVwic2VsZWN0QXNzZXRcIlxuICAgICAgICAgICAgICAgICAgICBAZGVzZWxlY3RlZD1cImRlc2VsZWN0QXNzZXRcIlxuICAgICAgICAgICAgICAgICAgICBAZWRpdGluZz1cImVkaXRBc3NldFwiXG4gICAgICAgICAgICAgICAgICAgIEBkZWxldGluZz1cImRlbGV0ZUFzc2V0XCJcbiAgICAgICAgICAgICAgICAgICAgQGFzc2V0ZHJhZ3N0YXJ0PVwiYXNzZXREcmFnU3RhcnRcIlxuICAgICAgICAgICAgICAgICAgICBAZG91YmxlY2xpY2tlZD1cImFzc2V0RG91YmxlY2xpY2tlZFwiPlxuICAgICAgICAgICAgICAgIDwvdHI+XG5cbiAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuaW1wb3J0IExpc3RpbmcgZnJvbSAnLi9MaXN0aW5nJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbTGlzdGluZ10sXG5cblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQXNzZXRSb3c6IHJlcXVpcmUoJy4vQXNzZXRSb3cudnVlJyksXG4gICAgICAgIEZvbGRlclJvdzogcmVxdWlyZSgnLi9Gb2xkZXJSb3cudnVlJylcbiAgICB9LFxuXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ2NwLnRpdGxlJyksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnc2l6ZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoJ2NwLmZpbGVzaXplJyksXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnbGFzdE1vZGlmaWVkJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYW5zbGF0ZSgnY3AuZGF0ZV9tb2RpZmllZCcpLFxuICAgICAgICAgICAgICAgICAgICBleHRyYTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgc29ydE9yZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC5zb3J0T3JkZXI7XG4gICAgICAgIH1cblxuICAgIH0sXG5cblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY2xvc2VEcm9wZG93bnM6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuJGJyb2FkY2FzdCgnY2xvc2UtZHJvcGRvd24nLCBjb250ZXh0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkcm9wcGVkT25Gb2xkZXIoZm9sZGVyLCBlKSB7XG4gICAgICAgICAgICBjb25zdCBhc3NldCA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ2Fzc2V0Jyk7XG4gICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5jbGVhckRhdGEoJ2Fzc2V0Jyk7XG5cbiAgICAgICAgICAgIC8vIGRpc2NhcmQgYW55IGRyb3BzIHRoYXQgd2VyZW4ndCBzdGFydGVkIG9uIGFuIGFzc2V0XG4gICAgICAgICAgICBpZiAoYXNzZXQgPT0gJycpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnYXNzZXRzLWRyYWdnZWQtdG8tZm9sZGVyJywgZm9sZGVyKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0NvbHVtbkFjdGl2ZShjb2wpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2VhcmNoaW5nKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIHJldHVybiBjb2wuZmllbGQgPT09IHRoaXMuJHBhcmVudC5zb3J0O1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFRhYmxlTGlzdGluZy52dWU/YTQ2YTg2MmUiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Bc3NldFJvdy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Fzc2V0Um93LnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvTGlzdGluZy9Bc3NldFJvdy52dWVcbi8vIG1vZHVsZSBpZCA9IDI1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8dHIgQGNsaWNrPVwidG9nZ2xlXCIgQGRibGNsaWNrPVwiZG91YmxlQ2xpY2tlZFwiIDpjbGFzcz1cInsgJ3NlbGVjdGVkJzogaXNTZWxlY3RlZCB9XCI+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwidGh1bWJuYWlsLWNvbFwiIEBkcmFnc3RhcnQ9XCJhc3NldERyYWdTdGFydFwiPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiY2FuU2hvd1N2Z1wiXG4gICAgICAgICAgICAgICAgIGNsYXNzPVwiaW1nIHN2Zy1pbWdcIlxuICAgICAgICAgICAgICAgICA6c3R5bGU9XCJzdmdCYWNrZ3JvdW5kU3R5bGVcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltZ1wiIHYtZWxzZT5cbiAgICAgICAgICAgICAgICA8aW1nIHYtaWY9XCJhc3NldC5pc19pbWFnZVwiIDpzcmM9XCJhc3NldC50aHVtYm5haWxcIiAvPlxuICAgICAgICAgICAgICAgIDxmaWxlLWljb24gdi1lbHNlIDpleHRlbnNpb249XCJhc3NldC5leHRlbnNpb25cIj48L2ZpbGUtaWNvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RkPlxuXG4gICAgICAgIDx0ZCBjbGFzcz1cInRpdGxlLWNvbFwiPnt7IGFzc2V0LnRpdGxlIHx8IGFzc2V0LmJhc2VuYW1lIH19PC90ZD5cbiAgICAgICAgPHRkIGNsYXNzPVwic2l6ZS1jb2wgZXh0cmEtY29sXCI+e3sgYXNzZXQuc2l6ZV9mb3JtYXR0ZWQgfX08L3RkPlxuICAgICAgICA8dGQgY2xhc3M9XCJtb2RpZmVkLWNvbCBleHRyYS1jb2xcIj57eyBhc3NldC5sYXN0X21vZGlmaWVkX2Zvcm1hdHRlZCB9fTwvdGQ+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sdW1uLWFjdGlvbnNcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBhY3Rpb24tbW9yZVwiIDpjbGFzcz1cInsgb3Blbjogc2hvd0FjdGlvbnNEcm9wZG93biB9XCIgdi1pZj1cImNhbkVkaXRcIiB2LW9uLWNsaWNrYXdheT1cImF3YXlcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVwiIEBjbGljay5wcmV2ZW50LnN0b3A9XCJ0b2dnbGVBY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWRvdHMtdGhyZWUtdmVydGljYWxcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPlxuICAgICAgICAgICAgICAgICAgICA8bGk+PGEgQGNsaWNrPVwiY2xvc2VEcm9wZG93bkFuZEVkaXRBc3NldFwiPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdCcpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImRpdmlkZXJcIj48L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+PGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwiY2xvc2VEcm9wZG93bkFuZERlbGV0ZUFzc2V0XCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L3RkPlxuXG4gICAgPC90cj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuaW1wb3J0IEFzc2V0IGZyb20gJy4vQXNzZXQnO1xuaW1wb3J0IFJvdyBmcm9tICcuL1Jvdyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0Fzc2V0LCBSb3ddLFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgY2FuRWRpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW4oJ2Fzc2V0czonKyB0aGlzLmFzc2V0LmNvbnRhaW5lciArJzplZGl0JylcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgY2xvc2VEcm9wZG93bkFuZEVkaXRBc3NldCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0FjdGlvbnNEcm9wZG93biA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5lZGl0QXNzZXQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZURyb3Bkb3duQW5kRGVsZXRlQXNzZXQoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBY3Rpb25zRHJvcGRvd24gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlQXNzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBc3NldFJvdy52dWU/NDkzNzQ3ZDQiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDx0ciBAY2xpY2s9dG9nZ2xlIEBkYmxjbGljaz1kb3VibGVDbGlja2VkIDpjbGFzcz1cXFwieyAnc2VsZWN0ZWQnOiBpc1NlbGVjdGVkIH1cXFwiPiA8dGQgY2xhc3M9dGh1bWJuYWlsLWNvbCBAZHJhZ3N0YXJ0PWFzc2V0RHJhZ1N0YXJ0PiA8ZGl2IHYtaWY9Y2FuU2hvd1N2ZyBjbGFzcz1cXFwiaW1nIHN2Zy1pbWdcXFwiIDpzdHlsZT1zdmdCYWNrZ3JvdW5kU3R5bGU+IDwvZGl2PiA8ZGl2IGNsYXNzPWltZyB2LWVsc2U+IDxpbWcgdi1pZj1hc3NldC5pc19pbWFnZSA6c3JjPWFzc2V0LnRodW1ibmFpbCAvPiA8ZmlsZS1pY29uIHYtZWxzZSA6ZXh0ZW5zaW9uPWFzc2V0LmV4dGVuc2lvbj48L2ZpbGUtaWNvbj4gPC9kaXY+IDwvdGQ+IDx0ZCBjbGFzcz10aXRsZS1jb2w+e3sgYXNzZXQudGl0bGUgfHwgYXNzZXQuYmFzZW5hbWUgfX08L3RkPiA8dGQgY2xhc3M9XFxcInNpemUtY29sIGV4dHJhLWNvbFxcXCI+e3sgYXNzZXQuc2l6ZV9mb3JtYXR0ZWQgfX08L3RkPiA8dGQgY2xhc3M9XFxcIm1vZGlmZWQtY29sIGV4dHJhLWNvbFxcXCI+e3sgYXNzZXQubGFzdF9tb2RpZmllZF9mb3JtYXR0ZWQgfX08L3RkPiA8dGQgY2xhc3M9Y29sdW1uLWFjdGlvbnM+IDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBhY3Rpb24tbW9yZVxcXCIgOmNsYXNzPVxcXCJ7IG9wZW46IHNob3dBY3Rpb25zRHJvcGRvd24gfVxcXCIgdi1pZj1jYW5FZGl0IHYtb24tY2xpY2thd2F5PWF3YXk+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVxcXCIgQGNsaWNrLnByZXZlbnQuc3RvcD10b2dnbGVBY3Rpb25zPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWRvdHMtdGhyZWUtdmVydGljYWxcXFwiPjwvaT4gPC9idXR0b24+IDx1bCBjbGFzcz1kcm9wZG93bi1tZW51PiA8bGk+PGEgQGNsaWNrPWNsb3NlRHJvcGRvd25BbmRFZGl0QXNzZXQ+e3sgdHJhbnNsYXRlKCdjcC5lZGl0JykgfX08L2E+PC9saT4gPGxpIGNsYXNzPWRpdmlkZXI+PC9saT4gPGxpIGNsYXNzPXdhcm5pbmc+PGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1jbG9zZURyb3Bkb3duQW5kRGVsZXRlQXNzZXQ+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT48L2xpPiA8L3VsPiA8L2Rpdj4gPC90ZD4gPC90cj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9MaXN0aW5nL0Fzc2V0Um93LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZvbGRlclJvdy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZvbGRlclJvdy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvRm9sZGVyUm93LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDx0ciBAZHJhZ292ZXI9XCJkcmFnT3ZlclwiIEBkcm9wPVwiZHJvcFwiPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW1nXCI+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwic2VsZWN0Rm9sZGVyKGZvbGRlci5wYXRoKVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZmlsZS1pY29uIGV4dGVuc2lvbj1cImZvbGRlclwiPjwvZmlsZS1pY29uPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RkPlxuXG4gICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxhIEBjbGljaz1cInNlbGVjdEZvbGRlcihmb2xkZXIucGF0aClcIj5cbiAgICAgICAgICAgICAgICB7eyBmb2xkZXIudGl0bGUgfX1cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgPC90ZD5cblxuICAgICAgICA8dGQgY29sc3Bhbj1cIjJcIiBjbGFzcz1cImV4dHJhLWNvbFwiPjwvdGQ+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sdW1uLWFjdGlvbnNcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBhY3Rpb24tbW9yZVwiIDpjbGFzcz1cInsgb3Blbjogc2hvd0FjdGlvbnNEcm9wZG93biB9XCIgdi1vbi1jbGlja2F3YXk9XCJhd2F5XCI+XG5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJ0b2dnbGVBY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWRvdHMtdGhyZWUtdmVydGljYWxcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cImVkaXRGb2xkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLmVkaXQnKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImRpdmlkZXJcIj48L2xpPlxuXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIndhcm5pbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrLnByZXZlbnQ9XCJkZWxldGVGb2xkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC90ZD5cbiAgICA8L3RyPlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgRm9sZGVyIGZyb20gJy4vRm9sZGVyJztcbmltcG9ydCBSb3cgZnJvbSAnLi9Sb3cnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtGb2xkZXIsIFJvd10sXG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEZvbGRlclJvdy52dWU/MGU2NjFiOTgiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDx0ciBAZHJhZ292ZXI9ZHJhZ092ZXIgQGRyb3A9ZHJvcD4gPHRkPiA8ZGl2IGNsYXNzPWltZz4gPGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1zZWxlY3RGb2xkZXIoZm9sZGVyLnBhdGgpPiA8ZmlsZS1pY29uIGV4dGVuc2lvbj1mb2xkZXI+PC9maWxlLWljb24+IDwvYT4gPC9kaXY+IDwvdGQ+IDx0ZD4gPGEgQGNsaWNrPXNlbGVjdEZvbGRlcihmb2xkZXIucGF0aCk+IHt7IGZvbGRlci50aXRsZSB9fSA8L2E+IDwvdGQ+IDx0ZCBjb2xzcGFuPTIgY2xhc3M9ZXh0cmEtY29sPjwvdGQ+IDx0ZCBjbGFzcz1jb2x1bW4tYWN0aW9ucz4gPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIGFjdGlvbi1tb3JlXFxcIiA6Y2xhc3M9XFxcInsgb3Blbjogc2hvd0FjdGlvbnNEcm9wZG93biB9XFxcIiB2LW9uLWNsaWNrYXdheT1hd2F5PiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4tbW9yZSBkcm9wZG93bi10b2dnbGVcXFwiIGFyaWEtaGFzcG9wdXA9dHJ1ZSBhcmlhLWV4cGFuZGVkPWZhbHNlIEBjbGljaz10b2dnbGVBY3Rpb25zPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWRvdHMtdGhyZWUtdmVydGljYWxcXFwiPjwvaT4gPC9idXR0b24+IDx1bCBjbGFzcz1kcm9wZG93bi1tZW51PiA8bGk+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9ZWRpdEZvbGRlcj4ge3sgdHJhbnNsYXRlKCdjcC5lZGl0JykgfX0gPC9hPiA8L2xpPiA8bGkgY2xhc3M9ZGl2aWRlcj48L2xpPiA8bGkgY2xhc3M9d2FybmluZz4gPGEgaHJlZj0jIEBjbGljay5wcmV2ZW50PWRlbGV0ZUZvbGRlcj4ge3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fSA8L2E+IDwvbGk+IDwvdWw+IDwvZGl2PiA8L3RkPiA8L3RyPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvRm9sZGVyUm93LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC10YWJsZS1saXN0aW5nPiA8dGFibGUgdi1pZj1cXFwiIWlzU2VhcmNoaW5nIHx8IChpc1NlYXJjaGluZyAmJiBoYXNSZXN1bHRzKVxcXCI+IDx0aGVhZD4gPHRyPiA8dGg+PC90aD4gPHRoIHYtZm9yPVxcXCJjb2x1bW4gaW4gY29sdW1uc1xcXCIgOmNsYXNzPVxcXCJ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V4dHJhLWNvbCc6IGNvbHVtbi5leHRyYSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWN0aXZlJzogaXNDb2x1bW5BY3RpdmUoY29sdW1uKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29sdW1uLXNvcnRhYmxlJzogIWlzU2VhcmNoaW5nXFxuICAgICAgICAgICAgICAgICAgICB9XFxcIiBAY2xpY2s9XFxcIiRlbWl0KCdzb3J0ZWQnLCBjb2x1bW4uZmllbGQpXFxcIj4ge3sgY29sdW1uLmxhYmVsIH19IDxpIHYtaWY9aXNDb2x1bW5BY3RpdmUoY29sdW1uKSBjbGFzcz1cXFwiaWNvbiBpY29uLWNoZXZyb24te3sgc29ydE9yZGVyID09PSAnYXNjJyA/ICd1cCcgOiAnZG93bicgfX1cXFwiPjwvaT4gPC90aD4gPHRoIGNsYXNzPWNvbHVtbi1hY3Rpb25zPjwvdGg+IDwvdHI+IDwvdGhlYWQ+IDx0Ym9keT4gPHRyIHYtaWY9XFxcImhhc1BhcmVudCAmJiAhcmVzdHJpY3ROYXZpZ2F0aW9uXFxcIj4gPHRkPiA8ZGl2IGNsYXNzPWltZz4gPGEgQGNsaWNrLnByZXZlbnQ9c2VsZWN0Rm9sZGVyKGZvbGRlci5wYXJlbnRfcGF0aCk+IDxmaWxlLWljb24gZXh0ZW5zaW9uPWZvbGRlcj48L2ZpbGUtaWNvbj4gPC9hPiA8L2Rpdj4gPC90ZD4gPHRkPiA8YSBocmVmPVxcXCJcXFwiIEBjbGljay5wcmV2ZW50PXNlbGVjdEZvbGRlcihmb2xkZXIucGFyZW50X3BhdGgpPi4uPC9hPiA8L3RkPiA8dGQgY29sc3Bhbj0zPi4uPC90ZD4gPC90cj4gPHRyIGlzPWZvbGRlclJvdyB2LWZvcj1cXFwiZm9sZGVyIGluIHN1YmZvbGRlcnNcXFwiIDpmb2xkZXI9Zm9sZGVyIEBvcGVuLWRyb3Bkb3duPWNsb3NlRHJvcGRvd25zIEBzZWxlY3RlZD1zZWxlY3RGb2xkZXIgQGVkaXRpbmc9ZWRpdEZvbGRlciBAZGVsZXRpbmc9ZGVsZXRlRm9sZGVyIEBkcm9wcGVkLW9uLWZvbGRlcj1kcm9wcGVkT25Gb2xkZXI+IDwvdHI+IDx0ciBpcz1hc3NldFJvdyB2LWZvcj1cXFwiYXNzZXQgaW4gYXNzZXRzXFxcIiA6YXNzZXQ9YXNzZXQgOnNlbGVjdGVkLWFzc2V0cz1zZWxlY3RlZEFzc2V0cyBAb3Blbi1kcm9wZG93bj1jbG9zZURyb3Bkb3ducyBAc2VsZWN0ZWQ9c2VsZWN0QXNzZXQgQGRlc2VsZWN0ZWQ9ZGVzZWxlY3RBc3NldCBAZWRpdGluZz1lZGl0QXNzZXQgQGRlbGV0aW5nPWRlbGV0ZUFzc2V0IEBhc3NldGRyYWdzdGFydD1hc3NldERyYWdTdGFydCBAZG91YmxlY2xpY2tlZD1hc3NldERvdWJsZWNsaWNrZWQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0xpc3RpbmcvVGFibGVMaXN0aW5nLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC11cGxvYWRlclwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImZpbGVcIiBtdWx0aXBsZT1cIm11bHRpcGxlXCIgY2xhc3M9XCJoaWRlXCIgdi1lbDpuYXRpdmUtZmlsZS1maWVsZD5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG5cbiAgICBwcm9wczogWydkb21FbGVtZW50JywgJ2NvbnRhaW5lcicsICdwYXRoJ10sXG5cblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cGxvYWRzOiBbXVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBleHRyYURhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICAgICAgICAgICAgZm9sZGVyOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICAgICAgX3Rva2VuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3NyZi10b2tlbicpLmdldEF0dHJpYnV0ZSgndmFsdWUnKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIHRoaXMuYmluZFVwbG9hZGVyKCk7XG4gICAgfSxcblxuXG4gICAgZGVzdHJveWVkKCkge1xuICAgICAgICAkKHRoaXMuZG9tRWxlbWVudCkudW5iaW5kKCkucmVtb3ZlRGF0YSgpO1xuICAgIH0sXG5cblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgdXBsb2Fkcyh1cGxvYWRzKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCd1cGRhdGVkJywgdXBsb2Fkcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29udGFpbmVyKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFeHRyYURhdGEoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXRoKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFeHRyYURhdGEoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcGVuIHRoZSBuYXRpdmUgZmlsZSBicm93c2VyXG4gICAgICAgICAqL1xuICAgICAgICBicm93c2UoKSB7XG4gICAgICAgICAgICAkKHRoaXMuJGVscy5uYXRpdmVGaWxlRmllbGQpLmNsaWNrKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJpbmQgdGhlIHVwbG9hZGVyIHBsdWdpbiB0byB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBiaW5kVXBsb2FkZXIoKSB7XG4gICAgICAgICAgICAkKHRoaXMuZG9tRWxlbWVudCkuZG1VcGxvYWRlcih7XG4gICAgICAgICAgICAgICAgdXJsOiBjcF91cmwoJ2Fzc2V0cycpLFxuXG4gICAgICAgICAgICAgICAgZXh0cmFEYXRhOiB0aGlzLmV4dHJhRGF0YSxcblxuICAgICAgICAgICAgICAgIG9uTmV3RmlsZTogKGlkLCBmaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2Fkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb246IGZpbGUubmFtZS5zcGxpdCgnLicpLnBvcCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgb25VcGxvYWRQcm9ncmVzczogKGlkLCBwZXJjZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cGxvYWQgPSBfKHRoaXMudXBsb2FkcykuZmluZFdoZXJlKHsgaWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZC5wZXJjZW50ID0gcGVyY2VudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgncHJvZ3Jlc3MnLCB1cGxvYWQsIHRoaXMudXBsb2Fkcyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIG9uVXBsb2FkU3VjY2VzczogKGlkLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCd1cGxvYWQtY29tcGxldGUnLCByZXNwb25zZS5hc3NldCwgdGhpcy51cGxvYWRzKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBfKHRoaXMudXBsb2FkcykuZmluZEluZGV4KHsgaWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2Fkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3VwbG9hZHMtY29tcGxldGUnLCB0aGlzLnVwbG9hZHMpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBvblVwbG9hZEVycm9yOiAoaWQsIGVyck1zZywgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVwbG9hZCA9IF8odGhpcy51cGxvYWRzKS5maW5kV2hlcmUoeyBpZCB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDQwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyTXNnID0gcmVzcG9uc2UucmVzcG9uc2VKU09OO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSA0MTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyck1zZyA9IFwiVGhpcyBmaWxlIGV4Y2VlZHMgeW91ciBzZXJ2ZXIncyBtYXggdXBsb2FkIGZpbGVzaXplIGxpbWl0LlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkLmVycm9yTWVzc2FnZSA9IGVyck1zZztcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdlcnJvcicsIHVwbG9hZCwgdGhpcy51cGxvYWRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHRoZSBcImV4dHJhRGF0YVwiIG9iamVjdCB0aGUgcGx1Z2luIHdpbGwgdXNlIHdoZW4gdXBsb2FkaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlRXh0cmFEYXRhKCkge1xuICAgICAgICAgICAgJCh0aGlzLmRvbUVsZW1lbnQpLmRhdGEoJ2RtVXBsb2FkZXInKS5zZXR0aW5ncy5leHRyYURhdGEgPSB0aGlzLmV4dHJhRGF0YTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFVwbG9hZGVyLnZ1ZT8yYjcwYWYxYSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC11cGxvYWRlcj4gPGlucHV0IHR5cGU9ZmlsZSBtdWx0aXBsZT1tdWx0aXBsZSBjbGFzcz1oaWRlIHYtZWw6bmF0aXZlLWZpbGUtZmllbGQ+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9VcGxvYWRlci52dWVcbi8vIG1vZHVsZSBpZCA9IDI2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtdXBsb2FkLWxpc3RpbmdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LXVwbG9hZC1saXN0aW5nLWhlYWRlclwiPlxuICAgICAgICAgICAgPGg2Pnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLnVwbG9hZHMnLCB1cGxvYWRzLmxlbmd0aCkgfX08L2g2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgIDx0ciBpcz1cInVwbG9hZFwiXG4gICAgICAgICAgICAgICAgICAgIHYtZm9yPVwiKGksIHVwbG9hZCkgaW4gdXBsb2Fkc1wiXG4gICAgICAgICAgICAgICAgICAgIDpiYXNlbmFtZT1cInVwbG9hZC5iYXNlbmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIDpleHRlbnNpb249XCJ1cGxvYWQuZXh0ZW5zaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgOnBlcmNlbnQ9XCJ1cGxvYWQucGVyY2VudFwiXG4gICAgICAgICAgICAgICAgICAgIDplcnJvcj1cInVwbG9hZC5lcnJvck1lc3NhZ2VcIlxuICAgICAgICAgICAgICAgICAgICBAY2xlYXI9XCJjbGVhclVwbG9hZChpKVwiPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWyd1cGxvYWRzJ10sXG5cblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgVXBsb2FkOiByZXF1aXJlKCcuL1VwbG9hZC52dWUnKVxuICAgIH0sXG5cblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBjbGVhclVwbG9hZChpKSB7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFVwbG9hZHMudnVlP2M1ODA4Y2FjIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vVXBsb2FkLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVXBsb2FkLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL1VwbG9hZC52dWVcbi8vIG1vZHVsZSBpZCA9IDI2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8dHI+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sdW1uLXN0YXR1c1wiIDpjbGFzcz1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24td2FybmluZyBlcnJvclwiIHYtaWY9XCJzdGF0dXMgPT09ICdlcnJvcidcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblwiIHYtZWxzZT48L3NwYW4+XG4gICAgICAgIDwvdGQ+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sdW1uLXRodW1ibmFpbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltZ1wiPlxuICAgICAgICAgICAgICAgIDxmaWxlLWljb24gOmV4dGVuc2lvbj1cImV4dGVuc2lvblwiPjwvZmlsZS1pY29uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGQ+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sdW1uLWZpbGVuYW1lXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZpbGVuYW1lXCI+e3sgYmFzZW5hbWUgfX08L3NwYW4+XG4gICAgICAgIDwvdGQ+XG5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sdW1uLXByb2dyZXNzXCIgdi1pZj1cInN0YXR1cyAhPT0gJ2Vycm9yJ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWJhclwiIDpzdHlsZT1cInsgd2lkdGg6IHBlcmNlbnQrJyUnIH1cIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RkPlxuXG4gICAgICAgIDx0ZCBjbGFzcz1cImNvbHVtbi1lcnJvclwiIHYtZWxzZT57eyBlcnJvciB9fTwvdGQ+XG5cbiAgICAgICAgPHRkIHN0eWxlPVwid2lkdGg6IDMwcHhcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgdi1pZj1cInN0YXR1cyA9PSAnZXJyb3InXCIgQGNsaWNrLnByZXZlbnQ9XCJjbGVhclwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWNpcmNsZS13aXRoLWNyb3NzXCI+PC9pPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICA8L3RkPlxuXG4gICAgPC90cj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnZXh0ZW5zaW9uJywgJ2Jhc2VuYW1lJywgJ3BlcmNlbnQnLCAnZXJyb3InXSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBzdGF0dXMoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlcmNlbnQgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGVuZGluZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXBsb2FkaW5nJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGNsZWFyKCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2xlYXInKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBVcGxvYWQudnVlPzE3ZWMwOWQ3IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8dHI+IDx0ZCBjbGFzcz1jb2x1bW4tc3RhdHVzIDpjbGFzcz1zdGF0dXM+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24td2FybmluZyBlcnJvclxcXCIgdi1pZj1cXFwic3RhdHVzID09PSAnZXJyb3InXFxcIj48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cXFwiIHYtZWxzZT48L3NwYW4+IDwvdGQ+IDx0ZCBjbGFzcz1jb2x1bW4tdGh1bWJuYWlsPiA8ZGl2IGNsYXNzPWltZz4gPGZpbGUtaWNvbiA6ZXh0ZW5zaW9uPWV4dGVuc2lvbj48L2ZpbGUtaWNvbj4gPC9kaXY+IDwvdGQ+IDx0ZCBjbGFzcz1jb2x1bW4tZmlsZW5hbWU+IDxzcGFuIGNsYXNzPWZpbGVuYW1lPnt7IGJhc2VuYW1lIH19PC9zcGFuPiA8L3RkPiA8dGQgY2xhc3M9Y29sdW1uLXByb2dyZXNzIHYtaWY9XFxcInN0YXR1cyAhPT0gJ2Vycm9yJ1xcXCI+IDxkaXYgY2xhc3M9cHJvZ3Jlc3M+IDxkaXYgY2xhc3M9cHJvZ3Jlc3MtYmFyIDpzdHlsZT1cXFwieyB3aWR0aDogcGVyY2VudCsnJScgfVxcXCI+PC9kaXY+IDwvZGl2PiA8L3RkPiA8dGQgY2xhc3M9Y29sdW1uLWVycm9yIHYtZWxzZT57eyBlcnJvciB9fTwvdGQ+IDx0ZCBzdHlsZT1cXFwid2lkdGg6IDMwcHhcXFwiPiA8YSBocmVmPSMgdi1pZj1cXFwic3RhdHVzID09ICdlcnJvcidcXFwiIEBjbGljay5wcmV2ZW50PWNsZWFyPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmNsZS13aXRoLWNyb3NzXFxcIj48L2k+IDwvYT4gPC90ZD4gPC90cj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvVXBsb2FkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC11cGxvYWQtbGlzdGluZz4gPGRpdiBjbGFzcz1hc3NldC11cGxvYWQtbGlzdGluZy1oZWFkZXI+IDxoNj57eyB0cmFuc2xhdGVfY2hvaWNlKCdjcC51cGxvYWRzJywgdXBsb2Fkcy5sZW5ndGgpIH19PC9oNj4gPC9kaXY+IDx0YWJsZT4gPHRib2R5PiA8dHIgaXM9dXBsb2FkIHYtZm9yPVxcXCIoaSwgdXBsb2FkKSBpbiB1cGxvYWRzXFxcIiA6YmFzZW5hbWU9dXBsb2FkLmJhc2VuYW1lIDpleHRlbnNpb249dXBsb2FkLmV4dGVuc2lvbiA6cGVyY2VudD11cGxvYWQucGVyY2VudCA6ZXJyb3I9dXBsb2FkLmVycm9yTWVzc2FnZSBAY2xlYXI9Y2xlYXJVcGxvYWQoaSk+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9VcGxvYWRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC1lZGl0b3ItbW9kYWxcIj5cblxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC1lZGl0b3Ige3sgaXNJbWFnZSA/ICdpcy1pbWFnZScgOiAnaXMtZmlsZScgfX1cIj5cblxuICAgICAgICA8ZGl2IHYtaWY9XCJsb2FkaW5nXCIgY2xhc3M9XCJsb2FkaW5nXCI+XG4gICAgICAgICAgICA8ZGl2PjxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IHYtaWY9XCJzYXZpbmdcIiBjbGFzcz1cImxvYWRpbmdcIj5cbiAgICAgICAgICAgIDxkaXY+PHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3Auc2F2aW5nJykgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCIhbG9hZGluZyAmJiAhc2F2aW5nXCI+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlZGl0b3ItbWV0YVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1lZGl0b3ItbWV0YS1pdGVtc1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0YS1pdGVtIG9uZS1saW5lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZmlsZS1pY29uIDpleHRlbnNpb249XCJhc3NldC5leHRlbnNpb25cIj48L2ZpbGUtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGFzc2V0LnBhdGggfX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRhLWl0ZW1cIiB2LWlmPVwiaXNJbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZXRhLWxhYmVsXCI+e3sgdHJhbnNsYXRlKCdjcC5kaW1lbnNpb25zJykgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1ldGEtdmFsdWVcIj57eyBhc3NldC53aWR0aCB9fSB4IHt7IGFzc2V0LmhlaWdodCB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRhLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWV0YS1sYWJlbFwiPnt7IHRyYW5zbGF0ZSgnY3Auc2l6ZScpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZXRhLXZhbHVlXCI+e3sgYXNzZXQuc2l6ZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRhLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWV0YS1sYWJlbFwiPnt7IHRyYW5zbGF0ZSgnY3AubGFzdF9tb2RpZmllZCcpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZXRhLXZhbHVlXCIgOnRpdGxlPVwiYXNzZXQubGFzdF9tb2RpZmllZFwiPnt7IGFzc2V0Lmxhc3RfbW9kaWZpZWRfcmVsYXRpdmUgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LWVkaXRvci1tZXRhLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgQGNsaWNrLnByZXZlbnQ9XCJkb3dubG9hZFwiIHRpdGxlPVwie3sgdHJhbnNsYXRlKCdjcC5kb3dubG9hZCcpIH19XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI3XCIgaGVpZ2h0PVwiMjNcIiB2aWV3Qm94PVwiMCAwIDI3IDIzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxnIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIHN0cm9rZT1cIiM2NzY3NjdcIiBzdHJva2Utd2lkdGg9XCIyXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDEgMS4wNDUpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk0yMS4xMjE5ODI4IDYuODU3MTQyODZDMjEuMTIxOTgyOCA2Ljg1NzE0Mjg2IDIwLjAyOTc0MTQgNi42OTY0Mjg1NyAxOC45NjU1MTcyIDYuODU3MTQyODZNMy4wMTcyNDEzOCA2QzMuMDE3MjQxMzggNC4xMDY1NzE0MyA0LjU2MTIwNjkgMi41NzE0Mjg1NyA2LjQ2NTUxNzI0IDIuNTcxNDI4NTcgOC4zNjk4Mjc1OSAyLjU3MTQyODU3IDkuOTEzNzkzMSA0LjEwNjU3MTQzIDkuOTEzNzkzMSA2XCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTguNTM0NDgyOCAxNi4yODU3MTQzTDIwLjI0NjU1MTcgMTYuMjg1NzE0M0MyMi44NjA3NzU5IDE2LjI4NTcxNDMgMjUgMTQuMTU5MTQyOSAyNSAxMS41NTk0Mjg2IDI1IDkuMjU3NTcxNDMgMjMuMzIxNTUxNyA3LjI2OTQyODU3IDIxLjEyMTk4MjggNi44NTcxNDI4NiAyMS4wNzI4NDQ4IDMuMTI5IDE4LjAyMTk4MjggMCAxNC4yNjAzNDQ4IDAgMTEuODY0MjI0MSAwIDkuNjE0NjU1MTcgMS4yODc4NTcxNCA4LjM3MjQxMzc5IDMuMTQ0IDcuODI1ODYyMDcgMi43ODI3MTQyOSA3LjE3MDY4OTY2IDIuNTcxNDI4NTcgNi40NjU1MTcyNCAyLjU3MTQyODU3IDQuNTYxMjA2OSAyLjU3MTQyODU3IDMuMDE3MjQxMzggNC4xMDY1NzE0MyAzLjAxNzI0MTM4IDYgMy4wMTcyNDEzOCA2LjA2NTU3MTQzIDMuMDIzMjc1ODYgNi4xMjk4NTcxNCAzLjAyNzE1NTE3IDYuMTk0NTcxNDMgMy4wMjI4NDQ4MyA2LjI3MyAzLjAxNzI0MTM4IDYuMzUxNDI4NTcgMy4wMTcyNDEzOCA2LjQyODU3MTQzIDEuMjk3ODQ0ODMgNy4yNDggMCA5LjE5NTg1NzE0IDAgMTEuMjA5Mjg1NyAwIDE0LjAwMTQyODYgMi4yOTc0MTM3OSAxNi4yODU3MTQzIDUuMTA1NjAzNDUgMTYuMjg1NzE0M0w3LjMyNzU4NjIxIDE2LjI4NTcxNDNNMTIuOTMxMDM0NSAxMS4xNDI4NTcxTDEyLjkzMTAzNDUgMjFNMTIuOTMxMDM0NSAyMUw5LjQ4Mjc1ODYyIDE3LjU3MTQyODZNMTYuMzc5MzEwMyAxNy41NzE0Mjg2TDEyLjkzMTAzNDUgMjFcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDxhIEBjbGljay5wcmV2ZW50PVwiY2xvc2VcIiB0aXRsZT1cInt7IHRyYW5zbGF0ZSgnY3AuY2xvc2UnKSB9fVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE5XCIgdmlld0JveD1cIjAgMCAxOCAxOVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBzdHJva2U9XCIjNjc2NzY3XCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgxIDEuNTQ1KVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTYgMEwuMTYwNTMzMzMzIDE1LjgzODkzMzNNMTYgMTUuODM4OTMzM0wuMTYwNTMzMzMzIDBcIi8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVkaXRvci1tYWluXCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdG9yLXByZXZpZXdcIj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdG9yLXByZXZpZXctaW1hZ2VcIiB2LWlmPVwiaXNJbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImltYWdlLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9XCJhc3NldC5wcmV2aWV3XCIgY2xhc3M9XCJhc3NldC10aHVtYlwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImF1ZGlvLXdyYXBwZXJcIiB2LWlmPVwiYXNzZXQuaXNfYXVkaW9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhdWRpbyA6c3JjPVwiYXNzZXQudXJsXCIgY29udHJvbHMgcHJlbG9hZD1cImF1dG9cIj48L2F1ZGlvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlkZW8td3JhcHBlclwiIHYtaWY9XCJhc3NldC5pc192aWRlb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIDpzcmM9XCJhc3NldC51cmxcIiBjb250cm9scz48L3ZpZGVvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnVsbC1oZWlnaHRcIiB2LWlmPVwiYXNzZXQuZXh0ZW5zaW9uID09ICdwZGYnXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b2JqZWN0IGRhdGE9XCJ7eyBhc3NldC51cmwgfX1cIiB0eXBlPVwiYXBwbGljYXRpb24vcGRmXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9vYmplY3Q+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmdWxsLWhlaWdodFwiIHYtaWY9XCJhc3NldC5pc19wcmV2aWV3YWJsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlmcmFtZSBjbGFzcz1cImZ1bGwtaGVpZ2h0IGZ1bGwtd2lkdGhcIiBmcmFtZWJvcmRlcj1cIjBcIiBzcmM9XCJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9ndmlldz91cmw9e3sgYXNzZXQucGVybWFsaW5rIH19JmVtYmVkZGVkPXRydWVcIj48L2lmcmFtZT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVkaXRvci1maWxlLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPVwiaXNJbWFnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD1cIm9wZW5Gb2NhbFBvaW50RWRpdG9yXCI+e3sgdHJhbnNsYXRlKCdjcC5mb2NhbF9wb2ludCcpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0blwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrLnByZXZlbnQ9XCJvcGVuUmVuYW1lclwiPnt7IHRyYW5zbGF0ZSgnY3AucmVuYW1lX2ZpbGUnKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwib3Blbk1vdmVyXCI+e3sgdHJhbnNsYXRlKCdjcC5tb3ZlX2ZpbGUnKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwicmVwbGFjZUZpbGVcIj5SZXBsYWNlIEZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgLS0+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdG9yLWZvcm1cIj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdG9yLWZvcm0tZmllbGRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgdi1pZj1cImhhc0Vycm9yc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwiZXJyb3IgaW4gZXJyb3JzXCI+e3sgZXJyb3IgfX08L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHB1Ymxpc2gtZmllbGRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZpZWxkcz1cInB1Ymxpc2hGaWVsZHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLnN5bmM9XCJmaWVsZHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDplcnJvcnM9XCJlcnJvcnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDphdXRvZm9jdXM9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVndWxhci10aXRsZS1maWVsZD1cInRydWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcHVibGlzaC1maWVsZHM+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlZGl0b3ItZm9ybS1hY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCIgQGNsaWNrPVwiZGVsZXRlXCIgdi1pZj1cImFsbG93RGVsZXRpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgQGNsaWNrPVwic2F2ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHRyYW5zbGF0ZSgnY3Auc2F2ZScpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICA8Zm9jYWwtcG9pbnQtZWRpdG9yXG4gICAgICAgICAgICB2LWlmPVwic2hvd0ZvY2FsUG9pbnRFZGl0b3JcIlxuICAgICAgICAgICAgOmRhdGE9XCJmaWVsZHMuZm9jdXNcIlxuICAgICAgICAgICAgOmltYWdlPVwiYXNzZXQucHJldmlld1wiXG4gICAgICAgICAgICBAc2VsZWN0ZWQ9XCJzZWxlY3RGb2NhbFBvaW50XCJcbiAgICAgICAgICAgIEBjbG9zZWQ9XCJjbG9zZUZvY2FsUG9pbnRFZGl0b3JcIj5cbiAgICAgICAgPC9mb2NhbC1wb2ludC1lZGl0b3I+XG5cbiAgICAgICAgPGltYWdlLWVkaXRvclxuICAgICAgICAgICAgdi1pZj1cInNob3dJbWFnZUVkaXRvclwiXG4gICAgICAgICAgICA6aWQ9XCJhc3NldC5pZFwiXG4gICAgICAgICAgICA6Y29udGFpbmVyPVwiYXNzZXQuY29udGFpbmVyXCJcbiAgICAgICAgICAgIDpwYXRoPVwiYXNzZXQucGF0aFwiXG4gICAgICAgICAgICA6dXJsPVwiYXNzZXQucGVybWFsaW5rXCJcbiAgICAgICAgICAgIEBzYXZlZD1cInVwZGF0ZVRodW1ibmFpbFwiPlxuICAgICAgICA8L2ltYWdlLWVkaXRvcj5cblxuICAgICAgICA8cmVuYW1lclxuICAgICAgICAgICAgdi1pZj1cInNob3dSZW5hbWVyXCJcbiAgICAgICAgICAgIDphc3NldD1cImFzc2V0XCJcbiAgICAgICAgICAgIEBzYXZlZD1cImFzc2V0UmVuYW1lZFwiXG4gICAgICAgICAgICBAY2xvc2VkPVwiY2xvc2VSZW5hbWVyXCI+XG4gICAgICAgIDwvcmVuYW1lcj5cblxuICAgICAgICA8bW92ZXJcbiAgICAgICAgICAgIHYtaWY9XCJzaG93TW92ZXJcIlxuICAgICAgICAgICAgOmFzc2V0cz1cIlthc3NldC5pZF1cIlxuICAgICAgICAgICAgOmZvbGRlcj1cImFzc2V0LmZvbGRlclwiXG4gICAgICAgICAgICA6Y29udGFpbmVyPVwiYXNzZXQuY29udGFpbmVyXCJcbiAgICAgICAgICAgIEBzYXZlZD1cImFzc2V0TW92ZWRcIlxuICAgICAgICAgICAgQGNsb3NlZD1cImNsb3NlTW92ZXJcIj5cbiAgICAgICAgPC9tb3Zlcj5cbiAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgRmllbGRzZXQgZnJvbSAnLi4vLi4vcHVibGlzaC9GaWVsZHNldCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgRm9jYWxQb2ludEVkaXRvcjogcmVxdWlyZSgnLi9Gb2NhbFBvaW50RWRpdG9yLnZ1ZScpLFxuICAgICAgICBSZW5hbWVyOiByZXF1aXJlKCcuL1JlbmFtZXIudnVlJyksXG4gICAgICAgIE1vdmVyOiByZXF1aXJlKCcuLi9Nb3Zlci52dWUnKSxcbiAgICAgICAgUHVibGlzaEZpZWxkczogcmVxdWlyZSgnLi4vLi4vcHVibGlzaC9GaWVsZHMudnVlJyksXG4gICAgfSxcblxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgaGFzQ2hpbGQ6IGZhbHNlLFxuICAgICAgICBhbGxvd0RlbGV0aW5nOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNhdmluZzogZmFsc2UsXG4gICAgICAgICAgICBhc3NldDogbnVsbCxcbiAgICAgICAgICAgIGZpZWxkczogbnVsbCxcbiAgICAgICAgICAgIHB1Ymxpc2hGaWVsZHM6IG51bGwsXG4gICAgICAgICAgICBzaG93Rm9jYWxQb2ludEVkaXRvcjogZmFsc2UsXG4gICAgICAgICAgICBzaG93UmVuYW1lcjogZmFsc2UsXG4gICAgICAgICAgICBzaG93TW92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3JzOiBbXVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGUgYXNzZXQgaXMgYW4gaW1hZ2VcbiAgICAgICAgICovXG4gICAgICAgIGlzSW1hZ2UoKSB7XG4gICAgICAgICAgICBpZiAoISB0aGlzLmFzc2V0KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0LmlzX2ltYWdlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZXJlIGFyZSBlcnJvcnMgcHJlc2VudC5cbiAgICAgICAgICovXG4gICAgICAgIGhhc0Vycm9yczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5zaXplKHRoaXMuZXJyb3JzKSAhPT0gMDtcbiAgICAgICAgfSxcblxuICAgIH0sXG5cblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdjbG9zZS1jaGlsZC1lZGl0b3InOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VGb2NhbFBvaW50RWRpdG9yKCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlSW1hZ2VFZGl0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VSZW5hbWVyKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMb2FkIHRoZSBhc3NldCBkYXRhXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgY29tcG9uZW50IGlzIGdpdmVuIGFuIGFzc2V0IElELlxuICAgICAgICAgKiBJdCBuZWVkcyB0byBnZXQgdGhlIGNvcnJlc3BvbmRpbmcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgICAqL1xuICAgICAgICBsb2FkKCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgY29uc3QgdXJsID0gY3BfdXJsKCdhc3NldHMvJyArIHRoaXMuaWQucmVwbGFjZSgnOjonLCAnLycpKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQodXJsKS5zdWNjZXNzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXQgPSByZXNwb25zZS5hc3NldDtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkcyA9IHJlc3BvbnNlLmZpZWxkcztcbiAgICAgICAgICAgICAgICB0aGlzLmdldEZpZWxkc2V0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZCB0aGUgZmllbGRzZXRcbiAgICAgICAgICovXG4gICAgICAgIGdldEZpZWxkc2V0KCkge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gY3BfdXJsKGBmaWVsZHNldHMtanNvbi8ke3RoaXMuYXNzZXQuZmllbGRzZXR9YCk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAuZ2V0KHVybCkuc3VjY2VzcygocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBGbGF0dGVuIGZpZWxkcyBmcm9tIGFsbCBzZWN0aW9ucyBpbnRvIG9uZSBhcnJheS5cbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHNldCA9IG5ldyBGaWVsZHNldChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaXNoRmllbGRzID0gXy5jaGFpbihmaWVsZHNldC5zZWN0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgLm1hcChzZWN0aW9uID0+IHNlY3Rpb24uZmllbGRzKVxuICAgICAgICAgICAgICAgICAgICAuZmxhdHRlbih0cnVlKVxuICAgICAgICAgICAgICAgICAgICAudmFsdWUoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wZW4gdGhlIGZvY2FsIHBvaW50IGVkaXRvciBVSVxuICAgICAgICAgKi9cbiAgICAgICAgb3BlbkZvY2FsUG9pbnRFZGl0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dGb2NhbFBvaW50RWRpdG9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaGFzQ2hpbGQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbG9zZSB0aGUgZm9jYWwgcG9pbnQgZWRpdG9yIFVJXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZUZvY2FsUG9pbnRFZGl0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dGb2NhbFBvaW50RWRpdG9yID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmhhc0NoaWxkID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdGhlIGZvY2FsIHBvaW50IGlzIHNlbGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RGb2NhbFBvaW50KHBvaW50KSB7XG4gICAgICAgICAgICBwb2ludCA9IChwb2ludCA9PT0gJzUwLTUwJykgPyBudWxsIDogcG9pbnQ7XG4gICAgICAgICAgICB0aGlzLiRzZXQoJ2ZpZWxkcy5mb2N1cycsIHBvaW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2F2ZSB0aGUgYXNzZXRcbiAgICAgICAgICovXG4gICAgICAgIHNhdmUoKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGNwX3VybCgnYXNzZXRzLycgKyB0aGlzLmlkLnJlcGxhY2UoJzo6JywgJy8nKSk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIHRoaXMuZmllbGRzKS5zdWNjZXNzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NhdmVkJywgcmVzcG9uc2UuYXNzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KS5lcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiRub3RpZnkuZXJyb3IodHJhbnNsYXRlKCdjcC5lcnJvcicpLCB7IHRpbWVvdXQ6IDIwMDAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9yO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjaGFuZ2VzTWFkZScsIGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVsZXRlIHRoZSBhc3NldFxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlKCkge1xuICAgICAgICAgICAgaWYgKCEgY29uZmlybSh0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBjcF91cmwoJ2Fzc2V0cy9kZWxldGUnKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5kZWxldGUodXJsLCB7IGlkczogdGhpcy5hc3NldC5pZCB9KS5zdWNjZXNzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZWQnLCB0aGlzLmFzc2V0LmlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsb3NlIHRoZSBlZGl0b3JcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlKCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2xvc2VkJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3BlblJlbmFtZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dSZW5hbWVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaGFzQ2hpbGQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsb3NlUmVuYW1lcigpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1JlbmFtZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaGFzQ2hpbGQgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBhc3NldFJlbmFtZWQoYXNzZXQpIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NhdmVkJywgYXNzZXQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9wZW5Nb3ZlcigpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd01vdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaGFzQ2hpbGQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsb3NlTW92ZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dNb3ZlciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5oYXNDaGlsZCA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGFuIGFzc2V0IGhhcyBiZWVuIG1vdmVkIHRvIGFub3RoZXIgZm9sZGVyXG4gICAgICAgICAqL1xuICAgICAgICBhc3NldE1vdmVkKGFzc2V0LCBmb2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ21vdmVkJywgYXNzZXQsIGZvbGRlcilcbiAgICAgICAgfSxcblxuICAgICAgICBkb3dubG9hZCgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHRoaXMuYXNzZXQuZG93bmxvYWRfdXJsKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRWRpdG9yLnZ1ZT80ODgwODk0YyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZvY2FsUG9pbnRFZGl0b3IudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Gb2NhbFBvaW50RWRpdG9yLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9Gb2NhbFBvaW50RWRpdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJmb2NhbC1wb2ludFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9jYWwtcG9pbnQtdG9vbGJveCBjYXJkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmZvY2FsX3BvaW50X2xhYmVsJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmZvY2FsX3BvaW50X2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9jYWwtcG9pbnQtaW1hZ2UgaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz1cImltYWdlXCIgQGNsaWNrPVwiZGVmaW5lXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvY2FsLXBvaW50LXJldGljbGVcIiA6c3R5bGU9XCJ7IHRvcDogeSsnJScsIGxlZnQ6IHgrJyUnIH1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXh5IGFwYXJ0XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIEBjbGljay5wcmV2ZW50PVwiY2xvc2VcIj57eyB0cmFuc2xhdGUoJ2NwLmNhbmNlbCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgQGNsaWNrLnByZXZlbnQ9XCJyZXNldFwiPnt7IHRyYW5zbGF0ZSgnY3AucmVzZXQnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIEBjbGljaz1cInNlbGVjdFwiPnt7IHRyYW5zbGF0ZSgnY3Auc2VsZWN0JykgfX08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9jYWwtcG9pbnQtY29vcmRpbmF0ZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhaXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJheGlzXCI+WDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZhbHVlXCI+e3sgeCB9fTxzdXA+JTwvc3VwPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhaXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJheGlzXCI+WTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZhbHVlXCI+e3sgeSB9fTxzdXA+JTwvc3VwPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiB2LWZvcj1cIm4gaW4gOVwiXG4gICAgICAgICAgICAgY2xhc3M9XCJmcmFtZSBmcmFtZS17eyBuKzEgfX1cIlxuICAgICAgICAgICAgIDpzdHlsZT1cInsgYmFja2dyb3VuZEltYWdlOiAndXJsKCcrYmdJbWFnZSsnKScsIGJhY2tncm91bmRQb3NpdGlvbjogYmdQb3NpdGlvbiB9XCI+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFtcbiAgICAgICAgJ2RhdGEnLCAgIC8vIFRoZSBpbml0aWFsIGZvY3VzIHBvaW50IGRhdGEgc3RvcmVkIGluIHRoZSBhc3NldCwgaWYgYXBwbGljYWJsZS5cbiAgICAgICAgJ2ltYWdlJyAgIC8vIFRoZSB1cmwgb2YgdGhlIGltYWdlLlxuICAgIF0sXG5cblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgIHk6IDUwXG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGJnUG9zaXRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy54ICsgJyUgJyArIHRoaXMueSArICclJztcbiAgICAgICAgfSxcblxuICAgICAgICBiZ0ltYWdlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSSh0aGlzLmltYWdlKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWwgPSB0aGlzLmRhdGEgfHwgJzUwLTUwJztcbiAgICAgICAgY29uc3QgY29vcmRzID0gaW5pdGlhbC5zcGxpdCgnLScpO1xuICAgICAgICB0aGlzLnggPSBjb29yZHNbMF07XG4gICAgICAgIHRoaXMueSA9IGNvb3Jkc1sxXTtcbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZGVmaW5lKGUpIHtcbiAgICAgICAgICAgIHZhciAkZWwgPSAkKGUudGFyZ2V0KTtcblxuICAgICAgICAgICAgdmFyIGltYWdlVyA9ICRlbC53aWR0aCgpO1xuICAgICAgICAgICAgdmFyIGltYWdlSCA9ICRlbC5oZWlnaHQoKTtcblxuICAgICAgICAgICAgdmFyIG9mZnNldFggPSBlLnBhZ2VYIC0gJGVsLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0WSA9IGUucGFnZVkgLSAkZWwub2Zmc2V0KCkudG9wO1xuXG4gICAgICAgICAgICB0aGlzLnggPSAoKG9mZnNldFgvaW1hZ2VXKSoxMDApLnRvRml4ZWQoKTtcbiAgICAgICAgICAgIHRoaXMueSA9ICgob2Zmc2V0WS9pbWFnZUgpKjEwMCkudG9GaXhlZCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGVkJywgdGhpcy54ICsgJy0nICsgdGhpcy55KTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlZCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgdGhpcy54ID0gNTA7XG4gICAgICAgICAgICB0aGlzLnkgPSA1MDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRm9jYWxQb2ludEVkaXRvci52dWU/MDNjMjNiMTEiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9Zm9jYWwtcG9pbnQ+IDxkaXYgY2xhc3M9XFxcImZvY2FsLXBvaW50LXRvb2xib3ggY2FyZFxcXCI+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZm9jYWxfcG9pbnRfbGFiZWwnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZm9jYWxfcG9pbnRfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8ZGl2IGNsYXNzPVxcXCJmb2NhbC1wb2ludC1pbWFnZSBpbmxpbmUtYmxvY2tcXFwiPiA8aW1nIDpzcmM9aW1hZ2UgQGNsaWNrPWRlZmluZSAvPiA8ZGl2IGNsYXNzPWZvY2FsLXBvaW50LXJldGljbGUgOnN0eWxlPVxcXCJ7IHRvcDogeSsnJScsIGxlZnQ6IHgrJyUnIH1cXFwiPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZsZXh5IGFwYXJ0XFxcIj4gPGRpdiBjbGFzcz1idG4tZ3JvdXA+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgQGNsaWNrLnByZXZlbnQ9Y2xvc2U+e3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fTwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIEBjbGljay5wcmV2ZW50PXJlc2V0Pnt7IHRyYW5zbGF0ZSgnY3AucmVzZXQnKSB9fTwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljaz1zZWxlY3Q+e3sgdHJhbnNsYXRlKCdjcC5zZWxlY3QnKSB9fTwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb2NhbC1wb2ludC1jb29yZGluYXRlcz4gPGRpdiBjbGFzcz1wYWlyPiA8ZGl2IGNsYXNzPWF4aXM+WDwvZGl2PiA8ZGl2IGNsYXNzPXZhbHVlPnt7IHggfX08c3VwPiU8L3N1cD48L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9cGFpcj4gPGRpdiBjbGFzcz1heGlzPlk8L2Rpdj4gPGRpdiBjbGFzcz12YWx1ZT57eyB5IH19PHN1cD4lPC9zdXA+PC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IHYtZm9yPVxcXCJuIGluIDlcXFwiIGNsYXNzPVxcXCJmcmFtZSBmcmFtZS17eyBuKzEgfX1cXFwiIDpzdHlsZT1cXFwieyBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoJytiZ0ltYWdlKycpJywgYmFja2dyb3VuZFBvc2l0aW9uOiBiZ1Bvc2l0aW9uIH1cXFwiPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9Gb2NhbFBvaW50RWRpdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JlbmFtZXIudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9SZW5hbWVyLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9SZW5hbWVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxtb2RhbCA6c2hvdy5zeW5jPVwic2hvd1wiIDpzYXZpbmc9XCJzYXZpbmdcIiBjbGFzcz1cIm1vZGFsLXNtYWxsXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiaGVhZGVyXCI+XG4gICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLnJlbmFtZV9maWxlJykgfX1cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImJvZHlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+e3t7IHdhcm5pbmdUZXh0IHwgbWFya2Rvd24gfX19PC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIiB2LWlmPVwiZXJyb3JzXCI+XG4gICAgICAgICAgICAgICAgPHAgdi1mb3I9XCJlcnJvciBpbiBlcnJvcnNcIj57eyBlcnJvciB9fTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9mb2N1c1xuICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgIHYtZWw6aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cImZpbGVuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgQGtleXVwLmVzYz1cImNhbmNlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgIEBrZXl1cC5lbnRlcj1cInNhdmVcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJmb290ZXJcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6ZGlzYWJsZWQ9XCIhaGFzQ2hhbmdlZFwiIEBjbGljaz1cInNhdmVcIj5TYXZlPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0blwiIEBjbGljaz1cImNhbmNlbFwiPnt7IHRyYW5zbGF0ZSgnY3AuY2FuY2VsJykgfX08L2J1dHRvbj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L21vZGFsPlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWydhc3NldCddLFxuXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgIGZpbGVuYW1lOiBudWxsLFxuICAgICAgICAgICAgc2F2aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgICAgIHdhcm5pbmdUZXh0OiB0cmFuc2xhdGUoJ2NwLnJlbmFtZV9maWxlX3dhcm5pbmcnKVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBoYXNDaGFuZ2VkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXQuZmlsZW5hbWUgIT09IHRoaXMuZmlsZW5hbWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLmZpbGVuYW1lID0gdGhpcy5hc3NldC5maWxlbmFtZTtcbiAgICB9LFxuXG5cbiAgICB3YXRjaDoge1xuXG4gICAgICAgIHNob3codmFsKSB7XG4gICAgICAgICAgICBpZiAoIXZhbCkgdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHNhdmUoKSB7XG4gICAgICAgICAgICBpZiAoISB0aGlzLmhhc0NoYW5nZWQpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBjcF91cmwoJy9hc3NldHMvcmVuYW1lLycgKyB0aGlzLmFzc2V0LmlkLnJlcGxhY2UoJzo6JywgJy8nKSk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIHsgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWUgfSkuc3VjY2VzcygocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdzYXZlZCcsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICAgICAgfSkuZXJyb3IoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVscy5pbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZW5hbWVyLnZ1ZT8zZTg3YmQ3YiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPG1vZGFsIDpzaG93LnN5bmM9c2hvdyA6c2F2aW5nPXNhdmluZyBjbGFzcz1tb2RhbC1zbWFsbD4gPHRlbXBsYXRlIHNsb3Q9aGVhZGVyPiB7eyB0cmFuc2xhdGUoJ2NwLnJlbmFtZV9maWxlJykgfX0gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9Ym9keT4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtd2FybmluZ1xcXCI+e3t7IHdhcm5pbmdUZXh0IHwgbWFya2Rvd24gfX19PC9kaXY+IDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LWRhbmdlclxcXCIgdi1pZj1lcnJvcnM+IDxwIHYtZm9yPVxcXCJlcnJvciBpbiBlcnJvcnNcXFwiPnt7IGVycm9yIH19PC9wPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8aW5wdXQgdHlwZT10ZXh0IGF1dG9mb2N1cyBjbGFzcz1mb3JtLWNvbnRyb2wgdi1lbDppbnB1dCB2LW1vZGVsPWZpbGVuYW1lIEBrZXl1cC5lc2M9Y2FuY2VsIEBrZXl1cC5lbnRlcj1zYXZlIC8+IDwvZGl2PiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1mb290ZXI+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgOmRpc2FibGVkPSFoYXNDaGFuZ2VkIEBjbGljaz1zYXZlPlNhdmU8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1idG4gQGNsaWNrPWNhbmNlbD57eyB0cmFuc2xhdGUoJ2NwLmNhbmNlbCcpIH19PC9idXR0b24+IDwvdGVtcGxhdGU+IDwvbW9kYWw+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0VkaXRvci9SZW5hbWVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJwdWJsaXNoLWZpZWxkc1wiPlxuXG4gICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgIHYtZm9yPVwiKGksIGZpZWxkKSBpbiBmaWVsZHNcIlxuICAgICAgICAgICAgOmlzPVwiY29tcG9uZW50TmFtZShmaWVsZClcIlxuICAgICAgICAgICAgOmZpZWxkPVwiZmllbGRcIlxuICAgICAgICAgICAgOmRhdGEuc3luYz1cImRhdGFbZmllbGQubmFtZV1cIlxuICAgICAgICAgICAgOmNvbmZpZz1cImZpZWxkc1skaW5kZXhdXCJcbiAgICAgICAgICAgIDphdXRvZm9jdXM9XCJhdXRvZm9jdXMgJiYgaSA9PSAwXCJcbiAgICAgICAgICAgIDplbnY9XCJkZWZpbmVkSW5FbnZpcm9ubWVudChmaWVsZC5uYW1lKVwiXG4gICAgICAgID48L2NvbXBvbmVudD5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBNZXRhRmllbGQ6IHJlcXVpcmUoJy4vTWV0YUZpZWxkLnZ1ZScpLFxuICAgICAgICBSZWd1bGFyRmllbGQ6IHJlcXVpcmUoJy4vUmVndWxhckZpZWxkLnZ1ZScpXG4gICAgfSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGZpZWxkczogQXJyYXksXG4gICAgICAgIGRhdGE6IE9iamVjdCxcbiAgICAgICAgZXJyb3JzOiBPYmplY3QsXG4gICAgICAgIGhpZGRlbkZpZWxkczoge1xuICAgICAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgICAgICBkZWZhdWx0OiBbXVxuICAgICAgICB9LFxuICAgICAgICBhdXRvZm9jdXM6IEJvb2xlYW4sXG4gICAgICAgIHJlZ3VsYXJUaXRsZUZpZWxkOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZW52OiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICBkZWZhdWx0OiB7fVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBjb21wb25lbnROYW1lKGZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc01ldGEoZmllbGQpID8gJ01ldGFGaWVsZCcgOiAnUmVndWxhckZpZWxkJztcbiAgICAgICAgfSxcblxuICAgICAgICB3aWR0aFRleHQ6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB3aWR0aCB8fCAxMDA7XG4gICAgICAgICAgICByZXR1cm4gXy5maW5kV2hlcmUodGhpcy53aWR0aHMsIHt2YWx1ZTogd2lkdGh9KS50ZXh0O1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0Vycm9yOiBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uaGFzKHRoaXMuZXJyb3JzLCAnZmllbGRzLicrZmllbGQubmFtZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNWaXNpYmxlKGZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaGlkZGVuRmllbGRzLmluY2x1ZGVzKGZpZWxkLm5hbWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzTWV0YShmaWVsZCkge1xuICAgICAgICAgICAgLy8gVGl0bGUgaXMgY29uc2lkZXJlZCBhIG1ldGEgdGFnIGJ5IGRlZmF1bHQuIElmIGEgY29tcG9uZW50IChlZy4gYXNzZXQgZWRpdG9yKVxuICAgICAgICAgICAgLy8gd2FudHMgdG8gY29uc2lkZXIgdGl0bGUganVzdCBhIHJlZ3VsYXIgb2wnIGZpZWxkLCB0aGV5IGNhbiBwYXNzIGluIHRoaXMgcHJvcC5cbiAgICAgICAgICAgIGlmIChmaWVsZC5uYW1lID09PSAndGl0bGUnICYmIHRoaXMucmVndWxhclRpdGxlRmllbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmaWVsZC5pc01ldGEgfHwgWyd0aXRsZScsICdzbHVnJywgJ2RhdGUnXS5pbmNsdWRlcyhmaWVsZC5uYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWZpbmVkSW5FbnZpcm9ubWVudDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIF8uaGFzKHRoaXMuZW52LCBuYW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgLy9cbiAgICB9XG5cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBGaWVsZHMudnVlPzUyNGFlMWVhIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vTWV0YUZpZWxkLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTWV0YUZpZWxkLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9NZXRhRmllbGQudnVlXG4vLyBtb2R1bGUgaWQgPSAyNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiA6Y2xhc3M9XCJjbGFzc2VzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZC1pbm5lclwiPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiaXNSZWFkT25seVwiIGNsYXNzPVwicmVhZC1vbmx5LW92ZXJsYXlcIiA6dGl0bGU9XCJ0cmFuc2xhdGUoJ2NwLnJlYWRfb25seScpXCI+PC9kaXY+XG5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrXCI+XG4gICAgICAgICAgICAgICAge3sgZGlzcGxheSB9fVxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwicmVxdWlyZWRcIiB2LWlmPVwiaXNSZXF1aXJlZFwiPio8L2k+XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiIHYtaWY9XCJpbnN0cnVjdGlvbnNcIiB2LWh0bWw9XCJpbnN0cnVjdGlvbnMgfCBtYXJrZG93blwiPjwvc21hbGw+XG5cbiAgICAgICAgICAgIDxjb21wb25lbnRcbiAgICAgICAgICAgICAgICB2LXJlZjpmaWVsZFxuICAgICAgICAgICAgICAgIDppcz1cImNvbXBvbmVudE5hbWVcIlxuICAgICAgICAgICAgICAgIDpjb25maWc9XCJjb25maWdcIlxuICAgICAgICAgICAgICAgIDphdXRvZm9jdXM9XCJhdXRvZm9jdXNcIlxuICAgICAgICAgICAgPjwvY29tcG9uZW50PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEZpZWxkIGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IFNsdWdGaWVsZCBmcm9tICcuL01ldGFGaWVsZHMvU2x1Zy52dWUnO1xuaW1wb3J0IERhdGVGaWVsZCBmcm9tICcuL01ldGFGaWVsZHMvRGF0ZS52dWUnO1xuaW1wb3J0IFRpdGxlRmllbGQgZnJvbSAnLi9NZXRhRmllbGRzL1RpdGxlLnZ1ZSc7XG5pbXBvcnQgVGF4b25vbXlGaWVsZCBmcm9tICcuL01ldGFGaWVsZHMvVGF4b25vbXkudnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGRdLFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBEYXRlRmllbGQsXG4gICAgICAgIFNsdWdGaWVsZCxcbiAgICAgICAgVGl0bGVGaWVsZCxcbiAgICAgICAgVGF4b25vbXlGaWVsZFxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGNvbXBvbmVudE5hbWUoKSB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9ICh0aGlzLmZpZWxkLnR5cGUgPT09ICd0YXhvbm9teScpID8gJ3RheG9ub215JyA6IHRoaXMuZmllbGQubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBgJHtuYW1lWzBdLnRvVXBwZXJDYXNlKCl9JHtuYW1lLnNsaWNlKDEpfUZpZWxkYDtcbiAgICAgICAgfSxcblxuICAgICAgICBkaXNwbGF5KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnMuZmllbGQuZGlzcGxheVxuICAgICAgICAgICAgICAgIHx8IHRoaXMuY29uZmlnLmRpc3BsYXlcbiAgICAgICAgICAgICAgICB8fCB0aGlzLiRyZWZzLmZpZWxkLmRpc3BsYXlGYWxsYmFja1xuICAgICAgICAgICAgICAgIHx8IHRoaXMuZmllbGQubmFtZTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcmVmcy5maWVsZC5pbnN0cnVjdGlvbnMgfHwgdGhpcy5jb25maWcuaW5zdHJ1Y3Rpb25zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkdHlwZUNsYXNzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQubmFtZSArICctbWV0YS1maWVsZHR5cGUnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUmVxdWlyZWQoKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JjZWQgPSB0aGlzLiRyZWZzLmZpZWxkLmlzUmVxdWlyZWQ7XG4gICAgICAgICAgICBpZiAoZm9yY2VkICE9PSB1bmRlZmluZWQpIHJldHVybiBmb3JjZWQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5yZXF1aXJlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0xvY2FsaXphYmxlKCkge1xuICAgICAgICAgICAgY29uc3QgZm9yY2VkID0gdGhpcy4kcmVmcy5maWVsZC5pc0xvY2FsaXphYmxlO1xuICAgICAgICAgICAgaWYgKGZvcmNlZCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZm9yY2VkO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmxvY2FsaXphYmxlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIE1ldGFGaWVsZC52dWU/MTI2ODJhNjgiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9TbHVnLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2x1Zy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9TbHVnLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICB2LW1vZGVsPVwic2x1Z1wiXG4gICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sIHctZnVsbCBtb25vXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyB0cmFuc2xhdGUoJ2NwLm5ldycpLnRvTG93ZXJDYXNlKCkgfX0te3sgY29udGVudFR5cGUudG9Mb3dlckNhc2UoKSB9fVwiXG4gICAgLz5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmltcG9ydCBNZXRhRmllbGR0eXBlIGZyb20gJy4vTWV0YUZpZWxkdHlwZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW01ldGFGaWVsZHR5cGUsIEF1dG9TbHVnXSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgc2x1Zzoge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1EYXRhLmZpZWxkcy5zbHVnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldChzbHVnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5maWVsZHMuc2x1ZyA9IHNsdWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzcGxheUZhbGxiYWNrKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSgnY3Auc2x1ZycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUmVxdWlyZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0xvY2FsaXphYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5hdXRvU2x1ZygndGl0bGUnLCAnc2x1ZycpO1xuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBTbHVnLnZ1ZT81ZWVhYmUzMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGlucHV0IHR5cGU9dGV4dCB2LW1vZGVsPXNsdWcgY2xhc3M9XFxcImZvcm0tY29udHJvbCB3LWZ1bGwgbW9ub1xcXCIgcGxhY2Vob2xkZXI9XFxcInt7IHRyYW5zbGF0ZSgnY3AubmV3JykudG9Mb3dlckNhc2UoKSB9fS17eyBjb250ZW50VHlwZS50b0xvd2VyQ2FzZSgpIH19XFxcIi8+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9NZXRhRmllbGRzL1NsdWcudnVlXG4vLyBtb2R1bGUgaWQgPSAyODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vRGF0ZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0RhdGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvRGF0ZS52dWVcbi8vIG1vZHVsZSBpZCA9IDI4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRhdGUtZmllbGR0eXBlXG4gICAgICAgIG5hbWU9XCJkYXRlXCJcbiAgICAgICAgOmRhdGEuc3luYz1cImZvcm1EYXRhLmZpZWxkcy5kYXRlXCJcbiAgICAgICAgOmxlYXZlLWFsZXJ0PVwidHJ1ZVwiXG4gICAgICAgIDpjb25maWc9XCJjb25maWdcIlxuICAgID48L2RhdGUtZmllbGR0eXBlPlxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuaW1wb3J0IE1ldGFGaWVsZHR5cGUgZnJvbSAnLi9NZXRhRmllbGR0eXBlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbTWV0YUZpZWxkdHlwZV0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGRpc3BsYXlGYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUoJ2NwLmRhdGVfYW5kX3RpbWUnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0xvY2FsaXphYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRGF0ZS52dWU/NDgzNmNhYmQiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkYXRlLWZpZWxkdHlwZSBuYW1lPWRhdGUgOmRhdGEuc3luYz1mb3JtRGF0YS5maWVsZHMuZGF0ZSA6bGVhdmUtYWxlcnQ9dHJ1ZSA6Y29uZmlnPWNvbmZpZz48L2RhdGUtZmllbGR0eXBlPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9EYXRlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RpdGxlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVGl0bGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvVGl0bGUudnVlXG4vLyBtb2R1bGUgaWQgPSAyODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgdHlwZS10ZXh0XCIgYXV0b2ZvY3VzPVwiYXV0b2ZvY3VzXCIgdi1tb2RlbD1cImZvcm1EYXRhLmZpZWxkcy50aXRsZVwiIC8+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmltcG9ydCBNZXRhRmllbGR0eXBlIGZyb20gJy4vTWV0YUZpZWxkdHlwZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW01ldGFGaWVsZHR5cGVdLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBkaXNwbGF5RmFsbGJhY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlKCdjcC50aXRsZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUmVxdWlyZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0xvY2FsaXphYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUaXRsZS52dWU/YTI0ZDA1YmMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9XFxcImZvcm0tY29udHJvbCB0eXBlLXRleHRcXFwiIGF1dG9mb2N1cz1hdXRvZm9jdXMgdi1tb2RlbD1mb3JtRGF0YS5maWVsZHMudGl0bGUgLz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL01ldGFGaWVsZHMvVGl0bGUudnVlXG4vLyBtb2R1bGUgaWQgPSAyODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vVGF4b25vbXkudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9UYXhvbm9teS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9UYXhvbm9teS52dWVcbi8vIG1vZHVsZSBpZCA9IDI4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8dGF4b25vbXktZmllbGR0eXBlXG4gICAgICAgIG5hbWU9XCJjYXRlZ29yaWVzXCJcbiAgICAgICAgOmNvbmZpZz1cImZpZWxkQ29uZmlnXCJcbiAgICAgICAgOmRhdGEuc3luYz1cImZvcm1EYXRhLmZpZWxkc1tjb25maWcubmFtZV1cIlxuICAgICAgICA6bGVhdmUtYWxlcnQ9XCJ0cnVlXCJcbiAgICA+PC90YXhvbm9teS1maWVsZHR5cGU+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmltcG9ydCBNZXRhRmllbGR0eXBlIGZyb20gJy4vTWV0YUZpZWxkdHlwZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW01ldGFGaWVsZHR5cGVdLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBmaWVsZENvbmZpZygpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RheG9ub215JyxcbiAgICAgICAgICAgICAgICB0YXhvbm9teTogdGhpcy5jb25maWcubmFtZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jb25maWcud2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUYXhvbm9teS52dWU/NTM0ZjAyMDUiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDx0YXhvbm9teS1maWVsZHR5cGUgbmFtZT1jYXRlZ29yaWVzIDpjb25maWc9ZmllbGRDb25maWcgOmRhdGEuc3luYz1mb3JtRGF0YS5maWVsZHNbY29uZmlnLm5hbWVdIDpsZWF2ZS1hbGVydD10cnVlPjwvdGF4b25vbXktZmllbGR0eXBlPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkcy9UYXhvbm9teS52dWVcbi8vIG1vZHVsZSBpZCA9IDI5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgOmNsYXNzPWNsYXNzZXM+IDxkaXYgY2xhc3M9ZmllbGQtaW5uZXI+IDxkaXYgdi1pZj1pc1JlYWRPbmx5IGNsYXNzPXJlYWQtb25seS1vdmVybGF5IDp0aXRsZT1cXFwidHJhbnNsYXRlKCdjcC5yZWFkX29ubHknKVxcXCI+PC9kaXY+IDxsYWJlbCBjbGFzcz1ibG9jaz4ge3sgZGlzcGxheSB9fSA8aSBjbGFzcz1yZXF1aXJlZCB2LWlmPWlzUmVxdWlyZWQ+KjwvaT4gPC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2sgdi1pZj1pbnN0cnVjdGlvbnMgdi1odG1sPVxcXCJpbnN0cnVjdGlvbnMgfCBtYXJrZG93blxcXCI+PC9zbWFsbD4gPGNvbXBvbmVudCB2LXJlZjpmaWVsZCA6aXM9Y29tcG9uZW50TmFtZSA6Y29uZmlnPWNvbmZpZyA6YXV0b2ZvY3VzPWF1dG9mb2N1cz48L2NvbXBvbmVudD4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvTWV0YUZpZWxkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JlZ3VsYXJGaWVsZC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1JlZ3VsYXJGaWVsZC52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvUmVndWxhckZpZWxkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgdi1zaG93PVwiaXNWaXNpYmxlXCIgOmNsYXNzPVwiY2xhc3Nlc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtaW5uZXJcIj5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzUmVhZE9ubHlcIiBjbGFzcz1cInJlYWQtb25seS1vdmVybGF5XCIgOnRpdGxlPVwidHJhbnNsYXRlKCdjcC5yZWFkX29ubHknKVwiPjwvZGl2PlxuXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiIDpjbGFzcz1cInsnYm9sZCc6IGZpZWxkLmJvbGR9XCI+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJmaWVsZC5kaXNwbGF5XCI+e3sgZmllbGQuZGlzcGxheSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCIhZmllbGQuZGlzcGxheVwiPnt7IGZpZWxkLm5hbWUgfCBkZXNsdWdpZnkgfCB0aXRsZWl6ZSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJyZXF1aXJlZFwiIHYtaWY9XCJmaWVsZC5yZXF1aXJlZFwiPio8L2k+XG4gICAgICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCIgdi1pZj1cImZpZWxkLmluc3RydWN0aW9uc1wiIHYtaHRtbD1cImZpZWxkLmluc3RydWN0aW9ucyB8IG1hcmtkb3duXCI+PC9zbWFsbD5cblxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiZW52XCIgY2xhc3M9XCJlbnZpcm9ubWVudC1maWVsZFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWxvY2tcIj48L2k+IHt7IHRyYW5zbGF0ZSgnY3AuZGVmaW5lZF9pbl9lbnZpcm9ubWVudCcpIH19XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGNvbXBvbmVudCB2LWVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDppcz1cImNvbXBvbmVudE5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOm5hbWU9XCJmaWVsZC5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLnN5bmM9XCJkYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpjb25maWc9XCJjb25maWdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmF1dG9mb2N1cz1cImF1dG9mb2N1c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6bGVhdmUtYWxlcnQ9XCJ0cnVlXCI+XG4gICAgICAgICAgICA8L2NvbXBvbmVudD5cblxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBGaWVsZCBmcm9tICcuL0ZpZWxkJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGRdLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBjb21wb25lbnROYW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQudHlwZS5yZXBsYWNlKCcuJywgJy0nKSArICctZmllbGR0eXBlJztcbiAgICAgICAgfSxcblxuICAgICAgICBpc0xvY2FsaXphYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmxvY2FsaXphYmxlO1xuICAgICAgICB9LFxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZWd1bGFyRmllbGQudnVlP2Q3MWQzMThjIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IHYtc2hvdz1pc1Zpc2libGUgOmNsYXNzPWNsYXNzZXM+IDxkaXYgY2xhc3M9ZmllbGQtaW5uZXI+IDxkaXYgdi1pZj1pc1JlYWRPbmx5IGNsYXNzPXJlYWQtb25seS1vdmVybGF5IDp0aXRsZT1cXFwidHJhbnNsYXRlKCdjcC5yZWFkX29ubHknKVxcXCI+PC9kaXY+IDxsYWJlbCBjbGFzcz1ibG9jayA6Y2xhc3M9XFxcInsnYm9sZCc6IGZpZWxkLmJvbGR9XFxcIj4gPHRlbXBsYXRlIHYtaWY9ZmllbGQuZGlzcGxheT57eyBmaWVsZC5kaXNwbGF5IH19PC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHYtaWY9IWZpZWxkLmRpc3BsYXk+e3sgZmllbGQubmFtZSB8IGRlc2x1Z2lmeSB8IHRpdGxlaXplIH19PC90ZW1wbGF0ZT4gPGkgY2xhc3M9cmVxdWlyZWQgdi1pZj1maWVsZC5yZXF1aXJlZD4qPC9pPiA8L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jayB2LWlmPWZpZWxkLmluc3RydWN0aW9ucyB2LWh0bWw9XFxcImZpZWxkLmluc3RydWN0aW9ucyB8IG1hcmtkb3duXFxcIj48L3NtYWxsPiA8ZGl2IHYtaWY9ZW52IGNsYXNzPWVudmlyb25tZW50LWZpZWxkPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWxvY2tcXFwiPjwvaT4ge3sgdHJhbnNsYXRlKCdjcC5kZWZpbmVkX2luX2Vudmlyb25tZW50JykgfX0gPC9kaXY+IDxjb21wb25lbnQgdi1lbHNlIDppcz1jb21wb25lbnROYW1lIDpuYW1lPWZpZWxkLm5hbWUgOmRhdGEuc3luYz1kYXRhIDpjb25maWc9Y29uZmlnIDphdXRvZm9jdXM9YXV0b2ZvY3VzIDpsZWF2ZS1hbGVydD10cnVlPiA8L2NvbXBvbmVudD4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvUmVndWxhckZpZWxkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1wdWJsaXNoLWZpZWxkcz4gPGNvbXBvbmVudCB2LWZvcj1cXFwiKGksIGZpZWxkKSBpbiBmaWVsZHNcXFwiIDppcz1jb21wb25lbnROYW1lKGZpZWxkKSA6ZmllbGQ9ZmllbGQgOmRhdGEuc3luYz1kYXRhW2ZpZWxkLm5hbWVdIDpjb25maWc9ZmllbGRzWyRpbmRleF0gOmF1dG9mb2N1cz1cXFwiYXV0b2ZvY3VzICYmIGkgPT0gMFxcXCIgOmVudj1kZWZpbmVkSW5FbnZpcm9ubWVudChmaWVsZC5uYW1lKT48L2NvbXBvbmVudD4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9GaWVsZHMudnVlXG4vLyBtb2R1bGUgaWQgPSAyOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPWFzc2V0LWVkaXRvci1tb2RhbD4gPGRpdiBjbGFzcz1cXFwiYXNzZXQtZWRpdG9yIHt7IGlzSW1hZ2UgPyAnaXMtaW1hZ2UnIDogJ2lzLWZpbGUnIH19XFxcIj4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9bG9hZGluZz4gPGRpdj48c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19PC9kaXY+IDwvZGl2PiA8ZGl2IHYtaWY9c2F2aW5nIGNsYXNzPWxvYWRpbmc+IDxkaXY+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLnNhdmluZycpIH19PC9kaXY+IDwvZGl2PiA8dGVtcGxhdGUgdi1pZj1cXFwiIWxvYWRpbmcgJiYgIXNhdmluZ1xcXCI+IDxkaXYgY2xhc3M9ZWRpdG9yLW1ldGE+IDxkaXYgY2xhc3M9YXNzZXQtZWRpdG9yLW1ldGEtaXRlbXM+IDxkaXYgY2xhc3M9XFxcIm1ldGEtaXRlbSBvbmUtbGluZVxcXCI+IDxmaWxlLWljb24gOmV4dGVuc2lvbj1hc3NldC5leHRlbnNpb24+PC9maWxlLWljb24+IHt7IGFzc2V0LnBhdGggfX0gPC9kaXY+IDxkaXYgY2xhc3M9bWV0YS1pdGVtIHYtaWY9aXNJbWFnZT4gPHNwYW4gY2xhc3M9bWV0YS1sYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmRpbWVuc2lvbnMnKSB9fTwvc3Bhbj4gPHNwYW4gY2xhc3M9bWV0YS12YWx1ZT57eyBhc3NldC53aWR0aCB9fSB4IHt7IGFzc2V0LmhlaWdodCB9fTwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9bWV0YS1pdGVtPiA8c3BhbiBjbGFzcz1tZXRhLWxhYmVsPnt7IHRyYW5zbGF0ZSgnY3Auc2l6ZScpIH19PC9zcGFuPiA8c3BhbiBjbGFzcz1tZXRhLXZhbHVlPnt7IGFzc2V0LnNpemUgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPW1ldGEtaXRlbT4gPHNwYW4gY2xhc3M9bWV0YS1sYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmxhc3RfbW9kaWZpZWQnKSB9fTwvc3Bhbj4gPHNwYW4gY2xhc3M9bWV0YS12YWx1ZSA6dGl0bGU9YXNzZXQubGFzdF9tb2RpZmllZD57eyBhc3NldC5sYXN0X21vZGlmaWVkX3JlbGF0aXZlIH19PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9YXNzZXQtZWRpdG9yLW1ldGEtYWN0aW9ucz4gPGEgQGNsaWNrLnByZXZlbnQ9ZG93bmxvYWQgdGl0bGU9XFxcInt7IHRyYW5zbGF0ZSgnY3AuZG93bmxvYWQnKSB9fVxcXCI+IDxzdmcgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgd2lkdGg9MjcgaGVpZ2h0PTIzIHZpZXdCb3g9XFxcIjAgMCAyNyAyM1xcXCI+IDxnIGZpbGw9bm9uZSBmaWxsLXJ1bGU9ZXZlbm9kZCBzdHJva2U9IzY3Njc2NyBzdHJva2Utd2lkdGg9MiB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgxIDEuMDQ1KVxcXCI+IDxwYXRoIGQ9XFxcIk0yMS4xMjE5ODI4IDYuODU3MTQyODZDMjEuMTIxOTgyOCA2Ljg1NzE0Mjg2IDIwLjAyOTc0MTQgNi42OTY0Mjg1NyAxOC45NjU1MTcyIDYuODU3MTQyODZNMy4wMTcyNDEzOCA2QzMuMDE3MjQxMzggNC4xMDY1NzE0MyA0LjU2MTIwNjkgMi41NzE0Mjg1NyA2LjQ2NTUxNzI0IDIuNTcxNDI4NTcgOC4zNjk4Mjc1OSAyLjU3MTQyODU3IDkuOTEzNzkzMSA0LjEwNjU3MTQzIDkuOTEzNzkzMSA2XFxcIi8+IDxwYXRoIGQ9XFxcIk0xOC41MzQ0ODI4IDE2LjI4NTcxNDNMMjAuMjQ2NTUxNyAxNi4yODU3MTQzQzIyLjg2MDc3NTkgMTYuMjg1NzE0MyAyNSAxNC4xNTkxNDI5IDI1IDExLjU1OTQyODYgMjUgOS4yNTc1NzE0MyAyMy4zMjE1NTE3IDcuMjY5NDI4NTcgMjEuMTIxOTgyOCA2Ljg1NzE0Mjg2IDIxLjA3Mjg0NDggMy4xMjkgMTguMDIxOTgyOCAwIDE0LjI2MDM0NDggMCAxMS44NjQyMjQxIDAgOS42MTQ2NTUxNyAxLjI4Nzg1NzE0IDguMzcyNDEzNzkgMy4xNDQgNy44MjU4NjIwNyAyLjc4MjcxNDI5IDcuMTcwNjg5NjYgMi41NzE0Mjg1NyA2LjQ2NTUxNzI0IDIuNTcxNDI4NTcgNC41NjEyMDY5IDIuNTcxNDI4NTcgMy4wMTcyNDEzOCA0LjEwNjU3MTQzIDMuMDE3MjQxMzggNiAzLjAxNzI0MTM4IDYuMDY1NTcxNDMgMy4wMjMyNzU4NiA2LjEyOTg1NzE0IDMuMDI3MTU1MTcgNi4xOTQ1NzE0MyAzLjAyMjg0NDgzIDYuMjczIDMuMDE3MjQxMzggNi4zNTE0Mjg1NyAzLjAxNzI0MTM4IDYuNDI4NTcxNDMgMS4yOTc4NDQ4MyA3LjI0OCAwIDkuMTk1ODU3MTQgMCAxMS4yMDkyODU3IDAgMTQuMDAxNDI4NiAyLjI5NzQxMzc5IDE2LjI4NTcxNDMgNS4xMDU2MDM0NSAxNi4yODU3MTQzTDcuMzI3NTg2MjEgMTYuMjg1NzE0M00xMi45MzEwMzQ1IDExLjE0Mjg1NzFMMTIuOTMxMDM0NSAyMU0xMi45MzEwMzQ1IDIxTDkuNDgyNzU4NjIgMTcuNTcxNDI4Nk0xNi4zNzkzMTAzIDE3LjU3MTQyODZMMTIuOTMxMDM0NSAyMVxcXCIvPiA8L2c+IDwvc3ZnPiA8L2E+IDxhIEBjbGljay5wcmV2ZW50PWNsb3NlIHRpdGxlPVxcXCJ7eyB0cmFuc2xhdGUoJ2NwLmNsb3NlJykgfX1cXFwiPiA8c3ZnIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHdpZHRoPTE4IGhlaWdodD0xOSB2aWV3Qm94PVxcXCIwIDAgMTggMTlcXFwiPiA8ZyBmaWxsPW5vbmUgZmlsbC1ydWxlPWV2ZW5vZGQgc3Ryb2tlPSM2NzY3Njcgc3Ryb2tlLXdpZHRoPTIgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMSAxLjU0NSlcXFwiPiA8cGF0aCBkPVxcXCJNMTYgMEwuMTYwNTMzMzMzIDE1LjgzODkzMzNNMTYgMTUuODM4OTMzM0wuMTYwNTMzMzMzIDBcXFwiLz4gPC9nPiA8L3N2Zz4gPC9hPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9ZWRpdG9yLW1haW4+IDxkaXYgY2xhc3M9ZWRpdG9yLXByZXZpZXc+IDxkaXYgY2xhc3M9ZWRpdG9yLXByZXZpZXctaW1hZ2Ugdi1pZj1pc0ltYWdlPiA8ZGl2IGNsYXNzPWltYWdlLXdyYXBwZXI+IDxpbWcgOnNyYz1hc3NldC5wcmV2aWV3IGNsYXNzPWFzc2V0LXRodW1iIC8+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1hdWRpby13cmFwcGVyIHYtaWY9YXNzZXQuaXNfYXVkaW8+IDxhdWRpbyA6c3JjPWFzc2V0LnVybCBjb250cm9scyBwcmVsb2FkPWF1dG8+PC9hdWRpbz4gPC9kaXY+IDxkaXYgY2xhc3M9dmlkZW8td3JhcHBlciB2LWlmPWFzc2V0LmlzX3ZpZGVvPiA8dmlkZW8gOnNyYz1hc3NldC51cmwgY29udHJvbHM+PC92aWRlbz4gPC9kaXY+IDxkaXYgY2xhc3M9ZnVsbC1oZWlnaHQgdi1pZj1cXFwiYXNzZXQuZXh0ZW5zaW9uID09ICdwZGYnXFxcIj4gPG9iamVjdCBkYXRhPVxcXCJ7eyBhc3NldC51cmwgfX1cXFwiIHR5cGU9YXBwbGljYXRpb24vcGRmIHdpZHRoPTEwMCUgaGVpZ2h0PTEwMCU+IDwvb2JqZWN0PiA8L2Rpdj4gPGRpdiBjbGFzcz1mdWxsLWhlaWdodCB2LWlmPWFzc2V0LmlzX3ByZXZpZXdhYmxlPiA8aWZyYW1lIGNsYXNzPVxcXCJmdWxsLWhlaWdodCBmdWxsLXdpZHRoXFxcIiBmcmFtZWJvcmRlcj0wIHNyYz1cXFwiaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZ3ZpZXc/dXJsPXt7IGFzc2V0LnBlcm1hbGluayB9fSZlbWJlZGRlZD10cnVlXFxcIj48L2lmcmFtZT4gPC9kaXY+IDxkaXYgY2xhc3M9ZWRpdG9yLWZpbGUtYWN0aW9ucz4gPGJ1dHRvbiB2LWlmPWlzSW1hZ2UgdHlwZT1idXR0b24gY2xhc3M9YnRuIEBjbGljay5wcmV2ZW50PW9wZW5Gb2NhbFBvaW50RWRpdG9yPnt7IHRyYW5zbGF0ZSgnY3AuZm9jYWxfcG9pbnQnKSB9fSA8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1idG4gQGNsaWNrLnByZXZlbnQ9b3BlblJlbmFtZXI+e3sgdHJhbnNsYXRlKCdjcC5yZW5hbWVfZmlsZScpIH19IDwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPWJ0biBAY2xpY2sucHJldmVudD1vcGVuTW92ZXI+e3sgdHJhbnNsYXRlKCdjcC5tb3ZlX2ZpbGUnKSB9fSA8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPWVkaXRvci1mb3JtPiA8ZGl2IGNsYXNzPWVkaXRvci1mb3JtLWZpZWxkcz4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiB2LWlmPWhhc0Vycm9ycz4gPHVsPiA8bGkgdi1mb3I9XFxcImVycm9yIGluIGVycm9yc1xcXCI+e3sgZXJyb3IgfX08L2xpPiA8L3VsPiA8L2Rpdj4gPHB1Ymxpc2gtZmllbGRzIDpmaWVsZHM9cHVibGlzaEZpZWxkcyA6ZGF0YS5zeW5jPWZpZWxkcyA6ZXJyb3JzPWVycm9ycyA6YXV0b2ZvY3VzPXRydWUgOnJlZ3VsYXItdGl0bGUtZmllbGQ9dHJ1ZT4gPC9wdWJsaXNoLWZpZWxkcz4gPC9kaXY+IDxkaXYgY2xhc3M9ZWRpdG9yLWZvcm0tYWN0aW9ucz4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kYW5nZXJcXFwiIEBjbGljaz1kZWxldGUgdi1pZj1hbGxvd0RlbGV0aW5nPiB7eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19IDwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljaz1zYXZlPiB7eyB0cmFuc2xhdGUoJ2NwLnNhdmUnKSB9fSA8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC90ZW1wbGF0ZT4gPGZvY2FsLXBvaW50LWVkaXRvciB2LWlmPXNob3dGb2NhbFBvaW50RWRpdG9yIDpkYXRhPWZpZWxkcy5mb2N1cyA6aW1hZ2U9YXNzZXQucHJldmlldyBAc2VsZWN0ZWQ9c2VsZWN0Rm9jYWxQb2ludCBAY2xvc2VkPWNsb3NlRm9jYWxQb2ludEVkaXRvcj4gPC9mb2NhbC1wb2ludC1lZGl0b3I+IDxpbWFnZS1lZGl0b3Igdi1pZj1zaG93SW1hZ2VFZGl0b3IgOmlkPWFzc2V0LmlkIDpjb250YWluZXI9YXNzZXQuY29udGFpbmVyIDpwYXRoPWFzc2V0LnBhdGggOnVybD1hc3NldC5wZXJtYWxpbmsgQHNhdmVkPXVwZGF0ZVRodW1ibmFpbD4gPC9pbWFnZS1lZGl0b3I+IDxyZW5hbWVyIHYtaWY9c2hvd1JlbmFtZXIgOmFzc2V0PWFzc2V0IEBzYXZlZD1hc3NldFJlbmFtZWQgQGNsb3NlZD1jbG9zZVJlbmFtZXI+IDwvcmVuYW1lcj4gPG1vdmVyIHYtaWY9c2hvd01vdmVyIDphc3NldHM9W2Fzc2V0LmlkXSA6Zm9sZGVyPWFzc2V0LmZvbGRlciA6Y29udGFpbmVyPWFzc2V0LmNvbnRhaW5lciBAc2F2ZWQ9YXNzZXRNb3ZlZCBAY2xvc2VkPWNsb3NlTW92ZXI+IDwvbW92ZXI+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvRWRpdG9yL0VkaXRvci52dWVcbi8vIG1vZHVsZSBpZCA9IDI5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Gb2xkZXJFZGl0b3IudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Gb2xkZXJFZGl0b3IudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9Gb2xkZXJFZGl0b3IudnVlXG4vLyBtb2R1bGUgaWQgPSAyOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPG1vZGFsIDpzaG93PVwidHJ1ZVwiIGNsYXNzPVwiYXNzZXQtbW9kYWwgYXNzZXQtZm9sZGVyLWVkaXRvclwiIDpzYXZpbmc9XCJzYXZpbmdcIiA6bG9hZGluZz1cImxvYWRpbmdcIj5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJjbG9zZVwiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwiY2xvc2VcIiBzbG90PVwiY2xvc2VcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIiBAY2xpY2s9XCJjbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImhlYWRlclwiPlxuICAgICAgICAgICAgPGgxIHYtaWY9XCJjcmVhdGVcIj57eyB0cmFuc2xhdGUoJ2NwLmNyZWF0ZV9mb2xkZXInKSB9fTwvaDE+XG4gICAgICAgICAgICA8aDEgdi1pZj1cIiFjcmVhdGVcIj57eyB0cmFuc2xhdGUoJ2NwLmVkaXRfZm9sZGVyJykgfX08L2gxPlxuICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiYm9keVwiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgdi1pZj1cImhhc0Vycm9yc1wiPlxuICAgICAgICAgICAgICAgIDxwIHYtZm9yPVwiZXJyb3IgaW4gZXJyb3JzXCI+e3sgZXJyb3IgfX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIiB2LWlmPVwiY3JlYXRlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLm5hbWUnKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuZm9sZGVyX2RpcmVjdG9yeV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiZm9ybS5iYXNlbmFtZVwiIEBrZXl1cC5lc2M9XCJjbG9zZVwiIHYtZm9jdXM9XCJjcmVhdGVcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC50aXRsZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5mb2xkZXJfdGl0bGVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImZvcm0udGl0bGVcIiBAa2V5dXAuZXNjPVwiY2xvc2VcIiB2LWZvY3VzPVwiISBjcmVhdGVcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJmb290ZXJcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuXCIgQGNsaWNrPVwiY2xvc2VcIj57eyB0cmFuc2xhdGUoJ2NwLmNsb3NlJykgfX08L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgQGNsaWNrPVwic2F2ZVwiPnt7IHRyYW5zbGF0ZSgnY3Auc2F2ZScpIH19PC9idXR0b24+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9tb2RhbD5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGNvbnRhaW5lcjogU3RyaW5nLFxuICAgICAgICBwYXRoOiBTdHJpbmcsXG4gICAgICAgIGNyZWF0ZTogQm9vbGVhblxuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm06IHt9LFxuICAgICAgICAgICAgZm9sZGVyOiB7fSxcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBzYXZpbmc6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgIGJhc2VuYW1lTW9kaWZpZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBoYXNFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5lcnJvcnMpLmxlbmd0aCA+IDAgJiYgIXRoaXMuc2F2aW5nO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMucGF0aCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5mb2xkZXIgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZm9ybSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRGb2xkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRCbGFua0ZvbGRlcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldEV4aXN0aW5nRm9sZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0QmxhbmtGb2xkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5mb2xkZXIgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZm9ybSA9IHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLFxuICAgICAgICAgICAgICAgIHBhcmVudDogdGhpcy5wYXRoLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICBiYXNlbmFtZTogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRFeGlzdGluZ0ZvbGRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gY3BfdXJsKCdhc3NldHMvZm9sZGVycy8nICsgdGhpcy5jb250YWluZXIgKyAnLycgKyB0aGlzLnBhdGgpO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldCh1cmwpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9sZGVyID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jcmVhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVOZXdGb2xkZXIoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlRXhpc3RpbmdGb2xkZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzYXZlTmV3Rm9sZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBjcF91cmwoJ2Fzc2V0cy9mb2xkZXJzJyk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIHRoaXMuZm9ybSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY3JlYXRlZCcsIGRhdGEuZm9sZGVyLnBhdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2F2ZUV4aXN0aW5nRm9sZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBjcF91cmwoJ2Fzc2V0cy9mb2xkZXJzLycgKyB0aGlzLmNvbnRhaW5lciArICcvJyArIHRoaXMucGF0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIHRoaXMuZm9ybSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5nZXRGb2xkZXIoKTtcbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEZvbGRlckVkaXRvci52dWU/NzdmMWU2YTIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxtb2RhbCA6c2hvdz10cnVlIGNsYXNzPVxcXCJhc3NldC1tb2RhbCBhc3NldC1mb2xkZXItZWRpdG9yXFxcIiA6c2F2aW5nPXNhdmluZyA6bG9hZGluZz1sb2FkaW5nPiA8dGVtcGxhdGUgc2xvdD1jbG9zZT4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiB0YWJpbmRleD0tMSBjbGFzcz1jbG9zZSBzbG90PWNsb3NlIGFyaWEtbGFiZWw9Q2xvc2UgQGNsaWNrPWNsb3NlPjxzcGFuIGFyaWEtaGlkZGVuPXRydWU+JnRpbWVzOzwvc3Bhbj4gPC9idXR0b24+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSBzbG90PWhlYWRlcj4gPGgxIHYtaWY9Y3JlYXRlPnt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRlX2ZvbGRlcicpIH19PC9oMT4gPGgxIHYtaWY9IWNyZWF0ZT57eyB0cmFuc2xhdGUoJ2NwLmVkaXRfZm9sZGVyJykgfX08L2gxPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1ib2R5PiA8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC1kYW5nZXJcXFwiIHYtaWY9aGFzRXJyb3JzPiA8cCB2LWZvcj1cXFwiZXJyb3IgaW4gZXJyb3JzXFxcIj57eyBlcnJvciB9fTwvcD4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cCB2LWlmPWNyZWF0ZT4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AubmFtZScpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5mb2xkZXJfZGlyZWN0b3J5X2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1mb3JtLmJhc2VuYW1lIEBrZXl1cC5lc2M9Y2xvc2Ugdi1mb2N1cz1jcmVhdGU+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLnRpdGxlJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmZvbGRlcl90aXRsZV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9Zm9ybS50aXRsZSBAa2V5dXAuZXNjPWNsb3NlIHYtZm9jdXM9XFxcIiEgY3JlYXRlXFxcIj4gPC9kaXY+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSBzbG90PWZvb3Rlcj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1idG4gQGNsaWNrPWNsb3NlPnt7IHRyYW5zbGF0ZSgnY3AuY2xvc2UnKSB9fTwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljaz1zYXZlPnt7IHRyYW5zbGF0ZSgnY3Auc2F2ZScpIH19PC9idXR0b24+IDwvdGVtcGxhdGU+IDwvbW9kYWw+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0Jyb3dzZXIvRm9sZGVyRWRpdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0JyZWFkY3J1bWJzLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQnJlYWRjcnVtYnMudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9CcmVhZGNydW1icy52dWVcbi8vIG1vZHVsZSBpZCA9IDMwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiYnJlYWRjcnVtYnNcIj5cbiAgICAgICAgPGEgaHJlZj1cIlwiXG4gICAgICAgICAgIHYtZm9yPVwiKGksIHBhcnQpIGluIHBhdGhQYXJ0c1wiXG4gICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwic2VsZWN0Rm9sZGVyKGkpXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1mb2xkZXJcIj48L3NwYW4+XG4gICAgICAgICAgICB7eyBwYXJ0IH19XG4gICAgICAgIDwvYT5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsncGF0aCddLFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIHBhdGhQYXJ0cygpIHtcbiAgICAgICAgICAgIGxldCBwYXJ0cyA9IFsnLyddO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wYXRoID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFydHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJ0cy5jb25jYXQodGhpcy5wYXRoLnNwbGl0KCcvJykpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2VsZWN0Rm9sZGVyKHBhcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSAocGFydCA9PT0gMClcbiAgICAgICAgICAgICAgICA/ICcvJ1xuICAgICAgICAgICAgICAgIDogdGhpcy5wYXRoUGFydHMuc2xpY2UoMSwgcGFydCArIDEpLmpvaW4oJy8nKTtcblxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnbmF2aWdhdGVkJywgcGF0aCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQnJlYWRjcnVtYnMudnVlPzQ0OTAxM2VhIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPWJyZWFkY3J1bWJzPiA8YSBocmVmPVxcXCJcXFwiIHYtZm9yPVxcXCIoaSwgcGFydCkgaW4gcGF0aFBhcnRzXFxcIiBAY2xpY2sucHJldmVudD1zZWxlY3RGb2xkZXIoaSk+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tZm9sZGVyXFxcIj48L3NwYW4+IHt7IHBhcnQgfX0gPC9hPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQnJvd3Nlci9CcmVhZGNydW1icy52dWVcbi8vIG1vZHVsZSBpZCA9IDMwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9XFxcImFzc2V0LWJyb3dzZXIgY2FyZFxcXCIgQGRyYWdvdmVyPWRyYWdPdmVyIEBkcmFnbGVhdmU9ZHJhZ1N0b3AgQGRyb3A9ZHJhZ1N0b3A+IDxkaXYgdi1pZj1cXFwiISBpbml0aWFsaXplZFxcXCIgY2xhc3M9XFxcImFzc2V0LWJyb3dzZXItbG9hZGluZyBsb2FkaW5nXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fSA8L2Rpdj4gPGRpdiBjbGFzcz1kcmFnLW5vdGlmaWNhdGlvbiB2LXNob3c9XFxcImNhbkVkaXQgJiYgZHJhZ2dpbmdGaWxlXFxcIj4gPGkgY2xhc3M9XFxcImljb24gaWNvbi1kb3dubG9hZFxcXCI+PC9pPiA8aDM+e3sgdHJhbnNsYXRlKCdjcC5kcm9wX3RvX3VwbG9hZCcpIH19PC9oMz4gPC9kaXY+IDxkaXYgdi1pZj1zaG93U2lkZWJhciBjbGFzcz1hc3NldC1icm93c2VyLXNpZGViYXI+IDxoND57eyB0cmFuc2xhdGUoJ2NwLmNvbnRhaW5lcnMnKSB9fTwvaDQ+IDxkaXYgdi1mb3I9XFxcImMgaW4gY29udGFpbmVyc1xcXCIgY2xhc3M9c2lkZWJhci1pdGVtIDpjbGFzcz1cXFwieyAnYWN0aXZlJzogY29udGFpbmVyLmlkID09IGMuaWQgfVxcXCI+IDxhIEBjbGljaz1zZWxlY3RDb250YWluZXIoYy5pZCk+IHt7IGMudGl0bGUgfX0gPC9hPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9YXNzZXQtYnJvd3Nlci1tYWluIHYtaWY9aW5pdGlhbGl6ZWQ+IDxkaXYgY2xhc3M9YXNzZXQtYnJvd3Nlci1oZWFkZXI+IDxoMSBjbGFzcz1tYi0zPiA8dGVtcGxhdGUgdi1pZj1pc1NlYXJjaGluZz4ge3sgdHJhbnNsYXRlKCdjcC5zZWFyY2hfcmVzdWx0cycpIH19IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWVsc2U+IDx0ZW1wbGF0ZSB2LWlmPXJlc3RyaWN0TmF2aWdhdGlvbj4ge3sgZm9sZGVyLnRpdGxlIHx8IGZvbGRlci5wYXRoIH19IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWVsc2U+IHt7IGNvbnRhaW5lci50aXRsZSB9fSA8L3RlbXBsYXRlPiA8L3RlbXBsYXRlPiA8ZGl2IGNsYXNzPWxvYWRpbmctaW5kaWNhdG9yIHYtc2hvdz1sb2FkaW5nQXNzZXRzPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IDwvZGl2PiA8L2gxPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPVxcXCJzZWFyY2ggZmlsdGVyLWNvbnRyb2wgbWItM1xcXCIgcGxhY2Vob2xkZXI9XFxcInt7IHRyYW5zbGF0ZSgnY3Auc2VhcmNoJykgfX0uLi5cXFwiIHYtbW9kZWw9c2VhcmNoVGVybSBkZWJvdW5jZT01MDAgLz4gPGRpdiBjbGFzcz1cXFwiYXNzZXQtYnJvd3Nlci1hY3Rpb25zIGZsZXh5IHdyYXBcXFwiPiA8c2xvdCBuYW1lPWNvbnRleHR1YWwtYWN0aW9ucz48L3Nsb3Q+IDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBhY3Rpb24gbWItM1xcXCI+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4taWNvblxcXCIgOmNsYXNzPVxcXCJ7J2RlcHJlc3NlZCc6IGRpc3BsYXlNb2RlID09ICdncmlkJ31cXFwiIEBjbGljaz1cXFwic2V0RGlzcGxheU1vZGUoJ2dyaWQnKVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tZ3JpZFxcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1pY29uXFxcIiA6Y2xhc3M9XFxcInsnZGVwcmVzc2VkJzogZGlzcGxheU1vZGUgPT0gJ3RhYmxlJ31cXFwiIEBjbGljaz1cXFwic2V0RGlzcGxheU1vZGUoJ3RhYmxlJylcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWxpc3RcXFwiPjwvc3Bhbj4gPC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgYWN0aW9uIG1iLTNcXFwiIHYtaWY9Y2FuRWRpdD4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1idG4gdi1pZj1cXFwiIXJlc3RyaWN0TmF2aWdhdGlvbiAmJiAhaXNTZWFyY2hpbmdcXFwiIEBjbGljay5wcmV2ZW50PWNyZWF0ZUZvbGRlcj4ge3sgdHJhbnNsYXRlKCdjcC5uZXdfZm9sZGVyJykgfX0gPC9idXR0b24+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9YnRuIEBjbGljay5wcmV2ZW50PXVwbG9hZEZpbGUgdi1pZj0haXNTZWFyY2hpbmc+IHt7IHRyYW5zbGF0ZSgnY3AudXBsb2FkJykgfX0gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9YXNzZXQtYnJvd3Nlci1jb250ZW50PiA8dXBsb2FkZXIgdi1yZWY6dXBsb2FkZXIgOmRvbS1lbGVtZW50PXVwbG9hZEVsZW1lbnQgOmNvbnRhaW5lcj1jb250YWluZXIuaWQgOnBhdGg9cGF0aCBAdXBkYXRlZD11cGxvYWRzVXBkYXRlZCBAdXBsb2FkLWNvbXBsZXRlPWxvYWRBc3NldHM+IDwvdXBsb2FkZXI+IDx1cGxvYWRzIHYtaWY9dXBsb2Fkcy5sZW5ndGggOnVwbG9hZHM9dXBsb2Fkcz4gPC91cGxvYWRzPiA8Y29tcG9uZW50IDppcz1saXN0aW5nQ29tcG9uZW50IDpjb250YWluZXI9Y29udGFpbmVyLmlkIDphc3NldHM9YXNzZXRzIDpmb2xkZXI9Zm9sZGVyIDpzdWJmb2xkZXJzPXN1YmZvbGRlcnMgOmxvYWRpbmc9bG9hZGluZyA6c2VsZWN0ZWQtYXNzZXRzPXNlbGVjdGVkQXNzZXRzIDpyZXN0cmljdC1uYXZpZ2F0aW9uPXJlc3RyaWN0TmF2aWdhdGlvbiA6aXMtc2VhcmNoaW5nPWlzU2VhcmNoaW5nIEBmb2xkZXItc2VsZWN0ZWQ9Zm9sZGVyU2VsZWN0ZWQgQGZvbGRlci1lZGl0aW5nPWVkaXRGb2xkZXIgQGZvbGRlci1kZWxldGVkPWZvbGRlckRlbGV0ZWQgQGFzc2V0LXNlbGVjdGVkPWFzc2V0U2VsZWN0ZWQgQGFzc2V0LWRlc2VsZWN0ZWQ9YXNzZXREZXNlbGVjdGVkIEBhc3NldC1lZGl0aW5nPWVkaXRBc3NldCBAYXNzZXQtZGVsZXRpbmc9ZGVsZXRlQXNzZXQgQGFzc2V0cy1kcmFnZ2VkLXRvLWZvbGRlcj1hc3NldHNEcmFnZ2VkVG9Gb2xkZXIgQGFzc2V0LWRvdWJsZWNsaWNrZWQ9YXNzZXREb3VibGVjbGlja2VkIEBzb3J0ZWQ9c29ydEJ5PiA8L2NvbXBvbmVudD4gPGRpdiBjbGFzcz1uby1yZXN1bHRzIHYtaWY9XFxcImlzU2VhcmNoaW5nICYmIGlzRW1wdHlcXFwiPiA8c3ZnLWljb24gbmFtZT1mb2xkZXItc2VhcmNoLWVtcHR5IGNsYXNzPVxcXCJoLTE2IHctMTYgbXgtYXV0b1xcXCI+PC9zdmctaWNvbj4gPGgyPnt7IHRyYW5zbGF0ZSgnY3Aubm9fc2VhcmNoX3Jlc3VsdHMnKSB9fTwvaDI+IDwvZGl2PiA8cGFnaW5hdGlvbiB2LWlmPVxcXCJwYWdpbmF0aW9uLnRvdGFsUGFnZXMgPiAxXFxcIiA6dG90YWw9cGFnaW5hdGlvbi50b3RhbFBhZ2VzIDpjdXJyZW50PXBhZ2luYXRpb24uY3VycmVudFBhZ2UgOnNlZ21lbnRzPXBhZ2luYXRpb24uc2VnbWVudHMgQHNlbGVjdGVkPXBhZ2luYXRpb25QYWdlU2VsZWN0ZWQ+IDwvcGFnaW5hdGlvbj4gPC9kaXY+IDxicmVhZGNydW1icyB2LWlmPVxcXCIhcmVzdHJpY3ROYXZpZ2F0aW9uICYmICFpc1NlYXJjaGluZ1xcXCIgOnBhdGg9cGF0aCBAbmF2aWdhdGVkPWZvbGRlclNlbGVjdGVkPiA8L2JyZWFkY3J1bWJzPiA8YXNzZXQtZWRpdG9yIHYtaWY9c2hvd0Fzc2V0RWRpdG9yIDppZD1lZGl0ZWRBc3NldElkIDpoYXMtY2hpbGQuc3luYz1lZGl0b3JIYXNDaGlsZCBAY2xvc2VkPWNsb3NlQXNzZXRFZGl0b3IgQHNhdmVkPWFzc2V0U2F2ZWQgQGRlbGV0ZWQ9YXNzZXREZWxldGVkIEBtb3ZlZD1hc3NldE1vdmVkPiA8L2Fzc2V0LWVkaXRvcj4gPGZvbGRlci1lZGl0b3Igdi1pZj1zaG93Rm9sZGVyQ3JlYXRvciA6Y3JlYXRlPXRydWUgOmNvbnRhaW5lcj1jb250YWluZXIuaWQgOnBhdGg9cGF0aCBAY2xvc2VkPWZvbGRlckNyZWF0b3JDbG9zZWQgQGNyZWF0ZWQ9Zm9sZGVyQ3JlYXRlZD4gPC9mb2xkZXItZWRpdG9yPiA8Zm9sZGVyLWVkaXRvciB2LWlmPXNob3dGb2xkZXJFZGl0b3IgOmNyZWF0ZT1mYWxzZSA6Y29udGFpbmVyPWNvbnRhaW5lci5pZCA6cGF0aD1lZGl0ZWRGb2xkZXJQYXRoIEBjbG9zZWQ9Zm9sZGVyRWRpdG9yQ2xvc2VkIEB1cGRhdGVkPWxvYWRBc3NldHM+IDwvZm9sZGVyLWVkaXRvcj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Ccm93c2VyL0Jyb3dzZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAzMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vRWRpdEZvcm0udnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9FZGl0Rm9ybS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvRWRpdEZvcm0udnVlXG4vLyBtb2R1bGUgaWQgPSAzMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiIHYtaWY9XCJoYXNFcnJvcnNcIj5cbiAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpIHYtZm9yPVwiZXJyb3IgaW4gZXJyb3JzXCI+e3sgZXJyb3IgfX08L2xpPlxuICAgICAgICA8L3VsPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXh5IG1iLTNcIj5cbiAgICAgICAgPGgxIGNsYXNzPVwiZmlsbFwiIHYtaWY9XCJpc05ld1wiPnt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRpbmdfYXNzZXRfY29udGFpbmVyJykgfX08L2gxPlxuICAgICAgICA8aDEgY2xhc3M9XCJmaWxsXCIgdi1lbHNlPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdGluZ19hc3NldF9jb250YWluZXInKSB9fTwvaDE+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgQGNsaWNrPVwic2F2ZVwiPnt7IHRyYW5zbGF0ZSgnY3Auc2F2ZScpIH19PC9idXR0b24+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHVibGlzaC1maWVsZHMgY2FyZFwiPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AudGl0bGUnKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5hc3NldF9uYW1lX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImNvbmZpZy50aXRsZVwiIGF1dG9mb2N1cz1cImF1dG9mb2N1c1wiIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCIgdi1pZj1cImlzTmV3XCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuaGFuZGxlJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmFzc2V0X2hhbmRsZV9pbnN0cnVjdGlvbnMnKSB9fTwvZGl2PlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiY29uZmlnLmhhbmRsZVwiIEBrZXlkb3duPVwiaXNIYW5kbGVNb2RpZmllZCA9IHRydWVcIiAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkc2V0JykgfX08L2xhYmVsPlxuICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfZmllbGRzZXRfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgPGZpZWxkc2V0LWZpZWxkdHlwZSA6ZGF0YS5zeW5jPVwiY29uZmlnLmZpZWxkc2V0XCI+PC9maWVsZHNldC1maWVsZHR5cGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuZHJpdmVyJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfZHJpdmVyX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgIDxzZWxlY3QtZmllbGR0eXBlIDpkYXRhLnN5bmM9XCJjb25maWcuZHJpdmVyXCIgOm9wdGlvbnM9XCJkcml2ZXJzXCI+PC9zZWxlY3QtZmllbGR0eXBlPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZHJpdmVyLWxvY2FsXG4gICAgICAgICAgICB2LWlmPVwiZHJpdmVyID09PSAnbG9jYWwnXCJcbiAgICAgICAgICAgIDplZGl0aW5nPVwidHJ1ZVwiXG4gICAgICAgICAgICA6cGF0aC5zeW5jPVwiY29uZmlnLmxvY2FsLnBhdGhcIlxuICAgICAgICAgICAgOnVybC5zeW5jPVwiY29uZmlnLmxvY2FsLnVybFwiPlxuICAgICAgICA8L2RyaXZlci1sb2NhbD5cblxuICAgICAgICA8ZHJpdmVyLXMzXG4gICAgICAgICAgICB2LWlmPVwiZHJpdmVyID09PSAnczMnXCJcbiAgICAgICAgICAgIDplZGl0aW5nPVwidHJ1ZVwiXG4gICAgICAgICAgICA6a2V5LnN5bmM9XCJjb25maWcuczMua2V5XCJcbiAgICAgICAgICAgIDpzZWNyZXQuc3luYz1cImNvbmZpZy5zMy5zZWNyZXRcIlxuICAgICAgICAgICAgOmJ1Y2tldC5zeW5jPVwiY29uZmlnLnMzLmJ1Y2tldFwiXG4gICAgICAgICAgICA6cmVnaW9uLnN5bmM9XCJjb25maWcuczMucmVnaW9uXCJcbiAgICAgICAgICAgIDpwYXRoLnN5bmM9XCJjb25maWcuczMucGF0aFwiPlxuICAgICAgICA8L2RyaXZlci1zMz5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICAnZHJpdmVyLWxvY2FsJzogcmVxdWlyZSgnLi9XaXphcmQvRHJpdmVyTG9jYWwudnVlJyksXG4gICAgICAgICdkcml2ZXItczMnOiByZXF1aXJlKCcuL1dpemFyZC9Ecml2ZXJTMy52dWUnKVxuICAgIH0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBpc05ldzogQm9vbGVhbixcbiAgICAgICAgY29udGFpbmVyOiBPYmplY3RcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRyaXZlcjogJ2xvY2FsJyxcbiAgICAgICAgICAgICAgICBmaWVsZHNldDogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2NhbDoge30sXG4gICAgICAgICAgICAgICAgczM6IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHJpdmVyczogW1xuICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdsb2NhbCcsIHRleHQ6ICdMb2NhbCcgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiAnczMnLCB0ZXh0OiAnQW1hem9uIFMzJyB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaXNIYW5kbGVNb2RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcnM6IFtdXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGRyaXZlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRyaXZlcjtcbiAgICAgICAgfSxcbiAgICAgICAgaGFzRXJyb3JzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfLnNpemUodGhpcy5lcnJvcnMpICE9PSAwO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghIHRoaXMuaXNOZXcpIHtcbiAgICAgICAgICAgIHZhciBkcml2ZXIgPSB0aGlzLmNvbnRhaW5lci5kcml2ZXIgfHwgJ2xvY2FsJztcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmRyaXZlciA9IGRyaXZlcjtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnRpdGxlID0gdGhpcy5jb250YWluZXIudGl0bGU7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5oYW5kbGUgPSB0aGlzLmNvbnRhaW5lci5oYW5kbGU7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5maWVsZHNldCA9IHRoaXMuY29udGFpbmVyLmZpZWxkc2V0O1xuICAgICAgICAgICAgdGhpcy5jb25maWdbZHJpdmVyXSA9IHRoaXMuY29udGFpbmVyO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGb3IgbmV3IGNvbnRhaW5lcnMsIHNldCB0aGUgcmVnaW9uIGRyb3Bkb3duIHRvIHRoZSBmaXJzdCBvcHRpb25cbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnMzLnJlZ2lvbiA9IF8uZmlyc3QodGhpcy5zM1JlZ2lvbnMpLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNOZXcpIHtcbiAgICAgICAgICAgIHRoaXMuc3luY1RpdGxlQW5kSGFuZGxlRmllbGRzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHNhdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSAodGhpcy5pc05ldykgPyBjcF91cmwoJ2NvbmZpZ3VyZS9jb250ZW50L2Fzc2V0cycpIDogY3BfdXJsKCdjb25maWd1cmUvY29udGVudC9hc3NldHMvJyt0aGlzLmNvbnRhaW5lci5pZCk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIHRoaXMuY29uZmlnKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHJlc3BvbnNlLnJlZGlyZWN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN5bmNUaXRsZUFuZEhhbmRsZUZpZWxkczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiR3YXRjaCgnY29uZmlnLnRpdGxlJywgZnVuY3Rpb24odGl0bGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0hhbmRsZU1vZGlmaWVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5oYW5kbGUgPSB0aGlzLiRzbHVnaWZ5KHRpdGxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEVkaXRGb3JtLnZ1ZT8yYzM0ODc4YSIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5wYXRoJykgfX08L2xhYmVsPlxuICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5hc3NldF9wYXRoX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LXdpdGgtbG9hZGVyXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJwYXRoXCIgQGtleXVwPVwicmVzb2x2ZVBhdGggfCBkZWJvdW5jZSA1MDBcIiAvPlxuICAgICAgICAgICAgPHNwYW4gdi1zaG93PVwicmVzb2x2aW5nUGF0aFwiIGNsYXNzPVwiaWNvbi1yZXNvbHZpbmcgaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiIHYtaWY9XCJzaG93UmVzb2x2ZWRQYXRoXCI+XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLnBhdGhfcmVzb2x2ZXNfdG8nLCB7IHBhdGg6IHJlc29sdmVkUGF0aCB9KSB9fVxuICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cInJlc29sdmVkUGF0aEV4aXN0c1wiIGNsYXNzPVwidGV4dC1zdWNjZXNzXCI+e3sgdHJhbnNsYXRlKCdjcC5wYXRoX2V4aXN0cycpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZSBjbGFzcz1cInRleHQtZGFuZ2VyXCI+e3sgdHJhbnNsYXRlKCdjcC5wYXRoX2RvZXNfbm90X2V4aXN0JykgfX08L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvc21hbGw+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiIHYtaWY9XCJyZXNvbHZlZFBhdGhFeGlzdHNcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLnVybCcpIH19PC9sYWJlbD5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfdXJsX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LXdpdGgtbG9hZGVyXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJ1cmxcIiBAa2V5dXA9XCJyZXNvbHZlVXJsIHwgZGVib3VuY2UgNTAwXCIgLz5cbiAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cInJlc29sdmluZ1VybFwiIGNsYXNzPVwiaWNvbi1yZXNvbHZpbmcgaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiIHYtaWY9XCJzaG93UmVzb2x2ZWRVcmxcIj5cbiAgICAgICAgICAgIHt7IHRyYW5zbGF0ZSgnY3AudXJsX3Jlc29sdmVzX3RvJywgeyBwYXRoOiByZXNvbHZlZFVybCB9KSB9fVxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXN1Y2Nlc3NcIiB2LXNob3c9XCJ2YWxpZFVybFwiPnt7IHRyYW5zbGF0ZSgnY3AudmFsaWRfdXJsJykgfX0uPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWRhbmdlclwiIHYtZWxzZT57eyB0cmFuc2xhdGUoJ2NwLmludmFsaWRfdXJsJykgfX08L3NwYW4+XG4gICAgICAgIDwvc21hbGw+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiIHYtaWY9XCIhZWRpdGluZ1wiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgQGNsaWNrPVwic3VibWl0XCIgOmRpc2FibGVkPVwiIWNhbkNvbnRpbnVlXCI+e3sgdHJhbnNsYXRlKCdjcC5uZXh0X3N0ZXAnKSB9fTwvYnV0dG9uPlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiAgICAuaW5wdXQtd2l0aC1sb2FkZXIge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAgICAgLmljb24tcmVzb2x2aW5nIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDVweDtcbiAgICAgICAgfVxuICAgIH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBwYXRoOiBTdHJpbmcsXG4gICAgICAgICAgICB1cmw6IFN0cmluZyxcbiAgICAgICAgICAgIGVkaXRpbmc6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZFBhdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVzb2x2aW5nUGF0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRQYXRoRXhpc3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNvbHZlZFVybDogbnVsbCxcbiAgICAgICAgICAgICAgICByZXNvbHZpbmdVcmw6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICBjb21wdXRlZDoge1xuXG4gICAgICAgICAgICBzaG93UmVzb2x2ZWRQYXRoKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVkUGF0aCB8fCB0aGlzLnJlc29sdmluZ1BhdGg7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzaG93UmVzb2x2ZWRVcmwoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZWRVcmwgfHwgdGhpcy5yZXNvbHZpbmdVcmw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB2YWxpZFVybCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93UmVzb2x2ZWRVcmwuc3Vic3RyKDAsIDQpID09PSAnaHR0cCc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjYW5Db250aW51ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlZFBhdGhFeGlzdHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuXG4gICAgICAgIHJlYWR5KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZWRpdGluZykge1xuICAgICAgICAgICAgICAgIC8vIEZvciB3aGF0ZXZlciByZWFzb24sIGl0IGRvZXNuJ3Qgd29yayB1bmxlc3MgdGhlcmUncyBhIHRpbWVvdXQuIMKvXFxfKOODhClfL8KvXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlc29sdmVQYXRoKCksIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG5cbiAgICAgICAgd2F0Y2g6IHtcblxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoRXhpc3RzKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIGlmIChleGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlVXJsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG5cblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHJlc29sdmVQYXRoKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2aW5nUGF0aCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdhc3NldHMvY29udGFpbmVycy9yZXNvbHZlLXBhdGgnKSwge1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiB0aGlzLnBhdGhcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZpbmdQYXRoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZWRQYXRoID0gcmVzcG9uc2UucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvbHZlZFBhdGhFeGlzdHMgPSByZXNwb25zZS5leGlzdHM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZXNvbHZlVXJsKCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2aW5nVXJsID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ2Fzc2V0cy9jb250YWluZXJzL3Jlc29sdmUtdXJsJyksIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB0aGlzLnVybFxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmluZ1VybCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVkVXJsID0gcmVzcG9uc2UudXJsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3VibWl0KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3N1Ym1pdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIERyaXZlckxvY2FsLnZ1ZT85MDQ2OTJhZSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5wYXRoJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmFzc2V0X3BhdGhfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8ZGl2IGNsYXNzPWlucHV0LXdpdGgtbG9hZGVyPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPXBhdGggQGtleXVwPVxcXCJyZXNvbHZlUGF0aCB8IGRlYm91bmNlIDUwMFxcXCIvPiA8c3BhbiB2LXNob3c9cmVzb2x2aW5nUGF0aCBjbGFzcz1cXFwiaWNvbi1yZXNvbHZpbmcgaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IDwvZGl2PiA8c21hbGwgY2xhc3M9aGVscC1ibG9jayB2LWlmPXNob3dSZXNvbHZlZFBhdGg+IDxzcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLnBhdGhfcmVzb2x2ZXNfdG8nLCB7IHBhdGg6IHJlc29sdmVkUGF0aCB9KSB9fSA8c3BhbiB2LXNob3c9cmVzb2x2ZWRQYXRoRXhpc3RzIGNsYXNzPXRleHQtc3VjY2Vzcz57eyB0cmFuc2xhdGUoJ2NwLnBhdGhfZXhpc3RzJykgfX08L3NwYW4+IDxzcGFuIHYtZWxzZSBjbGFzcz10ZXh0LWRhbmdlcj57eyB0cmFuc2xhdGUoJ2NwLnBhdGhfZG9lc19ub3RfZXhpc3QnKSB9fTwvc3Bhbj4gPC9zcGFuPiA8L3NtYWxsPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwIHYtaWY9cmVzb2x2ZWRQYXRoRXhpc3RzPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC51cmwnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfdXJsX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPGRpdiBjbGFzcz1pbnB1dC13aXRoLWxvYWRlcj4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD11cmwgQGtleXVwPVxcXCJyZXNvbHZlVXJsIHwgZGVib3VuY2UgNTAwXFxcIi8+IDxzcGFuIHYtc2hvdz1yZXNvbHZpbmdVcmwgY2xhc3M9XFxcImljb24tcmVzb2x2aW5nIGljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiA8L2Rpdj4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2sgdi1pZj1zaG93UmVzb2x2ZWRVcmw+IHt7IHRyYW5zbGF0ZSgnY3AudXJsX3Jlc29sdmVzX3RvJywgeyBwYXRoOiByZXNvbHZlZFVybCB9KSB9fSA8c3BhbiBjbGFzcz10ZXh0LXN1Y2Nlc3Mgdi1zaG93PXZhbGlkVXJsPnt7IHRyYW5zbGF0ZSgnY3AudmFsaWRfdXJsJykgfX0uPC9zcGFuPiA8c3BhbiBjbGFzcz10ZXh0LWRhbmdlciB2LWVsc2U+e3sgdHJhbnNsYXRlKCdjcC5pbnZhbGlkX3VybCcpIH19PC9zcGFuPiA8L3NtYWxsPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwIHYtaWY9IWVkaXRpbmc+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgQGNsaWNrPXN1Ym1pdCA6ZGlzYWJsZWQ9IWNhbkNvbnRpbnVlPnt7IHRyYW5zbGF0ZSgnY3AubmV4dF9zdGVwJykgfX08L2J1dHRvbj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9XaXphcmQvRHJpdmVyTG9jYWwudnVlXG4vLyBtb2R1bGUgaWQgPSAzMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmFjY2Vzc19rZXlfaWQnKSB9fTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImtleVwiIC8+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3Auc2VjcmV0X2FjY2Vzc19rZXknKSB9fTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNlY3JldFwiIC8+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuYnVja2V0JykgfX08L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJidWNrZXRcIiAvPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLnJlZ2lvbicpIH19PC9sYWJlbD5cbiAgICAgICAgPHNlbGVjdC1maWVsZHR5cGUgOmRhdGEuc3luYz1cInJlZ2lvblwiIDpvcHRpb25zPVwiczNSZWdpb25zXCI+PC9zZWxlY3QtZmllbGR0eXBlPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLnBhdGgnKSB9fTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInBhdGhcIiAvPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwidmFsaWRhdGVDcmVkZW50aWFsc1wiXG4gICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiIWhhc0NyZWRlbnRpYWxzIHx8IHZhbGlkYXRpbmdcIj5cbiAgICAgICAgICAgIFZhbGlkYXRlIENyZWRlbnRpYWxzXG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIlxuICAgICAgICAgICAgICAgIHYtaWY9XCJ2YWxpZGF0aW9uU3VjY2VzcyAmJiAhZWRpdGluZ1wiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwic3VibWl0XCI+XG4gICAgICAgICAgICBOZXh0IFN0ZXBcbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiIHYtaWY9XCJ2YWxpZGF0aW5nIHx8IHZhbGlkYXRpb25FcnJvciB8fCB2YWxpZGF0aW9uU3VjY2Vzc1wiPlxuICAgICAgICA8ZGw+XG5cbiAgICAgICAgICAgIDxkZCB2LWlmPVwidmFsaWRhdGluZ1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIFZhbGlkYXRpbmcuLi5cbiAgICAgICAgICAgIDwvZGQ+XG5cbiAgICAgICAgICAgIDxkZCBjbGFzcz1cInRleHQtZGFuZ2VyXCIgdi1pZj1cInZhbGlkYXRpb25FcnJvciAmJiAhdmFsaWRhdGluZ1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNyb3NzXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIEludmFsaWQgQ3JlZGVudGlhbHMgPGJyPlxuICAgICAgICAgICAgICAgIDxzbWFsbD57eyB2YWxpZGF0aW9uRXJyb3IgfX08L3NtYWxsPlxuICAgICAgICAgICAgPC9kZD5cblxuICAgICAgICAgICAgPGRkIHYtaWY9XCJ2YWxpZGF0aW9uU3VjY2VzcyAmJiAhdmFsaWRhdGluZ1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zdWNjZXNzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNoZWNrXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICBWYWxpZCBjcmVkZW50aWFscy5cbiAgICAgICAgICAgICAgICA8L3NwYW4+PGJyPlxuICAgICAgICAgICAgICAgIDxzbWFsbD5GaWxlcyBkZXRlY3RlZDoge3sgZmlsZXNEZXRlY3RlZCB9fTwvc21hbGw+XG4gICAgICAgICAgICA8L2RkPlxuXG4gICAgICAgIDwvZGw+XG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBrZXk6IFN0cmluZyxcbiAgICAgICAgICAgIHNlY3JldDogU3RyaW5nLFxuICAgICAgICAgICAgYnVja2V0OiBTdHJpbmcsXG4gICAgICAgICAgICByZWdpb246IFN0cmluZyxcbiAgICAgICAgICAgIHBhdGg6IFN0cmluZyxcbiAgICAgICAgICAgIGVkaXRpbmc6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvblN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZpbGVzRGV0ZWN0ZWQ6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG4gICAgICAgICAgICBzM1JlZ2lvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAndXMtZWFzdC0xJywgdGV4dDogJ1VTIEVhc3QgKE4uIFZpcmdpbmlhKSAvIFVTIFN0YW5kYXJkIC8gdXMtZWFzdC0xJyB9LFxuICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAndXMtZWFzdC0yJywgdGV4dDogJ1VTIEVhc3QgKE9oaW8pIC8gdXMtZWFzdC0yJyB9LFxuICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAndXMtd2VzdC0xJywgdGV4dDogJ1VTIFdlc3QgKE4uIENhbGlmb3JuaWEpIC8gdXMtd2VzdC0xJyB9LFxuICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAndXMtd2VzdC0yJywgdGV4dDogJ1VTIFdlc3QgKE9yZWdvbikgLyB1cy13ZXN0LTInIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdjYS1jZW50cmFsLTEnLCB0ZXh0OiAnQ2FuYWRhIChDZW50cmFsKSAvIGNhLWNlbnRyYWwtMScgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogJ2FwLXNvdXRoLTEnLCB0ZXh0OiAnQXNpYSBQYWNpZmljIChNdW1iYWkpIC8gYXAtc291dGgtMScgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogJ2FwLW5vcnRoZWFzdC0yJywgdGV4dDogJ0FzaWEgUGFjaWZpYyAoU2VvdWwpIC8gYXAtbm9ydGhlYXN0LTInIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdhcC1zb3V0aGVhc3QtMScsIHRleHQ6ICdBc2lhIFBhY2lmaWMgKFNpbmdhcG9yZSkgLyBhcC1zb3V0aGVhc3QtMScgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogJ2FwLXNvdXRoZWFzdC0yJywgdGV4dDogJ0FzaWEgUGFjaWZpYyAoU3lkbmV5KSAvIGFwLXNvdXRoZWFzdC0yJyB9LFxuICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAnYXAtbm9ydGhlYXN0LTEnLCB0ZXh0OiAnQXNpYSBQYWNpZmljIChUb2t5bykgLyBhcC1ub3J0aGVhc3QtMScgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogJ2V1LWNlbnRyYWwtMScsIHRleHQ6ICdFVSAoRnJhbmtmdXJ0KSAvIGV1LWNlbnRyYWwtMScgfSxcbiAgICAgICAgICAgICAgICAgICAgeyB2YWx1ZTogJ2V1LXdlc3QtMScsIHRleHQ6ICdFVSAoSXJlbGFuZCkgLyBldS13ZXN0LTEnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdldS13ZXN0LTInLCB0ZXh0OiAnRVUgKExvbmRvbikgLyBldS13ZXN0LTInIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdzYS1lYXN0LTEnLCB0ZXh0OiAnU291dGggQW1lcmljYSAoU2FvIFBhdWxvKSAvIHNhLWVhc3QtMSknIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYXNDcmVkZW50aWFscygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5rZXkgJiYgdGhpcy5zZWNyZXQgJiYgdGhpcy5yZWdpb24gJiYgdGhpcy5idWNrZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICByZWFkeSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdHMoKTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgc2V0RGVmYXVsdHMoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmtleSB8fCAnJztcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3JldCA9IHRoaXMuc2VjcmV0IHx8ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVja2V0ID0gdGhpcy5idWNrZXQgfHwgJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoID0gdGhpcy5wYXRoIHx8ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaW9uID0gdGhpcy5yZWdpb24gfHwgJ3VzLWVhc3QtMSc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB2YWxpZGF0ZUNyZWRlbnRpYWxzKCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnYXNzZXRzL2NvbnRhaW5lcnMvdmFsaWRhdGUtczMnKSwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMua2V5LFxuICAgICAgICAgICAgICAgICAgICBzZWNyZXQ6IHRoaXMuc2VjcmV0LFxuICAgICAgICAgICAgICAgICAgICBidWNrZXQ6IHRoaXMuYnVja2V0LFxuICAgICAgICAgICAgICAgICAgICByZWdpb246IHRoaXMucmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZXNEZXRlY3RlZCA9IHJlc3BvbnNlLmZpbGVzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRpb25TdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc3VibWl0KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3N1Ym1pdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIERyaXZlclMzLnZ1ZT8xYWQxZDUxZSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5hY2Nlc3Nfa2V5X2lkJykgfX08L2xhYmVsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWtleSAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5zZWNyZXRfYWNjZXNzX2tleScpIH19PC9sYWJlbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1zZWNyZXQgLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYnVja2V0JykgfX08L2xhYmVsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWJ1Y2tldCAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5yZWdpb24nKSB9fTwvbGFiZWw+IDxzZWxlY3QtZmllbGR0eXBlIDpkYXRhLnN5bmM9cmVnaW9uIDpvcHRpb25zPXMzUmVnaW9ucz48L3NlbGVjdC1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLnBhdGgnKSB9fTwvbGFiZWw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9cGF0aCAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIEBjbGljaz12YWxpZGF0ZUNyZWRlbnRpYWxzIDpkaXNhYmxlZD1cXFwiIWhhc0NyZWRlbnRpYWxzIHx8IHZhbGlkYXRpbmdcXFwiPiBWYWxpZGF0ZSBDcmVkZW50aWFscyA8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiB2LWlmPVxcXCJ2YWxpZGF0aW9uU3VjY2VzcyAmJiAhZWRpdGluZ1xcXCIgQGNsaWNrPXN1Ym1pdD4gTmV4dCBTdGVwIDwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwIHYtaWY9XFxcInZhbGlkYXRpbmcgfHwgdmFsaWRhdGlvbkVycm9yIHx8IHZhbGlkYXRpb25TdWNjZXNzXFxcIj4gPGRsPiA8ZGQgdi1pZj12YWxpZGF0aW5nPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IFZhbGlkYXRpbmcuLi4gPC9kZD4gPGRkIGNsYXNzPXRleHQtZGFuZ2VyIHYtaWY9XFxcInZhbGlkYXRpb25FcnJvciAmJiAhdmFsaWRhdGluZ1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY3Jvc3NcXFwiPjwvc3Bhbj4gSW52YWxpZCBDcmVkZW50aWFscyA8YnI+IDxzbWFsbD57eyB2YWxpZGF0aW9uRXJyb3IgfX08L3NtYWxsPiA8L2RkPiA8ZGQgdi1pZj1cXFwidmFsaWRhdGlvblN1Y2Nlc3MgJiYgIXZhbGlkYXRpbmdcXFwiPiA8c3BhbiBjbGFzcz10ZXh0LXN1Y2Nlc3M+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2hlY2tcXFwiPjwvc3Bhbj4gVmFsaWQgY3JlZGVudGlhbHMuIDwvc3Bhbj48YnI+IDxzbWFsbD5GaWxlcyBkZXRlY3RlZDoge3sgZmlsZXNEZXRlY3RlZCB9fTwvc21hbGw+IDwvZGQ+IDwvZGw+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0RyaXZlclMzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiB2LWlmPWhhc0Vycm9ycz4gPHVsPiA8bGkgdi1mb3I9XFxcImVycm9yIGluIGVycm9yc1xcXCI+e3sgZXJyb3IgfX08L2xpPiA8L3VsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZmxleHkgbWItM1xcXCI+IDxoMSBjbGFzcz1maWxsIHYtaWY9aXNOZXc+e3sgdHJhbnNsYXRlKCdjcC5jcmVhdGluZ19hc3NldF9jb250YWluZXInKSB9fTwvaDE+IDxoMSBjbGFzcz1maWxsIHYtZWxzZT57eyB0cmFuc2xhdGUoJ2NwLmVkaXRpbmdfYXNzZXRfY29udGFpbmVyJykgfX08L2gxPiA8YnV0dG9uIHR5cGU9c3VibWl0IGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljaz1zYXZlPnt7IHRyYW5zbGF0ZSgnY3Auc2F2ZScpIH19PC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJwdWJsaXNoLWZpZWxkcyBjYXJkXFxcIj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC50aXRsZScpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5hc3NldF9uYW1lX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1jb25maWcudGl0bGUgYXV0b2ZvY3VzPWF1dG9mb2N1cyAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwIHYtaWY9aXNOZXc+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmhhbmRsZScpIH19PC9sYWJlbD4gPGRpdiBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfaGFuZGxlX2luc3RydWN0aW9ucycpIH19PC9kaXY+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9Y29uZmlnLmhhbmRsZSBAa2V5ZG93bj1cXFwiaXNIYW5kbGVNb2RpZmllZCA9IHRydWVcXFwiLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRzZXQnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfZmllbGRzZXRfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8ZmllbGRzZXQtZmllbGR0eXBlIDpkYXRhLnN5bmM9Y29uZmlnLmZpZWxkc2V0PjwvZmllbGRzZXQtZmllbGR0eXBlPiA8L2Rpdj4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5kcml2ZXInKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfZHJpdmVyX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPHNlbGVjdC1maWVsZHR5cGUgOmRhdGEuc3luYz1jb25maWcuZHJpdmVyIDpvcHRpb25zPWRyaXZlcnM+PC9zZWxlY3QtZmllbGR0eXBlPiA8L2Rpdj4gPGRyaXZlci1sb2NhbCB2LWlmPVxcXCJkcml2ZXIgPT09ICdsb2NhbCdcXFwiIDplZGl0aW5nPXRydWUgOnBhdGguc3luYz1jb25maWcubG9jYWwucGF0aCA6dXJsLnN5bmM9Y29uZmlnLmxvY2FsLnVybD4gPC9kcml2ZXItbG9jYWw+IDxkcml2ZXItczMgdi1pZj1cXFwiZHJpdmVyID09PSAnczMnXFxcIiA6ZWRpdGluZz10cnVlIDprZXkuc3luYz1jb25maWcuczMua2V5IDpzZWNyZXQuc3luYz1jb25maWcuczMuc2VjcmV0IDpidWNrZXQuc3luYz1jb25maWcuczMuYnVja2V0IDpyZWdpb24uc3luYz1jb25maWcuczMucmVnaW9uIDpwYXRoLnN5bmM9Y29uZmlnLnMzLnBhdGg+IDwvZHJpdmVyLXMzPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL0VkaXRGb3JtLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgnYXNzZXRzL2NvbnRhaW5lcnMvZ2V0JylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZWFyY2g6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNvcnQ6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgc29ydE9yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICBwYXJ0aWFsczoge1xuICAgICAgICAgICAgICAgICAgICBjZWxsOiBgXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWZvbGRlci1pbWFnZXNcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5hc3NldHMgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJpdGVtLmJyb3dzZV91cmxcIj57eyBpdGVtLnRpdGxlIH19PC9hPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvYXNzZXQtY29udGFpbmVycy5qcyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1dpemFyZC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1dpemFyZC52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL1dpemFyZC52dWVcbi8vIG1vZHVsZSBpZCA9IDMxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2PlxuXG4gICAgICAgIDxoMSBjbGFzcz1cIm1iLTNcIj57eyB0cmFuc2xhdGUoJ2NwLmNyZWF0aW5nX2Fzc2V0X2NvbnRhaW5lcicpIH19PC9oMT5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicHVibGlzaC1mb3JtIGZsdXNoIGNhcmRcIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJyZWFkY3J1bWJzIHdpemFyZFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RlcFwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RlcCA9PT0gJ21ldGEnfVwiPlxuICAgICAgICAgICAgICAgICAgICBNZXRhXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RlcFwiIDpjbGFzcz1cInsnYWN0aXZlJzogc3RlcCA9PT0gJ2RyaXZlcid9XCI+XG4gICAgICAgICAgICAgICAgICAgIERyaXZlclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0ZXBcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IHN0ZXAgPT09ICdmaWVsZHNldCd9XCI+XG4gICAgICAgICAgICAgICAgICAgIEZpZWxkc2V0XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWRcIj5cbiAgICAgICAgICAgICAgICA8bWV0YS1maWVsZHNcbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cInN0ZXAgPT09ICdtZXRhJ1wiXG4gICAgICAgICAgICAgICAgICAgIDp0aXRsZS5zeW5jPVwidGl0bGVcIlxuICAgICAgICAgICAgICAgICAgICA6aGFuZGxlLnN5bmM9XCJoYW5kbGVcIlxuICAgICAgICAgICAgICAgICAgICBAc3VibWl0PVwibWV0YVN1Ym1pdFwiPlxuICAgICAgICAgICAgICAgIDwvbWV0YS1maWVsZHM+XG5cbiAgICAgICAgICAgICAgICA8ZHJpdmVyLWZpZWxkc1xuICAgICAgICAgICAgICAgICAgICB2LWlmPVwic3RlcCA9PT0gJ2RyaXZlcidcIlxuICAgICAgICAgICAgICAgICAgICA6ZHJpdmVyLnN5bmM9XCJkcml2ZXJcIlxuICAgICAgICAgICAgICAgICAgICA6Y29uZmlnLnN5bmM9XCJkcml2ZXJDb25maWdcIlxuICAgICAgICAgICAgICAgICAgICBAc3VibWl0PVwiZHJpdmVyU3VibWl0XCI+XG4gICAgICAgICAgICAgICAgPC9kcml2ZXItZmllbGRzPlxuXG4gICAgICAgICAgICAgICAgPGZpZWxkc2V0LWZpZWxkc1xuICAgICAgICAgICAgICAgICAgICB2LWlmPVwic3RlcCA9PT0gJ2ZpZWxkc2V0J1wiXG4gICAgICAgICAgICAgICAgICAgIDpmaWVsZHNldC5zeW5jPVwiZmllbGRzZXRcIlxuICAgICAgICAgICAgICAgICAgICBAc3VibWl0PVwiZmllbGRzZXRTdWJtaXRcIj5cbiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0LWZpZWxkcz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ21ldGEtZmllbGRzJzogcmVxdWlyZSgnLi9NZXRhRmllbGRzLnZ1ZScpLFxuICAgICAgICAnZHJpdmVyLWZpZWxkcyc6IHJlcXVpcmUoJy4vRHJpdmVyRmllbGRzLnZ1ZScpLFxuICAgICAgICAnZmllbGRzZXQtZmllbGRzJzogcmVxdWlyZSgnLi9GaWVsZHNldEZpZWxkcy52dWUnKSxcbiAgICB9LFxuXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RlcDogJ21ldGEnLFxuICAgICAgICAgICAgdGl0bGU6IG51bGwsXG4gICAgICAgICAgICBoYW5kbGU6IG51bGwsXG4gICAgICAgICAgICBmaWVsZHNldDogbnVsbCxcbiAgICAgICAgICAgIGRyaXZlcjogbnVsbCxcbiAgICAgICAgICAgIGRyaXZlckNvbmZpZzoge31cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBtZXRhU3VibWl0KCkge1xuICAgICAgICAgICAgdGhpcy5zdGVwID0gJ2RyaXZlcic7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZHJpdmVyU3VibWl0KCkge1xuICAgICAgICAgICAgdGhpcy5zdGVwID0gJ2ZpZWxkc2V0JztcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZHNldFN1Ym1pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGNwX3VybCgnY29uZmlndXJlL2NvbnRlbnQvYXNzZXRzJyk7XG5cbiAgICAgICAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgICAgICAgICAgIGhhbmRsZTogdGhpcy5oYW5kbGUsXG4gICAgICAgICAgICAgICAgZmllbGRzZXQ6IHRoaXMuZmllbGRzZXQsXG4gICAgICAgICAgICAgICAgZHJpdmVyOiB0aGlzLmRyaXZlcixcbiAgICAgICAgICAgICAgICBsb2NhbDogdGhpcy5kcml2ZXJDb25maWcubG9jYWwsXG4gICAgICAgICAgICAgICAgczM6IHRoaXMuZHJpdmVyQ29uZmlnLnMzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QodXJsLCBwYXlsb2FkKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHJlc3BvbnNlLnJlZGlyZWN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFdpemFyZC52dWU/ZDk4Zjk1ZGUiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9NZXRhRmllbGRzLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTWV0YUZpZWxkcy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL01ldGFGaWVsZHMudnVlXG4vLyBtb2R1bGUgaWQgPSAzMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cInB1Ymxpc2gtZmllbGRzXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC50aXRsZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmFzc2V0X25hbWVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwidGl0bGVcIiBhdXRvZm9jdXM9XCJhdXRvZm9jdXNcIiAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmhhbmRsZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3t7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfaGFuZGxlX2luc3RydWN0aW9ucycpIH19fTwvZGl2PlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiaGFuZGxlXCIgQGtleWRvd249XCJpc0hhbmRsZU1vZGlmaWVkID0gdHJ1ZVwiIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgQGNsaWNrPVwic3VibWl0XCIgOmRpc2FibGVkPVwiIWNhbkNvbnRpbnVlXCI+TmV4dCBTdGVwPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWyd0aXRsZScsICdoYW5kbGUnXSxcblxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzSGFuZGxlTW9kaWZpZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGNhbkNvbnRpbnVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGl0bGUgJiYgdGhpcy5oYW5kbGU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgdGl0bGUodGl0bGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSGFuZGxlTW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlID0gdGhpcy4kc2x1Z2lmeSh0aXRsZSwgJ18nKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHN1Ym1pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3N1Ym1pdCcpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIE1ldGFGaWVsZHMudnVlPzMwZjRhYjRkIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXB1Ymxpc2gtZmllbGRzPiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLnRpdGxlJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmFzc2V0X25hbWVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPXRpdGxlIGF1dG9mb2N1cz1hdXRvZm9jdXMgLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuaGFuZGxlJykgfX08L2xhYmVsPiA8ZGl2IGNsYXNzPWhlbHAtYmxvY2s+e3t7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfaGFuZGxlX2luc3RydWN0aW9ucycpIH19fTwvZGl2PiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWhhbmRsZSBAa2V5ZG93bj1cXFwiaXNIYW5kbGVNb2RpZmllZCA9IHRydWVcXFwiLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBAY2xpY2s9c3VibWl0IDpkaXNhYmxlZD0hY2FuQ29udGludWU+TmV4dCBTdGVwPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9hc3NldHMvQ29udGFpbmVyL1dpemFyZC9NZXRhRmllbGRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0RyaXZlckZpZWxkcy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0RyaXZlckZpZWxkcy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0RyaXZlckZpZWxkcy52dWVcbi8vIG1vZHVsZSBpZCA9IDMxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHVibGlzaC1maWVsZHNcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmRyaXZlcicpIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmFzc2V0X2RyaXZlcl9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+XG5cbiAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtdW5zdHlsZWRcIj5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiB2LW1vZGVsPVwiZHJpdmVyXCIgdmFsdWU9XCJsb2NhbFwiIGlkPVwiZHJpdmVyLWxvY2FsXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImRyaXZlci1sb2NhbFwiPkxvY2FsIEZpbGVzeXN0ZW08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgdi1tb2RlbD1cImRyaXZlclwiIHZhbHVlPVwiczNcIiBpZD1cImRyaXZlci1zM1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkcml2ZXItczNcIj5BbWF6b24gUzM8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZHJpdmVyLWxvY2FsXG4gICAgICAgICAgICB2LWlmPVwiZHJpdmVyID09PSAnbG9jYWwnXCJcbiAgICAgICAgICAgIDpwYXRoLnN5bmM9XCJjb25maWcubG9jYWwucGF0aFwiXG4gICAgICAgICAgICA6dXJsLnN5bmM9XCJjb25maWcubG9jYWwudXJsXCJcbiAgICAgICAgICAgIEBzdWJtaXQ9XCJzdWJtaXRcIj5cbiAgICAgICAgPC9kcml2ZXItbG9jYWw+XG5cbiAgICAgICAgPGRyaXZlci1zM1xuICAgICAgICAgICAgdi1pZj1cImRyaXZlciA9PT0gJ3MzJ1wiXG4gICAgICAgICAgICA6a2V5LnN5bmM9XCJjb25maWcuczMua2V5XCJcbiAgICAgICAgICAgIDpzZWNyZXQuc3luYz1cImNvbmZpZy5zMy5zZWNyZXRcIlxuICAgICAgICAgICAgOmJ1Y2tldC5zeW5jPVwiY29uZmlnLnMzLmJ1Y2tldFwiXG4gICAgICAgICAgICA6cmVnaW9uLnN5bmM9XCJjb25maWcuczMucmVnaW9uXCJcbiAgICAgICAgICAgIDpwYXRoLnN5bmM9XCJjb25maWcuczMucGF0aFwiXG4gICAgICAgICAgICBAc3VibWl0PVwic3VibWl0XCI+XG4gICAgICAgIDwvZHJpdmVyLXMzPlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgICdkcml2ZXItbG9jYWwnOiByZXF1aXJlKCcuL0RyaXZlckxvY2FsLnZ1ZScpLFxuICAgICAgICAgICAgJ2RyaXZlci1zMyc6IHJlcXVpcmUoJy4vRHJpdmVyUzMudnVlJylcbiAgICAgICAgfSxcblxuXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBkcml2ZXI6IFN0cmluZyxcbiAgICAgICAgICAgIGNvbmZpZzogT2JqZWN0XG4gICAgICAgIH0sXG5cblxuICAgICAgICBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG5cbiAgICAgICAgbWV0aG9kczoge1xuXG4gICAgICAgICAgICBzdWJtaXQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc3VibWl0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRHJpdmVyRmllbGRzLnZ1ZT9kMmY5NzI0OCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1wdWJsaXNoLWZpZWxkcz4gPGRpdiBjbGFzcz1mb3JtLWdyb3VwPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5kcml2ZXInKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfZHJpdmVyX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPHVsIGNsYXNzPWxpc3QtdW5zdHlsZWQ+IDxsaT4gPGlucHV0IHR5cGU9cmFkaW8gdi1tb2RlbD1kcml2ZXIgdmFsdWU9bG9jYWwgaWQ9ZHJpdmVyLWxvY2FsIC8+IDxsYWJlbCBmb3I9ZHJpdmVyLWxvY2FsPkxvY2FsIEZpbGVzeXN0ZW08L2xhYmVsPiA8L2xpPiA8bGk+IDxpbnB1dCB0eXBlPXJhZGlvIHYtbW9kZWw9ZHJpdmVyIHZhbHVlPXMzIGlkPWRyaXZlci1zMyAvPiA8bGFiZWwgZm9yPWRyaXZlci1zMz5BbWF6b24gUzM8L2xhYmVsPiA8L2xpPiA8L3VsPiA8L2Rpdj4gPGRyaXZlci1sb2NhbCB2LWlmPVxcXCJkcml2ZXIgPT09ICdsb2NhbCdcXFwiIDpwYXRoLnN5bmM9Y29uZmlnLmxvY2FsLnBhdGggOnVybC5zeW5jPWNvbmZpZy5sb2NhbC51cmwgQHN1Ym1pdD1zdWJtaXQ+IDwvZHJpdmVyLWxvY2FsPiA8ZHJpdmVyLXMzIHYtaWY9XFxcImRyaXZlciA9PT0gJ3MzJ1xcXCIgOmtleS5zeW5jPWNvbmZpZy5zMy5rZXkgOnNlY3JldC5zeW5jPWNvbmZpZy5zMy5zZWNyZXQgOmJ1Y2tldC5zeW5jPWNvbmZpZy5zMy5idWNrZXQgOnJlZ2lvbi5zeW5jPWNvbmZpZy5zMy5yZWdpb24gOnBhdGguc3luYz1jb25maWcuczMucGF0aCBAc3VibWl0PXN1Ym1pdD4gPC9kcml2ZXItczM+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0RyaXZlckZpZWxkcy52dWVcbi8vIG1vZHVsZSBpZCA9IDMyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9GaWVsZHNldEZpZWxkcy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZpZWxkc2V0RmllbGRzLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYXNzZXRzL0NvbnRhaW5lci9XaXphcmQvRmllbGRzZXRGaWVsZHMudnVlXG4vLyBtb2R1bGUgaWQgPSAzMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cInB1Ymxpc2gtZmllbGRzXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5maWVsZHNldCcpIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmFzc2V0X2ZpZWxkc2V0X2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgIDxmaWVsZHNldC1maWVsZHR5cGUgOmRhdGEuc3luYz1cImZpZWxkc2V0XCI+PC9maWVsZHNldC1maWVsZHR5cGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgQGNsaWNrPVwic3VibWl0XCI+TmV4dCBTdGVwPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgICAgIHByb3BzOiBbJ2ZpZWxkc2V0J10sXG5cblxuICAgICAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgICAgIHN1Ym1pdCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdzdWJtaXQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBGaWVsZHNldEZpZWxkcy52dWU/NmMwZDIwMjMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9cHVibGlzaC1maWVsZHM+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRzZXQnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuYXNzZXRfZmllbGRzZXRfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8ZmllbGRzZXQtZmllbGR0eXBlIDpkYXRhLnN5bmM9ZmllbGRzZXQ+PC9maWVsZHNldC1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgQGNsaWNrPXN1Ym1pdD5OZXh0IFN0ZXA8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL0ZpZWxkc2V0RmllbGRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdj4gPGgxIGNsYXNzPW1iLTM+e3sgdHJhbnNsYXRlKCdjcC5jcmVhdGluZ19hc3NldF9jb250YWluZXInKSB9fTwvaDE+IDxkaXYgY2xhc3M9XFxcInB1Ymxpc2gtZm9ybSBmbHVzaCBjYXJkXFxcIj4gPGRpdiBjbGFzcz1cXFwiYnJlYWRjcnVtYnMgd2l6YXJkXFxcIj4gPHNwYW4gY2xhc3M9c3RlcCA6Y2xhc3M9XFxcInsnYWN0aXZlJzogc3RlcCA9PT0gJ21ldGEnfVxcXCI+IE1ldGEgPC9zcGFuPiA8c3BhbiBjbGFzcz1zdGVwIDpjbGFzcz1cXFwieydhY3RpdmUnOiBzdGVwID09PSAnZHJpdmVyJ31cXFwiPiBEcml2ZXIgPC9zcGFuPiA8c3BhbiBjbGFzcz1zdGVwIDpjbGFzcz1cXFwieydhY3RpdmUnOiBzdGVwID09PSAnZmllbGRzZXQnfVxcXCI+IEZpZWxkc2V0IDwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9cGFkPiA8bWV0YS1maWVsZHMgdi1pZj1cXFwic3RlcCA9PT0gJ21ldGEnXFxcIiA6dGl0bGUuc3luYz10aXRsZSA6aGFuZGxlLnN5bmM9aGFuZGxlIEBzdWJtaXQ9bWV0YVN1Ym1pdD4gPC9tZXRhLWZpZWxkcz4gPGRyaXZlci1maWVsZHMgdi1pZj1cXFwic3RlcCA9PT0gJ2RyaXZlcidcXFwiIDpkcml2ZXIuc3luYz1kcml2ZXIgOmNvbmZpZy5zeW5jPWRyaXZlckNvbmZpZyBAc3VibWl0PWRyaXZlclN1Ym1pdD4gPC9kcml2ZXItZmllbGRzPiA8ZmllbGRzZXQtZmllbGRzIHYtaWY9XFxcInN0ZXAgPT09ICdmaWVsZHNldCdcXFwiIDpmaWVsZHNldC5zeW5jPWZpZWxkc2V0IEBzdWJtaXQ9ZmllbGRzZXRTdWJtaXQ+IDwvZmllbGRzZXQtZmllbGRzPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9Db250YWluZXIvV2l6YXJkL1dpemFyZC52dWVcbi8vIG1vZHVsZSBpZCA9IDMyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIG1peGluczogW0Rvc3NpZXJdLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhamF4OiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBjcF91cmwoJ2NvbGxlY3Rpb25zL2dldCcpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0OiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1kb2N1bWVudHNcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5lbnRyaWVzIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwiaXRlbS5lbnRyaWVzX3VybFwiPnt7IGl0ZW0udGl0bGUgfX08L2E+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJ7eyBpdGVtLmNyZWF0ZV91cmwgfX1cIiB2LWlmPVwiY2FuKCdjb2xsZWN0aW9uczonK2l0ZW0uaWQrJzpjcmVhdGUnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4taWNvbiBidG4tcHJpbWFyeSBwdWxsLXJpZ2h0XCI+PHNwYW4gY2xhc3M9XCJpY29uIGljb24tcGx1c1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgPC9hPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuKCdzdXBlcicpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEFjdGlvblBhcnRpYWwoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZEFjdGlvblBhcnRpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBgXG4gICAgICAgICAgICAgICAgPGxpPjxhIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdCcpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICBgO1xuXG4gICAgICAgICAgICB0aGlzLnRhYmxlT3B0aW9ucy5wYXJ0aWFscy5hY3Rpb25zID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2NvbGxlY3Rpb25zLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBtaXhpbnM6IFtEb3NzaWVyXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgIGdldDogY3BfdXJsKCdhc3NldHMvY29udGFpbmVycy9nZXQnKSxcbiAgICAgICAgICAgICAgICBkZWxldGU6IGNwX3VybCgnY29uZmlndXJlL2NvbnRlbnQvYXNzZXRzJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZWFyY2g6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNvcnQ6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgc29ydE9yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICBwYXJ0aWFsczoge1xuICAgICAgICAgICAgICAgICAgICBjZWxsOiBgXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWZvbGRlci1pbWFnZXNcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5hc3NldHMgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+e3sgaXRlbS50aXRsZSB9fTwvYT5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRkQWN0aW9uUGFydGlhbCgpO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZEFjdGlvblBhcnRpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuKCdhc3NldHM6bWFuYWdlJykpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxsaT48YSA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIj57eyB0cmFuc2xhdGUoJ2NwLmVkaXQnKSB9fTwvYT48L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbignYXNzZXRzOmRlbGV0ZScpKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGBcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwid2FybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2sucHJldmVudD1cImNhbGwoJ2RlbGV0ZUl0ZW0nLCBpdGVtLmlkKVwiPnt7IHRyYW5zbGF0ZSgnY3AuZGVsZXRlJykgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50YWJsZU9wdGlvbnMucGFydGlhbHMuYWN0aW9ucyA9IHN0cjtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy9hc3NldC1jb250YWluZXJzLWNvbmZpZ3VyZS5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgnY29sbGVjdGlvbnMvZ2V0JyksXG4gICAgICAgICAgICAgICAgZGVsZXRlOiBjcF91cmwoJ2NvbmZpZ3VyZS9jb250ZW50L2NvbGxlY3Rpb25zL2RlbGV0ZScpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0OiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1kb2N1bWVudHNcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS5lbnRyaWVzIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiPnt7IGl0ZW0udGl0bGUgfX08L2E+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkZEFjdGlvblBhcnRpYWwoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRBY3Rpb25QYXJ0aWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbignY29sbGVjdGlvbnM6bWFuYWdlJykpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxsaT48YSA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIj57eyB0cmFuc2xhdGUoJ2NwLmVkaXQnKSB9fTwvYT48L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbignY29sbGVjdGlvbnM6ZGVsZXRlJykpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljay5wcmV2ZW50PVwiY2FsbCgnZGVsZXRlSXRlbScsIGl0ZW0uaWQpXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRhYmxlT3B0aW9ucy5wYXJ0aWFscy5hY3Rpb25zID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2NvbGxlY3Rpb25zLWNvbmZpZ3VyZS5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgnZ2xvYmFscy9nZXQnKSxcbiAgICAgICAgICAgICAgICBkZWxldGU6IGNwX3VybCgnY29uZmlndXJlL2NvbnRlbnQvZ2xvYmFscy9kZWxldGUnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNlYXJjaDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2hlY2tib3hlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc29ydDogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXI6ICdhc2MnLFxuICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGw6IGA8YSA6aHJlZj1cImNwX3VybCgnY29uZmlndXJlL2NvbnRlbnQvZ2xvYmFscy8nKStpdGVtLnNsdWdcIj57eyBpdGVtLnRpdGxlIH19PC9hPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGRBY3Rpb25QYXJ0aWFsKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkQWN0aW9uUGFydGlhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW4oJ2dsb2JhbHM6bWFuYWdlJykpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxsaT48YSA6aHJlZj1cImNwX3VybCgnY29uZmlndXJlL2NvbnRlbnQvZ2xvYmFscy8nKStpdGVtLnNsdWdcIj57eyB0cmFuc2xhdGUoJ2NwLmVkaXQnKSB9fTwvYT48L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbignZ2xvYmFsczpkZWxldGUnKSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBgXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIndhcm5pbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrLnByZXZlbnQ9XCJjYWxsKCdkZWxldGVJdGVtJywgaXRlbS5pZClcIj57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGFibGVPcHRpb25zLnBhcnRpYWxzLmFjdGlvbnMgPSBzdHI7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvZ2xvYmFscy1jb25maWd1cmUuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIG1peGluczogW0Rvc3NpZXJdLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhamF4OiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBjcF91cmwoJ3RheG9ub21pZXMvZ2V0JyksXG4gICAgICAgICAgICAgICAgZGVsZXRlOiBjcF91cmwoJ2NvbmZpZ3VyZS9jb250ZW50L3RheG9ub21pZXMvZGVsZXRlJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZWFyY2g6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNvcnQ6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgc29ydE9yZGVyOiAnYXNjJyxcbiAgICAgICAgICAgICAgICBwYXJ0aWFsczoge1xuICAgICAgICAgICAgICAgICAgICBjZWxsOiBgXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWRvY3VtZW50c1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnRheG9ub21pZXMgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+e3sgaXRlbS50aXRsZSB9fTwvYT5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRkQWN0aW9uUGFydGlhbCgpO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZEFjdGlvblBhcnRpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuKCd0YXhvbm9taWVzOm1hbmFnZScpKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGA8bGk+PGEgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+e3sgdHJhbnNsYXRlKCdjcC5lZGl0JykgfX08L2E+PC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW4oJ3RheG9ub21pZXM6ZGVsZXRlJykpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljay5wcmV2ZW50PVwiY2FsbCgnZGVsZXRlSXRlbScsIGl0ZW0uaWQpXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRhYmxlT3B0aW9ucy5wYXJ0aWFscy5hY3Rpb25zID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL3RheG9ub21pZXMtY29uZmlndXJlLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9mb3Jtc2V0LWJ1aWxkZXIudGVtcGxhdGUuaHRtbCcpLFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICAnZm9ybXNldC1maWVsZHMtYnVpbGRlcic6IHJlcXVpcmUoJy4vZm9ybXNldC1maWVsZHMnKSxcbiAgICAgICAgJ2Zvcm1zZXQtY29sdW1ucyc6IHJlcXVpcmUoJy4vY29sdW1ucycpXG4gICAgfSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgICdmb3Jtc2V0VGl0bGUnOiBTdHJpbmcsXG4gICAgICAgICdmb3Jtc2V0TmFtZSc6IFN0cmluZyxcbiAgICAgICAgJ2NyZWF0ZSc6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAnc2F2ZVVybCc6IFN0cmluZ1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBudWxsLFxuICAgICAgICAgICAgc2x1ZzogbnVsbCxcbiAgICAgICAgICAgIGZvcm1zZXQ6IHsgZmllbGRzOiBbXSwgY29sdW1uczogW10gfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGNvbHVtbnM6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybXNldC5jb2x1bW5zIHx8IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oY29sdW1ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybXNldC5jb2x1bW5zID0gY29sdW1ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtZXRyaWNzR3JpZENvbmZpZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZF9yb3c6IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9tZXRyaWNzX2dyaWRfYWRkX3JvdycpLFxuICAgICAgICAgICAgICAgIG1vZGU6ICdzdGFja2VkJyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3R5cGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X21ldHJpY3NfZ3JpZF90eXBlX2ZpZWxkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHZhbHVlOiAnc3VtJywgdGV4dDogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X21ldHJpY3NfZ3JpZF90eXBlX29wdGlvbl9zdW0nKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICd0b3RhbCcsIHRleHQ6IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9tZXRyaWNzX2dyaWRfdHlwZV9vcHRpb25fdG90YWwnKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgdmFsdWU6ICdhdmVyYWdlJywgdGV4dDogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X21ldHJpY3NfZ3JpZF90eXBlX29wdGlvbl9hdmVyYWdlJykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbGFiZWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X21ldHJpY3NfZ3JpZF9sYWJlbF9maWVsZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDc1XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdwYXJhbXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X21ldHJpY3NfZ3JpZF9wYXJhbXNfZmllbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhcnJheSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW1haWxHcmlkQ29uZmlnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkX3JvdzogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X2VtYWlsc19ncmlkX2FkZF9yb3cnKSxcbiAgICAgICAgICAgICAgICBtb2RlOiAnc3RhY2tlZCcsXG4gICAgICAgICAgICAgICAgZmllbGRzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cmFuc2xhdGUoJ2NwLmZvcm1zZXRfZW1haWxzX2dyaWRfdG9fZmllbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9uczogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X2VtYWlsc19ncmlkX3RvX2luc3RydWN0aW9ucycpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdmcm9tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9lbWFpbHNfZ3JpZF9mcm9tX2ZpZWxkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnM6IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9lbWFpbHNfZ3JpZF9mcm9tX2luc3RydWN0aW9ucycpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZXBseV90bycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cmFuc2xhdGUoJ2NwLmZvcm1zZXRfZW1haWxzX2dyaWRfcmVwbHlfdG9fZmllbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc3ViamVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cmFuc2xhdGUoJ2NwLmZvcm1zZXRfZW1haWxzX2dyaWRfc3ViamVjdF9maWVsZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiB0cmFuc2xhdGUoJ2NwLmZvcm1zZXRfZW1haWxzX2dyaWRfc3ViamVjdF9pbnN0cnVjdGlvbnMnKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGVtcGxhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X2VtYWlsc19ncmlkX3RlbXBsYXRlX2ZpZWxkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnM6IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9lbWFpbHNfZ3JpZF90ZW1wbGF0ZV9pbnN0cnVjdGlvbnMnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGdldEJsYW5rRm9ybXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1zZXQgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICcnLFxuICAgICAgICAgICAgICAgIGZpZWxkczogW11cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEZvcm1zZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHVybCA9IGNwX3VybCgnL2Zvcm1zLycgKyB0aGlzLmZvcm1zZXROYW1lICsgJy9nZXQnKTtcbiAgICAgICAgICAgIHNlbGYuJGh0dHAuZ2V0KHVybCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHNlbGYuZm9ybXNldCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHNlbGYuZXJyb3JNZXNzYWdlID0gZGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoISB0aGlzLmZvcm1zZXQudGl0bGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgJ3NldEZsYXNoRXJyb3InLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUoJ3ZhbGlkYXRpb24ucmVxdWlyZWQnLCB7IGF0dHJpYnV0ZTogJ3RpdGxlJyB9KVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh0aGlzLnNhdmVVcmwsIHtcbiAgICAgICAgICAgICAgICBzbHVnOiB0aGlzLnNsdWcsXG4gICAgICAgICAgICAgICAgZm9ybXNldDogdGhpcy5mb3Jtc2V0XG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkYXRhLnJlZGlyZWN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5jcmVhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0QmxhbmtGb3Jtc2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdldEZvcm1zZXQoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2Zvcm1zZXQtYnVpbGRlci5qcyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGlja3kgZmxleHkgbWItMyBmdWxsLXdpZHRoXFxcIj4gPGgxIGNsYXNzPWZpbGwgdi1pZj1jcmVhdGU+IHt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRlX2Zvcm1zZXQnKSB9fSA8L2gxPiA8aDEgY2xhc3M9ZmlsbCB2LWlmPSFjcmVhdGU+IHt7IHRyYW5zbGF0ZSgnY3AuZWRpdGluZ19mb3Jtc2V0JykgfX06IDxzdHJvbmc+e3sgZm9ybXNldFRpdGxlIH19PC9zdHJvbmc+IDwvaDE+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgdi1vbjpjbGljaz1zYXZlKCk+e3sgdHJhbnNsYXRlKCdjcC5zYXZlJykgfX08L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9cHgtMz4gPGRpdiBjbGFzcz1cXFwiY2FyZCBwLTNcXFwiPiA8ZGl2IHYtaWY9XFxcImxvYWRpbmcgJiYgIWVycm9yTWVzc2FnZVxcXCIgY2xhc3M9bG9hZGluZz4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fSA8L2Rpdj4gPGRpdiB2LWlmPWVycm9yTWVzc2FnZSBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIj4gPHA+e3sgZXJyb3JNZXNzYWdlIH19PC9wPiA8L2Rpdj4gPGRpdiBjbGFzcz1maWVsZHNldC1idWlsZGVyIHYtaWY9XFxcIiEgbG9hZGluZ1xcXCI+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AudGl0bGUnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF90aXRsZV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9Zm9ybXNldC50aXRsZSBhdXRvZm9jdXM9YXV0b2ZvY3VzIC8+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXAgdi1pZj1jcmVhdGU+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLnNsdWcnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9zbHVnX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1zbHVnIC8+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGVfY2hvaWNlKCdjcC5tZXRyaWNzJywgMikgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmZvcm1zZXRfbWV0cmljc19pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxncmlkLWZpZWxkdHlwZSA6ZGF0YS5zeW5jPWZvcm1zZXQubWV0cmljcyA6Y29uZmlnPW1ldHJpY3NHcmlkQ29uZmlnPjwvZ3JpZC1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGVfY2hvaWNlKCdjcC5lbWFpbHMnLCAyKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9lbWFpbHNfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8Z3JpZC1maWVsZHR5cGUgOmRhdGEuc3luYz1mb3Jtc2V0LmVtYWlsIDpjb25maWc9ZW1haWxHcmlkQ29uZmlnPjwvZ3JpZC1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPWZvcm0tZ3JvdXA+IDxsYWJlbCBjbGFzcz1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmZvcm1zZXRfaG9uZXlwb3RfZmllbGQnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9ob25leXBvdF9pbnN0cnVjdGlvbnMnKSB9fSA8YSBocmVmPWh0dHBzOi8vZG9jcy5zdGF0YW1pYy5jb20vZm9ybXMjaG9uZXlwb3Q+e3sgdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X2hvbmV5cG90X2xpbmsnKSB9fTwvYT48L3NtYWxsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWZvcm1zZXQuaG9uZXlwb3QgLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZm9ybXNldF9zdG9yZV9maWVsZCcpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X3N0b3JlX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPHRvZ2dsZS1maWVsZHR5cGUgOmRhdGEuc3luYz1mb3Jtc2V0LnN0b3JlPjwvdG9nZ2xlLWZpZWxkdHlwZT4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY2FyZCBwLTNcXFwiIHYtaWY9IWxvYWRpbmc+IDxkaXYgY2xhc3M9XFxcImhlYWQgY2xlYXJmaXhcXFwiPiA8aDIgY2xhc3M9bS0wPnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmZpZWxkcycsIDIpIH19PC9oMj4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5mb3Jtc2V0X2ZpZWxkc19pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDwvZGl2PiA8Zm9ybXNldC1maWVsZHMtYnVpbGRlciA6ZmllbGRzPWZvcm1zZXQuZmllbGRzPjwvZm9ybXNldC1maWVsZHMtYnVpbGRlcj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2Zvcm1zZXQtYnVpbGRlci50ZW1wbGF0ZS5odG1sXG4vLyBtb2R1bGUgaWQgPSAzMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9mb3Jtc2V0LWZpZWxkcy50ZW1wbGF0ZS5odG1sJyksXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdmaWVsZC1zZXR0aW5ncyc6IHJlcXVpcmUoJy4vZmllbGQtc2V0dGluZ3MnKVxuICAgIH0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgZGVmYXVsdDogW11cbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93RWRpdE1vZGFsOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdGVkRmllbGQ6IG51bGxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc2VsZWN0RmllbGQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmllbGQgPSBpbmRleDtcbiAgICAgICAgfSxcblxuICAgICAgICBkZXNlbGVjdEZpZWxkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlRmllbGQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmllbGQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5maWVsZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRGaWVsZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRzTGVuZ3RoID0gdGhpcy5maWVsZHMubGVuZ3RoIHx8IDA7XG4gICAgICAgICAgICB2YXIgY291bnQgPSBmaWVsZHNMZW5ndGggKyAxO1xuXG4gICAgICAgICAgICB0aGlzLmZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnZmllbGRfJyArIGNvdW50LFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdGaWVsZCAnICsgY291bnQsXG4gICAgICAgICAgICAgICAgaXNOZXc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmllbGQgPSBjb3VudCAtIDE7XG5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJGVsKS5maW5kKCdpbnB1dCcpLmZpcnN0KCkuZm9jdXMoKS5zZWxlY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVuYWJsZVNvcnRpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAkKCcuc29ydGFibGUnKS5zb3J0YWJsZSh7XG4gICAgICAgICAgICAgICAgYXhpczogJ3knLFxuICAgICAgICAgICAgICAgIHJldmVydDogMTc1LFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAncGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgICAgIGhhbmRsZTogJy5kcmFnLWhhbmRsZScsXG4gICAgICAgICAgICAgICAgZm9yY2VQbGFjZWhvbGRlclNpemU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdWkuaXRlbS5kYXRhKCdzdGFydCcsIHVpLml0ZW0uaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdWkuaXRlbS5kYXRhKCdzdGFydCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kICAgPSB1aS5pdGVtLmluZGV4KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5maWVsZHMuc3BsaWNlKGVuZCwgMCwgc2VsZi5maWVsZHMuc3BsaWNlKHN0YXJ0LCAxKVswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICBzZWxlY3RlZEZpZWxkOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dFZGl0TW9kYWwgPSAodmFsICE9PSBudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd0VkaXRNb2RhbDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgaWYgKCEgdmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXNlbGVjdEZpZWxkKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQodGhpcy4kZWwpLmZpbmQoJy5tb2RhbC1ib2R5JykuZmluZCgnaW5wdXQnKS5maXJzdCgpLmZvY3VzKCkuc2VsZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVuYWJsZVNvcnRpbmcoKTtcbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2Zvcm1zZXQtZmllbGRzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+IDx0YWJsZSBjbGFzcz1cXFwiZmllbGRzLXRhYmxlIGJvcmRlcmVkLXRhYmxlXFxcIj4gPHRoZWFkPiA8dHI+IDx0aD57eyB0cmFuc2xhdGUoJ2NwLmhhbmRsZScpIH19PC90aD4gPHRoPnt7IHRyYW5zbGF0ZSgnY3AubGFiZWwnKSB9fTwvdGg+IDx0aCBjbGFzcz1jb2wtY29sdW1uPnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbHVtbnMnLCAxKSB9fTwvdGg+IDx0aCBjbGFzcz1yb3ctY29udHJvbHM+PC90aD4gPC90cj4gPC90aGVhZD4gPHRib2R5IGNsYXNzPXNvcnRhYmxlIHYtZWw6dGJvZHk+IDx0ciB2LWZvcj1cXFwiZmllbGQgaW4gZmllbGRzXFxcIj4gPHRkIGNsYXNzPWNvbC1oYW5kbGU+PGlucHV0IHR5cGU9dGV4dCBjbGFzcz1jb2RlIHYtbW9kZWw9ZmllbGQubmFtZSAvPjwvdGQ+IDx0ZCBjbGFzcz1jb2wtZGlzcGxheT48aW5wdXQgdHlwZT10ZXh0IHYtbW9kZWw9ZmllbGQuZGlzcGxheSAvPjwvdGQ+IDx0ZCBjbGFzcz1jb2wtY29sdW1uPiA8dG9nZ2xlLWZpZWxkdHlwZSA6ZGF0YS5zeW5jPWZpZWxkLmNvbHVtbj48L3RvZ2dsZS1maWVsZHR5cGU+IDwvdGQ+IDx0ZCBjbGFzcz1yb3ctY29udHJvbHM+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tZWRpdCBlZGl0XFxcIiBAY2xpY2s9c2VsZWN0RmllbGQoJGluZGV4KT48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tbWVudSBtb3ZlIGRyYWctaGFuZGxlXFxcIj48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY3Jvc3MgZGVsZXRlXFxcIiBAY2xpY2s9ZGVsZXRlRmllbGQoJGluZGV4KT48L3NwYW4+IDwvdGQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDxtb2RhbCA6c2hvdy5zeW5jPXNob3dFZGl0TW9kYWwgY2xhc3M9bWFya2Rvd24tbW9kYWw+IDx0ZW1wbGF0ZSBzbG90PWhlYWRlcj57eyB0cmFuc2xhdGUoJ2NwLmVkaXRfZmllbGQnKSB9fTwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSBzbG90PWJvZHk+IDxmaWVsZC1zZXR0aW5ncyA6ZmllbGQuc3luYz1maWVsZHNbc2VsZWN0ZWRGaWVsZF0+IDwvZmllbGQtc2V0dGluZ3M+IDwvdGVtcGxhdGU+IDwvbW9kYWw+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgQGNsaWNrPWFkZEZpZWxkPnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmZpZWxkcycsIDEpIH19IDxpIGNsYXNzPVxcXCJpY29uIGljb24tcGx1cyBpY29uLXJpZ2h0XFxcIj48L2k+PC9idXR0b24+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9mb3Jtc2V0LWJ1aWxkZXIvZm9ybXNldC1maWVsZHMudGVtcGxhdGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vZmllbGQtc2V0dGluZ3MudGVtcGxhdGUuaHRtbCcpLFxuXG4gICAgcHJvcHM6IFsnZmllbGQnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNOYW1lTW9kaWZpZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gRm9yIG5ldyBmaWVsZHMsIHdlJ2xsIHNsdWdpZnkgdGhlIGRpc3BsYXkgbmFtZSBpbnRvIHRoZSBmaWVsZCBuYW1lLlxuICAgICAgICAvLyBJZiB0aGV5IGVkaXQgdGhlIG5hbWUsIHdlJ2xsIHN0b3AuXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLmlzTmV3KSB7XG4gICAgICAgICAgICB0aGlzLmlzTmFtZU1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5maWVsZC5pc05ldztcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ2ZpZWxkLmRpc3BsYXknLCBmdW5jdGlvbihkaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgdGhpcy5pc05hbWVNb2RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm5hbWUgPSB0aGlzLiRzbHVnaWZ5KGRpc3BsYXksICdfJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2ZpZWxkLXNldHRpbmdzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZGlzcGxheV90ZXh0JykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmRpc3BsYXlfdGV4dF9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9ZmllbGQuZGlzcGxheSB2LWZvY3VzPXRydWUgLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRfbmFtZScpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5maWVsZF9uYW1lX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1maWVsZC5uYW1lIEBrZXlkb3duPVxcXCJpc05hbWVNb2RpZmllZCA9IHRydWVcXFwiLz4gPC9kaXY+IDxkaXYgY2xhc3M9Zm9ybS1ncm91cD4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AudmFsaWRhdGlvbl9ydWxlcycpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3t7IHRyYW5zbGF0ZSgnY3AudmFsaWRhdGlvbl9ydWxlc19pbnN0cnVjdGlvbnMnLCB7IHVybDogXFxcImh0dHBzOi8vbGFyYXZlbC5jb20vZG9jcy81LjEvdmFsaWRhdGlvbiNhdmFpbGFibGUtdmFsaWRhdGlvbi1ydWxlc1xcXCIgfSkgfX19PC9zbWFsbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1maWVsZC52YWxpZGF0ZSAvPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Zvcm1zZXQtYnVpbGRlci9maWVsZC1zZXR0aW5ncy50ZW1wbGF0ZS5odG1sXG4vLyBtb2R1bGUgaWQgPSAzMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9jb2x1bW5zLnRlbXBsYXRlLmh0bWwnKSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGNvbHVtbnM6IHsgdHlwZTogQXJyYXkgfSxcbiAgICAgICAgZmllbGRzOiB7IHR5cGU6IEFycmF5IH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgc3VnZ2VzdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gW107XG5cbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLmZpZWxkcywgZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgICAgICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogZmllbGQuZGlzcGxheSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2NvbHVtbnMuanMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdj4gPHJlbGF0ZS1maWVsZHR5cGUgOnN1Z2dlc3Rpb25zLXByb3A9c3VnZ2VzdGlvbnMgOmRhdGEuc3luYz1jb2x1bW5zIDpjb25maWc9e30+PC9yZWxhdGUtZmllbGR0eXBlPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZm9ybXNldC1idWlsZGVyL2NvbHVtbnMudGVtcGxhdGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0J1aWxkZXIudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9CdWlsZGVyLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9CdWlsZGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuPGRpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4eSBtYi0zIHN0aWNreVwiPlxuICAgICAgICA8aDEgY2xhc3M9XCJmaWxsXCIgdi1pZj1cImNyZWF0ZVwiPlxuICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5jcmVhdGVfZmllbGRzZXQnKSB9fVxuICAgICAgICA8L2gxPlxuXG4gICAgICAgIDxoMSBjbGFzcz1cImZpbGxcIiB2LWVsc2U+XG4gICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLmVkaXRpbmdfZmllbGRzZXQnKSB9fTpcbiAgICAgICAgICAgIDxzdHJvbmc+e3sgZmllbGRzZXRUaXRsZSB9fTwvc3Ryb25nPlxuICAgICAgICA8L2gxPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHYtb246Y2xpY2s9XCJzYXZlKClcIiA6ZGlzYWJsZWQ9XCIhY2FuU2F2ZVwiPnt7IHRyYW5zbGF0ZSgnY3Auc2F2ZScpIH19PC9idXR0b24+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHgtM1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCIgdi1pZj1cImhhc0Vycm9yc1wiPlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cImVycm9yIGluIGVycm9yc1wiPnt7IGVycm9yIH19PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIHAtMFwiPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwibG9hZGluZyAmJiAhZXJyb3JNZXNzYWdlXCIgY2xhc3M9XCJsb2FkaW5nXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiB2LWlmPVwiZXJyb3JNZXNzYWdlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAgICAgICAgICAgICAgICA8cD57eyBlcnJvck1lc3NhZ2UgfX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpZWxkc2V0LWJ1aWxkZXIgZmxleCBmbGV4LXdyYXBcIiB2LWlmPVwiISBsb2FkaW5nXCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBwLTIgbWItMCB3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgYm9yZGVyLWJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMi8zIHByLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC50aXRsZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2sgbWItMFwiPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRzZXRfdGl0bGVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMS8zIGZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImZpZWxkc2V0LnRpdGxlXCIgYXV0b2ZvY3VzPVwiYXV0b2ZvY3VzXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBwLTIgbWItMCB3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgYm9yZGVyLWJcIiB2LWlmPVwiY3JlYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTIvMyBwci0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuaGFuZGxlJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9jayBtYi0wXCI+e3sgdHJhbnNsYXRlKCdjcC5maWVsZHNldF9oYW5kbGVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMS8zIGZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cInNsdWdcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHAtMiBtYi0wIHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBib3JkZXItYlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy0yLzMgcHItMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmNyZWF0ZV90aXRsZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2sgbWItMFwiPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRzZXRfY3JlYXRlX3RpdGxlX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTEvMyBmbGV4IGp1c3RpZnktZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJmaWVsZHNldC5jcmVhdGVfdGl0bGVcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHAtMiBtYi0wIHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBib3JkZXItYlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy0yLzMgcHItMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmhpZGUnKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrIG1iLTBcIj57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkc2V0X2hpZGVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMS8zIGZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0b2dnbGUtZmllbGR0eXBlIDpkYXRhLnN5bmM9XCJmaWVsZHNldC5oaWRlXCI+PC90b2dnbGUtZmllbGR0eXBlPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHAtMiBtYi0wIHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy0yLzMgcHItMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmFwcGVuZF90YXhvbm9taWVzJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9jayBtYi0wXCI+e3sgdHJhbnNsYXRlKCdjcC5hcHBlbmRfdGF4b25vbWllc19pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy0xLzMgZmxleCBqdXN0aWZ5LWVuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRvZ2dsZS1maWVsZHR5cGUgOmRhdGEuc3luYz1cImZpZWxkc2V0LnRheG9ub21pZXNcIj48L3RvZ2dsZS1maWVsZHR5cGU+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBsaXR0bGUtaGVhZGluZyBteC0xIG9wYWNpdHktNTBcIj57eyB0cmFuc2xhdGUoJ2NwLnNlY3Rpb25zX2FuZF9maWVsZHMnKSB9fTwvZGl2PlxuXG4gICAgICAgIDxzZWN0aW9uLWJ1aWxkZXJcbiAgICAgICAgICAgIHYtaWY9XCIhbG9hZGluZ1wiXG4gICAgICAgICAgICB2LXJlZjpzZWN0aW9uLWJ1aWxkZXJcbiAgICAgICAgICAgIDpmaWVsZHR5cGVzPVwiZmllbGR0eXBlc1wiXG4gICAgICAgICAgICA6c2VjdGlvbnMuc3luYz1cImZpZWxkc2V0LnNlY3Rpb25zXCI+XG4gICAgICAgIDwvc2VjdGlvbi1idWlsZGVyPlxuXG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuTW91c2V0cmFwID0gcmVxdWlyZSgnbW91c2V0cmFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgU2VjdGlvbkJ1aWxkZXI6IHJlcXVpcmUoJy4vU2VjdGlvbnMvU2VjdGlvbkJ1aWxkZXIudnVlJylcbiAgICB9LFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgJ2ZpZWxkc2V0VGl0bGUnOiBTdHJpbmcsXG4gICAgICAgICdjcmVhdGUnOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgJ3NhdmVVcmwnOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNhdmluZzogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBudWxsLFxuICAgICAgICAgICAgc2x1ZzogbnVsbCxcbiAgICAgICAgICAgIGZpZWxkc2V0OiB7IHRpdGxlOiAnJywgc2VjdGlvbnM6IG51bGwgfSxcbiAgICAgICAgICAgIGZpZWxkdHlwZXM6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgY2FuU2F2ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkc2V0LnRpdGxlICE9PSAnJztcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNFcnJvcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uc2l6ZSh0aGlzLmVycm9ycykgIT09IDA7XG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgZ2V0RmllbGR0eXBlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldChjcF91cmwoJy9maWVsZHR5cGVzJykpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIF8uZWFjaChkYXRhLCBmdW5jdGlvbihmaWVsZHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5maWVsZHR5cGVzLnB1c2goZmllbGR0eXBlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNlbGYuZ2V0RmllbGRzZXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEZpZWxkc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHVybCA9IGNwX3VybChgL2ZpZWxkc2V0cy1qc29uLyR7Z2V0X2Zyb21fc2VnbWVudCgzKX0vZWRpdGApO1xuXG4gICAgICAgICAgICBzZWxmLiRodHRwLmdldCh1cmwpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkc2V0ID0gZGF0YTtcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgd2F0Y2hlciBvbiB0aGUgbmV4dCB0aWNrIGFmdGVyIHRoZSByZXF1ZXN0IGlzIGNvbXBsZXRlLiBUaGlzIHByZXZlbnRzIGFueSBjaGFuZ2VzIGJlaW5nXG4gICAgICAgICAgICAgICAgLy8gdHJpZ2dlcmVkIGJ5IHRoaXMgY29tcG9uZW50IG9yIGFueSBjaGlsZCBjb21wb25lbnRzIHRoYXQgbW9kaWZ5IHRoZSBmaWVsZHNldCB3aGVuIHRoZXkgYXJlIGluaXRpYWxpemVkLlxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ2ZpZWxkc2V0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2NoYW5nZXNNYWRlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHsgZGVlcDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5lcnJvck1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzYXZlKCkge1xuICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KHRoaXMuc2F2ZVVybCwge1xuICAgICAgICAgICAgICAgIHNsdWc6IHRoaXMuc2x1ZyxcbiAgICAgICAgICAgICAgICBmaWVsZHNldDogdGhpcy5maWVsZHNldFxuICAgICAgICAgICAgfSkuc3VjY2VzcyhkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjaGFuZ2VzTWFkZScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkYXRhLnJlZGlyZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdzZXRGbGFzaFN1Y2Nlc3MnLCBkYXRhLm1lc3NhZ2UsIHsgdGltZW91dDogMTUwMCB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnc2V0Rmxhc2hFcnJvcicsIHRyYW5zbGF0ZSgnY3AuZXJyb3InKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gZGF0YS5lcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAwIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmVycm9yKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYSBwcm9ibGVtIHNhdmluZyB0aGUgZmllbGRzZXQuIFBsZWFzZSBjaGVjayB5b3VyIGxvZ3MuJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZERlbGV0ZWQoZmllbGQpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuc2VjdGlvbkJ1aWxkZXIuZGVsZXRlRmllbGQoZmllbGQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5nZXRGaWVsZHR5cGVzKCk7XG5cbiAgICAgICAgTW91c2V0cmFwLmJpbmRHbG9iYWwoJ21vZCtzJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBCdWlsZGVyLnZ1ZT8zNDE3ZWVjNyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NlY3Rpb25CdWlsZGVyLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2VjdGlvbkJ1aWxkZXIudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL1NlY3Rpb25CdWlsZGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLWJ1aWxkZXJcIiA6Y2xhc3M9XCJ7ICdpcy1kcmFnZ2luZy1maWVsZCc6IGlzRHJhZ2dpbmdGaWVsZCB9XCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhYnMtb3V0ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJzXCIgdi1lbDp0YWJzPlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIlxuICAgICAgICAgICAgICAgICAgICB2LWZvcj1cIihpLCBzZWN0aW9uKSBpbiBzZWN0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cIlsndGFiJywgeyAnYWN0aXZlJzogYWN0aXZlU2VjdGlvbiA9PT0gc2VjdGlvbi5pZCB9XVwiXG4gICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwiYWN0aXZlU2VjdGlvbiA9IHNlY3Rpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgICBAbW91c2VlbnRlcj1cImhvdmVyZWRJbnRvVGFiKHNlY3Rpb24uaWQpXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHt7IHNlY3Rpb24uZGlzcGxheSB9fVxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jcm9zcyBzZWN0aW9uLWRlbGV0ZSBvcGFjaXR5LTI1IGhvdmVyOm9wYWNpdHktNzVcIiBAY2xpY2sucHJldmVudD1cImRlbGV0ZVNlY3Rpb24oaSlcIiB2LWlmPVwic2VjdGlvbnMubGVuZ3RoID4gMVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD1cImFkZFNlY3Rpb25cIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwicHktMSBweC0yIG9wYWNpdHktNTAgaG92ZXI6b3BhY2l0eS0xMDBcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1wbHVzXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9ucy1jb250YWluZXJcIiA6Y2xhc3M9XCJ7ICdoYXMtc2lkZWJhcic6IGhhc1NpZGViYXIsICdlZGl0aW5nLXNpZGViYXInOiBlZGl0aW5nU2lkZWJhciB9XCI+XG5cbiAgICAgICAgICAgICAgICA8c2VjdGlvbnMtc2VjdGlvblxuICAgICAgICAgICAgICAgICAgICB2LWZvcj1cIihpLCBzZWN0aW9uKSBpbiBzZWN0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgIHYtc2hvdz1cImFjdGl2ZVNlY3Rpb24gPT09IHNlY3Rpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgICB2LXJlZjpzZWN0aW9uc1xuICAgICAgICAgICAgICAgICAgICA6c2VjdGlvbi5zeW5jPVwic2VjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgIDpmaWVsZHR5cGVzPVwiZmllbGR0eXBlc1wiXG4gICAgICAgICAgICAgICAgICAgIDppcy1vbmx5LXNlY3Rpb249XCJzZWN0aW9ucy5sZW5ndGggPT09IDFcIlxuICAgICAgICAgICAgICAgICAgICBAZmllbGQtYWRkZWQ9XCJhZGRGaWVsZFwiXG4gICAgICAgICAgICAgICAgICAgIEBkZWxldGVkPVwiZGVsZXRlU2VjdGlvbihpKVwiXG4gICAgICAgICAgICAgICAgICAgIEBmaWVsZHMtc29ydGVkPVwiZmllbGRzU29ydGVkXCJcbiAgICAgICAgICAgICAgICA+PC9zZWN0aW9ucy1zZWN0aW9uPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm90aGVyLXNlY3Rpb24tcGxhY2Vob2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICB2LWlmPVwiaGFzU2lkZWJhclwiXG4gICAgICAgICAgICAgICAgICAgIHYtdGV4dD1cImVkaXRpbmdTaWRlYmFyID8gdHJhbnNsYXRlX2Nob2ljZSgnY3Auc2VjdGlvbnMnLCAyKSA6IHNpZGViYXJTZWN0aW9uTGFiZWxcIlxuICAgICAgICAgICAgICAgID48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgRmllbGRzZXQgZnJvbSAnLi4vLi4vcHVibGlzaC9GaWVsZHNldCc7XG5pbXBvcnQgeyBTb3J0YWJsZSB9IGZyb20gJ0BzaG9waWZ5L2RyYWdnYWJsZSc7XG5pbXBvcnQgU2VjdGlvbnNTZWN0aW9uIGZyb20gJy4vU2VjdGlvbi52dWUnO1xuXG5sZXQgc29ydGFibGVTZWN0aW9ucyA9IG51bGw7XG5sZXQgc29ydGFibGVGaWVsZHMgPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFNlY3Rpb25zU2VjdGlvbiAvLyBOYW1pbmcgaXMgaGFyZC4gQ2FuJ3QganVzdCBjYWxsIGl0IHNlY3Rpb24gc2luY2UgdGhhdHMgYW4gaHRtbCB0YWcuXG4gICAgfSxcblxuICAgIHByb3BzOiBbJ2ZpZWxkdHlwZXMnLCAnc2VjdGlvbnMnXSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY3RpdmVTZWN0aW9uOiBudWxsLFxuICAgICAgICAgICAgaXNEcmFnZ2luZ0ZpZWxkOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaGFzU2lkZWJhcigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZGViYXJTZWN0aW9uICE9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2lkZWJhclNlY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5maW5kKHRoaXMuc2VjdGlvbnMsIHsgaGFuZGxlOiAnc2lkZWJhcicgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2lkZWJhclNlY3Rpb25MYWJlbCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZGViYXJTZWN0aW9uLmRpc3BsYXkgfHwgdGhpcy5zaWRlYmFyU2VjdGlvbi5oYW5kbGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2lkZWJhclNlY3Rpb25GaWVsZHMoKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gXy5maW5kSW5kZXgodGhpcy5zZWN0aW9ucywgeyBoYW5kbGU6ICdzaWRlYmFyJyB9KTtcblxuICAgICAgICAgICAgaWYgKGkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfLm1hcCh0aGlzLnNlY3Rpb25zW2ldLmZpZWxkcywgZmllbGQgPT4gdGhpcy5nZXRGaWVsZEJ5SWQoZmllbGQpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBlZGl0aW5nU2lkZWJhcigpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuaGFzU2lkZWJhcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVTZWN0aW9uID09PSBfLmZpbmQodGhpcy5zZWN0aW9ucywgeyBoYW5kbGU6ICdzaWRlYmFyJyB9KS5pZDtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLmFjdGl2ZVNlY3Rpb24gPSB0aGlzLnNlY3Rpb25zWzBdLmlkO1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1ha2VTZWN0aW9uc1NvcnRhYmxlKCk7XG4gICAgICAgICAgICB0aGlzLm1ha2VGaWVsZHNTb3J0YWJsZSgpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgd2F0Y2g6IHtcblxuICAgICAgICBhY3RpdmVTZWN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy51cGRhdGVGaWVsZFdpZHRocygpKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBnZXRGaWVsZEJ5TmFtZShuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5maW5kKHRoaXMuZmllbGRzZXQuZmllbGRzLCB7IG5hbWUgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RmllbGRCeUlkKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5maW5kKHRoaXMuZmllbGRzZXQuZmllbGRzLCB7IGlkIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFNlY3Rpb25GaWVsZHMoaSkge1xuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHRoaXMuc2VjdGlvbnNbaV0uZmllbGRzLCBmaWVsZCA9PiB0aGlzLmdldEZpZWxkQnlJZChmaWVsZCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ha2VTZWN0aW9uc1NvcnRhYmxlKCkge1xuICAgICAgICAgICAgc29ydGFibGVTZWN0aW9ucyA9IG5ldyBTb3J0YWJsZSh0aGlzLiRlbHMudGFicywge1xuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogJy50YWInLFxuICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAsXG4gICAgICAgICAgICAgICAgbWlycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbkRpbWVuc2lvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjdXJzb3JPZmZzZXRYOiAwLFxuICAgICAgICAgICAgICAgICAgICB5QXhpczogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc29ydGFibGVTZWN0aW9ucy5vbignc29ydGFibGU6c3RhcnQnLCBlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNlY3Rpb24gPSB0aGlzLnNlY3Rpb25zW2Uuc3RhcnRJbmRleF0uaWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc29ydGFibGVTZWN0aW9ucy5vbignc29ydGFibGU6c3RvcCcsIGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnMuc3BsaWNlKGUubmV3SW5kZXgsIDAsIHRoaXMuc2VjdGlvbnMuc3BsaWNlKGUub2xkSW5kZXgsIDEpWzBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ha2VGaWVsZHNTb3J0YWJsZSgpIHtcbiAgICAgICAgICAgIHNvcnRhYmxlRmllbGRzID0gbmV3IFNvcnRhYmxlKHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yb290LWxldmVsLXNlY3Rpb24tZmllbGRzJyksIHtcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6ICcucm9vdC1sZXZlbC1zZWN0aW9uLWZpZWxkJyxcbiAgICAgICAgICAgICAgICBoYW5kbGU6ICcucm9vdC1sZXZlbC1kcmFnLWhhbmRsZScsXG4gICAgICAgICAgICAgICAgYXBwZW5kVG86IHRoaXMuJGVsLFxuICAgICAgICAgICAgICAgIG1pcnJvcjoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW5EaW1lbnNpb25zOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc29ydGFibGVGaWVsZHMub24oJ2RyYWc6c3RhcnQnLCBlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmdGaWVsZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc29ydGFibGVGaWVsZHMub24oJ3NvcnRhYmxlOnN0b3AnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZ0ZpZWxkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvbGRGaWVsZEluZGV4ID0gZS5vbGRJbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdGaWVsZEluZGV4ID0gZS5uZXdJbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRTZWN0aW9uSW5kZXggPSBfLmZpbmRJbmRleCh0aGlzLnNlY3Rpb25zLCB7IGlkOiBlLm9sZENvbnRhaW5lci5wYXJlbnRFbGVtZW50Ll9fdnVlX18uc2VjdGlvbi5pZCB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTZWN0aW9uSW5kZXggPSBfLmZpbmRJbmRleCh0aGlzLnNlY3Rpb25zLCB7IGlkOiBlLm5ld0NvbnRhaW5lci5wYXJlbnRFbGVtZW50Ll9fdnVlX18uc2VjdGlvbi5pZCB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuc2VjdGlvbnNbb2xkU2VjdGlvbkluZGV4XS5maWVsZHNbb2xkRmllbGRJbmRleF07XG5cbiAgICAgICAgICAgICAgICBpZiAob2xkU2VjdGlvbkluZGV4ID09PSBuZXdTZWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpZWxkcyA9IHRoaXMuc2VjdGlvbnNbbmV3U2VjdGlvbkluZGV4XS5maWVsZHNcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzLnNwbGljZShuZXdGaWVsZEluZGV4LCAwLCBmaWVsZHMuc3BsaWNlKG9sZEZpZWxkSW5kZXgsIDEpWzBdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zW25ld1NlY3Rpb25JbmRleF0uZmllbGRzLnNwbGljZShuZXdGaWVsZEluZGV4LCAwLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbb2xkU2VjdGlvbkluZGV4XS5maWVsZHMuc3BsaWNlKG9sZEZpZWxkSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JvbGxwb3MgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zZWN0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZUZpZWxkcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZUZpZWxkc1NvcnRhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIHNjcm9sbHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLnVwZGF0ZUZpZWxkV2lkdGhzKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFNlY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuc2VjdGlvbnMubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIGNvbnN0IHNlY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ1NlY3Rpb24gJyArIGNvdW50LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogJ3NlY3Rpb25fJyArIGNvdW50LFxuICAgICAgICAgICAgICAgIGlkOiAnc2VjdGlvbl8nICsgY291bnQsXG4gICAgICAgICAgICAgICAgZmllbGRzOiBbXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5zZWN0aW9ucy5wdXNoKHNlY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVTZWN0aW9uID0gc2VjdGlvbi5pZDtcblxuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLnNlY3Rpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgc29ydGFibGVTZWN0aW9ucy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlU2VjdGlvbnNTb3J0YWJsZSgpO1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlRmllbGRzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VGaWVsZHNTb3J0YWJsZSgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kcmVmcy5zZWN0aW9uc1tpXS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlU2VjdGlvbihpKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IGRlbGV0aW5nIHRoZSBsYXN0IHNlY3Rpb25cbiAgICAgICAgICAgIGlmIChpID09PSAwICYmIHRoaXMuc2VjdGlvbnMubGVuZ3RoID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIFB1dCBvcnBoYW5lZCBmaWVsZHMgaW50byB0aGUgZmlyc3Qgc2VjdGlvbi5cbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaSA9PT0gMCA/IDEgOiAwOyAvLyBJZiB3ZSdyZSBkZWxldGluZyB0aGUgZmlyc3Qgc2VjdGlvbiwgcHV0IGl0IGluIHRoZSBzZWNvbmQuXG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zW25ld0luZGV4XS5maWVsZHMuc3BsaWNlKHRoaXMuc2VjdGlvbnNbbmV3SW5kZXhdLmZpZWxkcy5sZW5ndGgsIDAsIC4uLnRoaXMuc2VjdGlvbnNbaV0uZmllbGRzKTtcblxuICAgICAgICAgICAgLy8gRGVsZXRlIGl0LlxuICAgICAgICAgICAgdGhpcy5zZWN0aW9ucy5zcGxpY2UoaSwgMSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU2VjdGlvbiA9IHRoaXMuc2VjdGlvbnNbbmV3SW5kZXhdLmlkO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFNlY3Rpb25Db21wb25lbnRCeUhhbmRsZShoYW5kbGUpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGUgPT09ICdzaWRlYmFyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRyZWZzLnNpZGViYXJTZWN0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9ICBfLmZpbmRJbmRleCh0aGlzLnNlY3Rpb25zLCB7IGhhbmRsZSB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRyZWZzLnNlY3Rpb25zW2luZGV4XTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVOZXdGaWVsZChmaWVsZHR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkc0xlbmd0aCA9IHRoaXMuZmllbGRzZXQuZmllbGRzLmxlbmd0aCB8fCAwO1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSBmaWVsZHNMZW5ndGggKyAxO1xuXG4gICAgICAgICAgICBjb25zdCB0bXAgPSBfLmZpbmRXaGVyZSh0aGlzLmZpZWxkdHlwZXMsIHsgbmFtZTogZmllbGR0eXBlIH0pO1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gJC5leHRlbmQoe30sIHRtcCk7XG5cbiAgICAgICAgICAgIGZpZWxkLnR5cGUgPSBmaWVsZC5uYW1lO1xuICAgICAgICAgICAgZmllbGQubmFtZSA9ICdmaWVsZF8nICsgY291bnQ7XG4gICAgICAgICAgICBmaWVsZC5pZCA9ICdmaWVsZF8nICsgY291bnQ7XG4gICAgICAgICAgICBmaWVsZC5kaXNwbGF5ID0gJ0ZpZWxkICcgKyBjb3VudDtcbiAgICAgICAgICAgIGZpZWxkLmluc3RydWN0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICBmaWVsZC5sb2NhbGl6YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgZmllbGQud2lkdGggPSAxMDA7XG4gICAgICAgICAgICBmaWVsZC5pc05ldyA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGUgZmllbGQuY29uZmlnO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmxhYmVsO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmNhbkJlVmFsaWRhdGVkO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmNhbkJlTG9jYWxpemVkO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmNhbkhhdmVEZWZhdWx0O1xuXG4gICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaG92ZXJlZEludG9UYWIoc2VjdGlvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZ0ZpZWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTZWN0aW9uID0gc2VjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVGaWVsZFdpZHRocygpIHtcbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLiRyZWZzLnNlY3Rpb25zLCBjb21wb25lbnQgPT4gY29tcG9uZW50LnVwZGF0ZUZpZWxkV2lkdGhzKCkpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFNlY3Rpb25CdWlsZGVyLnZ1ZT85YjY2Njk0MiIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NlY3Rpb24udnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TZWN0aW9uLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZWN0aW9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1sYXlvdXRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24taGVhZGVyIHAtMyBib3JkZXItYlwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5zZWN0aW9uX2xhYmVsJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwic2VjdGlvbi1kaXNwbGF5IGZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJzZWN0aW9uLmRpc3BsYXlcIiB2LWVsOmRpc3BsYXkgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1yLXNtXCI+e3sgdHJhbnNsYXRlKCdjcC5zZWN0aW9uX2hhbmRsZScpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1pbmZvIHRleHQteHhzIG9wYWNpdHktMjUgaG92ZXI6b3BhY2l0eS03NVwiIHYtdGlwIDp0aXAtdGV4dD1cInRyYW5zbGF0ZSgnY3Auc2VjdGlvbl9oYW5kbGVfdGlwJylcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInNlY3Rpb24taGFuZGxlIGZvcm0tY29udHJvbCBtb25vXCIgdi1tb2RlbD1cInNlY3Rpb24uaGFuZGxlXCIgQGtleWRvd249XCJoYW5kbGVNb2RpZmllZCA9IHRydWVcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJweC0zXCI+XG4gICAgICAgICAgICA8aDI+RmllbGRzPC9oMj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGZpZWxkc2V0LWZpZWxkc1xuICAgICAgICAgICAgdi1yZWY6ZmllbGRzXG4gICAgICAgICAgICA6ZmllbGRzLnN5bmM9XCJzZWN0aW9uLmZpZWxkc1wiXG4gICAgICAgICAgICA6c2VjdGlvbj1cInNlY3Rpb25cIlxuICAgICAgICAgICAgOmZpZWxkdHlwZXM9XCJmaWVsZHR5cGVzXCJcbiAgICAgICAgICAgIDppcy1hZGRpbmc9XCJpc0FkZGluZ0ZpZWxkXCJcbiAgICAgICAgICAgIDppcy1xdWljay1hZGRpbmc9XCJpc1F1aWNrQWRkaW5nRmllbGRcIlxuICAgICAgICAgICAgQHNlbGVjdG9yLWNsb3NlZD1cImZpZWxkU2VsZWN0b3JDbG9zZWRcIlxuICAgICAgICAgICAgQHVwZGF0ZWQ9XCJmaWVsZHNVcGRhdGVkXCJcbiAgICAgICAgICAgIGNsYXNzZXM9XCJyb290LWxldmVsLXNlY3Rpb24tZmllbGRzIHB4LTJcIlxuICAgICAgICA+PC9maWVsZHNldC1maWVsZHM+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInAtMyBib3JkZXItdFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtci0xXCIgQGNsaWNrLnByZXZlbnQ9XCJhZGRGaWVsZFwiPnt7IHRyYW5zbGF0ZSgnY3AuYWRkX2ZpZWxkJykgfX08L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBAY2xpY2sucHJldmVudD1cInF1aWNrQWRkRmllbGRcIj57eyB0cmFuc2xhdGUoJ2NwLnF1aWNrX2FkZCcpIH19PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbXG4gICAgICAgICdmaWVsZHR5cGVzJyxcbiAgICAgICAgJ3NlY3Rpb24nXG4gICAgXSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0FkZGluZ0ZpZWxkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzUXVpY2tBZGRpbmdGaWVsZDogZmFsc2UsXG4gICAgICAgICAgICBoYW5kbGVNb2RpZmllZDogIVJlZ0V4cCgvXnNlY3Rpb25fXFxkKy8pLnRlc3QodGhpcy5zZWN0aW9uLmhhbmRsZSlcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGRpc3BsYXkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWN0aW9uLmRpc3BsYXk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuXG4gICAgICAgIGRpc3BsYXkodmFsKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFuZGxlTW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb24uaGFuZGxlID0gdGhpcy4kc2x1Z2lmeSh2YWwsICdfJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFuZGxlKGFmdGVyLCBiZWZvcmUpIHtcbiAgICAgICAgICAgIGlmIChiZWZvcmUgPT09IGFmdGVyKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmUgPT09ICdzaWRlYmFyJykge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ25vLWxvbmdlci1zaWRlYmFyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gJ3NpZGViYXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnYmVjYW1lLXNpZGViYXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMuJGVscy5kaXNwbGF5LnNlbGVjdCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkU2VsZWN0b3JDbG9zZWQoKSB7XG4gICAgICAgICAgICB0aGlzLmlzQWRkaW5nRmllbGQgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVGaWVsZFdpZHRocygpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmllbGRzLnVwZGF0ZUZpZWxkV2lkdGhzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkRmllbGQoKSB7XG4gICAgICAgICAgICB0aGlzLmlzQWRkaW5nRmllbGQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc1F1aWNrQWRkaW5nRmllbGQgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBxdWlja0FkZEZpZWxkKCkge1xuICAgICAgICAgICAgdGhpcy5hZGRGaWVsZCgpO1xuICAgICAgICAgICAgdGhpcy5pc1F1aWNrQWRkaW5nRmllbGQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFNlY3Rpb24udnVlPzIwNzNjOGQ2IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXNlY3Rpb24tbGF5b3V0PiA8ZGl2IGNsYXNzPVxcXCJzZWN0aW9uLWhlYWRlciBwLTMgYm9yZGVyLWJcXFwiPiA8ZGl2PiA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5zZWN0aW9uX2xhYmVsJykgfX08L2xhYmVsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPVxcXCJzZWN0aW9uLWRpc3BsYXkgZm9ybS1jb250cm9sXFxcIiB2LW1vZGVsPXNlY3Rpb24uZGlzcGxheSB2LWVsOmRpc3BsYXkvPiA8L2Rpdj4gPGRpdj4gPGxhYmVsIGNsYXNzPVxcXCJmbGV4IGp1c3RpZnktYmV0d2VlblxcXCI+IDxzcGFuIGNsYXNzPW1yLXNtPnt7IHRyYW5zbGF0ZSgnY3Auc2VjdGlvbl9oYW5kbGUnKSB9fTwvc3Bhbj4gPGkgY2xhc3M9XFxcImljb24gaWNvbi1pbmZvIHRleHQteHhzIG9wYWNpdHktMjUgaG92ZXI6b3BhY2l0eS03NVxcXCIgdi10aXAgOnRpcC10ZXh0PVxcXCJ0cmFuc2xhdGUoJ2NwLnNlY3Rpb25faGFuZGxlX3RpcCcpXFxcIj48L2k+IDwvbGFiZWw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9XFxcInNlY3Rpb24taGFuZGxlIGZvcm0tY29udHJvbCBtb25vXFxcIiB2LW1vZGVsPXNlY3Rpb24uaGFuZGxlIEBrZXlkb3duPVxcXCJoYW5kbGVNb2RpZmllZCA9IHRydWVcXFwiLz4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPXB4LTM+IDxoMj5GaWVsZHM8L2gyPiA8L2Rpdj4gPGZpZWxkc2V0LWZpZWxkcyB2LXJlZjpmaWVsZHMgOmZpZWxkcy5zeW5jPXNlY3Rpb24uZmllbGRzIDpzZWN0aW9uPXNlY3Rpb24gOmZpZWxkdHlwZXM9ZmllbGR0eXBlcyA6aXMtYWRkaW5nPWlzQWRkaW5nRmllbGQgOmlzLXF1aWNrLWFkZGluZz1pc1F1aWNrQWRkaW5nRmllbGQgQHNlbGVjdG9yLWNsb3NlZD1maWVsZFNlbGVjdG9yQ2xvc2VkIEB1cGRhdGVkPWZpZWxkc1VwZGF0ZWQgY2xhc3Nlcz1cXFwicm9vdC1sZXZlbC1zZWN0aW9uLWZpZWxkcyBweC0yXFxcIj48L2ZpZWxkc2V0LWZpZWxkcz4gPGRpdiBjbGFzcz1cXFwicC0zIGJvcmRlci10XFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IG1yLTFcXFwiIEBjbGljay5wcmV2ZW50PWFkZEZpZWxkPnt7IHRyYW5zbGF0ZSgnY3AuYWRkX2ZpZWxkJykgfX08L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBAY2xpY2sucHJldmVudD1xdWlja0FkZEZpZWxkPnt7IHRyYW5zbGF0ZSgnY3AucXVpY2tfYWRkJykgfX08L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvU2VjdGlvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDM0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9c2VjdGlvbi1idWlsZGVyIDpjbGFzcz1cXFwieyAnaXMtZHJhZ2dpbmctZmllbGQnOiBpc0RyYWdnaW5nRmllbGQgfVxcXCI+IDxkaXYgY2xhc3M9dGFicy1vdXRlcj4gPGRpdiBjbGFzcz10YWJzIHYtZWw6dGFicz4gPGEgaHJlZj1cXFwiXFxcIiB2LWZvcj1cXFwiKGksIHNlY3Rpb24pIGluIHNlY3Rpb25zXFxcIiA6Y2xhc3M9XFxcIlsndGFiJywgeyAnYWN0aXZlJzogYWN0aXZlU2VjdGlvbiA9PT0gc2VjdGlvbi5pZCB9XVxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcImFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9uLmlkXFxcIiBAbW91c2VlbnRlcj1ob3ZlcmVkSW50b1RhYihzZWN0aW9uLmlkKT4ge3sgc2VjdGlvbi5kaXNwbGF5IH19IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY3Jvc3Mgc2VjdGlvbi1kZWxldGUgb3BhY2l0eS0yNSBob3ZlcjpvcGFjaXR5LTc1XFxcIiBAY2xpY2sucHJldmVudD1kZWxldGVTZWN0aW9uKGkpIHYtaWY9XFxcInNlY3Rpb25zLmxlbmd0aCA+IDFcXFwiPjwvc3Bhbj4gPC9hPiA8L2Rpdj4gPGJ1dHRvbiBAY2xpY2sucHJldmVudD1hZGRTZWN0aW9uIGNsYXNzPVxcXCJweS0xIHB4LTIgb3BhY2l0eS01MCBob3ZlcjpvcGFjaXR5LTEwMFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tcGx1c1xcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9c2VjdGlvbnMtY29udGFpbmVyIDpjbGFzcz1cXFwieyAnaGFzLXNpZGViYXInOiBoYXNTaWRlYmFyLCAnZWRpdGluZy1zaWRlYmFyJzogZWRpdGluZ1NpZGViYXIgfVxcXCI+IDxzZWN0aW9ucy1zZWN0aW9uIHYtZm9yPVxcXCIoaSwgc2VjdGlvbikgaW4gc2VjdGlvbnNcXFwiIHYtc2hvdz1cXFwiYWN0aXZlU2VjdGlvbiA9PT0gc2VjdGlvbi5pZFxcXCIgdi1yZWY6c2VjdGlvbnMgOnNlY3Rpb24uc3luYz1zZWN0aW9uIDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgOmlzLW9ubHktc2VjdGlvbj1cXFwic2VjdGlvbnMubGVuZ3RoID09PSAxXFxcIiBAZmllbGQtYWRkZWQ9YWRkRmllbGQgQGRlbGV0ZWQ9ZGVsZXRlU2VjdGlvbihpKSBAZmllbGRzLXNvcnRlZD1maWVsZHNTb3J0ZWQ+PC9zZWN0aW9ucy1zZWN0aW9uPiA8ZGl2IGNsYXNzPW90aGVyLXNlY3Rpb24tcGxhY2Vob2xkZXIgdi1pZj1oYXNTaWRlYmFyIHYtdGV4dD1cXFwiZWRpdGluZ1NpZGViYXIgPyB0cmFuc2xhdGVfY2hvaWNlKCdjcC5zZWN0aW9ucycsIDIpIDogc2lkZWJhclNlY3Rpb25MYWJlbFxcXCI+PC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL1NlY3Rpb25CdWlsZGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdj4gPGRpdiBjbGFzcz1cXFwiZmxleHkgbWItMyBzdGlja3lcXFwiPiA8aDEgY2xhc3M9ZmlsbCB2LWlmPWNyZWF0ZT4ge3sgdHJhbnNsYXRlKCdjcC5jcmVhdGVfZmllbGRzZXQnKSB9fSA8L2gxPiA8aDEgY2xhc3M9ZmlsbCB2LWVsc2U+IHt7IHRyYW5zbGF0ZSgnY3AuZWRpdGluZ19maWVsZHNldCcpIH19OiA8c3Ryb25nPnt7IGZpZWxkc2V0VGl0bGUgfX08L3N0cm9uZz4gPC9oMT4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiB2LW9uOmNsaWNrPXNhdmUoKSA6ZGlzYWJsZWQ9IWNhblNhdmU+e3sgdHJhbnNsYXRlKCdjcC5zYXZlJykgfX08L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9cHgtMz4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIiB2LWlmPWhhc0Vycm9ycz4gPHVsPiA8bGkgdi1mb3I9XFxcImVycm9yIGluIGVycm9yc1xcXCI+e3sgZXJyb3IgfX08L2xpPiA8L3VsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY2FyZCBwLTBcXFwiPiA8ZGl2IHYtaWY9XFxcImxvYWRpbmcgJiYgIWVycm9yTWVzc2FnZVxcXCIgY2xhc3M9bG9hZGluZz4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fSA8L2Rpdj4gPGRpdiB2LWlmPWVycm9yTWVzc2FnZSBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyXFxcIj4gPHA+e3sgZXJyb3JNZXNzYWdlIH19PC9wPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZmllbGRzZXQtYnVpbGRlciBmbGV4IGZsZXgtd3JhcFxcXCIgdi1pZj1cXFwiISBsb2FkaW5nXFxcIj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbWItMCB3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgYm9yZGVyLWJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ3LTIvMyBwci0yXFxcIj4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AudGl0bGUnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1cXFwiaGVscC1ibG9jayBtYi0wXFxcIj57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkc2V0X3RpdGxlX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInctMS8zIGZsZXgganVzdGlmeS1lbmRcXFwiPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWZpZWxkc2V0LnRpdGxlIGF1dG9mb2N1cz1hdXRvZm9jdXMgLz4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHAtMiBtYi0wIHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBib3JkZXItYlxcXCIgdi1pZj1jcmVhdGU+IDxkaXYgY2xhc3M9XFxcInctMi8zIHByLTJcXFwiPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5oYW5kbGUnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1cXFwiaGVscC1ibG9jayBtYi0wXFxcIj57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkc2V0X2hhbmRsZV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ3LTEvMyBmbGV4IGp1c3RpZnktZW5kXFxcIj4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1zbHVnIC8+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbWItMCB3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgYm9yZGVyLWJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ3LTIvMyBwci0yXFxcIj4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRlX3RpdGxlJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9XFxcImhlbHAtYmxvY2sgbWItMFxcXCI+e3sgdHJhbnNsYXRlKCdjcC5maWVsZHNldF9jcmVhdGVfdGl0bGVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwidy0xLzMgZmxleCBqdXN0aWZ5LWVuZFxcXCI+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9ZmllbGRzZXQuY3JlYXRlX3RpdGxlIC8+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbWItMCB3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgYm9yZGVyLWJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ3LTIvMyBwci0yXFxcIj4gPGxhYmVsIGNsYXNzPWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuaGlkZScpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPVxcXCJoZWxwLWJsb2NrIG1iLTBcXFwiPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRzZXRfaGlkZV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ3LTEvMyBmbGV4IGp1c3RpZnktZW5kXFxcIj4gPHRvZ2dsZS1maWVsZHR5cGUgOmRhdGEuc3luYz1maWVsZHNldC5oaWRlPjwvdG9nZ2xlLWZpZWxkdHlwZT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHAtMiBtYi0wIHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlclxcXCI+IDxkaXYgY2xhc3M9XFxcInctMi8zIHByLTJcXFwiPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5hcHBlbmRfdGF4b25vbWllcycpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPVxcXCJoZWxwLWJsb2NrIG1iLTBcXFwiPnt7IHRyYW5zbGF0ZSgnY3AuYXBwZW5kX3RheG9ub21pZXNfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwidy0xLzMgZmxleCBqdXN0aWZ5LWVuZFxcXCI+IDx0b2dnbGUtZmllbGR0eXBlIDpkYXRhLnN5bmM9ZmllbGRzZXQudGF4b25vbWllcz48L3RvZ2dsZS1maWVsZHR5cGU+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ0ZXh0LWNlbnRlciBsaXR0bGUtaGVhZGluZyBteC0xIG9wYWNpdHktNTBcXFwiPnt7IHRyYW5zbGF0ZSgnY3Auc2VjdGlvbnNfYW5kX2ZpZWxkcycpIH19PC9kaXY+IDxzZWN0aW9uLWJ1aWxkZXIgdi1pZj0hbG9hZGluZyB2LXJlZjpzZWN0aW9uLWJ1aWxkZXIgOmZpZWxkdHlwZXM9ZmllbGR0eXBlcyA6c2VjdGlvbnMuc3luYz1maWVsZHNldC5zZWN0aW9ucz4gPC9zZWN0aW9uLWJ1aWxkZXI+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL0J1aWxkZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAzNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vUGFnZVRyZWUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvUGFnZVRyZWUudnVlXG4vLyBtb2R1bGUgaWQgPSAzNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHNjcmlwdD5cbmltcG9ydCBCcmFuY2ggZnJvbSAnLi9CcmFuY2gudnVlJztcbmltcG9ydCBCcmFuY2hlcyBmcm9tICcuL0JyYW5jaGVzLnZ1ZSc7XG5pbXBvcnQgQ3JlYXRlUGFnZSBmcm9tICcuL0NyZWF0ZVBhZ2UudnVlJztcbmltcG9ydCBNb3VudENvbGxlY3Rpb24gZnJvbSAnLi9Nb3VudENvbGxlY3Rpb24udnVlJztcbmltcG9ydCBIYXNMb2NhbGVTZWxlY3RvciBmcm9tICcuLi9IYXNMb2NhbGVTZWxlY3Rvcic7XG5pbXBvcnQgSGFzU2hvd0RyYWZ0c1NlbGVjdG9yIGZyb20gJy4uL0hhc1Nob3dEcmFmdHNTZWxlY3Rvcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0hhc1Nob3dEcmFmdHNTZWxlY3RvciwgSGFzTG9jYWxlU2VsZWN0b3JdLFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBCcmFuY2hlcyxcbiAgICAgICAgQnJhbmNoLFxuICAgICAgICBDcmVhdGVQYWdlLFxuICAgICAgICBNb3VudENvbGxlY3Rpb24sXG4gICAgfSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHNhdmluZzogZmFsc2UsXG4gICAgICAgICAgICBjaGFuZ2VkOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dVcmxzOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3c6IFwidXJsc1wiLFxuICAgICAgICAgICAgcGFnZXM6IFtdLFxuICAgICAgICAgICAgYXJlUGFnZXM6IHRydWVcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGhvbWVFZGl0VXJsKCkge1xuICAgICAgICAgICAgbGV0IHVybCA9IGNwX3VybCgncGFnZXMvZWRpdCcpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhbGUgIT09IE9iamVjdC5rZXlzKFN0YXRhbWljLmxvY2FsZXMpWzBdKSB7XG4gICAgICAgICAgICAgICAgdXJsICs9ICc/bG9jYWxlPScgKyB0aGlzLmxvY2FsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNDaGlsZHJlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfLnNvbWUodGhpcy5wYWdlcywgcGFnZSA9PiBwYWdlLml0ZW1zLmxlbmd0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNTb3J0YWJsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBWdWUuY2FuKCdwYWdlczpyZW9yZGVyJyk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZ2V0UGFnZXMoKTtcbiAgICAgICAgdGhpcy5iaW5kTG9jYWxlV2F0Y2hlcigpO1xuICAgICAgICB0aGlzLmJpbmRTaG93RHJhZnRzV2F0Y2hlcigpO1xuICAgICAgICBNb3VzZXRyYXAuYmluZEdsb2JhbCgnbW9kK3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZ2V0UGFnZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wYWdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBjcF91cmwoJy9wYWdlcy9nZXQ/bG9jYWxlPScrdGhpcy5sb2NhbGUrJyZkcmFmdHM9JysodGhpcy5zaG93RHJhZnRzID8gMSA6IDApKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQodXJsLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmVQYWdlcyA9IGRhdGEucGFnZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VzID0gZGF0YS5wYWdlcztcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRTb3J0YWJsZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFNvcnRhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuaXNTb3J0YWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRyYWdnZWRJbmRleCwgZHJhZ2dlZFBhZ2UsIGRyYWdnZWRJbnN0YW5jZTtcblxuICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gJycgK1xuICAgICAgICAgICAgICAgICAgICAnPGxpIGNsYXNzPVwiYnJhbmNoIGJyYW5jaC1wbGFjZWhvbGRlclwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJicmFuY2gtcm93IHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBkZXB0aC17eyBkZXB0aCB9fVwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicGFnZS1tb3ZlIGRyYWctaGFuZGxlIHctNiBoLWZ1bGxcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZsZXggcC0xIGl0ZW1zLWNlbnRlciBmbGV4LTFcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJwYWdlLXRleHRcIj4mbmJzcDs8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L2xpPic7XG5cbiAgICAgICAgICAgICQodGhpcy4kZWwpLmZpbmQoJy5wYWdlLXRyZWUgPiB1bCArIHVsJykubmVzdGVkU29ydGFibGUoe1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lclNlbGVjdG9yOiAndWwnLFxuICAgICAgICAgICAgICAgIGhhbmRsZTogJy5kcmFnLWhhbmRsZScsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJDbGFzczogJ2JyYW5jaC1wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIGJvZHlDbGFzczogJ3BhZ2UtdHJlZS1kcmFnZ2luZycsXG4gICAgICAgICAgICAgICAgZHJhZ2dlZENsYXNzOiAnYnJhbmNoLWRyYWdnZWQnLFxuICAgICAgICAgICAgICAgIG9uTW91c2Vkb3duOiBmdW5jdGlvbiAoJGl0ZW0sIF9zdXBlciwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBkcmFnZ2luZyBhIGxvbmUgdG9wIGxldmVsIHBhZ2UuXG4gICAgICAgICAgICAgICAgICAgIHZhciBicmFuY2ggPSAkaXRlbVswXS5fX3Z1ZV9fO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwdGggPSBwYXJzZUludCgkaXRlbVswXS5kYXRhc2V0LmRlcHRoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJyYW5jaC4kcGFyZW50LnBhZ2VzLmxlbmd0aCA9PT0gMSAmJiBkZXB0aCA9PT0gMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbigkaXRlbSwgY29udGFpbmVyLCBfc3VwZXIsIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdyYWIgdGhlIG9yaWdpbmFsIHBhZ2Ugd2UncmUgZHJhZ2dpbmcgbm93IHNvIHdlIGNhbiBtb3ZlIGl0IGxhdGVyLlxuICAgICAgICAgICAgICAgICAgICB2YXIgYnJhbmNoID0gJGl0ZW1bMF0uX192dWVfXztcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dlZEluc3RhbmNlID0gYnJhbmNoO1xuICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkSW5kZXggPSBicmFuY2guYnJhbmNoSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGRyYWdnZWRQYWdlID0gYnJhbmNoLiRwYXJlbnQucGFnZXNbZHJhZ2dlZEluZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBMZXQgdGhlIHBsdWdpbiBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICBfc3VwZXIoJGl0ZW0sIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkRyYWc6IGZ1bmN0aW9uKCRpdGVtLCBjb250YWluZXIsIF9zdXBlciwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwbGFjZWhvbGRlciB0ZW1wbGF0ZSB0byBzaG93IHRoZSBwYWdlIG5hbWUuXG4gICAgICAgICAgICAgICAgICAgICQoJy5icmFuY2gtcGxhY2Vob2xkZXInKS5maW5kKCcucGFnZS10ZXh0JykudGV4dChkcmFnZ2VkUGFnZS50aXRsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9zdXBlcigkaXRlbSwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRHJvcDogZnVuY3Rpb24oJGl0ZW0sIGNvbnRhaW5lciwgX3N1cGVyLCBldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLiRlbHMuY2xpY2sucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYW5nZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcGFnZSBmcm9tIGl0cyBvcmlnaW5hbCBwbGFjZVxuICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkSW5zdGFuY2UuJHBhcmVudC5wYWdlcy5zcGxpY2UoZHJhZ2dlZEluZGV4LCAxKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGRyb3AgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyb3BJbmRleCA9ICRpdGVtLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9ICRpdGVtLnBhcmVudCgpWzBdLl9fdnVlX187XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwYWdlIHRvIHVzZSB0aGUgbmV3IHBhcmVudCdzIHVybCAocmVjdXJzaXZlbHkpXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnZWRQYWdlID0gc2VsZi51cGRhdGVEcm9wcGVkVXJsKGRyYWdnZWRQYWdlLCBwYXJlbnRJbnN0YW5jZS4kcGFyZW50LnVybCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBuZXcgcGFnZSdzIHBvc2l0aW9uIGFuZCBpbmplY3QgaXQgaW50byB0aGUgZGF0YVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJbnN0YW5jZS5wYWdlcy5zcGxpY2UoZHJvcEluZGV4LCAwLCBkcmFnZ2VkUGFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2UgdGhlIFZ1ZSBjb21wb25lbnQgdG8gcmVsb2FkIGl0c2VsZlxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZXMgPSBzZWxmLnBhZ2VzO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnBhZ2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuJG5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wYWdlcyA9IHBhZ2VzO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBMZXQgdGhlIHBsdWdpbiBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICBfc3VwZXIoJGl0ZW0sIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlRHJvcHBlZFVybDogZnVuY3Rpb24ocGFnZSwgdXJsKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHVybCA9IHVybCB8fCAnJztcblxuICAgICAgICAgICAgcGFnZS51cmwgPSB1cmwgKyAnLycgKyBwYWdlLnNsdWc7XG5cbiAgICAgICAgICAgIHBhZ2UuaXRlbXMgPSBfLm1hcChwYWdlLml0ZW1zLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnVwZGF0ZURyb3BwZWRVcmwoY2hpbGQsIHBhZ2UudXJsKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgICAgfSxcblxuICAgICAgICBleHBhbmRBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZWxzLmNhcmRfc2V0LnBsYXkoKTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQWxsKGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb2xsYXBzZUFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRlbHMuY2FyZF9kcm9wLnBsYXkoKTtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQWxsKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvZ2dsZUFsbDogZnVuY3Rpb24oY29sbGFwc2VkLCBwYWdlcykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBwYWdlcyA9IHBhZ2VzIHx8IHNlbGYucGFnZXM7XG5cbiAgICAgICAgICAgIF8uZWFjaChwYWdlcywgZnVuY3Rpb24ocGFnZSkge1xuICAgICAgICAgICAgICAgIFZ1ZS5zZXQocGFnZSwgJ2NvbGxhcHNlZCcsIGNvbGxhcHNlZCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2UuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudG9nZ2xlQWxsKGNvbGxhcHNlZCwgcGFnZS5pdGVtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlVXJsczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dVcmxzID0gIXRoaXMuc2hvd1VybHM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dVcmxzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gXCJ0aXRsZXNcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gXCJ1cmxzXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHNlbGYuc2F2aW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFyIHBhZ2VzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzZWxmLnBhZ2VzKSk7XG4gICAgICAgICAgICBwYWdlcyA9IHNlbGYudXBkYXRlT3JkZXJJbmRleGVzKHBhZ2VzKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnL3BhZ2VzJyksIHsgcGFnZXM6IHBhZ2VzIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHNlbGYuZ2V0UGFnZXMoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZWxmLnNhdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNlbGYuJGRpc3BhdGNoKCdzZXRGbGFzaFN1Y2Nlc3MnLCB0cmFuc2xhdGUoJ2NwLnBhZ2VzX3Jlb3JkZXJlZCcpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlT3JkZXJJbmRleGVzOiBmdW5jdGlvbihwYWdlcykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gXy5tYXAocGFnZXMsIGZ1bmN0aW9uKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBpdGVyYXRlIG92ZXIgYW55IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaXRlbXMgPSBzZWxmLnVwZGF0ZU9yZGVySW5kZXhlcyhpdGVtLml0ZW1zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRoZSAxLWJhc2VkIGluZGV4ZXNcbiAgICAgICAgICAgICAgICBpdGVtLm9yZGVyID0gaSArIDE7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVBhZ2U6IGZ1bmN0aW9uKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCdwYWdlcy5jcmVhdGUnLCBwYXJlbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uU2hvd0RyYWZ0c0NoYW5nZWQoKSB7XG4gICAgICAgICAgICB0aGlzLmdldFBhZ2VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25Mb2NhbGVDaGFuZ2VkKCkge1xuICAgICAgICAgICAgdGhpcy5nZXRQYWdlcygpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdwYWdlcy5jcmVhdGUnOiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuJGJyb2FkY2FzdCgncGFnZXMuY3JlYXRlJywgcGFyZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgJ3BhZ2VzLm1vdW50JzogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGJyb2FkY2FzdCgncGFnZXMubW91bnQnLCBpZCk7XG4gICAgICAgIH0sXG4gICAgICAgICdwYWdlcy51bm1vdW50JzogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJGJyb2FkY2FzdCgncGFnZXMudW5tb3VudCcsIGlkKTtcbiAgICAgICAgfSxcbiAgICAgICAgJ3BhZ2UuZGVsZXRlZCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQodGhpcy4kZWwpLmZpbmQoJy5wYWdlLXRyZWUgPiB1bCArIHVsJykubmVzdGVkU29ydGFibGUoJ2Rlc3Ryb3knKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICBjaGFuZ2VkKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjaGFuZ2VzTWFkZScsIGNoYW5nZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gUGFnZVRyZWUudnVlPzgxMWIxYWM4IiwiPHRlbXBsYXRlPlxuICAgIDxsaSBjbGFzcz1cImJyYW5jaFwiIDpjbGFzcz1cInsgZHJhZnQ6ICFwdWJsaXNoZWQgfVwiIDpkYXRhLWRlcHRoPVwiZGVwdGhcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJyYW5jaC1yb3cgdy1mdWxsIGZsZXggaXRlbXMtY2VudGVyXCI+XG5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImhvbWVcIiBjbGFzcz1cInctNiBob21lLWhhbmRsZVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWhvbWUgbXgtYXV0byBvcGFjaXR5LTI1XCI+PC9pPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cIiFob21lICYmIHNvcnRhYmxlXCIgOmNsYXNzPVwiWydwYWdlLW1vdmUgZHJhZy1oYW5kbGUgdy02IGgtZnVsbCcsIHsnY3Vyc29yLW5vdC1hbGxvd2VkIG9wYWNpdHktNTAnOiBpc1NpbmdsZVRvcExldmVsUGFnZX1dXCI+PC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBmbGV4LTEgcC0xXCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZS10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwiZWRpdFVybFwiIGNsYXNzPVwicGFnZS10aXRsZVwiPnt7IHRpdGxlIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8YSA6aHJlZj1cImVkaXRVcmxcIiBjbGFzcz1cInBhZ2UtdXJsXCI+e3sgdXJsIH19PC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctNiBvcGFjaXR5LTI1IGhvdmVyOm9wYWNpdHktNTAgcGFnZS10b2dnbGUtY29udGFpbmVyIG1sLXB4XCIgdi1pZj1cImhhc0NoaWxkcmVuXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwieydwYWdlLXRvZ2dsZSc6IHRydWUsIHRvZ2dsZWFibGU6IGhhc0NoaWxkcmVufVwiIHYtb246Y2xpY2s9XCJ0b2dnbGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIDpjbGFzcz1cInsgJ2ljb24nOiB0cnVlLCAnaWNvbi1jaGV2cm9uLWRvd24nOiB0cnVlLCAnY29sbGFwc2VkJzogY29sbGFwc2VkIH1cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhhcy1jb2xsZWN0aW9uIGZsZXggaXRlbXMtY2VudGVyIHBsLTJcIiB2LWlmPVwiaGFzRW50cmllc1wiPlxuICAgICAgICAgICAgICAgICAgICA8c3ZnLWljb24gbmFtZT1cImVudHJpZXNcIiBjbGFzcz1cInByLTEgdGV4dC1ncmV5IGgtNiB3LTZcIj48L3N2Zy1pY29uPlxuICAgICAgICAgICAgICAgICAgICA8YSA6aHJlZj1cImNyZWF0ZUVudHJ5VXJsXCI+e3sgdHJhbnNsYXRlKCdjcC5hZGQnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJteC1zbSB0ZXh0LWdyZXkgdGV4dC14eHNcIj57eyB0cmFuc2xhdGUoJ2NwLm9yJykgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwiZW50cmllc1VybFwiPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdCcpIH19PC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJicmFuY2gtbWV0YSBmbGV4IGl0ZW1zLWNlbnRlciBwci0xXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2UtYWN0aW9uc1wiIHYtaWY9XCJjYW4oJ3BhZ2VzOmNyZWF0ZScpIHx8IGNhbigncGFnZXM6ZGVsZXRlJylcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJ1cmxcIiA6dGl0bGU9XCJ1cmxcIiBjbGFzcz1cInBhZ2UtYWN0aW9uIHRleHQtZ3JleS1kYXJrIHB4LXNtIGJsb29wXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnLWljb24gbmFtZT1cInZpc2l0XCIgY2xhc3M9XCJvcGFjaXR5LTI1IGhvdmVyOm9wYWNpdHktNzUgaC00IHctNFwiPjwvc3ZnLWljb24+XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBwYWdlLWFjdGlvbiBhY3Rpb24tbW9yZSBweC1zbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tZG90cy10aHJlZS12ZXJ0aWNhbCBvcGFjaXR5LTI1IGhvdmVyOm9wYWNpdHktNzVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSB2LWlmPVwiY2FuKCdwYWdlczpjcmVhdGUnKVwiPjxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cImNyZWF0ZVBhZ2VcIj57eyB0cmFuc2xhdGUoJ2NwLmNyZWF0ZV9wYWdlX2J1dHRvbicpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJjYW4oJ3N1cGVyJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwibW91bnRDb2xsZWN0aW9uXCIgdi1pZj1cIiFoYXNFbnRyaWVzXCI+e3sgdHJhbnNsYXRlKCdjcC5tb3VudF9jb2xsZWN0aW9uJykgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cInVubW91bnRDb2xsZWN0aW9uXCIgdi1pZj1cImhhc0VudHJpZXNcIj57eyB0cmFuc2xhdGUoJ2NwLnVubW91bnRfY29sbGVjdGlvbicpIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJjYW4oJ3BhZ2VzOmNyZWF0ZScpXCI+PGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwiZHVwbGljYXRlUGFnZVwiPnt7IHRyYW5zbGF0ZSgnY3AuZHVwbGljYXRlJykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgdi1pZj1cImNhbigncGFnZXM6Y3JlYXRlJykgJiYgY2FuKCdwYWdlczpkZWxldGUnKVwiIGNsYXNzPVwiZGl2aWRlclwiPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJjYW4oJ3BhZ2VzOmRlbGV0ZScpXCIgY2xhc3M9XCJ3YXJuaW5nXCI+PGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwiZGVsZXRlUGFnZVwiPnt7IHRyYW5zbGF0ZSgnY3AuZGVsZXRlJykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxicmFuY2hlcyA6cGFnZXM9XCJjaGlsZFBhZ2VzXCJcbiAgICAgICAgICAgICAgICAgIDpkZXB0aD1cImRlcHRoICsgMVwiXG4gICAgICAgICAgICAgICAgICA6cGFyZW50LXVybD1cInVybFwiXG4gICAgICAgICAgICAgICAgICA6Y29sbGFwc2VkLnN5bmM9XCJjb2xsYXBzZWRcIlxuICAgICAgICAgICAgICAgICAgOnNvcnRhYmxlPVwic29ydGFibGVcIlxuICAgICAgICAgICAgICAgICAgdi1pZj1cIiFob21lXCI+XG4gICAgICAgIDwvYnJhbmNoZXM+XG4gICAgPC9saT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBicmFuY2hJbmRleDogTnVtYmVyLFxuICAgICAgICB1dWlkOiBTdHJpbmcsXG4gICAgICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgICAgIHVybDogU3RyaW5nLFxuICAgICAgICBwdWJsaXNoZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRVcmw6IFN0cmluZyxcbiAgICAgICAgaGFzRW50cmllczogQm9vbGVhbixcbiAgICAgICAgZW50cmllc1VybDogU3RyaW5nLFxuICAgICAgICBjcmVhdGVFbnRyeVVybDogU3RyaW5nLFxuICAgICAgICBjaGlsZFBhZ2VzOiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29sbGFwc2VkOiBCb29sZWFuLFxuICAgICAgICBkZXB0aDogTnVtYmVyLFxuICAgICAgICBob21lOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc29ydGFibGU6IEJvb2xlYW5cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBoYXNDaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZFBhZ2VzLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1NpbmdsZVRvcExldmVsUGFnZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQucGFnZXMubGVuZ3RoID09PSAxICYmIHRoaXMuZGVwdGggPT09IDE7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGFwc2VkID0gIXRoaXMuY29sbGFwc2VkO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVBhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3BhZ2VzLmNyZWF0ZScsIHRoaXMudXJsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVQYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbmZpcm1fZGVsZXRlX3BhZ2UnLCAxKSxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC55ZXNfaW1fc3VyZScpLFxuICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IHRyYW5zbGF0ZSgnY3AuY2FuY2VsJyksXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kaHR0cC5wb3N0KGNwX3VybCgncGFnZXMvZGVsZXRlJyksIHsgdXVpZDogc2VsZi51dWlkIH0pLnN1Y2Nlc3MoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuJHBhcmVudC5wYWdlcy5zcGxpY2Uoc2VsZi5icmFuY2hJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3BhZ2UuZGVsZXRlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZHVwbGljYXRlUGFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdwYWdlcy9kdXBsaWNhdGUnKSwgeyBpZDogdGhpcy51dWlkIH0pLnN1Y2Nlc3MoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkYXRhLnJlZGlyZWN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW91bnRDb2xsZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgncGFnZXMubW91bnQnLCB0aGlzLnV1aWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVubW91bnRDb2xsZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgncGFnZXMudW5tb3VudCcsIHRoaXMudXVpZCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEJyYW5jaC52dWU/NjY1YzkxZmMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxsaSBjbGFzcz1icmFuY2ggOmNsYXNzPVxcXCJ7IGRyYWZ0OiAhcHVibGlzaGVkIH1cXFwiIDpkYXRhLWRlcHRoPWRlcHRoPiA8ZGl2IGNsYXNzPVxcXCJicmFuY2gtcm93IHctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlclxcXCI+IDxkaXYgdi1pZj1ob21lIGNsYXNzPVxcXCJ3LTYgaG9tZS1oYW5kbGVcXFwiPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWhvbWUgbXgtYXV0byBvcGFjaXR5LTI1XFxcIj48L2k+IDwvZGl2PiA8ZGl2IHYtaWY9XFxcIiFob21lICYmIHNvcnRhYmxlXFxcIiA6Y2xhc3M9XFxcIlsncGFnZS1tb3ZlIGRyYWctaGFuZGxlIHctNiBoLWZ1bGwnLCB7J2N1cnNvci1ub3QtYWxsb3dlZCBvcGFjaXR5LTUwJzogaXNTaW5nbGVUb3BMZXZlbFBhZ2V9XVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcImZsZXggaXRlbXMtY2VudGVyIGZsZXgtMSBwLTFcXFwiPiA8ZGl2IGNsYXNzPXBhZ2UtdGV4dD4gPGEgOmhyZWY9ZWRpdFVybCBjbGFzcz1wYWdlLXRpdGxlPnt7IHRpdGxlIH19PC9hPiA8YSA6aHJlZj1lZGl0VXJsIGNsYXNzPXBhZ2UtdXJsPnt7IHVybCB9fTwvYT4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInctNiBvcGFjaXR5LTI1IGhvdmVyOm9wYWNpdHktNTAgcGFnZS10b2dnbGUtY29udGFpbmVyIG1sLXB4XFxcIiB2LWlmPWhhc0NoaWxkcmVuPiA8ZGl2IDpjbGFzcz1cXFwieydwYWdlLXRvZ2dsZSc6IHRydWUsIHRvZ2dsZWFibGU6IGhhc0NoaWxkcmVufVxcXCIgdi1vbjpjbGljaz10b2dnbGU+IDxpIDpjbGFzcz1cXFwieyAnaWNvbic6IHRydWUsICdpY29uLWNoZXZyb24tZG93bic6IHRydWUsICdjb2xsYXBzZWQnOiBjb2xsYXBzZWQgfVxcXCI+PC9pPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImhhcy1jb2xsZWN0aW9uIGZsZXggaXRlbXMtY2VudGVyIHBsLTJcXFwiIHYtaWY9aGFzRW50cmllcz4gPHN2Zy1pY29uIG5hbWU9ZW50cmllcyBjbGFzcz1cXFwicHItMSB0ZXh0LWdyZXkgaC02IHctNlxcXCI+PC9zdmctaWNvbj4gPGEgOmhyZWY9Y3JlYXRlRW50cnlVcmw+e3sgdHJhbnNsYXRlKCdjcC5hZGQnKSB9fTwvYT4gPHNwYW4gY2xhc3M9XFxcIm14LXNtIHRleHQtZ3JleSB0ZXh0LXh4c1xcXCI+e3sgdHJhbnNsYXRlKCdjcC5vcicpIH19PC9zcGFuPiA8YSA6aHJlZj1lbnRyaWVzVXJsPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdCcpIH19PC9hPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5jaC1tZXRhIGZsZXggaXRlbXMtY2VudGVyIHByLTFcXFwiPiA8ZGl2IGNsYXNzPXBhZ2UtYWN0aW9ucyB2LWlmPVxcXCJjYW4oJ3BhZ2VzOmNyZWF0ZScpIHx8IGNhbigncGFnZXM6ZGVsZXRlJylcXFwiPiA8YSA6aHJlZj11cmwgOnRpdGxlPXVybCBjbGFzcz1cXFwicGFnZS1hY3Rpb24gdGV4dC1ncmV5LWRhcmsgcHgtc20gYmxvb3BcXFwiIHRhcmdldD1fYmxhbms+IDxzdmctaWNvbiBuYW1lPXZpc2l0IGNsYXNzPVxcXCJvcGFjaXR5LTI1IGhvdmVyOm9wYWNpdHktNzUgaC00IHctNFxcXCI+PC9zdmctaWNvbj4gPC9hPiA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgcGFnZS1hY3Rpb24gYWN0aW9uLW1vcmUgcHgtc21cXFwiPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWRvdHMtdGhyZWUtdmVydGljYWwgb3BhY2l0eS0yNSBob3ZlcjpvcGFjaXR5LTc1XFxcIiBkYXRhLXRvZ2dsZT1kcm9wZG93bj48L2k+IDx1bCBjbGFzcz1kcm9wZG93bi1tZW51PiA8bGkgdi1pZj1cXFwiY2FuKCdwYWdlczpjcmVhdGUnKVxcXCI+PGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1jcmVhdGVQYWdlPnt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRlX3BhZ2VfYnV0dG9uJykgfX08L2E+PC9saT4gPGxpIHYtaWY9XFxcImNhbignc3VwZXInKVxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9bW91bnRDb2xsZWN0aW9uIHYtaWY9IWhhc0VudHJpZXM+e3sgdHJhbnNsYXRlKCdjcC5tb3VudF9jb2xsZWN0aW9uJykgfX08L2E+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9dW5tb3VudENvbGxlY3Rpb24gdi1pZj1oYXNFbnRyaWVzPnt7IHRyYW5zbGF0ZSgnY3AudW5tb3VudF9jb2xsZWN0aW9uJykgfX08L2E+IDwvbGk+IDxsaSB2LWlmPVxcXCJjYW4oJ3BhZ2VzOmNyZWF0ZScpXFxcIj48YSBocmVmPVxcXCJcXFwiIEBjbGljay5wcmV2ZW50PWR1cGxpY2F0ZVBhZ2U+e3sgdHJhbnNsYXRlKCdjcC5kdXBsaWNhdGUnKSB9fTwvYT48L2xpPiA8bGkgdi1pZj1cXFwiY2FuKCdwYWdlczpjcmVhdGUnKSAmJiBjYW4oJ3BhZ2VzOmRlbGV0ZScpXFxcIiBjbGFzcz1kaXZpZGVyPjwvbGk+IDxsaSB2LWlmPVxcXCJjYW4oJ3BhZ2VzOmRlbGV0ZScpXFxcIiBjbGFzcz13YXJuaW5nPjxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9ZGVsZXRlUGFnZT57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19PC9hPjwvbGk+IDwvdWw+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8YnJhbmNoZXMgOnBhZ2VzPWNoaWxkUGFnZXMgOmRlcHRoPVxcXCJkZXB0aCArIDFcXFwiIDpwYXJlbnQtdXJsPXVybCA6Y29sbGFwc2VkLnN5bmM9Y29sbGFwc2VkIDpzb3J0YWJsZT1zb3J0YWJsZSB2LWlmPSFob21lPiA8L2JyYW5jaGVzPiA8L2xpPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2UtdHJlZS9CcmFuY2gudnVlXG4vLyBtb2R1bGUgaWQgPSAzNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDx1bCA6Y2xhc3M9XCJjbGFzc2VzXCI+XG4gICAgICAgIDxicmFuY2ggdi1mb3I9XCJwYWdlIGluIHBhZ2VzXCJcbiAgICAgICAgICAgICAgICA6YnJhbmNoLWluZGV4PVwiJGluZGV4XCJcbiAgICAgICAgICAgICAgICA6dXVpZD1cInBhZ2UuaWRcIlxuICAgICAgICAgICAgICAgIDp0aXRsZT1cInBhZ2UudGl0bGUgfHwgcGFnZS5zbHVnXCJcbiAgICAgICAgICAgICAgICA6dXJsPVwiYnVpbGRVcmwocGFnZS5zbHVnKVwiXG4gICAgICAgICAgICAgICAgOnB1Ymxpc2hlZD1cInBhZ2UucHVibGlzaGVkXCJcbiAgICAgICAgICAgICAgICA6ZWRpdC11cmw9XCJwYWdlLmVkaXRfdXJsXCJcbiAgICAgICAgICAgICAgICA6aGFzLWVudHJpZXM9XCJwYWdlLmhhc19lbnRyaWVzXCJcbiAgICAgICAgICAgICAgICA6ZW50cmllcy11cmw9XCJwYWdlLmVudHJpZXNfdXJsXCJcbiAgICAgICAgICAgICAgICA6Y3JlYXRlLWVudHJ5LXVybD1cInBhZ2UuY3JlYXRlX2VudHJ5X3VybFwiXG4gICAgICAgICAgICAgICAgOmNoaWxkLXBhZ2VzPVwicGFnZS5pdGVtc1wiXG4gICAgICAgICAgICAgICAgOmNvbGxhcHNlZC5zeW5jPVwicGFnZS5jb2xsYXBzZWRcIlxuICAgICAgICAgICAgICAgIDpkZXB0aD1cImRlcHRoXCJcbiAgICAgICAgICAgICAgICA6c29ydGFibGU9XCJzb3J0YWJsZVwiXG4gICAgICAgID48L2JyYW5jaD5cbiAgICA8L3VsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHBhZ2VzOiBBcnJheSxcbiAgICAgICAgZGVwdGg6IE51bWJlcixcbiAgICAgICAgcGFyZW50VXJsOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBjb2xsYXBzZWQ6IEJvb2xlYW4sXG4gICAgICAgIHNvcnRhYmxlOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGNsYXNzZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIHN0YXRpYyBvbmVzXG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFsnYnJhbmNoZXMnXTtcblxuICAgICAgICAgICAgLy8gQWRkIGRlcHRoXG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2RlcHRoLScgKyB0aGlzLmRlcHRoKTtcblxuICAgICAgICAgICAgLy8gRW1wdHlcbiAgICAgICAgICAgIGlmICghdGhpcy5wYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2VtcHR5Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0YXRlXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSAodGhpcy5jb2xsYXBzZWQpID8gJ2NvbGxhcHNlZCcgOiAnb3Blbic7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2JyYW5jaGVzLScgKyBzdGF0ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihwYWdlKSB7XG4gICAgICAgICAgICBwYWdlLiRzZXQoJ2NvbGxhcHNlZCcsICFwYWdlLmNvbGxhcHNlZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYnVpbGRVcmw6IGZ1bmN0aW9uKHNsdWcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudFVybCArICcvJyArIHNsdWc7XG4gICAgICAgIH1cblxuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEJyYW5jaGVzLnZ1ZT9hYzJkOWY0YSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPHVsIDpjbGFzcz1jbGFzc2VzPiA8YnJhbmNoIHYtZm9yPVxcXCJwYWdlIGluIHBhZ2VzXFxcIiA6YnJhbmNoLWluZGV4PSRpbmRleCA6dXVpZD1wYWdlLmlkIDp0aXRsZT1cXFwicGFnZS50aXRsZSB8fCBwYWdlLnNsdWdcXFwiIDp1cmw9YnVpbGRVcmwocGFnZS5zbHVnKSA6cHVibGlzaGVkPXBhZ2UucHVibGlzaGVkIDplZGl0LXVybD1wYWdlLmVkaXRfdXJsIDpoYXMtZW50cmllcz1wYWdlLmhhc19lbnRyaWVzIDplbnRyaWVzLXVybD1wYWdlLmVudHJpZXNfdXJsIDpjcmVhdGUtZW50cnktdXJsPXBhZ2UuY3JlYXRlX2VudHJ5X3VybCA6Y2hpbGQtcGFnZXM9cGFnZS5pdGVtcyA6Y29sbGFwc2VkLnN5bmM9cGFnZS5jb2xsYXBzZWQgOmRlcHRoPWRlcHRoIDpzb3J0YWJsZT1zb3J0YWJsZT48L2JyYW5jaD4gPC91bD4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvQnJhbmNoZXMudnVlXG4vLyBtb2R1bGUgaWQgPSAzNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ3JlYXRlUGFnZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0NyZWF0ZVBhZ2UudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdlLXRyZWUvQ3JlYXRlUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDM1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPG1vZGFsIDpzaG93LnN5bmM9XCJzaG93XCIgOnNhdmluZz1cInNhdmluZ1wiIDpsb2FkaW5nPVwibG9hZGluZ1wiIGNsYXNzPVwibW9kYWwtc21hbGxcIiA6ZGlzbWlzc2libGU9XCJ0cnVlXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImhlYWRlclwiPnt7IHRyYW5zbGF0ZSgnY3AuY2hvb3NlX3BhZ2VfdHlwZScpIH19PC90ZW1wbGF0ZT5cblxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJib2R5XCI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiY2hvb3NlclwiPlxuICAgICAgICAgICAgICAgICAgICA8bGkgdi1mb3I9XCJmaWVsZHNldCBpbiBmaWVsZHNldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9JycgQGNsaWNrLnByZXZlbnQ9XCJjcmVhdGUoZmllbGRzZXQudmFsdWUpXCI+e3sgZmllbGRzZXQudGV4dCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJmb290ZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHVsbC1sZWZ0XCI+e3sgdHJhbnNsYXRlKCdjcC5wYXJlbnRfcGFnZScpIH19OiA8Y29kZT57eyBwYXJlbnQgfX08L2NvZGU+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG5cIiBAY2xpY2s9XCJjYW5jZWxcIj57eyB0cmFuc2xhdGUoJ2NwLmNhbmNlbCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L21vZGFsPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2xvY2FsZSddLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgIHNhdmluZzogZmFsc2UsXG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgZmllbGRzZXRzOiBbXVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICAncGFnZXMuY3JlYXRlJzogZnVuY3Rpb24ocGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLmdldEZpZWxkc2V0cygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oZmllbGRzZXQpIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSAodGhpcy5wYXJlbnQgPT09ICcvJykgPyAnJyA6IHRoaXMucGFyZW50O1xuXG4gICAgICAgICAgICBsZXQgdXJsID0gY3BfdXJsKCdwYWdlcy9jcmVhdGUnICsgcGFyZW50ICsgJz9maWVsZHNldD0nICsgZmllbGRzZXQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhbGUgIT09IE9iamVjdC5rZXlzKFN0YXRhbWljLmxvY2FsZXMpWzBdKSB7XG4gICAgICAgICAgICAgICAgdXJsICs9ICcmbG9jYWxlPScgKyB0aGlzLmxvY2FsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdXJsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEZpZWxkc2V0czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gY3BfdXJsKCdmaWVsZHNldHMtanNvbj91cmw9Jyt0aGlzLnBhcmVudCsnJmhpZGRlbj1mYWxzZScpO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldCh1cmwsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmllbGRzZXRzID0gW107XG5cbiAgICAgICAgICAgICAgICBfLmVhY2goZGF0YS5pdGVtcywgZnVuY3Rpb24oZmllbGRzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzZXRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZpZWxkc2V0LnV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBmaWVsZHNldC50aXRsZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGVyZSBpcyBhIGRlZmF1bHRcbiAgICAgICAgICAgICAgICBpZiAoISBfLmZpbmRXaGVyZShmaWVsZHNldHMsIHsgdmFsdWU6ICdkZWZhdWx0JyB9KSkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHNldHMucHVzaCh7IHZhbHVlOiAnZGVmYXVsdCcsIHRleHQ6ICdEZWZhdWx0JyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTb3J0IGFscGhhYmV0aWNhbGx5XG4gICAgICAgICAgICAgICAgZmllbGRzZXRzID0gXy5zb3J0QnkoZmllbGRzZXRzLCBmdW5jdGlvbiAoZmllbGRzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkc2V0LnRleHQ7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkc2V0cyA9IGZpZWxkc2V0cztcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgZmllbGRzZXQsIGRvbid0IG1ha2UgdGhlIHVzZXIgaGF2ZSB0byBwaWNrIGl0LlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkc2V0cy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZSh0aGlzLmZpZWxkc2V0c1swXS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIENyZWF0ZVBhZ2UudnVlPzM3ZDA3OThlIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2PiA8bW9kYWwgOnNob3cuc3luYz1zaG93IDpzYXZpbmc9c2F2aW5nIDpsb2FkaW5nPWxvYWRpbmcgY2xhc3M9bW9kYWwtc21hbGwgOmRpc21pc3NpYmxlPXRydWU+IDx0ZW1wbGF0ZSBzbG90PWhlYWRlcj57eyB0cmFuc2xhdGUoJ2NwLmNob29zZV9wYWdlX3R5cGUnKSB9fTwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSBzbG90PWJvZHk+IDx1bCBjbGFzcz1jaG9vc2VyPiA8bGkgdi1mb3I9XFxcImZpZWxkc2V0IGluIGZpZWxkc2V0c1xcXCI+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9Y3JlYXRlKGZpZWxkc2V0LnZhbHVlKT57eyBmaWVsZHNldC50ZXh0IH19PC9hPiA8L2xpPiA8L3VsPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1mb290ZXI+IDxkaXYgY2xhc3M9cHVsbC1sZWZ0Pnt7IHRyYW5zbGF0ZSgnY3AucGFyZW50X3BhZ2UnKSB9fTogPGNvZGU+e3sgcGFyZW50IH19PC9jb2RlPjwvZGl2PiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPWJ0biBAY2xpY2s9Y2FuY2VsPnt7IHRyYW5zbGF0ZSgnY3AuY2FuY2VsJykgfX08L2J1dHRvbj4gPC90ZW1wbGF0ZT4gPC9tb2RhbD4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnZS10cmVlL0NyZWF0ZVBhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSAzNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vTW91bnRDb2xsZWN0aW9uLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTW91bnRDb2xsZWN0aW9uLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnZS10cmVlL01vdW50Q29sbGVjdGlvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDM1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPG1vZGFsIDpzaG93LnN5bmM9XCJzaG93XCIgOnNhdmluZz1cInNhdmluZ1wiIDpsb2FkaW5nPVwibG9hZGluZ1wiIGNsYXNzPVwibW9kYWwtc21hbGxcIj5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJoZWFkZXJcIj57eyB0cmFuc2xhdGUoJ2NwLm1vdW50X2NvbGxlY3Rpb24nKSB9fTwvdGVtcGxhdGU+XG5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJib2R5XCI+XG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJjaG9vc2VyXCI+XG4gICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwiY29sbGVjdGlvbiBpbiBjb2xsZWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScnIEBjbGljay5wcmV2ZW50PVwibW91bnQoY29sbGVjdGlvbi52YWx1ZSlcIj57eyBjb2xsZWN0aW9uLnRleHQgfX08L2E+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJmb290ZXJcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuXCIgQGNsaWNrPVwiY2FuY2VsXCI+e3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fTwvYnV0dG9uPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcblxuICAgICAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2F2aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZpZWxkc2V0czogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICdwYWdlcy5tb3VudCc6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENvbGxlY3Rpb25zKCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAncGFnZXMudW5tb3VudCc6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgICAgIHRoaXMubW91bnQobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgZ2V0Q29sbGVjdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGh0dHAuZ2V0KGNwX3VybCgnY29sbGVjdGlvbnMvZ2V0JyksIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25zID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKGRhdGEuaXRlbXMsIGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjb2xsZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGNvbGxlY3Rpb24udGl0bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1vdW50OiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ3BhZ2VzL21vdW50JyksIHsgaWQsIGNvbGxlY3Rpb24gfSkuc3VjY2VzcygocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuPC9zY3JpcHQ+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIE1vdW50Q29sbGVjdGlvbi52dWU/NWNmNTQzODMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxtb2RhbCA6c2hvdy5zeW5jPXNob3cgOnNhdmluZz1zYXZpbmcgOmxvYWRpbmc9bG9hZGluZyBjbGFzcz1tb2RhbC1zbWFsbD4gPHRlbXBsYXRlIHNsb3Q9aGVhZGVyPnt7IHRyYW5zbGF0ZSgnY3AubW91bnRfY29sbGVjdGlvbicpIH19PC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9Ym9keT4gPHVsIGNsYXNzPWNob29zZXI+IDxsaSB2LWZvcj1cXFwiY29sbGVjdGlvbiBpbiBjb2xsZWN0aW9uc1xcXCI+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9bW91bnQoY29sbGVjdGlvbi52YWx1ZSk+e3sgY29sbGVjdGlvbi50ZXh0IH19PC9hPiA8L2xpPiA8L3VsPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1mb290ZXI+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9YnRuIEBjbGljaz1jYW5jZWw+e3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fTwvYnV0dG9uPiA8L3RlbXBsYXRlPiA8L21vZGFsPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2UtdHJlZS9Nb3VudENvbGxlY3Rpb24udnVlXG4vLyBtb2R1bGUgaWQgPSAzNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vUHVibGlzaC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1B1Ymxpc2gudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL1B1Ymxpc2gudnVlXG4vLyBtb2R1bGUgaWQgPSAzNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnQtdHlwZS17eyBjb250ZW50VHlwZSB9fVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHVibGlzaC1mb3JtXCIgaWQ9XCJwdWJsaXNoLWZvcm1cIj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1Ymxpc2gtZXJyb3JzIGFsZXJ0IGFsZXJ0LWRhbmdlclwiIHYtaWY9XCJoYXNFcnJvcnNcIj5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cImVycm9yIGluIGVycm9yc1wiPnt7IGVycm9yIH19PC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIgdy1mdWxsIHN0aWNreVwiIGlkPVwicHVibGlzaC1jb250cm9sc1wiPlxuXG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzPVwidy1mdWxsIG15LTEgdGV4dC1jZW50ZXIgbGc6dGV4dC1sZWZ0IGxnOmZsZXgtMVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyB0aXRsZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2gxPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzIGZsZXggZmxleC13cmFwIGl0ZW1zLWNlbnRlciB3LWZ1bGwgbGc6dy1hdXRvIGp1c3RpZnktY2VudGVyXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1yLTIgbXktMSBmcy0xMyBvcGFjaXR5LTUwXCIgdi1pZj1cIiEgY2FuRWRpdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tbG9ja1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IHRyYW5zbGF0ZSgnY3AucmVhZF9vbmx5X21vZGUnKSB9fVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8c3RhdHVzLWZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm15LTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNob3VsZFNob3dTdGF0dXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmxvY2FsZT1cImxvY2FsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6bG9jYWxlcz1cImxvY2FsZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmFsbG93LXN0YXR1c2VzPVwiYWxsb3dTdGF0dXNlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6c3RhdHVzLnN5bmM9XCJmb3JtRGF0YS5zdGF0dXNcIj48L3N0YXR1cy1maWVsZD5cblxuICAgICAgICAgICAgICAgICAgICA8dXNlci1vcHRpb25zIHYtaWY9XCJpc1VzZXIgJiYgIWlzTmV3XCIgOnVzZXJuYW1lPVwic2x1Z1wiIDpzdGF0dXM9XCJjb250ZW50RGF0YS5zdGF0dXNcIiBjbGFzcz1cIm1yLTJcIj48L3VzZXItb3B0aW9ucz5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG15LTEgbXItMlwiIHYtaWY9XCIkcGFyZW50LmlzUHVibGlzaFBhZ2UgJiYgdXJsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInN0YXRpY0NhY2hpbmdFbmFibGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cInt7IHVybCB9fVwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiYnRuXCI+e3sgdHJhbnNsYXRlKCdjcC52aXNpdF91cmwnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuXCIgQGNsaWNrLnByZXZlbnQ9XCIkcGFyZW50LnByZXZpZXdcIj57eyB0cmFuc2xhdGUoJ2NwLnNuZWFrX3BlZWsnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHlcIj57eyB0cmFuc2xhdGUoJ2NwLnRvZ2dsZV9kcm9wZG93bicpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCJ7eyB1cmwgfX1cIiB0YXJnZXQ9XCJfYmxhbmtcIj57eyB0cmFuc2xhdGUoJ2NwLnZpc2l0X3VybCcpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgYnRuLWdyb3VwLXByaW1hcnkgbXktMVwiIHYtaWY9XCJjYW5FZGl0XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cInB1Ymxpc2hUeXBlID09PSAnc2F2ZSdcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBAY2xpY2s9XCJwdWJsaXNoV2l0aG91dENvbnRpbnVpbmdcIiA6ZGlzYWJsZWQ9XCJzYXZpbmdcIj57eyB0cmFuc2xhdGUoJ2NwLnNhdmUnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwicHVibGlzaFR5cGUgPT09ICdjb250aW51ZSdcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBAY2xpY2s9XCJwdWJsaXNoQW5kQ29udGludWVcIiA6ZGlzYWJsZWQ9XCJzYXZpbmdcIj57eyB0cmFuc2xhdGUoJ2NwLnNhdmVfYW5kX2NvbnRpbnVlJykgfX08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImFsbG93U2F2ZUFuZEFkZEFub3RoZXIgJiYgcHVibGlzaFR5cGUgPT09ICdhbm90aGVyJ1wiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIEBjbGljaz1cInB1Ymxpc2hBbmRBbm90aGVyXCIgOmRpc2FibGVkPVwic2F2aW5nXCI+e3sgdHJhbnNsYXRlKCdjcC5zYXZlX2FuZF9hbm90aGVyJykgfX08L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgOmRpc2FibGVkPVwic2F2aW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJldFwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHlcIj57eyB0cmFuc2xhdGUoJ2NwLnRvZ2dsZV9kcm9wZG93bicpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgdi1pZj1cInB1Ymxpc2hUeXBlICE9PSAnY29udGludWUnXCI+PGEgaWQ9XCJwdWJsaXNoLWNvbnRpbnVlXCIgQGNsaWNrPVwicHVibGlzaEFuZENvbnRpbnVlXCI+e3sgdHJhbnNsYXRlKCdjcC5zYXZlX2FuZF9jb250aW51ZScpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJwdWJsaXNoVHlwZSAhPT0gJ3NhdmUnXCI+PGEgQGNsaWNrPVwicHVibGlzaFdpdGhvdXRDb250aW51aW5nXCI+e3sgdHJhbnNsYXRlKCdjcC5zYXZlJykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgdi1pZj1cImFsbG93U2F2ZUFuZEFkZEFub3RoZXIgJiYgcHVibGlzaFR5cGUgIT09ICdhbm90aGVyJ1wiPjxhIEBjbGljaz1cInB1Ymxpc2hBbmRBbm90aGVyXCI+e3sgdHJhbnNsYXRlKCdjcC5zYXZlX2FuZF9hbm90aGVyJykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cblxuICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJbICd3LWZ1bGwnLCB7ICdweC0xIG1kOnB4LTMnOiAhaXNTbmVha1BlZWtpbmcgfSBdXCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IDpjbGFzcz1cIlsgJ3B1Ymxpc2gtdGFicyB0YWJzJywgeyAnbWItMic6ICFpc1NuZWFrUGVla2luZyB9IF1cIiB2LXNob3c9XCJtYWluU2VjdGlvbnMubGVuZ3RoID4gMVwiPlxuICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cInNlY3Rpb24gaW4gbWFpblNlY3Rpb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IGFjdGl2ZVNlY3Rpb24gPT09IHNlY3Rpb24uaGFuZGxlLCAnaGFzLWVycm9yJzogc2VjdGlvbkhhc0Vycm9yKHNlY3Rpb24uaGFuZGxlKSB9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9uLmhhbmRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LXRleHQ9XCJzZWN0aW9uRGlzcGxheShzZWN0aW9uKVwiPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWJldHdlZW5cIj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cHVibGlzaC1zZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9XCIoaSwgc2VjdGlvbikgaW4gbWFpblNlY3Rpb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LXNob3c9XCJhY3RpdmVTZWN0aW9uID09PSBzZWN0aW9uLmhhbmRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNlY3Rpb249XCJzZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZmllbGRzZXQ9XCJmaWVsZHNldFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmVycm9ycz1cImVycm9yc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmhpZGRlbi1maWVsZHM9XCJoaWRkZW5GaWVsZHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkYXRhLnN5bmM9XCJmb3JtRGF0YS5maWVsZHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDphdXRvZm9jdXM9XCJpID09PSAwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bWV0YS1maWVsZHM9XCJtZXRhRmllbGRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZW52PVwiZXh0cmEuZW52XCJcbiAgICAgICAgICAgICAgICAgICAgICAgID48L3B1Ymxpc2gtc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1Ymxpc2gtc2lkZWJhciBtbC0zMlwiIHYtc2hvdz1cInNob3VsZFNob3dTaWRlYmFyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cHVibGlzaC1zZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNlY3Rpb249XCJzaWRlYmFyU2VjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZpZWxkc2V0PVwiZmllbGRzZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDplcnJvcnM9XCJlcnJvcnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpoaWRkZW4tZmllbGRzPVwiaGlkZGVuRmllbGRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS5zeW5jPVwiZm9ybURhdGEuZmllbGRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID48L3B1Ymxpc2gtc2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IENvbmRpdGlvbmFscyBmcm9tICcuL0NvbmRpdGlvbmFscyc7XG5pbXBvcnQgRmllbGRzZXQgZnJvbSAnLi9GaWVsZHNldCc7XG5Nb3VzZXRyYXAgPSByZXF1aXJlKCdtb3VzZXRyYXAnKTtcblxuLy8gTW91c2V0cmFwIEJpbmQgR2xvYmFsXG4oZnVuY3Rpb24oYSl7dmFyIGM9e30sZD1hLnByb3RvdHlwZS5zdG9wQ2FsbGJhY2s7YS5wcm90b3R5cGUuc3RvcENhbGxiYWNrPWZ1bmN0aW9uKGUsYixhLGYpe3JldHVybiB0aGlzLnBhdXNlZD8hMDpjW2FdfHxjW2ZdPyExOmQuY2FsbCh0aGlzLGUsYixhKX07YS5wcm90b3R5cGUuYmluZEdsb2JhbD1mdW5jdGlvbihhLGIsZCl7dGhpcy5iaW5kKGEsYixkKTtpZihhIGluc3RhbmNlb2YgQXJyYXkpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyljW2FbYl1dPSEwO2Vsc2UgY1thXT0hMH07YS5pbml0KCl9KShNb3VzZXRyYXApO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdwdWJsaXNoLWZpZWxkcyc6IHJlcXVpcmUoJy4vRmllbGRzLnZ1ZScpLFxuICAgICAgICAndXNlci1vcHRpb25zJzogcmVxdWlyZSgnLi91c2VyLW9wdGlvbnMnKSxcbiAgICAgICAgJ3N0YXR1cy1maWVsZCc6IHJlcXVpcmUoJy4vU3RhdHVzRmllbGQudnVlJyksXG4gICAgICAgICdwdWJsaXNoLXNlY3Rpb24nOiByZXF1aXJlKCcuL1NlY3Rpb24udnVlJylcbiAgICB9LFxuXG4gICAgbWl4aW5zOiBbQ29uZGl0aW9uYWxzXSxcblxuICAgIGRlZXA6IHRydWUsXG5cbiAgICBwcm9wczoge1xuICAgICAgICB0aXRsZTogU3RyaW5nLFxuICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJ3t9J1xuICAgICAgICB9LFxuICAgICAgICBpc05ldzogQm9vbGVhbixcbiAgICAgICAgY29udGVudFR5cGU6IFN0cmluZyxcbiAgICAgICAgdXVpZDogU3RyaW5nLFxuICAgICAgICBmaWVsZHNldE5hbWU6IFN0cmluZyxcbiAgICAgICAgc2x1Zzoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfSxcbiAgICAgICAgdXJpOiBTdHJpbmcsXG4gICAgICAgIHVybDogU3RyaW5nLFxuICAgICAgICBzdWJtaXRVcmw6IFN0cmluZyxcbiAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBsb2NhbGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IE9iamVjdC5rZXlzKFN0YXRhbWljLmxvY2FsZXMpWzBdXG4gICAgICAgIH0sXG4gICAgICAgIGxvY2FsZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdbe31dJ1xuICAgICAgICB9LFxuICAgICAgICBpc0RlZmF1bHRMb2NhbGU6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVRpdGxlOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgcmVhZE9ubHk6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVUaXRsZU9uU2F2ZToge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgbWV0YUZpZWxkczoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgYWxsb3dTYXZlQW5kQWRkQW5vdGhlcjoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgc2F2aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGZpZWxkc2V0OiB7fSxcbiAgICAgICAgICAgIGNvbnRlbnREYXRhOiBudWxsLFxuICAgICAgICAgICAgZm9ybURhdGE6IHsgZXh0cmE6IHt9LCBmaWVsZHM6IHt9IH0sXG4gICAgICAgICAgICBmb3JtRGF0YUluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2x1Z01vZGlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlmcmFtZUxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgcHJldmlld1JlcXVlc3RRdWV1ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgIHB1Ymxpc2hUeXBlOiAnc2F2ZScsXG4gICAgICAgICAgICBzdGF0aWNDYWNoaW5nRW5hYmxlZDogd2luZG93LlN0YXRhbWljLnN0YXRpY0NhY2hpbmdFbmFibGVkLFxuICAgICAgICAgICAgYWN0aXZlU2VjdGlvbjogbnVsbFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGlzRW50cnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFR5cGUgPT09ICdlbnRyeSc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNUYXhvbm9teTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50VHlwZSA9PT0gJ3RheG9ub215JztcbiAgICAgICAgfSxcblxuICAgICAgICBpc0dsb2JhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50VHlwZSA9PT0gJ2dsb2JhbCc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNVc2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRUeXBlID09PSAndXNlcic7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNTZXR0aW5nczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50VHlwZSA9PT0gJ3NldHRpbmdzJztcbiAgICAgICAgfSxcblxuICAgICAgICBpc0FkZG9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRUeXBlID09PSAnYWRkb24nO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUGFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50VHlwZSA9PT0gJ3BhZ2UnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzSG9tZVBhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNQYWdlICYmIHRoaXMudXJpID09PSAnLyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuRWRpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkT25seSA9PT0gdHJ1ZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50VHlwZSA9PT0gJ2VudHJ5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbignY29sbGVjdGlvbnM6JysgdGhpcy5leHRyYS5jb2xsZWN0aW9uICsnOmVkaXQnKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnRlbnRUeXBlID09PSAncGFnZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYW4oJ3BhZ2VzOmVkaXQnKVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnRlbnRUeXBlID09PSAndGF4b25vbXknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FuKCd0YXhvbm9taWVzOicrIHRoaXMuZXh0cmEudGF4b25vbXkgKyc6ZWRpdCcpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29udGVudFR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FuKCdnbG9iYWxzOicrIHRoaXMuc2x1ZyArJzplZGl0JylcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb250ZW50VHlwZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0YXRhbWljLnVzZXJJZCA9PT0gdGhpcy51dWlkID8gdHJ1ZSA6IHRoaXMuY2FuKCd1c2VyczplZGl0Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNBZGRvbiB8fCB0aGlzLmlzU2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYW4oJ3N1cGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3VsZFNob3dTdGF0dXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmlzU2V0dGluZ3MgJiYgIXRoaXMuaXNBZGRvbiAmJiAhdGhpcy5pc1VzZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWxsb3dTdGF0dXNlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmlzVGF4b25vbXkgJiYgIXRoaXMuaXNHbG9iYWwgJiYgIXRoaXMuaXNIb21lUGFnZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG91bGRTaG93RGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGVudHJpZXMgY2FuIGhhdmUgYSBkYXRlXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhpc3RpbmcgZW50cnkgYW5kIGEgZGF0ZXRpbWUgaGFzIGJlZW4gcGFzc2VkIGluP1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzTmV3ICYmIHRoaXMuZm9ybURhdGEuZmllbGRzLmRhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTmV3IGVudHJ5IGFuZCBpdCB1c2VzIGRhdGVzIGZvciBvcmRlcmluZz9cbiAgICAgICAgICAgIGlmICh0aGlzLmlzTmV3ICYmIHRoaXMuZm9ybURhdGEuZXh0cmEub3JkZXJfdHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG91bGRTaG93U25lYWtQZWVrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0dsb2JhbCAmJiAhdGhpcy5pc1NldHRpbmdzICYmICF0aGlzLmlzVXNlciAmJiAhdGhpcy5pc0FkZG9uO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzU25lYWtQZWVraW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRyb290LmlzUHJldmlld2luZztcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNFcnJvcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uc2l6ZSh0aGlzLmVycm9ycykgIT09IDA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0ZUZpZWxkQ29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNldC5kYXRlIHx8IHt9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpbHRlcmVkRm9ybURhdGEoKSB7XG4gICAgICAgICAgICAvLyBNYWtlIGEgY29weSBzbyB3ZSBkb24ndCBtb2RpZnkgdGhlIG9yaWdpbmFsIGZvcm1EYXRhXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtRGF0YSkpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgYW55IGhpZGRlbiBmaWVsZHNcbiAgICAgICAgICAgIGZvcm1EYXRhLmZpZWxkcyA9IF8ub2JqUmVqZWN0KGZvcm1EYXRhLmZpZWxkcywgKHZhbHVlLCBrZXkpID0+IHRoaXMuaGlkZGVuRmllbGRzLmluY2x1ZGVzKGtleSkpO1xuXG4gICAgICAgICAgICByZXR1cm4gZm9ybURhdGE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdWxkU2hvd1NpZGViYXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaWRlYmFyU2VjdGlvbi5maWVsZHMubGVuZ3RoID09IDAgfHwgdGhpcy4kcm9vdC5pc1ByZXZpZXdpbmcgfHwgdGhpcy4kcm9vdC53aW5kb3dXaWR0aCA8IDEzNjYpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VjdGlvbnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNldC5zZWN0aW9ucztcbiAgICAgICAgfSxcblxuICAgICAgICBtYWluU2VjdGlvbnMoKSB7XG4gICAgICAgICAgICBpZiAoISB0aGlzLnNob3VsZFNob3dTaWRlYmFyKSByZXR1cm4gdGhpcy5zZWN0aW9ucztcblxuICAgICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHRoaXMuc2VjdGlvbnMsIHNlY3Rpb24gPT4gc2VjdGlvbi5oYW5kbGUgIT0gJ3NpZGViYXInKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaWRlYmFyU2VjdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmZpbmQodGhpcy5zZWN0aW9ucywgeyBoYW5kbGU6ICdzaWRlYmFyJyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBBIG1hcHBpbmcgb2YgZmllbGRzIHRvIHdoaWNoIHNlY3Rpb24gdGhleSBhcmUgaW4uXG4gICAgICAgIHNlY3Rpb25GaWVsZHMoKSB7XG4gICAgICAgICAgICBsZXQgZmllbGRzID0ge307XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbi5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1tmaWVsZC5uYW1lXSA9IHNlY3Rpb24uaGFuZGxlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQSBtYXBwaW5nIG9mIGZpZWxkcyB3aXRoIGVycm9ycyB0byB3aGljaCBzZWN0aW9uIHRoZXkgYXJlIGluLlxuICAgICAgICBzZWN0aW9uRXJyb3JzKCkge1xuICAgICAgICAgICAgbGV0IGVycm9ycyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5lcnJvcnMpLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgICAgIGZpZWxkID0gZmllbGQuc3Vic3RyKDcpOyAvLyB3aXRob3V0IGBmaWVsZHMuYCBwcmVmaXhcbiAgICAgICAgICAgICAgICBlcnJvcnNbZmllbGRdID0gdGhpcy5zZWN0aW9uRmllbGRzW2ZpZWxkXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBXaGVuIGFuIGVycm9yIG9jY3Vycywgd2Ugd2lsbCBmb2N1cyBvbiB0aGUgZmlyc3Qgc2VjdGlvbiB3aXRoIGEgZmllbGQgY29udGFpbmluZyBhbiBlcnJvci5cbiAgICAgICAgc2VjdGlvblRvRm9jdXNPbkVycm9yKCkge1xuICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBleGNsdWRlIGFueSBmaWVsZHMgaW4gdGhlIHNpZGViYXIgaWYgaXQncyB3aWRlIGVub3VnaCB0byBiZSB2aXNpYmxlLlxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSB0aGlzLnNob3VsZFNob3dTaWRlYmFyXG4gICAgICAgICAgICAgICAgPyBfLm9taXQodGhpcy5zZWN0aW9uRXJyb3JzLCAoc2VjdGlvbikgPT4gc2VjdGlvbiA9PT0gJ3NpZGViYXInKVxuICAgICAgICAgICAgICAgIDogdGhpcy5zZWN0aW9uRXJyb3JzO1xuXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc2VjdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBBZnRlciBleGNsdWRpbmcgdGhlIHNpZGViYXIgZmllbGRzLCBpZiB0aGVyZSBhcmUgemVybyByZXN1bHRzLCBpdCBtZWFucyB0aGF0IHRoZSBlcnJvcnNcbiAgICAgICAgICAgIC8vIGFyZSBvbmx5IGluIHRoZSBzaWRlYmFyIHNvIHdlJ2xsIGNvbnRpbnVlIHRvIHNob3cgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBzZWN0aW9uLlxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5hY3RpdmVTZWN0aW9uO1xuXG4gICAgICAgICAgICByZXR1cm4gc2VjdGlvbnNba2V5c1swXV07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGluaXRGb3JtRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhID0ge1xuICAgICAgICAgICAgICAgIGZpZWxkc2V0OiBudWxsLCAvLyBvdmVycmlkZGVuIGluIGluaXRGaWVsZHNldFxuICAgICAgICAgICAgICAgIG5ldzogdGhpcy5pc05ldyxcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLmNvbnRlbnRUeXBlLFxuICAgICAgICAgICAgICAgIHV1aWQ6IHRoaXMudXVpZCxcbiAgICAgICAgICAgICAgICBpZDogdGhpcy51dWlkLFxuICAgICAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgc2x1ZzogdGhpcy5jb250ZW50RGF0YS5zbHVnLFxuICAgICAgICAgICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGUsXG4gICAgICAgICAgICAgICAgZXh0cmE6IHRoaXMuZXh0cmEsXG4gICAgICAgICAgICAgICAgZmllbGRzOiB0aGlzLmNvbnRlbnREYXRhXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHB1Ymxpc2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBzZWxmLnNhdmluZyA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLmVycm9ycyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdWJtaXRVcmwpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gdGhpcy5zdWJtaXRVcmw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBjcF91cmwoJ3NldHRpbmdzLycpICsgdGhpcy5zbHVnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQWRkb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gY3BfdXJsKCdhZGRvbnMvJykgKyB0aGlzLmV4dHJhLmFkZG9uICsgJy9zZXR0aW5ncyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gdGhpcy4kaHR0cC5wb3N0KHVybCwgdGhpcy5maWx0ZXJlZEZvcm1EYXRhKVxuXG4gICAgICAgICAgICByZXF1ZXN0LnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnY2hhbmdlc01hZGUnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlZGlyZWN0ICYmICh0aGlzLnB1Ymxpc2hUeXBlICE9PSAnY29udGludWUnIHx8IHRoaXMuaXNOZXcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBkYXRhLnJlZGlyZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZVRpdGxlT25TYXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gKHRoaXMuaXNVc2VyKSA/IHRoaXMuZm9ybURhdGEuZmllbGRzLnVzZXJuYW1lIDogdGhpcy5mb3JtRGF0YS5maWVsZHMudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3NldEZsYXNoU3VjY2VzcycsIGRhdGEubWVzc2FnZSwgeyB0aW1lb3V0OiAxNTAwIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdzZXRGbGFzaEVycm9yJywgdHJhbnNsYXRlKCdjcC5lcnJvcicpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBkYXRhLmVycm9ycztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTZWN0aW9uID0gdGhpcy5zZWN0aW9uVG9Gb2N1c09uRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAwIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVxdWVzdC5lcnJvcihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlc3BvbnNlLmV4Y2VwdGlvbiA9PT0gJ1Rva2VuTWlzbWF0Y2hFeGNlcHRpb24nID8gJ3Nlc3Npb25fZXhwaXJlZF9lcnJvcicgOiAncHVibGlzaF9lcnJvcic7XG4gICAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5LmVycm9yKHRyYW5zbGF0ZShgY3AuJHtrZXl9YCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVibGlzaFdpdGhvdXRDb250aW51aW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnB1Ymxpc2hUeXBlID0gJ3NhdmUnO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3N0YXRhbWljLnB1Ymxpc2gudHlwZScsICdzYXZlJyk7XG4gICAgICAgICAgICBWdWUuZGVsZXRlKHRoaXMuZm9ybURhdGEsICdjb250aW51ZScpO1xuICAgICAgICAgICAgVnVlLmRlbGV0ZSh0aGlzLmZvcm1EYXRhLCAnYW5vdGhlcicpO1xuXG4gICAgICAgICAgICB0aGlzLnB1Ymxpc2goKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwdWJsaXNoQW5kQ29udGludWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wdWJsaXNoVHlwZSA9ICdjb250aW51ZSc7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc3RhdGFtaWMucHVibGlzaC50eXBlJywgJ2NvbnRpbnVlJyk7XG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmNvbnRpbnVlID0gdHJ1ZTtcbiAgICAgICAgICAgIFZ1ZS5kZWxldGUodGhpcy5mb3JtRGF0YSwgJ2Fub3RoZXInKTtcblxuICAgICAgICAgICAgdGhpcy5wdWJsaXNoKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcHVibGlzaEFuZEFub3RoZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5wdWJsaXNoVHlwZSA9ICdhbm90aGVyJztcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzdGF0YW1pYy5wdWJsaXNoLnR5cGUnLCAnYW5vdGhlcicpO1xuICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5hbm90aGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIFZ1ZS5kZWxldGUodGhpcy5mb3JtRGF0YSwgJ2NvbnRpbnVlJyk7XG5cbiAgICAgICAgICAgIHRoaXMucHVibGlzaCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRQcmV2aWV3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghICQoJyNzbmVhay1wZWVrLWlmcmFtZScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICQoJzxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCIgaWQ9XCJzbmVhay1wZWVrLWlmcmFtZVwiPicpLmFwcGVuZFRvKCcjc25lYWstcGVlaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVQcmV2aWV3KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlUHJldmlldzogXy5kZWJvdW5jZShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pZnJhbWVMb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3UmVxdWVzdFF1ZXVlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZm9ybURhdGEgPSB0aGlzLmZvcm1EYXRhO1xuICAgICAgICAgICAgZm9ybURhdGFbJ3ByZXZpZXcnXSA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuaWZyYW1lTG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICghIHRoaXMuaXNOZXcpIHtcbiAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBwYWdlcyBhbHJlYWR5IGhhdmUgYSB1cmwuXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMudXJsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1BhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsdWcgPSB0aGlzLmZvcm1EYXRhLnNsdWcgfHwgJ25ldy1wYWdlJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuZXh0cmEucGFyZW50X3VybCArICcvJyArIHNsdWc7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCcvLycsICcvJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHRoaXMuZW50cnlVcmwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh1cmwsIGZvcm1EYXRhLCBmdW5jdGlvbihkYXRhLCBzdGF0dXMsIHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZpZXdJZnJhbWUoZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZnJhbWVMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJldmlld1JlcXVlc3RRdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3UmVxdWVzdFF1ZXVlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByZXZpZXcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMTUwKSxcblxuICAgICAgICB1cGRhdGVQcmV2aWV3SWZyYW1lOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgJGlmcmFtZSA9ICQoJyNzbmVhay1wZWVrLWlmcmFtZScpO1xuICAgICAgICAgICAgdmFyIGlmcmFtZSA9ICRpZnJhbWUuZ2V0KDApO1xuXG4gICAgICAgICAgICB2YXIgc2Nyb2xsWCA9ICQoaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpLnNjcm9sbExlZnQoKTtcbiAgICAgICAgICAgIHZhciBzY3JvbGxZID0gJChpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudCkuc2Nyb2xsVG9wKCk7XG5cbiAgICAgICAgICAgIGRhdGEgKz0gJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPndpbmRvdy5zY3JvbGxUbygnK3Njcm9sbFgrJywgJytzY3JvbGxZKycpO1xceDNjL3NjcmlwdD4nO1xuXG4gICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC5vcGVuKCk7XG4gICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC53cml0ZShkYXRhKTtcbiAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50LmNsb3NlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3luY1RpdGxlQW5kU2x1Z0ZpZWxkczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc05ldykge1xuICAgICAgICAgICAgICAgIHRoaXMuJHdhdGNoKCdmb3JtRGF0YS5maWVsZHMudGl0bGUnLCBmdW5jdGlvbih0aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kc2x1Z2lmeSh0aXRsZSkgPT0gdGhpcy5mb3JtRGF0YS5maWVsZHMuc2x1Zykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1NsdWdNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgdGhpcy5pc1NsdWdNb2RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5maWVsZHMuc2x1ZyA9IHRoaXMuJHNsdWdpZnkodGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW50cnlVcmw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuaXNOZXcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51cmk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBmYWxsYmFja1NsdWcgPSAodGhpcy5pc1RheG9ub215KSA/ICduZXctdGVybScgOiAnbmV3LWVudHJ5JztcbiAgICAgICAgICAgIHZhciBzbHVnID0gdGhpcy5mb3JtRGF0YS5zbHVnIHx8IGZhbGxiYWNrU2x1ZztcblxuICAgICAgICAgICAgdmFyIHJvdXRlID0gdGhpcy5leHRyYS5yb3V0ZTtcbiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZXh0cmEub3JkZXJfdHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGUgPSB0aGlzLmRhdGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlID0gL3tcXHMqKFthLXpBLVowLTlfXFwtXSspXFxzKn0vZztcbiAgICAgICAgICAgIHZhciByZXN1bHRzO1xuICAgICAgICAgICAgd2hpbGUgKChyZXN1bHRzID0gcmUuZXhlYyhyb3V0ZSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzdWx0c1swXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAnJztcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAne3llYXJ9JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0ZS5mb3JtYXQoJ1lZWVknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd7bW9udGh9JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0ZS5mb3JtYXQoJ01NJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAne2RheX0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkYXRlLmZvcm1hdCgnREQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd7c2x1Z30nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzbHVnO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSBtYXRjaC5zdWJzdHJpbmcoMSwgbWF0Y2gubGVuZ3RoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmZvcm1EYXRhLmZpZWxkc1tmaWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShtYXRjaCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gdGhpcy5leHRyYS5kYXRldGltZTtcblxuICAgICAgICAgICAgdmFyIGZvcm1hdCA9ICdZWVlZLU1NLUREJztcblxuICAgICAgICAgICAgaWYgKGRhdGUubGVuZ3RoID4gMTApIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQgKz0gJyBISDptbSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBtb2RpZnlTbHVnOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IHRoaXMuZm9ybURhdGEuZmllbGRzLnRpdGxlO1xuICAgICAgICAgICAgdmFyIHNsdWcgID0gdGhpcy5mb3JtRGF0YS5zbHVnO1xuXG4gICAgICAgICAgICB0aGlzLmlzU2x1Z01vZGlmaWVkID0gKHRoaXMuJHNsdWdpZnkodGl0bGUpICE9PSBzbHVnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRJbml0aWFsUHVibGlzaFR5cGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3N0YXRhbWljLnB1Ymxpc2gudHlwZScpIHx8ICdzYXZlJztcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93U2F2ZUFuZEFkZEFub3RoZXIgJiYgdHlwZSA9PT0gJ2Fub3RoZXInKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzYXZlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RmllbGRzZXQoKSB7XG4gICAgICAgICAgICBpZiAoU3RhdGFtaWMuUHVibGlzaC5maWVsZHNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEZpZWxkc2V0KFN0YXRhbWljLlB1Ymxpc2guZmllbGRzZXQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgdmFyIHVybCA9IGNwX3VybCgnZmllbGRzZXRzLWpzb24vJykgKyB0aGlzLmZpZWxkc2V0TmFtZTtcblxuICAgICAgICAgICAgcGFyYW1zLmxvY2FsZSA9IHRoaXMubG9jYWxlO1xuICAgICAgICAgICAgcGFyYW1zLnRheG9ub21pZXMgPSB0aGlzLmlzRW50cnk7XG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldCh1cmwsIHBhcmFtcykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0RmllbGRzZXQoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0RmllbGRzZXQoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5maWVsZHNldCA9IG5ldyBGaWVsZHNldChkYXRhKVxuICAgICAgICAgICAgICAgIC5zaG93RGF0ZSh0aGlzLnNob3VsZFNob3dEYXRlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNQYWdlIHx8IHRoaXMuaXNFbnRyeSB8fCB0aGlzLmlzVGF4b25vbXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkc2V0LnNob3dTbHVnKCF0aGlzLmlzSG9tZVBhZ2UpLnByZXBlbmRUaXRsZSgpLnByZXBlbmRNZXRhKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU2VjdGlvbiA9IHRoaXMuZmllbGRzZXQuc2VjdGlvbnNbMF0uaGFuZGxlO1xuICAgICAgICAgICAgdGhpcy5pbml0Q29uZGl0aW9ucygpO1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmZpZWxkc2V0ID0gdGhpcy5maWVsZHNldE5hbWUgfHwgdGhpcy5maWVsZHNldC5uYW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlY3Rpb25IYXNFcnJvcihoYW5kbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmNoYWluKHRoaXMuc2VjdGlvbkVycm9ycykudmFsdWVzKCkuY29udGFpbnMoaGFuZGxlKS52YWx1ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlY3Rpb25EaXNwbGF5KHNlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBzZWN0aW9uLmRpc3BsYXkgfHwgYCR7c2VjdGlvbi5oYW5kbGVbMF0udG9VcHBlckNhc2UoKX0ke3NlY3Rpb24uaGFuZGxlLnNsaWNlKDEpfWA7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgd2F0Y2g6IHtcblxuICAgICAgICBzaG91bGRTaG93U2lkZWJhcihzaG91bGRTaG93KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgc2lkZWJhciBoaWRkZW4sIGFuZCBpdCB3YXMgdGhlIGFjdGl2ZSB0YWIsIHdoZW4gd2Ugc2hvdyB0aGUgc2lkZWJhclxuICAgICAgICAgICAgLy8gd2Ugd29uJ3QgaGF2ZSBhbiBhY3RpdmUgdGFiIGFueW1vcmUsIHNvIHdlJ2xsIGp1c3QgYWN0aXZhdGUgdGhlIGZpcnN0LlxuICAgICAgICAgICAgLy8gQWxzbywgaWYgdGhlIGZpcnN0IG9uZSAqaXMqIHRoZSBzaWRlYmFyLCBhY3RpdmF0ZSB0aGUgc2Vjb25kIG9uZS5cbiAgICAgICAgICAgIGlmIChzaG91bGRTaG93ICYmIHRoaXMuYWN0aXZlU2VjdGlvbiA9PT0gJ3NpZGViYXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTZWN0aW9uID0gdGhpcy5zZWN0aW9uc1swXS5oYW5kbGU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlU2VjdGlvbiA9PT0gJ3NpZGViYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU2VjdGlvbiA9IHRoaXMuc2VjdGlvbnNbMV0uaGFuZGxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhY3RpdmVTZWN0aW9uKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIEFsbG93IHRoaW5ncyB0byB0cmFjayB3aGVuIHRoZSBzZWNpdG9uIGlzIGNoYW5nZWQuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgdGhlIEdyaWQgZmllbGR0eXBlIG1heSBuZWVkIHRvIHJlY2FsY3VsYXRlIGl0cyBjb250YWluZXIgd2lkdGguXG4gICAgICAgICAgICB0aGlzLiRyb290LiRlbWl0KCdwdWJsaXNoLnNlY3Rpb24uY2hhbmdlZCcsIHNlY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5leHRyYSA9IEpTT04ucGFyc2UodGhpcy5leHRyYSk7XG4gICAgICAgIHRoaXMuY29udGVudERhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KFN0YXRhbWljLlB1Ymxpc2guY29udGVudERhdGEpKTtcblxuICAgICAgICBpZiAodGhpcy5sb2NhbGVzKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsZXMgPSBKU09OLnBhcnNlKHRoaXMubG9jYWxlcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluaXRGb3JtRGF0YSgpO1xuICAgICAgICB0aGlzLmdldEZpZWxkc2V0KCk7XG5cbiAgICAgICAgdGhpcy5wdWJsaXNoVHlwZSA9IHRoaXMuZ2V0SW5pdGlhbFB1Ymxpc2hUeXBlKCk7XG4gICAgICAgIGlmICh0aGlzLnB1Ymxpc2hUeXBlID09PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmNvbnRpbnVlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnB1Ymxpc2hUeXBlID09PSAnYW5vdGhlcicpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybURhdGEuYW5vdGhlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN5bmNUaXRsZUFuZFNsdWdGaWVsZHMoKTtcblxuICAgICAgICB2YXIgc25lYWtQZWVrV2F0Y2hlciA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFNob3dTbmVha1BlZWspIHtcbiAgICAgICAgICAgIHRoaXMuJHJvb3QuaXNQdWJsaXNoUGFnZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIFdlJ3ZlIGluaXRhdGVkIExpdmUgUHJldmlldyBNb2RlXG4gICAgICAgICAgICB0aGlzLiRvbigncHJldmlld2luZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFByZXZpZXcoKTtcblxuICAgICAgICAgICAgICAgIHNuZWFrUGVla1dhdGNoZXIgPSB0aGlzLiR3YXRjaCgnZm9ybURhdGEnLCBmdW5jdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcmV2aWV3KCk7XG4gICAgICAgICAgICAgICAgfSwgeyBkZWVwOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiRvbigncHJldmlld2luZy5zdG9wcGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBUaGUgd2F0Y2hlciByZXR1cm5zIGEgbWV0aG9kIHRvIHN0b3AgaXRzZWxmLlxuICAgICAgICAgICAgc25lYWtQZWVrV2F0Y2hlcigpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiRvbignZmllbGRzZXRMb2FkZWQnLCBmdW5jdGlvbihmaWVsZHNldCkge1xuICAgICAgICAgICAgdGhpcy5maWVsZHNldCA9IGZpZWxkc2V0O1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmNhbkVkaXQpIHtcbiAgICAgICAgICAgIE1vdXNldHJhcC5iaW5kR2xvYmFsKCdtb2QrcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wdWJsaXNoQW5kQ29udGludWUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBNb3VzZXRyYXAuYmluZEdsb2JhbCgnbWV0YStlbnRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5wdWJsaXNoKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFB1Ymxpc2gudnVlPzFjZmU2NGYyIiwiaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL0NvbmRpdGlvbi5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbmRpdGlvbnM6IFtdLFxuICAgICAgICAgICAgaGlkZGVuRmllbGRzOiBbXVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGV2YWx1YXRlQ29uZGl0aW9ucygpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5mb3JFYWNoKGNvbmRpdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uLnBhc3NlcyA9IGNvbmRpdGlvbi52YWxpZGF0ZSh0aGlzLmNvbnRlbnREYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmhpZGRlbkZpZWxkcyA9IF8uY2hhaW4odGhpcy5maWVsZHNldC5maWVsZHMoKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZpZWxkID0+ICF0aGlzLmlzVmlzaWJsZShmaWVsZCkpXG4gICAgICAgICAgICAgICAgLm1hcChmaWVsZCA9PiBmaWVsZC5uYW1lKVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzVmlzaWJsZTogZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IHRoaXMuY29uZGl0aW9ucy5maW5kKFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9PiBjb25kaXRpb24uaWQgPT09IGZpZWxkLm5hbWVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChjb25kaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmllbGQuaGlkZV93aGVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISBjb25kaXRpb24ucGFzc2VzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29uZGl0aW9uLnBhc3NlcztcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0Q29uZGl0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMgPSB0aGlzLmZpZWxkc2V0LmZpZWxkcygpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmaWVsZCA9PiBmaWVsZC5zaG93X3doZW4gIT09IHVuZGVmaW5lZCB8fCBmaWVsZC5oaWRlX3doZW4gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAubWFwKGZpZWxkID0+IG5ldyBDb25kaXRpb24oZmllbGQubmFtZSwgdGhpcy5jb25kaXRpb24oZmllbGQpKSk7XG5cbiAgICAgICAgICAgIHRoaXMuZXZhbHVhdGVDb25kaXRpb25zKCk7XG5cbiAgICAgICAgICAgIHRoaXMuJHdhdGNoKCdjb250ZW50RGF0YScsIGRhdGEgPT4gdGhpcy5ldmFsdWF0ZUNvbmRpdGlvbnMoZGF0YSksIHsgZGVlcDogdHJ1ZSB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgICAgICBpZiAoZmllbGQuc2hvd193aGVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQuc2hvd193aGVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmllbGQuaGlkZV93aGVuO1xuICAgICAgICB9LFxuICAgIH0sXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9Db25kaXRpb25hbHMuanMiLCJjbGFzcyBDb25kaXRpb24ge1xuXG4gICAgY29uc3RydWN0b3IoaWQsIHJ1bGUpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnJ1bGUgPSBydWxlO1xuICAgICAgICB0aGlzLnBhc3NlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnZhbGlkYXRlID0gdGhpcy5fdmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBpc0phdmFzY3JpcHQoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5ydWxlID09PSAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBleGlzdHMoKSB7XG4gICAgICAgIGlmICghIFN0YXRhbWljLmNvbmRpdGlvbnMpIHJldHVybiBmYWxzZTtcblxuICAgICAgICByZXR1cm4gU3RhdGFtaWMuY29uZGl0aW9ucy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnJ1bGUpO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNKYXZhc2NyaXB0KCkgJiYgISB0aGlzLmV4aXN0cygpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBTdGF0YW1pYy5jb25kaXRpb25zLiR7dGhpcy5ydWxlfSBoYXNuJ3QgYmVlbiBpbXBsZW1lbnRlZC5gKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzSmF2YXNjcmlwdCgpICYmIHRoaXMuZXhpc3RzKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBTdGF0YW1pYy5jb25kaXRpb25zW3RoaXMucnVsZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGxldCBwYXNzZXMgPSBbXTtcblxuICAgICAgICAgICAgY29uc3Qgb3JzID0gT2JqZWN0LmtleXModGhpcy5ydWxlKS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aCgnb3JfJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gdGhpcy5ydWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9ycy5pbmNsdWRlcyhmaWVsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpbW1lZCA9IGZpZWxkLnN1YnN0cigzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVt0cmltbWVkXSA9PT0gdGhpcy5ydWxlW2ZpZWxkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoISBvcnMuaW5jbHVkZXMoZmllbGQpICYmIEFycmF5LmlzQXJyYXkodGhpcy5ydWxlW2ZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFzc2VzLnB1c2godGhpcy5ydWxlW2ZpZWxkXS5pbmNsdWRlcyhkYXRhW2ZpZWxkXSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJ1bGVbZmllbGRdID09PSAnbm90IG51bGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzZXMucHVzaChkYXRhW2ZpZWxkXSAhPT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzZXMucHVzaChkYXRhW2ZpZWxkXSA9PT0gdGhpcy5ydWxlW2ZpZWxkXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICEgcGFzc2VzLmluY2x1ZGVzKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25kaXRpb247XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9Db25kaXRpb24uanMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1idG4tZ3JvdXA+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBkcm9wZG93bi10b2dnbGVcXFwiIGRhdGEtdG9nZ2xlPWRyb3Bkb3duIGFyaWEtaGFzcG9wdXA9dHJ1ZSBhcmlhLWV4cGFuZGVkPWZhbHNlPiB7eyB0cmFuc2xhdGUoJ2NwLnVzZXJfb3B0aW9ucycpIH19Jm5ic3A7IDxzcGFuIGNsYXNzPWNhcmV0Pjwvc3Bhbj4gPC9idXR0b24+IDx1bCBjbGFzcz1kcm9wZG93bi1tZW51PiA8bGk+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9c2VuZFJlc2V0RW1haWw+IHt7IHN0YXR1cyA9PSAncGVuZGluZycgPyB0cmFuc2xhdGUoJ2NwLnNlbmRfYWN0aXZhdGlvbl9lbWFpbCcpIDogdHJhbnNsYXRlKCdjcC5zZW5kX3Bhc3N3b3JkX3Jlc2V0X2VtYWlsJykgfX0gPC9hPiA8L2xpPiA8bGkgdi1pZj1cXFwiY2FuKCdzdXBlcicpXFxcIj4gPGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1jb3B5UmVzZXRMaW5rPiB7eyBzdGF0dXMgPT0gJ3BlbmRpbmcnID8gdHJhbnNsYXRlKCdjcC5jb3B5X2FjdGl2YXRpb25fbGluaycpIDogdHJhbnNsYXRlKCdjcC5jb3B5X3Bhc3N3b3JkX3Jlc2V0X2xpbmsnKSB9fSA8L2E+IDwvbGk+IDwvdWw+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL3VzZXItb3B0aW9ucy50ZW1wbGF0ZS5odG1sXG4vLyBtb2R1bGUgaWQgPSAzNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxucmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcImlkXFxcIjoxLFxcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanMhc2Fzcy1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGUmaW5kZXg9MCEuL1N0YXR1c0ZpZWxkLnZ1ZVwiKVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vU3RhdHVzRmllbGQudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TdGF0dXNGaWVsZC52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvU3RhdHVzRmllbGQudnVlXG4vLyBtb2R1bGUgaWQgPSAzNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cIm1yLTJcIj5cblxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNpbmdsZUxvY2FsZSAmJiBhbGxvd1N0YXR1c2VzXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgQGNsaWNrLnByZXZlbnQ9XCJzdGF0dXMgPSAhc3RhdHVzXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtci04IGljb24tc3RhdHVzIHt7IHN0YXR1cyA/ICdpY29uLXN0YXR1cy1saXZlJyA6ICdpY29uLXN0YXR1cy1oaWRkZW4nIH19XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIHt7IHN0YXR1cyA/IHRyYW5zbGF0ZSgnY3AucHVibGlzaGVkJykgOiB0cmFuc2xhdGUoJ2NwLmRyYWZ0JykgfX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsb2NhbGUtc3RhdHVzLWZpZWxkXCIgOmNsYXNzPVwieyBvcGVuOiBpc1Nob3dpbmdMb2NhbGVzIH1cIiB2LWlmPVwibXVsdGlwbGVMb2NhbGVzXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVwiIEBjbGljay5wcmV2ZW50PVwiaXNTaG93aW5nTG9jYWxlcyA9ICFpc1Nob3dpbmdMb2NhbGVzXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtci04IGljb24tc3RhdHVzIHt7IHN0YXR1cyA/ICdpY29uLXN0YXR1cy1saXZlJyA6ICdpY29uLXN0YXR1cy1oaWRkZW4nIH19XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIHt7IGN1cnJlbnRMb2NhbGVMYWJlbCB9fVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2NhbGUtaXRlbVwiIHYtZm9yPVwibG9jYWxlIGluIGxvY2FsZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJsb2NhbGUuaXNfYWN0aXZlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiIWFsbG93U3RhdHVzZXNcIiBjbGFzcz1cImljb24tc3RhdHVzIGljb24tc3RhdHVzLWxpdmVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBsb2NhbGUubGFiZWwgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0b2dnbGUtZmllbGR0eXBlIHYtaWY9XCJhbGxvd1N0YXR1c2VzXCIgOmRhdGEuc3luYz1cInN0YXR1c1wiPjwvdG9nZ2xlLWZpZWxkdHlwZT5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi1zdGF0dXMge3sgc3RhdHVzQ2xhc3MobG9jYWxlKSB9fVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwibG9jYWxlLnVybFwiPnt7IGxvY2FsZS5sYWJlbCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cblxuICAgIC5sb2NhbGUtc3RhdHVzLWZpZWxkIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgICAgIC5kcm9wZG93bi1tZW51IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgICAgIH1cblxuICAgICAgICAubG9jYWxlLWl0ZW0ge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgcGFkZGluZzogNXB4IDE1cHggNXB4IDA7XG4gICAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2VlZTtcblxuICAgICAgICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmljb24tc3RhdHVzIHtcbiAgICAgICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogN3B4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC50b2dnbGUtZmllbGR0eXBlLXdyYXBwZXIge1xuICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAtNXB4O1xuICAgICAgICB9XG4gICAgICAgIC50b2dnbGUtY29udGFpbmVyIHtcbiAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgIGhlaWdodDogMTdweDtcbiAgICAgICAgICAgIHdpZHRoOiAzNHB4O1xuICAgICAgICB9XG4gICAgICAgIC50b2dnbGUta25vYiB7XG4gICAgICAgICAgICB3aWR0aDogMTZweDtcbiAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgfVxuICAgICAgICAudG9nZ2xlLXNsaWRlciB7XG4gICAgICAgICAgICB3aWR0aDogMTZweDtcbiAgICAgICAgICAgIGhlaWdodDogMTdweDtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgfVxuICAgICAgICAudG9nZ2xlLWNvbnRhaW5lci5vbiAudG9nZ2xlLXNsaWRlciB7XG4gICAgICAgICAgICB3aWR0aDogMzRweDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgICAubG9jYWxlLXN0YXR1cy1maWVsZCAuZHJvcGRvd24tbWVudSB7XG4gICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgcmlnaHQ6IGF1dG87XG4gICAgICAgIH1cbiAgICB9XG48L3N0eWxlPlxuXG5cbjxzY3JpcHQ+XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2xvY2FsZScsICdsb2NhbGVzJywgJ3N0YXR1cycsICdhbGxvd1N0YXR1c2VzJ10sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNTaG93aW5nTG9jYWxlczogZmFsc2UsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBzaW5nbGVMb2NhbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVzLmxlbmd0aCA9PT0gMTtcbiAgICAgICAgfSxcblxuICAgICAgICBtdWx0aXBsZUxvY2FsZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gISB0aGlzLnNpbmdsZUxvY2FsZTtcbiAgICAgICAgfSxcblxuICAgICAgICBjdXJyZW50TG9jYWxlTGFiZWwoKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5maW5kKHRoaXMubG9jYWxlcywgeyBuYW1lOiB0aGlzLmxvY2FsZSB9KS5sYWJlbDtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzdGF0dXNDbGFzcyhsb2NhbGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd1N0YXR1c2VzKSByZXR1cm4gJ2ljb24tc3RhdHVzLWxpdmUnO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmlzX3B1Ymxpc2hlZCA/ICdpY29uLXN0YXR1cy1saXZlJyA6ICdpY29uLXN0YXR1cy1oaWRkZW4nO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU3RhdHVzRmllbGQudnVlPzljMDEyMDFjIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPW1yLTI+IDx0ZW1wbGF0ZSB2LWlmPVxcXCJzaW5nbGVMb2NhbGUgJiYgYWxsb3dTdGF0dXNlc1xcXCI+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcInN0YXR1cyA9ICFzdGF0dXNcXFwiPiA8c3BhbiBjbGFzcz1cXFwibXItOCBpY29uLXN0YXR1cyB7eyBzdGF0dXMgPyAnaWNvbi1zdGF0dXMtbGl2ZScgOiAnaWNvbi1zdGF0dXMtaGlkZGVuJyB9fVxcXCI+PC9zcGFuPiB7eyBzdGF0dXMgPyB0cmFuc2xhdGUoJ2NwLnB1Ymxpc2hlZCcpIDogdHJhbnNsYXRlKCdjcC5kcmFmdCcpIH19IDwvYnV0dG9uPiA8L3RlbXBsYXRlPiA8ZGl2IGNsYXNzPWxvY2FsZS1zdGF0dXMtZmllbGQgOmNsYXNzPVxcXCJ7IG9wZW46IGlzU2hvd2luZ0xvY2FsZXMgfVxcXCIgdi1pZj1tdWx0aXBsZUxvY2FsZXM+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGVcXFwiIEBjbGljay5wcmV2ZW50PVxcXCJpc1Nob3dpbmdMb2NhbGVzID0gIWlzU2hvd2luZ0xvY2FsZXNcXFwiPiA8c3BhbiBjbGFzcz1cXFwibXItOCBpY29uLXN0YXR1cyB7eyBzdGF0dXMgPyAnaWNvbi1zdGF0dXMtbGl2ZScgOiAnaWNvbi1zdGF0dXMtaGlkZGVuJyB9fVxcXCI+PC9zcGFuPiB7eyBjdXJyZW50TG9jYWxlTGFiZWwgfX0gPC9idXR0b24+IDxkaXYgY2xhc3M9ZHJvcGRvd24tbWVudT4gPGRpdiBjbGFzcz1sb2NhbGUtaXRlbSB2LWZvcj1cXFwibG9jYWxlIGluIGxvY2FsZXNcXFwiPiA8dGVtcGxhdGUgdi1pZj1sb2NhbGUuaXNfYWN0aXZlPiA8c3BhbiB2LWlmPSFhbGxvd1N0YXR1c2VzIGNsYXNzPVxcXCJpY29uLXN0YXR1cyBpY29uLXN0YXR1cy1saXZlXFxcIj48L3NwYW4+IHt7IGxvY2FsZS5sYWJlbCB9fSA8dG9nZ2xlLWZpZWxkdHlwZSB2LWlmPWFsbG93U3RhdHVzZXMgOmRhdGEuc3luYz1zdGF0dXM+PC90b2dnbGUtZmllbGR0eXBlPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgdi1lbHNlPiA8c3BhbiBjbGFzcz1cXFwiaWNvbi1zdGF0dXMge3sgc3RhdHVzQ2xhc3MobG9jYWxlKSB9fVxcXCI+PC9zcGFuPiA8YSA6aHJlZj1sb2NhbGUudXJsPnt7IGxvY2FsZS5sYWJlbCB9fTwvYT4gPC90ZW1wbGF0ZT4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcHVibGlzaC9TdGF0dXNGaWVsZC52dWVcbi8vIG1vZHVsZSBpZCA9IDM2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9TZWN0aW9uLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2VjdGlvbi52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3B1Ymxpc2gvU2VjdGlvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDM2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZCBwLTBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuXG4gICAgICAgICAgICA8cHVibGlzaC1maWVsZHNcbiAgICAgICAgICAgICAgICA6ZmllbGRzPVwiZmllbGRzXCJcbiAgICAgICAgICAgICAgICA6ZGF0YS5zeW5jPVwiZGF0YVwiXG4gICAgICAgICAgICAgICAgOmVycm9ycz1cImVycm9yc1wiXG4gICAgICAgICAgICAgICAgOmhpZGRlbi1maWVsZHM9XCJoaWRkZW5GaWVsZHNcIlxuICAgICAgICAgICAgICAgIDphdXRvZm9jdXM9XCJhdXRvZm9jdXNcIlxuICAgICAgICAgICAgICAgIDpyZWd1bGFyLXRpdGxlLWZpZWxkPVwiIW1ldGFGaWVsZHNcIlxuICAgICAgICAgICAgICAgIDplbnY9XCJlbnZcIlxuICAgICAgICAgICAgPjwvcHVibGlzaC1maWVsZHM+XG5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgUHVibGlzaEZpZWxkczogcmVxdWlyZSgnLi9GaWVsZHMudnVlJylcbiAgICB9LFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgc2VjdGlvbjogT2JqZWN0LFxuICAgICAgICBmaWVsZHNldDogT2JqZWN0LFxuICAgICAgICBkYXRhOiBPYmplY3QsXG4gICAgICAgIGVycm9yczogT2JqZWN0LFxuICAgICAgICBoaWRkZW5GaWVsZHM6IEFycmF5LFxuICAgICAgICBhdXRvZm9jdXM6IEJvb2xlYW4sXG4gICAgICAgIG1ldGFGaWVsZHM6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9LFxuICAgICAgICBlbnY6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0OiB7fSB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaGFuZGxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VjdGlvbi5oYW5kbGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmllbGRzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VjdGlvbi5maWVsZHM7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU2VjdGlvbi52dWU/ZmY1ODEwMDIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9XFxcImNhcmQgcC0wXFxcIj4gPGRpdiBjbGFzcz1jYXJkLWJvZHk+IDxwdWJsaXNoLWZpZWxkcyA6ZmllbGRzPWZpZWxkcyA6ZGF0YS5zeW5jPWRhdGEgOmVycm9ycz1lcnJvcnMgOmhpZGRlbi1maWVsZHM9aGlkZGVuRmllbGRzIDphdXRvZm9jdXM9YXV0b2ZvY3VzIDpyZWd1bGFyLXRpdGxlLWZpZWxkPSFtZXRhRmllbGRzIDplbnY9ZW52PjwvcHVibGlzaC1maWVsZHM+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL1NlY3Rpb24udnVlXG4vLyBtb2R1bGUgaWQgPSAzNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPVxcXCJjb250ZW50LXR5cGUte3sgY29udGVudFR5cGUgfX1cXFwiPiA8ZGl2IGNsYXNzPXB1Ymxpc2gtZm9ybSBpZD1wdWJsaXNoLWZvcm0+IDxkaXYgY2xhc3M9XFxcInB1Ymxpc2gtZXJyb3JzIGFsZXJ0IGFsZXJ0LWRhbmdlclxcXCIgdi1pZj1oYXNFcnJvcnM+IDx1bD4gPGxpIHYtZm9yPVxcXCJlcnJvciBpbiBlcnJvcnNcXFwiPnt7IGVycm9yIH19PC9saT4gPC91bD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZsZXggZmxleC13cmFwIGl0ZW1zLWNlbnRlciB3LWZ1bGwgc3RpY2t5XFxcIiBpZD1wdWJsaXNoLWNvbnRyb2xzPiA8aDEgY2xhc3M9XFxcInctZnVsbCBteS0xIHRleHQtY2VudGVyIGxnOnRleHQtbGVmdCBsZzpmbGV4LTFcXFwiPiA8c3Bhbj57eyB0aXRsZSB9fTwvc3Bhbj4gPC9oMT4gPGRpdiBjbGFzcz1cXFwiY29udHJvbHMgZmxleCBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIHctZnVsbCBsZzp3LWF1dG8ganVzdGlmeS1jZW50ZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJtci0yIG15LTEgZnMtMTMgb3BhY2l0eS01MFxcXCIgdi1pZj1cXFwiISBjYW5FZGl0XFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1sb2NrXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AucmVhZF9vbmx5X21vZGUnKSB9fSA8L2Rpdj4gPHN0YXR1cy1maWVsZCBjbGFzcz1teS0xIHYtaWY9c2hvdWxkU2hvd1N0YXR1cyA6bG9jYWxlPWxvY2FsZSA6bG9jYWxlcz1sb2NhbGVzIDphbGxvdy1zdGF0dXNlcz1hbGxvd1N0YXR1c2VzIDpzdGF0dXMuc3luYz1mb3JtRGF0YS5zdGF0dXM+PC9zdGF0dXMtZmllbGQ+IDx1c2VyLW9wdGlvbnMgdi1pZj1cXFwiaXNVc2VyICYmICFpc05ld1xcXCIgOnVzZXJuYW1lPXNsdWcgOnN0YXR1cz1jb250ZW50RGF0YS5zdGF0dXMgY2xhc3M9bXItMj48L3VzZXItb3B0aW9ucz4gPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwIG15LTEgbXItMlxcXCIgdi1pZj1cXFwiJHBhcmVudC5pc1B1Ymxpc2hQYWdlICYmIHVybFxcXCI+IDx0ZW1wbGF0ZSB2LWlmPXN0YXRpY0NhY2hpbmdFbmFibGVkPiA8YSBocmVmPVxcXCJ7eyB1cmwgfX1cXFwiIHRhcmdldD1fYmxhbmsgY2xhc3M9YnRuPnt7IHRyYW5zbGF0ZSgnY3AudmlzaXRfdXJsJykgfX08L2E+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWVsc2U+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9YnRuIEBjbGljay5wcmV2ZW50PSRwYXJlbnQucHJldmlldz57eyB0cmFuc2xhdGUoJ2NwLnNuZWFrX3BlZWsnKSB9fTwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gZHJvcGRvd24tdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1kcm9wZG93biBhcmlhLWhhc3BvcHVwPXRydWUgYXJpYS1leHBhbmRlZD1mYWxzZT4gPHNwYW4gY2xhc3M9Y2FyZXQ+PC9zcGFuPiA8c3BhbiBjbGFzcz1zci1vbmx5Pnt7IHRyYW5zbGF0ZSgnY3AudG9nZ2xlX2Ryb3Bkb3duJykgfX08L3NwYW4+IDwvYnV0dG9uPiA8dWwgY2xhc3M9ZHJvcGRvd24tbWVudT4gPGxpPjxhIGhyZWY9XFxcInt7IHVybCB9fVxcXCIgdGFyZ2V0PV9ibGFuaz57eyB0cmFuc2xhdGUoJ2NwLnZpc2l0X3VybCcpIH19PC9hPjwvbGk+IDwvdWw+IDwvdGVtcGxhdGU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgYnRuLWdyb3VwLXByaW1hcnkgbXktMVxcXCIgdi1pZj1jYW5FZGl0PiA8YnV0dG9uIHYtaWY9XFxcInB1Ymxpc2hUeXBlID09PSAnc2F2ZSdcXFwiIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljaz1wdWJsaXNoV2l0aG91dENvbnRpbnVpbmcgOmRpc2FibGVkPXNhdmluZz57eyB0cmFuc2xhdGUoJ2NwLnNhdmUnKSB9fTwvYnV0dG9uPiA8YnV0dG9uIHYtaWY9XFxcInB1Ymxpc2hUeXBlID09PSAnY29udGludWUnXFxcIiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBAY2xpY2s9cHVibGlzaEFuZENvbnRpbnVlIDpkaXNhYmxlZD1zYXZpbmc+e3sgdHJhbnNsYXRlKCdjcC5zYXZlX2FuZF9jb250aW51ZScpIH19PC9idXR0b24+IDxidXR0b24gdi1pZj1cXFwiYWxsb3dTYXZlQW5kQWRkQW5vdGhlciAmJiBwdWJsaXNoVHlwZSA9PT0gJ2Fub3RoZXInXFxcIiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBAY2xpY2s9cHVibGlzaEFuZEFub3RoZXIgOmRpc2FibGVkPXNhdmluZz57eyB0cmFuc2xhdGUoJ2NwLnNhdmVfYW5kX2Fub3RoZXInKSB9fTwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgZHJvcGRvd24tdG9nZ2xlXFxcIiBkYXRhLXRvZ2dsZT1kcm9wZG93biBhcmlhLWhhc3BvcHVwPXRydWUgYXJpYS1leHBhbmRlZD1mYWxzZSA6ZGlzYWJsZWQ9c2F2aW5nPiA8c3BhbiBjbGFzcz1jYXJldD48L3NwYW4+IDxzcGFuIGNsYXNzPXNyLW9ubHk+e3sgdHJhbnNsYXRlKCdjcC50b2dnbGVfZHJvcGRvd24nKSB9fTwvc3Bhbj4gPC9idXR0b24+IDx1bCBjbGFzcz1kcm9wZG93bi1tZW51PiA8bGkgdi1pZj1cXFwicHVibGlzaFR5cGUgIT09ICdjb250aW51ZSdcXFwiPjxhIGlkPXB1Ymxpc2gtY29udGludWUgQGNsaWNrPXB1Ymxpc2hBbmRDb250aW51ZT57eyB0cmFuc2xhdGUoJ2NwLnNhdmVfYW5kX2NvbnRpbnVlJykgfX08L2E+PC9saT4gPGxpIHYtaWY9XFxcInB1Ymxpc2hUeXBlICE9PSAnc2F2ZSdcXFwiPjxhIEBjbGljaz1wdWJsaXNoV2l0aG91dENvbnRpbnVpbmc+e3sgdHJhbnNsYXRlKCdjcC5zYXZlJykgfX08L2E+PC9saT4gPGxpIHYtaWY9XFxcImFsbG93U2F2ZUFuZEFkZEFub3RoZXIgJiYgcHVibGlzaFR5cGUgIT09ICdhbm90aGVyJ1xcXCI+PGEgQGNsaWNrPXB1Ymxpc2hBbmRBbm90aGVyPnt7IHRyYW5zbGF0ZSgnY3Auc2F2ZV9hbmRfYW5vdGhlcicpIH19PC9hPjwvbGk+IDwvdWw+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgOmNsYXNzPVxcXCJbICd3LWZ1bGwnLCB7ICdweC0xIG1kOnB4LTMnOiAhaXNTbmVha1BlZWtpbmcgfSBdXFxcIj4gPGRpdiA6Y2xhc3M9XFxcIlsgJ3B1Ymxpc2gtdGFicyB0YWJzJywgeyAnbWItMic6ICFpc1NuZWFrUGVla2luZyB9IF1cXFwiIHYtc2hvdz1cXFwibWFpblNlY3Rpb25zLmxlbmd0aCA+IDFcXFwiPiA8YSB2LWZvcj1cXFwic2VjdGlvbiBpbiBtYWluU2VjdGlvbnNcXFwiIDpjbGFzcz1cXFwieyAnYWN0aXZlJzogYWN0aXZlU2VjdGlvbiA9PT0gc2VjdGlvbi5oYW5kbGUsICdoYXMtZXJyb3InOiBzZWN0aW9uSGFzRXJyb3Ioc2VjdGlvbi5oYW5kbGUpIH1cXFwiIEBjbGljaz1cXFwiYWN0aXZlU2VjdGlvbiA9IHNlY3Rpb24uaGFuZGxlXFxcIiB2LXRleHQ9c2VjdGlvbkRpc3BsYXkoc2VjdGlvbik+IDwvYT4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZsZXgganVzdGlmeS1iZXR3ZWVuXFxcIj4gPGRpdiBjbGFzcz13LWZ1bGw+IDxwdWJsaXNoLXNlY3Rpb24gdi1mb3I9XFxcIihpLCBzZWN0aW9uKSBpbiBtYWluU2VjdGlvbnNcXFwiIHYtc2hvdz1cXFwiYWN0aXZlU2VjdGlvbiA9PT0gc2VjdGlvbi5oYW5kbGVcXFwiIDpzZWN0aW9uPXNlY3Rpb24gOmZpZWxkc2V0PWZpZWxkc2V0IDplcnJvcnM9ZXJyb3JzIDpoaWRkZW4tZmllbGRzPWhpZGRlbkZpZWxkcyA6ZGF0YS5zeW5jPWZvcm1EYXRhLmZpZWxkcyA6YXV0b2ZvY3VzPVxcXCJpID09PSAwXFxcIiA6bWV0YS1maWVsZHM9bWV0YUZpZWxkcyA6ZW52PWV4dHJhLmVudj48L3B1Ymxpc2gtc2VjdGlvbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInB1Ymxpc2gtc2lkZWJhciBtbC0zMlxcXCIgdi1zaG93PXNob3VsZFNob3dTaWRlYmFyPiA8cHVibGlzaC1zZWN0aW9uIDpzZWN0aW9uPXNpZGViYXJTZWN0aW9uIDpmaWVsZHNldD1maWVsZHNldCA6ZXJyb3JzPWVycm9ycyA6aGlkZGVuLWZpZWxkcz1oaWRkZW5GaWVsZHMgOmRhdGEuc3luYz1mb3JtRGF0YS5maWVsZHM+PC9wdWJsaXNoLXNlY3Rpb24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wdWJsaXNoL1B1Ymxpc2gudnVlXG4vLyBtb2R1bGUgaWQgPSAzNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vVHlwZWFoZWFkLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVHlwZWFoZWFkLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvdHlwZWFoZWFkL1R5cGVhaGVhZC52dWVcbi8vIG1vZHVsZSBpZCA9IDM3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiBpZD1cInR5cGVhaGVhZFwiIHYtY2xvYWsgOmNsYXNzPVwieydkaXJ0eSc6IGlzRGlydHl9XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tbWFnbmlmeWluZy1nbGFzc1wiIEBjbGljaz1cImZvY3VzXCI+PC9pPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDx0eXBlYWhlYWQtaW5wdXQgY2xhc3M9XCJzZWFyY2ggYWx0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImdsb2JhbC1zZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpxdWVyeS5zeW5jPVwicXVlcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvbi11cD1cInVwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b24tZG93bj1cImRvd25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvbi1oaXQ9XCJoaXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvbi1yZXNldD1cInJlc2V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAa2V5dXAuZXNjPVwicmVzZXRcIlxuICAgICAgICAgICAgPjwvdHlwZWFoZWFkLWlucHV0PlxuXG4gICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1jcm9zc1wiIHYtc2hvdz1cImlzRGlydHkgfHwgbG9hZGluZ1wiIEBjbGljaz1cInJlc2V0XCI+PC9pPlxuXG4gICAgICAgICAgICA8dWwgdi1zaG93PVwiaGFzSXRlbXNcIj5cbiAgICAgICAgICAgICAgICA8bGkgdi1mb3I9XCJpdGVtIGluIGl0ZW1zXCIgOmNsYXNzPVwieydhY3RpdmUnOiBpc0FjdGl2ZSgkaW5kZXgpfVwiIEBtb3VzZWRvd249XCJoaXRcIiBAbW91c2Vtb3ZlPVwic2V0QWN0aXZlKCRpbmRleClcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZVwiIHYtaHRtbD1cIml0ZW0udGl0bGVcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidXJsXCIgdi1odG1sPVwiaXRlbS51cmxcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgbGltaXQ6IE51bWJlcixcbiAgICAgICAgc3JjOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgcXVlcnk6ICcnLFxuICAgICAgICAgICAgY3VycmVudDogLTEsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ3R5cGVhaGVhZC1pbnB1dCc6IHJlcXVpcmUoJy4vSW5wdXQudnVlJylcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzSXRlbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNFbXB0eTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLnF1ZXJ5ICYmICF0aGlzLmxvYWRpbmc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNEaXJ0eTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5xdWVyeSAmJiAhdGhpcy5sb2FkaW5nO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucXVlcnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldCh0aGlzLnNyYywgT2JqZWN0LmFzc2lnbih7cTp0aGlzLnF1ZXJ5fSwgdGhpcy5kYXRhKSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSAhIXRoaXMubGltaXQgPyBkYXRhLnNsaWNlKDAsIHRoaXMubGltaXQpIDogZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldEFjdGl2ZTogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBpbmRleDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0FjdGl2ZTogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50ID09IGluZGV4O1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoJyNnbG9iYWwtc2VhcmNoJykuZm9jdXMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0l0ZW1zKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0aGlzLml0ZW1zW3RoaXMuY3VycmVudF0uZWRpdF91cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQgPiAwKSB0aGlzLmN1cnJlbnQtLTtcbiAgICAgICAgfSxcblxuICAgICAgICBkb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50IDwgdGhpcy5pdGVtcy5sZW5ndGgtMSkgdGhpcy5jdXJyZW50Kys7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLiR3YXRjaCgncXVlcnknLCBmdW5jdGlvbihuZXd2YWwsIG9sZHZhbCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFR5cGVhaGVhZC52dWU/MDI2NmMzMDEiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9JbnB1dC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0lucHV0LnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvdHlwZWFoZWFkL0lucHV0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxuICAgICAgICB2LW1vZGVsPVwicXVlcnlcIlxuICAgICAgICBAa2V5ZG93bi51cD1cInVwXCJcbiAgICAgICAgQGtleWRvd24uZG93bj1cImRvd25cIlxuICAgICAgICBAa2V5ZG93bi5lbnRlcj1cImhpdFwiXG4gICAgICAgIEBrZXlkb3duLmVzYz1cInJlc2V0XCJcbiAgICAgICAgQGJsdXI9XCJyZXNldFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwie3sgdHJhbnNsYXRlKCdjcC5zZWFyY2gnKSB9fS4uLlwiXG4gICAgLz5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ3F1ZXJ5JywgJ29uVXAnLCAnb25Eb3duJywgJ29uSGl0JywgJ29uUmVzZXQnXSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICB1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm9uVXAoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub25Eb3duKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMub25IaXQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLm9uUmVzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIElucHV0LnZ1ZT85ZWE2MmUwYSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGlucHV0IHR5cGU9dGV4dCBhdXRvY29tcGxldGU9b2ZmIHYtbW9kZWw9cXVlcnkgQGtleWRvd24udXA9dXAgQGtleWRvd24uZG93bj1kb3duIEBrZXlkb3duLmVudGVyPWhpdCBAa2V5ZG93bi5lc2M9cmVzZXQgQGJsdXI9cmVzZXQgcGxhY2Vob2xkZXI9XFxcInt7IHRyYW5zbGF0ZSgnY3Auc2VhcmNoJykgfX0uLi5cXFwiLz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy90eXBlYWhlYWQvSW5wdXQudnVlXG4vLyBtb2R1bGUgaWQgPSAzNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2PiA8ZGl2IGlkPXR5cGVhaGVhZCB2LWNsb2FrIDpjbGFzcz1cXFwieydkaXJ0eSc6IGlzRGlydHl9XFxcIj4gPGRpdiBjbGFzcz1zdGF0ZS1jb250YWluZXI+IDxpIGNsYXNzPVxcXCJpY29uIGljb24tbWFnbmlmeWluZy1nbGFzc1xcXCIgQGNsaWNrPWZvY3VzPjwvaT4gPC9kaXY+IDx0eXBlYWhlYWQtaW5wdXQgY2xhc3M9XFxcInNlYXJjaCBhbHRcXFwiIGlkPWdsb2JhbC1zZWFyY2ggOnF1ZXJ5LnN5bmM9cXVlcnkgOm9uLXVwPXVwIDpvbi1kb3duPWRvd24gOm9uLWhpdD1oaXQgOm9uLXJlc2V0PXJlc2V0IEBrZXl1cC5lc2M9cmVzZXQ+PC90eXBlYWhlYWQtaW5wdXQ+IDxpIGNsYXNzPVxcXCJpY29uIGljb24tY3Jvc3NcXFwiIHYtc2hvdz1cXFwiaXNEaXJ0eSB8fCBsb2FkaW5nXFxcIiBAY2xpY2s9cmVzZXQ+PC9pPiA8dWwgdi1zaG93PWhhc0l0ZW1zPiA8bGkgdi1mb3I9XFxcIml0ZW0gaW4gaXRlbXNcXFwiIDpjbGFzcz1cXFwieydhY3RpdmUnOiBpc0FjdGl2ZSgkaW5kZXgpfVxcXCIgQG1vdXNlZG93bj1oaXQgQG1vdXNlbW92ZT1zZXRBY3RpdmUoJGluZGV4KT4gPHNwYW4gY2xhc3M9dGl0bGUgdi1odG1sPWl0ZW0udGl0bGU+PC9zcGFuPiA8c3BhbiBjbGFzcz11cmwgdi1odG1sPWl0ZW0udXJsPjwvc3Bhbj4gPC9saT4gPC91bD4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3R5cGVhaGVhZC9UeXBlYWhlYWQudnVlXG4vLyBtb2R1bGUgaWQgPSAzNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdwZXJtaXNzaW9ucyc6IHJlcXVpcmUoJy4vc3RlcHMvcGVybWlzc2lvbnMnKSxcbiAgICAgICAgJ2xpY2Vuc2Uta2V5JzogcmVxdWlyZSgnLi9zdGVwcy9saWNlbnNla2V5JyksXG4gICAgICAgICdzZXR0aW5ncyc6IHJlcXVpcmUoJy4vc3RlcHMvc2V0dGluZ3MnKSxcbiAgICAgICAgJ3VzZXInOiByZXF1aXJlKCcuL3N0ZXBzL3VzZXInKSxcbiAgICAgICAgJ2xvZ2luJzogcmVxdWlyZSgnLi9zdGVwcy9sb2dpbicpXG4gICAgfSxcblxuICAgIHByb3BzOiBbJ2NwVXJsJ10sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0ZXBzOiB7XG4gICAgICAgICAgICAgICAgJ3Blcm1pc3Npb25zJzogeyBsYWJlbDogJ1Blcm1pc3Npb25zJywgc3RhdHVzOiAncGVuZGluZycgfSxcbiAgICAgICAgICAgICAgICAnbGljZW5zZUtleSc6IHsgbGFiZWw6ICdMaWNlbnNlIEtleScsIHN0YXR1czogJ3BlbmRpbmcnIH0sXG4gICAgICAgICAgICAgICAgJ3NldHRpbmdzJzogeyBsYWJlbDogJ1NldHRpbmdzJywgc3RhdHVzOiAncGVuZGluZycgfSxcbiAgICAgICAgICAgICAgICAndXNlcic6IHsgbGFiZWw6ICdDcmVhdGUgYSBVc2VyJywgc3RhdHVzOiAncGVuZGluZycgfSxcbiAgICAgICAgICAgICAgICAnbG9naW4nOiB7IGxhYmVsOiAnTG9nIGluJywgc3RhdHVzOiAncGVuZGluZycgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN1cnJlbnRTdGVwOiAncGVybWlzc2lvbnMnLFxuICAgICAgICAgICAgdXNlcklkOiBudWxsLFxuICAgICAgICAgICAgY2xlYW51cEZhaWxlZDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAuZ2V0KCcvaW5zdGFsbGVyL2NvbXBsZXRlJykuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRoaXMuY3BVcmw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwRmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cmw6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgLy8gZ3JhYiB0aGUgY3Agcm9vdCwgYW5kIHBvcCBvZmYgdGhlIGxhc3Qgc2VnbWVudCAodXN1YWxseSBgY3BgKVxuICAgICAgICAgICAgdmFyIHJvb3QgPSBTdGF0YW1pYy5jcFJvb3Quc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIHJvb3QucG9wKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByb290LmpvaW4oJy8nKSArICcvaW5zdGFsbGVyLycgKyB1cmw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdwZXJtaXNzaW9ucy5zdGF0dXMnOiBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RlcHMucGVybWlzc2lvbnMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICAncGVybWlzc2lvbnMuY29tcGxldGUnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSAnbGljZW5zZUtleSc7XG4gICAgICAgIH0sXG4gICAgICAgICdsaWNlbnNla2V5LmNvbXBsZXRlJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzLmxpY2Vuc2VLZXkuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9ICdzZXR0aW5ncyc7XG4gICAgICAgIH0sXG4gICAgICAgICdzZXR0aW5ncy5jb21wbGV0ZSc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGVwcy5zZXR0aW5ncy5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gJ3VzZXInO1xuICAgICAgICB9LFxuICAgICAgICAndXNlci5jb21wbGV0ZSc6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZXBzLnVzZXIuc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICAgICAgdGhpcy51c2VySWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSAnbG9naW4nO1xuICAgICAgICB9LFxuICAgICAgICAnbG9naW4uY29tcGxldGUnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vXG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9pbnN0YWxsZXIuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL3Blcm1pc3Npb25zLnRlbXBsYXRlLmh0bWwnKSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IG51bGwsXG4gICAgICAgICAgICB1bndyaXRhYmxlOiBbXVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmxvYWRpbmcgJiYgIXRoaXMuc3VjY2VzcztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJGh0dHAuZ2V0KHRoaXMuJHBhcmVudC51cmwoJ3Blcm1pc3Npb25zJykpLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc3VjY2VzcyA9IHJlc3BvbnNlLnN1Y2Nlc3M7XG4gICAgICAgICAgICB0aGlzLnVud3JpdGFibGUgPSByZXNwb25zZS51bndyaXRhYmxlO1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICghIHRoaXMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdwZXJtaXNzaW9ucy5zdGF0dXMnLCAnZmFpbHVyZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdwZXJtaXNzaW9ucy5zdGF0dXMnLCAnc3VjY2VzcycpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3Blcm1pc3Npb25zLmNvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9wZXJtaXNzaW9ucy5qcyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWNhcmQ+IDxkaXYgY2xhc3M9aGVhZD4gPGgxPnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLnBlcm1pc3Npb25zJywgMikgfX08L2gxPiA8L2Rpdj4gPGhyPiA8ZGl2IHYtaWY9bG9hZGluZyBjbGFzcz1cXFwibG9hZGluZyBsb2FkaW5nLWJhc2ljXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmNoZWNraW5nX2ZvbGRlcl9wZXJtaXNzaW9ucycpIH19IDwvZGl2PiA8ZGl2IHYtaWY9ZmFpbHVyZT4gPHA+e3sgdHJhbnNsYXRlKCdjcC5mb2xkZXJzX3Vud3JpdGFibGUnKSB9fTwvcD4gPHVsPiA8bGkgdi1mb3I9XFxcInBhdGggaW4gdW53cml0YWJsZVxcXCI+PGNvZGU+e3sgcGF0aCB9fTwvY29kZT48L2xpPiA8L3VsPiA8L2Rpdj4gPHRlbXBsYXRlIHYtaWY9c3VjY2Vzcz4gPHA+e3sgdHJhbnNsYXRlKCdjcC5mb2xkZXJzX3Blcm1pc3Npb25fdmFsaWQnKSB9fTwvcD4gPC90ZW1wbGF0ZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9wZXJtaXNzaW9ucy50ZW1wbGF0ZS5odG1sXG4vLyBtb2R1bGUgaWQgPSAzODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9saWNlbnNla2V5LnRlbXBsYXRlLmh0bWwnKSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgIGtleTogbnVsbCxcbiAgICAgICAgICAgIGtleVN1Ym1pdHRlZDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBsaWNlbnNlS2V5SW5zdHJ1Y3Rpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUoJ2NwLmxpY2Vuc2Vfa2V5X2luc3RydWN0aW9ucycsIHtcbiAgICAgICAgICAgICAgJ2xpY2Vuc2VzJzogJ2h0dHBzOi8vYWNjb3VudC5zdGF0YW1pYy5jb20vbGljZW5zZXMnLFxuICAgICAgICAgICAgICAnYnV5X2xpY2Vuc2UnOiAnaHR0cHM6Ly9zdG9yZS5zdGF0YW1pYy5jb20nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNvbnRpbnVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdsaWNlbnNla2V5LmNvbXBsZXRlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KHRoaXMuJHBhcmVudC51cmwoJ2xpY2Vuc2UnKSwge1xuICAgICAgICAgICAgICAgIGtleTogdGhpcy5rZXlcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MgPSByZXNwb25zZS5zdWNjZXNzXG4gICAgICAgICAgICAgICAgdGhpcy5rZXkgPSByZXNwb25zZS5rZXk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5U3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnbGljZW5zZWtleS5zdGF0dXMnLCAnc3VjY2VzcycpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRpbnVlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9saWNlbnNla2V5LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9Y2FyZD4gPGRpdiBjbGFzcz1oZWFkPiA8aDE+e3sgdHJhbnNsYXRlKCdjcC5saWNlbnNlX2tleScpIH19PC9oMT4gPC9kaXY+IDxocj4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9XFxcImxvYWRpbmcgbG9hZGluZy1iYXNpY1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cXFwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5jaGVja2luZ19saWNlbnNlX2tleScpIH19IDwvZGl2PiA8cCB2LWlmPXZhbGlkPnt7IHRyYW5zbGF0ZSgnY3AubGljZW5zZV92YWxpZCcpIH19PC9wPiA8dGVtcGxhdGUgdi1pZj1cXFwiIWxvYWRpbmcgJiYgIXZhbGlkXFxcIj4gPHAgdi1odG1sPWxpY2Vuc2VLZXlJbnN0cnVjdGlvbnM+PC9wPiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHB4LTBcXFwiPiA8cCB2LWlmPVxcXCIhdmFsaWQgJiYga2V5U3VibWl0dGVkXFxcIiBjbGFzcz1saWNlbnNlLWVycm9yPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmxpY2Vuc2VfaW52YWxpZCcpIH19PC9zbWFsbD4gPC9wPiA8ZGl2IGNsYXNzPXJvdz4gPGRpdiBjbGFzcz1jb2wtc20tOT4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1rZXkgLz4gPC9kaXY+IDxkaXYgY2xhc3M9Y29sLXNtLTM+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2tcXFwiIEBjbGljaz12YWxpZGF0ZSA6ZGlzYWJsZWQ9IWtleT57eyB0cmFuc2xhdGUoJ2NwLnNhdmUnKSB9fTwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8aHI+IDxkaXYgY2xhc3M9dHJpYWw+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9Y29udGludWUgY2xhc3M9YnRuPnt7IHRyYW5zbGF0ZSgnY3AuY29udGludWVfaW5fdHJpYWxfbW9kZScpIH19PC9hPiA8YSBocmVmPWh0dHBzOi8vc3RhdGFtaWMuY29tL3RyeSBjbGFzcz13aGF0IHRhcmdldD1fYmxhbms+e3sgdHJhbnNsYXRlKCdjcC53aGF0c190aGlzJykgfX08L2E+IDwvZGl2PiA8L3RlbXBsYXRlPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW5zdGFsbGVyL3N0ZXBzL2xpY2Vuc2VrZXkudGVtcGxhdGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vc2V0dGluZ3MudGVtcGxhdGUuaHRtbCcpLFxuXG4gICAgcHJvcHM6IFsndGltZXpvbmUnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdWNjZXNzOiBudWxsLFxuICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgbG9jYWxlczogW3tcbiAgICAgICAgICAgICAgICBsb2NhbGU6ICdlbicsXG4gICAgICAgICAgICAgICAgZnVsbDogJ2VuX1VTJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnRW5nbGlzaCcsXG4gICAgICAgICAgICAgICAgdXJsOiBkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4rJy8nXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIHRpbWV6b25lczogdGhpcy5nZXRUaW1lem9uZXMoKVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGZvcm1EYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGVidWc6IHRoaXMuZGVidWcsXG4gICAgICAgICAgICAgICAgbG9jYWxlczogdGhpcy5sb2NhbGVzLFxuICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lWzBdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh0aGlzLiRwYXJlbnQudXJsKCdzZXR0aW5ncycpLCB0aGlzLmZvcm1EYXRhKS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzID0gcmVzcG9uc2Uuc3VjY2VzcztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdzZXR0aW5ncy5jb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFRpbWV6b25lcygpIHtcbiAgICAgICAgICAgIGxldCB0aW1lem9uZXMgPSBbXTtcblxuICAgICAgICAgICAgXy5lYWNoKHJlcXVpcmUoJy4vdGltZXpvbmVzJyksICh0eikgPT4ge1xuICAgICAgICAgICAgICAgIHRpbWV6b25lcy5wdXNoKHsgdGV4dDogdHosIHZhbHVlOiB0eiB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGltZXpvbmVzO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9zZXR0aW5ncy5qcyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJjYXJkIGluc3RhbGwtc2V0dGluZ3NcXFwiPiA8ZGl2IGNsYXNzPWhlYWQ+IDxoMT57eyB0cmFuc2xhdGVfY2hvaWNlKCdjcC5zZXR0aW5ncycsIDIpIH19PC9oMT4gPC9kaXY+IDxocj4gPHRlbXBsYXRlIHYtaWY9IXN1Y2Nlc3M+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgcHgtMFxcXCI+IDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmxvY2FsZXNfYW5kX3VybHMnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPiB7eyB0cmFuc2xhdGUoJ2NwLnNldHRpbmdzX2xvY2FsZXNfaW5zdHJ1Y3Rpb25zJykgfX0gPC9zbWFsbD4gPGxvY2FsZV9zZXR0aW5ncy1maWVsZHR5cGUgOmRhdGE9bG9jYWxlcyA6aW5kZXgtcGhwLXdhcm5pbmc9dHJ1ZT48L2xvY2FsZV9zZXR0aW5ncy1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHB4LTBcXFwiPiA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5kZWJ1Z19tb2RlJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz4ge3sgdHJhbnNsYXRlKCdjcC5zZXR0aW5nc19kZWJ1Z19tb2RlX2luc3RydWN0aW9ucycpIH19IDwvc21hbGw+IDx0b2dnbGUtZmllbGR0eXBlIDpkYXRhLnN5bmM9ZGVidWc+PC90b2dnbGUtZmllbGR0eXBlPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBweC0wXFxcIj4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AudGltZXpvbmUnKSB9fTwvbGFiZWw+IDxzdWdnZXN0LWZpZWxkdHlwZSA6ZGF0YS5zeW5jPXRpbWV6b25lIDpzdWdnZXN0aW9ucy1wcm9wPXRpbWV6b25lcyA6Y29uZmlnPSd7IFxcXCJtYXhfaXRlbXNcXFwiOiAxIH0nPjwvc3VnZ2VzdC1maWVsZHR5cGU+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljaz1zdWJtaXQgOmRpc2FibGVkPWxvYWRpbmc+e3sgdHJhbnNsYXRlKCdjcC5zYXZlJykgfX08L2J1dHRvbj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHYtaWY9c3VjY2Vzcz4gPHA+e3sgdHJhbnNsYXRlKCdjcC5zZXR0aW5nc191cGRhdGVkJykgfX08L3A+IDwvdGVtcGxhdGU+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvc2V0dGluZ3MudGVtcGxhdGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gMzg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gW1xuICAgIFwiVVRDXCIsXG4gICAgXCJBZnJpY2EvQWJpZGphblwiLFxuICAgIFwiQWZyaWNhL0FjY3JhXCIsXG4gICAgXCJBZnJpY2EvQWRkaXNfQWJhYmFcIixcbiAgICBcIkFmcmljYS9BbGdpZXJzXCIsXG4gICAgXCJBZnJpY2EvQXNtYXJhXCIsXG4gICAgXCJBZnJpY2EvQmFtYWtvXCIsXG4gICAgXCJBZnJpY2EvQmFuZ3VpXCIsXG4gICAgXCJBZnJpY2EvQmFuanVsXCIsXG4gICAgXCJBZnJpY2EvQmlzc2F1XCIsXG4gICAgXCJBZnJpY2EvQmxhbnR5cmVcIixcbiAgICBcIkFmcmljYS9CcmF6emF2aWxsZVwiLFxuICAgIFwiQWZyaWNhL0J1anVtYnVyYVwiLFxuICAgIFwiQWZyaWNhL0NhaXJvXCIsXG4gICAgXCJBZnJpY2EvQ2FzYWJsYW5jYVwiLFxuICAgIFwiQWZyaWNhL0NldXRhXCIsXG4gICAgXCJBZnJpY2EvQ29uYWtyeVwiLFxuICAgIFwiQWZyaWNhL0Rha2FyXCIsXG4gICAgXCJBZnJpY2EvRGFyX2VzX1NhbGFhbVwiLFxuICAgIFwiQWZyaWNhL0RqaWJvdXRpXCIsXG4gICAgXCJBZnJpY2EvRG91YWxhXCIsXG4gICAgXCJBZnJpY2EvRWxfQWFpdW5cIixcbiAgICBcIkFmcmljYS9GcmVldG93blwiLFxuICAgIFwiQWZyaWNhL0dhYm9yb25lXCIsXG4gICAgXCJBZnJpY2EvSGFyYXJlXCIsXG4gICAgXCJBZnJpY2EvSm9oYW5uZXNidXJnXCIsXG4gICAgXCJBZnJpY2EvSnViYVwiLFxuICAgIFwiQWZyaWNhL0thbXBhbGFcIixcbiAgICBcIkFmcmljYS9LaGFydG91bVwiLFxuICAgIFwiQWZyaWNhL0tpZ2FsaVwiLFxuICAgIFwiQWZyaWNhL0tpbnNoYXNhXCIsXG4gICAgXCJBZnJpY2EvTGFnb3NcIixcbiAgICBcIkFmcmljYS9MaWJyZXZpbGxlXCIsXG4gICAgXCJBZnJpY2EvTG9tZVwiLFxuICAgIFwiQWZyaWNhL0x1YW5kYVwiLFxuICAgIFwiQWZyaWNhL0x1YnVtYmFzaGlcIixcbiAgICBcIkFmcmljYS9MdXNha2FcIixcbiAgICBcIkFmcmljYS9NYWxhYm9cIixcbiAgICBcIkFmcmljYS9NYXB1dG9cIixcbiAgICBcIkFmcmljYS9NYXNlcnVcIixcbiAgICBcIkFmcmljYS9NYmFiYW5lXCIsXG4gICAgXCJBZnJpY2EvTW9nYWRpc2h1XCIsXG4gICAgXCJBZnJpY2EvTW9ucm92aWFcIixcbiAgICBcIkFmcmljYS9OYWlyb2JpXCIsXG4gICAgXCJBZnJpY2EvTmRqYW1lbmFcIixcbiAgICBcIkFmcmljYS9OaWFtZXlcIixcbiAgICBcIkFmcmljYS9Ob3Vha2Nob3R0XCIsXG4gICAgXCJBZnJpY2EvT3VhZ2Fkb3Vnb3VcIixcbiAgICBcIkFmcmljYS9Qb3J0by1Ob3ZvXCIsXG4gICAgXCJBZnJpY2EvU2FvX1RvbWVcIixcbiAgICBcIkFmcmljYS9Ucmlwb2xpXCIsXG4gICAgXCJBZnJpY2EvVHVuaXNcIixcbiAgICBcIkFmcmljYS9XaW5kaG9la1wiLFxuICAgIFwiQW1lcmljYS9BZGFrXCIsXG4gICAgXCJBbWVyaWNhL0FuY2hvcmFnZVwiLFxuICAgIFwiQW1lcmljYS9Bbmd1aWxsYVwiLFxuICAgIFwiQW1lcmljYS9BbnRpZ3VhXCIsXG4gICAgXCJBbWVyaWNhL0FyYWd1YWluYVwiLFxuICAgIFwiQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzXCIsXG4gICAgXCJBbWVyaWNhL0FyZ2VudGluYS9DYXRhbWFyY2FcIixcbiAgICBcIkFtZXJpY2EvQXJnZW50aW5hL0NvcmRvYmFcIixcbiAgICBcIkFtZXJpY2EvQXJnZW50aW5hL0p1anV5XCIsXG4gICAgXCJBbWVyaWNhL0FyZ2VudGluYS9MYV9SaW9qYVwiLFxuICAgIFwiQW1lcmljYS9BcmdlbnRpbmEvTWVuZG96YVwiLFxuICAgIFwiQW1lcmljYS9BcmdlbnRpbmEvUmlvX0dhbGxlZ29zXCIsXG4gICAgXCJBbWVyaWNhL0FyZ2VudGluYS9TYWx0YVwiLFxuICAgIFwiQW1lcmljYS9BcmdlbnRpbmEvU2FuX0p1YW5cIixcbiAgICBcIkFtZXJpY2EvQXJnZW50aW5hL1Nhbl9MdWlzXCIsXG4gICAgXCJBbWVyaWNhL0FyZ2VudGluYS9UdWN1bWFuXCIsXG4gICAgXCJBbWVyaWNhL0FyZ2VudGluYS9Vc2h1YWlhXCIsXG4gICAgXCJBbWVyaWNhL0FydWJhXCIsXG4gICAgXCJBbWVyaWNhL0FzdW5jaW9uXCIsXG4gICAgXCJBbWVyaWNhL0F0aWtva2FuXCIsXG4gICAgXCJBbWVyaWNhL0JhaGlhXCIsXG4gICAgXCJBbWVyaWNhL0JhaGlhX0JhbmRlcmFzXCIsXG4gICAgXCJBbWVyaWNhL0JhcmJhZG9zXCIsXG4gICAgXCJBbWVyaWNhL0JlbGVtXCIsXG4gICAgXCJBbWVyaWNhL0JlbGl6ZVwiLFxuICAgIFwiQW1lcmljYS9CbGFuYy1TYWJsb25cIixcbiAgICBcIkFtZXJpY2EvQm9hX1Zpc3RhXCIsXG4gICAgXCJBbWVyaWNhL0JvZ290YVwiLFxuICAgIFwiQW1lcmljYS9Cb2lzZVwiLFxuICAgIFwiQW1lcmljYS9DYW1icmlkZ2VfQmF5XCIsXG4gICAgXCJBbWVyaWNhL0NhbXBvX0dyYW5kZVwiLFxuICAgIFwiQW1lcmljYS9DYW5jdW5cIixcbiAgICBcIkFtZXJpY2EvQ2FyYWNhc1wiLFxuICAgIFwiQW1lcmljYS9DYXllbm5lXCIsXG4gICAgXCJBbWVyaWNhL0NheW1hblwiLFxuICAgIFwiQW1lcmljYS9DaGljYWdvXCIsXG4gICAgXCJBbWVyaWNhL0NoaWh1YWh1YVwiLFxuICAgIFwiQW1lcmljYS9Db3N0YV9SaWNhXCIsXG4gICAgXCJBbWVyaWNhL0NyZXN0b25cIixcbiAgICBcIkFtZXJpY2EvQ3VpYWJhXCIsXG4gICAgXCJBbWVyaWNhL0N1cmFjYW9cIixcbiAgICBcIkFtZXJpY2EvRGFubWFya3NoYXZuXCIsXG4gICAgXCJBbWVyaWNhL0Rhd3NvblwiLFxuICAgIFwiQW1lcmljYS9EYXdzb25fQ3JlZWtcIixcbiAgICBcIkFtZXJpY2EvRGVudmVyXCIsXG4gICAgXCJBbWVyaWNhL0RldHJvaXRcIixcbiAgICBcIkFtZXJpY2EvRG9taW5pY2FcIixcbiAgICBcIkFtZXJpY2EvRWRtb250b25cIixcbiAgICBcIkFtZXJpY2EvRWlydW5lcGVcIixcbiAgICBcIkFtZXJpY2EvRWxfU2FsdmFkb3JcIixcbiAgICBcIkFtZXJpY2EvRm9ydF9OZWxzb25cIixcbiAgICBcIkFtZXJpY2EvRm9ydGFsZXphXCIsXG4gICAgXCJBbWVyaWNhL0dsYWNlX0JheVwiLFxuICAgIFwiQW1lcmljYS9Hb2R0aGFiXCIsXG4gICAgXCJBbWVyaWNhL0dvb3NlX0JheVwiLFxuICAgIFwiQW1lcmljYS9HcmFuZF9UdXJrXCIsXG4gICAgXCJBbWVyaWNhL0dyZW5hZGFcIixcbiAgICBcIkFtZXJpY2EvR3VhZGVsb3VwZVwiLFxuICAgIFwiQW1lcmljYS9HdWF0ZW1hbGFcIixcbiAgICBcIkFtZXJpY2EvR3VheWFxdWlsXCIsXG4gICAgXCJBbWVyaWNhL0d1eWFuYVwiLFxuICAgIFwiQW1lcmljYS9IYWxpZmF4XCIsXG4gICAgXCJBbWVyaWNhL0hhdmFuYVwiLFxuICAgIFwiQW1lcmljYS9IZXJtb3NpbGxvXCIsXG4gICAgXCJBbWVyaWNhL0luZGlhbmEvSW5kaWFuYXBvbGlzXCIsXG4gICAgXCJBbWVyaWNhL0luZGlhbmEvS25veFwiLFxuICAgIFwiQW1lcmljYS9JbmRpYW5hL01hcmVuZ29cIixcbiAgICBcIkFtZXJpY2EvSW5kaWFuYS9QZXRlcnNidXJnXCIsXG4gICAgXCJBbWVyaWNhL0luZGlhbmEvVGVsbF9DaXR5XCIsXG4gICAgXCJBbWVyaWNhL0luZGlhbmEvVmV2YXlcIixcbiAgICBcIkFtZXJpY2EvSW5kaWFuYS9WaW5jZW5uZXNcIixcbiAgICBcIkFtZXJpY2EvSW5kaWFuYS9XaW5hbWFjXCIsXG4gICAgXCJBbWVyaWNhL0ludXZpa1wiLFxuICAgIFwiQW1lcmljYS9JcWFsdWl0XCIsXG4gICAgXCJBbWVyaWNhL0phbWFpY2FcIixcbiAgICBcIkFtZXJpY2EvSnVuZWF1XCIsXG4gICAgXCJBbWVyaWNhL0tlbnR1Y2t5L0xvdWlzdmlsbGVcIixcbiAgICBcIkFtZXJpY2EvS2VudHVja3kvTW9udGljZWxsb1wiLFxuICAgIFwiQW1lcmljYS9LcmFsZW5kaWprXCIsXG4gICAgXCJBbWVyaWNhL0xhX1BhelwiLFxuICAgIFwiQW1lcmljYS9MaW1hXCIsXG4gICAgXCJBbWVyaWNhL0xvc19BbmdlbGVzXCIsXG4gICAgXCJBbWVyaWNhL0xvd2VyX1ByaW5jZXNcIixcbiAgICBcIkFtZXJpY2EvTWFjZWlvXCIsXG4gICAgXCJBbWVyaWNhL01hbmFndWFcIixcbiAgICBcIkFtZXJpY2EvTWFuYXVzXCIsXG4gICAgXCJBbWVyaWNhL01hcmlnb3RcIixcbiAgICBcIkFtZXJpY2EvTWFydGluaXF1ZVwiLFxuICAgIFwiQW1lcmljYS9NYXRhbW9yb3NcIixcbiAgICBcIkFtZXJpY2EvTWF6YXRsYW5cIixcbiAgICBcIkFtZXJpY2EvTWVub21pbmVlXCIsXG4gICAgXCJBbWVyaWNhL01lcmlkYVwiLFxuICAgIFwiQW1lcmljYS9NZXRsYWthdGxhXCIsXG4gICAgXCJBbWVyaWNhL01leGljb19DaXR5XCIsXG4gICAgXCJBbWVyaWNhL01pcXVlbG9uXCIsXG4gICAgXCJBbWVyaWNhL01vbmN0b25cIixcbiAgICBcIkFtZXJpY2EvTW9udGVycmV5XCIsXG4gICAgXCJBbWVyaWNhL01vbnRldmlkZW9cIixcbiAgICBcIkFtZXJpY2EvTW9udHNlcnJhdFwiLFxuICAgIFwiQW1lcmljYS9OYXNzYXVcIixcbiAgICBcIkFtZXJpY2EvTmV3X1lvcmtcIixcbiAgICBcIkFtZXJpY2EvTmlwaWdvblwiLFxuICAgIFwiQW1lcmljYS9Ob21lXCIsXG4gICAgXCJBbWVyaWNhL05vcm9uaGFcIixcbiAgICBcIkFtZXJpY2EvTm9ydGhfRGFrb3RhL0JldWxhaFwiLFxuICAgIFwiQW1lcmljYS9Ob3J0aF9EYWtvdGEvQ2VudGVyXCIsXG4gICAgXCJBbWVyaWNhL05vcnRoX0Rha290YS9OZXdfU2FsZW1cIixcbiAgICBcIkFtZXJpY2EvT2ppbmFnYVwiLFxuICAgIFwiQW1lcmljYS9QYW5hbWFcIixcbiAgICBcIkFtZXJpY2EvUGFuZ25pcnR1bmdcIixcbiAgICBcIkFtZXJpY2EvUGFyYW1hcmlib1wiLFxuICAgIFwiQW1lcmljYS9QaG9lbml4XCIsXG4gICAgXCJBbWVyaWNhL1BvcnQtYXUtUHJpbmNlXCIsXG4gICAgXCJBbWVyaWNhL1BvcnRfb2ZfU3BhaW5cIixcbiAgICBcIkFtZXJpY2EvUG9ydG9fVmVsaG9cIixcbiAgICBcIkFtZXJpY2EvUHVlcnRvX1JpY29cIixcbiAgICBcIkFtZXJpY2EvUHVudGFfQXJlbmFzXCIsXG4gICAgXCJBbWVyaWNhL1JhaW55X1JpdmVyXCIsXG4gICAgXCJBbWVyaWNhL1Jhbmtpbl9JbmxldFwiLFxuICAgIFwiQW1lcmljYS9SZWNpZmVcIixcbiAgICBcIkFtZXJpY2EvUmVnaW5hXCIsXG4gICAgXCJBbWVyaWNhL1Jlc29sdXRlXCIsXG4gICAgXCJBbWVyaWNhL1Jpb19CcmFuY29cIixcbiAgICBcIkFtZXJpY2EvU2FudGFyZW1cIixcbiAgICBcIkFtZXJpY2EvU2FudGlhZ29cIixcbiAgICBcIkFtZXJpY2EvU2FudG9fRG9taW5nb1wiLFxuICAgIFwiQW1lcmljYS9TYW9fUGF1bG9cIixcbiAgICBcIkFtZXJpY2EvU2NvcmVzYnlzdW5kXCIsXG4gICAgXCJBbWVyaWNhL1NpdGthXCIsXG4gICAgXCJBbWVyaWNhL1N0X0JhcnRoZWxlbXlcIixcbiAgICBcIkFtZXJpY2EvU3RfSm9obnNcIixcbiAgICBcIkFtZXJpY2EvU3RfS2l0dHNcIixcbiAgICBcIkFtZXJpY2EvU3RfTHVjaWFcIixcbiAgICBcIkFtZXJpY2EvU3RfVGhvbWFzXCIsXG4gICAgXCJBbWVyaWNhL1N0X1ZpbmNlbnRcIixcbiAgICBcIkFtZXJpY2EvU3dpZnRfQ3VycmVudFwiLFxuICAgIFwiQW1lcmljYS9UZWd1Y2lnYWxwYVwiLFxuICAgIFwiQW1lcmljYS9UaHVsZVwiLFxuICAgIFwiQW1lcmljYS9UaHVuZGVyX0JheVwiLFxuICAgIFwiQW1lcmljYS9UaWp1YW5hXCIsXG4gICAgXCJBbWVyaWNhL1Rvcm9udG9cIixcbiAgICBcIkFtZXJpY2EvVG9ydG9sYVwiLFxuICAgIFwiQW1lcmljYS9WYW5jb3V2ZXJcIixcbiAgICBcIkFtZXJpY2EvV2hpdGVob3JzZVwiLFxuICAgIFwiQW1lcmljYS9XaW5uaXBlZ1wiLFxuICAgIFwiQW1lcmljYS9ZYWt1dGF0XCIsXG4gICAgXCJBbWVyaWNhL1llbGxvd2tuaWZlXCIsXG4gICAgXCJBbnRhcmN0aWNhL0Nhc2V5XCIsXG4gICAgXCJBbnRhcmN0aWNhL0RhdmlzXCIsXG4gICAgXCJBbnRhcmN0aWNhL0R1bW9udERVcnZpbGxlXCIsXG4gICAgXCJBbnRhcmN0aWNhL01hY3F1YXJpZVwiLFxuICAgIFwiQW50YXJjdGljYS9NYXdzb25cIixcbiAgICBcIkFudGFyY3RpY2EvTWNNdXJkb1wiLFxuICAgIFwiQW50YXJjdGljYS9QYWxtZXJcIixcbiAgICBcIkFudGFyY3RpY2EvUm90aGVyYVwiLFxuICAgIFwiQW50YXJjdGljYS9TeW93YVwiLFxuICAgIFwiQW50YXJjdGljYS9Ucm9sbFwiLFxuICAgIFwiQW50YXJjdGljYS9Wb3N0b2tcIixcbiAgICBcIkFyY3RpYy9Mb25neWVhcmJ5ZW5cIixcbiAgICBcIkFzaWEvQWRlblwiLFxuICAgIFwiQXNpYS9BbG1hdHlcIixcbiAgICBcIkFzaWEvQW1tYW5cIixcbiAgICBcIkFzaWEvQW5hZHlyXCIsXG4gICAgXCJBc2lhL0FxdGF1XCIsXG4gICAgXCJBc2lhL0FxdG9iZVwiLFxuICAgIFwiQXNpYS9Bc2hnYWJhdFwiLFxuICAgIFwiQXNpYS9BdHlyYXVcIixcbiAgICBcIkFzaWEvQmFnaGRhZFwiLFxuICAgIFwiQXNpYS9CYWhyYWluXCIsXG4gICAgXCJBc2lhL0Jha3VcIixcbiAgICBcIkFzaWEvQmFuZ2tva1wiLFxuICAgIFwiQXNpYS9CYXJuYXVsXCIsXG4gICAgXCJBc2lhL0JlaXJ1dFwiLFxuICAgIFwiQXNpYS9CaXNoa2VrXCIsXG4gICAgXCJBc2lhL0JydW5laVwiLFxuICAgIFwiQXNpYS9DaGl0YVwiLFxuICAgIFwiQXNpYS9DaG9pYmFsc2FuXCIsXG4gICAgXCJBc2lhL0NvbG9tYm9cIixcbiAgICBcIkFzaWEvRGFtYXNjdXNcIixcbiAgICBcIkFzaWEvRGhha2FcIixcbiAgICBcIkFzaWEvRGlsaVwiLFxuICAgIFwiQXNpYS9EdWJhaVwiLFxuICAgIFwiQXNpYS9EdXNoYW5iZVwiLFxuICAgIFwiQXNpYS9GYW1hZ3VzdGFcIixcbiAgICBcIkFzaWEvR2F6YVwiLFxuICAgIFwiQXNpYS9IZWJyb25cIixcbiAgICBcIkFzaWEvSG9fQ2hpX01pbmhcIixcbiAgICBcIkFzaWEvSG9uZ19Lb25nXCIsXG4gICAgXCJBc2lhL0hvdmRcIixcbiAgICBcIkFzaWEvSXJrdXRza1wiLFxuICAgIFwiQXNpYS9KYWthcnRhXCIsXG4gICAgXCJBc2lhL0pheWFwdXJhXCIsXG4gICAgXCJBc2lhL0plcnVzYWxlbVwiLFxuICAgIFwiQXNpYS9LYWJ1bFwiLFxuICAgIFwiQXNpYS9LYW1jaGF0a2FcIixcbiAgICBcIkFzaWEvS2FyYWNoaVwiLFxuICAgIFwiQXNpYS9LYXRobWFuZHVcIixcbiAgICBcIkFzaWEvS2hhbmR5Z2FcIixcbiAgICBcIkFzaWEvS29sa2F0YVwiLFxuICAgIFwiQXNpYS9LcmFzbm95YXJza1wiLFxuICAgIFwiQXNpYS9LdWFsYV9MdW1wdXJcIixcbiAgICBcIkFzaWEvS3VjaGluZ1wiLFxuICAgIFwiQXNpYS9LdXdhaXRcIixcbiAgICBcIkFzaWEvTWFjYXVcIixcbiAgICBcIkFzaWEvTWFnYWRhblwiLFxuICAgIFwiQXNpYS9NYWthc3NhclwiLFxuICAgIFwiQXNpYS9NYW5pbGFcIixcbiAgICBcIkFzaWEvTXVzY2F0XCIsXG4gICAgXCJBc2lhL05pY29zaWFcIixcbiAgICBcIkFzaWEvTm92b2t1em5ldHNrXCIsXG4gICAgXCJBc2lhL05vdm9zaWJpcnNrXCIsXG4gICAgXCJBc2lhL09tc2tcIixcbiAgICBcIkFzaWEvT3JhbFwiLFxuICAgIFwiQXNpYS9QaG5vbV9QZW5oXCIsXG4gICAgXCJBc2lhL1BvbnRpYW5ha1wiLFxuICAgIFwiQXNpYS9QeW9uZ3lhbmdcIixcbiAgICBcIkFzaWEvUWF0YXJcIixcbiAgICBcIkFzaWEvUXl6eWxvcmRhXCIsXG4gICAgXCJBc2lhL1JpeWFkaFwiLFxuICAgIFwiQXNpYS9TYWtoYWxpblwiLFxuICAgIFwiQXNpYS9TYW1hcmthbmRcIixcbiAgICBcIkFzaWEvU2VvdWxcIixcbiAgICBcIkFzaWEvU2hhbmdoYWlcIixcbiAgICBcIkFzaWEvU2luZ2Fwb3JlXCIsXG4gICAgXCJBc2lhL1NyZWRuZWtvbHltc2tcIixcbiAgICBcIkFzaWEvVGFpcGVpXCIsXG4gICAgXCJBc2lhL1Rhc2hrZW50XCIsXG4gICAgXCJBc2lhL1RiaWxpc2lcIixcbiAgICBcIkFzaWEvVGVocmFuXCIsXG4gICAgXCJBc2lhL1RoaW1waHVcIixcbiAgICBcIkFzaWEvVG9reW9cIixcbiAgICBcIkFzaWEvVG9tc2tcIixcbiAgICBcIkFzaWEvVWxhYW5iYWF0YXJcIixcbiAgICBcIkFzaWEvVXJ1bXFpXCIsXG4gICAgXCJBc2lhL1VzdC1OZXJhXCIsXG4gICAgXCJBc2lhL1ZpZW50aWFuZVwiLFxuICAgIFwiQXNpYS9WbGFkaXZvc3Rva1wiLFxuICAgIFwiQXNpYS9ZYWt1dHNrXCIsXG4gICAgXCJBc2lhL1lhbmdvblwiLFxuICAgIFwiQXNpYS9ZZWthdGVyaW5idXJnXCIsXG4gICAgXCJBc2lhL1llcmV2YW5cIixcbiAgICBcIkF0bGFudGljL0F6b3Jlc1wiLFxuICAgIFwiQXRsYW50aWMvQmVybXVkYVwiLFxuICAgIFwiQXRsYW50aWMvQ2FuYXJ5XCIsXG4gICAgXCJBdGxhbnRpYy9DYXBlX1ZlcmRlXCIsXG4gICAgXCJBdGxhbnRpYy9GYXJvZVwiLFxuICAgIFwiQXRsYW50aWMvTWFkZWlyYVwiLFxuICAgIFwiQXRsYW50aWMvUmV5a2phdmlrXCIsXG4gICAgXCJBdGxhbnRpYy9Tb3V0aF9HZW9yZ2lhXCIsXG4gICAgXCJBdGxhbnRpYy9TdF9IZWxlbmFcIixcbiAgICBcIkF0bGFudGljL1N0YW5sZXlcIixcbiAgICBcIkF1c3RyYWxpYS9BZGVsYWlkZVwiLFxuICAgIFwiQXVzdHJhbGlhL0JyaXNiYW5lXCIsXG4gICAgXCJBdXN0cmFsaWEvQnJva2VuX0hpbGxcIixcbiAgICBcIkF1c3RyYWxpYS9DdXJyaWVcIixcbiAgICBcIkF1c3RyYWxpYS9EYXJ3aW5cIixcbiAgICBcIkF1c3RyYWxpYS9FdWNsYVwiLFxuICAgIFwiQXVzdHJhbGlhL0hvYmFydFwiLFxuICAgIFwiQXVzdHJhbGlhL0xpbmRlbWFuXCIsXG4gICAgXCJBdXN0cmFsaWEvTG9yZF9Ib3dlXCIsXG4gICAgXCJBdXN0cmFsaWEvTWVsYm91cm5lXCIsXG4gICAgXCJBdXN0cmFsaWEvUGVydGhcIixcbiAgICBcIkF1c3RyYWxpYS9TeWRuZXlcIixcbiAgICBcIkV1cm9wZS9BbXN0ZXJkYW1cIixcbiAgICBcIkV1cm9wZS9BbmRvcnJhXCIsXG4gICAgXCJFdXJvcGUvQXN0cmFraGFuXCIsXG4gICAgXCJFdXJvcGUvQXRoZW5zXCIsXG4gICAgXCJFdXJvcGUvQmVsZ3JhZGVcIixcbiAgICBcIkV1cm9wZS9CZXJsaW5cIixcbiAgICBcIkV1cm9wZS9CcmF0aXNsYXZhXCIsXG4gICAgXCJFdXJvcGUvQnJ1c3NlbHNcIixcbiAgICBcIkV1cm9wZS9CdWNoYXJlc3RcIixcbiAgICBcIkV1cm9wZS9CdWRhcGVzdFwiLFxuICAgIFwiRXVyb3BlL0J1c2luZ2VuXCIsXG4gICAgXCJFdXJvcGUvQ2hpc2luYXVcIixcbiAgICBcIkV1cm9wZS9Db3BlbmhhZ2VuXCIsXG4gICAgXCJFdXJvcGUvRHVibGluXCIsXG4gICAgXCJFdXJvcGUvR2licmFsdGFyXCIsXG4gICAgXCJFdXJvcGUvR3Vlcm5zZXlcIixcbiAgICBcIkV1cm9wZS9IZWxzaW5raVwiLFxuICAgIFwiRXVyb3BlL0lzbGVfb2ZfTWFuXCIsXG4gICAgXCJFdXJvcGUvSXN0YW5idWxcIixcbiAgICBcIkV1cm9wZS9KZXJzZXlcIixcbiAgICBcIkV1cm9wZS9LYWxpbmluZ3JhZFwiLFxuICAgIFwiRXVyb3BlL0tpZXZcIixcbiAgICBcIkV1cm9wZS9LaXJvdlwiLFxuICAgIFwiRXVyb3BlL0xpc2JvblwiLFxuICAgIFwiRXVyb3BlL0xqdWJsamFuYVwiLFxuICAgIFwiRXVyb3BlL0xvbmRvblwiLFxuICAgIFwiRXVyb3BlL0x1eGVtYm91cmdcIixcbiAgICBcIkV1cm9wZS9NYWRyaWRcIixcbiAgICBcIkV1cm9wZS9NYWx0YVwiLFxuICAgIFwiRXVyb3BlL01hcmllaGFtblwiLFxuICAgIFwiRXVyb3BlL01pbnNrXCIsXG4gICAgXCJFdXJvcGUvTW9uYWNvXCIsXG4gICAgXCJFdXJvcGUvTW9zY293XCIsXG4gICAgXCJFdXJvcGUvT3Nsb1wiLFxuICAgIFwiRXVyb3BlL1BhcmlzXCIsXG4gICAgXCJFdXJvcGUvUG9kZ29yaWNhXCIsXG4gICAgXCJFdXJvcGUvUHJhZ3VlXCIsXG4gICAgXCJFdXJvcGUvUmlnYVwiLFxuICAgIFwiRXVyb3BlL1JvbWVcIixcbiAgICBcIkV1cm9wZS9TYW1hcmFcIixcbiAgICBcIkV1cm9wZS9TYW5fTWFyaW5vXCIsXG4gICAgXCJFdXJvcGUvU2FyYWpldm9cIixcbiAgICBcIkV1cm9wZS9TYXJhdG92XCIsXG4gICAgXCJFdXJvcGUvU2ltZmVyb3BvbFwiLFxuICAgIFwiRXVyb3BlL1Nrb3BqZVwiLFxuICAgIFwiRXVyb3BlL1NvZmlhXCIsXG4gICAgXCJFdXJvcGUvU3RvY2tob2xtXCIsXG4gICAgXCJFdXJvcGUvVGFsbGlublwiLFxuICAgIFwiRXVyb3BlL1RpcmFuZVwiLFxuICAgIFwiRXVyb3BlL1VseWFub3Zza1wiLFxuICAgIFwiRXVyb3BlL1V6aGdvcm9kXCIsXG4gICAgXCJFdXJvcGUvVmFkdXpcIixcbiAgICBcIkV1cm9wZS9WYXRpY2FuXCIsXG4gICAgXCJFdXJvcGUvVmllbm5hXCIsXG4gICAgXCJFdXJvcGUvVmlsbml1c1wiLFxuICAgIFwiRXVyb3BlL1ZvbGdvZ3JhZFwiLFxuICAgIFwiRXVyb3BlL1dhcnNhd1wiLFxuICAgIFwiRXVyb3BlL1phZ3JlYlwiLFxuICAgIFwiRXVyb3BlL1phcG9yb3poeWVcIixcbiAgICBcIkV1cm9wZS9adXJpY2hcIixcbiAgICBcIkluZGlhbi9BbnRhbmFuYXJpdm9cIixcbiAgICBcIkluZGlhbi9DaGFnb3NcIixcbiAgICBcIkluZGlhbi9DaHJpc3RtYXNcIixcbiAgICBcIkluZGlhbi9Db2Nvc1wiLFxuICAgIFwiSW5kaWFuL0NvbW9yb1wiLFxuICAgIFwiSW5kaWFuL0tlcmd1ZWxlblwiLFxuICAgIFwiSW5kaWFuL01haGVcIixcbiAgICBcIkluZGlhbi9NYWxkaXZlc1wiLFxuICAgIFwiSW5kaWFuL01hdXJpdGl1c1wiLFxuICAgIFwiSW5kaWFuL01heW90dGVcIixcbiAgICBcIkluZGlhbi9SZXVuaW9uXCIsXG4gICAgXCJQYWNpZmljL0FwaWFcIixcbiAgICBcIlBhY2lmaWMvQXVja2xhbmRcIixcbiAgICBcIlBhY2lmaWMvQm91Z2FpbnZpbGxlXCIsXG4gICAgXCJQYWNpZmljL0NoYXRoYW1cIixcbiAgICBcIlBhY2lmaWMvQ2h1dWtcIixcbiAgICBcIlBhY2lmaWMvRWFzdGVyXCIsXG4gICAgXCJQYWNpZmljL0VmYXRlXCIsXG4gICAgXCJQYWNpZmljL0VuZGVyYnVyeVwiLFxuICAgIFwiUGFjaWZpYy9GYWthb2ZvXCIsXG4gICAgXCJQYWNpZmljL0ZpamlcIixcbiAgICBcIlBhY2lmaWMvRnVuYWZ1dGlcIixcbiAgICBcIlBhY2lmaWMvR2FsYXBhZ29zXCIsXG4gICAgXCJQYWNpZmljL0dhbWJpZXJcIixcbiAgICBcIlBhY2lmaWMvR3VhZGFsY2FuYWxcIixcbiAgICBcIlBhY2lmaWMvR3VhbVwiLFxuICAgIFwiUGFjaWZpYy9Ib25vbHVsdVwiLFxuICAgIFwiUGFjaWZpYy9LaXJpdGltYXRpXCIsXG4gICAgXCJQYWNpZmljL0tvc3JhZVwiLFxuICAgIFwiUGFjaWZpYy9Ld2FqYWxlaW5cIixcbiAgICBcIlBhY2lmaWMvTWFqdXJvXCIsXG4gICAgXCJQYWNpZmljL01hcnF1ZXNhc1wiLFxuICAgIFwiUGFjaWZpYy9NaWR3YXlcIixcbiAgICBcIlBhY2lmaWMvTmF1cnVcIixcbiAgICBcIlBhY2lmaWMvTml1ZVwiLFxuICAgIFwiUGFjaWZpYy9Ob3Jmb2xrXCIsXG4gICAgXCJQYWNpZmljL05vdW1lYVwiLFxuICAgIFwiUGFjaWZpYy9QYWdvX1BhZ29cIixcbiAgICBcIlBhY2lmaWMvUGFsYXVcIixcbiAgICBcIlBhY2lmaWMvUGl0Y2Fpcm5cIixcbiAgICBcIlBhY2lmaWMvUG9obnBlaVwiLFxuICAgIFwiUGFjaWZpYy9Qb3J0X01vcmVzYnlcIixcbiAgICBcIlBhY2lmaWMvUmFyb3RvbmdhXCIsXG4gICAgXCJQYWNpZmljL1NhaXBhblwiLFxuICAgIFwiUGFjaWZpYy9UYWhpdGlcIixcbiAgICBcIlBhY2lmaWMvVGFyYXdhXCIsXG4gICAgXCJQYWNpZmljL1RvbmdhdGFwdVwiLFxuICAgIFwiUGFjaWZpYy9XYWtlXCIsXG4gICAgXCJQYWNpZmljL1dhbGxpc1wiXG5dO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvdGltZXpvbmVzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi91c2VyLnRlbXBsYXRlLmh0bWwnKSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VibWl0dGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgc3VjY2VzczogbnVsbCxcbiAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgICAgICBlbWFpbDogbnVsbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogbnVsbCxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBudWxsLFxuICAgICAgICAgICAgYmlvOiBudWxsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgc3VibWl0RGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9hZGluZykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy51c2VybmFtZSB8fCAhdGhpcy5wYXNzd29yZCB8fCAhdGhpcy5lbWFpbCB8fCAhdGhpcy5maXJzdE5hbWUgfHwgIXRoaXMubGFzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc3VibWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdHRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh0aGlzLiRwYXJlbnQudXJsKCd1c2VyJyksIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5lbWFpbCxcbiAgICAgICAgICAgICAgICBmaXJzdF9uYW1lOiB0aGlzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICBsYXN0X25hbWU6IHRoaXMubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgYmlvOiB0aGlzLmJpbyxcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MgPSByZXNwb25zZS5zdWNjZXNzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3VzZXIuY29tcGxldGUnLCByZXNwb25zZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubG9naW4ocmVzcG9uc2UuaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9naW46IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dpbmdJbiA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdCh0aGlzLiRwYXJlbnQudXJsKCdsb2dpbicpLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZWRJbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ3VzZXIuY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvdXNlci5qcyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJjYXJkIGluc3RhbGwtdXNlclxcXCI+IDxkaXYgY2xhc3M9aGVhZD4gPGgxPnt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRlX2FfdXNlcicpIH19PC9oMT4gPC9kaXY+IDxocj4gPHRlbXBsYXRlIHYtaWY9IXN1Y2Nlc3M+IDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LWRhbmdlclxcXCIgdi1pZj1cXFwic3VibWl0dGVkICYmICFsb2FkaW5nICYmICFzdWNjZXNzXFxcIj4gPHA+e3sgZXJyb3IgfX08L3A+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHB4LTBcXFwiPiA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5uYW1lJykgfX08L2xhYmVsPiA8ZGl2IGNsYXNzPXJvdz4gPGRpdiBjbGFzcz1jb2wtbWQtNj4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5maXJzdF9uYW1lJykgfX08L3NtYWxsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWZpcnN0TmFtZSAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1jb2wtbWQtNj4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5sYXN0X25hbWUnKSB9fTwvc21hbGw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9bGFzdE5hbWUgLz4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBweC0wXFxcIj4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AudXNlcm5hbWUnKSB9fTwvbGFiZWw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9dXNlcm5hbWUgLz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgcHgtMFxcXCI+IDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmVtYWlsJykgfX08L2xhYmVsPiA8aW5wdXQgdHlwZT1lbWFpbCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1lbWFpbCAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBweC0wXFxcIj4gPGxhYmVsPnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLnBhc3N3b3JkcycsIDEpIH19PC9sYWJlbD4gPGlucHV0IHR5cGU9cGFzc3dvcmQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9cGFzc3dvcmQgLz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgcHgtMFxcXCI+IDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmJpbycpIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC51c2VyX2Jpb19pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDx0ZXh0YXJlYSBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1iaW8+PC90ZXh0YXJlYT4gPC9kaXY+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgQGNsaWNrPXN1Ym1pdCA6ZGlzYWJsZWQ9c3VibWl0RGlzYWJsZWQ+e3sgdHJhbnNsYXRlKCdjcmVhdGVfdXNlcicpIH19PC9idXR0b24+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWlmPXN1Y2Nlc3M+IDxwPnt7IHRyYW5zbGF0ZSgnY3AudXNlcl9hY2NvdW50X2NyZWF0ZWQnKSB9fTwvcD4gPC90ZW1wbGF0ZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy91c2VyLnRlbXBsYXRlLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2xvZ2luLnRlbXBsYXRlLmh0bWwnKSxcblxuICAgIHByb3BzOiBbJ3VzZXJJZCddLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2dnZWRJbjogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuJGh0dHAucG9zdCh0aGlzLiRwYXJlbnQudXJsKCdsb2dpbicpLCB7XG4gICAgICAgICAgICBpZDogdGhpcy51c2VySWRcbiAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlZEluID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdsb2dpbi5jb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9pbnN0YWxsZXIvc3RlcHMvbG9naW4uanMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1jYXJkPiA8ZGl2IGNsYXNzPWhlYWQ+IDxoMT57eyB0cmFuc2xhdGUoJ2NwLmxvZ2luJykgfX08L2gxPiA8L2Rpdj4gPGhyPiA8ZGl2IHYtaWY9IWxvZ2dlZEluIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9nZ2luZ19pbicpIH19IDwvZGl2PiA8cCB2LWlmPWxvZ2dlZEluPnt7IHRyYW5zbGF0ZSgnY3AubG9nZ2VkX2luX3Rha2luZ195b3VfdG9fY3AnKSB9fTwvcD4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2luc3RhbGxlci9zdGVwcy9sb2dpbi50ZW1wbGF0ZS5odG1sXG4vLyBtb2R1bGUgaWQgPSAzOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICB2ZXJzaW9uVG86IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiBudWxsIH0sXG4gICAgICAgIHZlcnNpb25Gcm9tOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogbnVsbCB9XG4gICAgfSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydGVkOiBmYWxzZSxcblxuICAgICAgICAgICAgYmFja2luZ1VwOiBmYWxzZSxcbiAgICAgICAgICAgIGJhY2tlZFVwOiBmYWxzZSxcbiAgICAgICAgICAgIGJhY2t1cEZhaWxlZDogZmFsc2UsXG4gICAgICAgICAgICBiYWNrdXBNZXNzYWdlOiBudWxsLFxuXG4gICAgICAgICAgICBkb3dubG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBkb3dubG9hZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRvd25sb2FkRmFpbGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRvd25sb2FkTWVzc2FnZTogbnVsbCxcblxuICAgICAgICAgICAgaW5zdGFsbGluZzogZmFsc2UsXG5cbiAgICAgICAgICAgIHVuemlwcGluZzogZmFsc2UsXG4gICAgICAgICAgICB1bnppcHBlZDogZmFsc2UsXG4gICAgICAgICAgICB1bnppcHBpbmdGYWlsZWQ6IGZhbHNlLFxuXG4gICAgICAgICAgICBpbnN0YWxsaW5nRGVwZW5kZW5jaWVzOiBmYWxzZSxcbiAgICAgICAgICAgIGluc3RhbGxlZERlcGVuZGVuY2llczogZmFsc2UsXG4gICAgICAgICAgICBpbnN0YWxsaW5nRGVwZW5kZW5jaWVzRmFpbGVkOiBmYWxzZSxcblxuICAgICAgICAgICAgc3dhcHBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgc3dhcHBlZDogZmFsc2UsXG4gICAgICAgICAgICBzd2FwcGluZ0ZhaWxlZDogZmFsc2UsXG5cbiAgICAgICAgICAgIHVwZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgY2xlYW5pbmdVcDogZmFsc2UsXG4gICAgICAgICAgICBjbGVhbmVkVXA6IGZhbHNlLFxuICAgICAgICAgICAgY2xlYW51cEZhaWxlZDogZmFsc2UsXG5cbiAgICAgICAgICAgIGVycm9yczogW11cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICByZWFkeVRvSW5zdGFsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhY2tlZFVwICYmIHRoaXMuZG93bmxvYWRlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnMubGVuZ3RoID4gMDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICB1cGRhdGVkKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxzLmF1ZGlvLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuYmFja3VwKCk7XG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYmFja3VwKCkge1xuICAgICAgICAgICAgdGhpcy5iYWNraW5nVXAgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdzeXN0ZW0vdXBkYXRlci9iYWNrdXAnKSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja2luZ1VwID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tlZFVwID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuYmFja3VwTWVzc2FnZSA9IGRhdGEubWVzc2FnZVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFsbCgpXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja2luZ1VwID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2t1cEZhaWxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLndvbXAoZGF0YSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgZG93bmxvYWQoKSB7XG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ3N5c3RlbS91cGRhdGVyL2Rvd25sb2FkJyksIHsgdmVyc2lvbjogdGhpcy52ZXJzaW9uVG8gfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRlZCA9IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkTWVzc2FnZSA9IGRhdGEubWVzc2FnZVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFsbCgpXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRGYWlsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGhpcy53b21wKGRhdGEpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbnN0YWxsKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlUb0luc3RhbGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbGxpbmcgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGhpcy51bnppcCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW56aXAoKSB7XG4gICAgICAgICAgICB0aGlzLnVuemlwcGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdzeXN0ZW0vdXBkYXRlci91bnppcCcpLCB7IHZlcnNpb246IHRoaXMudmVyc2lvblRvIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW56aXBwaW5nID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aGlzLnVuemlwcGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9zZXIoKVxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuemlwcGluZyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgdGhpcy51bnppcHBlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgdGhpcy51bnppcHBpbmdGYWlsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGhpcy53b21wKGRhdGEpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb21wb3NlcigpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFsbGluZ0RlcGVuZGVuY2llcyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdzeXN0ZW0vdXBkYXRlci9jb21wb3NlcicpKS5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbGxpbmdEZXBlbmRlbmNpZXMgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFsbGVkRGVwZW5kZW5jaWVzID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc3dhcCgpXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFsbGluZ0RlcGVuZGVuY2llcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YWxsaW5nRGVwZW5kZW5jaWVzRmFpbGVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICB0aGlzLndvbXAoZGF0YSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN3YXAoKSB7XG4gICAgICAgICAgICB0aGlzLnN3YXBwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ3N5c3RlbS91cGRhdGVyL3N3YXAnKSkuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zd2FwcGluZyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5zd2FwcGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW5VcCgpXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3dhcHBpbmcgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuc3dhcHBpbmdGYWlsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgdGhpcy53b21wKGRhdGEpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhblVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlZCA9IHRydWVcbiAgICAgICAgICAgIHRoaXMuY2xlYW5pbmdVcCA9IHRydWVcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHZlcnNpb24gbnVtYmVyXG4gICAgICAgICAgICB0aGlzLiRyb290LnZlcnNpb24gPSB0aGlzLnZlcnNpb247XG4gICAgICAgICAgICAkKCcubmF2LW1haW4gLnVwZGF0ZScpLmhpZGUoKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnc3lzdGVtL3VwZGF0ZXIvY2xlYW4nKSwge1xuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvblRvLFxuICAgICAgICAgICAgICAgIG9sZFZlcnNpb246IHRoaXMudmVyc2lvbkZyb21cbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW5pbmdVcCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhbmVkVXAgPSB0cnVlXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW5pbmdVcCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhblVwRmFpbGVkID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHRoaXMud29tcChkYXRhKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICB3b21wOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgICAgICAgICAgXy5lYWNoKGRhdGEuZXJyb3JzLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmVycm9ycy5wdXNoKGVycm9yKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvdXBkYXRlci5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgcHJvcHM6IFsnaW1wb3J0ZXInXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXhwb3J0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGV4cG9ydGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGV4cG9ydEZhaWxlZDogZmFsc2UsXG4gICAgICAgICAgICBleHBvcnRFcnJvcjogbnVsbCxcbiAgICAgICAgICAgIGltcG9ydGluZzogZmFsc2UsXG4gICAgICAgICAgICBpbXBvcnRlZDogZmFsc2UsXG4gICAgICAgICAgICBzdW1tYXJ5OiBudWxsLFxuICAgICAgICAgICAgc2hvd0FsbFBhZ2VzOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dDb2xsZWN0aW9uczogW10sXG4gICAgICAgICAgICBzaG93VGF4b25vbWllczogW10sXG4gICAgICAgICAgICBzaG93R2xvYmFsczogW10sXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgdG90YWxQYWdlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc3VtbWFyeS5wYWdlcykubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLnN1bW1hcnkgPSBTdGF0YW1pYy5JbXBvcnRTdW1tYXJ5O1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgaW1wb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmltcG9ydGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdpbXBvcnQvaW1wb3J0JyksIHsgc3VtbWFyeTogdGhpcy5zdW1tYXJ5IH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmltcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNEdXBsaWNhdGVzIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gISEgdGhpcy5kdXBsaWNhdGVDb3VudChjb2xsZWN0aW9uKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkdXBsaWNhdGVDb3VudDogZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgICAgICAgICBfLmVhY2goaXRlbXMsIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEgaXRlbS5leGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIHVuY2hlY2tEdXBsaWNhdGVzOiBmdW5jdGlvbihpdGVtcykge1xuICAgICAgICAgICAgXy5lYWNoKGl0ZW1zLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghIGl0ZW0uZXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpdGVtLl9jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaXplOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5zaXplKG9iaik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0NvbGxlY3Rpb246IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dDb2xsZWN0aW9ucy5wdXNoKGNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgXy51bmlxKHRoaXMuc2hvd0NvbGxlY3Rpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlQ29sbGVjdGlvbjogZnVuY3Rpb24gKGhpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5zaG93Q29sbGVjdGlvbnMgPSBfLnJlamVjdCh0aGlzLnNob3dDb2xsZWN0aW9ucywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA9PT0gaGlkZGVuO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICBzaG91bGRTaG93Q29sbGVjdGlvbjogZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfLmNvbnRhaW5zKHRoaXMuc2hvd0NvbGxlY3Rpb25zLCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93VGF4b25vbXk6IGZ1bmN0aW9uICh0YXhvbm9teSkge1xuICAgICAgICAgICAgdGhpcy5zaG93VGF4b25vbWllcy5wdXNoKHRheG9ub215KTtcbiAgICAgICAgICAgIF8udW5pcSh0aGlzLnNob3dUYXhvbm9taWVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlVGF4b25vbXk6IGZ1bmN0aW9uIChoaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1RheG9ub21pZXMgPSBfLnJlamVjdCh0aGlzLnNob3dUYXhvbm9taWVzLCBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBoaWRkZW47XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIHNob3VsZFNob3dUYXhvbm9teTogZnVuY3Rpb24gKHRheG9ub215KSB7XG4gICAgICAgICAgICByZXR1cm4gXy5jb250YWlucyh0aGlzLnNob3dUYXhvbm9taWVzLCB0YXhvbm9teSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd0dsb2JhbDogZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICAgICAgICAgdGhpcy5zaG93R2xvYmFscy5wdXNoKGdsb2JhbCk7XG4gICAgICAgICAgICBfLnVuaXEodGhpcy5zaG93R2xvYmFscyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZUdsb2JhbDogZnVuY3Rpb24gKGhpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5zaG93R2xvYmFscyA9IF8ucmVqZWN0KHRoaXMuc2hvd0dsb2JhbHMsIGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGcgPT09IGhpZGRlbjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdWxkU2hvd0dsb2JhbDogZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uY29udGFpbnModGhpcy5zaG93R2xvYmFscywgZ2xvYmFsKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvaW1wb3J0ZXIvaW1wb3J0ZXIuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIG1peGluczogW0Rvc3NpZXJdLFxuXG4gICAgcHJvcHM6IFsnZ2V0JywgJ2RlbGV0ZScsICdrZXl3b3JkJywgJ2Nhbk1hbmFnZScsICdjYW5EZWxldGUnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc29ydDogJ3RpdGxlJyxcbiAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICBhamF4OiB7XG4gICAgICAgICAgICAgICAgZ2V0OiB0aGlzLmdldCxcbiAgICAgICAgICAgICAgICBkZWxldGU6IHRoaXMuZGVsZXRlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgc29ydDogdGhpcy5zb3J0LFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGRBY3Rpb25QYXJ0aWFsKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkQWN0aW9uUGFydGlhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9IGA8bGk+PGEgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+e3sgdHJhbnNsYXRlKCdjcC5lZGl0JykgfX08L2E+PC9saT5gO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW5EZWxldGUpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljay5wcmV2ZW50PVwiY2FsbCgnZGVsZXRlSXRlbScsIGl0ZW0uaWQpXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnRhYmxlT3B0aW9ucy5wYXJ0aWFscy5hY3Rpb25zID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL3Rlcm1zLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBtaXhpbnM6IFtEb3NzaWVyXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgIGdldDogY3BfdXJsKCd0YXhvbm9taWVzL2dldCcpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0OiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1kb2N1bWVudHNcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbS50YXhvbm9taWVzIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIDpocmVmPVwiaXRlbS50ZXJtc191cmxcIj57eyBpdGVtLnRpdGxlIH19PC9hPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwie3sgaXRlbS5jcmVhdGVfdXJsIH19XCIgdi1pZj1cImNhbigndGF4b25vbWllczonK2l0ZW0uaWQrJzpjcmVhdGUnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4taWNvbiBidG4tcHJpbWFyeSBwdWxsLXJpZ2h0XCI+PHNwYW4gY2xhc3M9XCJpY29uIGljb24tcGx1c1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbignc3VwZXInKSkge1xuICAgICAgICAgICAgdGhpcy5hZGRBY3Rpb25QYXJ0aWFsKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRBY3Rpb25QYXJ0aWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gYFxuICAgICAgICAgICAgICAgIDxsaT48YSA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIj57eyB0cmFuc2xhdGUoJ2NwLmVkaXQnKSB9fTwvYT48L2xpPlxuICAgICAgICAgICAgYDtcblxuICAgICAgICAgICAgdGhpcy50YWJsZU9wdGlvbnMucGFydGlhbHMuYWN0aW9ucyA9IHN0cjtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy90YXhvbm9taWVzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBtaXhpbnM6IFtEb3NzaWVyXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgIGdldDogY3BfdXJsKCdnbG9iYWxzL2dldCcpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0OiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogYDxhIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiPnt7IGl0ZW0udGl0bGUgfX08L2E+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy9nbG9iYWxzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBtaXhpbnM6IFtEb3NzaWVyXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgIGdldDogY3BfdXJsKCd1c2Vycy9nZXQnKSxcbiAgICAgICAgICAgICAgICBzZWFyY2g6IGNwX3VybCgndXNlcnMvc2VhcmNoJyksXG4gICAgICAgICAgICAgICAgZGVsZXRlOiBjcF91cmwoJ3VzZXJzL2RlbGV0ZScpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYmxlT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHNvcnQ6ICduYW1lJyxcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXI6ICdhc2MnLFxuICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGw6IGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cInsgJ2hhcy1zdGF0dXMtaWNvbic6ICRpbmRleCA9PT0gMCB9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cIiRpbmRleCA9PT0gMFwiIGNsYXNzPVwic3RhdHVzIHN0YXR1cy17eyAoaXRlbS5zdGF0dXMgPT09ICdhY3RpdmUnKSA/ICdsaXZlJyA6ICdoaWRkZW4nIH19XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiKGl0ZW0uc3RhdHVzID09PSAnYWN0aXZlJykgPyB0cmFuc2xhdGUoJ2NwLnN0YXR1c19hY3RpdmUnKSA6IHRyYW5zbGF0ZSgnY3Auc3RhdHVzX3BlbmRpbmcnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWlmPVwiY29sdW1uLmxpbmtcIiA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIiBjbGFzcz1cImhhcy1zdGF0dXMtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3sgZm9ybWF0VmFsdWUoaXRlbVtjb2x1bW4udmFsdWVdKSB9fX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3t7IGZvcm1hdFZhbHVlKGl0ZW1bY29sdW1uLnZhbHVlXSkgfX19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBWdWUuY2FuKCd1c2VyczpkZWxldGUnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRkQWN0aW9uUGFydGlhbCgpO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZEFjdGlvblBhcnRpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuKCd1c2VyczplZGl0JykpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gYDxsaT48YSA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIj57eyB0cmFuc2xhdGUoJ2NwLmVkaXQnKSB9fTwvYT48L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbigndXNlcnM6ZWRpdC1wYXNzd29yZHMnKSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBgPGxpPjxhIDpocmVmPVwiaXRlbS5lZGl0X3Bhc3N3b3JkX3VybFwiPnt7IHRyYW5zbGF0ZSgnY3AuY2hhbmdlX3Bhc3N3b3JkJykgfX08L2E+PC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW4oJ3VzZXJzOmRlbGV0ZScpKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGBcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwid2FybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2sucHJldmVudD1cImNhbGwoJ2RlbGV0ZUl0ZW0nLCBpdGVtLmlkKVwiPnt7IHRyYW5zbGF0ZSgnY3AuZGVsZXRlJykgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50YWJsZU9wdGlvbnMucGFydGlhbHMuYWN0aW9ucyA9IHN0cjtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy91c2Vycy5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgndXNlcnMvZ3JvdXBzL2dldCcpLFxuICAgICAgICAgICAgICAgIGRlbGV0ZTogY3BfdXJsKCd1c2Vycy9ncm91cHMvZGVsZXRlJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBzb3J0OiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cIiRpbmRleCA9PT0gMFwiIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW1bY29sdW1uLnZhbHVlXSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtW2NvbHVtbi52YWx1ZV0gfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkZEFjdGlvblBhcnRpYWwoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRBY3Rpb25QYXJ0aWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbigndXNlcnM6ZWRpdCcpKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGA8bGk+PGEgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+e3sgdHJhbnNsYXRlKCdjcC5lZGl0JykgfX08L2E+PC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW4oJ3VzZXJzOmRlbGV0ZScpKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGBcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwid2FybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2sucHJldmVudD1cImNhbGwoJ2RlbGV0ZUl0ZW0nLCBpdGVtLmlkKVwiPnt7IHRyYW5zbGF0ZSgnY3AuZGVsZXRlJykgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50YWJsZU9wdGlvbnMucGFydGlhbHMuYWN0aW9ucyA9IHN0cjtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9saXN0aW5ncy91c2VyLWdyb3Vwcy5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgndXNlcnMvcm9sZXMvZ2V0JyksXG4gICAgICAgICAgICAgICAgZGVsZXRlOiBjcF91cmwoJ3VzZXJzL3JvbGVzL2RlbGV0ZScpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgc29ydDogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXI6ICdhc2MnLFxuICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGw6IGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtaWY9XCIkaW5kZXggPT09IDBcIiA6aHJlZj1cIml0ZW0uZWRpdF91cmxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtW2NvbHVtbi52YWx1ZV0gfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbVtjb2x1bW4udmFsdWVdIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGRBY3Rpb25QYXJ0aWFsKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkQWN0aW9uUGFydGlhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW4oJ3VzZXJzOmVkaXQnKSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBgPGxpPjxhIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiPnt7IHRyYW5zbGF0ZSgnY3AuZWRpdCcpIH19PC9hPjwvbGk+YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuKCd1c2VyczpkZWxldGUnKSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBgXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIndhcm5pbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrLnByZXZlbnQ9XCJjYWxsKCdkZWxldGVJdGVtJywgaXRlbS5pZClcIj57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGFibGVPcHRpb25zLnBhcnRpYWxzLmFjdGlvbnMgPSBzdHI7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvdXNlci1yb2xlcy5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgbWl4aW5zOiBbRG9zc2llcl0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFqYXg6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGNwX3VybCgnZmllbGRzZXRzLWpzb24nKSxcbiAgICAgICAgICAgICAgICBkZWxldGU6IGNwX3VybCgnZmllbGRzZXRzL2RlbGV0ZScpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFibGVPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0OiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogJ2FzYycsXG4gICAgICAgICAgICAgICAgcGFydGlhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogYFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cIiRpbmRleCA9PT0gMFwiIDpocmVmPVwiaXRlbS5lZGl0X3VybFwiIGNsYXNzPVwiaGFzLXN0YXR1cy1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0dXMgc3RhdHVzLXt7IChpdGVtLmhpZGRlbikgPyAnaGlkZGVuJyA6ICdsaXZlJyB9fVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi10aXAgOnRpcC10ZXh0PVwiKGl0ZW0uaGlkZGVuKSA/IHRyYW5zbGF0ZSgnY3AuaGlkZGVuJykgOiB0cmFuc2xhdGUoJ2NwLnB1Ymxpc2hlZCcpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW1bY29sdW1uLnZhbHVlXSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtW2NvbHVtbi52YWx1ZV0gfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkZEFjdGlvblBhcnRpYWwoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBhZGRBY3Rpb25QYXJ0aWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbignZmllbGRzZXRzOm1hbmFnZScpKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9IGA8bGk+PGEgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+e3sgdHJhbnNsYXRlKCdjcC5lZGl0JykgfX08L2E+PC9saT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jYW4oJ2ZpZWxkc2V0czpkZWxldGUnKSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSBgXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cIndhcm5pbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgQGNsaWNrLnByZXZlbnQ9XCJjYWxsKCdkZWxldGVJdGVtJywgaXRlbS5pZClcIj57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGFibGVPcHRpb25zLnBhcnRpYWxzLmFjdGlvbnMgPSBzdHI7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdGluZ3MvZmllbGRzZXRzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBtaXhpbnM6IFtEb3NzaWVyXSxcblxuICAgIHByb3BzOiBbJ2dldCddLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3J0OiAnZGF0ZXN0YW1wJyxcbiAgICAgICAgICAgIHNvcnRPcmRlcjogJ2Rlc2MnLFxuICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgIGdldDogdGhpcy5nZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJsZU9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGVja2JveGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0OiAnZGF0ZXN0YW1wJyxcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXI6ICdkZXNjJyxcbiAgICAgICAgICAgICAgICBwYXJ0aWFsczoge1xuICAgICAgICAgICAgICAgICAgICBjZWxsOiBgXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWlmPVwiJGluZGV4ID09PSAwXCIgOmhyZWY9XCJpdGVtLmVkaXRfdXJsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaXRlbVtjb2x1bW4udmFsdWVdIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7eyBpdGVtW2NvbHVtbi52YWx1ZV0gfX19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuKCdzdXBlcicpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEFjdGlvblBhcnRpYWwoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZEFjdGlvblBhcnRpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSBgXG4gICAgICAgICAgICAgICAgPGxpPjxhIDpocmVmPVwiaXRlbS5kZWxldGVfdXJsXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fTwvYT48L2xpPlxuICAgICAgICAgICAgYDtcblxuICAgICAgICAgICAgdGhpcy50YWJsZU9wdGlvbnMucGFydGlhbHMuYWN0aW9ucyA9IHN0cjtcbiAgICAgICAgfVxuICAgIH1cblxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3RpbmdzL2Zvcm0tc3VibWlzc2lvbnMuanMiLCJ2YXIgUGVybWlzc2lvbiA9IHtcbiAgICBuYW1lOiAncGVybWlzc2lvbicsXG5cbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIDppZD1cIm5hbWVcIiBuYW1lPVwicGVybWlzc2lvbnNbXVwiIHYtbW9kZWw9XCJzZWxlY3RlZFBlcm1pc3Npb25zXCIgOnZhbHVlPVwibmFtZVwiIDpkaXNhYmxlZD1cImRpc2FibGVkXCIgLz5cbiAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVwibmFtZVwiPnt7IGxhYmVsIH19PC9sYWJlbD5cblxuICAgICAgICAgICAgPHVsIHYtaWY9XCJjaGlsZHJlblwiIDpjbGFzcz1cInsgJ2Rpc2FibGVkJzogIXNlbGVjdGVkIH1cIj5cbiAgICAgICAgICAgICAgICA8bGkgdi1mb3I9XCIoa2V5LCB2YWx1ZSkgaW4gY2hpbGRyZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgPHBlcm1pc3Npb24gOmtleT1cImtleVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNlbGVjdGVkLXBlcm1pc3Npb25zPVwic2VsZWN0ZWRQZXJtaXNzaW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiFzZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgID48L3Blcm1pc3Npb24+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgIGAsXG5cbiAgICBwcm9wczogWydrZXknLCAndmFsdWUnLCAnc2VsZWN0ZWRQZXJtaXNzaW9ucycsICdkaXNhYmxlZCddLFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgbmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ2hpbGRyZW4gPyB0aGlzLmtleSA6IHRoaXMudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5uYW1lO1xuXG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGtleS5tYXRjaCgvXi4qXFw6KC4qKVxcOi4qJC8pO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGtleSA9IG1hdGNoZXNbMF0ucmVwbGFjZSgnOicrbWF0Y2hlc1sxXSsnOicsICc6KjonKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSgncGVybWlzc2lvbnMuJytrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBoYXNDaGlsZHJlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnZhbHVlICE9PSAnc3RyaW5nJztcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuaGFzQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZWxlY3RlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uY29udGFpbnModGhpcy5zZWxlY3RlZFBlcm1pc3Npb25zLCB0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG4gICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gXy5pbmRleE9mKHRoaXMuc2VsZWN0ZWRQZXJtaXNzaW9ucywgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFBlcm1pc3Npb25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgUGVybWlzc2lvblxuICAgIH0sXG5cbiAgICBwcm9wczogWydwZXJtaXNzaW9ucycsICdzZWxlY3RlZCcsICd0aXRsZXMnXSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHN1cGVyU2VsZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmluZGV4T2YodGhpcy5zZWxlY3RlZCwgJ3N1cGVyJykgIT09IC0xO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc3RhcnRzV2l0aDogZnVuY3Rpb24gKGhheXN0YWNrLCBuZWVkbGUpIHtcbiAgICAgICAgICAgIHJldHVybiAhaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRpdGxlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpdGxlc1twYXJ0c1swXV1bcGFydHNbMV1dO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxhYmVsOiBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0c1dpdGgoZ3JvdXAsICdjb2xsZWN0aW9ucycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbGxlY3Rpb25zJywgMSkgKyAnOiAnICsgdGhpcy50aXRsZShncm91cCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0c1dpdGgoZ3JvdXAsICd0YXhvbm9taWVzJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlX2Nob2ljZSgnY3AudGF4b25vbWllcycsIDEpICsgJzogJyArIHRoaXMudGl0bGUoZ3JvdXApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydHNXaXRoKGdyb3VwLCAnZ2xvYmFscycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmdsb2JhbHMnLCAxKSArICc6ICcgKyB0aGlzLnRpdGxlKGdyb3VwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRzV2l0aChncm91cCwgJ2Fzc2V0cycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmFzc2V0X2NvbnRhaW5lcnMnLCAyKSArICc6ICcgKyB0aGlzLnRpdGxlKGdyb3VwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSgncGVybWlzc2lvbnMuZ3JvdXBfJytncm91cCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcm9sZXMvcm9sZXMuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHNob3dFbWFpbExvZ2luOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBoYXNFcnJvcjoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzaGFrZScpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmpzIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vTG9naW5Nb2RhbC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0xvZ2luTW9kYWwudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9sb2dpbi9Mb2dpbk1vZGFsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNDAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXY+XG5cbiAgICAgICAgPG1vZGFsIDpzaG93PVwic2hvd1wiIGNsYXNzPVwibW9kYWwtbG9naW5cIiA6c2hha2U9XCJoYXNFcnJvcnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5sb2dpbl90b19jb250aW51ZScpIH19XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJib2R5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIDpjbGFzcz1cInsgJ3RleHQtcmVkJzogZXJyb3JzLnBhc3N3b3JkLmxlbmd0aCB9XCI+e3sgdHJhbnNsYXRlKCdjcC5wYXNzd29yZF9mb3InLCB7IHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lIH0pIH19IDxpIGNsYXNzPVwicmVxdWlyZWRcIj4qPC9pPjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc3dvcmRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJwYXNzd29yZFwiIHYtZWw6cGFzc3dvcmQgQGtleWRvd24uZW50ZXIucHJldmVudD1cInN1Ym1pdFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImJsb2NrIHRleHQtcmVkIG10LTFcIiB2LWlmPVwiZXJyb3JzLnVzZXJuYW1lLmxlbmd0aFwiPnt7IGVycm9ycy51c2VybmFtZVswXSB9fTwvc21hbGw+XG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImJsb2NrIHRleHQtcmVkIG10LTFcIiB2LWlmPVwiZXJyb3JzLnBhc3N3b3JkLmxlbmd0aFwiPnt7IGVycm9ycy5wYXNzd29yZFswXSB9fTwvc21hbGw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJmb290ZXJcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljay5wcmV2ZW50PVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57eyB0cmFuc2xhdGUoJ2NwLnN1Ym1pdCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L21vZGFsPlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWyd1c2VybmFtZSddLFxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy4kaHR0cC5nZXQoY3BfdXJsKCdhdXRoL3Rva2VuJykpLnN1Y2Nlc3MocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgVnVlLmh0dHAuaGVhZGVycy5jb21tb25bJ1gtQ1NSRi1UT0tFTiddID0gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuJGVscy5wYXNzd29yZC5mb2N1cygpO1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBoYXNFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gISBfLmlzRW1wdHkodGhpcy5lcnJvcnMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzdWJtaXQoKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdOyAvLyByZXNldCBlcnJvcnNcbiAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ2F1dGgvbG9naW4nKSwge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkXG4gICAgICAgICAgICB9KS5zdWNjZXNzKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuJG5vdGlmeS5zdWNjZXNzKHRyYW5zbGF0ZSgnY3AubG9nZ2VkX2luJykpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlZCcpO1xuICAgICAgICAgICAgfSkuZXJyb3IocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBMb2dpbk1vZGFsLnZ1ZT8zNTlhNDNmNyIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdj4gPG1vZGFsIDpzaG93PXNob3cgY2xhc3M9bW9kYWwtbG9naW4gOnNoYWtlPWhhc0Vycm9ycz4gPHRlbXBsYXRlIHNsb3Q9aGVhZGVyPiB7eyB0cmFuc2xhdGUoJ2NwLmxvZ2luX3RvX2NvbnRpbnVlJykgfX0gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9Ym9keT4gPGRpdiBjbGFzcz1tYi0yPiA8bGFiZWwgOmNsYXNzPVxcXCJ7ICd0ZXh0LXJlZCc6IGVycm9ycy5wYXNzd29yZC5sZW5ndGggfVxcXCI+e3sgdHJhbnNsYXRlKCdjcC5wYXNzd29yZF9mb3InLCB7IHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lIH0pIH19IDxpIGNsYXNzPXJlcXVpcmVkPio8L2k+PC9sYWJlbD4gPGlucHV0IHR5cGU9cGFzc3dvcmQgbmFtZT1wYXNzd29yZCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1wYXNzd29yZCB2LWVsOnBhc3N3b3JkIEBrZXlkb3duLmVudGVyLnByZXZlbnQ9c3VibWl0IC8+IDxzbWFsbCBjbGFzcz1cXFwiYmxvY2sgdGV4dC1yZWQgbXQtMVxcXCIgdi1pZj1lcnJvcnMudXNlcm5hbWUubGVuZ3RoPnt7IGVycm9ycy51c2VybmFtZVswXSB9fTwvc21hbGw+IDxzbWFsbCBjbGFzcz1cXFwiYmxvY2sgdGV4dC1yZWQgbXQtMVxcXCIgdi1pZj1lcnJvcnMucGFzc3dvcmQubGVuZ3RoPnt7IGVycm9ycy5wYXNzd29yZFswXSB9fTwvc21hbGw+IDwvZGl2PiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1mb290ZXI+IDxidXR0b24gQGNsaWNrLnByZXZlbnQ9c3VibWl0IGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPnt7IHRyYW5zbGF0ZSgnY3Auc3VibWl0JykgfX08L2J1dHRvbj4gPC90ZW1wbGF0ZT4gPC9tb2RhbD4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbG9naW4vTG9naW5Nb2RhbC52dWVcbi8vIG1vZHVsZSBpZCA9IDQwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9TdmdJY29uLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU3ZnSWNvbi52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL1N2Z0ljb24udnVlXG4vLyBtb2R1bGUgaWQgPSA0MDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiA6Y2xhc3M9XCJbICdzdmctaWNvbicsIHsgJ3VzaW5nLWRpdic6IHR5cGUgPT09ICdkaXYnLCAndXNpbmctc3ZnJzogdHlwZSA9PT0gJ3N2ZycgfSBdXCJcbiAgICAgICAgdi1odG1sPVwiaHRtbFwiPjwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzdmcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaHRtbCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdkaXYnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcke3Jlc291cmNlX3VybCgnc3ZnLycrdGhpcy5uYW1lKycuc3ZnJyl9JylcIj48L2Rpdj5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZShgISFodG1sLWxvYWRlciEuLy4uLy4uL3N2Zy8ke3RoaXMubmFtZX0uc3ZnYCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU3ZnSWNvbi52dWU/ZjFmM2NlMTAiLCJ2YXIgbWFwID0ge1xuXHRcIi4vYXJyYXkuc3ZnXCI6IDQwOSxcblx0XCIuL2Fzc2V0cy5zdmdcIjogNDEwLFxuXHRcIi4vYmFyZC5zdmdcIjogNDExLFxuXHRcIi4vY2hlY2tib3hlcy5zdmdcIjogNDEyLFxuXHRcIi4vY29sbGVjdGlvbi5zdmdcIjogNDEzLFxuXHRcIi4vY29sbGVjdGlvbnMuc3ZnXCI6IDQxNCxcblx0XCIuL2RhdGUuc3ZnXCI6IDQxNSxcblx0XCIuL2VudHJpZXMuc3ZnXCI6IDQxNixcblx0XCIuL2ZpZWxkc2V0LnN2Z1wiOiA0MTcsXG5cdFwiLi9maWxlLWFyY2hpdmUuc3ZnXCI6IDQxOCxcblx0XCIuL2ZpbGUtYXVkaW8uc3ZnXCI6IDQxOSxcblx0XCIuL2ZpbGUtZG9jLnN2Z1wiOiA0MjAsXG5cdFwiLi9maWxlLWV4Y2VsLnN2Z1wiOiA0MjEsXG5cdFwiLi9maWxlLWdlbmVyaWMuc3ZnXCI6IDQyMixcblx0XCIuL2ZpbGUtanNvbi5zdmdcIjogNDIzLFxuXHRcIi4vZmlsZS1sYXllcmVkLnN2Z1wiOiA0MjQsXG5cdFwiLi9maWxlLXBkZi5zdmdcIjogNDI1LFxuXHRcIi4vZmlsZS1wcmVzZW50YXRpb24uc3ZnXCI6IDQyNixcblx0XCIuL2ZpbGUtdmlkZW8uc3ZnXCI6IDQyNyxcblx0XCIuL2ZpbGUteG1sLnN2Z1wiOiA0MjgsXG5cdFwiLi9mb2xkZXItc2VhcmNoLWVtcHR5LnN2Z1wiOiA0MjksXG5cdFwiLi9mb2xkZXIuc3ZnXCI6IDQzMCxcblx0XCIuL2Zvcm0uc3ZnXCI6IDQzMSxcblx0XCIuL2dlbmVyaWMuc3ZnXCI6IDQzMixcblx0XCIuL2dyaWQuc3ZnXCI6IDQzMyxcblx0XCIuL2hpZGRlbi5zdmdcIjogNDM0LFxuXHRcIi4vaW50ZWdlci5zdmdcIjogNDM1LFxuXHRcIi4vbGlzdC5zdmdcIjogNDM2LFxuXHRcIi4vbWFya2Rvd24uc3ZnXCI6IDQzNyxcblx0XCIuL3BhZ2VzLnN2Z1wiOiA0MzgsXG5cdFwiLi9wYXJ0aWFsLnN2Z1wiOiA0MzksXG5cdFwiLi9waWN0dXJlLnN2Z1wiOiA0NDAsXG5cdFwiLi9yYWRpby5zdmdcIjogNDQxLFxuXHRcIi4vcmVkYWN0b3Iuc3ZnXCI6IDQ0Mixcblx0XCIuL3JlcGxpY2F0b3Iuc3ZnXCI6IDQ0Myxcblx0XCIuL3JldmVhbGVyLnN2Z1wiOiA0NDQsXG5cdFwiLi9zZWN0aW9uLnN2Z1wiOiA0NDUsXG5cdFwiLi9zZWxlY3Quc3ZnXCI6IDQ0Nixcblx0XCIuL3NsdWcuc3ZnXCI6IDQ0Nyxcblx0XCIuL3N0YXRhbWljLWxvZ28uc3ZnXCI6IDQ0OCxcblx0XCIuL3N0YXRhbWljLW1hcmsuc3ZnXCI6IDQ0OSxcblx0XCIuL3N1Z2dlc3Quc3ZnXCI6IDQ1MCxcblx0XCIuL3RhYmxlLnN2Z1wiOiA0NTEsXG5cdFwiLi90YWJzLnN2Z1wiOiA0NTIsXG5cdFwiLi90YWdzLnN2Z1wiOiA0NTMsXG5cdFwiLi90YXhvbm9teS5zdmdcIjogNDU0LFxuXHRcIi4vdGVtcGxhdGUuc3ZnXCI6IDQ1NSxcblx0XCIuL3RleHQuc3ZnXCI6IDQ1Nixcblx0XCIuL3RleHRhcmVhLnN2Z1wiOiA0NTcsXG5cdFwiLi90aGVtZS5zdmdcIjogNDU4LFxuXHRcIi4vdGltZS5zdmdcIjogNDU5LFxuXHRcIi4vdGl0bGUuc3ZnXCI6IDQ2MCxcblx0XCIuL3RvZ2dsZS5zdmdcIjogNDYxLFxuXHRcIi4vdXNlci1ncm91cHMuc3ZnXCI6IDQ2Mixcblx0XCIuL3VzZXItcm9sZXMuc3ZnXCI6IDQ2Myxcblx0XCIuL3VzZXJfZ3JvdXBzLnN2Z1wiOiA0NjQsXG5cdFwiLi91c2VyX3JvbGVzLnN2Z1wiOiA0NjUsXG5cdFwiLi91c2Vycy5zdmdcIjogNDY2LFxuXHRcIi4vdmlkZW8uc3ZnXCI6IDQ2Nyxcblx0XCIuL3Zpc2l0LnN2Z1wiOiA0NjgsXG5cdFwiLi95YW1sLnN2Z1wiOiA0Njlcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA0MDg7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2ZyAhLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIgXlxcLlxcLy4qXFwuc3ZnJFxuLy8gbW9kdWxlIGlkID0gNDA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPVxcXCJNMTUsMTIuNUg3Yy0wLjMsMC0wLjUsMC4yLTAuNSwwLjV2MmMwLDAuMywwLjIsMC41LDAuNSwwLjVoOGMwLjMsMCwwLjUtMC4yLDAuNS0wLjV2LTJcXG4gICAgICAgIEMxNS41LDEyLjcsMTUuMywxMi41LDE1LDEyLjV6XFxcIi8+IDxwYXRoIGNsYXNzPXN0MCBkPVxcXCJNMTUsNy41SDdDNi43LDcuNSw2LjUsNy43LDYuNSw4djJjMCwwLjMsMC4yLDAuNSwwLjUsMC41aDhjMC4zLDAsMC41LTAuMiwwLjUtMC41VjhDMTUuNSw3LjcsMTUuMyw3LjUsMTUsNy41XFxuICAgICAgICB6XFxcIi8+IDxwYXRoIGNsYXNzPXN0MCBkPU05LDAuNUgxQzAuNywwLjUsMC41LDAuNywwLjUsMXYyYzAsMC4zLDAuMiwwLjUsMC41LDAuNWg4YzAuMywwLDAuNS0wLjIsMC41LTAuNVYxQzkuNSwwLjcsOS4zLDAuNSw5LDAuNXogLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTQuNSwzLjV2MWMwLDAuNiwwLjQsMSwxLDFoM2MwLjYsMCwxLDAuNCwxLDF2MSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTEuNSB5MT0xMC41IHgyPTExLjUgeTI9MTIuNSAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2FycmF5LnN2Z1xuLy8gbW9kdWxlIGlkID0gNDA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk0xMCwxMS41SDFjLTAuMywwLTAuNS0wLjItMC41LTAuNVYxYzAtMC4zLDAuMi0wLjUsMC41LTAuNWg5YzAuMywwLDAuNSwwLjIsMC41LDAuNXYxMFxcbiAgICBDMTAuNSwxMS4zLDEwLjMsMTEuNSwxMCwxMS41elxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTAuNSB5MT04LjUgeDI9MC41IHkyPTguNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTIuNSw0LjJMMTUuMiw1YzAuMywwLjEsMC40LDAuNCwwLjMsMC42bC0zLjIsOS41Yy0wLjEsMC4zLTAuNCwwLjQtMC42LDAuM2wtNy4yLTIuNCAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMy41LDguNWwyLjgtNEM2LjYsNCw3LjQsNCw3LjgsNC41bDIuNywzIC8+IDxjaXJjbGUgY2xhc3M9c3QwIGN4PTMuNCBjeT0zLjQgcj0xLjEgLz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvYXNzZXRzLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE1cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE1IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNSAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxyZWN0IHg9MC41IHk9MC41IGNsYXNzPXN0MCB3aWR0aD0yIGhlaWdodD0xNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTIuNSwxYzMuNCwxLjMsNywxLjMsMTAuNywwLjRjMC4zLTAuMSwwLjYsMCwwLjksMC4yczAuNCwwLjUsMC40LDAuOEMxNCw4LjMsMTAuOCwxMi44LDQuOSwxNS4zXFxuICAgICAgICBjLTAuMiwwLjEtMC41LDAuMi0wLjgsMC4ySDIuNVxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTIuNSwzLjVjMi40LDEuMSw1LDEuMyw3LjgsMC42YzAuNC0wLjEsMC43LDAsMSwwLjNjMC4zLDAuMywwLjMsMC43LDAuMiwxYy0xLjIsMy4zLTMuNCw1LjctNi41LDcuNFxcbiAgICAgICAgQzQuNywxMi45LDQuMywxMyw0LDEzSDIuNVxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC41IHkxPTQuMiB4Mj00LjUgeTI9MTIuOSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9Ni41IHkxPTQuNSB4Mj02LjUgeTI9MTEuOCAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OC41IHkxPTQuNCB4Mj04LjUgeTI9MTAuMSAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2JhcmQuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0MTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTQuNSw2bDIuMiwzLjFjMC4yLDAuMywwLjUsMC40LDAuOCwwLjRjMC4zLDAsMC42LTAuMSwwLjgtMC40bDcuMi04LjYgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsN3Y2LjVjMCwxLjEtMC45LDItMiwyaC0xMGMtMS4xLDAtMi0wLjktMi0ydi0xMGMwLTEuMSwwLjktMiwyLTJIMTEgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9jaGVja2JveGVzLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE0cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE0IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNCAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPVxcXCJNMTAsMTUuNWgzYzAuMywwLDAuNS0wLjIsMC41LTAuNXYtMy4zYzAtMC4xLTAuMS0wLjMtMC4xLTAuNGwtMC43LTAuN2MtMC4xLTAuMS0wLjItMC4xLTAuNC0wLjFIMTBcXG4gICAgICAgIGMtMC4zLDAtMC41LDAuMi0wLjUsMC41djRDOS41LDE1LjMsOS43LDE1LjUsMTAsMTUuNXpcXFwiLz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk0xMCw2LjVoM2MwLjMsMCwwLjUtMC4yLDAuNS0wLjVWMi43YzAtMC4xLTAuMS0wLjMtMC4xLTAuNGwtMC43LTAuN2MtMC4xLTAuMS0wLjItMC4xLTAuNC0wLjFIMTBcXG4gICAgICAgIEM5LjcsMS41LDkuNSwxLjcsOS41LDJ2NEM5LjUsNi4zLDkuNyw2LjUsMTAsNi41elxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9MC41IHkxPTAuNSB4Mj0wLjUgeTI9MS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0wLjUgeTE9My41IHgyPTAuNSB5Mj01LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTAuNSB5MT03LjUgeDI9MC41IHkyPTkuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMC41LDExLjV2MWMwLDAuNiwwLjQsMSwxLDFoMSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC41IHkxPTEzLjUgeDI9Ni41IHkyPTEzLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTguNSB5MT0xMy41IHgyPTkuNSB5Mj0xMy41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0wLjUgeTE9NC41IHgyPTIuNSB5Mj00LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTQuNSB5MT00LjUgeDI9Ni41IHkyPTQuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OC41IHkxPTQuNSB4Mj05LjUgeTI9NC41IC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvY29sbGVjdGlvbi5zdmdcbi8vIG1vZHVsZSBpZCA9IDQxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTE1LjUsOS4yYzAtMC40LTAuMy0wLjctMC43LTAuN0gxLjJjLTAuNCwwLTAuNywwLjMtMC43LDAuN3Y1LjdjMCwwLjQsMC4zLDAuNywwLjcsMC43aDEzLjdcXG4gICAgICAgIGMwLjQsMCwwLjctMC4zLDAuNy0wLjdWOS4yelxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMS41LDguNVY0LjdDMS41LDQuMywxLjgsNCwyLjIsNGg1LjZDOCw0LDguMiw0LjEsOC4zLDQuM2wwLjgsMS4yaDQuM2MwLjQsMCwwLjcsMC4zLDAuNywwLjd2Mi40IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT02IHkxPTEwLjUgeDI9MTAgeTI9MTAuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTMuMiwzLjVWMi43YzAtMC40LTAuMy0wLjctMC43LTAuN0g5LjFMOC4zLDAuOEM4LjIsMC42LDgsMC41LDcuOCwwLjVIM2MtMC40LDAtMC43LDAuMy0wLjcsMC43djAuNyAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2NvbGxlY3Rpb25zLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTUuNSwxNC41YzAsMC42LTAuNCwxLTEsMWgtMTNjLTAuNiwwLTEtMC40LTEtMXYtMTFjMC0wLjYsMC40LTEsMS0xaDEzYzAuNiwwLDEsMC40LDEsMVYxNC41eiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MC41IHkxPTYuNSB4Mj0xNS41IHkyPTYuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC41IHkxPTQgeDI9NC41IHkyPTAuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTEuNSB5MT00IHgyPTExLjUgeTI9MC41IC8+IDwvZz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9kYXRlLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzPXN0cm9rZS1jdXJyZW50IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rPiA8ZyBzdHJva2U9bm9uZSBzdHJva2Utd2lkdGg9MSBmaWxsPW5vbmUgZmlsbC1ydWxlPWV2ZW5vZGQgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPiA8cGF0aCBkPVxcXCJNMTUuNTAwNCwxMi41MDAzIEMxNS41MDA0LDEzLjA1MjMgMTUuMDUyNCwxMy41MDAzIDE0LjUwMDQsMTMuNTAwMyBMMy41MDA0LDEzLjUwMDMgQzIuOTQ3NCwxMy41MDAzIDIuNTAwNCwxMy4wNTIzIDIuNTAwNCwxMi41MDAzIEwyLjUwMDQsMS41MDAzIEMyLjUwMDQsMC45NDczIDIuOTQ3NCwwLjUwMDMgMy41MDA0LDAuNTAwMyBMMTQuNTAwNCwwLjUwMDMgQzE1LjA1MjQsMC41MDAzIDE1LjUwMDQsMC45NDczIDE1LjUwMDQsMS41MDAzIEwxNS41MDA0LDEyLjUwMDMgWlxcXCIgc3Ryb2tlPWN1cnJlbnRDb2xvcj48L3BhdGg+IDxwYXRoIGQ9XFxcIk0xMy41MDA0LDE1LjUwMDMgTDEuNTAwNCwxNS41MDAzIEMwLjk0NzQsMTUuNTAwMyAwLjUwMDQsMTUuMDUyMyAwLjUwMDQsMTQuNTAwMyBMMC41MDA0LDIuNTAwM1xcXCIgc3Ryb2tlPWN1cnJlbnRDb2xvcj48L3BhdGg+IDxwYXRoIGQ9XFxcIk01LjUwMDQsNC41MDAzIEwxMi41MDA0LDQuNTAwM1xcXCIgc3Ryb2tlPWN1cnJlbnRDb2xvcj48L3BhdGg+IDxwYXRoIGQ9XFxcIk01LjUwMDQsNi41MDAzIEwxMi41MDA0LDYuNTAwM1xcXCIgc3Ryb2tlPWN1cnJlbnRDb2xvcj48L3BhdGg+IDxwYXRoIGQ9XFxcIk01LjUwMDQsOC41MDAzIEwxMC41MDA0LDguNTAwM1xcXCIgc3Ryb2tlPWN1cnJlbnRDb2xvcj48L3BhdGg+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZW50cmllcy5zdmdcbi8vIG1vZHVsZSBpZCA9IDQxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxwYXRoIGNsYXNzPXN0MCBkPU02LDE1LjVIMS41Yy0wLjYsMC0xLTAuNC0xLTFWMTBjMC0wLjYsMC40LTEsMS0xSDZjMC42LDAsMSwwLjQsMSwxdjQuNUM3LDE1LjEsNi42LDE1LjUsNiwxNS41eiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MC41IHkxPTEzIHgyPTcgeTI9MTMgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTYsN0gxLjVjLTAuNiwwLTEtMC40LTEtMVYxLjVjMC0wLjYsMC40LTEsMS0xSDZjMC42LDAsMSwwLjQsMSwxVjZDNyw2LjYsNi42LDcsNiw3eiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MC41IHkxPTQuNSB4Mj03IHkyPTQuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTQuNSw3SDEwQzkuNCw3LDksNi42LDksNlYxLjVjMC0wLjYsMC40LTEsMS0xaDQuNWMwLjYsMCwxLDAuNCwxLDFWNkMxNS41LDYuNiwxNS4xLDcsMTQuNSw3eiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OSB5MT00LjUgeDI9MTUuNSB5Mj00LjUgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsMTUuNUgxMGMtMC42LDAtMS0wLjQtMS0xVjEwYzAtMC42LDAuNC0xLDEtMWg0LjVjMC42LDAsMSwwLjQsMSwxdjQuNUMxNS41LDE1LjEsMTUuMSwxNS41LDE0LjUsMTUuNXogLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTkgeTE9MTMgeDI9MTUuNSB5Mj0xMyAvPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9maWVsZHNldC5zdmdcbi8vIG1vZHVsZSBpZCA9IDQxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiIHN0YW5kYWxvbmU9XFxcIm5vXFxcIj8+IDxzdmcgd2lkdGg9NDNweCBoZWlnaHQ9NTZweCB2aWV3Qm94PVxcXCIwIDAgNDMgNTZcXFwiIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbms+IDx0aXRsZT4yIC0gWklQIEZpbGUgKGRvY3VtZW50LCBmb3JtYXQsIGV4dGVuc2lvbiwgZmlsZSwgdHlwZSwgZmxhdCk8L3RpdGxlPiA8ZGVzYz5DcmVhdGVkIHdpdGggU2tldGNoLjwvZGVzYz4gPGRlZnM+PC9kZWZzPiA8ZyBpZD1QYWdlLTEgc3Ryb2tlPW5vbmUgc3Ryb2tlLXdpZHRoPTEgZmlsbD1ub25lIGZpbGwtcnVsZT1ldmVub2RkPiA8ZyBpZD1JY29ucyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMTA4OS4wMDAwMDAsIC03MTkuMDAwMDAwKVxcXCI+IDxnIGlkPVpJUC1GaWxlIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDEwODkuMDAwMDAwLCA3MTkuMDAwMDAwKVxcXCI+IDxwYXRoIGQ9XFxcIk0zMC40ODUsMCBMMS40NjMsMCBDMC42NTUsMCAwLDAuNjU1IDAsMS45MjYgTDAsNTUgQzAsNTUuMzQ1IDAuNjU1LDU2IDEuNDYzLDU2IEw0MS41MzcsNTYgQzQyLjM0NSw1NiA0Myw1NS4zNDUgNDMsNTUgTDQzLDEyLjk3OCBDNDMsMTIuMjgyIDQyLjkwNywxMi4wNTggNDIuNzQzLDExLjg5MyBMMzEuMTA3LDAuMjU3IEMzMC45NDIsMC4wOTMgMzAuNzE4LDAgMzAuNDg1LDBcXFwiIGlkPUZpbGwtMTIgZmlsbD0jRTlFOUUwIGZpbGwtcnVsZT1ldmVub2RkPjwvcGF0aD4gPHBvbHlsaW5lIGlkPUZpbGwtMTMgZmlsbD0jRDlEN0NBIGZpbGwtcnVsZT1ldmVub2RkIHBvaW50cz1cXFwiMzEgMC4xNTEgMzEgMTIgNDIuODQ5IDEyIDMxIDAuMTUxXFxcIj48L3BvbHlsaW5lPiA8cG9seWdvbiBpZD1GaWxsLTI3MSBmaWxsPSNDOEJEQjggZmlsbC1ydWxlPWV2ZW5vZGQgcG9pbnRzPVxcXCIyMCA0MiAyMiA0MiAyMiA1NS45NCAyMCA1NS45NFxcXCI+PC9wb2x5Z29uPiA8cG9seWxpbmUgaWQ9RmlsbC0yNzIgZmlsbD0jQzhCREI4IGZpbGwtcnVsZT1ldmVub2RkIHBvaW50cz1cXFwiMjQgMjMgMjQgMjEgMjIgMjEgMjIgMTkgMjAgMTkgMjAgMjEgMTggMjEgMTggMjMgMjAgMjMgMjAgMjUgMTggMjUgMTggMjcgMjAgMjcgMjAgMjkgMTggMjkgMTggMzEgMjAgMzEgMjAgMzQgMjIgMzQgMjIgMzEgMjQgMzEgMjQgMjkgMjIgMjkgMjIgMjcgMjQgMjcgMjQgMjUgMjIgMjUgMjIgMjMgMjQgMjNcXFwiPjwvcG9seWxpbmU+IDxwb2x5Z29uIGlkPUZpbGwtMzA0IGZpbGw9I0NCQjI5MiBmaWxsLXJ1bGU9ZXZlbm9kZCBwb2ludHM9XFxcIjE3IDM0IDI1IDM0IDI1IDQyIDE3IDQyXFxcIj48L3BvbHlnb24+IDxwb2x5Z29uIGlkPVN0cm9rZS0zMDUgc3Ryb2tlPSM1RTVGNjIgc3Ryb2tlLXdpZHRoPTIgcG9pbnRzPVxcXCIxNyAzNCAyNSAzNCAyNSA0MiAxNyA0MlxcXCI+PC9wb2x5Z29uPiA8cG9seWdvbiBpZD1TdHJva2UtMzA2IHN0cm9rZT0jNUU1RjYyIHN0cm9rZS13aWR0aD0yIHBvaW50cz1cXFwiMjUgMzcgMTcgMzdcXFwiPjwvcG9seWdvbj4gPC9nPiA8L2c+IDwvZz4gPC9zdmc+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9maWxlLWFyY2hpdmUuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0MThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjw/eG1sIHZlcnNpb249XFxcIjEuMFxcXCIgZW5jb2Rpbmc9XFxcIlVURi04XFxcIiBzdGFuZGFsb25lPVxcXCJub1xcXCI/PiA8c3ZnIHdpZHRoPTQycHggaGVpZ2h0PTU5cHggdmlld0JveD1cXFwiMCAwIDQyIDU5XFxcIiB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rPiA8dGl0bGU+NjcgLU11c2ljIEZpbGUtIChGbGF0KTwvdGl0bGU+IDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPiA8ZGVmcz48L2RlZnM+IDxnIGlkPVBhZ2UtMSBzdHJva2U9bm9uZSBzdHJva2Utd2lkdGg9MSBmaWxsPW5vbmUgZmlsbC1ydWxlPWV2ZW5vZGQ+IDxnIGlkPUljb25zIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC04NDYuMDAwMDAwLCAtMTA3My4wMDAwMDApXFxcIj4gPGcgaWQ9NjctLU11c2ljLUZpbGUtLShGbGF0KSB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSg4NDYuMDAwMDAwLCAxMDczLjAwMDAwMClcXFwiPiA8cGF0aCBkPVxcXCJNNDIsMTIuMDE0IEwzMiwxMi4wMTQgQzMwLjg5NSwxMi4wMTQgMzAsMTEuMTE5IDMwLDEwLjAxNCBMMzAsMC4wMTQgTDQyLDEyLjAxNCBaXFxcIiBpZD1GaWxsLTI5NCBmaWxsPSNENEQwQkE+PC9wYXRoPiA8cGF0aCBkPVxcXCJNNDIsMTIuMDE0IEwzMiwxMi4wMTQgQzMwLjg5NSwxMi4wMTQgMzAsMTEuMTE5IDMwLDEwLjAxNCBMMzAsMC4wMTQgTDIsMC4wMTQgQzAuODk1LDAuMDE0IDAsMC45MDkgMCwyLjAxNCBMMCw1Ni4wMTQgQzAsNTcuMTE5IDAuODk1LDU4LjAxNCAyLDU4LjAxNCBMNDAsNTguMDE0IEM0MS4xMDUsNTguMDE0IDQyLDU3LjExOSA0Miw1Ni4wMTQgTDQyLDEyLjAxNCBaXFxcIiBpZD1GaWxsLTI5NSBmaWxsPSNFRkVBREQ+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMTgsNDEuMDE0IEwxOCw0MS4wMTQgQzE1Ljc5MSw0MS4wMTQgMTQsMzkuMjIzIDE0LDM3LjAxNCBDMTQsMzQuODA1IDE1Ljc5MSwzMy4wMTQgMTgsMzMuMDE0IEwyMiwzMy4wMTQgTDIyLDM3LjAxNCBDMjIsMzkuMjIzIDIwLjIwOSw0MS4wMTQgMTgsNDEuMDE0XFxcIiBpZD1GaWxsLTUxNyBmaWxsPSNGMzg3NzQ+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMjEsMzQuMDE0IEwyMC45OTgsMzQuMDE0IEMyMC40NDYsMzQuMDEzIDE5Ljk5OSwzMy41NjUgMjAsMzMuMDEyIEwyMC4wMzEsMTQuMDEyIEMyMC4wMzIsMTMuNTk1IDIwLjI5MSwxMy4yMjMgMjAuNjgyLDEzLjA3NyBDMjEuMDczLDEyLjkzMiAyMS41MTMsMTMuMDQzIDIxLjc4NiwxMy4zNTkgTDI1Ljk0LDE4LjE0MyBDMjcuOTA2LDIwLjM4OSAyOC41NDIsMjMuNTQ4IDI3LjU5NywyNi4zODQgTDI2Ljk4NCwyOC4zMTcgQzI2LjgxOCwyOC44NDIgMjYuMjYsMjkuMTM3IDI1LjcyOSwyOC45NjcgQzI1LjIwMiwyOC44IDI0LjkxMSwyOC4yMzkgMjUuMDc4LDI3LjcxMSBMMjUuNjk1LDI1Ljc2NSBDMjYuNDIyLDIzLjU4NiAyNS45MzYsMjEuMTc0IDI0LjQzMywxOS40NTYgTDIyLjAyNywxNi42ODYgTDIyLDMzLjAxNiBDMjEuOTk5LDMzLjU2OCAyMS41NTIsMzQuMDE0IDIxLDM0LjAxNFxcXCIgaWQ9RmlsbC01MTggZmlsbD0jRjM4Nzc0PjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDQ5LjAxNCBMMjYsNDkuMDE0IEMyNS40NDcsNDkuMDE0IDI1LDQ4LjU2NyAyNSw0OC4wMTQgQzI1LDQ3LjQ2MSAyNS40NDcsNDcuMDE0IDI2LDQ3LjAxNCBMMzYsNDcuMDE0IEMzNi41NTMsNDcuMDE0IDM3LDQ3LjQ2MSAzNyw0OC4wMTQgQzM3LDQ4LjU2NyAzNi41NTMsNDkuMDE0IDM2LDQ5LjAxNFxcXCIgaWQ9RmlsbC01MjAgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTMxLDUzLjAxNCBMMjYsNTMuMDE0IEMyNS40NDcsNTMuMDE0IDI1LDUyLjU2NyAyNSw1Mi4wMTQgQzI1LDUxLjQ2MSAyNS40NDcsNTEuMDE0IDI2LDUxLjAxNCBMMzEsNTEuMDE0IEMzMS41NTMsNTEuMDE0IDMyLDUxLjQ2MSAzMiw1Mi4wMTQgQzMyLDUyLjU2NyAzMS41NTMsNTMuMDE0IDMxLDUzLjAxNFxcXCIgaWQ9RmlsbC01MjEgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDUzLjAxNCBMMzUsNTMuMDE0IEMzNC40NDcsNTMuMDE0IDM0LDUyLjU2NyAzNCw1Mi4wMTQgQzM0LDUxLjQ2MSAzNC40NDcsNTEuMDE0IDM1LDUxLjAxNCBMMzYsNTEuMDE0IEMzNi41NTMsNTEuMDE0IDM3LDUxLjQ2MSAzNyw1Mi4wMTQgQzM3LDUyLjU2NyAzNi41NTMsNTMuMDE0IDM2LDUzLjAxNFxcXCIgaWQ9RmlsbC01MjIgZmlsbD0jRDREMEJBPjwvcGF0aD4gPC9nPiA8L2c+IDwvZz4gPC9zdmc+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9maWxlLWF1ZGlvLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCIgc3RhbmRhbG9uZT1cXFwibm9cXFwiPz4gPHN2ZyB3aWR0aD00MnB4IGhlaWdodD01OXB4IHZpZXdCb3g9XFxcIjAgMCA0MiA1OVxcXCIgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaz4gPGcgaWQ9UGFnZS0xIHN0cm9rZT1ub25lIHN0cm9rZS13aWR0aD0xIGZpbGw9bm9uZSBmaWxsLXJ1bGU9ZXZlbm9kZD4gPGcgaWQ9SWNvbnMgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTQ4Ni4wMDAwMDAsIC05NTMuMDAwMDAwKVxcXCI+IDxnIGlkPTU0LS1ET0NYLUZpbGUtLShkb2N1bWVudCwtcGFwZXIsLXdyaXRlLC1ub3RlLC1mbGF0KSB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSg0ODYuMDAwMDAwLCA5NTMuMDAwMDAwKVxcXCI+IDxwYXRoIGQ9XFxcIk00MiwxMi4wMTQgTDMyLDEyLjAxNCBDMzAuODk1LDEyLjAxNCAzMCwxMS4xMTkgMzAsMTAuMDE0IEwzMCwwLjAxNCBMNDIsMTIuMDE0IFpcXFwiIGlkPUZpbGwtMjY2IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk00MiwxMi4wMTQgTDMyLDEyLjAxNCBDMzAuODk1LDEyLjAxNCAzMCwxMS4xMTkgMzAsMTAuMDE0IEwzMCwwLjAxNCBMMiwwLjAxNCBDMC44OTUsMC4wMTQgMCwwLjkwOSAwLDIuMDE0IEwwLDU2LjAxNCBDMCw1Ny4xMTkgMC44OTUsNTguMDE0IDIsNTguMDE0IEw0MCw1OC4wMTQgQzQxLjEwNSw1OC4wMTQgNDIsNTcuMTE5IDQyLDU2LjAxNCBMNDIsMTIuMDE0IFpcXFwiIGlkPUZpbGwtMjY3IGZpbGw9I0VGRUFERD48L3BhdGg+IDxwYXRoIGQ9XFxcIk04LjcyMDgsMjQuMDE0IEw5Ljk5OTgsMjAuMTc2IEwxMS4yNzg4LDI0LjAxNCBMOC43MjA4LDI0LjAxNCBaIE0xNC45NDg4LDI4LjY5OCBMMTAuOTQ4OCwxNi42OTggQzEwLjgxMjgsMTYuMjg5IDEwLjQzMDgsMTYuMDE0IDkuOTk5OCwxNi4wMTQgQzkuNTY5OCwxNi4wMTQgOS4xODc4LDE2LjI4OSA5LjA1MTgsMTYuNjk4IEw1LjA1MTgsMjguNjk4IEM0Ljg3NjgsMjkuMjIyIDUuMTU5OCwyOS43ODggNS42ODM4LDI5Ljk2MiBDNi4yMTA4LDMwLjEzNyA2Ljc3MzgsMjkuODU0IDYuOTQ4OCwyOS4zMyBMOC4wNTM4LDI2LjAxNCBMMTEuOTQ1OCwyNi4wMTQgTDEzLjA1MTgsMjkuMzMgQzEzLjE5MDgsMjkuNzQ5IDEzLjU4MDgsMzAuMDE0IDEzLjk5OTgsMzAuMDE0IEMxNC4xMDQ4LDMwLjAxNCAxNC4yMTE4LDI5Ljk5NyAxNC4zMTY4LDI5Ljk2MiBDMTQuODQwOCwyOS43ODggMTUuMTIzOCwyOS4yMjIgMTQuOTQ4OCwyOC42OTggTDE0Ljk0ODgsMjguNjk4IFpcXFwiIGlkPUZpbGwtNDE3IGZpbGw9IzcxQzM4NT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiwxOC4wMTQgTDE4LDE4LjAxNCBDMTcuNDQ4LDE4LjAxNCAxNywxNy41NjcgMTcsMTcuMDE0IEMxNywxNi40NjEgMTcuNDQ4LDE2LjAxNCAxOCwxNi4wMTQgTDM2LDE2LjAxNCBDMzYuNTUyLDE2LjAxNCAzNywxNi40NjEgMzcsMTcuMDE0IEMzNywxNy41NjcgMzYuNTUyLDE4LjAxNCAzNiwxOC4wMTRcXFwiIGlkPUZpbGwtNDE4IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiwyNC4wMTQgTDE4LDI0LjAxNCBDMTcuNDQ4LDI0LjAxNCAxNywyMy41NjcgMTcsMjMuMDE0IEMxNywyMi40NjEgMTcuNDQ4LDIyLjAxNCAxOCwyMi4wMTQgTDM2LDIyLjAxNCBDMzYuNTUyLDIyLjAxNCAzNywyMi40NjEgMzcsMjMuMDE0IEMzNywyMy41NjcgMzYuNTUyLDI0LjAxNCAzNiwyNC4wMTRcXFwiIGlkPUZpbGwtNDE5IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiwzMC4wMTQgTDE4LDMwLjAxNCBDMTcuNDQ4LDMwLjAxNCAxNywyOS41NjcgMTcsMjkuMDE0IEMxNywyOC40NjEgMTcuNDQ4LDI4LjAxNCAxOCwyOC4wMTQgTDM2LDI4LjAxNCBDMzYuNTUyLDI4LjAxNCAzNywyOC40NjEgMzcsMjkuMDE0IEMzNywyOS41NjcgMzYuNTUyLDMwLjAxNCAzNiwzMC4wMTRcXFwiIGlkPUZpbGwtNDIwIGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiwzNi4wMTQgTDYsMzYuMDE0IEM1LjQ0OCwzNi4wMTQgNSwzNS41NjcgNSwzNS4wMTQgQzUsMzQuNDYxIDUuNDQ4LDM0LjAxNCA2LDM0LjAxNCBMMzYsMzQuMDE0IEMzNi41NTIsMzQuMDE0IDM3LDM0LjQ2MSAzNywzNS4wMTQgQzM3LDM1LjU2NyAzNi41NTIsMzYuMDE0IDM2LDM2LjAxNFxcXCIgaWQ9RmlsbC00MjEgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDQyLjAxNCBMNiw0Mi4wMTQgQzUuNDQ4LDQyLjAxNCA1LDQxLjU2NyA1LDQxLjAxNCBDNSw0MC40NjEgNS40NDgsNDAuMDE0IDYsNDAuMDE0IEwzNiw0MC4wMTQgQzM2LjU1Miw0MC4wMTQgMzcsNDAuNDYxIDM3LDQxLjAxNCBDMzcsNDEuNTY3IDM2LjU1Miw0Mi4wMTQgMzYsNDIuMDE0XFxcIiBpZD1GaWxsLTQyMiBmaWxsPSNENEQwQkE+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMzYsNDguMDE0IEw2LDQ4LjAxNCBDNS40NDgsNDguMDE0IDUsNDcuNTY3IDUsNDcuMDE0IEM1LDQ2LjQ2MSA1LjQ0OCw0Ni4wMTQgNiw0Ni4wMTQgTDM2LDQ2LjAxNCBDMzYuNTUyLDQ2LjAxNCAzNyw0Ni40NjEgMzcsNDcuMDE0IEMzNyw0Ny41NjcgMzYuNTUyLDQ4LjAxNCAzNiw0OC4wMTRcXFwiIGlkPUZpbGwtNDIzIGZpbGw9I0Q0RDBCQT48L3BhdGg+IDwvZz4gPC9nPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtZG9jLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCIgc3RhbmRhbG9uZT1cXFwibm9cXFwiPz4gPHN2ZyB3aWR0aD00M3B4IGhlaWdodD01NnB4IHZpZXdCb3g9XFxcIjAgMCA0MyA1NlxcXCIgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaz4gPHRpdGxlPjE5IC0gWExTIEZpbGUgKGRvY3VtZW50LCBmb3JtYXQsIGV4dGVuc2lvbiwgZmlsZSwgdHlwZSwgZmxhdCk8L3RpdGxlPiA8ZGVzYz5DcmVhdGVkIHdpdGggU2tldGNoLjwvZGVzYz4gPGRlZnM+PC9kZWZzPiA8ZyBpZD1QYWdlLTEgc3Ryb2tlPW5vbmUgc3Ryb2tlLXdpZHRoPTEgZmlsbD1ub25lIGZpbGwtcnVsZT1ldmVub2RkPiA8ZyBpZD1JY29ucyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMjQ5LjAwMDAwMCwgLTU5OS4wMDAwMDApXFxcIj4gPGcgaWQ9WExTLUZpbGUgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMjQ5LjAwMDAwMCwgNTk5LjAwMDAwMClcXFwiPiA8cGF0aCBkPVxcXCJNMzAuNDg1LDAgTDEuNDYzLDAgQzAuNjU1LDAgMCwwLjY1NSAwLDEuOTI2IEwwLDU1IEMwLDU1LjM0NSAwLjY1NSw1NiAxLjQ2Myw1NiBMNDEuNTM3LDU2IEM0Mi4zNDUsNTYgNDMsNTUuMzQ1IDQzLDU1IEw0MywxMi45NzggQzQzLDEyLjI4MiA0Mi45MDcsMTIuMDU4IDQyLjc0MywxMS44OTMgTDMxLjEwNywwLjI1NyBDMzAuOTQyLDAuMDkzIDMwLjcxOCwwIDMwLjQ4NSwwXFxcIiBpZD1GaWxsLTcyIGZpbGw9I0U5RTlFMD48L3BhdGg+IDxwb2x5bGluZSBpZD1GaWxsLTczIGZpbGw9I0Q5RDdDQSBwb2ludHM9XFxcIjMxIDAuMTUxIDMxIDEyIDQyLjg0OSAxMiAzMSAwLjE1MVxcXCI+PC9wb2x5bGluZT4gPHBhdGggZD1cXFwiTTQxLjUzNyw1NiBMMS40NjMsNTYgQzAuNjU1LDU2IDAsNTUuMzQ1IDAsNTQuNTM3IEwwLDM5IEw0MywzOSBMNDMsNTQuNTM3IEM0Myw1NS4zNDUgNDIuMzQ1LDU2IDQxLjUzNyw1NlxcXCIgaWQ9RmlsbC0xNTkgZmlsbD0jOTFDREEwPjwvcGF0aD4gPHBvbHlsaW5lIGlkPUZpbGwtMTYwIGZpbGw9I0ZGRkZGRiBwb2ludHM9XFxcIjEzLjg3OSA0OC4xMDYgMTYuNDM2IDUzIDE0LjUzNSA1MyAxMi45MzYgNDkuMTk5IDEyLjc5OSA0OS4xOTkgMTEuMDc2IDUzIDkuMTc2IDUzIDExLjczMiA0OC4xMDYgOS4wMTIgNDIuOTI0IDEwLjg4NSA0Mi45MjQgMTIuNjYyIDQ3LjAyNSAxMi43OTkgNDcuMDI1IDE0LjcyNyA0Mi45MjQgMTYuNiA0Mi45MjQgMTMuODc5IDQ4LjEwNlxcXCI+PC9wb2x5bGluZT4gPHBvbHlsaW5lIGlkPUZpbGwtMTYxIGZpbGw9I0ZGRkZGRiBwb2ludHM9XFxcIjIwLjUzNyA0Mi45MjQgMjAuNTM3IDUxLjc1NiAyNS4xNzIgNTEuNzU2IDI1LjE3MiA1MyAxOC44NjkgNTMgMTguODY5IDQyLjkyNCAyMC41MzcgNDIuOTI0XFxcIj48L3BvbHlsaW5lPiA8cGF0aCBkPVxcXCJNMzIuNTQxLDUwLjIzOCBDMzIuNTQxLDUwLjYwMyAzMi40NjYsNTAuOTU2IDMyLjMxNSw1MS4yOTggQzMyLjE2NSw1MS42NCAzMS45NTMsNTEuOTQgMzEuNjgsNTIuMiBDMzEuNDA2LDUyLjQ2IDMxLjA2OSw1Mi42NjcgMzAuNjY4LDUyLjgyMiBDMzAuMjY3LDUyLjk3NyAyOS44MTEsNTMuMDU1IDI5LjMwMSw1My4wNTUgQzI5LjA4Miw1My4wNTUgMjguODU2LDUzLjA0MyAyOC42MjQsNTMuMDIxIEMyOC4zOTIsNTIuOTk4IDI4LjE1Nyw1Mi45NTkgMjcuOTIsNTIuOTA0IEMyNy42ODMsNTIuODUgMjcuNDU3LDUyLjc3NCAyNy4yNDMsNTIuNjc5IEMyNy4wMjksNTIuNTgzIDI2Ljg0NCw1Mi40NjcgMjYuNjksNTIuMzMgTDI2Ljk3Nyw1MS4xNTQgQzI3LjEwNCw1MS4yMjcgMjcuMjY2LDUxLjI5OCAyNy40NjIsNTEuMzY2IEMyNy42NTgsNTEuNDM1IDI3Ljg2LDUxLjQ5OCAyOC4wNyw1MS41NTggQzI4LjI4LDUxLjYxNyAyOC40ODksNTEuNjY1IDI4LjY5OSw1MS43MDEgQzI4LjkwOSw1MS43MzcgMjkuMTA1LDUxLjc1NiAyOS4yODcsNTEuNzU2IEMyOS44NDMsNTEuNzU2IDMwLjI2OSw1MS42MjYgMzAuNTY1LDUxLjM2NiBDMzAuODYxLDUxLjEwNiAzMS4wMSw1MC43MjIgMzEuMDEsNTAuMjExIEMzMS4wMSw0OS45MDEgMzAuOTA1LDQ5LjYzNyAzMC42OTUsNDkuNDE4IEMzMC40ODUsNDkuMTk5IDMwLjIyNCw0OS4wMDEgMjkuOTA5LDQ4LjgyMyBDMjkuNTk1LDQ4LjY0NiAyOS4yNTUsNDguNDY4IDI4Ljg5MSw0OC4yOSBDMjguNTI2LDQ4LjExMiAyOC4xODQsNDcuOTAyIDI3Ljg2NSw0Ny42NjEgQzI3LjU0Niw0Ny40MiAyNy4yODIsNDcuMTM1IDI3LjA3Miw0Ni44MDcgQzI2Ljg2Miw0Ni40NzkgMjYuNzU4LDQ2LjA2OCAyNi43NTgsNDUuNTc2IEMyNi43NTgsNDUuMTMgMjYuODQsNDQuNzMzIDI3LjAwNCw0NC4zODcgQzI3LjE2OCw0NC4wNCAyNy4zODksNDMuNzQ2IDI3LjY2Nyw0My41MDUgQzI3Ljk0NSw0My4yNjQgMjguMjY5LDQzLjA3OSAyOC42MzgsNDIuOTUxIEMyOS4wMDcsNDIuODIzIDI5LjM5Nyw0Mi43NiAyOS44MDcsNDIuNzYgQzMwLjIyNiw0Mi43NiAzMC42NDksNDIuNzk5IDMxLjA3OCw0Mi44NzYgQzMxLjUwNiw0Mi45NTMgMzEuODUzLDQzLjA3OSAzMi4xMTcsNDMuMjUyIEMzMi4wNjMsNDMuMzcgMzEuOTk5LDQzLjUgMzEuOTI2LDQzLjY0MiBDMzEuODUzLDQzLjc4MyAzMS43ODQsNDMuOTE1IDMxLjcyMSw0NC4wMzggQzMxLjY1Nyw0NC4xNjEgMzEuNjAyLDQ0LjI2NCAzMS41NTcsNDQuMzQ2IEMzMS41MTEsNDQuNDI4IDMxLjQ4Myw0NC40NzQgMzEuNDc1LDQ0LjQ4MiBDMzEuNDIsNDQuNDU1IDMxLjM1OCw0NC40MTkgMzEuMjksNDQuMzczIEMzMS4yMjIsNDQuMzI3IDMxLjEyNCw0NC4yODIgMzAuOTk2LDQ0LjIzNiBDMzAuODY4LDQ0LjE5IDMwLjcsNDQuMTU5IDMwLjQ5LDQ0LjE0MSBDMzAuMjgsNDQuMTIyIDMwLjAxMiw0NC4xMjcgMjkuNjg0LDQ0LjE1NCBDMjkuNTAxLDQ0LjE3MyAyOS4zMjgsNDQuMjI1IDI5LjE2NCw0NC4zMTIgQzI5LDQ0LjM5OCAyOC44NTQsNDQuNTA1IDI4LjcyNyw0NC42MzMgQzI4LjU5OSw0NC43NjEgMjguNDk5LDQ0LjkwNCAyOC40MjYsNDUuMDYzIEMyOC4zNTMsNDUuMjIzIDI4LjMxNiw0NS4zNzYgMjguMzE2LDQ1LjUyMSBDMjguMzE2LDQ1Ljg4NiAyOC40MjEsNDYuMTggMjguNjMxLDQ2LjQwMyBDMjguODQsNDYuNjI3IDI5LjEsNDYuODIyIDI5LjQxLDQ2Ljk5MSBDMjkuNzIsNDcuMTYgMzAuMDU3LDQ3LjMyNCAzMC40MjIsNDcuNDgzIEMzMC43ODYsNDcuNjQzIDMxLjEyNiw0Ny44MzcgMzEuNDQsNDguMDY1IEMzMS43NTUsNDguMjkyIDMyLjAxNyw0OC41NzcgMzIuMjI3LDQ4LjkxOSBDMzIuNDM2LDQ5LjI2MSAzMi41NDEsNDkuNyAzMi41NDEsNTAuMjM4XFxcIiBpZD1GaWxsLTE2MiBmaWxsPSNGRkZGRkY+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMTcsMTYgTDE3LDEyIEw1LDEyIEw1LDM0IEwzOCwzNCBMMzgsMTYgTDE3LDE2IEwxNywxNiBaIE03LDE0IEwxNSwxNCBMMTUsMTYgTDcsMTYgTDcsMTQgWiBNNywxOCBMMTUsMTggTDE1LDIwIEw3LDIwIEw3LDE4IFogTTcsMjIgTDE1LDIyIEwxNSwyNCBMNywyNCBMNywyMiBaIE03LDI2IEwxNSwyNiBMMTUsMjggTDcsMjggTDcsMjYgWiBNNywzMCBMMTUsMzAgTDE1LDMyIEw3LDMyIEw3LDMwIFogTTE3LDMwIEwzNiwzMCBMMzYsMzIgTDE3LDMyIEwxNywzMCBaIE0xNywyNiBMMzYsMjYgTDM2LDI4IEwxNywyOCBMMTcsMjYgWiBNMTcsMjIgTDM2LDIyIEwzNiwyNCBMMTcsMjQgTDE3LDIyIFogTTE3LDE4IEwzNiwxOCBMMzYsMjAgTDE3LDIwIEwxNywxOCBaXFxcIiBpZD1GaWxsLTE2MyBmaWxsPSNDOEJEQjg+PC9wYXRoPiA8L2c+IDwvZz4gPC9nPiA8L3N2Zz5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtZXhjZWwuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0MjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjw/eG1sIHZlcnNpb249XFxcIjEuMFxcXCIgZW5jb2Rpbmc9XFxcIlVURi04XFxcIiBzdGFuZGFsb25lPVxcXCJub1xcXCI/PiA8c3ZnIHdpZHRoPTQycHggaGVpZ2h0PTU5cHggdmlld0JveD1cXFwiMCAwIDQyIDU5XFxcIiB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rPiA8dGl0bGU+NTEgLUZpbGUtIChGbGF0KTwvdGl0bGU+IDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPiA8ZGVmcz48L2RlZnM+IDxnIGlkPVBhZ2UtMSBzdHJva2U9bm9uZSBzdHJva2Utd2lkdGg9MSBmaWxsPW5vbmUgZmlsbC1ydWxlPWV2ZW5vZGQ+IDxnIGlkPUljb25zIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC0xMjYuMDAwMDAwLCAtOTUzLjAwMDAwMClcXFwiPiA8ZyBpZD01MS0tRmlsZS0tKEZsYXQpIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDEyNi4wMDAwMDAsIDk1My4wMDAwMDApXFxcIj4gPHBhdGggZD1cXFwiTTQyLDEyLjAxNCBMMzIsMTIuMDE0IEMzMC44OTUsMTIuMDE0IDMwLDExLjExOSAzMCwxMC4wMTQgTDMwLDAuMDE0IEw0MiwxMi4wMTQgWlxcXCIgaWQ9RmlsbC0yNjAgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTQyLDEyLjAxNCBMMzIsMTIuMDE0IEMzMC44OTUsMTIuMDE0IDMwLDExLjExOSAzMCwxMC4wMTQgTDMwLDAuMDE0IEwyLDAuMDE0IEMwLjg5NSwwLjAxNCAwLDAuOTA5IDAsMi4wMTQgTDAsNTYuMDE0IEMwLDU3LjExOSAwLjg5NSw1OC4wMTQgMiw1OC4wMTQgTDQwLDU4LjAxNCBDNDEuMTA1LDU4LjAxNCA0Miw1Ny4xMTkgNDIsNTYuMDE0IEw0MiwxMi4wMTQgWlxcXCIgaWQ9RmlsbC0yNjEgZmlsbD0jRUZFQUREPjwvcGF0aD4gPHBhdGggZD1cXFwiTTI0LDEzLjAxNCBMNiwxMy4wMTQgQzUuNDQ4LDEzLjAxNCA1LDEyLjU2NyA1LDEyLjAxNCBDNSwxMS40NjEgNS40NDgsMTEuMDE0IDYsMTEuMDE0IEwyNCwxMS4wMTQgQzI0LjU1MiwxMS4wMTQgMjUsMTEuNDYxIDI1LDEyLjAxNCBDMjUsMTIuNTY3IDI0LjU1MiwxMy4wMTQgMjQsMTMuMDE0XFxcIiBpZD1GaWxsLTM5MyBmaWxsPSNENEQwQkE+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMzYsMTkuMDE0IEw2LDE5LjAxNCBDNS40NDgsMTkuMDE0IDUsMTguNTY3IDUsMTguMDE0IEM1LDE3LjQ2MSA1LjQ0OCwxNy4wMTQgNiwxNy4wMTQgTDM2LDE3LjAxNCBDMzYuNTUyLDE3LjAxNCAzNywxNy40NjEgMzcsMTguMDE0IEMzNywxOC41NjcgMzYuNTUyLDE5LjAxNCAzNiwxOS4wMTRcXFwiIGlkPUZpbGwtMzk0IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiwyNS4wMTQgTDYsMjUuMDE0IEM1LjQ0OCwyNS4wMTQgNSwyNC41NjcgNSwyNC4wMTQgQzUsMjMuNDYxIDUuNDQ4LDIzLjAxNCA2LDIzLjAxNCBMMzYsMjMuMDE0IEMzNi41NTIsMjMuMDE0IDM3LDIzLjQ2MSAzNywyNC4wMTQgQzM3LDI0LjU2NyAzNi41NTIsMjUuMDE0IDM2LDI1LjAxNFxcXCIgaWQ9RmlsbC0zOTUgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDMxLjAxNCBMNiwzMS4wMTQgQzUuNDQ4LDMxLjAxNCA1LDMwLjU2NyA1LDMwLjAxNCBDNSwyOS40NjEgNS40NDgsMjkuMDE0IDYsMjkuMDE0IEwzNiwyOS4wMTQgQzM2LjU1MiwyOS4wMTQgMzcsMjkuNDYxIDM3LDMwLjAxNCBDMzcsMzAuNTY3IDM2LjU1MiwzMS4wMTQgMzYsMzEuMDE0XFxcIiBpZD1GaWxsLTM5NiBmaWxsPSNENEQwQkE+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMzYsMzcuMDE0IEw2LDM3LjAxNCBDNS40NDgsMzcuMDE0IDUsMzYuNTY3IDUsMzYuMDE0IEM1LDM1LjQ2MSA1LjQ0OCwzNS4wMTQgNiwzNS4wMTQgTDM2LDM1LjAxNCBDMzYuNTUyLDM1LjAxNCAzNywzNS40NjEgMzcsMzYuMDE0IEMzNywzNi41NjcgMzYuNTUyLDM3LjAxNCAzNiwzNy4wMTRcXFwiIGlkPUZpbGwtMzk3IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiw0My4wMTQgTDYsNDMuMDE0IEM1LjQ0OCw0My4wMTQgNSw0Mi41NjcgNSw0Mi4wMTQgQzUsNDEuNDYxIDUuNDQ4LDQxLjAxNCA2LDQxLjAxNCBMMzYsNDEuMDE0IEMzNi41NTIsNDEuMDE0IDM3LDQxLjQ2MSAzNyw0Mi4wMTQgQzM3LDQyLjU2NyAzNi41NTIsNDMuMDE0IDM2LDQzLjAxNFxcXCIgaWQ9RmlsbC0zOTggZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDQ5LjAxNCBMNiw0OS4wMTQgQzUuNDQ4LDQ5LjAxNCA1LDQ4LjU2NyA1LDQ4LjAxNCBDNSw0Ny40NjEgNS40NDgsNDcuMDE0IDYsNDcuMDE0IEwzNiw0Ny4wMTQgQzM2LjU1Miw0Ny4wMTQgMzcsNDcuNDYxIDM3LDQ4LjAxNCBDMzcsNDguNTY3IDM2LjU1Miw0OS4wMTQgMzYsNDkuMDE0XFxcIiBpZD1GaWxsLTM5OSBmaWxsPSNENEQwQkE+PC9wYXRoPiA8L2c+IDwvZz4gPC9nPiA8L3N2Zz5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtZ2VuZXJpYy5zdmdcbi8vIG1vZHVsZSBpZCA9IDQyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiIHN0YW5kYWxvbmU9XFxcIm5vXFxcIj8+IDxzdmcgd2lkdGg9NDNweCBoZWlnaHQ9NTZweCB2aWV3Qm94PVxcXCIwIDAgNDMgNTZcXFwiIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbms+IDx0aXRsZT4yNSAtIEpTT04gRmlsZSAoZG9jdW1lbnQsIGZvcm1hdCwgZXh0ZW5zaW9uLCBmaWxlLCB0eXBlLCBmbGF0KTwvdGl0bGU+IDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPiA8ZGVmcz48L2RlZnM+IDxnIGlkPVBhZ2UtMSBzdHJva2U9bm9uZSBzdHJva2Utd2lkdGg9MSBmaWxsPW5vbmUgZmlsbC1ydWxlPWV2ZW5vZGQ+IDxnIGlkPUljb25zIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC03MjkuMDAwMDAwLCAtNDc5LjAwMDAwMClcXFwiPiA8ZyBpZD1KU09OLUZpbGUgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoNzI5LjAwMDAwMCwgNDc5LjAwMDAwMClcXFwiPiA8cGF0aCBkPVxcXCJNMzAuNDg1LDAgTDEuNDYzLDAgQzAuNjU1LDAgMCwwLjY1NSAwLDEuOTI2IEwwLDU1IEMwLDU1LjM0NSAwLjY1NSw1NiAxLjQ2Myw1NiBMNDEuNTM3LDU2IEM0Mi4zNDUsNTYgNDMsNTUuMzQ1IDQzLDU1IEw0MywxMi45NzggQzQzLDEyLjI4MiA0Mi45MDcsMTIuMDU4IDQyLjc0MywxMS44OTMgTDMxLjEwNywwLjI1NyBDMzAuOTQyLDAuMDkzIDMwLjcxOCwwIDMwLjQ4NSwwXFxcIiBpZD1GaWxsLTIyIGZpbGw9I0U5RTlFMD48L3BhdGg+IDxwb2x5bGluZSBpZD1GaWxsLTIzIGZpbGw9I0Q5RDdDQSBwb2ludHM9XFxcIjMxIDAuMTUxIDMxIDEyIDQyLjg0OSAxMiAzMSAwLjE1MVxcXCI+PC9wb2x5bGluZT4gPHBhdGggZD1cXFwiTTQxLjUzNyw1NiBMMS40NjMsNTYgQzAuNjU1LDU2IDAsNTUuMzQ1IDAsNTQuNTM3IEwwLDM5IEw0MywzOSBMNDMsNTQuNTM3IEM0Myw1NS4zNDUgNDIuMzQ1LDU2IDQxLjUzNyw1NlxcXCIgaWQ9RmlsbC0xMDkgZmlsbD0jOTc3N0E4PjwvcGF0aD4gPHBhdGggZD1cXFwiTTEwLjUyMiw0Mi43MTkgTDEwLjUyMiw1MC41NjYgQzEwLjUyMiw1MS4wNCAxMC40MzUsNTEuNDQgMTAuMjYyLDUxLjc2MyBDMTAuMDg5LDUyLjA4NiA5Ljg1Niw1Mi4zNDYgOS41NjUsNTIuNTQyIEM5LjI3Myw1Mi43MzggOC45MzgsNTIuODc1IDguNTYsNTIuOTUyIEM4LjE4Miw1My4wMjkgNy43OTIsNTMuMDY4IDcuMzkxLDUzLjA2OCBDNy4xOSw1My4wNjggNi45NTUsNTMuMDQ4IDYuNjg3LDUzLjAwNyBDNi40MTgsNTIuOTY2IDYuMTQsNTIuOTAyIDUuODUzLDUyLjgxNSBDNS41NjUsNTIuNzI4IDUuMjksNTIuNjMxIDUuMDI1LDUyLjUyMiBDNC43NjEsNTIuNDEyIDQuNTM4LDUyLjI4OSA0LjM1Niw1Mi4xNTIgTDUuMDUzLDUxLjA0NSBDNS4xNDQsNTEuMTA4IDUuMjczLDUxLjE3NSA1LjQ0Miw1MS4yNDMgQzUuNjExLDUxLjMxMSA1Ljc5Niw1MS4zNzUgNS45OTYsNTEuNDM1IEM2LjE5Niw1MS40OTQgNi40MDYsNTEuNTQ2IDYuNjI1LDUxLjU5MiBDNi44NDQsNTEuNjM4IDcuMDQ5LDUxLjY2IDcuMjQsNTEuNjYgQzcuNzI0LDUxLjY2IDguMTA4LDUxLjU2NiA4LjM5Niw1MS4zOCBDOC42ODMsNTEuMTkzIDguODM1LDUwLjg3NiA4Ljg1NCw1MC40MyBMOC44NTQsNDIuNzE5IEwxMC41MjIsNDIuNzE5XFxcIiBpZD1GaWxsLTExMCBmaWxsPSNGRkZGRkY+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMTguNjg0LDUwLjIzOCBDMTguNjg0LDUwLjYwMyAxOC42MDgsNTAuOTU2IDE4LjQ1OCw1MS4yOTggQzE4LjMwOCw1MS42NCAxOC4wOTYsNTEuOTQgMTcuODIyLDUyLjIgQzE3LjU0OSw1Mi40NiAxNy4yMTIsNTIuNjY3IDE2LjgxLDUyLjgyMiBDMTYuNDA5LDUyLjk3OCAxNS45NTQsNTMuMDU1IDE1LjQ0Myw1My4wNTUgQzE1LjIyNSw1My4wNTUgMTQuOTk5LDUzLjA0MyAxNC43NjcsNTMuMDIxIEMxNC41MzQsNTIuOTk4IDE0LjMsNTIuOTU5IDE0LjA2Myw1Mi45MDQgQzEzLjgyNSw1Mi44NSAxMy42LDUyLjc3NCAxMy4zODYsNTIuNjc5IEMxMy4xNzIsNTIuNTgzIDEyLjk4Nyw1Mi40NjcgMTIuODMyLDUyLjMzIEwxMy4xMTksNTEuMTU0IEMxMy4yNDcsNTEuMjI4IDEzLjQwOCw1MS4yOTggMTMuNjA1LDUxLjM2NiBDMTMuODAxLDUxLjQzNSAxNC4wMDMsNTEuNDk4IDE0LjIxMyw1MS41NTggQzE0LjQyMyw1MS42MTcgMTQuNjMyLDUxLjY2NSAxNC44NDIsNTEuNzAxIEMxNS4wNTIsNTEuNzM3IDE1LjI0Nyw1MS43NTYgMTUuNDMsNTEuNzU2IEMxNS45ODUsNTEuNzU2IDE2LjQxMiw1MS42MjYgMTYuNzA4LDUxLjM2NiBDMTcuMDA0LDUxLjEwNiAxNy4xNTIsNTAuNzIyIDE3LjE1Miw1MC4yMTEgQzE3LjE1Miw0OS45MDEgMTcuMDQ4LDQ5LjYzNyAxNi44MzgsNDkuNDE4IEMxNi42MjgsNDkuMTk5IDE2LjM2Niw0OS4wMDEgMTYuMDUyLDQ4LjgyMyBDMTUuNzM3LDQ4LjY0NiAxNS4zOTgsNDguNDY4IDE1LjAzMyw0OC4yOSBDMTQuNjY5LDQ4LjExMiAxNC4zMjcsNDcuOTAyIDE0LjAwOCw0Ny42NjEgQzEzLjY4OSw0Ny40MiAxMy40MjUsNDcuMTM1IDEzLjIxNSw0Ni44MDcgQzEzLjAwNSw0Ni40NzkgMTIuOSw0Ni4wNjggMTIuOSw0NS41NzYgQzEyLjksNDUuMTMgMTIuOTgyLDQ0LjczMyAxMy4xNDcsNDQuMzg3IEMxMy4zMTEsNDQuMDQgMTMuNTMxLDQzLjc0NiAxMy44MSw0My41MDUgQzE0LjA4OCw0My4yNjQgMTQuNDExLDQzLjA3OSAxNC43OCw0Mi45NTEgQzE1LjE0OSw0Mi44MjMgMTUuNTM5LDQyLjc2IDE1Ljk0OSw0Mi43NiBDMTYuMzY4LDQyLjc2IDE2Ljc5Miw0Mi43OTkgMTcuMjIxLDQyLjg3NiBDMTcuNjQ5LDQyLjk1MyAxNy45OTUsNDMuMDc5IDE4LjI2LDQzLjI1MiBDMTguMjA1LDQzLjM3IDE4LjE0Miw0My41IDE4LjA2OCw0My42NDIgQzE3Ljk5NSw0My43ODMgMTcuOTI3LDQzLjkxNSAxNy44NjMsNDQuMDM4IEMxNy44LDQ0LjE2MSAxNy43NDUsNDQuMjY0IDE3LjY5OSw0NC4zNDYgQzE3LjY1Myw0NC40MjggMTcuNjI2LDQ0LjQ3NCAxNy42MTcsNDQuNDgyIEMxNy41NjMsNDQuNDU1IDE3LjUwMSw0NC40MTkgMTcuNDMzLDQ0LjM3MyBDMTcuMzY0LDQ0LjMyNyAxNy4yNjcsNDQuMjgyIDE3LjEzOSw0NC4yMzYgQzE3LjAxMSw0NC4xOSAxNi44NDMsNDQuMTU5IDE2LjYzMyw0NC4xNDEgQzE2LjQyMyw0NC4xMjIgMTYuMTU0LDQ0LjEyNyAxNS44MjYsNDQuMTU0IEMxNS42NDQsNDQuMTczIDE1LjQ3MSw0NC4yMjUgMTUuMzA3LDQ0LjMxMSBDMTUuMTQzLDQ0LjM5OCAxNC45OTcsNDQuNTA1IDE0Ljg2OSw0NC42MzMgQzE0Ljc0MSw0NC43NjEgMTQuNjQyLDQ0LjkwNCAxNC41NjgsNDUuMDY0IEMxNC40OTUsNDUuMjIzIDE0LjQ1OSw0NS4zNzYgMTQuNDU5LDQ1LjUyMiBDMTQuNDU5LDQ1Ljg4NiAxNC41NjQsNDYuMTggMTQuNzczLDQ2LjQwMyBDMTQuOTgzLDQ2LjYyNyAxNS4yNDMsNDYuODIyIDE1LjU1Myw0Ni45OTEgQzE1Ljg2Miw0Ny4xNiAxNi4yLDQ3LjMyNCAxNi41NjUsNDcuNDgzIEMxNi45MjksNDcuNjQzIDE3LjI2OSw0Ny44MzcgMTcuNTgzLDQ4LjA2NSBDMTcuODk4LDQ4LjI5MiAxOC4xNTksNDguNTc3IDE4LjM2OSw0OC45MTkgQzE4LjU3OSw0OS4yNjEgMTguNjg0LDQ5LjcgMTguNjg0LDUwLjIzOFxcXCIgaWQ9RmlsbC0xMTEgZmlsbD0jRkZGRkZGPjwvcGF0aD4gPHBhdGggZD1cXFwiTTI4LjU4Miw0Ny45MTQgQzI4LjU4Miw0OC43NjIgMjguNDc1LDQ5LjUwOSAyOC4yNjEsNTAuMTU2IEMyOC4wNDcsNTAuODA0IDI3Ljc1LDUxLjM0MSAyNy4zNzIsNTEuNzcgQzI2Ljk5NCw1Mi4xOTggMjYuNTUyLDUyLjUyMiAyNi4wNDYsNTIuNzQgQzI1LjU0LDUyLjk1OSAyNC45ODYsNTMuMDY4IDI0LjM4NSw1My4wNjggQzIzLjc4Myw1My4wNjggMjMuMjMsNTIuOTU5IDIyLjcyNCw1Mi43NCBDMjIuMjE4LDUyLjUyMiAyMS43NzUsNTIuMTk4IDIxLjM5OCw1MS43NyBDMjEuMDIsNTEuMzQxIDIwLjcyMyw1MC44MDQgMjAuNTA5LDUwLjE1NiBDMjAuMjk1LDQ5LjUwOSAyMC4xODgsNDguNzYyIDIwLjE4OCw0Ny45MTQgQzIwLjE4OCw0Ny4wNjYgMjAuMjk1LDQ2LjMyMSAyMC41MDksNDUuNjc5IEMyMC43MjMsNDUuMDM2IDIxLjAyLDQ0LjUwMSAyMS4zOTgsNDQuMDcyIEMyMS43NzUsNDMuNjQ0IDIyLjIxOCw0My4zMTggMjIuNzI0LDQzLjA5NSBDMjMuMjMsNDIuODcxIDIzLjc4Myw0Mi43NiAyNC4zODUsNDIuNzYgQzI0Ljk4Niw0Mi43NiAyNS41NCw0Mi44NzEgMjYuMDQ2LDQzLjA5NSBDMjYuNTUyLDQzLjMxOCAyNi45OTQsNDMuNjQ0IDI3LjM3Miw0NC4wNzIgQzI3Ljc1LDQ0LjUwMSAyOC4wNDcsNDUuMDM2IDI4LjI2MSw0NS42NzkgQzI4LjQ3NSw0Ni4zMjEgMjguNTgyLDQ3LjA2NiAyOC41ODIsNDcuOTE0IEwyOC41ODIsNDcuOTE0IFogTTI0LjM0NCw1MS43MjkgQzI0LjY4MSw1MS43MjkgMjUuMDAyLDUxLjY2MiAyNS4zMDgsNTEuNTMgQzI1LjYxMyw1MS4zOTggMjUuODg3LDUxLjE4MiAyNi4xMjgsNTAuODgxIEMyNi4zNjksNTAuNTggMjYuNTU5LDUwLjE4NSAyNi42OTUsNDkuNjk4IEMyNi44MzIsNDkuMjExIDI2LjkwNSw0OC42MTYgMjYuOTE0LDQ3LjkxNCBDMjYuOTA1LDQ3LjIzIDI2LjgzNCw0Ni42NDkgMjYuNzAyLDQ2LjE3MSBDMjYuNTcsNDUuNjkyIDI2LjM4OCw0NS4yOTggMjYuMTU1LDQ0Ljk4OCBDMjUuOTIzLDQ0LjY3OSAyNS42NTgsNDQuNDU1IDI1LjM2Miw0NC4zMTggQzI1LjA2Niw0NC4xODIgMjQuNzU0LDQ0LjExMyAyNC40MjYsNDQuMTEzIEMyNC4wODksNDQuMTEzIDIzLjc2OCw0NC4xNzcgMjMuNDYyLDQ0LjMwNSBDMjMuMTU2LDQ0LjQzMyAyMi44ODMsNDQuNjQ4IDIyLjY0Miw0NC45NTQgQzIyLjQsNDUuMjYgMjIuMjExLDQ1LjY1MyAyMi4wNzQsNDYuMTM3IEMyMS45MzgsNDYuNjIgMjEuODY0LDQ3LjIxMiAyMS44NTYsNDcuOTE0IEMyMS44NjQsNDguNTk4IDIxLjkzNiw0OS4xODEgMjIuMDY3LDQ5LjY2NCBDMjIuMTk5LDUwLjE0NyAyMi4zODIsNTAuNTQxIDIyLjYxNCw1MC44NDcgQzIyLjg0Nyw1MS4xNTIgMjMuMTExLDUxLjM3NSAyMy40MDcsNTEuNTE3IEMyMy43MDMsNTEuNjU4IDI0LjAxNiw1MS43MjkgMjQuMzQ0LDUxLjcyOSBMMjQuMzQ0LDUxLjcyOSBaXFxcIiBpZD1GaWxsLTExMiBmaWxsPSNGRkZGRkY+PC9wYXRoPiA8cG9seWxpbmUgaWQ9RmlsbC0xMTMgZmlsbD0jRkZGRkZGIHBvaW50cz1cXFwiMzguMTggNDIuOTI0IDM4LjE4IDUzIDM2LjUxMiA1MyAzMi41NjEgNDYuMDU1IDMyLjU2MSA1MyAzMC44OTMgNTMgMzAuODkzIDQyLjkyNCAzMi41NjEgNDIuOTI0IDM2LjUxMiA0OS44NjkgMzYuNTEyIDQyLjkyNCAzOC4xOCA0Mi45MjRcXFwiPjwvcG9seWxpbmU+IDxwYXRoIGQ9XFxcIk0xMywxOSBMMTMsMTUgQzEzLDE0LjQ0OSAxMy40NDgsMTQgMTQsMTQgQzE0LjU1MywxNCAxNSwxMy41NTIgMTUsMTMgQzE1LDEyLjQ0OCAxNC41NTMsMTIgMTQsMTIgQzEyLjM0NiwxMiAxMSwxMy4zNDYgMTEsMTUgTDExLDE5IEMxMSwyMC4xMDMgMTAuMTAzLDIxIDksMjEgQzguNDQ3LDIxIDgsMjEuNDQ4IDgsMjIgQzgsMjIuNTUyIDguNDQ3LDIzIDksMjMgQzEwLjEwMywyMyAxMSwyMy44OTcgMTEsMjUgTDExLDI5IEMxMSwzMC42NTQgMTIuMzQ2LDMyIDE0LDMyIEMxNC41NTMsMzIgMTUsMzEuNTUyIDE1LDMxIEMxNSwzMC40NDggMTQuNTUzLDMwIDE0LDMwIEMxMy40NDgsMzAgMTMsMjkuNTUxIDEzLDI5IEwxMywyNSBDMTMsMjMuOCAxMi40NTgsMjIuNzM0IDExLjYxOCwyMiBDMTIuNDU4LDIxLjI2NiAxMywyMC4yIDEzLDE5XFxcIiBpZD1GaWxsLTExNCBmaWxsPSM5Nzc3QTg+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMjEsMTcgQzIwLjE3MiwxNyAxOS41LDE3LjY3MiAxOS41LDE4LjUgQzE5LjUsMTkuMzI4IDIwLjE3MiwyMCAyMSwyMCBDMjEuODI4LDIwIDIyLjUsMTkuMzI4IDIyLjUsMTguNSBDMjIuNSwxNy42NzIgMjEuODI4LDE3IDIxLDE3XFxcIiBpZD1GaWxsLTExNSBmaWxsPSM5Nzc3QTg+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMzMsMjEgQzMxLjg5OCwyMSAzMSwyMC4xMDMgMzEsMTkgTDMxLDE1IEMzMSwxMy4zNDYgMjkuNjU0LDEyIDI4LDEyIEMyNy40NDcsMTIgMjcsMTIuNDQ4IDI3LDEzIEMyNywxMy41NTIgMjcuNDQ3LDE0IDI4LDE0IEMyOC41NTIsMTQgMjksMTQuNDQ5IDI5LDE1IEwyOSwxOSBDMjksMjAuMiAyOS41NDIsMjEuMjY2IDMwLjM4MiwyMiBDMjkuNTQyLDIyLjczNCAyOSwyMy44IDI5LDI1IEwyOSwyOSBDMjksMjkuNTUxIDI4LjU1MiwzMCAyOCwzMCBDMjcuNDQ3LDMwIDI3LDMwLjQ0OCAyNywzMSBDMjcsMzEuNTUyIDI3LjQ0NywzMiAyOCwzMiBDMjkuNjU0LDMyIDMxLDMwLjY1NCAzMSwyOSBMMzEsMjUgQzMxLDIzLjg5NyAzMS44OTgsMjMgMzMsMjMgQzMzLjU1MywyMyAzNCwyMi41NTIgMzQsMjIgQzM0LDIxLjQ0OCAzMy41NTMsMjEgMzMsMjFcXFwiIGlkPUZpbGwtMTE2IGZpbGw9Izk3NzdBOD48L3BhdGg+IDxwYXRoIGQ9XFxcIk0yMSwyNCBDMjAuNDQ3LDI0IDIwLDI0LjQ0OCAyMCwyNSBMMjAsMjggQzIwLDI4LjU1MiAyMC40NDcsMjkgMjEsMjkgQzIxLjU1MywyOSAyMiwyOC41NTIgMjIsMjggTDIyLDI1IEMyMiwyNC40NDggMjEuNTUzLDI0IDIxLDI0XFxcIiBpZD1GaWxsLTExNyBmaWxsPSM5Nzc3QTg+PC9wYXRoPiA8L2c+IDwvZz4gPC9nPiA8L3N2Zz5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUtanNvbi5zdmdcbi8vIG1vZHVsZSBpZCA9IDQyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiIHN0YW5kYWxvbmU9XFxcIm5vXFxcIj8+IDxzdmcgd2lkdGg9NDJweCBoZWlnaHQ9NTlweCB2aWV3Qm94PVxcXCIwIDAgNDIgNTlcXFwiIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbms+IDx0aXRsZT42OCAtUFNEIEZpbGUtIChkb2N1bWVudCwgcGFwZXIsIHdyaXRlLCBub3RlLCBmbGF0KTwvdGl0bGU+IDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPiA8ZGVmcz48L2RlZnM+IDxnIGlkPVBhZ2UtMSBzdHJva2U9bm9uZSBzdHJva2Utd2lkdGg9MSBmaWxsPW5vbmUgZmlsbC1ydWxlPWV2ZW5vZGQ+IDxnIGlkPUljb25zIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC05NjYuMDAwMDAwLCAtMTA3My4wMDAwMDApXFxcIj4gPGcgaWQ9NjgtLVBTRC1GaWxlLS0oZG9jdW1lbnQsLXBhcGVyLC13cml0ZSwtbm90ZSwtZmxhdCkgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoOTY2LjAwMDAwMCwgMTA3My4wMDAwMDApXFxcIj4gPHBhdGggZD1cXFwiTTQyLDEyLjAxNCBMMzIsMTIuMDE0IEMzMC44OTUsMTIuMDE0IDMwLDExLjExOSAzMCwxMC4wMTQgTDMwLDAuMDE0IEw0MiwxMi4wMTQgWlxcXCIgaWQ9RmlsbC0yOTYgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTQyLDEyLjAxNCBMMzIsMTIuMDE0IEMzMC44OTUsMTIuMDE0IDMwLDExLjExOSAzMCwxMC4wMTQgTDMwLDAuMDE0IEwyLDAuMDE0IEMwLjg5NSwwLjAxNCAwLDAuOTA5IDAsMi4wMTQgTDAsNTYuMDE0IEMwLDU3LjExOSAwLjg5NSw1OC4wMTQgMiw1OC4wMTQgTDQwLDU4LjAxNCBDNDEuMTA1LDU4LjAxNCA0Miw1Ny4xMTkgNDIsNTYuMDE0IEw0MiwxMi4wMTQgWlxcXCIgaWQ9RmlsbC0yOTcgZmlsbD0jRUZFQUREPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDQ5LjAxNCBMMjYsNDkuMDE0IEMyNS40NDcsNDkuMDE0IDI1LDQ4LjU2NyAyNSw0OC4wMTQgQzI1LDQ3LjQ2MSAyNS40NDcsNDcuMDE0IDI2LDQ3LjAxNCBMMzYsNDcuMDE0IEMzNi41NTMsNDcuMDE0IDM3LDQ3LjQ2MSAzNyw0OC4wMTQgQzM3LDQ4LjU2NyAzNi41NTMsNDkuMDE0IDM2LDQ5LjAxNFxcXCIgaWQ9RmlsbC01MjMgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTMxLDUzLjAxNCBMMjYsNTMuMDE0IEMyNS40NDcsNTMuMDE0IDI1LDUyLjU2NyAyNSw1Mi4wMTQgQzI1LDUxLjQ2MSAyNS40NDcsNTEuMDE0IDI2LDUxLjAxNCBMMzEsNTEuMDE0IEMzMS41NTMsNTEuMDE0IDMyLDUxLjQ2MSAzMiw1Mi4wMTQgQzMyLDUyLjU2NyAzMS41NTMsNTMuMDE0IDMxLDUzLjAxNFxcXCIgaWQ9RmlsbC01MjQgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDUzLjAxNCBMMzUsNTMuMDE0IEMzNC40NDcsNTMuMDE0IDM0LDUyLjU2NyAzNCw1Mi4wMTQgQzM0LDUxLjQ2MSAzNC40NDcsNTEuMDE0IDM1LDUxLjAxNCBMMzYsNTEuMDE0IEMzNi41NTMsNTEuMDE0IDM3LDUxLjQ2MSAzNyw1Mi4wMTQgQzM3LDUyLjU2NyAzNi41NTMsNTMuMDE0IDM2LDUzLjAxNFxcXCIgaWQ9RmlsbC01MjUgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBvbHlnb24gaWQ9RmlsbC01MjYgZmlsbD0jMjZCOTk5IHBvaW50cz1cXFwiMjYgMzAuMDE0IDYgMzAuMDE0IDE2IDE4LjAxNCAzNiAxOC4wMTRcXFwiPjwvcG9seWdvbj4gPHBvbHlnb24gaWQ9RmlsbC01MjcgZmlsbD0jNkJEREMwIHBvaW50cz1cXFwiMjYgMzAuMDE0IDExIDMwLjAxNCA2IDM2LjAxNCAyNiAzNi4wMTQgMzYgMjQuMDE0IDMxIDI0LjAxNFxcXCI+PC9wb2x5Z29uPiA8cG9seWdvbiBpZD1GaWxsLTUyOCBmaWxsPSMyNkI5OTkgcG9pbnRzPVxcXCIyNiAzNi4wMTQgMTEgMzYuMDE0IDYgNDIuMDE0IDI2IDQyLjAxNCAzNiAzMC4wMTQgMzEgMzAuMDE0XFxcIj48L3BvbHlnb24+IDwvZz4gPC9nPiA8L2c+IDwvc3ZnPlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS1sYXllcmVkLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCIgc3RhbmRhbG9uZT1cXFwibm9cXFwiPz4gPHN2ZyB3aWR0aD00M3B4IGhlaWdodD01NnB4IHZpZXdCb3g9XFxcIjAgMCA0MyA1NlxcXCIgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaz4gPHRpdGxlPjI4IC0gUERGIEZpbGUgKGRvY3VtZW50LCBmb3JtYXQsIGV4dGVuc2lvbiwgZmlsZSwgdHlwZSwgZmxhdCk8L3RpdGxlPiA8ZGVzYz5DcmVhdGVkIHdpdGggU2tldGNoLjwvZGVzYz4gPGRlZnM+PC9kZWZzPiA8ZyBpZD1QYWdlLTEgc3Ryb2tlPW5vbmUgc3Ryb2tlLXdpZHRoPTEgZmlsbD1ub25lIGZpbGwtcnVsZT1ldmVub2RkPiA8ZyBpZD1JY29ucyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtMzY5LjAwMDAwMCwgLTQ3OS4wMDAwMDApXFxcIj4gPGcgaWQ9UERGLUZpbGUgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMzY5LjAwMDAwMCwgNDc5LjAwMDAwMClcXFwiPiA8cGF0aCBkPVxcXCJNMzAuNDg1LDAgTDEuNDYzLDAgQzAuNjU1LDAgMCwwLjY1NSAwLDEuOTI2IEwwLDU1IEMwLDU1LjM0NSAwLjY1NSw1NiAxLjQ2Myw1NiBMNDEuNTM3LDU2IEM0Mi4zNDUsNTYgNDMsNTUuMzQ1IDQzLDU1IEw0MywxMi45NzggQzQzLDEyLjI4MiA0Mi45MDcsMTIuMDU4IDQyLjc0MywxMS44OTMgTDMxLjEwNywwLjI1NyBDMzAuOTQyLDAuMDkzIDMwLjcxOCwwIDMwLjQ4NSwwXFxcIiBpZD1GaWxsLTEwMCBmaWxsPSNFOUU5RTA+PC9wYXRoPiA8cG9seWxpbmUgaWQ9RmlsbC0xMDEgZmlsbD0jRDlEN0NBIHBvaW50cz1cXFwiMzEgMC4xNTEgMzEgMTIgNDIuODQ5IDEyIDMxIDAuMTUxXFxcIj48L3BvbHlsaW5lPiA8cGF0aCBkPVxcXCJNMTMuMDE0LDMzLjMyNCBMMTMuMDE0LDMzLjMyNCBDMTIuNjY2LDMzLjMyNCAxMi4zMzIsMzMuMjExIDEyLjA0NywzMi45OTggQzExLjAwNiwzMi4yMTYgMTAuODY2LDMxLjM0NyAxMC45MzIsMzAuNzU1IEMxMS4xMTQsMjkuMTI4IDEzLjEyNywyNy40MjMgMTYuOTE3LDI1LjY4NyBDMTguNDIxLDIyLjM5MSAxOS44NTIsMTguMzMgMjAuNzA1LDE0LjkzNyBDMTkuNzA3LDEyLjc2NCAxOC43MzgsOS45NDcgMTkuNDQ0LDguMjkzIEMxOS42OTIsNy43MTUgMjAuMDAyLDcuMjcgMjAuNTc4LDcuMDc4IEMyMC44MDcsNy4wMDIgMjEuMzgyLDYuOTA2IDIxLjU5NCw2LjkwNiBDMjIuMDk4LDYuOTA2IDIyLjU0MSw3LjU1NSAyMi44NTUsNy45NTUgQzIzLjE1LDguMzMyIDIzLjgxOSw5LjEyOSAyMi40ODIsMTQuNzU4IEMyMy44MywxNy41NDEgMjUuNzM5LDIwLjM3NyAyNy41NywyMi4zMTkgQzI4Ljg4MSwyMi4wODIgMzAuMDA5LDIxLjk2MSAzMC45MjgsMjEuOTYxIEMzMi40OTQsMjEuOTYxIDMzLjQ0MywyMi4zMjcgMzMuODMsMjMuMDc4IEMzNC4xNSwyMy43IDM0LjAxOCwyNC40MjcgMzMuNDM5LDI1LjIzOCBDMzIuODgyLDI2LjAxNyAzMi4xMTUsMjYuNDI5IDMxLjIxOSwyNi40MjkgQzMwLjAwMywyNi40MjkgMjguNTg3LDI1LjY2MSAyNy4wMDgsMjQuMTQ0IEMyNC4xNywyNC43MzcgMjAuODU3LDI1Ljc5NSAxOC4xNzksMjYuOTY2IEMxNy4zNDMsMjguNzQgMTYuNTQyLDMwLjE2OSAxNS43OTYsMzEuMjE3IEMxNC43NzMsMzIuNjU0IDEzLjg4OSwzMy4zMjQgMTMuMDE0LDMzLjMyNCBMMTMuMDE0LDMzLjMyNCBaIE0xNS42NzYsMjguMTk4IEMxMy41MzgsMjkuMzk5IDEyLjY2NywzMC4zODYgMTIuNjA1LDMwLjk0MiBDMTIuNTk1LDMxLjAzNCAxMi41NjgsMzEuMjc2IDEzLjAzNiwzMS42MzQgQzEzLjE4NSwzMS41ODcgMTQuMDU1LDMxLjE5IDE1LjY3NiwyOC4xOTggTDE1LjY3NiwyOC4xOTggWiBNMjkuMzEzLDIzLjc1NiBDMzAuMTI4LDI0LjM4MyAzMC4zMjcsMjQuNyAzMC44NiwyNC43IEMzMS4wOTQsMjQuNyAzMS43NjIsMjQuNjkgMzIuMDcsMjQuMjU5IEMzMi4yMTksMjQuMDUgMzIuMjc3LDIzLjkxNiAzMi4yOTksMjMuODQ1IEMzMi4xNzcsMjMuNzc5IDMyLjAxNCwyMy42NDggMzEuMTI0LDIzLjY0OCBDMzAuNjIsMjMuNjQ4IDI5Ljk4NSwyMy42NjkgMjkuMzEzLDIzLjc1NiBMMjkuMzEzLDIzLjc1NiBaIE0yMS44NDMsMTcuMTc0IEMyMS4xMjcsMTkuNjQ4IDIwLjE4MywyMi4zMTkgMTkuMTY5LDI0LjczOCBDMjEuMjU5LDIzLjkyNyAyMy41MzEsMjMuMjE5IDI1LjY2NSwyMi43MTggQzI0LjMxNSwyMS4xNSAyMi45NjYsMTkuMTkyIDIxLjg0MywxNy4xNzQgTDIxLjg0MywxNy4xNzQgWiBNMjEuMjM2LDguNzEyIEMyMS4xMzgsOC43NDUgMTkuOTA2LDEwLjQ2OSAyMS4zMzIsMTEuOTI4IEMyMi4yODEsOS44MTMgMjEuMjc5LDguNjk4IDIxLjIzNiw4LjcxMiBMMjEuMjM2LDguNzEyIFpcXFwiIGlkPUZpbGwtMTAyIGZpbGw9I0NDNEI0Qz48L3BhdGg+IDxwYXRoIGQ9XFxcIk00MS41MzcsNTYgTDEuNDYzLDU2IEMwLjY1NSw1NiAwLDU1LjM0NSAwLDU0LjUzNyBMMCwzOSBMNDMsMzkgTDQzLDU0LjUzNyBDNDMsNTUuMzQ1IDQyLjM0NSw1NiA0MS41MzcsNTZcXFwiIGlkPUZpbGwtMjg2IGZpbGw9I0NDNEI0Qz48L3BhdGg+IDxwYXRoIGQ9XFxcIk0xMC44ODUsNTMgTDkuMjQ0LDUzIEw5LjI0NCw0Mi45MjQgTDEyLjE0Myw0Mi45MjQgQzEyLjU3MSw0Mi45MjQgMTIuOTk1LDQyLjk5MiAxMy40MTQsNDMuMTI5IEMxMy44MzMsNDMuMjY2IDE0LjIwOSw0My40NzEgMTQuNTQyLDQzLjc0NCBDMTQuODc1LDQ0LjAxOCAxNS4xNDQsNDQuMzQ4IDE1LjM0OSw0NC43MzUgQzE1LjU1NCw0NS4xMjMgMTUuNjU2LDQ1LjU1OCAxNS42NTYsNDYuMDQxIEMxNS42NTYsNDYuNTUyIDE1LjU2OSw0Ny4wMTQgMTUuMzk3LDQ3LjQyOSBDMTUuMjIzLDQ3Ljg0NCAxNC45ODEsNDguMTkyIDE0LjY3Miw0OC40NzUgQzE0LjM2Miw0OC43NTcgMTMuOTg4LDQ4Ljk3NiAxMy41NTEsNDkuMTMxIEMxMy4xMTMsNDkuMjg2IDEyLjYzLDQ5LjM2MyAxMi4xMDIsNDkuMzYzIEwxMC44ODUsNDkuMzYzIEwxMC44ODUsNTMgTDEwLjg4NSw1MyBaIE0xMC44ODUsNDQuMTY4IEwxMC44ODUsNDguMTYgTDEyLjM4OSw0OC4xNiBDMTIuNTg5LDQ4LjE2IDEyLjc4Nyw0OC4xMjYgMTIuOTgzLDQ4LjA1OCBDMTMuMTc5LDQ3Ljk4OSAxMy4zNTksNDcuODc4IDEzLjUyMyw0Ny43MjMgQzEzLjY4OCw0Ny41NjcgMTMuODE5LDQ3LjM1MiAxMy45Miw0Ny4wNzMgQzE0LjAyLDQ2Ljc5NSAxNC4wNyw0Ni40NTEgMTQuMDcsNDYuMDQxIEMxNC4wNyw0NS44NzcgMTQuMDQ3LDQ1LjY4OCAxNC4wMDIsNDUuNDc0IEMxMy45NTYsNDUuMjYgMTMuODYzLDQ1LjA1NSAxMy43MjIsNDQuODU4IEMxMy41OCw0NC42NjIgMTMuMzgyLDQ0LjQ5OCAxMy4xMjcsNDQuMzY2IEMxMi44NzIsNDQuMjM0IDEyLjUzNCw0NC4xNjggMTIuMTE1LDQ0LjE2OCBMMTAuODg1LDQ0LjE2OCBMMTAuODg1LDQ0LjE2OCBaXFxcIiBpZD1GaWxsLTI4NyBmaWxsPSNGRkZGRkY+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMjUuNzE5LDQ3LjY4MiBDMjUuNzE5LDQ4LjUxMSAyNS42Myw0OS4yMiAyNS40NTIsNDkuODA4IEMyNS4yNzQsNTAuMzk2IDI1LjA0OSw1MC44ODggMjQuNzc1LDUxLjI4NCBDMjQuNTAyLDUxLjY4MSAyNC4xOTQsNTEuOTkzIDIzLjg1Myw1Mi4yMjEgQzIzLjUxMSw1Mi40NDggMjMuMTgsNTIuNjE5IDIyLjg2MSw1Mi43MzMgQzIyLjU0Miw1Mi44NDggMjIuMjUxLDUyLjkyIDIxLjk4Niw1Mi45NTIgQzIxLjcyMiw1Mi45ODQgMjEuNTI2LDUzIDIxLjM5OCw1MyBMMTcuNTg0LDUzIEwxNy41ODQsNDIuOTI0IEwyMC42MTksNDIuOTI0IEMyMS40NjcsNDIuOTI0IDIyLjIxMiw0My4wNTkgMjIuODU1LDQzLjMyNyBDMjMuNDk3LDQzLjU5NiAyNC4wMyw0My45NTQgMjQuNDU0LDQ0LjQgQzI0Ljg3OCw0NC44NDcgMjUuMTk0LDQ1LjM1NSAyNS40MDQsNDUuOTI1IEMyNS42MTQsNDYuNDk0IDI1LjcxOSw0Ny4wOCAyNS43MTksNDcuNjgyIEwyNS43MTksNDcuNjgyIFogTTIwLjg1Miw1MS43OTcgQzIxLjk2Myw1MS43OTcgMjIuNzY2LDUxLjQ0MSAyMy4yNTgsNTAuNzMgQzIzLjc1LDUwLjAyIDIzLjk5Niw0OC45ODkgMjMuOTk2LDQ3LjY0MSBDMjMuOTk2LDQ3LjIyMiAyMy45NDYsNDYuODA3IDIzLjg0Niw0Ni4zOTcgQzIzLjc0NSw0NS45ODYgMjMuNTUyLDQ1LjYxNSAyMy4yNjUsNDUuMjgyIEMyMi45NzgsNDQuOTQ5IDIyLjU4OCw0NC42ODEgMjIuMDk2LDQ0LjQ3NiBDMjEuNjA0LDQ0LjI3MSAyMC45NjUsNDQuMTY4IDIwLjE4Miw0NC4xNjggTDE5LjIyNSw0NC4xNjggTDE5LjIyNSw1MS43OTcgTDIwLjg1Miw1MS43OTcgTDIwLjg1Miw1MS43OTcgWlxcXCIgaWQ9RmlsbC0yODggZmlsbD0jRkZGRkZGPjwvcGF0aD4gPHBvbHlsaW5lIGlkPUZpbGwtMjg5IGZpbGw9I0ZGRkZGRiBwb2ludHM9XFxcIjI5Ljc2NiA0NC4xNjggMjkuNzY2IDQ3LjM0IDMzLjk3NyA0Ny4zNCAzMy45NzcgNDguNDYxIDI5Ljc2NiA0OC40NjEgMjkuNzY2IDUzIDI4LjA5OCA1MyAyOC4wOTggNDIuOTI0IDM0LjQgNDIuOTI0IDM0LjQgNDQuMTY4IDI5Ljc2NiA0NC4xNjhcXFwiPjwvcG9seWxpbmU+IDwvZz4gPC9nPiA8L2c+IDwvc3ZnPlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS1wZGYuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0MjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjw/eG1sIHZlcnNpb249XFxcIjEuMFxcXCIgZW5jb2Rpbmc9XFxcIlVURi04XFxcIiBzdGFuZGFsb25lPVxcXCJub1xcXCI/PiA8c3ZnIHdpZHRoPTQycHggaGVpZ2h0PTU5cHggdmlld0JveD1cXFwiMCAwIDQyIDU5XFxcIiB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rPiA8dGl0bGU+NTkgLVBQVFggRmlsZS0gKGRvY3VtZW50LCBwYXBlciwgd3JpdGUsIG5vdGUsIGZsYXQpPC90aXRsZT4gPGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+IDxkZWZzPjwvZGVmcz4gPGcgaWQ9UGFnZS0xIHN0cm9rZT1ub25lIHN0cm9rZS13aWR0aD0xIGZpbGw9bm9uZSBmaWxsLXJ1bGU9ZXZlbm9kZD4gPGcgaWQ9SWNvbnMgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTEwODYuMDAwMDAwLCAtOTUzLjAwMDAwMClcXFwiPiA8ZyBpZD01OS0tUFBUWC1GaWxlLS0oZG9jdW1lbnQsLXBhcGVyLC13cml0ZSwtbm90ZSwtZmxhdCkgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMTA4Ni4wMDAwMDAsIDk1My4wMDAwMDApXFxcIj4gPHBhdGggZD1cXFwiTTQyLDEyLjAxNCBMMzIsMTIuMDE0IEMzMC44OTUsMTIuMDE0IDMwLDExLjExOSAzMCwxMC4wMTQgTDMwLDAuMDE0IEw0MiwxMi4wMTQgWlxcXCIgaWQ9RmlsbC0yNzYgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTQyLDEyLjAxNCBMMzIsMTIuMDE0IEMzMC44OTUsMTIuMDE0IDMwLDExLjExOSAzMCwxMC4wMTQgTDMwLDAuMDE0IEwyLDAuMDE0IEMwLjg5NSwwLjAxNCAwLDAuOTA5IDAsMi4wMTQgTDAsNTYuMDE0IEMwLDU3LjExOSAwLjg5NSw1OC4wMTQgMiw1OC4wMTQgTDQwLDU4LjAxNCBDNDEuMTA1LDU4LjAxNCA0Miw1Ny4xMTkgNDIsNTYuMDE0IEw0MiwxMi4wMTQgWlxcXCIgaWQ9RmlsbC0yNzcgZmlsbD0jRUZFQUREPjwvcGF0aD4gPHBhdGggZD1cXFwiTTIyLDEzLjAxNCBMMjIsMjUuMDE0IEwzNCwyNS4wMTQgQzM0LDE4LjM4NyAyOC42MjcsMTMuMDE0IDIyLDEzLjAxNFxcXCIgaWQ9RmlsbC00NjIgZmlsbD0jRjM4Nzc0PjwvcGF0aD4gPHBhdGggZD1cXFwiTTE4LDI5LjAxNCBMMTgsMTcuMDE0IEMxMy45NzQsMTcuMDE0IDEwLjQyLDE5LjAwMyA4LjI0NCwyMi4wNDUgTDE4LDI5LjAxNCBaXFxcIiBpZD1GaWxsLTQ2MyBmaWxsPSNGMEM0MUE+PC9wYXRoPiA8cGF0aCBkPVxcXCJNOC4yNjgyLDIyLjAxMzQgQzYuODQ0MiwyMy45ODM0IDYuMDAwMiwyNi4zOTc0IDYuMDAwMiwyOS4wMTQ0IEM2LjAwMDIsMzUuNjQxNCAxMS4zNzIyLDQxLjAxNDQgMTguMDAwMiw0MS4wMTQ0IEMyNC42MjcyLDQxLjAxNDQgMzAuMDAwMiwzNS42NDE0IDMwLjAwMDIsMjkuMDE0NCBMMTguMDAwMiwyOS4wMTQ0IEw4LjI0MzIsMjIuMDQ1NFxcXCIgaWQ9RmlsbC00NjQgZmlsbD0jMjZCOTk5PjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDQ5LjAxNCBMMjYsNDkuMDE0IEMyNS40NDcsNDkuMDE0IDI1LDQ4LjU2NyAyNSw0OC4wMTQgQzI1LDQ3LjQ2MSAyNS40NDcsNDcuMDE0IDI2LDQ3LjAxNCBMMzYsNDcuMDE0IEMzNi41NTMsNDcuMDE0IDM3LDQ3LjQ2MSAzNyw0OC4wMTQgQzM3LDQ4LjU2NyAzNi41NTMsNDkuMDE0IDM2LDQ5LjAxNFxcXCIgaWQ9RmlsbC01MzIgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTMxLDUzLjAxNCBMMjYsNTMuMDE0IEMyNS40NDcsNTMuMDE0IDI1LDUyLjU2NyAyNSw1Mi4wMTQgQzI1LDUxLjQ2MSAyNS40NDcsNTEuMDE0IDI2LDUxLjAxNCBMMzEsNTEuMDE0IEMzMS41NTMsNTEuMDE0IDMyLDUxLjQ2MSAzMiw1Mi4wMTQgQzMyLDUyLjU2NyAzMS41NTMsNTMuMDE0IDMxLDUzLjAxNFxcXCIgaWQ9RmlsbC01MzMgZmlsbD0jRDREMEJBPjwvcGF0aD4gPHBhdGggZD1cXFwiTTM2LDUzLjAxNCBMMzUsNTMuMDE0IEMzNC40NDcsNTMuMDE0IDM0LDUyLjU2NyAzNCw1Mi4wMTQgQzM0LDUxLjQ2MSAzNC40NDcsNTEuMDE0IDM1LDUxLjAxNCBMMzYsNTEuMDE0IEMzNi41NTMsNTEuMDE0IDM3LDUxLjQ2MSAzNyw1Mi4wMTQgQzM3LDUyLjU2NyAzNi41NTMsNTMuMDE0IDM2LDUzLjAxNFxcXCIgaWQ9RmlsbC01MzQgZmlsbD0jRDREMEJBPjwvcGF0aD4gPC9nPiA8L2c+IDwvZz4gPC9zdmc+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9maWxlLXByZXNlbnRhdGlvbi5zdmdcbi8vIG1vZHVsZSBpZCA9IDQyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiIHN0YW5kYWxvbmU9XFxcIm5vXFxcIj8+IDxzdmcgd2lkdGg9NDJweCBoZWlnaHQ9NTlweCB2aWV3Qm94PVxcXCIwIDAgNDIgNTlcXFwiIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbms+IDx0aXRsZT42NiAtVmlkZW8gRmlsZS0gKEZsYXQpPC90aXRsZT4gPGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+IDxkZWZzPjwvZGVmcz4gPGcgaWQ9UGFnZS0xIHN0cm9rZT1ub25lIHN0cm9rZS13aWR0aD0xIGZpbGw9bm9uZSBmaWxsLXJ1bGU9ZXZlbm9kZD4gPGcgaWQ9SWNvbnMgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTcyNi4wMDAwMDAsIC0xMDczLjAwMDAwMClcXFwiPiA8ZyBpZD02Ni0tVmlkZW8tRmlsZS0tKEZsYXQpIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDcyNi4wMDAwMDAsIDEwNzMuMDAwMDAwKVxcXCI+IDxwYXRoIGQ9XFxcIk00MiwxMi4wMTQgTDMyLDEyLjAxNCBDMzAuODk1LDEyLjAxNCAzMCwxMS4xMTkgMzAsMTAuMDE0IEwzMCwwLjAxNCBMNDIsMTIuMDE0IFpcXFwiIGlkPUZpbGwtMjkyIGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk00MiwxMi4wMTQgTDMyLDEyLjAxNCBDMzAuODk1LDEyLjAxNCAzMCwxMS4xMTkgMzAsMTAuMDE0IEwzMCwwLjAxNCBMMiwwLjAxNCBDMC44OTUsMC4wMTQgMCwwLjkwOSAwLDIuMDE0IEwwLDU2LjAxNCBDMCw1Ny4xMTkgMC44OTUsNTguMDE0IDIsNTguMDE0IEw0MCw1OC4wMTQgQzQxLjEwNSw1OC4wMTQgNDIsNTcuMTE5IDQyLDU2LjAxNCBMNDIsMTIuMDE0IFpcXFwiIGlkPUZpbGwtMjkzIGZpbGw9I0VGRUFERD48L3BhdGg+IDxwYXRoIGQ9XFxcIk0yNCwzNy4wMTQgTDgsMzcuMDE0IEM2Ljg5NSwzNy4wMTQgNiwzNi4xMTkgNiwzNS4wMTQgTDYsMjMuMDE0IEM2LDIxLjkwOSA2Ljg5NSwyMS4wMTQgOCwyMS4wMTQgTDI0LDIxLjAxNCBDMjUuMTA1LDIxLjAxNCAyNiwyMS45MDkgMjYsMjMuMDE0IEwyNiwzNS4wMTQgQzI2LDM2LjExOSAyNS4xMDUsMzcuMDE0IDI0LDM3LjAxNFxcXCIgaWQ9RmlsbC01MTMgZmlsbD0jNTQ2MDgwPjwvcGF0aD4gPHBhdGggZD1cXFwiTTMzLjQyNTMsMzUuMjQxNiBMMjYuMDAwMywzMy4wMTM2IEwyNi4wMDAzLDI1LjAxMzYgTDMzLjQyNTMsMjIuNzg2NiBDMzQuNzA4MywyMi40MDE2IDM2LjAwMDMsMjMuMzYyNiAzNi4wMDAzLDI0LjcwMTYgTDM2LjAwMDMsMzMuMzI1NiBDMzYuMDAwMywzNC42NjU2IDM0LjcwODMsMzUuNjI2NiAzMy40MjUzLDM1LjI0MTZcXFwiIGlkPUZpbGwtNTE0IGZpbGw9IzM3NDU2ND48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiw0OS4wMTQgTDI2LDQ5LjAxNCBDMjUuNDQ3LDQ5LjAxNCAyNSw0OC41NjcgMjUsNDguMDE0IEMyNSw0Ny40NjEgMjUuNDQ3LDQ3LjAxNCAyNiw0Ny4wMTQgTDM2LDQ3LjAxNCBDMzYuNTUzLDQ3LjAxNCAzNyw0Ny40NjEgMzcsNDguMDE0IEMzNyw0OC41NjcgMzYuNTUzLDQ5LjAxNCAzNiw0OS4wMTRcXFwiIGlkPUZpbGwtNTE1IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zMSw1My4wMTQgTDI2LDUzLjAxNCBDMjUuNDQ3LDUzLjAxNCAyNSw1Mi41NjcgMjUsNTIuMDE0IEMyNSw1MS40NjEgMjUuNDQ3LDUxLjAxNCAyNiw1MS4wMTQgTDMxLDUxLjAxNCBDMzEuNTUzLDUxLjAxNCAzMiw1MS40NjEgMzIsNTIuMDE0IEMzMiw1Mi41NjcgMzEuNTUzLDUzLjAxNCAzMSw1My4wMTRcXFwiIGlkPUZpbGwtNTE2IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zNiw1My4wMTQgTDM1LDUzLjAxNCBDMzQuNDQ3LDUzLjAxNCAzNCw1Mi41NjcgMzQsNTIuMDE0IEMzNCw1MS40NjEgMzQuNDQ3LDUxLjAxNCAzNSw1MS4wMTQgTDM2LDUxLjAxNCBDMzYuNTUzLDUxLjAxNCAzNyw1MS40NjEgMzcsNTIuMDE0IEMzNyw1Mi41NjcgMzYuNTUzLDUzLjAxNCAzNiw1My4wMTRcXFwiIGlkPUZpbGwtNTE5IGZpbGw9I0Q0RDBCQT48L3BhdGg+IDwvZz4gPC9nPiA8L2c+IDwvc3ZnPlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZmlsZS12aWRlby5zdmdcbi8vIG1vZHVsZSBpZCA9IDQyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiIHN0YW5kYWxvbmU9XFxcIm5vXFxcIj8+IDxzdmcgd2lkdGg9NDNweCBoZWlnaHQ9NTZweCB2aWV3Qm94PVxcXCIwIDAgNDMgNTZcXFwiIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbms+IDx0aXRsZT4yNCAtIFhNTCBGaWxlIChkb2N1bWVudCwgZm9ybWF0LCBleHRlbnNpb24sIGZpbGUsIHR5cGUsIGZsYXQpPC90aXRsZT4gPGRlc2M+Q3JlYXRlZCB3aXRoIFNrZXRjaC48L2Rlc2M+IDxkZWZzPjwvZGVmcz4gPGcgaWQ9UGFnZS0xIHN0cm9rZT1ub25lIHN0cm9rZS13aWR0aD0xIGZpbGw9bm9uZSBmaWxsLXJ1bGU9ZXZlbm9kZD4gPGcgaWQ9SWNvbnMgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoLTg0OS4wMDAwMDAsIC00NzkuMDAwMDAwKVxcXCI+IDxnIGlkPVhNTC1GaWxlIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDg0OS4wMDAwMDAsIDQ3OS4wMDAwMDApXFxcIj4gPHBhdGggZD1cXFwiTTMwLjQ4NSwwIEwxLjQ2MywwIEMwLjY1NSwwIDAsMC42NTUgMCwxLjkyNiBMMCw1NSBDMCw1NS4zNDUgMC42NTUsNTYgMS40NjMsNTYgTDQxLjUzNyw1NiBDNDIuMzQ1LDU2IDQzLDU1LjM0NSA0Myw1NSBMNDMsMTIuOTc4IEM0MywxMi4yODIgNDIuOTA3LDEyLjA1OCA0Mi43NDMsMTEuODkzIEwzMS4xMDcsMC4yNTcgQzMwLjk0MiwwLjA5MyAzMC43MTgsMCAzMC40ODUsMFxcXCIgaWQ9RmlsbC0yNCBmaWxsPSNFOUU5RTA+PC9wYXRoPiA8cG9seWxpbmUgaWQ9RmlsbC0yNSBmaWxsPSNEOUQ3Q0EgcG9pbnRzPVxcXCIzMSAwLjE1MSAzMSAxMiA0Mi44NDkgMTIgMzEgMC4xNTFcXFwiPjwvcG9seWxpbmU+IDxwYXRoIGQ9XFxcIk00MS41MzcsNTYgTDEuNDYzLDU2IEMwLjY1NSw1NiAwLDU1LjM0NSAwLDU0LjUzNyBMMCwzOSBMNDMsMzkgTDQzLDU0LjUzNyBDNDMsNTUuMzQ1IDQyLjM0NSw1NiA0MS41MzcsNTZcXFwiIGlkPUZpbGwtMTE4IGZpbGw9I0YyOUMxRj48L3BhdGg+IDxwb2x5bGluZSBpZD1GaWxsLTExOSBmaWxsPSNGRkZGRkYgcG9pbnRzPVxcXCIxMi44NzkgNDguMTA1IDE1LjQzNiA1MyAxMy41MzUgNTMgMTEuOTM2IDQ5LjE5OSAxMS43OTkgNDkuMTk5IDEwLjA3NiA1MyA4LjE3NiA1MyAxMC43MzIgNDguMTA1IDguMDEyIDQyLjkyNCA5Ljg4NSA0Mi45MjQgMTEuNjYyIDQ3LjAyNSAxMS43OTkgNDcuMDI1IDEzLjcyNyA0Mi45MjQgMTUuNiA0Mi45MjQgMTIuODc5IDQ4LjEwNVxcXCI+PC9wb2x5bGluZT4gPHBvbHlsaW5lIGlkPUZpbGwtMTIwIGZpbGw9I0ZGRkZGRiBwb2ludHM9XFxcIjI1LjQ5OCA0Mi45MjQgMjcuMTY2IDQyLjkyNCAyNy4xNjYgNTMgMjUuNDk4IDUzIDI1LjQ5OCA0Ni4wNjggMjMuMjQyIDUxLjY3NCAyMS43OTMgNTEuNjc0IDE5LjUyMyA0Ni4wNjggMTkuNTIzIDUzIDE3Ljg1NiA1MyAxNy44NTYgNDIuOTI0IDE5LjUyMyA0Mi45MjQgMjIuNTE4IDQ5LjgxNSAyNS40OTggNDIuOTI0XFxcIj48L3BvbHlsaW5lPiA8cG9seWxpbmUgaWQ9RmlsbC0xMjEgZmlsbD0jRkZGRkZGIHBvaW50cz1cXFwiMzEuMzYzIDQyLjkyNCAzMS4zNjMgNTEuNzU2IDM1Ljk5OCA1MS43NTYgMzUuOTk4IDUzIDI5LjY5NSA1MyAyOS42OTUgNDIuOTI0IDMxLjM2MyA0Mi45MjRcXFwiPjwvcG9seWxpbmU+IDxwYXRoIGQ9XFxcIk05LDI0IEM4Ljc0NCwyNCA4LjQ4OCwyMy45MDIgOC4yOTMsMjMuNzA3IEM3LjkwMiwyMy4zMTYgNy45MDIsMjIuNjg0IDguMjkzLDIyLjI5MyBMMTQuMjkzLDE2LjI5MyBDMTQuNjg0LDE1LjkwMiAxNS4zMTYsMTUuOTAyIDE1LjcwNywxNi4yOTMgQzE2LjA5OCwxNi42ODQgMTYuMDk4LDE3LjMxNiAxNS43MDcsMTcuNzA3IEw5LjcwNywyMy43MDcgQzkuNTEyLDIzLjkwMiA5LjI1NiwyNCA5LDI0XFxcIiBpZD1GaWxsLTEyMiBmaWxsPSNGMjlDMUY+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMTUsMzAgQzE0Ljc0NCwzMCAxNC40ODgsMjkuOTAyIDE0LjI5MywyOS43MDcgTDguMjkzLDIzLjcwNyBDNy45MDIsMjMuMzE2IDcuOTAyLDIyLjY4NCA4LjI5MywyMi4yOTMgQzguNjg0LDIxLjkwMiA5LjMxNiwyMS45MDIgOS43MDcsMjIuMjkzIEwxNS43MDcsMjguMjkzIEMxNi4wOTgsMjguNjg0IDE2LjA5OCwyOS4zMTYgMTUuNzA3LDI5LjcwNyBDMTUuNTEyLDI5LjkwMiAxNS4yNTYsMzAgMTUsMzBcXFwiIGlkPUZpbGwtMTIzIGZpbGw9I0YyOUMxRj48L3BhdGg+IDxwYXRoIGQ9XFxcIk0yNywzMCBDMjYuNzQ0LDMwIDI2LjQ4OCwyOS45MDIgMjYuMjkzLDI5LjcwNyBDMjUuOTAyLDI5LjMxNiAyNS45MDIsMjguNjg0IDI2LjI5MywyOC4yOTMgTDMyLjI5MywyMi4yOTMgQzMyLjY4NCwyMS45MDIgMzMuMzE2LDIxLjkwMiAzMy43MDcsMjIuMjkzIEMzNC4wOTgsMjIuNjg0IDM0LjA5OCwyMy4zMTYgMzMuNzA3LDIzLjcwNyBMMjcuNzA3LDI5LjcwNyBDMjcuNTEyLDI5LjkwMiAyNy4yNTYsMzAgMjcsMzBcXFwiIGlkPUZpbGwtMTI0IGZpbGw9I0YyOUMxRj48L3BhdGg+IDxwYXRoIGQ9XFxcIk0zMywyNCBDMzIuNzQ0LDI0IDMyLjQ4OCwyMy45MDIgMzIuMjkzLDIzLjcwNyBMMjYuMjkzLDE3LjcwNyBDMjUuOTAyLDE3LjMxNiAyNS45MDIsMTYuNjg0IDI2LjI5MywxNi4yOTMgQzI2LjY4NCwxNS45MDIgMjcuMzE2LDE1LjkwMiAyNy43MDcsMTYuMjkzIEwzMy43MDcsMjIuMjkzIEMzNC4wOTgsMjIuNjg0IDM0LjA5OCwyMy4zMTYgMzMuNzA3LDIzLjcwNyBDMzMuNTEyLDIzLjkwMiAzMy4yNTYsMjQgMzMsMjRcXFwiIGlkPUZpbGwtMTI1IGZpbGw9I0YyOUMxRj48L3BhdGg+IDxwYXRoIGQ9XFxcIk0xOCwzMiBDMTcuODksMzIgMTcuNzc3LDMxLjk4MiAxNy42NjcsMzEuOTQzIEMxNy4xNDcsMzEuNzU5IDE2Ljg3MywzMS4xODggMTcuMDU3LDMwLjY2NyBMMjMuMDU3LDEzLjY2NyBDMjMuMjQxLDEzLjE0NiAyMy44MSwxMi44NzIgMjQuMzMzLDEzLjA1NyBDMjQuODU0LDEzLjI0MSAyNS4xMjcsMTMuODEyIDI0Ljk0MywxNC4zMzMgTDE4Ljk0MywzMS4zMzMgQzE4Ljc5OCwzMS43NDQgMTguNDEyLDMyIDE4LDMyXFxcIiBpZD1GaWxsLTEyNiBmaWxsPSNGMjlDMUY+PC9wYXRoPiA8L2c+IDwvZz4gPC9nPiA8L3N2Zz5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZpbGUteG1sLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCI/Pjxzdmcgd2lkdGg9NjQgaGVpZ2h0PTY0IHZlcnNpb249MS4xIHZpZXdCb3g9XFxcIjAgMCA2NCA2NFxcXCIgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaz48ZyB0cmFuc2Zvcm09c2NhbGUoMi42NjY2Nyk+PHBhdGggZmlsbD1ub25lIHN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLWxpbmVqb2luPXJvdW5kIHN0cm9rZS13aWR0aD0xIGQ9XFxcIk0yMC4zMjg0LDE0LjY3MTZjMS41NjIxLDEuNTYyMSAxLjU2MjEsNC4wOTQ3NiAwLDUuNjU2ODVjLTEuNTYyMSwxLjU2MjEgLTQuMDk0NzYsMS41NjIxIC01LjY1Njg1LDBjLTEuNTYyMSwtMS41NjIxIC0xLjU2MjEsLTQuMDk0NzYgLTEuNzc2MzZlLTE1LC01LjY1Njg1YzEuNTYyMSwtMS41NjIxIDQuMDk0NzYsLTEuNTYyMSA1LjY1Njg1LC0xLjc3NjM2ZS0xNVxcXCI+PC9wYXRoPjxwYXRoIGZpbGw9bm9uZSBzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZCBzdHJva2Utd2lkdGg9MSBkPU0yMC4zMywyMC4zM2wzLjE3LDMuMTc+PC9wYXRoPjxwYXRoIGZpbGw9bm9uZSBzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZCBzdHJva2Utd2lkdGg9MSBkPVxcXCJNMTguNSw0LjV2LTJoLTEzdi0yaC01djE1LjVjMCwwLjgyOSAwLjY3LDEuNSAxLjUsMS41YzAuODI4LDAgMS41LC0wLjY3MSAxLjUsLTEuNXYtMTEuNWgxN3Y1XFxcIj48L3BhdGg+PHBhdGggZmlsbD1ub25lIHN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kIHN0cm9rZS13aWR0aD0xIGQ9TTIsMTcuNWg3LjU+PC9wYXRoPjxwYXRoIGZpbGw9bm9uZSBkPU0wLDBoMjR2MjRoLTI0Wj48L3BhdGg+PC9nPjwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZvbGRlci1zZWFyY2gtZW1wdHkuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0Mjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgd2lkdGg9NThweCBoZWlnaHQ9NTFweCB2aWV3Qm94PVxcXCIwIDAgNTggNTFcXFwiIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6c2tldGNoPWh0dHA6Ly93d3cuYm9oZW1pYW5jb2RpbmcuY29tL3NrZXRjaC9ucz4gPGcgc3Ryb2tlPW5vbmUgc3Ryb2tlLXdpZHRoPTEgZmlsbD1ub25lIGZpbGwtcnVsZT1ldmVub2RkPiA8ZyBpZD1JY29ucyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgtNzIxLjAwMDAwMCwgLTQwODEuMDAwMDAwKVxcXCI+IDxnIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDcyMS4wMDAwMDAsIDQwODEuMDAwMDAwKVxcXCI+IDxwYXRoIGQ9XFxcIk01NS45ODEsNTEgTDIuMDE5LDUxIEMwLjkwNCw1MSAwLDUwLjA5NiAwLDQ4Ljk4MSBMMCwxNyBMNTgsMTcgTDU4LDQ4Ljk4MSBDNTgsNTAuMDk2IDU3LjA5Niw1MSA1NS45ODEsNTFcXFwiIGlkPUZpbGwtMTQxMyBmaWxsPSNGMENFNDkgc2tldGNoOnR5cGU9TVNTaGFwZUdyb3VwPjwvcGF0aD4gPHBhdGggZD1cXFwiTTI2LjAxOSw4IEwyNi4wMTksMi4wMTkgQzI2LjAxOSwwLjkwNCAyNS4xMTUsMCAyNCwwIEwyLjAxOSwwIEMwLjkwNCwwIDAsMC45MDQgMCwyLjAxOSBMMCwxNyBMNTgsMTcgTDU4LDEwLjAxOSBDNTgsOC45MDQgNTcuMDk2LDggNTUuOTgxLDggTDI2LjAxOSw4XFxcIiBpZD1GaWxsLTE0MTQgZmlsbD0jRUNCQTE2IHNrZXRjaDp0eXBlPU1TU2hhcGVHcm91cD48L3BhdGg+IDwvZz4gPC9nPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ZvbGRlci5zdmdcbi8vIG1vZHVsZSBpZCA9IDQzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxwYXRoIGNsYXNzPXN0MCBkPU0xMy41LDQuNXYtMWMwLTAuNi0wLjQtMS0xLTFIOS44IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU00LjIsMi41SDEuNWMtMC42LDAtMSwwLjQtMSwxdjExYzAsMC42LDAuNCwxLDEsMUg0IC8+IDxwYXRoIGNsYXNzPXN0MCBkPVxcXCJNOS42LDMuMkM5LjUsMy40LDkuNCwzLjUsOS4xLDMuNUg0LjljLTAuMiwwLTAuNC0wLjEtMC41LTAuM2wtMC43LTJDMy43LDEsMy43LDAuOCwzLjgsMC43XFxuICAgIEMzLjksMC42LDQsMC41LDQuMiwwLjVoNS42YzAuMiwwLDAuMywwLjEsMC40LDAuMmMwLjEsMC4xLDAuMSwwLjMsMC4xLDAuNUw5LjYsMy4yelxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1NNC41LDEzLjVIM2MtMC4zLDAtMC41LTAuMi0wLjUtMC41VjQuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTAuNSB5MT01IHgyPTEwLjUgeTI9Ni41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT00LjUgeTE9Ni41IHgyPTcuNSB5Mj02LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTQuNSB5MT05LjUgeDI9NS41IHkyPTkuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NOC43LDE1LjFsLTIuNSwwLjRMNi42LDEzbDYuNC02LjRjMC42LTAuNiwxLjUtMC42LDIuMSwwYzAuNiwwLjYsMC42LDEuNSwwLDIuMUw4LjcsMTUuMXogLz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZm9ybS5zdmdcbi8vIG1vZHVsZSBpZCA9IDQzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxwYXRoIGNsYXNzPXN0MCBkPVxcXCJNMS4xLDguN0MwLjgsOC44LDAuNSw5LjIsMC41LDkuNnYzLjhjMCwwLjQsMC4zLDAuOCwwLjYsMC45bDMsMS4xYzAuMiwwLjEsMC41LDAuMSwwLjcsMGwzLTEuMVxcbiAgICBjMC40LTAuMSwwLjYtMC41LDAuNi0wLjlWOS42YzAtMC40LTAuMy0wLjgtMC42LTAuOWwtMy0xLjFjLTAuMi0wLjEtMC41LTAuMS0wLjcsMEwxLjEsOC43elxcXCIvPiA8cG9seWxpbmUgY2xhc3M9c3QwIHBvaW50cz1cXFwiMC43LDkuMSA0LjUsMTAuNSA4LjMsOS4xIFxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC41IHkxPTEwLjUgeDI9NC41IHkyPTE1LjUgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE1LjMsMi42Yy0xLDAuMy01LjgsMS45LTUuOCwxLjlMMy43LDIuNiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OS41IHkxPTQuNSB4Mj05LjUgeTI9NyAvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTMuNSw1LjVWMy4yYzAtMC40LDAuMy0wLjgsMC43LTAuOWw1LTEuN2MwLjItMC4xLDAuNC0wLjEsMC42LDBsNSwxLjdjMC40LDAuMSwwLjcsMC41LDAuNywwLjl2NS43XFxuICAgIGMwLDAuNC0wLjMsMC44LTAuNywwLjlsLTQuMywxLjRcXFwiLz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvZ2VuZXJpYy5zdmdcbi8vIG1vZHVsZSBpZCA9IDQzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxsaW5lIGNsYXNzPXN0MCB4MT02LjUgeTE9MTMuNSB4Mj05LjUgeTI9MTMuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OCB5MT0xMiB4Mj04IHkyPTE1IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU01LDE1LjVIMS41Yy0wLjYsMC0xLTAuNC0xLTF2LTEzYzAtMC42LDAuNC0xLDEtMWgxM2MwLjYsMCwxLDAuNCwxLDF2MTNjMCwwLjYtMC40LDEtMSwxSDExIC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0wLjUgeTE9NC41IHgyPTE1LjUgeTI9NC41IC8+IDxnPiA8cGF0aCBkPU0xMyw1LjhjLTAuNCwwLTAuOCwwLjMtMC44LDAuOGMwLDAuNCwwLjMsMC44LDAuOCwwLjhzMC44LTAuMywwLjgtMC44QzEzLjgsNi4xLDEzLjQsNS44LDEzLDUuOEwxMyw1Ljh6IC8+IDwvZz4gPGxpbmUgY2xhc3M9c3QwIHgxPTAuNSB5MT04LjUgeDI9MTUuNSB5Mj04LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTExIHkxPTEyLjUgeDI9MTUuNSB5Mj0xMi41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0wLjUgeTE9MTIuNSB4Mj01IHkyPTEyLjUgLz4gPGc+IDxwYXRoIGQ9TTEzLDkuN2MtMC40LDAtMC44LDAuMy0wLjgsMC44YzAsMC40LDAuMywwLjgsMC44LDAuOHMwLjgtMC4zLDAuOC0wLjhDMTMuOCwxMC4xLDEzLjQsOS43LDEzLDkuN0wxMyw5Ljd6IC8+IDwvZz4gPGc+IDxwYXRoIGQ9TTEzLDEuN2MtMC40LDAtMC44LDAuMy0wLjgsMC44YzAsMC40LDAuMywwLjgsMC44LDAuOHMwLjgtMC4zLDAuOC0wLjhDMTMuOCwyLjEsMTMuNCwxLjcsMTMsMS43TDEzLDEuN3ogLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9ncmlkLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTEzcHggdmlld0JveD1cXFwiMCAwIDE2IDEzXFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxM1xcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxsaW5lIGNsYXNzPXN0MCB4MT0xLjkgeTE9MTIuNSB4Mj0xNC40IHkyPTAuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NNiwxMS4yYzAuNywwLjIsMS4zLDAuMywyLDAuM2MyLjcsMCw1LjUtMS45LDcuMi0zLjhjMC40LTAuNCwwLjQtMS4xLDAtMS41Yy0wLjYtMC42LTEuMy0xLjMtMi0xLjggLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTkuNiwyLjdDOS4xLDIuNiw4LjUsMi41LDgsMi41Yy0yLjcsMC01LjUsMS44LTcuMiwzLjhjLTAuNCwwLjQtMC40LDEuMSwwLDEuNWMwLjUsMC41LDEuMSwxLjEsMS43LDEuNiAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NNS41LDdjMC0xLjQsMS4xLTIuNSwyLjUtMi41IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xMC41LDdMMTAuNSw3YzAsMS40LTEuMSwyLjUtMi41LDIuNSAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2hpZGRlbi5zdmdcbi8vIG1vZHVsZSBpZCA9IDQzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xMnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxMiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTIgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8Zz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT0xNS41IHgyPTMuNSB5Mj0wLjUgLz4gPHBvbHlsaW5lIGNsYXNzPXN0MCBwb2ludHM9XFxcIjAuNSwxMi41IDMuNSwxNS41IDYuNSwxMi41IFxcdFxcdFxcXCIvPiA8L2c+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTAuNSw2LjVWMWMwLTAuMi0wLjEtMC40LTAuMy0wLjRjLTAuMi0wLjEtMC40LTAuMS0wLjUsMEw4LjUsMS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT05LjUgeTE9Ni41IHgyPTExLjUgeTI9Ni41IC8+IDwvZz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9MTAgY3k9MTEgcj0xLjUgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTkuNSwxNS41YzEuMSwwLDItMC45LDItMlYxMSAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL2ludGVnZXIuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0MzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9MiBjeT0yIHI9MS41IC8+IDxjaXJjbGUgY2xhc3M9c3QwIGN4PTIgY3k9OCByPTEuNSAvPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD0yIGN5PTE0IHI9MS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT01LjUgeTE9Mi41IHgyPTE1LjUgeTI9Mi41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT01LjUgeTE9OC41IHgyPTE1LjUgeTI9OC41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT01LjUgeTE9MTQuNSB4Mj0xNS41IHkyPTE0LjUgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9saXN0LnN2Z1xuLy8gbW9kdWxlIGlkID0gNDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU0xNC41LDE1LjVoLTEzYy0wLjYsMC0xLTAuNC0xLTF2LTEzYzAtMC42LDAuNC0xLDEtMWgxM2MwLjYsMCwxLDAuNCwxLDF2MTNDMTUuNSwxNS4xLDE1LjEsMTUuNSwxNC41LDE1LjV6IC8+IDxnPiA8cG9seWxpbmUgY2xhc3M9c3QwIHBvaW50cz1cXFwiNy41LDEyIDcuNSw3IDYsOS41IDQuNSw3IDQuNSwxMiBcXHRcXHRcXFwiLz4gPC9nPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTkuNSwxMmMxLjEsMCwyLTAuOSwyLTJWOWMwLTEuMS0wLjktMi0yLTJWMTJ6IC8+IDwvZz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9tYXJrZG93bi5zdmdcbi8vIG1vZHVsZSBpZCA9IDQzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1NNC41LDEwLjVoLTNjLTAuNiwwLTEsMC40LTEsMXYzYzAsMC42LDAuNCwxLDEsMWgzYzAuNiwwLDEtMC40LDEtMXYtM0M1LjUsMTAuOSw1LjEsMTAuNSw0LjUsMTAuNXogLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTkuNSwwLjVoLTNjLTAuNiwwLTEsMC40LTEsMXYzYzAsMC42LDAuNCwxLDEsMWgzYzAuNiwwLDEtMC40LDEtMXYtM0MxMC41LDAuOSwxMC4xLDAuNSw5LjUsMC41eiAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTQuNSwxMC41aC0zYy0wLjYsMC0xLDAuNC0xLDF2M2MwLDAuNiwwLjQsMSwxLDFoM2MwLjYsMCwxLTAuNCwxLTF2LTNDMTUuNSwxMC45LDE1LjEsMTAuNSwxNC41LDEwLjV6IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0zLDEwLjV2LTFjMC0wLjYsMC40LTEsMS0xaDhjMC42LDAsMSwwLjQsMSwxdjEgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTggeTE9NS41IHgyPTggeTI9OC41IC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvcGFnZXMuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0Mzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTQuNXB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNC41XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNC41XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTcuNSwzbDcuMywwYzAuNCwwLDAuNywwLjMsMC43LDAuNnY5LjdjMCwwLjQtMC4zLDAuNi0wLjcsMC42SDEuMmMtMC40LDAtMC43LTAuMy0wLjctMC42VjMuNlxcbiAgICBDMC41LDMuMywwLjgsMywxLjIsM2wyLjMsMFxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9OCB5MT03LjUgeDI9MTMuNSB5Mj03LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTQuNSB5MT0xMC41IHgyPTEzLjUgeTI9MTAuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMi41LDNWMmMwLTAuOCwwLjctMS41LDEuNS0xLjVoMGMwLjgsMCwxLjUsMC43LDEuNSwxLjV2NC41YzAsMC42LTAuNCwxLTEsMWgwYy0wLjYsMC0xLTAuNC0xLTFWNSAvPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9wYXJ0aWFsLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCIgc3RhbmRhbG9uZT1cXFwibm9cXFwiPz4gPHN2ZyB3aWR0aD01MHB4IGhlaWdodD01MnB4IHZpZXdCb3g9XFxcIjAgMCA1MCA1MlxcXCIgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczpza2V0Y2g9aHR0cDovL3d3dy5ib2hlbWlhbmNvZGluZy5jb20vc2tldGNoL25zPiA8dGl0bGU+Mjc2IC0gUGljdHVyZSAoRmxhdCk8L3RpdGxlPiA8ZGVzYz5DcmVhdGVkIHdpdGggU2tldGNoLjwvZGVzYz4gPGRlZnM+PC9kZWZzPiA8ZyBpZD1QYWdlLTEgc3Ryb2tlPW5vbmUgc3Ryb2tlLXdpZHRoPTEgZmlsbD1ub25lIGZpbGwtcnVsZT1ldmVub2RkIHNrZXRjaDp0eXBlPU1TUGFnZT4gPGcgaWQ9SWNvbnMgc2tldGNoOnR5cGU9TVNBcnRib2FyZEdyb3VwIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKC02MDUuMDAwMDAwLCAtMTU2My4wMDAwMDApXFxcIj4gPGcgaWQ9Mjc2LS0tUGljdHVyZS0oRmxhdCkgc2tldGNoOnR5cGU9TVNMYXllckdyb3VwIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDYwNi4wMDAwMDAsIDE1NjQuMDAwMDAwKVxcXCI+IDxwYXRoIGQ9XFxcIk0wLDAgTDQ4LDAgTDQ4LDUwIEwwLDUwIEwwLDAgWlxcXCIgaWQ9RmlsbC02ODEgZmlsbD0jNDI0QTYwIHNrZXRjaDp0eXBlPU1TU2hhcGVHcm91cD48L3BhdGg+IDxwYXRoIGQ9XFxcIk0wLDAgTDQ4LDAgTDQ4LDUwIEwwLDUwIEwwLDAgWlxcXCIgaWQ9U3Ryb2tlLTY4MiBzdHJva2U9I0U4RURFRSBzdHJva2Utd2lkdGg9MiBza2V0Y2g6dHlwZT1NU1NoYXBlR3JvdXA+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMTYuNTY5LDEyLjU2OSBDMTYuNTY5LDE1LjA5MiAxNC41MjMsMTcuMTM4IDEyLDE3LjEzOCBDOS40NzcsMTcuMTM4IDcuNDMxLDE1LjA5MiA3LjQzMSwxMi41NjkgQzcuNDMxLDEwLjA0NiA5LjQ3Nyw4IDEyLDggQzE0LjUyMyw4IDE2LjU2OSwxMC4wNDYgMTYuNTY5LDEyLjU2OVxcXCIgaWQ9RmlsbC0xODY4IGZpbGw9I0YwQ0U0OSBza2V0Y2g6dHlwZT1NU1NoYXBlR3JvdXA+PC9wYXRoPiA8cGF0aCBkPVxcXCJNMCw0MCBMNDgsNDAgTDQ4LDUwIEwwLDUwIEwwLDQwIFpcXFwiIGlkPUZpbGwtMTg2OSBmaWxsPSNFOEVERUUgc2tldGNoOnR5cGU9TVNTaGFwZUdyb3VwPjwvcGF0aD4gPHBhdGggZD1cXFwiTTQ3LDMxLjExMSBMNDYsMzAgTDM0LDE5IEwyMy41LDMwLjUgTDMzLDQwIEw0Nyw0MCBMNDcsMzEuMTExXFxcIiBpZD1GaWxsLTI1NTUgZmlsbD0jMTk5MTcyIHNrZXRjaDp0eXBlPU1TU2hhcGVHcm91cD48L3BhdGg+IDxwYXRoIGQ9XFxcIk0yOC45ODMsMzUuOTgzIEwxOC4wMTcsMjUuMDE3IEwxLDQwIEwzMyw0MCBMMjguOTgzLDM1Ljk4M1xcXCIgaWQ9RmlsbC0yNTYyIGZpbGw9IzI1QUU4OCBza2V0Y2g6dHlwZT1NU1NoYXBlR3JvdXA+PC9wYXRoPiA8L2c+IDwvZz4gPC9nPiA8L3N2Zz5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3BpY3R1cmUuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTQsOC44bDEuNiwyLjNjMC4xLDAuMiwwLjMsMC4zLDAuNiwwLjNjMC4yLDAsMC40LTAuMSwwLjYtMC4zTDEyLDQuNiAvPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD04IGN5PTggcj03LjUgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9yYWRpby5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNXB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNSAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTUgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTE0LjUsMTQuNWMwLDAuNi0wLjQsMS0xLDFoLTEyYy0wLjYsMC0xLTAuNC0xLTF2LTEzYzAtMC42LDAuNC0xLDEtMWgxMGMwLjMsMCwwLjUsMC4xLDAuNywwLjNsMiwxLjlcXG4gICAgICAgIGMwLjIsMC4yLDAuMywwLjQsMC4zLDAuN1YxNC41elxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9NS41IHkxPTcuNSB4Mj01LjUgeTI9My41IC8+IDxwb2x5bGluZSBjbGFzcz1zdDAgcG9pbnRzPVxcXCIzLjUsNC41IDMuNSwzLjUgNy41LDMuNSA3LjUsNC41IFxcdFxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTAgeTE9Ni41IHgyPTExLjUgeTI9Ni41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xMCB5MT0zLjUgeDI9MTEuNSB5Mj0zLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT05LjUgeDI9MTEuNSB5Mj05LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT0xMi41IHgyPTExLjUgeTI9MTIuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC41IHkxPTcuNSB4Mj02LjUgeTI9Ny41IC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvcmVkYWN0b3Iuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsMy41aC0xM2MtMC42LDAtMS0wLjQtMS0xdi0xYzAtMC42LDAuNC0xLDEtMWgxM2MwLjYsMCwxLDAuNCwxLDF2MUMxNS41LDMuMSwxNS4xLDMuNSwxNC41LDMuNXogLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsOS41aC0xM2MtMC42LDAtMS0wLjQtMS0xdi0xYzAtMC42LDAuNC0xLDEtMWgxM2MwLjYsMCwxLDAuNCwxLDF2MUMxNS41LDkuMSwxNS4xLDkuNSwxNC41LDkuNXogLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsMTUuNWgtMTNjLTAuNiwwLTEtMC40LTEtMXYtMWMwLTAuNiwwLjQtMSwxLTFoMTNjMC42LDAsMSwwLjQsMSwxdjFDMTUuNSwxNS4xLDE1LjEsMTUuNSwxNC41LDE1LjV6IC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvcmVwbGljYXRvci5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1NMyw4YzAsMCwyLTMsNS0zczUsMyw1LDNzLTIsMy01LDNTMyw4LDMsOHogLz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk04LDkuMkw4LDkuMkM3LjMsOS4yLDYuOCw4LjcsNi44LDh2MGMwLTAuNywwLjYtMS4yLDEuMi0xLjJoMGMwLjcsMCwxLjIsMC42LDEuMiwxLjJ2MEM5LjIsOC43LDguNyw5LjIsOCw5LjJcXG4gICAgICAgIHpcXFwiLz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU0wLjUsM1YxLjVjMC0wLjYsMC40LTEsMS0xSDMgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE1LjUsM1YxLjVjMC0wLjYtMC40LTEtMS0xSDEzIC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0wLjUsMTN2MS41YzAsMC42LDAuNCwxLDEsMUgzIC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xNS41LDEzdjEuNWMwLDAuNi0wLjQsMS0xLDFIMTMgLz4gPC9nPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3JldmVhbGVyLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE1cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE1IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNSAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU0zLDMuNUgxQzAuNywzLjUsMC41LDMuMywwLjUsM1YxYzAtMC4zLDAuMi0wLjUsMC41LTAuNWgyYzAuMywwLDAuNSwwLjIsMC41LDAuNXYyQzMuNSwzLjMsMy4zLDMuNSwzLDMuNXogLz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk0zLDE1LjVIMWMtMC4zLDAtMC41LTAuMi0wLjUtMC41di0yYzAtMC4zLDAuMi0wLjUsMC41LTAuNWgyYzAuMywwLDAuNSwwLjIsMC41LDAuNXYyXFxuICAgICAgICBDMy41LDE1LjMsMy4zLDE1LjUsMywxNS41elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTE0LDMuNWgtMmMtMC4zLDAtMC41LTAuMi0wLjUtMC41VjFjMC0wLjMsMC4yLTAuNSwwLjUtMC41aDJjMC4zLDAsMC41LDAuMiwwLjUsMC41djJcXG4gICAgICAgIEMxNC41LDMuMywxNC4zLDMuNSwxNCwzLjV6XFxcIi8+IDxwYXRoIGNsYXNzPXN0MCBkPVxcXCJNMTQsMTUuNWgtMmMtMC4zLDAtMC41LTAuMi0wLjUtMC41di0yYzAtMC4zLDAuMi0wLjUsMC41LTAuNWgyYzAuMywwLDAuNSwwLjIsMC41LDAuNXYyXFxuICAgICAgICBDMTQuNSwxNS4zLDE0LjMsMTUuNSwxNCwxNS41elxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9My41IHkxPTEuNSB4Mj0xMS41IHkyPTEuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTMuNSB5MT0zLjUgeDI9MTMuNSB5Mj0xMi41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xMS41IHkxPTE0LjUgeDI9My41IHkyPTE0LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTEuNSB5MT0xMi41IHgyPTEuNSB5Mj0zLjUgLz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU00LjUsNmMwLTAuOCwwLjctMS41LDEuNS0xLjVoM2MwLjgsMCwxLjUsMC43LDEuNSwxLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTcuNSB5MT00LjUgeDI9Ny41IHkyPTExLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTUuNSB5MT0xMS41IHgyPTkuNSB5Mj0xMS41IC8+IDwvZz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9zZWN0aW9uLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwb2x5bGluZSBjbGFzcz1zdDAgcG9pbnRzPVxcXCI3LDEzIDgsMTMuNSA5LDEzIFxcdFxcXCIvPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsMTFoLTEzYy0wLjYsMC0xLTAuNC0xLTFWMS41YzAtMC42LDAuNC0xLDEtMWgxM2MwLjYsMCwxLDAuNCwxLDFWMTBDMTUuNSwxMC42LDE1LjEsMTEsMTQuNSwxMXogLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTEyLjUsMTFoLTl2Mi41YzAsMS4xLDAuOSwyLDIsMmg1YzEuMSwwLDItMC45LDItMlYxMXogLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTAuNSB5MT00IHgyPTE1LjUgeTI9NCAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MC41IHkxPTcuNSB4Mj0xNS41IHkyPTcuNSAvPiA8L2c+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvc2VsZWN0LnN2Z1xuLy8gbW9kdWxlIGlkID0gNDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU0xNS41LDEzLjVjMCwxLjEtMC45LDItMiwyIC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xMy41LDIuNWMxLjEsMCwyLDAuOSwyLDIgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTQuNSwxNS41Yy0xLjEsMC0yLTAuOS0yLTIgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTIuNSB5MT04LjUgeDI9Mi41IHkyPTEwLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTE1LjUgeTE9Ny41IHgyPTE1LjUgeTI9MTAuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTAuNSB5MT0xNS41IHgyPTcuNSB5Mj0xNS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xMC41IHkxPTIuNSB4Mj04LjUgeTI9Mi41IC8+IDwvZz4gPGc+IDxwb2x5Z29uIGNsYXNzPXN0MCBwb2ludHM9XFxcIjAuNSwwLjUgMi42LDYuMiAzLjcsMy43IDYuMiwyLjYgXFx0XFxcIi8+IDwvZz4gPHBhdGggY2xhc3M9c3QwIGQ9TTExLjUsNS41QzExLjUsNS41LDEyLDUsMTMsNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTEuNSw1LjVDMTEuNSw1LjUsMTEsNSwxMCw1IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xMS41LDEzYzAsMCwwLjUsMC41LDEuNSwwLjUgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTExLjUsMTNjMCwwLTAuNSwwLjUtMS41LDAuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MTEuNSB5MT0xMyB4Mj0xMS41IHkyPTUuNSAvPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9zbHVnLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzPXN0YXRhbWljLWxvZ28gd2lkdGg9OTAgaGVpZ2h0PTIwIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgdmlld0JveD1cXFwiMCAwIDQzOC41IDg0LjlcXFwiPiA8Zz4gPHBhdGggZmlsbD0jM0M0ODU4IGQ9XFxcIk0yLjcsNjkuMmMwLjktMS4xLDEuOC0xLjYsMy0xLjZjMS4yLDAsMi41LDAuNSwzLjcsMS40YzMuOSwyLjYsOC40LDQuMSwxMy43LDQuMWM0LjEsMCw3LjMtMS43LDcuMy01LjJcXG4gICAgICAgICAgICBjMC05LTI5LjktNC4xLTI5LjktMjQuMmMwLTEwLjgsOC45LTE2LjksMjAuMy0xNi45YzguMSwwLDE0LDIuMywxOC41LDUuMmMxLjEsMC43LDEuOCwyLjIsMS44LDMuN2MwLDAuOS0wLjIsMS43LTAuNywyLjVsLTEuNCwyXFxuICAgICAgICAgICAgYy0xLDEuNC0yLjEsMi0zLjQsMmMtMSwwLTItMC40LTMuMS0wLjljLTMuMy0xLjctNi44LTIuNi0xMC45LTIuNmMtNC4zLDAtNi45LDIuMy02LjksNC44YzAsOS4yLDI5LjksNC4yLDI5LjksMjMuN1xcbiAgICAgICAgICAgIGMwLDEwLjktOC45LDE3LjctMjIuNCwxNy43Yy04LjYsMC0xNC45LTIuNi0yMC43LTcuNmMtMS0wLjktMS40LTItMS40LTMuMWMwLTAuOSwwLjItMS44LDAuOS0yLjZMMi43LDY5LjJ6XFxcIi8+IDxwYXRoIGZpbGw9IzNDNDg1OCBkPVxcXCJNODguMyw3NWMwLjQsMC42LDAuNiwxLjQsMC42LDIuMWMwLDEuNi0wLjcsMy4yLTIuMSwzLjljLTQuMiwyLjUtOC40LDMuNy0xMy45LDMuN1xcbiAgICAgICAgICAgIGMtMTIuNSwwLTE3LjItOC4xLTE3LjItMjIuM1YxNy4zYzAtMi41LDIuMS00LjYsNC42LTQuNmg1YzIuNSwwLDQuNiwyLjEsNC42LDQuNnYxMC44aDEzLjNjMi41LDAsNC42LDIuMSw0LjYsNC42djQuMlxcbiAgICAgICAgICAgIGMwLDIuNS0yLjEsNC42LTQuNiw0LjZINjkuOXYyMC4yYzAsNiwyLDEwLDYuNiwxMGMxLjUsMCwyLjgtMC4yLDMuOS0wLjZzMi0wLjYsMi44LTAuNmMxLjYsMCwyLjgsMC43LDMuOCwyLjVMODguMyw3NXpcXFwiLz4gPHBhdGggZmlsbD0jM0M0ODU4IGQ9XFxcIk05Ni45LDY3LjNjMC0xMi4yLDktMTgsMjAuMi0xOGM0LjksMCw5LjgsMS42LDEyLjUsMy42YzAtMC42LDAtMS4xLDAtMS43YzAtOC4xLTIuNi0xMi41LTEwLjMtMTIuNVxcbiAgICAgICAgICAgIGMtNC4yLDAtNi45LDAuNi05LjUsMS41Yy0wLjcsMC4yLTEuNSwwLjQtMi4yLDAuNGMtMS44LDAtMy4zLTAuOS00LjItMi42bC0wLjctMS41Yy0wLjItMC42LTAuNS0xLjItMC41LTJjMC0xLjYsMS4xLTMuMiwyLjYtMy45XFxuICAgICAgICAgICAgYzQuOC0yLjIsMTAuMy0zLjcsMTYtMy43YzE2LjQsMCwyMi4xLDguNCwyMi4xLDIzVjc5YzAsMi41LTIuMSw0LjYtNC42LDQuNmgtMy4yYy0yLjUsMC00LjYtMi4xLTQuNi00LjZ2LTEuOFxcbiAgICAgICAgICAgIGMtMyw0LjItOC45LDcuMS0xNi40LDcuMUMxMDQuMiw4NC4zLDk2LjksNzgsOTYuOSw2Ny4zeiBNMTI5LjYsNjEuNmMtMi41LTEuOC01LjctMi43LTkuNy0yLjdjLTQuNywwLTguOSwyLjItOC45LDYuOVxcbiAgICAgICAgICAgIGMwLDQuMiwzLjQsNi41LDcuOSw2LjVjNS45LDAsOS0yLjYsMTAuNy01VjYxLjZ6XFxcIi8+IDxwYXRoIGZpbGw9IzNDNDg1OCBkPVxcXCJNMTg4LjgsNzVjMC40LDAuNiwwLjYsMS40LDAuNiwyLjFjMCwxLjYtMC43LDMuMi0yLjEsMy45Yy00LjIsMi41LTguNCwzLjctMTMuOSwzLjdcXG4gICAgICAgICAgICBjLTEyLjUsMC0xNy4yLTguMS0xNy4yLTIyLjNWMTcuM2MwLTIuNSwyLjEtNC42LDQuNi00LjZoNWMyLjUsMCw0LjYsMi4xLDQuNiw0LjZ2MTAuOGgxMy4zYzIuNSwwLDQuNiwyLjEsNC42LDQuNnY0LjJcXG4gICAgICAgICAgICBjMCwyLjUtMi4xLDQuNi00LjYsNC42aC0xMy4zdjIwLjJjMCw2LDIsMTAsNi42LDEwYzEuNSwwLDIuOC0wLjIsMy45LTAuNnMyLTAuNiwyLjgtMC42YzEuNiwwLDIuOCwwLjcsMy44LDIuNUwxODguOCw3NXpcXFwiLz4gPHBhdGggZmlsbD0jM0M0ODU4IGQ9XFxcIk0xOTcuNCw2Ny4zYzAtMTIuMiw5LTE4LDIwLjItMThjNC45LDAsOS44LDEuNiwxMi41LDMuNmMwLTAuNiwwLTEuMSwwLTEuN2MwLTguMS0yLjYtMTIuNS0xMC4zLTEyLjVcXG4gICAgICAgICAgICBjLTQuMiwwLTYuOSwwLjYtOS41LDEuNWMtMC43LDAuMi0xLjUsMC40LTIuMiwwLjRjLTEuOCwwLTMuMy0wLjktNC4yLTIuNmwtMC43LTEuNWMtMC4yLTAuNi0wLjUtMS4yLTAuNS0yYzAtMS42LDEuMS0zLjIsMi42LTMuOVxcbiAgICAgICAgICAgIGM0LjgtMi4yLDEwLjMtMy43LDE2LTMuN2MxNi40LDAsMjIuMSw4LjQsMjIuMSwyM1Y3OWMwLDIuNS0yLjEsNC42LTQuNiw0LjZoLTMuMmMtMi41LDAtNC42LTIuMS00LjYtNC42di0xLjhcXG4gICAgICAgICAgICBjLTMsNC4yLTguOSw3LjEtMTYuNCw3LjFDMjA0LjcsODQuMywxOTcuNCw3OCwxOTcuNCw2Ny4zeiBNMjMwLjEsNjEuNmMtMi41LTEuOC01LjctMi43LTkuNy0yLjdjLTQuNywwLTguOSwyLjItOC45LDYuOVxcbiAgICAgICAgICAgIGMwLDQuMiwzLjQsNi41LDcuOSw2LjVjNS45LDAsOS0yLjYsMTAuNy01VjYxLjZ6XFxcIi8+IDxwYXRoIGZpbGw9IzNDNDg1OCBkPVxcXCJNMjcyLjEsMzQuM2MzLjktNC40LDEwLjUtNy4xLDE3LjMtNy4xYzguNSwwLDE0LjEsMy44LDE2LjEsOC45YzMuOS01LjIsMTAuMS04LjksMTguNy04LjlcXG4gICAgICAgICAgICBjMTAuMSwwLDE3LjcsNSwxNy43LDIwLjJWNzljMCwyLjUtMi4xLDQuNi00LjYsNC42aC01Yy0yLjUsMC00LjYtMi4xLTQuNi00LjZWNTFjMC02LjktMi44LTEwLjYtOS41LTEwLjZjLTUuMywwLTkuNSwyLjYtMTEuNCw2LjRcXG4gICAgICAgICAgICBjMCwwLjksMC4xLDIuOCwwLjEsNC4xdjI4YzAsMi41LTIuMSw0LjYtNC42LDQuNmgtNWMtMi41LDAtNC42LTIuMS00LjYtNC42VjUwLjFjMC01LjgtMy4yLTkuNi05LjItOS42Yy01LDAtOS4xLDIuMi0xMS42LDUuOVY3OVxcbiAgICAgICAgICAgIGMwLDIuNS0yLjEsNC42LTQuNiw0LjZoLTVjLTIuNSwwLTQuNi0yLjEtNC42LTQuNlYzMi43YzAtMi41LDIuMS00LjYsNC42LTQuNmg1YzIuNSwwLDQuNiwyLjEsNC42LDQuNlYzNC4zelxcXCIvPiA8cGF0aCBmaWxsPSMzQzQ4NTggZD1cXFwiTTM3My45LDguMmMwLDUuNy00LjEsOC45LTguMSw4LjljLTQuOCwwLTguOS0zLjItOC45LTguOWMwLTUsNC4xLTguMiw4LjktOC4yQzM2OS44LDAsMzczLjksMy4yLDM3My45LDguMnpcXG4gICAgICAgICAgICAgTTM2OCwyOC4yYzIuNSwwLDQuNiwyLjEsNC42LDQuNlY3OWMwLDIuNS0yLjEsNC42LTQuNiw0LjZoLTVjLTIuNSwwLTQuNi0yLjEtNC42LTQuNlYzMi43YzAtMi41LDIuMS00LjYsNC42LTQuNkgzNjh6XFxcIi8+IDxwYXRoIGZpbGw9IzNDNDg1OCBkPVxcXCJNNDI3LjMsNDIuM2MtMy4zLTEuNi02LjItMi4yLTkuOC0yLjJjLTcuOSwwLTE1LjQsNi0xNS40LDE1LjdjMCw5LjgsNy42LDE1LjksMTYsMTUuOWM0LjQsMCw3LjUtMS4xLDEwLjctMy4yXFxuICAgICAgICAgICAgYzEtMC42LDItMSwzLTFjMS41LDAsMi44LDAuNiwzLjgsMS44bDIuMSwyLjZjMC42LDAuNiwwLjksMS42LDAuOSwyLjVjMCwxLjUtMC42LDMuMS0xLjcsMy45Yy02LjYsNS4zLTEyLjUsNi41LTE5LjQsNi41XFxuICAgICAgICAgICAgYy0xOC4zLDAtMzAuNC0xMS42LTMwLjQtMjljMC0xNi4xLDExLjgtMjksMjguNy0yOWM3LjQsMCwxMi44LDEuMiwxOC4yLDQuMmMxLjQsMC43LDIuMiwyLjUsMi4yLDQuMWMwLDAuNy0wLjEsMS40LTAuNSwybC0xLjgsMy4yXFxuICAgICAgICAgICAgYy0xLDEuNi0yLjUsMi42LTQuMiwyLjZDNDI4LjksNDIuOCw0MjguMSw0Mi43LDQyNy4zLDQyLjN6XFxcIi8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvc3RhdGFtaWMtbG9nby5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMCB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9OTUuOXB4IGhlaWdodD03Ni40cHggdmlld0JveD1cXFwiMCAwIDk1LjkgNzYuNFxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgOTUuOSA3Ni40XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxnPiA8cGF0aCBmaWxsPTNDNDg1OCBkPVxcXCJNMjYuNSw3My4xYzAsMi4xLTEuNywzLjMtMy45LDMuM2gtMi41Yy03LjcsMC0xMi0zLjQtMTItMTIuMVY1MC4xYzAtNS4zLTIuNS03LjYtNS4yLTguNFxcclxcbiAgICAgICAgQzAuOCw0MS4xLDAsNDAsMCwzOC4yYzAtMS45LDAuNy0yLjksMi45LTMuNmMyLjYtMSw1LjItMy42LDUuMi05LjRWMTIuN0M4LjEsNC41LDExLjEsMCwyMC41LDBoMi4zYzIuMiwwLDMuNywxLjMsMy43LDMuMlxcclxcbiAgICAgICAgYzAsMi4yLTEuNCwzLjUtMy42LDMuNWgtMC43Yy01LjEsMC02LjksMi4yLTYuOSw4LjR2MTIuOGMwLDUuOC0yLjcsOS43LTYuNywxMC4yYzMuOCwwLjQsNi43LDMuMyw2LjcsMTAuMnYxM1xcclxcbiAgICAgICAgYzAsNS45LDIuMiw4LjMsNy4yLDguM0MyNS4xLDY5LjcsMjYuNSw3MC45LDI2LjUsNzMuMXpcXFwiLz4gPHBhdGggZmlsbD0zQzQ4NTggZD1cXFwiTTMzLjcsNDhjMC42LTAuOCwxLjMtMS4yLDIuMi0xLjJjMC45LDAsMS44LDAuNCwyLjcsMWMyLjksMS45LDYuMSwzLDEwLDNjMywwLDUuMy0xLjMsNS4zLTMuOFxcclxcbiAgICAgICAgYzAtNi42LTIxLjgtMy0yMS44LTE3LjdDMzIsMjEuNCwzOC41LDE3LDQ2LjgsMTdjNS45LDAsMTAuMiwxLjcsMTMuNSwzLjhjMC44LDAuNSwxLjMsMS42LDEuMywyLjdjMCwwLjYtMC4yLDEuMy0wLjUsMS44bC0xLDEuNFxcclxcbiAgICAgICAgYy0wLjcsMS0xLjUsMS40LTIuNSwxLjRjLTAuNywwLTEuNC0wLjMtMi4yLTAuNmMtMi40LTEuMy00LjktMS45LTgtMS45Yy0zLjEsMC01LDEuNy01LDMuNWMwLDYuNywyMS44LDMuMSwyMS44LDE3LjNcXHJcXG4gICAgICAgIGMwLDgtNi41LDEyLjktMTYuNCwxMi45Yy02LjMsMC0xMC45LTEuOS0xNS4xLTUuNmMtMC43LTAuNi0xLTEuNC0xLTIuMmMwLTAuNiwwLjItMS4zLDAuNi0xLjlMMzMuNyw0OHpcXFwiLz4gPHBhdGggZmlsbD0zQzQ4NTggZD1cXFwiTTY5LjQsNzMuMWMwLTIuMiwxLjQtMy40LDQtMy40YzQuOSwwLDcuMi0yLjMsNy4yLTguM3YtMTNjMC02LjksMy05LjgsNi43LTEwLjJjLTQtMC41LTYuNy00LjQtNi43LTEwLjJWMTUuMVxcclxcbiAgICAgICAgYzAtNi4xLTEuOC04LjQtNi45LTguNEg3M2MtMi4yLDAtMy42LTEuMy0zLjYtMy41YzAtMiwxLjUtMy4yLDMuNy0zLjJoMi4zYzkuMywwLDEyLjQsNC41LDEyLjQsMTIuN3YxMi41YzAsNS44LDIuNiw4LjQsNS4yLDkuNFxcclxcbiAgICAgICAgYzIuMiwwLjcsMi45LDEuNywyLjksMy42YzAsMS44LTAuOCwyLjktMi45LDMuNWMtMi43LDAuOC01LjIsMy4xLTUuMiw4LjR2MTQuMWMwLDguNy00LjMsMTIuMS0xMiwxMi4xaC0yLjVcXHJcXG4gICAgICAgIEM3MS4xLDc2LjQsNjkuNCw3NS4xLDY5LjQsNzMuMXpcXFwiLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy9zdGF0YW1pYy1tYXJrLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE1cHggdmlld0JveD1cXFwiMCAwIDE2IDE1XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNVxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxjaXJjbGUgY2xhc3M9c3QwIGN4PTEyLjYgY3k9Mi42IHI9Mi4xIC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xNC4xIHkxPTQuMSB4Mj0xNS41IHkyPTUuNSAvPiA8L2c+IDxwYXRoIGNsYXNzPXN0MCBkPU04LjUsNC41aC03Yy0wLjYsMC0xLTAuNC0xLTF2LTFjMC0wLjYsMC40LTEsMS0xaDcgLz4gPGc+IDxwYXRoIGQ9TTEuOCw2LjVDMS4zLDYuNSwxLDYuOCwxLDcuMlMxLjMsOCwxLjgsOHMwLjgtMC4zLDAuOC0wLjhTMi4yLDYuNSwxLjgsNi41TDEuOCw2LjV6IC8+IDwvZz4gPGc+IDxsaW5lIGNsYXNzPXN0MCB4MT00IHkxPTcuNSB4Mj0xMiB5Mj03LjUgLz4gPC9nPiA8Zz4gPHBhdGggZD1NMS44LDEwQzEuMywxMCwxLDEwLjMsMSwxMC44czAuMywwLjgsMC44LDAuOHMwLjgtMC4zLDAuOC0wLjhTMi4yLDEwLDEuOCwxMEwxLjgsMTB6IC8+IDwvZz4gPGc+IDxsaW5lIGNsYXNzPXN0MCB4MT00IHkxPTExIHgyPTEyIHkyPTExIC8+IDwvZz4gPGc+IDxwYXRoIGQ9TTEuOCwxMy41Yy0wLjQsMC0wLjgsMC4zLTAuOCwwLjhTMS4zLDE1LDEuOCwxNXMwLjgtMC4zLDAuOC0wLjhTMi4yLDEzLjUsMS44LDEzLjVMMS44LDEzLjV6IC8+IDwvZz4gPGc+IDxsaW5lIGNsYXNzPXN0MCB4MT00IHkxPTE0LjUgeDI9MTIgeTI9MTQuNSAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3N1Z2dlc3Quc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTVweCBoZWlnaHQ9MTVweCB2aWV3Qm94PVxcXCIwIDAgMTUgMTVcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE1IDE1XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTEzLjUsMTQuNWgtMTJjLTAuNiwwLTEtMC40LTEtMXYtMTJjMC0wLjYsMC40LTEsMS0xaDEyYzAuNiwwLDEsMC40LDEsMXYxMkMxNC41LDE0LjEsMTQuMSwxNC41LDEzLjUsMTQuNXogLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTAuNSB5MT00LjUgeDI9MTQuNSB5Mj00LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTcuNSB5MT0xNC41IHgyPTcuNSB5Mj00LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTAuNSB5MT05LjUgeDI9MTQuNSB5Mj05LjUgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy90YWJsZS5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNXB4IGhlaWdodD0xNXB4IHZpZXdCb3g9XFxcIjAgMCAxNSAxNVxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTUgMTVcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTIuMyw0LjZMMS45LDcuMmMwLDAuMywwLjEsMC41LDAuMywwLjdsNi4zLDYuM2MwLjQsMC40LDEsMC40LDEuNCwwbDQuMi00LjJjMC40LTAuNCwwLjQtMSwwLTEuNEw3LjgsMi4xXFxuICAgICAgICBDNy42LDEuOSw3LjMsMS44LDcuMSwxLjhMNC41LDIuMlxcXCIvPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD01LjEgY3k9NS4xIHI9MSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC40IHkxPTQuNCB4Mj0wLjUgeTI9MC41IC8+IDwvZz4gPGxpbmUgY2xhc3M9c3QwIHgxPTcuMSB5MT03LjEgeDI9OC42IHkyPTUuNyAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OC42IHkxPTguNiB4Mj0xMCB5Mj03LjEgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTEwIHkxPTEwIHgyPTExLjQgeTI9OC42IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT01LjcgeTE9OC42IHgyPTguNiB5Mj0xMS40IC8+IDwvc3ZnPiBcXHUwMDAwIFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGFicy5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNXB4IGhlaWdodD0xNXB4IHZpZXdCb3g9XFxcIjAgMCAxNSAxNVxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTUgMTVcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTIuMyw0LjZMMS45LDcuMmMwLDAuMywwLjEsMC41LDAuMywwLjdsNi4zLDYuM2MwLjQsMC40LDEsMC40LDEuNCwwbDQuMi00LjJjMC40LTAuNCwwLjQtMSwwLTEuNEw3LjgsMi4xXFxuICAgICAgICBDNy42LDEuOSw3LjMsMS44LDcuMSwxLjhMNC41LDIuMlxcXCIvPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD01LjEgY3k9NS4xIHI9MSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC40IHkxPTQuNCB4Mj0wLjUgeTI9MC41IC8+IDwvZz4gPGxpbmUgY2xhc3M9c3QwIHgxPTcuMSB5MT03LjEgeDI9OC42IHkyPTUuNyAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OC42IHkxPTguNiB4Mj0xMCB5Mj03LjEgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTEwIHkxPTEwIHgyPTExLjQgeTI9OC42IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT01LjcgeTE9OC42IHgyPTguNiB5Mj0xMS40IC8+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RhZ3Muc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTRweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTQgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE0IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTExLjUsMC41aC05QzIuMiwwLjUsMiwwLjcsMiwxdjJjMCwwLjMsMC4yLDAuNSwwLjUsMC41aDlDMTEuOCwzLjUsMTIsMy4zLDEyLDNWMUMxMiwwLjcsMTEuOCwwLjUsMTEuNSwwLjV6IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT03IHkxPTMuNSB4Mj03IHkyPTEyLjUgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTIsMTIuNXYtM2MwLTAuNiwwLjQtMSwxLTFoOGMwLjYsMCwxLDAuNCwxLDF2MyAvPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD0yIGN5PTE0IHI9MS41IC8+IDxjaXJjbGUgY2xhc3M9c3QwIGN4PTcgY3k9MTQgcj0xLjUgLz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9MTIgY3k9MTQgcj0xLjUgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy90YXhvbm9teS5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNXB4IGhlaWdodD0xNHB4IHZpZXdCb3g9XFxcIjAgMCAxNSAxNFxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTUgMTRcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTEzLjUsMC41aC0xMmMtMC42LDAtMSwwLjQtMSwxdjExYzAsMC42LDAuNCwxLDEsMWgxMmMwLjYsMCwxLTAuNCwxLTF2LTExQzE0LjUsMC45LDE0LjEsMC41LDEzLjUsMC41eiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9MC41IHkxPTMuNSB4Mj0xNC41IHkyPTMuNSAvPiA8L2c+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1NNiw5LjVIM0MyLjcsOS41LDIuNSw5LjMsMi41LDlWNmMwLTAuMywwLjItMC41LDAuNS0wLjVoM2MwLjMsMCwwLjUsMC4yLDAuNSwwLjV2M0M2LjUsOS4zLDYuMyw5LjUsNiw5LjV6IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0yLjUgeTE9MTEuNSB4Mj02LjUgeTI9MTEuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEyLDExLjVIOWMtMC4zLDAtMC41LTAuMi0wLjUtMC41VjZjMC0wLjMsMC4yLTAuNSwwLjUtMC41aDNjMC4zLDAsMC41LDAuMiwwLjUsMC41djVcXG4gICAgICAgICAgICBDMTIuNSwxMS4zLDEyLjMsMTEuNSwxMiwxMS41elxcXCIvPiA8bGluZSBjbGFzcz1zdDAgeDE9OC41IHkxPTguNSB4Mj0xMi41IHkyPTguNSAvPiA8L2c+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGVtcGxhdGUuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCBjbGFzcz1zdHJva2UtY3VycmVudCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsMTEuNWgtMTNjLTAuNiwwLTEtMC40LTEtMXYtNWMwLTAuNiwwLjQtMSwxLTFoMTNjMC42LDAsMSwwLjQsMSwxdjVDMTUuNSwxMS4xLDE1LjEsMTEuNSwxNC41LDExLjV6IC8+IDxnPiA8bGluZSBjbGFzcz1zdDAgeDE9MTEuNSB5MT0xMi41IHgyPTExLjUgeTI9My41IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU04LjUsMTUuNWMxLjcsMCwzLTEuMywzLTNjMCwxLjcsMS4zLDMsMywzIC8+IDxwYXRoIGNsYXNzPXN0MCBkPU04LjUsMC41YzEuNywwLDMsMS4zLDMsM2MwLTEuNywxLjMtMywzLTMgLz4gPC9nPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RleHQuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE0LjUsMTUuNWgtMTNjLTAuNiwwLTEtMC40LTEtMXYtMTNjMC0wLjYsMC40LTEsMS0xaDEzYzAuNiwwLDEsMC40LDEsMXYxM0MxNS41LDE1LjEsMTUuMSwxNS41LDE0LjUsMTUuNXogLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTYuNSB5MT0zLjUgeDI9MTIuNSB5Mj0zLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT05LjUgeDI9MTIuNSB5Mj05LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT02LjUgeDI9MTIuNSB5Mj02LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT0xMi41IHgyPTguNSB5Mj0xMi41IC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGV4dGFyZWEuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8bGluZSBjbGFzcz1zdDAgeDE9NS41IHkxPTE1LjUgeDI9MTAuNSB5Mj0xNS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT04IHkxPTEzLjUgeDI9OCB5Mj0xNS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0wLjUgeTE9MTEgeDI9MTUuNSB5Mj0xMSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTQuNSwyYzAuNiwwLDEsMC40LDEsMXY5LjVjMCwwLjYtMC40LDEtMSwxaC0xM2MtMC42LDAtMS0wLjQtMS0xVjNjMC0wLjYsMC40LTEsMS0xIC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0zLjUsOVYxLjVjMC0wLjYsMC40LTEsMS0xaDdjMC42LDAsMSwwLjQsMSwxVjkgLz4gPHJlY3QgeD01LjUgeT00LjUgY2xhc3M9c3QwIHdpZHRoPTIgaGVpZ2h0PTIgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTMuNSB5MT0yLjUgeDI9MTIuNSB5Mj0yLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTkuNSB5MT00LjUgeDI9MTAuNSB5Mj00LjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTkuNSB5MT02IHgyPTEwLjUgeTI9NiAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NS41IHkxPTguNSB4Mj0xMC41IHkyPTguNSAvPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy90aGVtZS5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNXB4IGhlaWdodD0xNXB4IHZpZXdCb3g9XFxcIjAgMCAxNSAxNVxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTUgMTVcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD03LjUgY3k9Ny41IHI9NyAvPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD03LjUgY3k9Ny41IHI9MSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9Ny41IHkxPTYuNSB4Mj03LjUgeTI9MyAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OC4yIHkxPTguMiB4Mj0xMCB5Mj0xMCAvPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3RpbWUuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTFweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTFcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDExXFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU0wLjUsMmMwLTAuOCwwLjctMS41LDEuNS0xLjVoNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9NC41IHkxPTAuNSB4Mj00LjUgeTI9MTAuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9Mi41IHkxPTEwLjUgeDI9Ni41IHkyPTEwLjUgLz4gPC9nPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTksMC41aDVjMC44LDAsMS41LDAuNywxLjUsMS41IC8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xMS41IHkxPTAuNSB4Mj0xMS41IHkyPTEwLjUgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTkuNSB5MT0xMC41IHgyPTEzLjUgeTI9MTAuNSAvPiA8L2c+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdGl0bGUuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTZweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDE2XFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxlOmV2ZW5vZGQ7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk0xMi4yLDdIMy44QzIsNywwLjUsNS41LDAuNSwzLjhsMCwwQzAuNSwyLDIsMC41LDMuOCwwLjVoOC41YzEuOCwwLDMuMiwxLjUsMy4yLDMuMmwwLDBDMTUuNSw1LjUsMTQsNywxMi4yLDdcXG4gICAgICAgIHpcXFwiLz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk0xMi4yLDE1LjVIMy44Yy0xLjgsMC0zLjItMS41LTMuMi0zLjJsMCwwQzAuNSwxMC41LDIsOSwzLjgsOWg4LjVjMS44LDAsMy4yLDEuNSwzLjIsMy4ybDAsMFxcbiAgICAgICAgQzE1LjUsMTQsMTQsMTUuNSwxMi4yLDE1LjV6XFxcIi8+IDxjaXJjbGUgY2xhc3M9c3QwIGN4PTMuOCBjeT0zLjggcj0xLjIgLz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9MTIuMiBjeT0xMi4yIHI9MS4yIC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdG9nZ2xlLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxnPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD04IGN5PTExLjIgcj0xLjggLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTEwLjgsMTUuNWMtMC40LTEuMi0xLjUtMi0yLjgtMmMtMS4zLDAtMi40LDAuOC0yLjgsMiAvPiA8L2c+IDxnPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD0zLjMgY3k9Mi4yIHI9MS44IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU02LjEsNi41Yy0wLjQtMS4yLTEuNS0yLTIuOC0yYy0xLjMsMC0yLjQsMC44LTIuOCwySDYuMXogLz4gPC9nPiA8Zz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9MTIuNyBjeT0yLjIgcj0xLjggLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE1LjUsNi41Yy0wLjQtMS4yLTEuNS0yLTIuOC0yYy0xLjMsMC0yLjQsMC44LTIuOCwySDE1LjV6IC8+IDwvZz4gPHBhdGggY2xhc3M9c3QwIGQ9TTIuNSw4LjVWMTFjMCwwLjgsMC43LDEuNSwxLjUsMS41aDAuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTMuNSw4LjVWMTFjMCwwLjgtMC43LDEuNS0xLjUsMS41aC0wLjUgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy91c2VyLWdyb3Vwcy5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8Zz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9My41IGN5PTIuNSByPTIgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTUsMTUuNWwwLjUtNWgxdi0yYzAtMS43LTEuMy0zLTMtM2MtMS43LDAtMywxLjMtMywzdjJoMWwwLjUsNUg1eiAvPiA8L2c+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEzLDMuNWgyYzAuMywwLDAuNS0wLjIsMC41LTAuNVYxYzAtMC4zLTAuMi0wLjUtMC41LTAuNWgtMmMtMC4zLDAtMC41LDAuMi0wLjUsMC41djJcXG4gICAgICAgICAgICBDMTIuNSwzLjMsMTIuNywzLjUsMTMsMy41elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEzLDkuNWgyYzAuMywwLDAuNS0wLjIsMC41LTAuNVY3YzAtMC4zLTAuMi0wLjUtMC41LTAuNWgtMmMtMC4zLDAtMC41LDAuMi0wLjUsMC41djJcXG4gICAgICAgICAgICBDMTIuNSw5LjMsMTIuNyw5LjUsMTMsOS41elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEzLDE1LjVoMmMwLjMsMCwwLjUtMC4yLDAuNS0wLjV2LTJjMC0wLjMtMC4yLTAuNS0wLjUtMC41aC0yYy0wLjMsMC0wLjUsMC4yLTAuNSwwLjV2MlxcbiAgICAgICAgICAgIEMxMi41LDE1LjMsMTIuNywxNS41LDEzLDE1LjV6XFxcIi8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xMi41IHkxPTcuNSB4Mj04LjUgeTI9Ny41IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xMi41LDEuNWgtMWMtMC42LDAtMSwwLjQtMSwxdjEwYzAsMC42LDAuNCwxLDEsMWgxIC8+IDwvZz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy91c2VyLXJvbGVzLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxnPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD04IGN5PTExLjIgcj0xLjggLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTEwLjgsMTUuNWMtMC40LTEuMi0xLjUtMi0yLjgtMmMtMS4zLDAtMi40LDAuOC0yLjgsMiAvPiA8L2c+IDxnPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD0zLjMgY3k9Mi4yIHI9MS44IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU02LjEsNi41Yy0wLjQtMS4yLTEuNS0yLTIuOC0yYy0xLjMsMC0yLjQsMC44LTIuOCwySDYuMXogLz4gPC9nPiA8Zz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9MTIuNyBjeT0yLjIgcj0xLjggLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTE1LjUsNi41Yy0wLjQtMS4yLTEuNS0yLTIuOC0yYy0xLjMsMC0yLjQsMC44LTIuOCwySDE1LjV6IC8+IDwvZz4gPHBhdGggY2xhc3M9c3QwIGQ9TTIuNSw4LjVWMTFjMCwwLjgsMC43LDEuNSwxLjUsMS41aDAuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTMuNSw4LjVWMTFjMCwwLjgtMC43LDEuNS0xLjUsMS41aC0wLjUgLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy91c2VyX2dyb3Vwcy5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB2ZXJzaW9uPTEuMSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB4bWxuczp4bGluaz1odHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIHhtbG5zOmE9aHR0cDovL25zLmFkb2JlLmNvbS9BZG9iZVNWR1ZpZXdlckV4dGVuc2lvbnMvMy4wLyB4PTBweCB5PTBweCB3aWR0aD0xNnB4IGhlaWdodD0xNnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTYgMTZcXFwiIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPHN0eWxlIHR5cGU9dGV4dC9jc3M+LnN0MHtmaWxsOm5vbmU7c3Ryb2tlOiMwMDA7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjEwfTwvc3R5bGU+IDxkZWZzPiA8L2RlZnM+IDxnPiA8Zz4gPGNpcmNsZSBjbGFzcz1zdDAgY3g9My41IGN5PTIuNSByPTIgLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTUsMTUuNWwwLjUtNWgxdi0yYzAtMS43LTEuMy0zLTMtM2MtMS43LDAtMywxLjMtMywzdjJoMWwwLjUsNUg1eiAvPiA8L2c+IDxnPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEzLDMuNWgyYzAuMywwLDAuNS0wLjIsMC41LTAuNVYxYzAtMC4zLTAuMi0wLjUtMC41LTAuNWgtMmMtMC4zLDAtMC41LDAuMi0wLjUsMC41djJcXG4gICAgICAgICAgICBDMTIuNSwzLjMsMTIuNywzLjUsMTMsMy41elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEzLDkuNWgyYzAuMywwLDAuNS0wLjIsMC41LTAuNVY3YzAtMC4zLTAuMi0wLjUtMC41LTAuNWgtMmMtMC4zLDAtMC41LDAuMi0wLjUsMC41djJcXG4gICAgICAgICAgICBDMTIuNSw5LjMsMTIuNyw5LjUsMTMsOS41elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEzLDE1LjVoMmMwLjMsMCwwLjUtMC4yLDAuNS0wLjV2LTJjMC0wLjMtMC4yLTAuNS0wLjUtMC41aC0yYy0wLjMsMC0wLjUsMC4yLTAuNSwwLjV2MlxcbiAgICAgICAgICAgIEMxMi41LDE1LjMsMTIuNywxNS41LDEzLDE1LjV6XFxcIi8+IDxsaW5lIGNsYXNzPXN0MCB4MT0xMi41IHkxPTcuNSB4Mj04LjUgeTI9Ny41IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xMi41LDEuNWgtMWMtMC42LDAtMSwwLjQtMSwxdjEwYzAsMC42LDAuNCwxLDEsMWgxIC8+IDwvZz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy91c2VyX3JvbGVzLnN2Z1xuLy8gbW9kdWxlIGlkID0gNDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxnPiA8Y2lyY2xlIGNsYXNzPXN0MCBjeD01LjUgY3k9Ny4yIHI9MS44IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0yLjUsMTIuNWMwLTEuNywxLjMtMywzLTNjMS43LDAsMywxLjMsMywzSDIuNXogLz4gPC9nPiA8bGluZSBjbGFzcz1zdDAgeDE9OS41IHkxPTcuNSB4Mj0xMi41IHkyPTcuNSAvPiA8bGluZSBjbGFzcz1zdDAgeDE9OS41IHkxPTkuNSB4Mj0xMy41IHkyPTkuNSAvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTE0LjUsMy41aC0xM2MtMC42LDAtMSwwLjQtMSwxdjEwYzAsMC42LDAuNCwxLDEsMWgyYzAtMC42LDAuNC0xLDEtMWMwLjYsMCwxLDAuNCwxLDFoNWMwLTAuNiwwLjQtMSwxLTFcXG4gICAgICAgIGMwLjYsMCwxLDAuNCwxLDFoMmMwLjYsMCwxLTAuNCwxLTF2LTEwQzE1LjUsMy45LDE1LjEsMy41LDE0LjUsMy41elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1NMTUuNSwxLjVjMC0wLjYtMC40LTEtMS0xaC0xM2MtMC42LDAtMSwwLjQtMSwxIC8+IDwvZz4gPC9zdmc+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9zdmcvdXNlcnMuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0NjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayB4bWxuczphPWh0dHA6Ly9ucy5hZG9iZS5jb20vQWRvYmVTVkdWaWV3ZXJFeHRlbnNpb25zLzMuMC8geD0wcHggeT0wcHggd2lkdGg9MTZweCBoZWlnaHQ9MTNweCB2aWV3Qm94PVxcXCIwIDAgMTYgMTNcXFwiIHN0eWxlPVxcXCJlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDE2IDEzXFxcIiB4bWw6c3BhY2U9cHJlc2VydmU+IDxzdHlsZSB0eXBlPXRleHQvY3NzPi5zdDB7ZmlsbDpub25lO3N0cm9rZTojMDAwO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMH08L3N0eWxlPiA8ZGVmcz4gPC9kZWZzPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9XFxcIk02LjksNC42Yy0wLjItMC4xLTAuNC0wLjEtMC42LDBDNi4xLDQuNyw2LDQuOSw2LDUuMXYyLjhjMCwwLjIsMC4xLDAuNCwwLjMsMC41YzAuMiwwLjEsMC40LDAuMSwwLjYsMFxcbiAgICAgICAgbDIuNy0xLjNDOS44LDcuMSwxMCw2LjgsMTAsNi41UzkuOCw1LjksOS42LDUuOEw2LjksNC42elxcXCIvPiA8cGF0aCBjbGFzcz1zdDAgZD1cXFwiTTEyLjIsMTIuNUgzLjhjLTAuNCwwLTAuOC0wLjMtMC44LTAuOFYxLjNjMC0wLjQsMC4zLTAuOCwwLjgtMC44aDguNGMwLjQsMCwwLjgsMC4zLDAuOCwwLjh2MTAuNFxcbiAgICAgICAgQzEzLDEyLjIsMTIuNywxMi41LDEyLjIsMTIuNXpcXFwiLz4gPHBhdGggY2xhc3M9c3QwIGQ9TTEuMywyQzAuOSwyLDAuNSwyLjQsMC41LDIuOHY3LjRjMCwwLjQsMC40LDAuOCwwLjgsMC44IC8+IDxwYXRoIGNsYXNzPXN0MCBkPU0xNC43LDJjMC40LDAsMC44LDAuNCwwLjgsMC44djcuNGMwLDAuNC0wLjQsMC44LTAuOCwwLjggLz4gPC9nPiA8L3N2Zz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL3N2Zy92aWRlby5zdmdcbi8vIG1vZHVsZSBpZCA9IDQ2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1zdHJva2UtY3VycmVudCB3aWR0aD0xNnB4IGhlaWdodD0xMnB4IHZpZXdCb3g9XFxcIjAgMCAxNiAxMlxcXCIgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sbnM6eGxpbms9aHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaz4gPGcgc3Ryb2tlPW5vbmUgc3Ryb2tlLXdpZHRoPTEgZmlsbD1ub25lIGZpbGwtcnVsZT1ldmVub2RkIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD4gPHBhdGggZD1cXFwiTTE1LjQ5OTcsNC41IEw3Ljk5OTcsNC41IEM2LjYxODcsNC41IDUuNDk5Nyw1LjYxOSA1LjQ5OTcsN1xcXCIgc3Ryb2tlPWN1cnJlbnRDb2xvcj48L3BhdGg+IDxwb2x5bGluZSBzdHJva2U9Y3VycmVudENvbG9yIHBvaW50cz1cXFwiMTMuNDk5NyAyLjUgMTUuNDk5NyA0LjUgMTMuNDk5NyA2LjVcXFwiPjwvcG9seWxpbmU+IDxwYXRoIGQ9XFxcIk0xMS40OTk3LDEuNSBDMTEuNDk5NywwLjk0NyAxMS4wNTI3LDAuNSAxMC40OTk3LDAuNSBMMS40OTk3LDAuNSBDMC45NDc3LDAuNSAwLjQ5OTcsMC45NDcgMC40OTk3LDEuNSBMMC40OTk3LDEwLjUgQzAuNDk5NywxMS4wNTMgMC45NDc3LDExLjUgMS40OTk3LDExLjUgTDEwLjQ5OTcsMTEuNSBDMTEuMDUyNywxMS41IDExLjQ5OTcsMTEuMDUzIDExLjQ5OTcsMTAuNSBMMTEuNDk5Nyw3LjVcXFwiIHN0cm9rZT1jdXJyZW50Q29sb3I+PC9wYXRoPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3Zpc2l0LnN2Z1xuLy8gbW9kdWxlIGlkID0gNDY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbG5zOnhsaW5rPWh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsgeG1sbnM6YT1odHRwOi8vbnMuYWRvYmUuY29tL0Fkb2JlU1ZHVmlld2VyRXh0ZW5zaW9ucy8zLjAvIHg9MHB4IHk9MHB4IHdpZHRoPTE2cHggaGVpZ2h0PTE2cHggdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIiBzdHlsZT1cXFwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxNiAxNlxcXCIgeG1sOnNwYWNlPXByZXNlcnZlPiA8c3R5bGUgdHlwZT10ZXh0L2Nzcz4uc3Qwe2ZpbGw6bm9uZTtzdHJva2U6IzAwMDtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MTB9PC9zdHlsZT4gPGRlZnM+IDwvZGVmcz4gPGc+IDxwYXRoIGNsYXNzPXN0MCBkPU0xNC41LDE1LjVoLTEzYy0wLjYsMC0xLTAuNC0xLTF2LTEzYzAtMC42LDAuNC0xLDEtMWgxM2MwLjYsMCwxLDAuNCwxLDF2MTNDMTUuNSwxNS4xLDE1LjEsMTUuNSwxNC41LDE1LjV6IC8+IDxnPiA8Zz4gPHBhdGggY2xhc3M9c3QwIGQ9TTQuNSw3djEuNWMwLDAuNiwwLjQsMSwxLDFzMS0wLjQsMS0xVjcgLz4gPGxpbmUgY2xhc3M9c3QwIHgxPTUuNSB5MT05LjUgeDI9NS41IHkyPTEyIC8+IDwvZz4gPGc+IDxwb2x5bGluZSBjbGFzcz1zdDAgcG9pbnRzPVxcXCIxMS41LDEyIDExLjUsNyAxMCw5LjUgOC41LDcgOC41LDEyXFxcIi8+IDwvZz4gPC9nPiA8L2c+IDwvc3ZnPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvc3ZnL3lhbWwuc3ZnXG4vLyBtb2R1bGUgaWQgPSA0Njlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IDpjbGFzcz1cXFwiWyAnc3ZnLWljb24nLCB7ICd1c2luZy1kaXYnOiB0eXBlID09PSAnZGl2JywgJ3VzaW5nLXN2Zyc6IHR5cGUgPT09ICdzdmcnIH0gXVxcXCIgdi1odG1sPWh0bWw+PC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvU3ZnSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDQ3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9GaWxlSWNvbi52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZpbGVJY29uLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRmlsZUljb24udnVlXG4vLyBtb2R1bGUgaWQgPSA0NzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxzdmctaWNvbiBjbGFzcz1cImZpbGUtaWNvblwiIDp0eXBlPVwidHlwZVwiIDpuYW1lPVwibmFtZVwiPjwvc3ZnLWljb24+XG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczoge1xuICAgICAgICBleHRlbnNpb246IFN0cmluZyxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3N2Zyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIG5hbWUoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZm9sZGVyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmb2xkZXInO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnN3onOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3BrZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAncmFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICd0YXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3Rhci56Zyc6XG4gICAgICAgICAgICAgICAgY2FzZSAneic6XG4gICAgICAgICAgICAgICAgY2FzZSAnemlwJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmaWxlLWFyY2hpdmUnO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnYWFjJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhaWYnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NkYSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxhYyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbTRhJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtcDMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21wNGEnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21wYSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnb2dnJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtaWQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21pZGknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3dhdic6XG4gICAgICAgICAgICAgICAgY2FzZSAnd21hJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmaWxlLWF1ZGlvJztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2RvYyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG9jeCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmlsZS1kb2MnO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAneGxzJzpcbiAgICAgICAgICAgICAgICBjYXNlICd4bHN4JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmaWxlLWV4Y2VsJztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2pzb24nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ZpbGUtanNvbic7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdhaSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZXBzJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpbmRiJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwc2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NrZXRjaCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmlsZS1sYXllcmVkJztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3BkZic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmlsZS1wZGYnO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAna2V5JzpcbiAgICAgICAgICAgICAgICBjYXNlICdvZHAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3Bwcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAncHB0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdwcHR4JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmaWxlLXByZXNlbnRhdGlvbic7XG5cbiAgICAgICAgICAgICAgICBjYXNlICczZzInOlxuICAgICAgICAgICAgICAgIGNhc2UgJzNncCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnYXZpJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmbHYnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2gyNjQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ200dic6XG4gICAgICAgICAgICAgICAgY2FzZSAnbXZrJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtcDQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21wZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbXBlZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW92JzpcbiAgICAgICAgICAgICAgICBjYXNlICdybSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc3dmJzpcbiAgICAgICAgICAgICAgICBjYXNlICd2b2InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3dtdic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmlsZS12aWRlbyc7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd4bWwnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ZpbGUteG1sJztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2JtcCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZ2lmJzpcbiAgICAgICAgICAgICAgICBjYXNlICdpY28nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2pwZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnanBlZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAncG5nJzpcbiAgICAgICAgICAgICAgICBjYXNlICd0aWZmJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdwaWN0dXJlJztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmlsZS1nZW5lcmljJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEZpbGVJY29uLnZ1ZT81ZTc5YmQ0MCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPHN2Zy1pY29uIGNsYXNzPWZpbGUtaWNvbiA6dHlwZT10eXBlIDpuYW1lPW5hbWU+PC9zdmctaWNvbj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9GaWxlSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDQ3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCdzd2VldGFsZXJ0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vbGlzdC50ZW1wbGF0ZS5odG1sJyksXG5cbiAgICBwcm9wczoge1xuICAgICAgICBlbmRwb2ludDogU3RyaW5nLFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9LFxuICAgICAgICBub19yZXN1bHRzX2hlYWRpbmc6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdUaGlzIGdyb3VwIGhhcyBubyBpdGVtcy4nXG4gICAgICAgIH0sXG4gICAgICAgIG5vX3Jlc3VsdHNfc3ViaGVhZGluZzoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgbm9fcmVzdWx0c19idXR0b246IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdOZXcgSXRlbSdcbiAgICAgICAgfSxcbiAgICAgICAgbmV3X3VybDoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlTXVsdGlDb25maXJtYXRpb246e1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJ1lvdSBhcmUgYWJvdXQgdG8gZGVsZXRlIG11bHRpcGxlIGVudHJpZXMuJ1xuICAgICAgICB9LFxuICAgICAgICBtb2RlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICBkZWZhdWx0OiBcIm5vcm1hbFwiXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICAnZmllbGQtc3RhdHVzJzogcmVxdWlyZSgnLi9maWVsZC1zdGF0dXMnKSxcbiAgICAgICAgJ2ZpZWxkLWRlZmF1bHQnOiByZXF1aXJlKCcuL2ZpZWxkLWRlZmF1bHQnKVxuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgbGlzdDogeyByb3dzOiBbXSwgYWN0aW9uczoge30gfSxcbiAgICAgICAgICAgIHJlb3JkZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgc2VhcmNoOiBudWxsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzQWN0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0LmFjdGlvbnMubGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrZWRFbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Qucm93cy5maWx0ZXIoZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkuY2hlY2tlZDtcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS51dWlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWxsRW50cmllc0NoZWNrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5yb3dzLmxlbmd0aCA9PT0gdGhpcy5jaGVja2VkRW50cmllcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBkZWxldGVJdGVtOiBmdW5jdGlvbihpdGVtLCBpbmRleCwgZW5kcG9pbnQsIGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBzd2FsKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJBcmUgeW91IHN1cmU/XCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJZb3UgYXJlIGFib3V0IHRvIGRlbGV0ZSB0aGlzIGVudHJ5LlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzIEknbSBzdXJlLlwiLFxuICAgICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiBmYWxzZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kaHR0cC5kZWxldGUoZW5kcG9pbnQsIHt1dWlkOiBpdGVtLnV1aWR9LCBmdW5jdGlvbihkYXRhLCBzdGF0dXMsIHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhbChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRGVsZXRlZCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiWW91ciBlbnRyeSBoYXMgYmVlbiBkZWxldGVkLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWNjZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5saXN0LnJvd3MuJHJlbW92ZShpbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVNdWx0aXBsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBzZWxmLiRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBzd2FsKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJBcmUgeW91IHN1cmU/XCIsXG4gICAgICAgICAgICAgICAgdGV4dDogc2VsZi5kZWxldGVNdWx0aUNvbmZpcm1hdGlvbixcbiAgICAgICAgICAgICAgICB0eXBlOiBcIndhcm5pbmdcIixcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcyBJJ20gc3VyZS5cIixcbiAgICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2VcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuJGh0dHAucG9zdChzZWxmLmxpc3QuYWN0aW9ucy5kZWxldGUuZW5kcG9pbnQsIHt1dWlkczogc2VsZi5jaGVja2VkRW50cmllc30sIGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgcmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICBzd2FsKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJEZWxldGVkIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJZb3VyIGVudHJpZXMgaGF2ZSBiZWVuIGRlbGV0ZWQuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIlxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjaGVja2VkIGl0ZW1zXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGlzdC5yb3dzID0gc2VsZi5saXN0LnJvd3MuZmlsdGVyKGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkuY2hlY2tlZCA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja0FsbEVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHN0YXR1cyA9ICEgdGhpcy5hbGxFbnRyaWVzQ2hlY2tlZDtcblxuICAgICAgICAgICAgXy5lYWNoKHRoaXMubGlzdC5yb3dzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgICAgIGVudHJ5LmNoZWNrZWQgPSBzdGF0dXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvZ2dsZVJlb3JkZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnJlb3JkZXJpbmcgPSAhIHRoaXMucmVvcmRlcmluZztcblxuICAgICAgICAgICAgJChcIi5zb3J0YWJsZSB0Ym9keVwiKS5zb3J0YWJsZSh7XG4gICAgICAgICAgICAgICAgYXhpczogXCJ5XCIsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0OiAxNzUsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwicGxhY2Vob2xkZXJcIixcbiAgICAgICAgICAgICAgICBmb3JjZVBsYWNlaG9sZGVyU2l6ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgICAgICAgICAgICAgICB1aS5pdGVtLmRhdGEoJ3N0YXJ0JywgdWkuaXRlbS5pbmRleCgpKVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHVpLml0ZW0uZGF0YSgnc3RhcnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCAgID0gdWkuaXRlbS5pbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGlzdC5yb3dzLnNwbGljZShlbmQsIDAsIHNlbGYubGlzdC5yb3dzLnNwbGljZShzdGFydCwgMSlbMF0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSkuZGlzYWJsZVNlbGVjdGlvbigpO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgc2F2ZU9yZGVyOiBmdW5jdGlvbihlbmRwb2ludCwgZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBvcmRlciA9ICQubWFwKHRoaXMubGlzdC5yb3dzLCBmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udXVpZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoZW5kcG9pbnQsIHt1dWlkczogb3JkZXJ9LCBmdW5jdGlvbihkYXRhLCBzdGF0dXMsIHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRW50cmllcyBSZW9yZGVyZWQnKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJlb3JkZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzb2x2ZUNvbXBvbmVudDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoJ2ZpZWxkLScgKyBrZXkgaW4gdGhpcy4kb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmaWVsZC0nICsga2V5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gJ2ZpZWxkLWRlZmF1bHQnO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kaHR0cC5nZXQodGhpcy5lbmRwb2ludCwgZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCByZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLmxpc3QgPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2xpc3QuanMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdj4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9bG9hZGluZz4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fSA8L2Rpdj4gPGRpdiB2LWlmPVxcXCIhbG9hZGluZyAmJiBsaXN0LnJvd3MgJiYgIWxpc3Qucm93cy5sZW5ndGhcXFwiPiA8ZGl2IGNsYXNzPW5vLXJlc3VsdHM+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tZG9jdW1lbnRzXFxcIj48L3NwYW4+IDxoMj57eyBub19yZXN1bHRzX2hlYWRpbmcgfX08L2gyPiA8aDMgdi1pZj1ub19yZXN1bHRzX3N1YmhlYWRpbmc+e3sgbm9fcmVzdWx0c19zdWJoZWFkaW5nIH19PC9oMz4gPGEgaHJlZj1cXFwie3sgbmV3X3VybCB9fVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tbGdcXFwiPnt7IG5vX3Jlc3VsdHNfYnV0dG9uIH19PC9hPiA8L2Rpdj4gPC9kaXY+IDxkaXYgdi1pZj1cXFwiIWxvYWRpbmcgJiYgbGlzdC5yb3dzICYmIGxpc3Qucm93cy5sZW5ndGhcXFwiIGNsYXNzPWFjdGlvbnM+IDxkaXYgY2xhc3M9YWN0aW9ucy1jb250cm9scyB2LWlmPWhhc0FjdGlvbnM+IDxpbnB1dCB0eXBlPWNoZWNrYm94IGlkPWNoZWNrYm94LWFsbCA6Y2hlY2tlZD1hbGxFbnRyaWVzQ2hlY2tlZCB2LW9uOmNsaWNrPWNoZWNrQWxsRW50cmllcz4gPGxhYmVsIGZvcj1jaGVja2JveC1hbGw+PC9sYWJlbD4gPHRlbXBsYXRlIHYtaWY9bGlzdC5hY3Rpb25zLmRlbGV0ZT4gPGEgOmhyZWY9bGlzdC5hY3Rpb25zLmRlbGV0ZS5lbmRwb2ludCBjbGFzcz1idG4gdi1vbjpjbGljaz1kZWxldGVNdWx0aXBsZT4ge3sgdHJhbnNsYXRlKCdjcC5kZWxldGUnKSB9fSA8L2E+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWlmPWxpc3QuYWN0aW9ucy5yZW9yZGVyPiA8YSBocmVmPVxcXCJcXFwiIHYtb246Y2xpY2s9dG9nZ2xlUmVvcmRlcigkZXZlbnQpIGNsYXNzPWJ0biB2LXNob3c9XFxcIiEgcmVvcmRlcmluZ1xcXCI+e3sgdHJhbnNsYXRlKCdjcC5yZW9yZGVyJykgfX08L2E+IDxhIGhyZWY9XFxcIlxcXCIgdi1vbjpjbGljaz1cXFwic2F2ZU9yZGVyKGxpc3QuYWN0aW9ucy5yZW9yZGVyLmVuZHBvaW50LCAkZXZlbnQpXFxcIiBjbGFzcz1idG4gdi1zaG93PXJlb3JkZXJpbmc+e3sgdHJhbnNsYXRlKCdjcC5zYXZlX29yZGVyJykgfX08L2E+IDwvdGVtcGxhdGU+IDwvZGl2PiA8aW5wdXQgdHlwZT10ZXh0IDpwbGFjZWhvbGRlcj1cXFwiJ1NlYXJjaCAnICsgdHlwZVxcXCIgdi1vbjprZXlkb3duLmVzYz1yZXNldCB2LW1vZGVsPXNlYXJjaCBuYW1lPXF1ZXJ5IGNsYXNzPVxcXCJzZWFyY2ggcHVsbC1yaWdodFxcXCI+IDwvZGl2PiA8dGFibGUgdi1pZj1cXFwiIWxvYWRpbmcgJiYgbGlzdC5yb3dzICYmIGxpc3Qucm93cy5sZW5ndGhcXFwiIGNsYXNzPVxcXCJzb3J0YWJsZSBjb250cm9sXFxcIj4gPHRoZWFkPiA8dHI+IDx0aCBjbGFzcz1jaGVja2JveC1jb2wgdi1pZj1cXFwiaGFzQWN0aW9ucyB8fCByZW9yZGVyaW5nXFxcIj48L3RoPiA8dGggdi1pZj1oYXNTdGF0dXM+e3sgdHJhbnNsYXRlX2Nob2ljZSgnY3Auc3RhdHVzZXMnLCAxKSB9fTwvdGg+IDx0aCB2LWZvcj1cXFwia2V5IGluIGxpc3QuY29sdW1uc1xcXCIgOmNsYXNzPVxcXCInY29sdW1uLScgKyBrZXlcXFwiPiB7eyBrZXkgfX0gPC90aD4gPHRoIGNsYXNzPWNvbHVtbi1hY3Rpb25zPnt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmFjdGlvbnMnLCAyKSB9fTwvdGg+IDwvdHI+IDwvdGhlYWQ+IDx0Ym9keT4gPHRyIHYtZm9yPVxcXCJlbnRyeSBpbiBsaXN0LnJvd3MgfCBmaWx0ZXJCeSBzZWFyY2hcXFwiIHN0eWxlPWJhY2tncm91bmQ6I2ZmZj4gPHRkIGNsYXNzPWNoZWNrYm94LWNvbCB2LWlmPVxcXCJoYXNBY3Rpb25zIHx8IHJlb3JkZXJpbmdcXFwiPiA8ZGl2IHYtc2hvdz1cXFwiISByZW9yZGVyaW5nXFxcIj4gPGlucHV0IHR5cGU9Y2hlY2tib3ggOmlkPVxcXCInY2hlY2tib3gtJyArICRpbmRleFxcXCIgdi1tb2RlbD1lbnRyeS5jaGVja2VkPiA8bGFiZWwgOmZvcj1cXFwiJ2NoZWNrYm94LScgKyAkaW5kZXhcXFwiPjwvbGFiZWw+IDwvZGl2PiA8ZGl2IGNsYXNzPWRyYWctaGFuZGxlIHYtc2hvdz1yZW9yZGVyaW5nPiA8aSBjbGFzcz1cXFwiZmEgZmEtYmFyc1xcXCI+PC9pPiA8L2Rpdj4gPC90ZD4gPHRkIHYtZm9yPVxcXCJrZXkgaW4gbGlzdC5jb2x1bW5zXFxcIiA6Y2xhc3M9XFxcIidjb2x1bW4tJyArIGtleVxcXCI+IDxjb21wb25lbnQgOmlzPXJlc29sdmVDb21wb25lbnQoa2V5KSA6ZW50cnk9ZW50cnkgOnR5cGU9a2V5IDpwcmltYXJ5PWxpc3QucHJpbWFyeT4gPC9jb21wb25lbnQ+IDwvdGQ+IDx0ZCBjbGFzcz1jb2x1bW4tYWN0aW9ucz4gPGRpdiBjbGFzcz1idG4tZ3JvdXA+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1oYXNwb3B1cD10cnVlIGFyaWEtZXhwYW5kZWQ9ZmFsc2U+IDxpIGNsYXNzPVxcXCJpY29uIGljb24tZG90cy10aHJlZS12ZXJ0aWNhbFxcXCI+PC9pPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnU+IDxsaSB2LWlmPWxpc3QuYWN0aW9ucz4gPGEgaHJlZj1cXFwiXFxcIj4ge3sgdHJhbnNsYXRlKCdjcC52aWV3JykgfX0gPC9hPiA8L2xpPiA8bGkgdi1pZj1saXN0LmFjdGlvbnMuZGVsZXRlIGNsYXNzPXdhcm5pbmc+IDxhIGhyZWY9XFxcIlxcXCIgdi1vbjpjbGljaz1cXFwiZGVsZXRlSXRlbShlbnRyeSwgJGluZGV4LCBsaXN0LmFjdGlvbnMuZGVsZXRlLmVuZHBvaW50LCAkZXZlbnQpXFxcIj4ge3sgbGlzdC5hY3Rpb25zLmRlbGV0ZS5sYWJlbCB9fSA8L2E+IDwvbGk+IDwvdWw+IDwvZGl2PiA8L3RkPiA8L3RyPiA8L3Rib2R5PiA8L3RhYmxlPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbGlzdC50ZW1wbGF0ZS5odG1sXG4vLyBtb2R1bGUgaWQgPSA0NzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcHJvcHM6IFsnZW50cnknLCAna2V5JyxcbiAgICAgICAgJ3R5cGUnLCAncHJpbWFyeScsICdpcyddLCAvLyB0aGVzZSBwcmV2ZW50IHdhcm5pbmdzIGluIGFscGhhXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBzdGF0dXNDbGFzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRoaXMuZW50cnkucHVibGlzaGVkID8gJ2xpdmUnIDogJ2hpZGRlbic7XG5cbiAgICAgICAgICAgIHJldHVybiAnc3RhdHVzIHN0YXR1cy0nICsgcztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0ZW1wbGF0ZTogJzxzcGFuIDpjbGFzcz1cInN0YXR1c0NsYXNzXCI+PC9zcGFuPidcblxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGQtc3RhdHVzLmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcHJvcHM6IFsnZW50cnknLCAndHlwZScsICdwcmltYXJ5J10sXG5cbiAgICB0ZW1wbGF0ZTogJycgK1xuICAgICAgICAnPGEgOmhyZWY9XCJlbnRyeS5wdWJsaXNoX3VybFwiIHYtaWY9XCJwcmltYXJ5ID09PSB0eXBlXCI+e3sgZW50cnlbdHlwZV0gfX08L2E+JyArXG4gICAgICAgICc8dGVtcGxhdGUgdi1pZj1cInByaW1hcnkgIT09IHR5cGVcIj57eyBlbnRyeVt0eXBlXSB9fTwvdGVtcGxhdGU+J1xuXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZC1kZWZhdWx0LmpzIiwicmVxdWlyZSgnc3dlZXRhbGVydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHR5cGU6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiBudWxsIH0sXG4gICAgICAgIHRpdGxlOiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogbnVsbCB9LFxuICAgICAgICB0aW1lcjogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6IG51bGwgfSxcbiAgICAgICAgdGV4dDogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6IG51bGwgfSxcbiAgICAgICAgYnV0dG9uOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN3YWwuc2V0RGVmYXVsdHMoeyBjb25maXJtQnV0dG9uQ29sb3I6ICcjNzQ4ODg1JyB9KTtcblxuICAgICAgICAvLyBAVVg6IFdlIG1pZ2h0IG5vdCBldmVuIG5lZWQvd2FudCB0aGUgYnV0dG9uIHdoZW4gYXV0by10aW1pbmcgb3V0LlxuICAgICAgICAvLyBpZiAodGhpcy50aW1lcikgdGhpcy5idXR0b24gPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSBcImNvbmZpcm1cIikge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGl0bGUsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0LFxuICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLiBEbyBpdC5cIixcbiAgICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudGl0bGUsXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0LFxuICAgICAgICAgICAgICAgIHRpbWVyOiB0aGlzLnRpbWVyLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdGhpcy5idXR0b25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvYWxlcnQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuL2ZpZWxkcy1idWlsZGVyLnRlbXBsYXRlLmh0bWwnKSxcblxuICAgIHByb3BzOiBbXG4gICAgICAgICdkYXRhJyxcbiAgICAgICAgJ2NvbmZpZycsXG4gICAgICAgICduYW1lJyxcbiAgICAgICAgJ2ZpZWxkcycsXG4gICAgICAgICdmaWVsZHR5cGVzJyxcbiAgICAgICAgJ3Jvb3QnXG4gICAgXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VsZWN0ZWRGaWVsZDogbnVsbFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaGFzRmllbGRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkcyAmJiB0aGlzLmZpZWxkcy5sZW5ndGg7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VsZWN0ZWRGaWVsZENvbmZpZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEZpZWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZmllbGRzW3RoaXMuc2VsZWN0ZWRGaWVsZF0udHlwZTtcbiAgICAgICAgICAgIHZhciBmaWVsZHR5cGUgPSBfLmZpbmRXaGVyZSh0aGlzLmZpZWxkdHlwZXMsIHsgbmFtZTogdHlwZSB9KTtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZHR5cGUuY29uZmlnO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGFkZEZpZWxkOiBmdW5jdGlvbihmaWVsZHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZHNMZW5ndGggPSB0aGlzLmZpZWxkcy5sZW5ndGggfHwgMDtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IGZpZWxkc0xlbmd0aCArIDE7XG5cbiAgICAgICAgICAgIHZhciB0bXAgPSBfLmZpbmRXaGVyZSh0aGlzLmZpZWxkdHlwZXMsIHsgbmFtZTogZmllbGR0eXBlIH0pO1xuICAgICAgICAgICAgdmFyIGZpZWxkID0gJC5leHRlbmQoe30sIHRtcCk7XG5cbiAgICAgICAgICAgIGZpZWxkLnR5cGUgPSBmaWVsZC5uYW1lO1xuICAgICAgICAgICAgZmllbGQubmFtZSA9ICdmaWVsZF8nICsgY291bnQ7XG4gICAgICAgICAgICBmaWVsZC5pZCA9ICdmaWVsZF8nICsgY291bnQ7XG4gICAgICAgICAgICBmaWVsZC5kaXNwbGF5ID0gJ0ZpZWxkICcgKyBjb3VudDtcbiAgICAgICAgICAgIGZpZWxkLmluc3RydWN0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICBmaWVsZC5pc05ldyA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGUgZmllbGQuY29uZmlnO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmxhYmVsO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmNhbkJlVmFsaWRhdGVkO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmNhbkJlTG9jYWxpemVkO1xuICAgICAgICAgICAgZGVsZXRlIGZpZWxkLmNhbkhhdmVEZWZhdWx0O1xuXG4gICAgICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ3RpdGxlJykge1xuICAgICAgICAgICAgICAgIC8vIFRpdGxlIGZpZWxkIGdvZXMgZmlyc3Qgd2l0aCBwcmVkZWZpbmVkIHZhbHVlc1xuICAgICAgICAgICAgICAgIGZpZWxkLmRpc3BsYXkgPSB0cmFuc2xhdGUoJ2NwLnRpdGxlJyk7XG4gICAgICAgICAgICAgICAgZmllbGQubmFtZSA9ICd0aXRsZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHMudW5zaGlmdChmaWVsZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXIgZmllbGRzIGdvIHRvIHRoZSBlbmQuXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkID0gY291bnQgLSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdmaWVsZC1hZGRlZCcsIGZpZWxkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZWxlY3RGaWVsZDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy50YWIgPSAnZWRpdCc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlRmllbGQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmllbGQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnZmllbGQtZGVsZXRlZCcsIHRoaXMuZmllbGRzW2luZGV4XS5pZCk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNvcnRGaWVsZHM6IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkcy5zcGxpY2UodG8sIDAsIHRoaXMuZmllbGRzLnNwbGljZShmcm9tLCAxKVswXSk7XG4gICAgICAgICAgICB0aGlzLmVuc3VyZVRpdGxlSXNGaXJzdCgpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZW5zdXJlVGl0bGVJc0ZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IF8uaW5kZXhPZihzZWxmLmZpZWxkcywgXy5maW5kV2hlcmUoc2VsZi5maWVsZHMsIHsgbmFtZTogJ3RpdGxlJyB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gdGl0bGUsIGRvIG5vdGhpbmcuXG4gICAgICAgICAgICBpZiAodGl0bGUgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiB0aXRsZSBpc24ndCBmaXJzdCwgbWFrZSBpdCBzby5cbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkc1swXS5uYW1lICE9PSAndGl0bGUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0RmllbGRzKHRpdGxlLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0aGlzLmZpZWxkcyB8fCBbXTtcbiAgICAgICAgdGhpcy5yb290ID0gQm9vbGVhbih0aGlzLnJvb3QgfHwgZmFsc2UpO1xuICAgICAgICB0aGlzLmVuc3VyZVRpdGxlSXNGaXJzdCgpO1xuICAgIH1cblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL2ZpZWxkcy1idWlsZGVyLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9ZmllbGRzLWJ1aWxkZXI+IDxmaWVsZHNldC1maWVsZHMgdi1zaG93PWhhc0ZpZWxkcyA6ZmllbGRzLnN5bmM9ZmllbGRzIDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgOnNlbGVjdGVkLWZpZWxkLnN5bmM9c2VsZWN0ZWRGaWVsZCA6ZmllbGR0eXBlLWNvbmZpZz1zZWxlY3RlZEZpZWxkQ29uZmlnIDpvbi1zZWxlY3Q9c2VsZWN0RmllbGQgOm9uLWRlbGV0ZT1kZWxldGVGaWVsZCA6b24tc29ydD1zb3J0RmllbGRzIDpyb290PXJvb3Q+IDwvZmllbGRzZXQtZmllbGRzPiA8ZmllbGR0eXBlLXNlbGVjdG9yIDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgQGZpZWxkLXNlbGVjdGVkPWFkZEZpZWxkPiA8L2ZpZWxkdHlwZS1zZWxlY3Rvcj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvZmllbGRzLWJ1aWxkZXIudGVtcGxhdGUuaHRtbFxuLy8gbW9kdWxlIGlkID0gNDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZpZWxkcy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZpZWxkcy52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvRmllbGRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgOmNsYXNzPVwiW1xuICAgICAgICAnc2VjdGlvbi1maWVsZHMnLFxuICAgICAgICBjbGFzc2VzXG4gICAgXVwiPlxuICAgICAgICA8ZmllbGRzZXQtZmllbGRcbiAgICAgICAgICAgIHYtZm9yPVwiKGksIGYpIGluIGZpZWxkc1wiXG4gICAgICAgICAgICB2LXJlZjpmaWVsZHNcbiAgICAgICAgICAgIDpmaWVsZC5zeW5jPVwiZlwiXG4gICAgICAgICAgICA6ZmllbGR0eXBlcz1cImZpZWxkdHlwZXNcIlxuICAgICAgICAgICAgOnNlY3Rpb249XCJzZWN0aW9uXCJcbiAgICAgICAgICAgIDppcy1maXJzdC1maWVsZD1cImkgPT09IDBcIlxuICAgICAgICAgICAgOmlzLWxhc3QtZmllbGQ9XCJpID09PSBmaWVsZHMubGVuZ3RoLTFcIlxuICAgICAgICAgICAgOnBhcmVudC1rZXk9XCJwYXJlbnRLZXlcIlxuICAgICAgICAgICAgQHJlbW92ZWQ9XCJyZW1vdmUoaSlcIlxuICAgICAgICA+PC9maWVsZHNldC1maWVsZD5cblxuICAgICAgICA8ZmllbGR0eXBlLXNlbGVjdG9yXG4gICAgICAgICAgICA6ZmllbGR0eXBlcz1cImZpZWxkdHlwZXNcIlxuICAgICAgICAgICAgOnNob3c9XCJpc0FkZGluZ1wiXG4gICAgICAgICAgICA6YWxsb3ctdGl0bGU9XCJhbGxvd0FkZGluZ1RpdGxlRmllbGRcIlxuICAgICAgICAgICAgOmFsbG93LXNsdWc9XCJhbGxvd0FkZGluZ1NsdWdGaWVsZFwiXG4gICAgICAgICAgICA6YWxsb3ctZGF0ZT1cImFsbG93QWRkaW5nRGF0ZUZpZWxkXCJcbiAgICAgICAgICAgIEBzZWxlY3RlZD1cImFkZFwiXG4gICAgICAgICAgICBAY2xvc2VkPVwidGhpcy4kZW1pdCgnc2VsZWN0b3ItY2xvc2VkJylcIlxuICAgICAgICA+PC9maWVsZHR5cGUtc2VsZWN0b3I+XG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgRmllbGRzZXRGaWVsZCBmcm9tICcuL0ZpZWxkLnZ1ZSc7XG5pbXBvcnQgeyBTb3J0YWJsZSB9IGZyb20gJ0BzaG9waWZ5L2RyYWdnYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHsgRmllbGRzZXRGaWVsZCB9LFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZmllbGRzOiB7fSxcbiAgICAgICAgc2VjdGlvbjoge30sXG4gICAgICAgIHBhcmVudEtleToge30sXG4gICAgICAgIGZpZWxkdHlwZXM6IHt9LFxuICAgICAgICBjbGFzc2VzOiB7fSxcbiAgICAgICAgaXNBZGRpbmc6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBpc1F1aWNrQWRkaW5nOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGlzUm9vdExldmVsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC4kZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWN0aW9uLWxheW91dCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFsbG93QWRkaW5nVGl0bGVGaWVsZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzUm9vdExldmVsICYmICFfLnBsdWNrKHRoaXMuZmllbGRzLCAnbmFtZScpLmluY2x1ZGVzKCd0aXRsZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFsbG93QWRkaW5nU2x1Z0ZpZWxkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNSb290TGV2ZWwgJiYgIV8ucGx1Y2sodGhpcy5maWVsZHMsICduYW1lJykuaW5jbHVkZXMoJ3NsdWcnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxvd0FkZGluZ0RhdGVGaWVsZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzUm9vdExldmVsICYmICFfLnBsdWNrKHRoaXMuZmllbGRzLCAnbmFtZScpLmluY2x1ZGVzKCdkYXRlJyk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGRzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvcnRhYmxlKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzb3J0YWJsZSgpIHtcbiAgICAgICAgICAgIC8vIFRoZSByb290IGxldmVsIGZpZWxkcyBoYXZlIHRoZWlyIG93biBzb3J0YWJsZSBoYW5kbGVyXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHRoZXkgY2FuIGJlIGRyYWdnZWQgYmV0d2VlbiBzZWN0aW9ucywgZXRjLlxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSb290TGV2ZWwpIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy4kZWw7XG4gICAgICAgICAgICBjb25zdCBzb3J0YWJsZUZpZWxkcyA9IG5ldyBTb3J0YWJsZShjb250YWluZXIsIHtcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGAuc2VjdGlvbi1maWVsZC0tJHt0aGlzLnBhcmVudEtleX1gLFxuICAgICAgICAgICAgICAgIGhhbmRsZTogYC5maWVsZC1kcmFnLWhhbmRsZS0tJHt0aGlzLnBhcmVudEtleX1gLFxuICAgICAgICAgICAgICAgIGFwcGVuZFRvOiBjb250YWluZXIsXG4gICAgICAgICAgICAgICAgbWlycm9yOiB7IGNvbnN0cmFpbkRpbWVuc2lvbnM6IHRydWUgfSxcbiAgICAgICAgICAgIH0pLm9uKCdzb3J0YWJsZTpzdG9wJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHMuc3BsaWNlKGUubmV3SW5kZXgsIDAsIHRoaXMuZmllbGRzLnNwbGljZShlLm9sZEluZGV4LCAxKVswXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGQoZmllbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZmllbGRzIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSBmaWVsZHMubGVuZ3RoICsgMTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpZWxkIGlzIGEgbWV0YSBmaWVsZCBpdCB3aWxsIGhhdmUgdGhlIG5hbWUsIGlkLFxuICAgICAgICAgICAgLy8gYW5kIGRpc3BsYXkga2V5cyBhbHJlYWR5IHBvcHVsYXRlZCBhdCB0aGlzIHBvaW50LlxuICAgICAgICAgICAgaWYgKCEgZmllbGQuaXNNZXRhKSB7XG4gICAgICAgICAgICAgICAgZmllbGQubmFtZSA9ICdmaWVsZF8nICsgY291bnQ7XG4gICAgICAgICAgICAgICAgZmllbGQuaWQgPSAnZmllbGRfJyArIGNvdW50O1xuICAgICAgICAgICAgICAgIGZpZWxkLmRpc3BsYXkgPSAnRmllbGQgJyArIGNvdW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgICAgICAgICAgIHRoaXMuaXNTZWxlY3RpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy4kbm90aWZ5LnN1Y2Nlc3ModHJhbnNsYXRlKCdjcC5maWVsZF9hZGRlZCcsIHtcbiAgICAgICAgICAgICAgICBmaWVsZHR5cGU6IGZpZWxkLmlzTWV0YSA/IGZpZWxkLmRpc3BsYXkgOiBfLmZpbmQodGhpcy5maWVsZHR5cGVzLCB7IG5hbWU6IGZpZWxkLnR5cGUgfSkubGFiZWxcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy4kcmVmcy5maWVsZHNbY291bnQtMV07XG4gICAgICAgICAgICAgICAgdGhpcy5pc1F1aWNrQWRkaW5nID8gZmllbGQuZm9jdXMoKSA6IGZpZWxkLmVkaXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZUZpZWxkV2lkdGhzKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuJHJlZnMuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgXy5lYWNoKHRoaXMuJHJlZnMuZmllbGRzLCBjb21wb25lbnQgPT4gY29tcG9uZW50LnVwZGF0ZUZpZWxkV2lkdGhzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZShpKSB7XG4gICAgICAgICAgICBpZiAoISBjb25maXJtKHRyYW5zbGF0ZSgnY3AuYXJlX3lvdV9zdXJlJykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmZpZWxkcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRmllbGRzLnZ1ZT9kYzJjOTZmOCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgOmNsYXNzPVwiY2xhc3Nlc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbi1maWVsZC1pbm5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlY3Rpb24tZmllbGQtbWFpblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwiW1xuICAgICAgICAgICAgICAgICAgICAnZmllbGQtZHJhZy1oYW5kbGUnLFxuICAgICAgICAgICAgICAgICAgICBgZmllbGQtZHJhZy1oYW5kbGUtLSR7cGFyZW50S2V5fWAsXG4gICAgICAgICAgICAgICAgICAgIHsgJ3Jvb3QtbGV2ZWwtZHJhZy1oYW5kbGUnOiBpc1Jvb3RMZXZlbCB9XG4gICAgICAgICAgICAgICAgXVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZWN0aW9uLWZpZWxkLW1haW4taW5uZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoLTQgdy00XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2Zy1pY29uIGNsYXNzPVwiaC00IHctNCBvcGFjaXR5LTUwIHNlbGYtY2VudGVyXCIgOm5hbWU9XCJpY29uXCI+PC9zdmctaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1sLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZpZWxkLWRpc3BsYXktc2l6ZXJcIiB2LWVsOmZpZWxkLWRpc3BsYXktc2l6ZXIgdi10ZXh0PVwiZmllbGQuZGlzcGxheSB8fCBmaWVsZC5uYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmllbGQtbmFtZS1zaXplclwiIHYtZWw6ZmllbGQtbmFtZS1zaXplciB2LXRleHQ9XCJmaWVsZC5uYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZpZWxkLWRpc3BsYXlcIiB2LWVsOmRpc3BsYXkgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiZmllbGQuZGlzcGxheVwiIDpwbGFjZWhvbGRlcj1cImZpZWxkLmRpc3BsYXkgfHwgZmllbGQubmFtZVwiIDpzdHlsZT1cInt3aWR0aDogZGlzcGxheUZpZWxkV2lkdGh9XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmaWVsZC1uYW1lXCIgdi1lbDpuYW1lIHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImZpZWxkLm5hbWVcIiA6c3R5bGU9XCJ7d2lkdGg6IG5hbWVGaWVsZFdpZHRofVwiIEBpbnB1dD1cImhhbmRsZU1vZGlmaWVkID0gdHJ1ZVwiIDpkaXNhYmxlZD1cImZpZWxkLmlzTWV0YVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpZWxkLXR5cGVcIj57eyBmaWVsZHR5cGVMYWJlbCB9fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZC1jb250cm9sc1wiPlxuICAgICAgICAgICAgICAgICAgICA8d2lkdGgtc2VsZWN0b3IgOnZhbHVlLnN5bmM9XCJmaWVsZC53aWR0aFwiIHYtdGlwIDp0aXAtdGV4dD1cInRyYW5zbGF0ZSgnY3Aud2lkdGgnKVwiPjwvd2lkdGgtc2VsZWN0b3I+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiY2FuQmVMb2NhbGl6ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIEBjbGljaz1cImZpZWxkLmxvY2FsaXphYmxlID0gIWZpZWxkLmxvY2FsaXphYmxlXCIgdi10aXAgOnRpcC10ZXh0PVwidHJhbnNsYXRlKCdjcC5sb2NhbGl6YWJsZScpXCI+PHNwYW4gY2xhc3M9XCJpY29uIGljb24tZ2xvYmUgZmllbGQtbG9jYWxpemFibGVcIiA6Y2xhc3M9XCJ7ICdpcy1sb2NhbGl6YWJsZSc6IGZpZWxkLmxvY2FsaXphYmxlIH1cIj48L3NwYW4+PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8YSBAY2xpY2s9XCJlZGl0XCIgdi10aXAgOnRpcC10ZXh0PVwidHJhbnNsYXRlKCdjcC5lZGl0JylcIj48c3BhbiBjbGFzcz1cImljb24gaWNvbi1wZW5jaWwgZmllbGQtZWRpdFwiPjwvc3Bhbj48L2E+XG4gICAgICAgICAgICAgICAgICAgIDxhIEBjbGljaz1cIiRlbWl0KCdyZW1vdmVkJylcIiB2LXRpcCA6dGlwLXRleHQ9XCJ0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpXCI+PHNwYW4gY2xhc3M9XCJmaWVsZC1kZWxldGUgaWNvbiBpY29uLWNyb3NzIGRlbGV0ZVwiPjwvc3Bhbj48L2E+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiaXNHcmlkRmllbGRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIEBjbGljaz1cImFkZEZpZWxkXCIgdi10aXAgOnRpcC10ZXh0PVwidHJhbnNsYXRlKCdjcC5hZGRfZmllbGQnKVwiPjxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLXBsdXMgZmllbGQtYWRkLWdyaWQtZmllbGRcIj48L3NwYW4+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgQGNsaWNrPVwiaXNTaG93aW5nR3JpZEZpZWxkcyA9ICFpc1Nob3dpbmdHcmlkRmllbGRzXCIgdi10aXAgOnRpcC10ZXh0PVwidHJhbnNsYXRlKCdjcC50b2dnbGVfZmllbGRzJylcIiB2LXNob3c9XCJmaWVsZC5maWVsZHMubGVuZ3RoXCIgY2xhc3M9XCJhbHdheXMtdmlzaWJsZVwiPjxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNoZXZyb24te3sgaXNTaG93aW5nR3JpZEZpZWxkcyA/ICd1cCcgOiAnZG93bicgfX0gZmllbGQtZXhwYW5kXCI+PC9zcGFuPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc1JlcGxpY2F0b3JGaWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgQGNsaWNrPVwiYWRkUmVwbGljYXRvclNldFwiIHYtdGlwIDp0aXAtdGV4dD1cInRyYW5zbGF0ZSgnY3AuYWRkX3NldCcpXCI+PHNwYW4gY2xhc3M9XCJpY29uIGljb24tcGx1cyBmaWVsZC1hZGQtc2V0XCI+PC9zcGFuPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIEBjbGljaz1cImlzU2hvd2luZ1NldHMgPSAhaXNTaG93aW5nU2V0c1wiIHYtdGlwIDp0aXAtdGV4dD1cInRyYW5zbGF0ZSgnY3AudG9nZ2xlX3NldHMnKVwiIHYtc2hvdz1cImZpZWxkLnNldHMubGVuZ3RoXCIgY2xhc3M9XCJhbHdheXMtdmlzaWJsZVwiPjxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNoZXZyb24te3sgaXNTaG93aW5nU2V0cyA/ICd1cCcgOiAnZG93bicgfX0gZmllbGQtZXhwYW5kXCI+PC9zcGFuPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmllbGQtbmVzdGVkIGZpZWxkLWZpZWxkc1wiIHYtaWY9XCJpc0dyaWRGaWVsZFwiIHYtc2hvdz1cImlzU2hvd2luZ0dyaWRGaWVsZHNcIj5cbiAgICAgICAgICAgICAgICA8ZmllbGRzZXQtZmllbGRzXG4gICAgICAgICAgICAgICAgICAgIHYtcmVmOmZpZWxkc1xuICAgICAgICAgICAgICAgICAgICA6ZmllbGRzLnN5bmM9XCJmaWVsZC5maWVsZHNcIlxuICAgICAgICAgICAgICAgICAgICA6c2VjdGlvbj1cInNlY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICA6cGFyZW50LWtleT1cImZpZWxkS2V5XCJcbiAgICAgICAgICAgICAgICAgICAgOmZpZWxkdHlwZXM9XCJmaWVsZHR5cGVzXCJcbiAgICAgICAgICAgICAgICAgICAgOmlzLWFkZGluZz1cImlzQWRkaW5nR3JpZEZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdG9yLWNsb3NlZD1cImZpZWxkU2VsZWN0b3JDbG9zZWRcIlxuICAgICAgICAgICAgICAgID48L2ZpZWxkc2V0LWZpZWxkcz5cblxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbWFsbCBtdC0xNlwiIEBjbGljaz1cImFkZEZpZWxkXCI+e3sgdHJhbnNsYXRlKCdjcC5hZGRfZmllbGQnKSB9fTwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8cmVwbGljYXRvci1zZXRzXG4gICAgICAgICAgICAgICAgdi1pZj1cImlzUmVwbGljYXRvckZpZWxkXCJcbiAgICAgICAgICAgICAgICB2LXNob3c9XCJpc1Nob3dpbmdTZXRzXCJcbiAgICAgICAgICAgICAgICB2LXJlZjpzZXRzXG4gICAgICAgICAgICAgICAgOnNldHMuc3luYz1cImZpZWxkLnNldHNcIlxuICAgICAgICAgICAgICAgIDpzZWN0aW9uPVwic2VjdGlvblwiXG4gICAgICAgICAgICAgICAgOmZpZWxkdHlwZXM9XCJmaWVsZHR5cGVzXCJcbiAgICAgICAgICAgICAgICA6cGFyZW50LWtleT1cImZpZWxkS2V5XCJcbiAgICAgICAgICAgID48L3JlcGxpY2F0b3Itc2V0cz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPG1vZGFsIDpzaG93LnN5bmM9XCJpc0VkaXRpbmdcIiBjbGFzcz1cIm1vZGFsLXdpZGVcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzdmctaWNvbiBjbGFzcz1cImgtNiB3LTYgbXItMiBpbmxpbmUtYmxvY2sgb3BhY2l0eS01MFwiIDpuYW1lPVwiaWNvblwiPjwvc3ZnLWljb24+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IGZpZWxkLmRpc3BsYXkgfHwgZmllbGQubmFtZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXhzIG1sLTIgZm9udC1ib2xkIHVwcGVyY2FzZSBvcGFjaXR5LTI1IHB0LXNtXCI+e3sgZmllbGR0eXBlTGFiZWwgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJib2R5XCI+XG4gICAgICAgICAgICAgICAgPGZpZWxkLXNldHRpbmdzIHYtcmVmOnNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmaWVsZC5zeW5jPVwiZmllbGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZmllbGR0eXBlLWNvbmZpZz1cImZpZWxkdHlwZUNvbmZpZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmaWVsZHR5cGVzPVwiZmllbGR0eXBlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyb290PVwiaXNSb290TGV2ZWxcIj5cbiAgICAgICAgICAgICAgICA8L2ZpZWxkLXNldHRpbmdzPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9tb2RhbD5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBlbGVtZW50UmVzaXplRGV0ZWN0b3JNYWtlciBmcm9tIFwiZWxlbWVudC1yZXNpemUtZGV0ZWN0b3JcIlxuaW1wb3J0IEZpZWxkU2V0dGluZ3MgZnJvbSAnLi4vRmllbGRTZXR0aW5ncy52dWUnO1xuaW1wb3J0IFdpZHRoU2VsZWN0b3IgZnJvbSAnLi9XaWR0aFNlbGVjdG9yLnZ1ZSc7XG5pbXBvcnQgUmVwbGljYXRvclNldHMgZnJvbSAnLi9TZXRzLnZ1ZSc7XG5cbmNvbnN0IGVyZCA9IGVsZW1lbnRSZXNpemVEZXRlY3Rvck1ha2VyKHsgc3RyYXRlZ3k6IFwic2Nyb2xsXCIgfSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgRmllbGRTZXR0aW5ncyxcbiAgICAgICAgV2lkdGhTZWxlY3RvcixcbiAgICAgICAgUmVwbGljYXRvclNldHNcbiAgICB9LFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZmllbGQ6IHt9LFxuICAgICAgICBmaWVsZHR5cGVzOiB7fSxcbiAgICAgICAgc2VjdGlvbjoge30sXG4gICAgICAgIGlzRmlyc3RGaWVsZDoge30sXG4gICAgICAgIGlzTGFzdEZpZWxkOiB7fSxcbiAgICAgICAgcGFyZW50S2V5OiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoYW5kbGVNb2RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICBpc0VkaXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgaXNTaG93aW5nR3JpZEZpZWxkczogZmFsc2UsXG4gICAgICAgICAgICBpc1Nob3dpbmdTZXRzOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQWRkaW5nR3JpZEZpZWxkOiBmYWxzZSxcbiAgICAgICAgICAgIGRpc3BsYXlGaWVsZFdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBuYW1lRmllbGRXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgICAgICBoZWlnaHQ6IG51bGxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGRpc3BsYXkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5kaXNwbGF5O1xuICAgICAgICB9LFxuXG4gICAgICAgIG5hbWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZC5uYW1lO1xuICAgICAgICB9LFxuXG4gICAgICAgIGljb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc01ldGEpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZC5uYW1lID09PSAndGl0bGUnKSByZXR1cm4gJ3RleHQnO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkLm5hbWUgPT09ICdzbHVnJykgcmV0dXJuICdsb2NhdGlvbi1waW4nO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkLm5hbWUgPT09ICdkYXRlJykgcmV0dXJuICdjYWxlbmRhcic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfLmZpbmQodGhpcy5maWVsZHR5cGVzLCB7IG5hbWU6IHRoaXMuZmllbGQudHlwZSB9KS5pY29uO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkS2V5KCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnBhcmVudEtleSA9PSAnJykgPyB0aGlzLmZpZWxkLmlkIDogYCR7dGhpcy5wYXJlbnRLZXl9LSR7dGhpcy5maWVsZC5pZH1gO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkdHlwZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmZpbmRXaGVyZSh0aGlzLmZpZWxkdHlwZXMsIHsgbmFtZTogdGhpcy5maWVsZC50eXBlIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkdHlwZUNvbmZpZygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkdHlwZS5jb25maWc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmllbGR0eXBlTGFiZWwoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZHR5cGUubGFiZWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3RoZXJTZWN0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmZpbHRlcih0aGlzLiRwYXJlbnQuJHBhcmVudC5zZWN0aW9ucywgc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb24uaWQgIT09IHRoaXMuc2VjdGlvbi5pZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUm9vdExldmVsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC5pc1Jvb3RMZXZlbDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0dyaWRGaWVsZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLnR5cGUgPT09ICdncmlkJztcbiAgICAgICAgfSxcblxuICAgICAgICBpc1JlcGxpY2F0b3JGaWVsZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3JlcGxpY2F0b3InLCAnYmFyZCddLmluY2x1ZGVzKHRoaXMuZmllbGQudHlwZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xhc3NlcygpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ3NlY3Rpb24tZmllbGQnLFxuICAgICAgICAgICAgICAgIGBzZWN0aW9uLWZpZWxkLS0ke3RoaXMucGFyZW50S2V5fWAsXG4gICAgICAgICAgICAgICAgYHctZnVsbCBtZDoke3RhaWx3aW5kX3dpZHRoX2NsYXNzKHRoaXMuZmllbGQud2lkdGgpfWAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnaXMtZWRpdGluZyc6IHRoaXMuaXNFZGl0aW5nLFxuICAgICAgICAgICAgICAgICAgICAncm9vdC1sZXZlbC1zZWN0aW9uLWZpZWxkJzogdGhpcy5pc1Jvb3RMZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgJ2lzLWZpcnN0LWZpZWxkJzogdGhpcy5pc0ZpcnN0RmllbGQsXG4gICAgICAgICAgICAgICAgICAgICdpcy1sYXN0LWZpZWxkJzogdGhpcy5pc0xhc3RGaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgJ2lzLXRpbnknOiB0aGlzLmlzVGlueVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuQmVMb2NhbGl6ZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Jvb3RMZXZlbFxuICAgICAgICAgICAgICAgICYmIE9iamVjdC5rZXlzKFN0YXRhbWljLmxvY2FsZXMpLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmZpZWxkdHlwZS5jYW5CZUxvY2FsaXplZDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1RpbnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53aWR0aCA8IDQwMDtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgZGlzcGxheSh2YWwpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5oYW5kbGVNb2RpZmllZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQubmFtZSA9IHRoaXMuJHNsdWdpZnkodmFsLCAnXycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLnVwZGF0ZUZpZWxkV2lkdGhzKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG5hbWUodmFsKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkV2lkdGhzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNTaG93aW5nR3JpZEZpZWxkcyh2YWwpIHtcbiAgICAgICAgICAgIGlmICghdmFsKSByZXR1cm47XG5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+ICB0aGlzLiRyZWZzLmZpZWxkcy51cGRhdGVGaWVsZFdpZHRocygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1Nob3dpbmdTZXRzKHZhbCkge1xuICAgICAgICAgICAgaWYgKCF2YWwpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy4kcmVmcy5zZXRzLnVwZGF0ZUZpZWxkV2lkdGhzKCkpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIGVyZC5saXN0ZW5Ubyh0aGlzLiRlbCwgZWwgPT4ge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGVsLm9mZnNldFdpZHRoXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGVsLm9mZnNldEhlaWdodFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW5kbGVNb2RpZmllZCA9ICF0aGlzLmZpZWxkLmlzTmV3IHx8IHRoaXMuZmllbGQuaXNNZXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkV2lkdGhzKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMuJGVscy5kaXNwbGF5LnNlbGVjdCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVkaXQoKSB7XG4gICAgICAgICAgICB0aGlzLmlzRWRpdGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLiRyZWZzLnNldHRpbmdzLmZvY3VzKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZEZpZWxkKCkge1xuICAgICAgICAgICAgdGhpcy5pc0FkZGluZ0dyaWRGaWVsZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzU2hvd2luZ0dyaWRGaWVsZHMgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkU2VsZWN0b3JDbG9zZWQoKSB7XG4gICAgICAgICAgICB0aGlzLmlzQWRkaW5nR3JpZEZpZWxkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkLmZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2hvd2luZ0dyaWRGaWVsZHMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVGaWVsZFdpZHRocygpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUZpZWxkV2lkdGggPSB0aGlzLiRlbHMuZmllbGREaXNwbGF5U2l6ZXIub2Zmc2V0V2lkdGggKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5uYW1lRmllbGRXaWR0aCA9IHRoaXMuJGVscy5maWVsZE5hbWVTaXplci5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkUmVwbGljYXRvclNldCgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTaG93aW5nU2V0cyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRyZWZzLnNldHMuYWRkKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRmllbGQudnVlPzYxZjc1M2JmIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmb3JFYWNoICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb24tdXRpbHNcIikuZm9yRWFjaDtcbnZhciBlbGVtZW50VXRpbHNNYWtlciAgICAgICA9IHJlcXVpcmUoXCIuL2VsZW1lbnQtdXRpbHNcIik7XG52YXIgbGlzdGVuZXJIYW5kbGVyTWFrZXIgICAgPSByZXF1aXJlKFwiLi9saXN0ZW5lci1oYW5kbGVyXCIpO1xudmFyIGlkR2VuZXJhdG9yTWFrZXIgICAgICAgID0gcmVxdWlyZShcIi4vaWQtZ2VuZXJhdG9yXCIpO1xudmFyIGlkSGFuZGxlck1ha2VyICAgICAgICAgID0gcmVxdWlyZShcIi4vaWQtaGFuZGxlclwiKTtcbnZhciByZXBvcnRlck1ha2VyICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3JlcG9ydGVyXCIpO1xudmFyIGJyb3dzZXJEZXRlY3RvciAgICAgICAgID0gcmVxdWlyZShcIi4vYnJvd3Nlci1kZXRlY3RvclwiKTtcbnZhciBiYXRjaFByb2Nlc3Nvck1ha2VyICAgICA9IHJlcXVpcmUoXCJiYXRjaC1wcm9jZXNzb3JcIik7XG52YXIgc3RhdGVIYW5kbGVyICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9zdGF0ZS1oYW5kbGVyXCIpO1xuXG4vL0RldGVjdGlvbiBzdHJhdGVnaWVzLlxudmFyIG9iamVjdFN0cmF0ZWd5TWFrZXIgICAgID0gcmVxdWlyZShcIi4vZGV0ZWN0aW9uLXN0cmF0ZWd5L29iamVjdC5qc1wiKTtcbnZhciBzY3JvbGxTdHJhdGVneU1ha2VyICAgICA9IHJlcXVpcmUoXCIuL2RldGVjdGlvbi1zdHJhdGVneS9zY3JvbGwuanNcIik7XG5cbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihvYmopIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopIHx8IG9iai5sZW5ndGggIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShjb2xsZWN0aW9uKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2gob2JqKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBpZEhhbmRsZXJcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXQgR2V0cyB0aGUgcmVzaXplIGRldGVjdG9yIGlkIG9mIHRoZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0IEdlbmVyYXRlIGFuZCBzZXRzIHRoZSByZXNpemUgZGV0ZWN0b3IgaWQgb2YgdGhlIGVsZW1lbnQuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByb3BlcnR5IHtib29sZWFufSBjYWxsT25BZGQgICAgRGV0ZXJtaW5lcyBpZiBsaXN0ZW5lcnMgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZXkgYXJlIGdldHRpbmcgYWRkZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIHRydWUuIElmIHRydWUsIHRoZSBsaXN0ZW5lciBpcyBndWFyYW50ZWVkIHRvIGJlIGNhbGxlZCB3aGVuIGl0IGhhcyBiZWVuIGFkZGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UsIHRoZSBsaXN0ZW5lciB3aWxsIG5vdCBiZSBndWFyZW50ZWVkIHRvIGJlIGNhbGxlZCB3aGVuIGl0IGhhcyBiZWVuIGFkZGVkIChkb2VzIG5vdCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY2FsbGVkKS5cbiAqIEBwcm9wZXJ0eSB7aWRIYW5kbGVyfSBpZEhhbmRsZXIgIEEgY3VzdG9tIGlkIGhhbmRsZXIgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZywgc2V0dGluZyBhbmQgcmV0cmlldmluZyBpZCdzIGZvciBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBwcm92aWRlZCwgYSBkZWZhdWx0IGlkIGhhbmRsZXIgd2lsbCBiZSB1c2VkLlxuICogQHByb3BlcnR5IHtyZXBvcnRlcn0gcmVwb3J0ZXIgICAgQSBjdXN0b20gcmVwb3J0ZXIgdGhhdCBoYW5kbGVzIHJlcG9ydGluZyBsb2dzLCB3YXJuaW5ncyBhbmQgZXJyb3JzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm90IHByb3ZpZGVkLCBhIGRlZmF1bHQgaWQgaGFuZGxlciB3aWxsIGJlIHVzZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzZXQgdG8gZmFsc2UsIHRoZW4gbm90aGluZyB3aWxsIGJlIHJlcG9ydGVkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBkZWJ1ZyAgICAgICAgSWYgc2V0IHRvIHRydWUsIHRoZSB0aGUgc3lzdGVtIHdpbGwgcmVwb3J0IGRlYnVnIG1lc3NhZ2VzIGFzIGRlZmF1bHQgZm9yIHRoZSBsaXN0ZW5UbyBtZXRob2QuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVsZW1lbnQgcmVzaXplIGRldGVjdG9yIGluc3RhbmNlLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtPcHRpb25zP30gb3B0aW9ucyBPcHRpb25hbCBnbG9iYWwgb3B0aW9ucyBvYmplY3QgdGhhdCB3aWxsIGRlY2lkZSBob3cgdGhpcyBpbnN0YW5jZSB3aWxsIHdvcmsuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy9pZEhhbmRsZXIgaXMgY3VycmVudGx5IG5vdCBhbiBvcHRpb24gdG8gdGhlIGxpc3RlblRvIGZ1bmN0aW9uLCBzbyBpdCBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGdsb2JhbE9wdGlvbnMuXG4gICAgdmFyIGlkSGFuZGxlcjtcblxuICAgIGlmIChvcHRpb25zLmlkSGFuZGxlcikge1xuICAgICAgICAvLyBUbyBtYWludGFpbiBjb21wYXRhYmlsaXR5IHdpdGggaWRIYW5kbGVyLmdldChlbGVtZW50LCByZWFkb25seSksIG1ha2Ugc3VyZSB0byB3cmFwIHRoZSBnaXZlbiBpZEhhbmRsZXJcbiAgICAgICAgLy8gc28gdGhhdCByZWFkb25seSBmbGFnIGFsd2F5cyBpcyB0cnVlIHdoZW4gaXQncyB1c2VkIGhlcmUuIFRoaXMgbWF5IGJlIHJlbW92ZWQgbmV4dCBtYWpvciB2ZXJzaW9uIGJ1bXAuXG4gICAgICAgIGlkSGFuZGxlciA9IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIG9wdGlvbnMuaWRIYW5kbGVyLmdldChlbGVtZW50LCB0cnVlKTsgfSxcbiAgICAgICAgICAgIHNldDogb3B0aW9ucy5pZEhhbmRsZXIuc2V0XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlkR2VuZXJhdG9yID0gaWRHZW5lcmF0b3JNYWtlcigpO1xuICAgICAgICB2YXIgZGVmYXVsdElkSGFuZGxlciA9IGlkSGFuZGxlck1ha2VyKHtcbiAgICAgICAgICAgIGlkR2VuZXJhdG9yOiBpZEdlbmVyYXRvcixcbiAgICAgICAgICAgIHN0YXRlSGFuZGxlcjogc3RhdGVIYW5kbGVyXG4gICAgICAgIH0pO1xuICAgICAgICBpZEhhbmRsZXIgPSBkZWZhdWx0SWRIYW5kbGVyO1xuICAgIH1cblxuICAgIC8vcmVwb3J0ZXIgaXMgY3VycmVudGx5IG5vdCBhbiBvcHRpb24gdG8gdGhlIGxpc3RlblRvIGZ1bmN0aW9uLCBzbyBpdCBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGdsb2JhbE9wdGlvbnMuXG4gICAgdmFyIHJlcG9ydGVyID0gb3B0aW9ucy5yZXBvcnRlcjtcblxuICAgIGlmKCFyZXBvcnRlcikge1xuICAgICAgICAvL0lmIG9wdGlvbnMucmVwb3J0ZXIgaXMgZmFsc2UsIHRoZW4gdGhlIHJlcG9ydGVyIHNob3VsZCBiZSBxdWlldC5cbiAgICAgICAgdmFyIHF1aWV0ID0gcmVwb3J0ZXIgPT09IGZhbHNlO1xuICAgICAgICByZXBvcnRlciA9IHJlcG9ydGVyTWFrZXIocXVpZXQpO1xuICAgIH1cblxuICAgIC8vYmF0Y2hQcm9jZXNzb3IgaXMgY3VycmVudGx5IG5vdCBhbiBvcHRpb24gdG8gdGhlIGxpc3RlblRvIGZ1bmN0aW9uLCBzbyBpdCBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGdsb2JhbE9wdGlvbnMuXG4gICAgdmFyIGJhdGNoUHJvY2Vzc29yID0gZ2V0T3B0aW9uKG9wdGlvbnMsIFwiYmF0Y2hQcm9jZXNzb3JcIiwgYmF0Y2hQcm9jZXNzb3JNYWtlcih7IHJlcG9ydGVyOiByZXBvcnRlciB9KSk7XG5cbiAgICAvL09wdGlvbnMgdG8gYmUgdXNlZCBhcyBkZWZhdWx0IGZvciB0aGUgbGlzdGVuVG8gZnVuY3Rpb24uXG4gICAgdmFyIGdsb2JhbE9wdGlvbnMgPSB7fTtcbiAgICBnbG9iYWxPcHRpb25zLmNhbGxPbkFkZCAgICAgPSAhIWdldE9wdGlvbihvcHRpb25zLCBcImNhbGxPbkFkZFwiLCB0cnVlKTtcbiAgICBnbG9iYWxPcHRpb25zLmRlYnVnICAgICAgICAgPSAhIWdldE9wdGlvbihvcHRpb25zLCBcImRlYnVnXCIsIGZhbHNlKTtcblxuICAgIHZhciBldmVudExpc3RlbmVySGFuZGxlciAgICA9IGxpc3RlbmVySGFuZGxlck1ha2VyKGlkSGFuZGxlcik7XG4gICAgdmFyIGVsZW1lbnRVdGlscyAgICAgICAgICAgID0gZWxlbWVudFV0aWxzTWFrZXIoe1xuICAgICAgICBzdGF0ZUhhbmRsZXI6IHN0YXRlSGFuZGxlclxuICAgIH0pO1xuXG4gICAgLy9UaGUgZGV0ZWN0aW9uIHN0cmF0ZWd5IHRvIGJlIHVzZWQuXG4gICAgdmFyIGRldGVjdGlvblN0cmF0ZWd5O1xuICAgIHZhciBkZXNpcmVkU3RyYXRlZ3kgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJzdHJhdGVneVwiLCBcIm9iamVjdFwiKTtcbiAgICB2YXIgc3RyYXRlZ3lPcHRpb25zID0ge1xuICAgICAgICByZXBvcnRlcjogcmVwb3J0ZXIsXG4gICAgICAgIGJhdGNoUHJvY2Vzc29yOiBiYXRjaFByb2Nlc3NvcixcbiAgICAgICAgc3RhdGVIYW5kbGVyOiBzdGF0ZUhhbmRsZXIsXG4gICAgICAgIGlkSGFuZGxlcjogaWRIYW5kbGVyXG4gICAgfTtcblxuICAgIGlmKGRlc2lyZWRTdHJhdGVneSA9PT0gXCJzY3JvbGxcIikge1xuICAgICAgICBpZiAoYnJvd3NlckRldGVjdG9yLmlzTGVnYWN5T3BlcmEoKSkge1xuICAgICAgICAgICAgcmVwb3J0ZXIud2FybihcIlNjcm9sbCBzdHJhdGVneSBpcyBub3Qgc3VwcG9ydGVkIG9uIGxlZ2FjeSBPcGVyYS4gQ2hhbmdpbmcgdG8gb2JqZWN0IHN0cmF0ZWd5LlwiKTtcbiAgICAgICAgICAgIGRlc2lyZWRTdHJhdGVneSA9IFwib2JqZWN0XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoYnJvd3NlckRldGVjdG9yLmlzSUUoOSkpIHtcbiAgICAgICAgICAgIHJlcG9ydGVyLndhcm4oXCJTY3JvbGwgc3RyYXRlZ3kgaXMgbm90IHN1cHBvcnRlZCBvbiBJRTkuIENoYW5naW5nIHRvIG9iamVjdCBzdHJhdGVneS5cIik7XG4gICAgICAgICAgICBkZXNpcmVkU3RyYXRlZ3kgPSBcIm9iamVjdFwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYoZGVzaXJlZFN0cmF0ZWd5ID09PSBcInNjcm9sbFwiKSB7XG4gICAgICAgIGRldGVjdGlvblN0cmF0ZWd5ID0gc2Nyb2xsU3RyYXRlZ3lNYWtlcihzdHJhdGVneU9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZihkZXNpcmVkU3RyYXRlZ3kgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kgPSBvYmplY3RTdHJhdGVneU1ha2VyKHN0cmF0ZWd5T3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJhdGVneSBuYW1lOiBcIiArIGRlc2lyZWRTdHJhdGVneSk7XG4gICAgfVxuXG4gICAgLy9DYWxscyBjYW4gYmUgbWFkZSB0byBsaXN0ZW5UbyB3aXRoIGVsZW1lbnRzIHRoYXQgYXJlIHN0aWxsIGJlaW5nIGluc3RhbGxlZC5cbiAgICAvL0Fsc28sIHNhbWUgZWxlbWVudHMgY2FuIG9jY3VyIGluIHRoZSBlbGVtZW50cyBsaXN0IGluIHRoZSBsaXN0ZW5UbyBmdW5jdGlvbi5cbiAgICAvL1dpdGggdGhpcyBtYXAsIHRoZSByZWFkeSBjYWxsYmFja3MgY2FuIGJlIHN5bmNocm9uaXplZCBiZXR3ZWVuIHRoZSBjYWxsc1xuICAgIC8vc28gdGhhdCB0aGUgcmVhZHkgY2FsbGJhY2sgY2FuIGFsd2F5cyBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IGlzIHJlYWR5IC0gZXZlbiBpZlxuICAgIC8vaXQgd2Fzbid0IGluc3RhbGxlZCBmcm9tIHRoZSBmdW5jdGlvbiBpdHNlbGYuXG4gICAgdmFyIG9uUmVhZHlDYWxsYmFja3MgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSBnaXZlbiBlbGVtZW50cyByZXNpemUtZGV0ZWN0YWJsZSBhbmQgc3RhcnRzIGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIG9uIHRoZSBlbGVtZW50cy4gQ2FsbHMgdGhlIGV2ZW50IGNhbGxiYWNrIGZvciBlYWNoIGV2ZW50IGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7T3B0aW9ucz99IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuIFRoZXNlIG9wdGlvbnMgd2lsbCBvdmVycmlkZSB0aGUgZ2xvYmFsIG9wdGlvbnMuIFNvbWUgb3B0aW9ucyBtYXkgbm90IGJlIG92ZXJyaWRlbiwgc3VjaCBhcyBpZEhhbmRsZXIuXG4gICAgICogQHBhcmFtIHtlbGVtZW50W118ZWxlbWVudH0gZWxlbWVudHMgVGhlIGdpdmVuIGFycmF5IG9mIGVsZW1lbnRzIHRvIGRldGVjdCByZXNpemUgZXZlbnRzIG9mLiBTaW5nbGUgZWxlbWVudCBpcyBhbHNvIHZhbGlkLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBiZSBleGVjdXRlZCBmb3IgZWFjaCByZXNpemUgZXZlbnQgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0ZW5UbyhvcHRpb25zLCBlbGVtZW50cywgbGlzdGVuZXIpIHtcbiAgICAgICAgZnVuY3Rpb24gb25SZXNpemVDYWxsYmFjayhlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gZXZlbnRMaXN0ZW5lckhhbmRsZXIuZ2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgZm9yRWFjaChsaXN0ZW5lcnMsIGZ1bmN0aW9uIGNhbGxMaXN0ZW5lclByb3h5KGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGNhbGxPbkFkZCwgZWxlbWVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJIYW5kbGVyLmFkZChlbGVtZW50LCBsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgIGlmKGNhbGxPbkFkZCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9PcHRpb25zIG9iamVjdCBtYXkgYmUgb21pdHRlZC5cbiAgICAgICAgaWYoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGVsZW1lbnRzO1xuICAgICAgICAgICAgZWxlbWVudHMgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIWVsZW1lbnRzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdCBsZWFzdCBvbmUgZWxlbWVudCByZXF1aXJlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZighbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3RlbmVyIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0VsZW1lbnQoZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBBIHNpbmdsZSBlbGVtZW50IGhhcyBiZWVuIHBhc3NlZCBpbi5cbiAgICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0NvbGxlY3Rpb24oZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGNvbGxlY3Rpb24gdG8gYXJyYXkgZm9yIHBsdWdpbnMuXG4gICAgICAgICAgICAvLyBUT0RPOiBNYXkgd2FudCB0byBjaGVjayBzbyB0aGF0IGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24gYXJlIHZhbGlkIGVsZW1lbnRzLlxuICAgICAgICAgICAgZWxlbWVudHMgPSB0b0FycmF5KGVsZW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIkludmFsaWQgYXJndW1lbnRzLiBNdXN0IGJlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWxlbWVudHNSZWFkeSA9IDA7XG5cbiAgICAgICAgdmFyIGNhbGxPbkFkZCA9IGdldE9wdGlvbihvcHRpb25zLCBcImNhbGxPbkFkZFwiLCBnbG9iYWxPcHRpb25zLmNhbGxPbkFkZCk7XG4gICAgICAgIHZhciBvblJlYWR5Q2FsbGJhY2sgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJvblJlYWR5XCIsIGZ1bmN0aW9uIG5vb3AoKSB7fSk7XG4gICAgICAgIHZhciBkZWJ1ZyA9IGdldE9wdGlvbihvcHRpb25zLCBcImRlYnVnXCIsIGdsb2JhbE9wdGlvbnMuZGVidWcpO1xuXG4gICAgICAgIGZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uIGF0dGFjaExpc3RlbmVyVG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGVIYW5kbGVyLmdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVIYW5kbGVyLmluaXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZEhhbmRsZXIuc2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaWQgPSBpZEhhbmRsZXIuZ2V0KGVsZW1lbnQpO1xuXG4gICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coXCJBdHRhY2hpbmcgbGlzdGVuZXIgdG8gZWxlbWVudFwiLCBpZCwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmKCFlbGVtZW50VXRpbHMuaXNEZXRlY3RhYmxlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIk5vdCBkZXRlY3RhYmxlLlwiKTtcbiAgICAgICAgICAgICAgICBpZihlbGVtZW50VXRpbHMuaXNCdXN5KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnICYmIHJlcG9ydGVyLmxvZyhpZCwgXCJTeXN0ZW0gYnVzeSBtYWtpbmcgaXQgZGV0ZWN0YWJsZVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAvL1RoZSBlbGVtZW50IGlzIGJlaW5nIHByZXBhcmVkIHRvIGJlIGRldGVjdGFibGUuIERvIG5vdCBtYWtlIGl0IGRldGVjdGFibGUuXG4gICAgICAgICAgICAgICAgICAgIC8vSnVzdCBhZGQgdGhlIGxpc3RlbmVyLCBiZWNhdXNlIHRoZSBlbGVtZW50IHdpbGwgc29vbiBiZSBkZXRlY3RhYmxlLlxuICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrc1tpZF0gPSBvblJlYWR5Q2FsbGJhY2tzW2lkXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrc1tpZF0ucHVzaChmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNSZWFkeSsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50c1JlYWR5ID09PSBlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coaWQsIFwiTWFraW5nIGRldGVjdGFibGUuLi5cIik7XG4gICAgICAgICAgICAgICAgLy9UaGUgZWxlbWVudCBpcyBub3QgcHJlcGFyZWQgdG8gYmUgZGV0ZWN0YWJsZSwgc28gZG8gcHJlcGFyZSBpdCBhbmQgYWRkIGEgbGlzdGVuZXIgdG8gaXQuXG4gICAgICAgICAgICAgICAgZWxlbWVudFV0aWxzLm1hcmtCdXN5KGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXRlY3Rpb25TdHJhdGVneS5tYWtlRGV0ZWN0YWJsZSh7IGRlYnVnOiBkZWJ1ZyB9LCBlbGVtZW50LCBmdW5jdGlvbiBvbkVsZW1lbnREZXRlY3RhYmxlKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIm9uRWxlbWVudERldGVjdGFibGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlSGFuZGxlci5nZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFV0aWxzLm1hcmtBc0RldGVjdGFibGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50VXRpbHMubWFya0J1c3koZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kuYWRkTGlzdGVuZXIoZWxlbWVudCwgb25SZXNpemVDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIGVsZW1lbnQgc2l6ZSBtaWdodCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGNhbGwgdG8gXCJsaXN0ZW5Ub1wiLCB3ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGlzIGNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgYSByZXNpemUgZXZlbnQgbWF5IGJlIGVtaXR0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYXZpbmcgdGhlIHN0YXJ0U2l6ZSBvYmplY3QgaXMgb3B0aW9uYWwgKHNpbmNlIGl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UgaW4gc29tZSBjYXNlcyBzdWNoIGFzIHVucmVuZGVyZWQgZWxlbWVudHMpLCBzbyBjaGVjayBmb3IgaXRzIGV4aXN0YW5jZSBiZWZvcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvLCBjaGVjayB0aGUgc3RhdGUgZXhpc3RhbmNlIGJlZm9yZSBzaW5jZSB0aGUgZWxlbWVudCBtYXkgaGF2ZSBiZWVuIHVuaW5zdGFsbGVkIGluIHRoZSBpbnN0YWxsYXRpb24gcHJvY2Vzcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlSGFuZGxlci5nZXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS5zdGFydFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc3RhcnRTaXplLndpZHRoICE9PSB3aWR0aCB8fCBzdGF0ZS5zdGFydFNpemUuaGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZXNpemVDYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9uUmVhZHlDYWxsYmFja3NbaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChvblJlYWR5Q2FsbGJhY2tzW2lkXSwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGhhcyBiZWVuIHVuaXNudGFsbGVkIGJlZm9yZSBiZWluZyBkZXRlY3RhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIkVsZW1lbnQgdW5pbnN0YWxsZWQgYmVmb3JlIGJlaW5nIGRldGVjdGFibGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9uUmVhZHlDYWxsYmFja3NbaWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzUmVhZHkrKztcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudHNSZWFkeSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblJlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coaWQsIFwiQWxyZWFkeSBkZXRlY2FibGUsIGFkZGluZyBsaXN0ZW5lci5cIik7XG5cbiAgICAgICAgICAgIC8vVGhlIGVsZW1lbnQgaGFzIGJlZW4gcHJlcGFyZWQgdG8gYmUgZGV0ZWN0YWJsZSBhbmQgaXMgcmVhZHkgdG8gYmUgbGlzdGVuZWQgdG8uXG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGVsZW1lbnRzUmVhZHkrKztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYoZWxlbWVudHNSZWFkeSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvblJlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaW5zdGFsbChlbGVtZW50cykge1xuICAgICAgICBpZighZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIkF0IGxlYXN0IG9uZSBlbGVtZW50IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0VsZW1lbnQoZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBBIHNpbmdsZSBlbGVtZW50IGhhcyBiZWVuIHBhc3NlZCBpbi5cbiAgICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0NvbGxlY3Rpb24oZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGNvbGxlY3Rpb24gdG8gYXJyYXkgZm9yIHBsdWdpbnMuXG4gICAgICAgICAgICAvLyBUT0RPOiBNYXkgd2FudCB0byBjaGVjayBzbyB0aGF0IGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24gYXJlIHZhbGlkIGVsZW1lbnRzLlxuICAgICAgICAgICAgZWxlbWVudHMgPSB0b0FycmF5KGVsZW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIkludmFsaWQgYXJndW1lbnRzLiBNdXN0IGJlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lckhhbmRsZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGVsZW1lbnQpO1xuICAgICAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kudW5pbnN0YWxsKGVsZW1lbnQpO1xuICAgICAgICAgICAgc3RhdGVIYW5kbGVyLmNsZWFuU3RhdGUoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGxpc3RlblRvOiBsaXN0ZW5UbyxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IGV2ZW50TGlzdGVuZXJIYW5kbGVyLnJlbW92ZUxpc3RlbmVyLFxuICAgICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IGV2ZW50TGlzdGVuZXJIYW5kbGVyLnJlbW92ZUFsbExpc3RlbmVycyxcbiAgICAgICAgdW5pbnN0YWxsOiB1bmluc3RhbGxcbiAgICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9uKG9wdGlvbnMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbbmFtZV07XG5cbiAgICBpZigodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGdldFN0YXRlID0gb3B0aW9ucy5zdGF0ZUhhbmRsZXIuZ2V0U3RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBUZWxscyBpZiB0aGUgZWxlbWVudCBoYXMgYmVlbiBtYWRlIGRldGVjdGFibGUgYW5kIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgZXZlbnRzLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIG9yIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgZWxlbWVudCBpcyBkZXRlY3RhYmxlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0RldGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlICYmICEhc3RhdGUuaXNEZXRlY3RhYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBlbGVtZW50IHRoYXQgaXQgaGFzIGJlZW4gbWFkZSBkZXRlY3RhYmxlIGFuZCByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGV2ZW50cy5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBUaGUgZWxlbWVudCB0byBtYXJrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcmtBc0RldGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5pc0RldGVjdGFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBlbGVtZW50IGlzIGJ1c3kgb3Igbm90LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIG9yIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgZWxlbWVudCBpcyBidXN5IG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0J1c3koZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gISFnZXRTdGF0ZShlbGVtZW50KS5idXN5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBvYmplY3QgaXMgYnVzeSBhbmQgc2hvdWxkIG5vdCBiZSBtYWRlIGRldGVjdGFibGUuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBtYXJrLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYnVzeSBJZiB0aGUgZWxlbWVudCBpcyBidXN5IG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXJrQnVzeShlbGVtZW50LCBidXN5KSB7XG4gICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmJ1c3kgPSAhIWJ1c3k7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNEZXRlY3RhYmxlOiBpc0RldGVjdGFibGUsXG4gICAgICAgIG1hcmtBc0RldGVjdGFibGU6IG1hcmtBc0RldGVjdGFibGUsXG4gICAgICAgIGlzQnVzeTogaXNCdXN5LFxuICAgICAgICBtYXJrQnVzeTogbWFya0J1c3lcbiAgICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9lbGVtZW50LXV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA0ODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaWRIYW5kbGVyKSB7XG4gICAgdmFyIGV2ZW50TGlzdGVuZXJzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gZ2V0IGFsbCBsaXN0ZW5lcnMgZm9yLlxuICAgICAqIEByZXR1cm5zIEFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldExpc3RlbmVycyhlbGVtZW50KSB7XG4gICAgICAgIHZhciBpZCA9IGlkSGFuZGxlci5nZXQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBldmVudExpc3RlbmVyc1tpZF0gfHwgW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSBnaXZlbiBsaXN0ZW5lciBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuIFdpbGwgbm90IGFjdHVhbGx5IGFkZCB0aGUgbGlzdGVuZXIgdG8gdGhlIGVsZW1lbnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0aGF0IHNob3VsZCBoYXZlIHRoZSBsaXN0ZW5lciBhZGRlZC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdGhhdCB0aGUgZWxlbWVudCBoYXMgYWRkZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkTGlzdGVuZXIoZWxlbWVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGlkID0gaWRIYW5kbGVyLmdldChlbGVtZW50KTtcblxuICAgICAgICBpZighZXZlbnRMaXN0ZW5lcnNbaWRdKSB7XG4gICAgICAgICAgICBldmVudExpc3RlbmVyc1tpZF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50TGlzdGVuZXJzW2lkXS5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKGVsZW1lbnQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhlbGVtZW50KSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gZ2V0TGlzdGVuZXJzKGVsZW1lbnQpO1xuICAgICAgaWYgKCFsaXN0ZW5lcnMpIHsgcmV0dXJuOyB9XG4gICAgICBsaXN0ZW5lcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQ6IGdldExpc3RlbmVycyxcbiAgICAgICAgYWRkOiBhZGRMaXN0ZW5lcixcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyLFxuICAgICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVyc1xuICAgIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2xpc3RlbmVyLWhhbmRsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQ4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWRDb3VudCA9IDE7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBuZXcgdW5pcXVlIGlkIGluIHRoZSBjb250ZXh0LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBIHVuaXF1ZSBpZCBpbiB0aGUgY29udGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGlkQ291bnQrKztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZW5lcmF0ZTogZ2VuZXJhdGVcbiAgICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9pZC1nZW5lcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGlkR2VuZXJhdG9yICAgICA9IG9wdGlvbnMuaWRHZW5lcmF0b3I7XG4gICAgdmFyIGdldFN0YXRlICAgICAgICA9IG9wdGlvbnMuc3RhdGVIYW5kbGVyLmdldFN0YXRlO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVzaXplIGRldGVjdG9yIGlkIG9mIHRoZSBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIHRhcmdldCBlbGVtZW50IHRvIGdldCB0aGUgaWQgb2YuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudW1iZXJ8bnVsbH0gVGhlIGlkIG9mIHRoZSBlbGVtZW50LiBOdWxsIGlmIGl0IGhhcyBubyBpZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJZChlbGVtZW50KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZXNpemUgZGV0ZWN0b3IgaWQgb2YgdGhlIGVsZW1lbnQuIFJlcXVpcmVzIHRoZSBlbGVtZW50IHRvIGhhdmUgYSByZXNpemUgZGV0ZWN0b3Igc3RhdGUgaW5pdGlhbGl6ZWQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgdGFyZ2V0IGVsZW1lbnQgdG8gc2V0IHRoZSBpZCBvZi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bWJlcnxudWxsfSBUaGUgaWQgb2YgdGhlIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0SWQoZWxlbWVudCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcblxuICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXRJZCByZXF1aXJlZCB0aGUgZWxlbWVudCB0byBoYXZlIGEgcmVzaXplIGRldGVjdGlvbiBzdGF0ZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWQgPSBpZEdlbmVyYXRvci5nZW5lcmF0ZSgpO1xuXG4gICAgICAgIHN0YXRlLmlkID0gaWQ7XG5cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldDogZ2V0SWQsXG4gICAgICAgIHNldDogc2V0SWRcbiAgICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9pZC1oYW5kbGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0ODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGdsb2JhbCBjb25zb2xlOiBmYWxzZSAqL1xuXG4vKipcbiAqIFJlcG9ydGVyIHRoYXQgaGFuZGxlcyB0aGUgcmVwb3J0aW5nIG9mIGxvZ3MsIHdhcm5pbmdzIGFuZCBlcnJvcnMuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHF1aWV0IFRlbGxzIGlmIHRoZSByZXBvcnRlciBzaG91bGQgYmUgcXVpZXQgb3Igbm90LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHF1aWV0KSB7XG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgICAgLy9Eb2VzIG5vdGhpbmcuXG4gICAgfVxuXG4gICAgdmFyIHJlcG9ydGVyID0ge1xuICAgICAgICBsb2c6IG5vb3AsXG4gICAgICAgIHdhcm46IG5vb3AsXG4gICAgICAgIGVycm9yOiBub29wXG4gICAgfTtcblxuICAgIGlmKCFxdWlldCAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICB2YXIgYXR0YWNoRnVuY3Rpb24gPSBmdW5jdGlvbihyZXBvcnRlciwgbmFtZSkge1xuICAgICAgICAgICAgLy9UaGUgcHJveHkgaXMgbmVlZGVkIHRvIGJlIGFibGUgdG8gY2FsbCB0aGUgbWV0aG9kIHdpdGggdGhlIGNvbnNvbGUgY29udGV4dCxcbiAgICAgICAgICAgIC8vc2luY2Ugd2UgY2Fubm90IHVzZSBiaW5kLlxuICAgICAgICAgICAgcmVwb3J0ZXJbbmFtZV0gPSBmdW5jdGlvbiByZXBvcnRlclByb3h5KCkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gY29uc29sZVtuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoZi5hcHBseSkgeyAvL0lFOSBkb2VzIG5vdCBzdXBwb3J0IGNvbnNvbGUubG9nLmFwcGx5IDopXG4gICAgICAgICAgICAgICAgICAgIGYuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZihhcmd1bWVudHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBhdHRhY2hGdW5jdGlvbihyZXBvcnRlciwgXCJsb2dcIik7XG4gICAgICAgIGF0dGFjaEZ1bmN0aW9uKHJlcG9ydGVyLCBcIndhcm5cIik7XG4gICAgICAgIGF0dGFjaEZ1bmN0aW9uKHJlcG9ydGVyLCBcImVycm9yXCIpO1xuICAgIH1cblxuICAgIHJldHVybiByZXBvcnRlcjtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL3JlcG9ydGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0ODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJhdGNoUHJvY2Vzc29yTWFrZXIob3B0aW9ucykge1xuICAgIG9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciByZXBvcnRlciAgICAgICAgPSBvcHRpb25zLnJlcG9ydGVyO1xuICAgIHZhciBhc3luY1Byb2Nlc3MgICAgPSB1dGlscy5nZXRPcHRpb24ob3B0aW9ucywgXCJhc3luY1wiLCB0cnVlKTtcbiAgICB2YXIgYXV0b1Byb2Nlc3MgICAgID0gdXRpbHMuZ2V0T3B0aW9uKG9wdGlvbnMsIFwiYXV0b1wiLCB0cnVlKTtcblxuICAgIGlmKGF1dG9Qcm9jZXNzICYmICFhc3luY1Byb2Nlc3MpIHtcbiAgICAgICAgcmVwb3J0ZXIgJiYgcmVwb3J0ZXIud2FybihcIkludmFsaWQgb3B0aW9ucyBjb21iaW5hdGlvbi4gYXV0bz10cnVlIGFuZCBhc3luYz1mYWxzZSBpcyBpbnZhbGlkLiBTZXR0aW5nIGFzeW5jPXRydWUuXCIpO1xuICAgICAgICBhc3luY1Byb2Nlc3MgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBiYXRjaCA9IEJhdGNoKCk7XG4gICAgdmFyIGFzeW5jRnJhbWVIYW5kbGVyO1xuICAgIHZhciBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGFkZEZ1bmN0aW9uKGxldmVsLCBmbikge1xuICAgICAgICBpZighaXNQcm9jZXNzaW5nICYmIGF1dG9Qcm9jZXNzICYmIGFzeW5jUHJvY2VzcyAmJiBiYXRjaC5zaXplKCkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgYXN5bmMsIGl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgZXhlY3V0ZWQgYWZ0ZXIgdGhhdCB0aGUgZm4gaXMgYWRkZWQgdG8gdGhlIGJhdGNoLlxuICAgICAgICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBkb25lIGJlZm9yZSwgc2luY2Ugd2UncmUgY2hlY2tpbmcgdGhlIHNpemUgb2YgdGhlIGJhdGNoIHRvIGJlIDAuXG4gICAgICAgICAgICBwcm9jZXNzQmF0Y2hBc3luYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgYmF0Y2guYWRkKGxldmVsLCBmbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0JhdGNoKCkge1xuICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IGJhdGNoLCBhbmQgY3JlYXRlIGEgbmV3IGJhdGNoIHNvIHRoYXQgaW5jb21pbmcgZnVuY3Rpb25zIGFyZSBub3QgYWRkZWQgaW50byB0aGUgY3VycmVudGx5IHByb2Nlc3NpbmcgYmF0Y2guXG4gICAgICAgIC8vIENvbnRpbnVlIHByb2Nlc3NpbmcgdW50aWwgdGhlIHRvcC1sZXZlbCBiYXRjaCBpcyBlbXB0eSAoZnVuY3Rpb25zIG1heSBiZSBhZGRlZCB0byB0aGUgbmV3IGJhdGNoIHdoaWxlIHByb2Nlc3NpbmcsIGFuZCBzbyBvbikuXG4gICAgICAgIGlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgIHdoaWxlIChiYXRjaC5zaXplKCkpIHtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzaW5nQmF0Y2ggPSBiYXRjaDtcbiAgICAgICAgICAgIGJhdGNoID0gQmF0Y2goKTtcbiAgICAgICAgICAgIHByb2Nlc3NpbmdCYXRjaC5wcm9jZXNzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9yY2VQcm9jZXNzQmF0Y2gobG9jYWxBc3luY1Byb2Nlc3MpIHtcbiAgICAgICAgaWYgKGlzUHJvY2Vzc2luZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYobG9jYWxBc3luY1Byb2Nlc3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbG9jYWxBc3luY1Byb2Nlc3MgPSBhc3luY1Byb2Nlc3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZihhc3luY0ZyYW1lSGFuZGxlcikge1xuICAgICAgICAgICAgY2FuY2VsRnJhbWUoYXN5bmNGcmFtZUhhbmRsZXIpO1xuICAgICAgICAgICAgYXN5bmNGcmFtZUhhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYobG9jYWxBc3luY1Byb2Nlc3MpIHtcbiAgICAgICAgICAgIHByb2Nlc3NCYXRjaEFzeW5jKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzQmF0Y2goKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NCYXRjaEFzeW5jKCkge1xuICAgICAgICBhc3luY0ZyYW1lSGFuZGxlciA9IHJlcXVlc3RGcmFtZShwcm9jZXNzQmF0Y2gpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyQmF0Y2goKSB7XG4gICAgICAgIGJhdGNoICAgICAgICAgICA9IHt9O1xuICAgICAgICBiYXRjaFNpemUgICAgICAgPSAwO1xuICAgICAgICB0b3BMZXZlbCAgICAgICAgPSAwO1xuICAgICAgICBib3R0b21MZXZlbCAgICAgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbmNlbEZyYW1lKGxpc3RlbmVyKSB7XG4gICAgICAgIC8vIHZhciBjYW5jZWwgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cuY2xlYXJUaW1lb3V0O1xuICAgICAgICB2YXIgY2FuY2VsID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2FuY2VsKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0RnJhbWUoY2FsbGJhY2spIHtcbiAgICAgICAgLy8gdmFyIHJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uKGZuKSB7IHJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgMjApOyB9O1xuICAgICAgICB2YXIgcmFmID0gZnVuY3Rpb24oZm4pIHsgcmV0dXJuIHNldFRpbWVvdXQoZm4sIDApOyB9O1xuICAgICAgICByZXR1cm4gcmFmKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGQ6IGFkZEZ1bmN0aW9uLFxuICAgICAgICBmb3JjZTogZm9yY2VQcm9jZXNzQmF0Y2hcbiAgICB9O1xufTtcblxuZnVuY3Rpb24gQmF0Y2goKSB7XG4gICAgdmFyIGJhdGNoICAgICAgID0ge307XG4gICAgdmFyIHNpemUgICAgICAgID0gMDtcbiAgICB2YXIgdG9wTGV2ZWwgICAgPSAwO1xuICAgIHZhciBib3R0b21MZXZlbCA9IDA7XG5cbiAgICBmdW5jdGlvbiBhZGQobGV2ZWwsIGZuKSB7XG4gICAgICAgIGlmKCFmbikge1xuICAgICAgICAgICAgZm4gPSBsZXZlbDtcbiAgICAgICAgICAgIGxldmVsID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxldmVsID4gdG9wTGV2ZWwpIHtcbiAgICAgICAgICAgIHRvcExldmVsID0gbGV2ZWw7XG4gICAgICAgIH0gZWxzZSBpZihsZXZlbCA8IGJvdHRvbUxldmVsKSB7XG4gICAgICAgICAgICBib3R0b21MZXZlbCA9IGxldmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIWJhdGNoW2xldmVsXSkge1xuICAgICAgICAgICAgYmF0Y2hbbGV2ZWxdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBiYXRjaFtsZXZlbF0ucHVzaChmbik7XG4gICAgICAgIHNpemUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgICAgICBmb3IodmFyIGxldmVsID0gYm90dG9tTGV2ZWw7IGxldmVsIDw9IHRvcExldmVsOyBsZXZlbCsrKSB7XG4gICAgICAgICAgICB2YXIgZm5zID0gYmF0Y2hbbGV2ZWxdO1xuXG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZuID0gZm5zW2ldO1xuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGQ6IGFkZCxcbiAgICAgICAgcHJvY2VzczogcHJvY2VzcyxcbiAgICAgICAgc2l6ZTogZ2V0U2l6ZVxuICAgIH07XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYXRjaC1wcm9jZXNzb3Ivc3JjL2JhdGNoLXByb2Nlc3Nvci5qc1xuLy8gbW9kdWxlIGlkID0gNDkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdXRpbHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG51dGlscy5nZXRPcHRpb24gPSBnZXRPcHRpb247XG5cbmZ1bmN0aW9uIGdldE9wdGlvbihvcHRpb25zLCBuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBvcHRpb25zW25hbWVdO1xuXG4gICAgaWYoKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmF0Y2gtcHJvY2Vzc29yL3NyYy91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gNDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcHJvcCA9IFwiX2VyZFwiO1xuXG5mdW5jdGlvbiBpbml0U3RhdGUoZWxlbWVudCkge1xuICAgIGVsZW1lbnRbcHJvcF0gPSB7fTtcbiAgICByZXR1cm4gZ2V0U3RhdGUoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXRlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudFtwcm9wXTtcbn1cblxuZnVuY3Rpb24gY2xlYW5TdGF0ZShlbGVtZW50KSB7XG4gICAgZGVsZXRlIGVsZW1lbnRbcHJvcF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXRTdGF0ZTogaW5pdFN0YXRlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICBjbGVhblN0YXRlOiBjbGVhblN0YXRlXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL3N0YXRlLWhhbmRsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQ5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFJlc2l6ZSBkZXRlY3Rpb24gc3RyYXRlZ3kgdGhhdCBpbmplY3RzIG9iamVjdHMgdG8gZWxlbWVudHMgaW4gb3JkZXIgdG8gZGV0ZWN0IHJlc2l6ZSBldmVudHMuXG4gKiBIZWF2aWx5IGluc3BpcmVkIGJ5OiBodHRwOi8vd3d3LmJhY2thbGxleWNvZGVyLmNvbS8yMDEzLzAzLzE4L2Nyb3NzLWJyb3dzZXItZXZlbnQtYmFzZWQtZWxlbWVudC1yZXNpemUtZGV0ZWN0aW9uL1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYnJvd3NlckRldGVjdG9yID0gcmVxdWlyZShcIi4uL2Jyb3dzZXItZGV0ZWN0b3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciByZXBvcnRlciAgICAgICAgPSBvcHRpb25zLnJlcG9ydGVyO1xuICAgIHZhciBiYXRjaFByb2Nlc3NvciAgPSBvcHRpb25zLmJhdGNoUHJvY2Vzc29yO1xuICAgIHZhciBnZXRTdGF0ZSAgICAgICAgPSBvcHRpb25zLnN0YXRlSGFuZGxlci5nZXRTdGF0ZTtcblxuICAgIGlmKCFyZXBvcnRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlcXVpcmVkIGRlcGVuZGVuY3k6IHJlcG9ydGVyLlwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcmVzaXplIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgaGF2ZSB0aGUgbGlzdGVuZXIgYWRkZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCByZXNpemUgZXZlbnQgb2YgdGhlIGVsZW1lbnQuIFRoZSBlbGVtZW50IHdpbGwgYmUgZ2l2ZW4gYXMgYSBwYXJhbWV0ZXIgdG8gdGhlIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmKCFnZXRPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgaXMgbm90IGRldGVjdGFibGUgYnkgdGhpcyBzdHJhdGVneS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsaXN0ZW5lclByb3h5KCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihicm93c2VyRGV0ZWN0b3IuaXNJRSg4KSkge1xuICAgICAgICAgICAgLy9JRSA4IGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0LCBidXQgc3VwcG9ydHMgdGhlIHJlc2l6ZSBldmVudCBkaXJlY3RseSBvbiBlbGVtZW50cy5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICBwcm94eTogbGlzdGVuZXJQcm94eVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoXCJvbnJlc2l6ZVwiLCBsaXN0ZW5lclByb3h5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBnZXRPYmplY3QoZWxlbWVudCk7XG4gICAgICAgICAgICBvYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbGlzdGVuZXJQcm94eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhbiBlbGVtZW50IGRldGVjdGFibGUgYW5kIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgZXZlbnRzLiBXaWxsIGNhbGwgdGhlIGNhbGxiYWNrIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVhZHkgdG8gYmUgbGlzdGVuZWQgZm9yIHJlc2l6ZSBjaGFuZ2VzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIG1ha2UgZGV0ZWN0YWJsZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGNoYW5nZXMuIFdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGVsZW1lbnQgYXMgZmlyc3QgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VEZXRlY3RhYmxlKG9wdGlvbnMsIGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZWxlbWVudDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcblxuICAgICAgICBmdW5jdGlvbiBpbmplY3RPYmplY3QoZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBPQkpFQ1RfU1RZTEUgPSBcImRpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYm9yZGVyOiBub25lOyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IG9wYWNpdHk6IDA7IHotaW5kZXg6IC0xMDAwOyBwb2ludGVyLWV2ZW50czogbm9uZTtcIjtcblxuICAgICAgICAgICAgLy9UaGUgdGFyZ2V0IGVsZW1lbnQgbmVlZHMgdG8gYmUgcG9zaXRpb25lZCAoZXZlcnl0aGluZyBleGNlcHQgc3RhdGljKSBzbyB0aGUgYWJzb2x1dGUgcG9zaXRpb25lZCBvYmplY3Qgd2lsbCBiZSBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgZWxlbWVudC5cblxuICAgICAgICAgICAgLy8gUG9zaXRpb24gYWx0ZXJpbmcgbWF5IGJlIHBlcmZvcm1lZCBkaXJlY3RseSBvciBvbiBvYmplY3QgbG9hZCwgZGVwZW5kaW5nIG9uIGlmIHN0eWxlIHJlc29sdXRpb24gaXMgcG9zc2libGUgZGlyZWN0bHkgb3Igbm90LlxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQ2hlY2tQZXJmb3JtZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgbWF5IG5vdCB5ZXQgYmUgYXR0YWNoZWQgdG8gdGhlIERPTSwgYW5kIHRoZXJlZm9yZSB0aGUgc3R5bGUgb2JqZWN0IG1heSBiZSBlbXB0eSBpbiBzb21lIGJyb3dzZXJzLlxuICAgICAgICAgICAgLy8gU2luY2UgdGhlIHN0eWxlIG9iamVjdCBpcyBhIHJlZmVyZW5jZSwgaXQgd2lsbCBiZSB1cGRhdGVkIGFzIHNvb24gYXMgdGhlIGVsZW1lbnQgaXMgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkuc3RhcnRTaXplID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gbXV0YXRlRG9tKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFsdGVyUG9zaXRpb25TdHlsZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHN0eWxlLnBvc2l0aW9uID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlUmVsYXRpdmVTdHlsZXMgPSBmdW5jdGlvbihyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TnVtZXJpY2FsVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1teLVxcZFxcLl0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgIT09IFwiYXV0b1wiICYmIGdldE51bWVyaWNhbFZhbHVlKHZhbHVlKSAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIud2FybihcIkFuIGVsZW1lbnQgdGhhdCBpcyBwb3NpdGlvbmVkIHN0YXRpYyBoYXMgc3R5bGUuXCIgKyBwcm9wZXJ0eSArIFwiPVwiICsgdmFsdWUgKyBcIiB3aGljaCBpcyBpZ25vcmVkIGR1ZSB0byB0aGUgc3RhdGljIHBvc2l0aW9uaW5nLiBUaGUgZWxlbWVudCB3aWxsIG5lZWQgdG8gYmUgcG9zaXRpb25lZCByZWxhdGl2ZSwgc28gdGhlIHN0eWxlLlwiICsgcHJvcGVydHkgKyBcIiB3aWxsIGJlIHNldCB0byAwLiBFbGVtZW50OiBcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0NoZWNrIHNvIHRoYXQgdGhlcmUgYXJlIG5vIGFjY2lkZW50YWwgc3R5bGVzIHRoYXQgd2lsbCBtYWtlIHRoZSBlbGVtZW50IHN0eWxlZCBkaWZmZXJlbnRseSBub3cgdGhhdCBpcyBpcyByZWxhdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vSWYgdGhlcmUgYXJlIGFueSwgc2V0IHRoZW0gdG8gMCAodGhpcyBzaG91bGQgYmUgb2theSB3aXRoIHRoZSB1c2VyIHNpbmNlIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGRpZCBub3RoaW5nIGJlZm9yZSBbc2luY2UgdGhlIGVsZW1lbnQgd2FzIHBvc2l0aW9uZWQgc3RhdGljXSBhbnl3YXkpLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJyaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJib3R0b21cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwibGVmdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uT2JqZWN0TG9hZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9iamVjdCBoYXMgYmVlbiBsb2FkZWQsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGVsZW1lbnQgbm93IGlzIGd1YXJhbnRlZWQgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvbkNoZWNrUGVyZm9ybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlclBvc2l0aW9uU3R5bGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXREb2N1bWVudChlbGVtZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9PcGVyYSAxMiBzZWVtIHRvIGNhbGwgdGhlIG9iamVjdC5vbmxvYWQgYmVmb3JlIHRoZSBhY3R1YWwgZG9jdW1lbnQgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vU28gaWYgaXQgaXMgbm90IHByZXNlbnQsIHBvbGwgaXQgd2l0aCBhbiB0aW1lb3V0IHVudGlsIGl0IGlzIHByZXNlbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IENvdWxkIG1heWJlIGJlIGhhbmRsZWQgYmV0dGVyIHdpdGggb2JqZWN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSBvciBzaW1pbGFyLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWVsZW1lbnQuY29udGVudERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBjaGVja0Zvck9iamVjdERvY3VtZW50KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXREb2N1bWVudChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZWxlbWVudC5jb250ZW50RG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy9NdXRhdGluZyB0aGUgb2JqZWN0IGVsZW1lbnQgaGVyZSBzZWVtcyB0byBmaXJlIGFub3RoZXIgbG9hZCBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgLy9NdXRhdGluZyB0aGUgaW5uZXIgZG9jdW1lbnQgb2YgdGhlIG9iamVjdCBlbGVtZW50IGlzIGZpbmUgdGhvdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0RWxlbWVudCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgdGhlIHN0eWxlIGVsZW1lbnQgdG8gYmUgYWRkZWQgdG8gdGhlIG9iamVjdC5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RG9jdW1lbnQob2JqZWN0RWxlbWVudCwgZnVuY3Rpb24gb25PYmplY3REb2N1bWVudFJlYWR5KG9iamVjdERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL05vdGlmeSB0aGF0IHRoZSBlbGVtZW50IGlzIHJlYWR5IHRvIGJlIGxpc3RlbmVkIHRvLlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IG1heSBiZSBkZXRhY2hlZCBmcm9tIHRoZSBET00sIGFuZCBzb21lIGJyb3dzZXJzIGRvZXMgbm90IHN1cHBvcnQgc3R5bGUgcmVzb2x2aW5nIG9mIGRldGFjaGVkIGVsZW1lbnRzLlxuICAgICAgICAgICAgICAgIC8vIFRoZSBhbHRlclBvc2l0aW9uU3R5bGVzIG5lZWRzIHRvIGJlIGRlbGF5ZWQgdW50aWwgd2Uga25vdyB0aGUgZWxlbWVudCBoYXMgYmVlbiBhdHRhY2hlZCB0byB0aGUgRE9NICh3aGljaCB3ZSBhcmUgc3VyZSBvZiB3aGVuIHRoZSBvbk9iamVjdExvYWQgaGFzIGJlZW4gZmlyZWQpLCBpZiBzdHlsZSByZXNvbHV0aW9uIGlzIG5vdCBwb3NzaWJsZS5cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJQb3NpdGlvblN0eWxlcyhzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hlY2tQZXJmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vQWRkIGFuIG9iamVjdCBlbGVtZW50IGFzIGEgY2hpbGQgdG8gdGhlIHRhcmdldCBlbGVtZW50IHRoYXQgd2lsbCBiZSBsaXN0ZW5lZCB0byBmb3IgcmVzaXplIGV2ZW50cy5cbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICBvYmplY3Quc3R5bGUuY3NzVGV4dCA9IE9CSkVDVF9TVFlMRTtcbiAgICAgICAgICAgICAgICBvYmplY3QudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBvYmplY3QudHlwZSA9IFwidGV4dC9odG1sXCI7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm9ubG9hZCA9IG9uT2JqZWN0TG9hZDtcblxuICAgICAgICAgICAgICAgIC8vU2FmYXJpOiBUaGlzIG11c3Qgb2NjdXIgYmVmb3JlIGFkZGluZyB0aGUgb2JqZWN0IHRvIHRoZSBET00uXG4gICAgICAgICAgICAgICAgLy9JRTogRG9lcyBub3QgbGlrZSB0aGF0IHRoaXMgaGFwcGVucyBiZWZvcmUsIGV2ZW4gaWYgaXQgaXMgYWxzbyBhZGRlZCBhZnRlci5cbiAgICAgICAgICAgICAgICBpZighYnJvd3NlckRldGVjdG9yLmlzSUUoKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0ID0gb2JqZWN0O1xuXG4gICAgICAgICAgICAgICAgLy9JRTogVGhpcyBtdXN0IG9jY3VyIGFmdGVyIGFkZGluZyB0aGUgb2JqZWN0IHRvIHRoZSBET00uXG4gICAgICAgICAgICAgICAgaWYoYnJvd3NlckRldGVjdG9yLmlzSUUoKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGJhdGNoUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgYmF0Y2hQcm9jZXNzb3IuYWRkKG11dGF0ZURvbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG11dGF0ZURvbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoYnJvd3NlckRldGVjdG9yLmlzSUUoOCkpIHtcbiAgICAgICAgICAgIC8vSUUgOCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgcHJvcGVybHkuIEx1Y2tpbHkgdGhleSBkbyBzdXBwb3J0IHRoZSByZXNpemUgZXZlbnQuXG4gICAgICAgICAgICAvL1NvIGRvIG5vdCBpbmplY3QgdGhlIG9iamVjdCBhbmQgbm90aWZ5IHRoYXQgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSByZWFkeSB0byBiZSBsaXN0ZW5lZCB0by5cbiAgICAgICAgICAgIC8vVGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSByZXNpemUgZXZlbnQgaXMgYXR0YWNoZWQgaW4gdGhlIHV0aWxzLmFkZExpc3RlbmVyIGluc3RlYWQuXG4gICAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluamVjdE9iamVjdChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjaGlsZCBvYmplY3Qgb2YgdGhlIHRhcmdldCBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgb2JqZWN0IGVsZW1lbnQgb2YgdGhlIHRhcmdldC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRPYmplY3QoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaW5zdGFsbChlbGVtZW50KSB7XG4gICAgICAgIGlmKGJyb3dzZXJEZXRlY3Rvci5pc0lFKDgpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmRldGFjaEV2ZW50KFwib25yZXNpemVcIiwgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0LnByb3h5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZ2V0T2JqZWN0KGVsZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIG1ha2VEZXRlY3RhYmxlOiBtYWtlRGV0ZWN0YWJsZSxcbiAgICAgICAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICAgICAgICB1bmluc3RhbGw6IHVuaW5zdGFsbFxuICAgIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2RldGVjdGlvbi1zdHJhdGVneS9vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIFJlc2l6ZSBkZXRlY3Rpb24gc3RyYXRlZ3kgdGhhdCBpbmplY3RzIGRpdnMgdG8gZWxlbWVudHMgaW4gb3JkZXIgdG8gZGV0ZWN0IHJlc2l6ZSBldmVudHMgb24gc2Nyb2xsIGV2ZW50cy5cbiAqIEhlYXZpbHkgaW5zcGlyZWQgYnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJjai9jc3MtZWxlbWVudC1xdWVyaWVzL2Jsb2IvbWFzdGVyL3NyYy9SZXNpemVTZW5zb3IuanNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvbi11dGlsc1wiKS5mb3JFYWNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zICAgICAgICAgICAgID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgcmVwb3J0ZXIgICAgICAgID0gb3B0aW9ucy5yZXBvcnRlcjtcbiAgICB2YXIgYmF0Y2hQcm9jZXNzb3IgID0gb3B0aW9ucy5iYXRjaFByb2Nlc3NvcjtcbiAgICB2YXIgZ2V0U3RhdGUgICAgICAgID0gb3B0aW9ucy5zdGF0ZUhhbmRsZXIuZ2V0U3RhdGU7XG4gICAgdmFyIGhhc1N0YXRlICAgICAgICA9IG9wdGlvbnMuc3RhdGVIYW5kbGVyLmhhc1N0YXRlO1xuICAgIHZhciBpZEhhbmRsZXIgICAgICAgPSBvcHRpb25zLmlkSGFuZGxlcjtcblxuICAgIGlmICghYmF0Y2hQcm9jZXNzb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByZXF1aXJlZCBkZXBlbmRlbmN5OiBiYXRjaFByb2Nlc3NvclwiKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcG9ydGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcmVxdWlyZWQgZGVwZW5kZW5jeTogcmVwb3J0ZXIuXCIpO1xuICAgIH1cblxuICAgIC8vVE9ETzogQ291bGQgdGhpcyBwZXJoYXBzIGJlIGRvbmUgYXQgaW5zdGFsbGF0aW9uIHRpbWU/XG4gICAgdmFyIHNjcm9sbGJhclNpemVzID0gZ2V0U2Nyb2xsYmFyU2l6ZXMoKTtcblxuICAgIC8vIEluamVjdCB0aGUgc2Nyb2xsYmFyIHN0eWxpbmcgdGhhdCBwcmV2ZW50cyB0aGVtIGZyb20gYXBwZWFyaW5nIHNvbWV0aW1lcyBpbiBDaHJvbWUuXG4gICAgLy8gVGhlIGluamVjdGVkIGNvbnRhaW5lciBuZWVkcyB0byBoYXZlIGEgY2xhc3MsIHNvIHRoYXQgaXQgbWF5IGJlIHN0eWxlZCB3aXRoIENTUyAocHNldWRvIGVsZW1lbnRzKS5cbiAgICB2YXIgc3R5bGVJZCA9IFwiZXJkX3Njcm9sbF9kZXRlY3Rpb25fc2Nyb2xsYmFyX3N0eWxlXCI7XG4gICAgdmFyIGRldGVjdGlvbkNvbnRhaW5lckNsYXNzID0gXCJlcmRfc2Nyb2xsX2RldGVjdGlvbl9jb250YWluZXJcIjtcbiAgICBpbmplY3RTY3JvbGxTdHlsZShzdHlsZUlkLCBkZXRlY3Rpb25Db250YWluZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplcygpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gNTAwO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gNTAwO1xuXG4gICAgICAgIHZhciBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNoaWxkLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IFwiICsgd2lkdGgqMiArIFwicHg7IGhlaWdodDogXCIgKyBoZWlnaHQqMiArIFwicHg7IHZpc2liaWxpdHk6IGhpZGRlbjsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1wiO1xuXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246IGFic29sdXRlOyB3aWR0aDogXCIgKyB3aWR0aCArIFwicHg7IGhlaWdodDogXCIgKyBoZWlnaHQgKyBcInB4OyBvdmVyZmxvdzogc2Nyb2xsOyB2aXNpYmlsaXR5OiBub25lOyB0b3A6IFwiICsgLXdpZHRoKjMgKyBcInB4OyBsZWZ0OiBcIiArIC1oZWlnaHQqMyArIFwicHg7IHZpc2liaWxpdHk6IGhpZGRlbjsgbWFyZ2luOiAwOyBwYWRkaW5nOiAwO1wiO1xuXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjaGlsZCk7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xuXG4gICAgICAgIHZhciB3aWR0aFNpemUgPSB3aWR0aCAtIGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIGhlaWdodFNpemUgPSBoZWlnaHQgLSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoU2l6ZSxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0U2l6ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluamVjdFNjcm9sbFN0eWxlKHN0eWxlSWQsIGNvbnRhaW5lckNsYXNzKSB7XG4gICAgICAgIGZ1bmN0aW9uIGluamVjdFN0eWxlKHN0eWxlLCBtZXRob2QpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZCB8fCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICAgICAgc3R5bGVFbGVtZW50LmlubmVySFRNTCA9IHN0eWxlO1xuICAgICAgICAgICAgc3R5bGVFbGVtZW50LmlkID0gc3R5bGVJZDtcbiAgICAgICAgICAgIG1ldGhvZChzdHlsZUVsZW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3R5bGVJZCkpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJBbmltYXRpb25DbGFzcyA9IGNvbnRhaW5lckNsYXNzICsgXCJfYW5pbWF0aW9uXCI7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyQW5pbWF0aW9uQWN0aXZlQ2xhc3MgPSBjb250YWluZXJDbGFzcyArIFwiX2FuaW1hdGlvbl9hY3RpdmVcIjtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IFwiLyogQ3JlYXRlZCBieSB0aGUgZWxlbWVudC1yZXNpemUtZGV0ZWN0b3IgbGlicmFyeS4gKi9cXG5cIjtcbiAgICAgICAgICAgIHN0eWxlICs9IFwiLlwiICsgY29udGFpbmVyQ2xhc3MgKyBcIiA+IGRpdjo6LXdlYmtpdC1zY3JvbGxiYXIgeyBkaXNwbGF5OiBub25lOyB9XFxuXFxuXCI7XG4gICAgICAgICAgICBzdHlsZSArPSBcIi5cIiArIGNvbnRhaW5lckFuaW1hdGlvbkFjdGl2ZUNsYXNzICsgXCIgeyAtd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMC4xczsgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjFzOyAtd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBcIiArIGNvbnRhaW5lckFuaW1hdGlvbkNsYXNzICsgXCI7IGFuaW1hdGlvbi1uYW1lOiBcIiArIGNvbnRhaW5lckFuaW1hdGlvbkNsYXNzICsgXCI7IH1cXG5cIjtcbiAgICAgICAgICAgIHN0eWxlICs9IFwiQC13ZWJraXQta2V5ZnJhbWVzIFwiICsgY29udGFpbmVyQW5pbWF0aW9uQ2xhc3MgKyAgXCIgeyAwJSB7IG9wYWNpdHk6IDE7IH0gNTAlIHsgb3BhY2l0eTogMDsgfSAxMDAlIHsgb3BhY2l0eTogMTsgfSB9XFxuXCI7XG4gICAgICAgICAgICBzdHlsZSArPSBcIkBrZXlmcmFtZXMgXCIgKyBjb250YWluZXJBbmltYXRpb25DbGFzcyArICAgICAgICAgIFwiIHsgMCUgeyBvcGFjaXR5OiAxOyB9IDUwJSB7IG9wYWNpdHk6IDA7IH0gMTAwJSB7IG9wYWNpdHk6IDE7IH0gfVwiO1xuICAgICAgICAgICAgaW5qZWN0U3R5bGUoc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQW5pbWF0aW9uQ2xhc3MoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSBcIiBcIiArIGRldGVjdGlvbkNvbnRhaW5lckNsYXNzICsgXCJfYW5pbWF0aW9uX2FjdGl2ZVwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KGVsLCBuYW1lLCBjYikge1xuICAgICAgICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBjYik7XG4gICAgICAgIH0gZWxzZSBpZihlbC5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgZWwuYXR0YWNoRXZlbnQoXCJvblwiICsgbmFtZSwgY2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKFwiW3Njcm9sbF0gRG9uJ3Qga25vdyBob3cgdG8gYWRkIGV2ZW50IGxpc3RlbmVycy5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVFdmVudChlbCwgbmFtZSwgY2IpIHtcbiAgICAgICAgaWYgKGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgY2IpO1xuICAgICAgICB9IGVsc2UgaWYoZWwuZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIGVsLmRldGFjaEV2ZW50KFwib25cIiArIG5hbWUsIGNiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIltzY3JvbGxdIERvbid0IGtub3cgaG93IHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXhwYW5kRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2hyaW5rRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHJlc2l6ZSBldmVudCBsaXN0ZW5lciB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGhhdmUgdGhlIGxpc3RlbmVyIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciBjYWxsYmFjayB0byBiZSBjYWxsZWQgZm9yIGVhY2ggcmVzaXplIGV2ZW50IG9mIHRoZSBlbGVtZW50LiBUaGUgZWxlbWVudCB3aWxsIGJlIGdpdmVuIGFzIGEgcGFyYW1ldGVyIHRvIHRoZSBsaXN0ZW5lciBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcihlbGVtZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gZ2V0U3RhdGUoZWxlbWVudCkubGlzdGVuZXJzO1xuXG4gICAgICAgIGlmICghbGlzdGVuZXJzLnB1c2gpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhZGQgbGlzdGVuZXIgdG8gYW4gZWxlbWVudCB0aGF0IGlzIG5vdCBkZXRlY3RhYmxlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhbiBlbGVtZW50IGRldGVjdGFibGUgYW5kIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgZXZlbnRzLiBXaWxsIGNhbGwgdGhlIGNhbGxiYWNrIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVhZHkgdG8gYmUgbGlzdGVuZWQgZm9yIHJlc2l6ZSBjaGFuZ2VzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIG1ha2UgZGV0ZWN0YWJsZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGNoYW5nZXMuIFdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGVsZW1lbnQgYXMgZmlyc3QgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VEZXRlY3RhYmxlKG9wdGlvbnMsIGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZWxlbWVudDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGFyZ3MudW5zaGlmdChpZEhhbmRsZXIuZ2V0KGVsZW1lbnQpLCBcIlNjcm9sbDogXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBvcnRlci5sb2cuYXBwbHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIubG9nLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIubG9nKGFyZ3NbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNEZXRhY2hlZChlbGVtZW50KSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0luRG9jdW1lbnQoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50ID09PSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keSB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keS5jb250YWlucyhlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc0luRG9jdW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlyZUZveCByZXR1cm5zIG51bGwgc3R5bGUgaW4gaGlkZGVuIGlmcmFtZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd25yL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL2lzc3Vlcy82OCBhbmQgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Nzk1NTIwXG4gICAgICAgICAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNVbnJlbmRlcmVkKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbmVkIGNvbnRhaW5lciBzaW5jZSB0aGUgdG9wIGxldmVsIGNvbnRhaW5lciBpcyBkaXNwbGF5OiBpbmxpbmUuXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZ2V0U3RhdGUoZWxlbWVudCkuY29udGFpbmVyLmNoaWxkTm9kZXNbMF07XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuICAgICAgICAgICAgcmV0dXJuICFzdHlsZS53aWR0aCB8fCBzdHlsZS53aWR0aC5pbmRleE9mKFwicHhcIikgPT09IC0xOyAvL0NhbiBvbmx5IGNvbXB1dGUgcGl4ZWwgdmFsdWUgd2hlbiByZW5kZXJlZC5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFN0eWxlKCkge1xuICAgICAgICAgICAgLy8gU29tZSBicm93c2VycyBvbmx5IGZvcmNlIGxheW91dHMgd2hlbiBhY3R1YWxseSByZWFkaW5nIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIG9mIHRoZSBzdHlsZSBvYmplY3QsIHNvIG1ha2Ugc3VyZSB0aGF0IHRoZXkgYXJlIGFsbCByZWFkIGhlcmUsXG4gICAgICAgICAgICAvLyBzbyB0aGF0IHRoZSB1c2VyIG9mIHRoZSBmdW5jdGlvbiBjYW4gYmUgc3VyZSB0aGF0IGl0IHdpbGwgcGVyZm9ybSB0aGUgbGF5b3V0IGhlcmUsIGluc3RlYWQgb2YgbGF0ZXIgKGltcG9ydGFudCBmb3IgYmF0Y2hpbmcpLlxuICAgICAgICAgICAgdmFyIGVsZW1lbnRTdHlsZSAgICAgICAgICAgID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgc3R5bGUgICAgICAgICAgICAgICAgICAgPSB7fTtcbiAgICAgICAgICAgIHN0eWxlLnBvc2l0aW9uICAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS5wb3NpdGlvbjtcbiAgICAgICAgICAgIHN0eWxlLndpZHRoICAgICAgICAgICAgICAgICA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICBzdHlsZS5oZWlnaHQgICAgICAgICAgICAgICAgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIHN0eWxlLnRvcCAgICAgICAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS50b3A7XG4gICAgICAgICAgICBzdHlsZS5yaWdodCAgICAgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUucmlnaHQ7XG4gICAgICAgICAgICBzdHlsZS5ib3R0b20gICAgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUuYm90dG9tO1xuICAgICAgICAgICAgc3R5bGUubGVmdCAgICAgICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLmxlZnQ7XG4gICAgICAgICAgICBzdHlsZS53aWR0aENTUyAgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUud2lkdGg7XG4gICAgICAgICAgICBzdHlsZS5oZWlnaHRDU1MgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUuaGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3RvcmVTdGFydFNpemUoKSB7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZSgpO1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkuc3RhcnRTaXplID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlYnVnKFwiRWxlbWVudCBzdGFydCBzaXplXCIsIGdldFN0YXRlKGVsZW1lbnQpLnN0YXJ0U2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbml0TGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkubGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdG9yZVN0eWxlKCkge1xuICAgICAgICAgICAgZGVidWcoXCJzdG9yZVN0eWxlIGludm9rZWQuXCIpO1xuICAgICAgICAgICAgaWYgKCFnZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoKTtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLnN0eWxlID0gc3R5bGU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdG9yZUN1cnJlbnRTaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmxhc3RXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkubGFzdEhlaWdodCAgPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRFeHBhbmRDaGlsZEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEV4cGFuZEVsZW1lbnQoZWxlbWVudCkuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFdpZHRoT2Zmc2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIDIgKiBzY3JvbGxiYXJTaXplcy53aWR0aCArIDE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRIZWlnaHRPZmZzZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gMiAqIHNjcm9sbGJhclNpemVzLmhlaWdodCArIDE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRFeHBhbmRXaWR0aCh3aWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpZHRoICsgMTAgKyBnZXRXaWR0aE9mZnNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RXhwYW5kSGVpZ2h0KGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGhlaWdodCArIDEwICsgZ2V0SGVpZ2h0T2Zmc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTaHJpbmtXaWR0aCh3aWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpZHRoICogMiArIGdldFdpZHRoT2Zmc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTaHJpbmtIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0ICogMiArIGdldEhlaWdodE9mZnNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcG9zaXRpb25TY3JvbGxiYXJzKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBleHBhbmQgICAgICAgICAgPSBnZXRFeHBhbmRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHNocmluayAgICAgICAgICA9IGdldFNocmlua0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgZXhwYW5kV2lkdGggICAgID0gZ2V0RXhwYW5kV2lkdGgod2lkdGgpO1xuICAgICAgICAgICAgdmFyIGV4cGFuZEhlaWdodCAgICA9IGdldEV4cGFuZEhlaWdodChoZWlnaHQpO1xuICAgICAgICAgICAgdmFyIHNocmlua1dpZHRoICAgICA9IGdldFNocmlua1dpZHRoKHdpZHRoKTtcbiAgICAgICAgICAgIHZhciBzaHJpbmtIZWlnaHQgICAgPSBnZXRTaHJpbmtIZWlnaHQoaGVpZ2h0KTtcbiAgICAgICAgICAgIGV4cGFuZC5zY3JvbGxMZWZ0ICAgPSBleHBhbmRXaWR0aDtcbiAgICAgICAgICAgIGV4cGFuZC5zY3JvbGxUb3AgICAgPSBleHBhbmRIZWlnaHQ7XG4gICAgICAgICAgICBzaHJpbmsuc2Nyb2xsTGVmdCAgID0gc2hyaW5rV2lkdGg7XG4gICAgICAgICAgICBzaHJpbmsuc2Nyb2xsVG9wICAgID0gc2hyaW5rSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5qZWN0Q29udGFpbmVyRWxlbWVudCgpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXI7XG5cbiAgICAgICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyICAgICAgICAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lICAgICAgICAgPSBkZXRlY3Rpb25Db250YWluZXJDbGFzcztcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCAgICAgPSBcInZpc2liaWxpdHk6IGhpZGRlbjsgZGlzcGxheTogaW5saW5lOyB3aWR0aDogMHB4OyBoZWlnaHQ6IDBweDsgei1pbmRleDogLTE7IG92ZXJmbG93OiBoaWRkZW47IG1hcmdpbjogMDsgcGFkZGluZzogMDtcIjtcbiAgICAgICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgICAgICAgICAgYWRkQW5pbWF0aW9uQ2xhc3MoY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICB2YXIgb25BbmltYXRpb25TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25SZW5kZXJlZCAmJiBnZXRTdGF0ZShlbGVtZW50KS5vblJlbmRlcmVkKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFkZEV2ZW50KGNvbnRhaW5lciwgXCJhbmltYXRpb25zdGFydFwiLCBvbkFuaW1hdGlvblN0YXJ0KTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBldmVudCBoYW5kbGVyIGhlcmUgc28gdGhhdCB0aGV5IG1heSBiZSByZW1vdmVkIHdoZW4gdW5pbnN0YWxsIGlzIGNhbGxlZC5cbiAgICAgICAgICAgICAgICAvLyBTZWUgdW5pbnN0YWxsIGZ1bmN0aW9uIGZvciBhbiBleHBsYW5hdGlvbiB3aHkgaXQgaXMgbmVlZGVkLlxuICAgICAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uQW5pbWF0aW9uU3RhcnQgPSBvbkFuaW1hdGlvblN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5qZWN0U2Nyb2xsRWxlbWVudHMoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhbHRlclBvc2l0aW9uU3R5bGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0YXRlKGVsZW1lbnQpLnN0eWxlO1xuXG4gICAgICAgICAgICAgICAgaWYoc3R5bGUucG9zaXRpb24gPT09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlUmVsYXRpdmVTdHlsZXMgPSBmdW5jdGlvbihyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXROdW1lcmljYWxWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXi1cXGRcXC5dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9PSBcImF1dG9cIiAmJiBnZXROdW1lcmljYWxWYWx1ZSh2YWx1ZSkgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIud2FybihcIkFuIGVsZW1lbnQgdGhhdCBpcyBwb3NpdGlvbmVkIHN0YXRpYyBoYXMgc3R5bGUuXCIgKyBwcm9wZXJ0eSArIFwiPVwiICsgdmFsdWUgKyBcIiB3aGljaCBpcyBpZ25vcmVkIGR1ZSB0byB0aGUgc3RhdGljIHBvc2l0aW9uaW5nLiBUaGUgZWxlbWVudCB3aWxsIG5lZWQgdG8gYmUgcG9zaXRpb25lZCByZWxhdGl2ZSwgc28gdGhlIHN0eWxlLlwiICsgcHJvcGVydHkgKyBcIiB3aWxsIGJlIHNldCB0byAwLiBFbGVtZW50OiBcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wZXJ0eV0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vQ2hlY2sgc28gdGhhdCB0aGVyZSBhcmUgbm8gYWNjaWRlbnRhbCBzdHlsZXMgdGhhdCB3aWxsIG1ha2UgdGhlIGVsZW1lbnQgc3R5bGVkIGRpZmZlcmVudGx5IG5vdyB0aGF0IGlzIGlzIHJlbGF0aXZlLlxuICAgICAgICAgICAgICAgICAgICAvL0lmIHRoZXJlIGFyZSBhbnksIHNldCB0aGVtIHRvIDAgKHRoaXMgc2hvdWxkIGJlIG9rYXkgd2l0aCB0aGUgdXNlciBzaW5jZSB0aGUgc3R5bGUgcHJvcGVydGllcyBkaWQgbm90aGluZyBiZWZvcmUgW3NpbmNlIHRoZSBlbGVtZW50IHdhcyBwb3NpdGlvbmVkIHN0YXRpY10gYW55d2F5KS5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInJpZ2h0XCIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwiYm90dG9tXCIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwibGVmdFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExlZnRUb3BCb3R0b21SaWdodENzc1RleHQobGVmdCwgdG9wLCBib3R0b20sIHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9ICghbGVmdCA/IFwiMFwiIDogKGxlZnQgKyBcInB4XCIpKTtcbiAgICAgICAgICAgICAgICB0b3AgPSAoIXRvcCA/IFwiMFwiIDogKHRvcCArIFwicHhcIikpO1xuICAgICAgICAgICAgICAgIGJvdHRvbSA9ICghYm90dG9tID8gXCIwXCIgOiAoYm90dG9tICsgXCJweFwiKSk7XG4gICAgICAgICAgICAgICAgcmlnaHQgPSAoIXJpZ2h0ID8gXCIwXCIgOiAocmlnaHQgKyBcInB4XCIpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBcImxlZnQ6IFwiICsgbGVmdCArIFwiOyB0b3A6IFwiICsgdG9wICsgXCI7IHJpZ2h0OiBcIiArIHJpZ2h0ICsgXCI7IGJvdHRvbTogXCIgKyBib3R0b20gKyBcIjtcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVidWcoXCJJbmplY3RpbmcgZWxlbWVudHNcIik7XG5cbiAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBoYXMgYmVlbiB1bmluc3RhbGxlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFsdGVyUG9zaXRpb25TdHlsZXMoKTtcblxuICAgICAgICAgICAgdmFyIHJvb3RDb250YWluZXIgPSBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXI7XG5cbiAgICAgICAgICAgIGlmICghcm9vdENvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHJvb3RDb250YWluZXIgPSBpbmplY3RDb250YWluZXJFbGVtZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIER1ZSB0byB0aGlzIFdlYktpdCBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgwODA4IChjdXJyZW50bHkgZml4ZWQgaW4gQmxpbmssIGJ1dCBzdGlsbCBwcmVzZW50IGluIFdlYktpdCBicm93c2VycyBzdWNoIGFzIFNhZmFyaSksXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGluamVjdCB0d28gY29udGFpbmVycywgb25lIHRoYXQgaXMgd2lkdGgvaGVpZ2h0IDEwMCUgYW5kIGFub3RoZXIgdGhhdCBpcyBsZWZ0L3RvcCAtMXB4IHNvIHRoYXQgdGhlIGZpbmFsIGNvbnRhaW5lciBhbHdheXMgaXMgMXgxIHBpeGVscyBiaWdnZXIgdGhhblxuICAgICAgICAgICAgLy8gdGhlIHRhcmdldGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAvLyBXaGVuIHRoZSBidWcgaXMgcmVzb2x2ZWQsIFwiY29udGFpbmVyQ29udGFpbmVyXCIgbWF5IGJlIHJlbW92ZWQuXG5cbiAgICAgICAgICAgIC8vIFRoZSBvdXRlciBjb250YWluZXIgY2FuIG9jY2FzaW9uYWxseSBiZSBsZXNzIHdpZGUgdGhhbiB0aGUgdGFyZ2V0ZWQgd2hlbiBpbnNpZGUgaW5saW5lIGVsZW1lbnRzIGVsZW1lbnQgaW4gV2ViS2l0IChzZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1Mjk4MCkuXG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBubyBwcm9ibGVtIHNpbmNlIHRoZSBpbm5lciBjb250YWluZXIgZWl0aGVyIHdheSBtYWtlcyBzdXJlIHRoZSBpbmplY3RlZCBzY3JvbGwgZWxlbWVudHMgYXJlIGF0IGxlYXN0IDF4MSBweC5cblxuICAgICAgICAgICAgdmFyIHNjcm9sbGJhcldpZHRoICAgICAgICAgID0gc2Nyb2xsYmFyU2l6ZXMud2lkdGg7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsYmFySGVpZ2h0ICAgICAgICAgPSBzY3JvbGxiYXJTaXplcy5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyQ29udGFpbmVyU3R5bGUgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgZmxleDogbm9uZTsgb3ZlcmZsb3c6IGhpZGRlbjsgei1pbmRleDogLTE7IHZpc2liaWxpdHk6IGhpZGRlbjsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgbGVmdDogMHB4OyB0b3A6IDBweDtcIjtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJTdHlsZSAgICAgICAgICA9IFwicG9zaXRpb246IGFic29sdXRlOyBmbGV4OiBub25lOyBvdmVyZmxvdzogaGlkZGVuOyB6LWluZGV4OiAtMTsgdmlzaWJpbGl0eTogaGlkZGVuOyBcIiArIGdldExlZnRUb3BCb3R0b21SaWdodENzc1RleHQoLSgxICsgc2Nyb2xsYmFyV2lkdGgpLCAtKDEgKyBzY3JvbGxiYXJIZWlnaHQpLCAtc2Nyb2xsYmFySGVpZ2h0LCAtc2Nyb2xsYmFyV2lkdGgpO1xuICAgICAgICAgICAgdmFyIGV4cGFuZFN0eWxlICAgICAgICAgICAgID0gXCJwb3NpdGlvbjogYWJzb2x1dGU7IGZsZXg6IG5vbmU7IG92ZXJmbG93OiBzY3JvbGw7IHotaW5kZXg6IC0xOyB2aXNpYmlsaXR5OiBoaWRkZW47IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7XCI7XG4gICAgICAgICAgICB2YXIgc2hyaW5rU3R5bGUgICAgICAgICAgICAgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgZmxleDogbm9uZTsgb3ZlcmZsb3c6IHNjcm9sbDsgei1pbmRleDogLTE7IHZpc2liaWxpdHk6IGhpZGRlbjsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTtcIjtcbiAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZFN0eWxlICAgICAgICA9IFwicG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAwOyB0b3A6IDA7XCI7XG4gICAgICAgICAgICB2YXIgc2hyaW5rQ2hpbGRTdHlsZSAgICAgICAgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDIwMCU7IGhlaWdodDogMjAwJTtcIjtcblxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckNvbnRhaW5lciAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgICAgICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgZXhwYW5kICAgICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFyIGV4cGFuZENoaWxkICAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHZhciBzaHJpbmsgICAgICAgICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgc2hyaW5rQ2hpbGQgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgICAgICAvLyBTb21lIGJyb3dzZXJzIGNob2tlIG9uIHRoZSByZXNpemUgc3lzdGVtIGJlaW5nIHJ0bCwgc28gZm9yY2UgaXQgdG8gbHRyLiBodHRwczovL2dpdGh1Yi5jb20vd25yL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL2lzc3Vlcy81NlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgZGlyIHNob3VsZCBub3QgYmUgc2V0IG9uIHRoZSB0b3AgbGV2ZWwgY29udGFpbmVyIGFzIGl0IGFsdGVycyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaW4gc29tZSBicm93c2Vycy5cbiAgICAgICAgICAgIGNvbnRhaW5lckNvbnRhaW5lci5kaXIgICAgICAgICAgICAgID0gXCJsdHJcIjtcblxuICAgICAgICAgICAgY29udGFpbmVyQ29udGFpbmVyLnN0eWxlLmNzc1RleHQgICAgPSBjb250YWluZXJDb250YWluZXJTdHlsZTtcbiAgICAgICAgICAgIGNvbnRhaW5lckNvbnRhaW5lci5jbGFzc05hbWUgICAgICAgID0gZGV0ZWN0aW9uQ29udGFpbmVyQ2xhc3M7XG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lICAgICAgICAgICAgICAgICA9IGRldGVjdGlvbkNvbnRhaW5lckNsYXNzO1xuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmNzc1RleHQgICAgICAgICAgICAgPSBjb250YWluZXJTdHlsZTtcbiAgICAgICAgICAgIGV4cGFuZC5zdHlsZS5jc3NUZXh0ICAgICAgICAgICAgICAgID0gZXhwYW5kU3R5bGU7XG4gICAgICAgICAgICBleHBhbmRDaGlsZC5zdHlsZS5jc3NUZXh0ICAgICAgICAgICA9IGV4cGFuZENoaWxkU3R5bGU7XG4gICAgICAgICAgICBzaHJpbmsuc3R5bGUuY3NzVGV4dCAgICAgICAgICAgICAgICA9IHNocmlua1N0eWxlO1xuICAgICAgICAgICAgc2hyaW5rQ2hpbGQuc3R5bGUuY3NzVGV4dCAgICAgICAgICAgPSBzaHJpbmtDaGlsZFN0eWxlO1xuXG4gICAgICAgICAgICBleHBhbmQuYXBwZW5kQ2hpbGQoZXhwYW5kQ2hpbGQpO1xuICAgICAgICAgICAgc2hyaW5rLmFwcGVuZENoaWxkKHNocmlua0NoaWxkKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChleHBhbmQpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNocmluayk7XG4gICAgICAgICAgICBjb250YWluZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgICAgIHJvb3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gb25FeHBhbmRTY3JvbGwoKSB7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25FeHBhbmQgJiYgZ2V0U3RhdGUoZWxlbWVudCkub25FeHBhbmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gb25TaHJpbmtTY3JvbGwoKSB7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25TaHJpbmsgJiYgZ2V0U3RhdGUoZWxlbWVudCkub25TaHJpbmsoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkRXZlbnQoZXhwYW5kLCBcInNjcm9sbFwiLCBvbkV4cGFuZFNjcm9sbCk7XG4gICAgICAgICAgICBhZGRFdmVudChzaHJpbmssIFwic2Nyb2xsXCIsIG9uU2hyaW5rU2Nyb2xsKTtcblxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGV2ZW50IGhhbmRsZXJzIGhlcmUgc28gdGhhdCB0aGV5IG1heSBiZSByZW1vdmVkIHdoZW4gdW5pbnN0YWxsIGlzIGNhbGxlZC5cbiAgICAgICAgICAgIC8vIFNlZSB1bmluc3RhbGwgZnVuY3Rpb24gZm9yIGFuIGV4cGxhbmF0aW9uIHdoeSBpdCBpcyBuZWVkZWQuXG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vbkV4cGFuZFNjcm9sbCA9IG9uRXhwYW5kU2Nyb2xsO1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25TaHJpbmtTY3JvbGwgPSBvblNocmlua1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzQW5kUG9zaXRpb25FbGVtZW50cygpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkU2l6ZXMoZWxlbWVudCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZCAgICAgICAgICAgICA9IGdldEV4cGFuZENoaWxkRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgZXhwYW5kV2lkdGggICAgICAgICAgICAgPSBnZXRFeHBhbmRXaWR0aCh3aWR0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZEhlaWdodCAgICAgICAgICAgID0gZ2V0RXhwYW5kSGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUud2lkdGggICAgID0gZXhwYW5kV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUuaGVpZ2h0ICAgID0gZXhwYW5kSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVEZXRlY3RvckVsZW1lbnRzKGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggICAgICAgICAgID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ICAgICAgICAgID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIlN0b3JpbmcgY3VycmVudCBzaXplXCIsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIHNpemUgb2YgdGhlIGVsZW1lbnQgc3luYyBoZXJlLCBzbyB0aGF0IG11bHRpcGxlIHNjcm9sbCBldmVudHMgbWF5IGJlIGlnbm9yZWQgaW4gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgdGhlIGlmLWNoZWNrIGluIGhhbmRsZVNjcm9sbCBpcyB1c2VsZXNzLlxuICAgICAgICAgICAgICAgIHN0b3JlQ3VycmVudFNpemUoZWxlbWVudCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBkZWxheSB0aGUgcHJvY2Vzc2luZyBvZiB0aGUgYmF0Y2gsIHRoZXJlIGlzIGEgcmlzayB0aGF0IHVuaW5zdGFsbCBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlIHRoZSBiYXRjaCBnZXRzIHRvIGV4ZWN1dGUuXG4gICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIGNhbmNlbCB0aGUgZm4gZXhlY3V0aW9ucywgd2UgbmVlZCB0byBhZGQgYW4gdW5pbnN0YWxsIGd1YXJkIHRvIGFsbCBmbnMgb2YgdGhlIGJhdGNoLlxuXG4gICAgICAgICAgICAgICAgYmF0Y2hQcm9jZXNzb3IuYWRkKDAsIGZ1bmN0aW9uIHBlcmZvcm1VcGRhdGVDaGlsZFNpemVzKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBoYXMgYmVlbiB1bmluc3RhbGxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYXJlRWxlbWVudHNJbmplY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBjb250YWluZXIgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ICE9PSB3aWR0aCB8fCBoICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvcnRlci53YXJuKGlkSGFuZGxlci5nZXQoZWxlbWVudCksIFwiU2Nyb2xsOiBTaXplIGNoYW5nZWQgYmVmb3JlIHVwZGF0aW5nIGRldGVjdG9yIGVsZW1lbnRzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNoaWxkU2l6ZXMoZWxlbWVudCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMSwgZnVuY3Rpb24gdXBkYXRlU2Nyb2xsYmFycygpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZUVsZW1lbnRzSW5qZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgY29udGFpbmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uU2Nyb2xsYmFycyhlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZUVsZW1lbnRzSW5qZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBjb250YWluZXIgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhcmVFbGVtZW50c0luamVjdGVkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWdldFN0YXRlKGVsZW1lbnQpLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzSWZOZWVkZWQoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNGaXJzdE5vdGlmeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFN0YXRlKGVsZW1lbnQpLmxhc3ROb3RpZmllZFdpZHRoID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVidWcoXCJub3RpZnlMaXN0ZW5lcnNJZk5lZWRlZCBpbnZva2VkXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEb24ndCBub3RpZnkgdGhlIGlmIHRoZSBjdXJyZW50IHNpemUgaXMgdGhlIHN0YXJ0IHNpemUsIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCBub3RpZmljYXRpb24uXG4gICAgICAgICAgICAgICAgaWYgKGlzRmlyc3ROb3RpZnkoKSAmJiBzdGF0ZS5sYXN0V2lkdGggPT09IHN0YXRlLnN0YXJ0U2l6ZS53aWR0aCAmJiBzdGF0ZS5sYXN0SGVpZ2h0ID09PSBzdGF0ZS5zdGFydFNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWJ1ZyhcIk5vdCBub3RpZnlpbmc6IFNpemUgaXMgdGhlIHNhbWUgYXMgdGhlIHN0YXJ0IHNpemUsIGFuZCB0aGVyZSBoYXMgYmVlbiBubyBub3RpZmljYXRpb24geWV0LlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEb24ndCBub3RpZnkgaWYgdGhlIHNpemUgYWxyZWFkeSBoYXMgYmVlbiBub3RpZmllZC5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGFzdFdpZHRoID09PSBzdGF0ZS5sYXN0Tm90aWZpZWRXaWR0aCAmJiBzdGF0ZS5sYXN0SGVpZ2h0ID09PSBzdGF0ZS5sYXN0Tm90aWZpZWRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlYnVnKFwiTm90IG5vdGlmeWluZzogU2l6ZSBhbHJlYWR5IG5vdGlmaWVkXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgZGVidWcoXCJDdXJyZW50IHNpemUgbm90IG5vdGlmaWVkLCBub3RpZnlpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgc3RhdGUubGFzdE5vdGlmaWVkV2lkdGggPSBzdGF0ZS5sYXN0V2lkdGg7XG4gICAgICAgICAgICAgICAgc3RhdGUubGFzdE5vdGlmaWVkSGVpZ2h0ID0gc3RhdGUubGFzdEhlaWdodDtcbiAgICAgICAgICAgICAgICBmb3JFYWNoKGdldFN0YXRlKGVsZW1lbnQpLmxpc3RlbmVycywgZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJzdGFydGFuaW1hdGlvbiB0cmlnZ2VyZWQuXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5yZW5kZXJlZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIklnbm9yaW5nIHNpbmNlIGVsZW1lbnQgaXMgc3RpbGwgdW5yZW5kZXJlZC4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlYnVnKFwiRWxlbWVudCByZW5kZXJlZC5cIik7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZCA9IGdldEV4cGFuZEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIHNocmluayA9IGdldFNocmlua0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGV4cGFuZC5zY3JvbGxMZWZ0ID09PSAwIHx8IGV4cGFuZC5zY3JvbGxUb3AgPT09IDAgfHwgc2hyaW5rLnNjcm9sbExlZnQgPT09IDAgfHwgc2hyaW5rLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIlNjcm9sbGJhcnMgb3V0IG9mIHN5bmMuIFVwZGF0aW5nIGRldGVjdG9yIGVsZW1lbnRzLi4uXCIpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEZXRlY3RvckVsZW1lbnRzKG5vdGlmeUxpc3RlbmVyc0lmTmVlZGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVNjcm9sbCgpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIlNjcm9sbCBkZXRlY3RlZC5cIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNVbnJlbmRlcmVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVsZW1lbnQgaXMgc3RpbGwgdW5yZW5kZXJlZC4gU2tpcCB0aGlzIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJTY3JvbGwgZXZlbnQgZmlyZWQgd2hpbGUgdW5yZW5kZXJlZC4gSWdub3JpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgICAgIGlmICh3aWR0aCAhPT0gZ2V0U3RhdGUoZWxlbWVudCkubGFzdFdpZHRoIHx8IGhlaWdodCAhPT0gZ2V0U3RhdGUoZWxlbWVudCkubGFzdEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIkVsZW1lbnQgc2l6ZSBjaGFuZ2VkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGV0ZWN0b3JFbGVtZW50cyhub3RpZnlMaXN0ZW5lcnNJZk5lZWRlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJFbGVtZW50IHNpemUgaGFzIG5vdCBjaGFuZ2VkIChcIiArIHdpZHRoICsgXCJ4XCIgKyBoZWlnaHQgKyBcIikuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVidWcoXCJyZWdpc3Rlckxpc3RlbmVyc0FuZFBvc2l0aW9uRWxlbWVudHMgaW52b2tlZC5cIik7XG5cbiAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBoYXMgYmVlbiB1bmluc3RhbGxlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uUmVuZGVyZWQgPSBoYW5kbGVSZW5kZXI7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vbkV4cGFuZCA9IGhhbmRsZVNjcm9sbDtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uU2hyaW5rID0gaGFuZGxlU2Nyb2xsO1xuXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdGF0ZShlbGVtZW50KS5zdHlsZTtcbiAgICAgICAgICAgIHVwZGF0ZUNoaWxkU2l6ZXMoZWxlbWVudCwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaW5hbGl6ZURvbU11dGF0aW9uKCkge1xuICAgICAgICAgICAgZGVidWcoXCJmaW5hbGl6ZURvbU11dGF0aW9uIGludm9rZWQuXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdGF0ZShlbGVtZW50KS5zdHlsZTtcbiAgICAgICAgICAgIHN0b3JlQ3VycmVudFNpemUoZWxlbWVudCwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgICAgICBwb3NpdGlvblNjcm9sbGJhcnMoZWxlbWVudCwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkeSgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zdGFsbCgpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiSW5zdGFsbGluZy4uLlwiKTtcbiAgICAgICAgICAgIGluaXRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHN0b3JlU3RhcnRTaXplKCk7XG5cbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgwLCBzdG9yZVN0eWxlKTtcbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgxLCBpbmplY3RTY3JvbGxFbGVtZW50cyk7XG4gICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMiwgcmVnaXN0ZXJMaXN0ZW5lcnNBbmRQb3NpdGlvbkVsZW1lbnRzKTtcbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgzLCBmaW5hbGl6ZURvbU11dGF0aW9uKTtcbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCg0LCByZWFkeSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWJ1ZyhcIk1ha2luZyBkZXRlY3RhYmxlLi4uXCIpO1xuXG4gICAgICAgIGlmIChpc0RldGFjaGVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIkVsZW1lbnQgaXMgZGV0YWNoZWRcIik7XG5cbiAgICAgICAgICAgIGluamVjdENvbnRhaW5lckVsZW1lbnQoKTtcblxuICAgICAgICAgICAgZGVidWcoXCJXYWl0aW5nIHVudGlsIGVsZW1lbnQgaXMgYXR0YWNoZWQuLi5cIik7XG5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uUmVuZGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJFbGVtZW50IGlzIG5vdyBhdHRhY2hlZFwiKTtcbiAgICAgICAgICAgICAgICBpbnN0YWxsKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5zdGFsbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5pbnN0YWxsKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgLy8gVW5pbnN0YWxsIGhhcyBiZWVuIGNhbGxlZCBvbiBhIG5vbi1lcmQgZWxlbWVudC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuaW5zdGFsbCBtYXkgaGF2ZSBiZWVuIGNhbGxlZCBpbiB0aGUgZm9sbG93aW5nIHNjZW5hcmlvczpcbiAgICAgICAgLy8gKDEpIFJpZ2h0IGJldHdlZW4gdGhlIHN5bmMgY29kZSBhbmQgYXN5bmMgYmF0Y2ggKGhlcmUgc3RhdGUuYnVzeSA9IHRydWUsIGJ1dCBub3RoaW5nIGhhdmUgYmVlbiByZWdpc3RlcmVkIG9yIGluamVjdGVkKS5cbiAgICAgICAgLy8gKDIpIEluIHRoZSByZWFkeSBjYWxsYmFjayBvZiB0aGUgbGFzdCBsZXZlbCBvZiB0aGUgYmF0Y2ggYnkgYW5vdGhlciBlbGVtZW50IChoZXJlLCBzdGF0ZS5idXN5ID0gdHJ1ZSwgYnV0IGFsbCB0aGUgc3R1ZmYgaGFzIGJlZW4gaW5qZWN0ZWQpLlxuICAgICAgICAvLyAoMykgQWZ0ZXIgdGhlIGluc3RhbGxhdGlvbiBwcm9jZXNzIChoZXJlLCBzdGF0ZS5idXN5ID0gZmFsc2UgYW5kIGFsbCB0aGUgc3R1ZmYgaGFzIGJlZW4gaW5qZWN0ZWQpLlxuICAgICAgICAvLyBTbyB0byBiZSBvbiB0aGUgc2FmZSBzaWRlLCBsZXQncyBjaGVjayBmb3IgZWFjaCB0aGluZyBiZWZvcmUgcmVtb3ZpbmcuXG5cbiAgICAgICAgLy8gV2UgbmVlZCB0byByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVycywgYmVjYXVzZSBvdGhlcndpc2UgdGhlIGV2ZW50IG1pZ2h0IGZpcmUgb24gYW4gdW5pbnN0YWxsIGVsZW1lbnQgd2hpY2ggcmVzdWx0cyBpbiBhbiBlcnJvciB3aGVuIHRyeWluZyB0byBnZXQgdGhlIHN0YXRlIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICBzdGF0ZS5vbkV4cGFuZFNjcm9sbCAmJiByZW1vdmVFdmVudChnZXRFeHBhbmRFbGVtZW50KGVsZW1lbnQpLCBcInNjcm9sbFwiLCBzdGF0ZS5vbkV4cGFuZFNjcm9sbCk7XG4gICAgICAgIHN0YXRlLm9uU2hyaW5rU2Nyb2xsICYmIHJlbW92ZUV2ZW50KGdldFNocmlua0VsZW1lbnQoZWxlbWVudCksIFwic2Nyb2xsXCIsIHN0YXRlLm9uU2hyaW5rU2Nyb2xsKTtcbiAgICAgICAgc3RhdGUub25BbmltYXRpb25TdGFydCAmJiByZW1vdmVFdmVudChzdGF0ZS5jb250YWluZXIsIFwiYW5pbWF0aW9uc3RhcnRcIiwgc3RhdGUub25BbmltYXRpb25TdGFydCk7XG5cbiAgICAgICAgc3RhdGUuY29udGFpbmVyICYmIGVsZW1lbnQucmVtb3ZlQ2hpbGQoc3RhdGUuY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBtYWtlRGV0ZWN0YWJsZTogbWFrZURldGVjdGFibGUsXG4gICAgICAgIGFkZExpc3RlbmVyOiBhZGRMaXN0ZW5lcixcbiAgICAgICAgdW5pbnN0YWxsOiB1bmluc3RhbGxcbiAgICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9kZXRlY3Rpb24tc3RyYXRlZ3kvc2Nyb2xsLmpzXG4vLyBtb2R1bGUgaWQgPSA0OTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vRmllbGRTZXR0aW5ncy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0ZpZWxkU2V0dGluZ3MudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL0ZpZWxkU2V0dGluZ3MudnVlXG4vLyBtb2R1bGUgaWQgPSA0OTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cIi1teC0xXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZpbHRlciBteC0xIG1iLTJcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBhY3RpdmVUYWIgPT09ICdiYXNpY3MnIH1cIiBAY2xpY2sucHJldmVudD1cImFjdGl2ZVRhYiA9ICdiYXNpY3MnXCI+e3sgdHJhbnNsYXRlKCdjcC5iYXNpY3MnKSB9fTwvYT5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBhY3RpdmVUYWIgPT09ICd2aXNpYmlsaXR5JyB9XCIgQGNsaWNrLnByZXZlbnQ9XCJhY3RpdmVUYWIgPSAndmlzaWJpbGl0eSdcIj57eyB0cmFuc2xhdGUoJ2NwLnZpc2liaWxpdHknKSB9fTwvYT5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBhY3RpdmVUYWIgPT09ICdleHRyYXMnIH1cIiBAY2xpY2sucHJldmVudD1cImFjdGl2ZVRhYiA9ICdleHRyYXMnXCIgdi1pZj1cImhhc0V4dHJhc1wiPnt7IHRyYW5zbGF0ZSgnY3AuZXh0cmFzJykgfX08L2E+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YWIgcHVibGlzaC1maWVsZHNcIiB2LXNob3c9XCJhY3RpdmVUYWIgPT09ICdiYXNpY3MnXCI+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHAtMiBtLTAgdy0xLzJcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5kaXNwbGF5X25hbWUnKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuZGlzcGxheV9uYW1lX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJmaWVsZC5kaXNwbGF5XCIgdi1lbDpkaXNwbGF5IC8+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcC0yIG0tMCB3LTEvMlwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkX3ZhcmlhYmxlJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkX3ZhcmlhYmxlX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbCBtb25vXCIgdi1tb2RlbD1cImZpZWxkLm5hbWVcIiBAa2V5ZG93bj1cImlzTmFtZU1vZGlmaWVkID0gdHJ1ZVwiIDpkaXNhYmxlZD1cImZpZWxkLmlzTWV0YVwiIDp2LWZvY3VzPVwidHJ1ZVwiLz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBwLTIgbS0wXCIgdi1pZj1cImNhbkJlTG9jYWxpemVkXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmxvY2FsaXphYmxlJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDx0b2dnbGUtZmllbGR0eXBlIDpkYXRhLnN5bmM9XCJmaWVsZC5sb2NhbGl6YWJsZVwiPjwvdG9nZ2xlLWZpZWxkdHlwZT5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBwLTIgbS0wIG1hcmtkb3duLWZpZWxkdHlwZVwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLmluc3RydWN0aW9ucycpIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5maWVsZF9pbnN0cnVjdGlvbnNfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPlxuICAgICAgICAgICAgICAgIDxtYXJrZG93bi1maWVsZHR5cGUgOmRhdGEuc3luYz1cImZpZWxkLmluc3RydWN0aW9uc1wiPjwvbWFya2Rvd24tZmllbGR0eXBlPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHAtMiBtLTBcIiB2LWlmPVwiY2FuQmVWYWxpZGF0ZWRcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC52YWxpZGF0aW9uX3J1bGVzJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC52YWxpZGF0aW9uX2luc3RydWN0aW9ucycpIH19XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2xhcmF2ZWwuY29tL2RvY3MvNS4xL3ZhbGlkYXRpb24jYXZhaWxhYmxlLXZhbGlkYXRpb24tcnVsZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj57eyB0cmFuc2xhdGUoJ2NwLnZhbGlkYXRpb25faW5zdHJ1Y3Rpb25zX2xpbmtfdGV4dCcpIH19PC9hPi5cbiAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImZpZWxkLnZhbGlkYXRlXCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBwLTIgbS0wXCIgdi1pZj1cImNhbkhhdmVEZWZhdWx0XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZGVmYXVsdF92YWx1ZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgdHJhbnNsYXRlKCdjcC5maWVsZF9kZWZhdWx0X3ZhbHVlX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJmaWVsZC5kZWZhdWx0XCIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFiIHB1Ymxpc2gtZmllbGRzXCIgdi1zaG93PVwiYWN0aXZlVGFiID09PSAndmlzaWJpbGl0eSdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHAtMiBtLTBcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3Aud2lkdGgnKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHdpZHRoLXNlbGVjdG9yIDp2YWx1ZS5zeW5jPVwiZmllbGQud2lkdGhcIiBjbGFzcz1cImxhcmdlXCI+PC93aWR0aC1zZWxlY3Rvcj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBwLTIgbS0wXCIgdi1pZj1cInJvb3RcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5kaXNwbGF5X2NvbmRpdGlvbnMnKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuZGlzcGxheV9jb25kaXRpb25zX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8ZmllbGQtY29uZGl0aW9ucy1idWlsZGVyIDpkYXRhLnN5bmM9XCJmaWVsZC5jb25kaXRpb25zXCI+PC9maWVsZC1jb25kaXRpb25zLWJ1aWxkZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiBwdWJsaXNoLWZpZWxkc1wiIHYtc2hvdz1cImFjdGl2ZVRhYiA9PT0gJ2V4dHJhcydcIiB2LWlmPVwiaGFzRXh0cmFzXCI+XG5cbiAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJjb25maWdGaWVsZCBpbiBmaWx0ZXJlZEZpZWxkdHlwZUNvbmZpZ1wiXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiY29uZmlnRmllbGRDbGFzc2VzKGNvbmZpZ0ZpZWxkKVwiPlxuXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYmxvY2tcIj57eyBjb25maWdGaWVsZC5kaXNwbGF5IHx8IGNvbmZpZ0ZpZWxkLm5hbWUgfX08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIiB2LWlmPVwiY29uZmlnRmllbGQuaW5zdHJ1Y3Rpb25zXCIgdi1odG1sPVwiY29uZmlnRmllbGQuaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cIj48L3NtYWxsPlxuXG4gICAgICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJjb25maWdGaWVsZC50eXBlICsgJy1maWVsZHR5cGUnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpuYW1lPVwiJGtleVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS5zeW5jPVwiZmllbGRbY29uZmlnRmllbGQubmFtZV1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmNvbmZpZz1cImNvbmZpZ0ZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCJjb25maWdGaWVsZC5uYW1lICE9PSAnc2V0cycgJiYgY29uZmlnRmllbGQubmFtZSAhPT0gJ2ZpZWxkcydcIj5cbiAgICAgICAgICAgICAgICA8L2NvbXBvbmVudD5cblxuICAgICAgICAgICAgICAgIDxzZXQtYnVpbGRlciA6c2V0cy5zeW5jPVwiZmllbGRbY29uZmlnRmllbGQubmFtZV1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmaWVsZHR5cGVzPVwiZmllbGR0eXBlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cImNvbmZpZ0ZpZWxkLm5hbWUgPT09ICdzZXRzJ1wiPlxuICAgICAgICAgICAgICAgIDwvc2V0LWJ1aWxkZXI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFdpZHRoU2VsZWN0b3IgZnJvbSAnLi9TZWN0aW9ucy9XaWR0aFNlbGVjdG9yLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgZmllbGRDb25kaXRpb25zQnVpbGRlcjogcmVxdWlyZSgnLi4vZmllbGQtY29uZGl0aW9ucy1idWlsZGVyL0ZpZWxkQ29uZGl0aW9uc0J1aWxkZXIudnVlJyksXG4gICAgICAgIFdpZHRoU2VsZWN0b3JcbiAgICB9LFxuXG4gICAgcHJvcHM6IFsnZmllbGQnLCAnZmllbGR0eXBlQ29uZmlnJywgJ2ZpZWxkdHlwZXMnLCAncm9vdCddLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc05hbWVNb2RpZmllZDogdHJ1ZSxcbiAgICAgICAgICAgIGFjdGl2ZVRhYjogJ2Jhc2ljcydcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgc2VsZWN0ZWRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmZpZWxkLndpZHRoIHx8IDEwMDtcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IF8uZmluZFdoZXJlKHRoaXMud2lkdGhzLCB7dmFsdWU6IHdpZHRofSk7XG4gICAgICAgICAgICByZXR1cm4gZm91bmQudGV4dDtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZHR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZmluZFdoZXJlKHRoaXMuZmllbGR0eXBlcywgeyBuYW1lOiB0aGlzLmZpZWxkLnR5cGUgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuQmVMb2NhbGl6ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdCAmJiBPYmplY3Qua2V5cyhTdGF0YW1pYy5sb2NhbGVzKS5sZW5ndGggPiAxICYmIHRoaXMuZmllbGR0eXBlLmNhbkJlTG9jYWxpemVkO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbkJlVmFsaWRhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkdHlwZS5jYW5CZVZhbGlkYXRlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5IYXZlRGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZHR5cGUuY2FuSGF2ZURlZmF1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzRXh0cmFzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRGaWVsZHR5cGVDb25maWcubGVuZ3RoID4gMDtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWx0ZXJlZEZpZWxkdHlwZUNvbmZpZygpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkLnR5cGUgPT09ICdncmlkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbHRlcih0aGlzLmZpZWxkdHlwZUNvbmZpZywgY29uZmlnID0+IGNvbmZpZy5uYW1lICE9PSAnZmllbGRzJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChbJ3JlcGxpY2F0b3InLCAnYmFyZCddLmluY2x1ZGVzKHRoaXMuZmllbGQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maWx0ZXIodGhpcy5maWVsZHR5cGVDb25maWcsIGNvbmZpZyA9PiBjb25maWcubmFtZSAhPT0gJ3NldHMnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmllbGR0eXBlQ29uZmlnO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMucm9vdCA9IEJvb2xlYW4odGhpcy5yb290IHx8IGZhbHNlKTtcblxuICAgICAgICAvLyBGb3IgbmV3IGZpZWxkcywgd2UnbGwgc2x1Z2lmeSB0aGUgZGlzcGxheSBuYW1lIGludG8gdGhlIGZpZWxkIG5hbWUuXG4gICAgICAgIC8vIElmIHRoZXkgZWRpdCB0aGUgbmFtZSwgd2UnbGwgc3RvcC5cbiAgICAgICAgaWYgKHRoaXMuZmllbGQuaXNOZXcgJiYgIXRoaXMuZmllbGQuaXNNZXRhKSB7XG4gICAgICAgICAgICB0aGlzLmlzTmFtZU1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5maWVsZC5pc05ldztcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ2ZpZWxkLmRpc3BsYXknLCBmdW5jdGlvbihkaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEgdGhpcy5pc05hbWVNb2RpZmllZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm5hbWUgPSB0aGlzLiRzbHVnaWZ5KGRpc3BsYXksICdfJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgdGhpcy4kZWxzLmRpc3BsYXkuc2VsZWN0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29uZmlnRmllbGRDbGFzc2VzKGZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGBmb3JtLWdyb3VwIHAtMiBtLTAgJHtmaWVsZC50eXBlfS1maWVsZHR5cGVgLFxuICAgICAgICAgICAgICAgIHRhaWx3aW5kX3dpZHRoX2NsYXNzKGZpZWxkLndpZHRoKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRmllbGRTZXR0aW5ncy52dWU/N2E4NTg3Y2MiLCI8dGVtcGxhdGU+XG4gICAgPGRpdlxuICAgICAgICBjbGFzcz1cImZpZWxkLXdpZHRoIGZpZWxkLXdpZHRoLXNlbGVjdG9yXCJcbiAgICAgICAgQG1vdXNlZW50ZXI9XCJpc0hvdmVyaW5nID0gdHJ1ZVwiXG4gICAgICAgIEBtb3VzZWxlYXZlPVwiaXNIb3ZlcmluZyA9IGZhbHNlXCJcbiAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZC13aWR0aC1sYWJlbFwiPnt7IHNlbGVjdGVkIH19JTwvZGl2PlxuXG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIHYtZm9yPVwid2lkdGggaW4gd2lkdGhzXCJcbiAgICAgICAgICAgIEBtb3VzZWVudGVyLnN0b3A9XCJob3ZlcmluZ092ZXIgPSB3aWR0aFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJ2YWx1ZSA9IHdpZHRoXCJcbiAgICAgICAgICAgIDpjbGFzcz1cIltcbiAgICAgICAgICAgICAgICAnZmllbGQtd2lkdGgtbm90Y2gnLFxuICAgICAgICAgICAgICAgICdub3RjaC0nICsgd2lkdGgsXG4gICAgICAgICAgICAgICAgeyAnZmlsbGVkJzogc2VsZWN0ZWQgPj0gd2lkdGgsICdzZWxlY3RlZCc6IHNlbGVjdGVkID09IHdpZHRoIH1cbiAgICAgICAgICAgIF1cIlxuICAgICAgICA+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ3ZhbHVlJ10sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNIb3ZlcmluZzogZmFsc2UsXG4gICAgICAgICAgICBob3ZlcmluZ092ZXI6IG51bGwsXG4gICAgICAgICAgICB3aWR0aHM6IFsyNSwgMzMsIDUwLCA2NiwgNzUsIDEwMF1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIHNlbGVjdGVkKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNIb3ZlcmluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhvdmVyaW5nT3ZlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUgfHwgMTAwO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgY2xhc3NlcygpIHtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFdpZHRoU2VsZWN0b3IudnVlPzU1ZWY4N2M3IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPVxcXCJmaWVsZC13aWR0aCBmaWVsZC13aWR0aC1zZWxlY3RvclxcXCIgQG1vdXNlZW50ZXI9XFxcImlzSG92ZXJpbmcgPSB0cnVlXFxcIiBAbW91c2VsZWF2ZT1cXFwiaXNIb3ZlcmluZyA9IGZhbHNlXFxcIj4gPGRpdiBjbGFzcz1maWVsZC13aWR0aC1sYWJlbD57eyBzZWxlY3RlZCB9fSU8L2Rpdj4gPGRpdiB2LWZvcj1cXFwid2lkdGggaW4gd2lkdGhzXFxcIiBAbW91c2VlbnRlci5zdG9wPVxcXCJob3ZlcmluZ092ZXIgPSB3aWR0aFxcXCIgQGNsaWNrPVxcXCJ2YWx1ZSA9IHdpZHRoXFxcIiA6Y2xhc3M9XFxcIltcXG4gICAgICAgICAgICAnZmllbGQtd2lkdGgtbm90Y2gnLFxcbiAgICAgICAgICAgICdub3RjaC0nICsgd2lkdGgsXFxuICAgICAgICAgICAgeyAnZmlsbGVkJzogc2VsZWN0ZWQgPj0gd2lkdGgsICdzZWxlY3RlZCc6IHNlbGVjdGVkID09IHdpZHRoIH1cXG4gICAgICAgIF1cXFwiPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9XaWR0aFNlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZpZWxkQ29uZGl0aW9uc0J1aWxkZXIudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9GaWVsZENvbmRpdGlvbnNCdWlsZGVyLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGQtY29uZGl0aW9ucy1idWlsZGVyL0ZpZWxkQ29uZGl0aW9uc0J1aWxkZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA0OTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdj5cbiAgICAgICAgPHNlbGVjdC1maWVsZHR5cGVcbiAgICAgICAgICAgIDpkYXRhLnN5bmM9XCJkYXRhLnR5cGVcIlxuICAgICAgICAgICAgOmNvbmZpZz1cImNvbmRpdGlvblNlbGVjdEZpZWxkdHlwZUNvbmZpZ1wiPlxuICAgICAgICA8L3NlbGVjdC1maWVsZHR5cGU+XG5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJkYXRhLnR5cGVcIj5cblxuICAgICAgICAgICAgPGJyPiA8YnI+XG5cbiAgICAgICAgICAgIDxyYWRpby1maWVsZHR5cGVcbiAgICAgICAgICAgICAgICA6ZGF0YS5zeW5jPVwiZGF0YS5zdHlsZVwiXG4gICAgICAgICAgICAgICAgOm5hbWU9XCJjb25kaXRpb25fc3R5bGVcIlxuICAgICAgICAgICAgICAgIDpjb25maWc9XCJzdHlsZVJhZGlvRmllbGR0eXBlQ29uZmlnXCJcbiAgICAgICAgICAgID48L3JhZGlvLWZpZWxkdHlwZT5cblxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc1N0YW5kYXJkXCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IHRyYW5zbGF0ZSgnY3AuZGlzcGxheV9zdGFuZGFyZF9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+XG5cbiAgICAgICAgICAgICAgICA8dGFibGUgdi1pZj1cImhhc0NvbmRpdGlvbnNcIiBjbGFzcz1cInRhYmxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDx0ciBpcz1cImNvbmRpdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj1cIihpLCBjb25kaXRpb24pIGluIGNvbmRpdGlvbnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmluZGV4PVwiaVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6aGFuZGxlLnN5bmM9XCJjb25kaXRpb24uaGFuZGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpvcGVyYXRvci5zeW5jPVwiY29uZGl0aW9uLm9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZXMuc3luYz1cImNvbmRpdGlvbi52YWx1ZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQGRlbGV0ZWQ9XCJkZWxldGUoaSlcIlxuICAgICAgICAgICAgICAgICAgICA+PC90cj5cbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIEBjbGljaz1cImFkZFwiPlxuICAgICAgICAgICAgICAgICAgICB7eyB0cmFuc2xhdGUoJ2NwLmFkZF9jb25kaXRpb24nKSB9fVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc0N1c3RvbVwiPlxuICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyB0cmFuc2xhdGUoJ2NwLmRpc3BsYXlfY3VzdG9tX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJkYXRhLmN1c3RvbVwiIC8+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8L2Rpdj5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIGNvbmRpdGlvbjogcmVxdWlyZSgnLi9Db25kaXRpb24udnVlJylcbiAgICB9LFxuXG4gICAgcHJvcHM6IFsnZGF0YSddLFxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbmRpdGlvbnM6IFtdLFxuICAgICAgICAgICAgY29uZGl0aW9uU2VsZWN0RmllbGR0eXBlQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICB7dGV4dDogdHJhbnNsYXRlKCdjcC5hbHdheXNfc2hvdycpLCB2YWx1ZTogbnVsbH0sXG4gICAgICAgICAgICAgICAgICAgIHt0ZXh0OiB0cmFuc2xhdGUoJ2NwLnNob3dfd2hlbicpLCB2YWx1ZTogJ3Nob3cnfSxcbiAgICAgICAgICAgICAgICAgICAge3RleHQ6IHRyYW5zbGF0ZSgnY3AuaGlkZV93aGVuJyksIHZhbHVlOiAnaGlkZSd9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0eWxlUmFkaW9GaWVsZHR5cGVDb25maWc6IHtcbiAgICAgICAgICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICB7dGV4dDogdHJhbnNsYXRlKCdjcC5zdGFuZGFyZCcpLCB2YWx1ZTogJ3N0YW5kYXJkJ30sXG4gICAgICAgICAgICAgICAgICAgIHt0ZXh0OiB0cmFuc2xhdGUoJ2NwLmN1c3RvbScpLCB2YWx1ZTogJ2N1c3RvbSd9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaGFzQ29uZGl0aW9ucygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvbnMubGVuZ3RoICE9PSAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzU3RhbmRhcmQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnN0eWxlID09PSAnc3RhbmRhcmQnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzQ3VzdG9tKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zdHlsZSA9PT0gJ2N1c3RvbSc7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgaWYgKCEgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB7IHR5cGU6IG51bGwsIHN0eWxlOiAnc3RhbmRhcmQnLCBjdXN0b206IG51bGwsIGNvbmRpdGlvbnM6IFtdIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmRpdGlvbnMgPSB0aGlzLmRhdGEuY29uZGl0aW9ucztcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGFkZCgpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBoYW5kbGU6IG51bGwsXG4gICAgICAgICAgICAgICAgb3BlcmF0b3I6ICdhbmQnLFxuICAgICAgICAgICAgICAgIHZhbHVlczogW11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZShpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRmllbGRDb25kaXRpb25zQnVpbGRlci52dWU/NjBjNWQ4YmIiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Db25kaXRpb24udnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Db25kaXRpb24udnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZC1jb25kaXRpb25zLWJ1aWxkZXIvQ29uZGl0aW9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDx0cj5cbiAgICAgICAgPHRkIHYtaWY9XCIhaXNGaXJzdFwiIGNsYXNzPVwicGwtMFwiIHdpZHRoPVwiMzBcIj5cbiAgICAgICAgICAgIDxzZWxlY3QtZmllbGR0eXBlXG4gICAgICAgICAgICAgICAgOmRhdGEuc3luYz1cIm9wZXJhdG9yXCJcbiAgICAgICAgICAgICAgICA6Y29uZmlnPVwib3BlcmF0b3JTZWxlY3RDb25maWdcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0LWZpZWxkdHlwZT5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIDpjb2xzcGFuPVwiaXNGaXJzdCA/IDIgOiBudWxsXCIgY2xhc3M9XCJwbC0wXCIgd2lkdGg9XCI0MCVcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJoYW5kbGVcIiBwbGFjZWhvbGRlcj1cIkZpZWxkXCIgdi1lbDpoYW5kbGUgLz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgICAgPHNlbGVjdCBtdWx0aXBsZSB2LWVsOnZhbHVlcz48L3NlbGVjdD5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzPVwicm93LWNvbnRyb2xzIHRleHQtY2VudGVyXCIgd2lkdGg9XCIzMnB4XCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJpY29uIGljb24tY3Jvc3MgZGVsZXRlIG10LThcIiBAY2xpY2s9XCIkZW1pdCgnZGVsZXRlZCcpXCI+PC9hPlxuICAgICAgICA8L3RkPlxuICAgIDwvdHI+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2luZGV4JywgJ2hhbmRsZScsICdvcGVyYXRvcicsICd2YWx1ZXMnXSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVyYXRvclNlbGVjdENvbmZpZzoge1xuICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiAnYW5kJywgdmFsdWU6ICdhbmQnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgdGV4dDogJ29yJywgdmFsdWU6ICdvcicgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGlzRmlyc3QoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbmRleCA9PT0gMDtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLnNlbGVjdGl6ZUhhbmRsZXMoKTtcbiAgICAgICAgdGhpcy5zZWxlY3RpemVWYWx1ZXMoKTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHNlbGVjdGl6ZVZhbHVlcygpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gXy5tYXAodGhpcy52YWx1ZXMsICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsLCB0ZXh0OiB2YWwgfTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKHRoaXMuJGVscy52YWx1ZXMpLnNlbGVjdGl6ZSh7XG4gICAgICAgICAgICAgICAgaXRlbXM6IHRoaXMudmFsdWVzLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY3JlYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IFsncmVtb3ZlX2J1dHRvbiddLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiAodmFsdWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdGl6ZUhhbmRsZXMoKSB7XG4gICAgICAgICAgICBsZXQgZmllbGRzID0gdGhpcy5nZXRGaWVsZHMoKTtcblxuICAgICAgICAgICAgaWYgKCEgdGhpcy5maWVsZHNDb250YWluc1BhcnRpYWwoZmllbGRzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXRTZWxlY3RpemUoZmllbGRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdXJsID0gY3BfdXJsKGAvZmllbGRzZXRzLyR7Z2V0X2Zyb21fc2VnbWVudCgzKX0vZ2V0P3BhcnRpYWxzPXRydWVgKTtcblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQodXJsLCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gTm93IHRoYXQgd2UgaGF2ZSB0aGUgZmllbGRzIGluc2lkZSB0aGUgcGFydGlhbCwgd2UgZG9uJ3QgbmVlZCB0aGUgYWN0dWFsIHBhcnRpYWxzLlxuICAgICAgICAgICAgICAgIGZpZWxkcyA9IHJlc3BvbnNlLmZpZWxkcy5maWx0ZXIoZmllbGQgPT4gZmllbGQudHlwZSAhPT0gJ3BhcnRpYWwnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdGl6ZShmaWVsZHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFNlbGVjdGl6ZShmaWVsZHMpIHtcbiAgICAgICAgICAgICQodGhpcy4kZWxzLmhhbmRsZSkuc2VsZWN0aXplKHtcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogMSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLmNsZWFuRmllbGRzKGZpZWxkcyksXG4gICAgICAgICAgICAgICAgdmFsdWVGaWVsZDogJ25hbWUnLFxuICAgICAgICAgICAgICAgIGxhYmVsRmllbGQ6ICdkaXNwbGF5JyxcbiAgICAgICAgICAgICAgICBjcmVhdGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEZpZWxkcygpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIHRoaXMuJHBhcmVudC4kcGFyZW50LiRwYXJlbnQuJHBhcmVudC4kcGFyZW50LmZpZWxkcyAvLyB0b2RvOiBEbyB0aGlzIHRoZSByaWdodCB3YXkuXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZHNDb250YWluc1BhcnRpYWwoZmllbGRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkICE9PSBfLmZpbmQoZmllbGRzLCBmaWVsZCA9PiBmaWVsZC50eXBlID09PSAncGFydGlhbCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFuRmllbGRzKGZpZWxkcykge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgZmllbGRzIHdpdGhvdXQgZGlzcGxheSB2YWx1ZXMgc2hvdyBhdCBsZWFzdCB0aGUgaGFuZGxlLlxuICAgICAgICAgICAgZmllbGRzID0gZmllbGRzLm1hcChmaWVsZCA9PiB7XG4gICAgICAgICAgICAgICAgZmllbGQuZGlzcGxheSA9IGZpZWxkLmRpc3BsYXkgfHwgZmllbGQubmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIHNwZWNpZmllZCBoYW5kbGUgZG9lc24ndCBleGlzdCBpbiB0aGUgZmllbGQgbGlzdCwgd2UnbGwgYWRkIGl0LlxuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlICYmICFfLmZpbmQoZmllbGRzLCAoZikgPT4gdGhpcy5oYW5kbGUgPT09IGYubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCh7IG5hbWU6IHRoaXMuaGFuZGxlLCBkaXNwbGF5OiB0aGlzLmhhbmRsZSB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkcztcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBDb25kaXRpb24udnVlPzUxMWU4N2RiIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8dHI+IDx0ZCB2LWlmPSFpc0ZpcnN0IGNsYXNzPXBsLTAgd2lkdGg9MzA+IDxzZWxlY3QtZmllbGR0eXBlIDpkYXRhLnN5bmM9b3BlcmF0b3IgOmNvbmZpZz1vcGVyYXRvclNlbGVjdENvbmZpZz4gPC9zZWxlY3QtZmllbGR0eXBlPiA8L3RkPiA8dGQgOmNvbHNwYW49XFxcImlzRmlyc3QgPyAyIDogbnVsbFxcXCIgY2xhc3M9cGwtMCB3aWR0aD00MCU+IDxpbnB1dCB0eXBlPXRleHQgdi1tb2RlbD1oYW5kbGUgcGxhY2Vob2xkZXI9RmllbGQgdi1lbDpoYW5kbGUvPiA8L3RkPiA8dGQ+IDxzZWxlY3QgbXVsdGlwbGU9bXVsdGlwbGUgdi1lbDp2YWx1ZXM+PC9zZWxlY3Q+IDwvdGQ+IDx0ZCBjbGFzcz1cXFwicm93LWNvbnRyb2xzIHRleHQtY2VudGVyXFxcIiB3aWR0aD0zMnB4PiA8YSBjbGFzcz1cXFwiaWNvbiBpY29uLWNyb3NzIGRlbGV0ZSBtdC04XFxcIiBAY2xpY2s9XFxcIiRlbWl0KCdkZWxldGVkJylcXFwiPjwvYT4gPC90ZD4gPC90cj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZC1jb25kaXRpb25zLWJ1aWxkZXIvQ29uZGl0aW9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdj4gPHNlbGVjdC1maWVsZHR5cGUgOmRhdGEuc3luYz1kYXRhLnR5cGUgOmNvbmZpZz1jb25kaXRpb25TZWxlY3RGaWVsZHR5cGVDb25maWc+IDwvc2VsZWN0LWZpZWxkdHlwZT4gPHRlbXBsYXRlIHYtaWY9ZGF0YS50eXBlPiA8YnI+IDxicj4gPHJhZGlvLWZpZWxkdHlwZSA6ZGF0YS5zeW5jPWRhdGEuc3R5bGUgOm5hbWU9Y29uZGl0aW9uX3N0eWxlIDpjb25maWc9c3R5bGVSYWRpb0ZpZWxkdHlwZUNvbmZpZz48L3JhZGlvLWZpZWxkdHlwZT4gPHRlbXBsYXRlIHYtaWY9aXNTdGFuZGFyZD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5kaXNwbGF5X3N0YW5kYXJkX2luc3RydWN0aW9ucycpIH19PC9zbWFsbD4gPHRhYmxlIHYtaWY9aGFzQ29uZGl0aW9ucyBjbGFzcz10YWJsZT4gPHRyIGlzPWNvbmRpdGlvbiB2LWZvcj1cXFwiKGksIGNvbmRpdGlvbikgaW4gY29uZGl0aW9uc1xcXCIgOmluZGV4PWkgOmhhbmRsZS5zeW5jPWNvbmRpdGlvbi5oYW5kbGUgOm9wZXJhdG9yLnN5bmM9Y29uZGl0aW9uLm9wZXJhdG9yIDp2YWx1ZXMuc3luYz1jb25kaXRpb24udmFsdWVzIEBkZWxldGVkPWRlbGV0ZShpKT48L3RyPiA8L3RhYmxlPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIEBjbGljaz1hZGQ+IHt7IHRyYW5zbGF0ZSgnY3AuYWRkX2NvbmRpdGlvbicpIH19IDwvYnV0dG9uPiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgdi1pZj1pc0N1c3RvbT4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5kaXNwbGF5X2N1c3RvbV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9ZGF0YS5jdXN0b20gLz4gPC90ZW1wbGF0ZT4gPC90ZW1wbGF0ZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGQtY29uZGl0aW9ucy1idWlsZGVyL0ZpZWxkQ29uZGl0aW9uc0J1aWxkZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA1MDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPS1teC0xPiA8ZGl2IGNsYXNzPVxcXCJmaWx0ZXIgbXgtMSBtYi0yXFxcIj4gPGEgaHJlZj1cXFwiXFxcIiA6Y2xhc3M9XFxcInsgJ2FjdGl2ZSc6IGFjdGl2ZVRhYiA9PT0gJ2Jhc2ljcycgfVxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcImFjdGl2ZVRhYiA9ICdiYXNpY3MnXFxcIj57eyB0cmFuc2xhdGUoJ2NwLmJhc2ljcycpIH19PC9hPiA8YSBocmVmPVxcXCJcXFwiIDpjbGFzcz1cXFwieyAnYWN0aXZlJzogYWN0aXZlVGFiID09PSAndmlzaWJpbGl0eScgfVxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcImFjdGl2ZVRhYiA9ICd2aXNpYmlsaXR5J1xcXCI+e3sgdHJhbnNsYXRlKCdjcC52aXNpYmlsaXR5JykgfX08L2E+IDxhIGhyZWY9XFxcIlxcXCIgOmNsYXNzPVxcXCJ7ICdhY3RpdmUnOiBhY3RpdmVUYWIgPT09ICdleHRyYXMnIH1cXFwiIEBjbGljay5wcmV2ZW50PVxcXCJhY3RpdmVUYWIgPSAnZXh0cmFzJ1xcXCIgdi1pZj1oYXNFeHRyYXM+e3sgdHJhbnNsYXRlKCdjcC5leHRyYXMnKSB9fTwvYT4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInRhYiBwdWJsaXNoLWZpZWxkc1xcXCIgdi1zaG93PVxcXCJhY3RpdmVUYWIgPT09ICdiYXNpY3MnXFxcIj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbS0wIHctMS8yXFxcIj4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZGlzcGxheV9uYW1lJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmRpc3BsYXlfbmFtZV9pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9ZmllbGQuZGlzcGxheSB2LWVsOmRpc3BsYXkvPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbS0wIHctMS8yXFxcIj4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRfdmFyaWFibGUnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPnt7IHRyYW5zbGF0ZSgnY3AuZmllbGRfdmFyaWFibGVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgbW9ub1xcXCIgdi1tb2RlbD1maWVsZC5uYW1lIEBrZXlkb3duPVxcXCJpc05hbWVNb2RpZmllZCA9IHRydWVcXFwiIDpkaXNhYmxlZD1maWVsZC5pc01ldGEgOnYtZm9jdXM9dHJ1ZSAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbS0wXFxcIiB2LWlmPWNhbkJlTG9jYWxpemVkPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC5sb2NhbGl6YWJsZScpIH19PC9sYWJlbD4gPHRvZ2dsZS1maWVsZHR5cGUgOmRhdGEuc3luYz1maWVsZC5sb2NhbGl6YWJsZT48L3RvZ2dsZS1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHAtMiBtLTAgbWFya2Rvd24tZmllbGR0eXBlXFxcIj4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuaW5zdHJ1Y3Rpb25zJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkX2luc3RydWN0aW9uc19pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxtYXJrZG93bi1maWVsZHR5cGUgOmRhdGEuc3luYz1maWVsZC5pbnN0cnVjdGlvbnM+PC9tYXJrZG93bi1maWVsZHR5cGU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHAtMiBtLTBcXFwiIHYtaWY9Y2FuQmVWYWxpZGF0ZWQ+IDxsYWJlbD57eyB0cmFuc2xhdGUoJ2NwLnZhbGlkYXRpb25fcnVsZXMnKSB9fTwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrPiB7eyB0cmFuc2xhdGUoJ2NwLnZhbGlkYXRpb25faW5zdHJ1Y3Rpb25zJykgfX0gPGEgaHJlZj1odHRwczovL2xhcmF2ZWwuY29tL2RvY3MvNS4xL3ZhbGlkYXRpb24jYXZhaWxhYmxlLXZhbGlkYXRpb24tcnVsZXMgdGFyZ2V0PV9ibGFuaz57eyB0cmFuc2xhdGUoJ2NwLnZhbGlkYXRpb25faW5zdHJ1Y3Rpb25zX2xpbmtfdGV4dCcpIH19PC9hPi4gPC9zbWFsbD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1maWVsZC52YWxpZGF0ZSAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBwLTIgbS0wXFxcIiB2LWlmPWNhbkhhdmVEZWZhdWx0PiA8bGFiZWw+e3sgdHJhbnNsYXRlKCdjcC5kZWZhdWx0X3ZhbHVlJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmZpZWxkX2RlZmF1bHRfdmFsdWVfaW5zdHJ1Y3Rpb25zJykgfX08L3NtYWxsPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPWZpZWxkLmRlZmF1bHQgLz4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ0YWIgcHVibGlzaC1maWVsZHNcXFwiIHYtc2hvdz1cXFwiYWN0aXZlVGFiID09PSAndmlzaWJpbGl0eSdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHAtMiBtLTBcXFwiPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgdHJhbnNsYXRlKCdjcC53aWR0aCcpIH19PC9sYWJlbD4gPHdpZHRoLXNlbGVjdG9yIDp2YWx1ZS5zeW5jPWZpZWxkLndpZHRoIGNsYXNzPWxhcmdlPjwvd2lkdGgtc2VsZWN0b3I+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHAtMiBtLTBcXFwiIHYtaWY9cm9vdD4gPGxhYmVsPnt7IHRyYW5zbGF0ZSgnY3AuZGlzcGxheV9jb25kaXRpb25zJykgfX08L2xhYmVsPiA8c21hbGwgY2xhc3M9aGVscC1ibG9jaz57eyB0cmFuc2xhdGUoJ2NwLmRpc3BsYXlfY29uZGl0aW9uc19pbnN0cnVjdGlvbnMnKSB9fTwvc21hbGw+IDxmaWVsZC1jb25kaXRpb25zLWJ1aWxkZXIgOmRhdGEuc3luYz1maWVsZC5jb25kaXRpb25zPjwvZmllbGQtY29uZGl0aW9ucy1idWlsZGVyPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInRhYiBwdWJsaXNoLWZpZWxkc1xcXCIgdi1zaG93PVxcXCJhY3RpdmVUYWIgPT09ICdleHRyYXMnXFxcIiB2LWlmPWhhc0V4dHJhcz4gPGRpdiB2LWZvcj1cXFwiY29uZmlnRmllbGQgaW4gZmlsdGVyZWRGaWVsZHR5cGVDb25maWdcXFwiIDpjbGFzcz1jb25maWdGaWVsZENsYXNzZXMoY29uZmlnRmllbGQpPiA8bGFiZWwgY2xhc3M9YmxvY2s+e3sgY29uZmlnRmllbGQuZGlzcGxheSB8fCBjb25maWdGaWVsZC5uYW1lIH19PC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2sgdi1pZj1jb25maWdGaWVsZC5pbnN0cnVjdGlvbnMgdi1odG1sPVxcXCJjb25maWdGaWVsZC5pbnN0cnVjdGlvbnMgfCBtYXJrZG93blxcXCI+PC9zbWFsbD4gPGNvbXBvbmVudCA6aXM9XFxcImNvbmZpZ0ZpZWxkLnR5cGUgKyAnLWZpZWxkdHlwZSdcXFwiIDpuYW1lPSRrZXkgOmRhdGEuc3luYz1maWVsZFtjb25maWdGaWVsZC5uYW1lXSA6Y29uZmlnPWNvbmZpZ0ZpZWxkIHYtaWY9XFxcImNvbmZpZ0ZpZWxkLm5hbWUgIT09ICdzZXRzJyAmJiBjb25maWdGaWVsZC5uYW1lICE9PSAnZmllbGRzJ1xcXCI+IDwvY29tcG9uZW50PiA8c2V0LWJ1aWxkZXIgOnNldHMuc3luYz1maWVsZFtjb25maWdGaWVsZC5uYW1lXSA6ZmllbGR0eXBlcz1maWVsZHR5cGVzIHYtaWY9XFxcImNvbmZpZ0ZpZWxkLm5hbWUgPT09ICdzZXRzJ1xcXCI+IDwvc2V0LWJ1aWxkZXI+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9GaWVsZFNldHRpbmdzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NldHMudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TZXRzLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGRzZXQtYnVpbGRlci9TZWN0aW9ucy9TZXRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiZmllbGQtbmVzdGVkIGZpZWxkLXNldHNcIiB2LWVsOnNldHM+XG4gICAgICAgIDxyZXBsaWNhdG9yLXNldFxuICAgICAgICAgICAgdi1mb3I9XCIoaSwgc2V0KSBpbiBzZXRzXCJcbiAgICAgICAgICAgIHYtcmVmOnNldHNcbiAgICAgICAgICAgIDpzZXQ9XCJzZXRcIlxuICAgICAgICAgICAgOnNldC1pbmRleD1cImlcIlxuICAgICAgICAgICAgOnNlY3Rpb249XCJzZWN0aW9uXCJcbiAgICAgICAgICAgIDpmaWVsZHR5cGVzPVwiZmllbGR0eXBlc1wiXG4gICAgICAgICAgICA6cGFyZW50LWtleT1cInBhcmVudEtleVwiXG4gICAgICAgICAgICBAZGVsZXRlZD1cInJlbW92ZVwiXG4gICAgICAgID48L3JlcGxpY2F0b3Itc2V0PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBSZXBsaWNhdG9yU2V0IGZyb20gJy4vU2V0LnZ1ZSc7XG5pbXBvcnQgeyBTb3J0YWJsZSB9IGZyb20gJ0BzaG9waWZ5L2RyYWdnYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgUmVwbGljYXRvclNldFxuICAgIH0sXG5cbiAgICBwcm9wczogWydmaWVsZHR5cGVzJywgJ3NldHMnLCAnc2VjdGlvbicsICdwYXJlbnRLZXknXSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLnNldHMgPSB0aGlzLnNldHMgfHwgW107XG5cbiAgICAgICAgdGhpcy5tYWtlU2V0c1NvcnRhYmxlKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICB1cGRhdGVGaWVsZFdpZHRocygpIHtcbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBfLmVhY2godGhpcy4kcmVmcy5zZXRzLCBjb21wb25lbnQgPT4geyBjb21wb25lbnQudXBkYXRlRmllbGRXaWR0aHMoKSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5zZXRzLmxlbmd0aCArIDE7XG4gICAgICAgICAgICB0aGlzLnNldHMucHVzaCh7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYFNldCAke2NvdW50fWAsXG4gICAgICAgICAgICAgICAgbmFtZTogYHNldF8ke2NvdW50fWAsXG4gICAgICAgICAgICAgICAgaWQ6IGBzZXRfJHtjb3VudH1gLFxuICAgICAgICAgICAgICAgIGluc3RydWN0aW9uczogbnVsbCxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IFtdLFxuICAgICAgICAgICAgICAgIGlzTmV3OiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy4kbm90aWZ5LnN1Y2Nlc3ModHJhbnNsYXRlKCdjcC5zZXRfYWRkZWQnKSk7XG5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHRoaXMuJHJlZnMuc2V0c1tjb3VudC0xXS5mb2N1cygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmUoaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghIGNvbmZpcm0odHJhbnNsYXRlKCdjcC5hcmVfeW91X3N1cmUnKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ha2VTZXRzU29ydGFibGUoKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLiRlbHMuc2V0cztcbiAgICAgICAgICAgIGNvbnN0IHNvcnRhYmxlRmllbGRzID0gbmV3IFNvcnRhYmxlKGNvbnRhaW5lciwge1xuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogYC5maWVsZC1zZXQtLSR7dGhpcy5wYXJlbnRLZXl9YCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGAuc2V0LWRyYWctaGFuZGxlLS0ke3RoaXMucGFyZW50S2V5fWAsXG4gICAgICAgICAgICAgICAgYXBwZW5kVG86IGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICBtaXJyb3I6IHsgY29uc3RyYWluRGltZW5zaW9uczogdHJ1ZSB9LFxuICAgICAgICAgICAgfSkub24oJ3NvcnRhYmxlOnN0b3AnLCBlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHMuc3BsaWNlKGUubmV3SW5kZXgsIDAsIHRoaXMuc2V0cy5zcGxpY2UoZS5vbGRJbmRleCwgMSlbMF0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBTZXRzLnZ1ZT80ODU5NjcyYyIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NldC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NldC52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvU2V0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgOmNsYXNzPVwiWyAnZmllbGQtc2V0JywgYGZpZWxkLXNldC0tJHtwYXJlbnRLZXl9YCBdXCI+XG4gICAgICAgIDxkaXYgOmNsYXNzPVwiWyAnc2V0LWRyYWctaGFuZGxlJywgYHNldC1kcmFnLWhhbmRsZS0tJHtwYXJlbnRLZXl9YCBdXCI+PC9kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwic2V0LWRpc3BsYXktc2l6ZXJcIiB2LWVsOnNldC1kaXNwbGF5LXNpemVyIHYtdGV4dD1cInNldC5kaXNwbGF5IHx8IHNldC5uYW1lXCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNldC1uYW1lLXNpemVyXCIgdi1lbDpzZXQtbmFtZS1zaXplciB2LXRleHQ9XCJzZXQubmFtZVwiPjwvc3Bhbj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJzZXQtZGlzcGxheSBtci04XCIgdi1lbDpkaXNwbGF5IHYtbW9kZWw9XCJzZXQuZGlzcGxheVwiIDpwbGFjZWhvbGRlcj1cInNldC5kaXNwbGF5IHx8IHNldC5uYW1lXCIgOnN0eWxlPVwie3dpZHRoOiBkaXNwbGF5RmllbGRXaWR0aH1cIiAgLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJzZXQtbmFtZVwiIHYtbW9kZWw9XCJzZXQubmFtZVwiIDpwbGFjZWhvbGRlcj1cInNldC5uYW1lXCIgOnN0eWxlPVwie3dpZHRoOiBuYW1lRmllbGRXaWR0aH1cIiBAaW5wdXQ9XCJoYW5kbGVNb2RpZmllZCA9IHRydWVcIiAvPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInNldC1pbnN0cnVjdGlvbnNcIiB2LW1vZGVsPVwic2V0Lmluc3RydWN0aW9uc1wiIDpwbGFjZWhvbGRlcj1cImAke3RyYW5zbGF0ZSgnY3AuaW5zdHJ1Y3Rpb25zJyl9Li4uYFwiIC8+XG4gICAgICAgIDxmaWVsZHNldC1maWVsZHNcbiAgICAgICAgICAgIHYtcmVmOmZpZWxkc1xuICAgICAgICAgICAgOmZpZWxkcy5zeW5jPVwic2V0LmZpZWxkc1wiXG4gICAgICAgICAgICA6c2VjdGlvbj1cInNlY3Rpb25cIlxuICAgICAgICAgICAgOnBhcmVudC1rZXk9XCJzZXRLZXlcIlxuICAgICAgICAgICAgOmZpZWxkdHlwZXM9XCJmaWVsZHR5cGVzXCJcbiAgICAgICAgICAgIDppcy1hZGRpbmc9XCJpc0FkZGluZ0ZpZWxkXCJcbiAgICAgICAgICAgIGNsYXNzZXM9XCJmaWVsZC1maWVsZHMgc2V0LWZpZWxkc1wiXG4gICAgICAgICAgICBAc2VsZWN0b3ItY2xvc2VkPVwiZmllbGRTZWxlY3RvckNsb3NlZFwiXG4gICAgICAgID48L2ZpZWxkc2V0LWZpZWxkcz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIG10LTJcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbWFsbFwiIEBjbGljaz1cImlzQWRkaW5nRmllbGQgPSB0cnVlXCI+e3sgdHJhbnNsYXRlKCdjcC5hZGRfZmllbGQnKSB9fTwvYT5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwib3BhY2l0eS01MCB0ZXh0LXh4cyBob3ZlcjpvcGFjaXR5LTEwMCBtbC0xXCIgQGNsaWNrPVwiJGVtaXQoJ2RlbGV0ZWQnLCBzZXRJbmRleClcIj57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZV9zZXQnKSB9fTwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBTb3J0YWJsZSB9IGZyb20gJ0BzaG9waWZ5L2RyYWdnYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ3NldCcsICdzZXRJbmRleCcsICdmaWVsZHR5cGVzJywgJ3NlY3Rpb24nLCAncGFyZW50S2V5J10sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNBZGRpbmdGaWVsZDogZmFsc2UsXG4gICAgICAgICAgICBoYW5kbGVNb2RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICBkaXNwbGF5RmllbGRXaWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbmFtZUZpZWxkV2lkdGg6ICcxMDAlJ1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgc2V0S2V5KCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMucGFyZW50S2V5fS0ke3RoaXMuc2V0LmlkfWA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzcGxheSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldC5kaXNwbGF5O1xuICAgICAgICB9LFxuXG4gICAgICAgIG5hbWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQubmFtZTtcbiAgICAgICAgfSxcblxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuXG4gICAgICAgIGRpc3BsYXkodmFsKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFuZGxlTW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldC5uYW1lID0gdGhpcy4kc2x1Z2lmeSh2YWwsICdfJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHRoaXMudXBkYXRlU2V0RmllbGRXaWR0aHMoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmFtZSh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2V0RmllbGRXaWR0aHMoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLmhhbmRsZU1vZGlmaWVkID0gIXRoaXMuc2V0LmlzTmV3O1xuICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkV2lkdGhzKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICB1cGRhdGVTZXRGaWVsZFdpZHRocygpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUZpZWxkV2lkdGggPSB0aGlzLiRlbHMuc2V0RGlzcGxheVNpemVyLm9mZnNldFdpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMubmFtZUZpZWxkV2lkdGggPSB0aGlzLiRlbHMuc2V0TmFtZVNpemVyLm9mZnNldFdpZHRoICsgJ3B4JztcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVGaWVsZFdpZHRocygpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2V0RmllbGRXaWR0aHMoKTtcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmllbGRzLnVwZGF0ZUZpZWxkV2lkdGhzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbHMuZGlzcGxheS5zZWxlY3QoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWVsZFNlbGVjdG9yQ2xvc2VkKCkge1xuICAgICAgICAgICAgdGhpcy5pc0FkZGluZ0ZpZWxkID0gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFNldC52dWU/ZmQ1ZDQ5ZGUiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgOmNsYXNzPVxcXCJbICdmaWVsZC1zZXQnLCBgZmllbGQtc2V0LS0ke3BhcmVudEtleX1gIF1cXFwiPiA8ZGl2IDpjbGFzcz1cXFwiWyAnc2V0LWRyYWctaGFuZGxlJywgYHNldC1kcmFnLWhhbmRsZS0tJHtwYXJlbnRLZXl9YCBdXFxcIj48L2Rpdj4gPHNwYW4gY2xhc3M9c2V0LWRpc3BsYXktc2l6ZXIgdi1lbDpzZXQtZGlzcGxheS1zaXplciB2LXRleHQ9XFxcInNldC5kaXNwbGF5IHx8IHNldC5uYW1lXFxcIj48L3NwYW4+IDxzcGFuIGNsYXNzPXNldC1uYW1lLXNpemVyIHYtZWw6c2V0LW5hbWUtc2l6ZXIgdi10ZXh0PXNldC5uYW1lPjwvc3Bhbj4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1cXFwic2V0LWRpc3BsYXkgbXItOFxcXCIgdi1lbDpkaXNwbGF5IHYtbW9kZWw9c2V0LmRpc3BsYXkgOnBsYWNlaG9sZGVyPVxcXCJzZXQuZGlzcGxheSB8fCBzZXQubmFtZVxcXCIgOnN0eWxlPVxcXCJ7d2lkdGg6IGRpc3BsYXlGaWVsZFdpZHRofVxcXCIvPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPXNldC1uYW1lIHYtbW9kZWw9c2V0Lm5hbWUgOnBsYWNlaG9sZGVyPXNldC5uYW1lIDpzdHlsZT1cXFwie3dpZHRoOiBuYW1lRmllbGRXaWR0aH1cXFwiIEBpbnB1dD1cXFwiaGFuZGxlTW9kaWZpZWQgPSB0cnVlXFxcIi8+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9c2V0LWluc3RydWN0aW9ucyB2LW1vZGVsPXNldC5pbnN0cnVjdGlvbnMgOnBsYWNlaG9sZGVyPVxcXCJgJHt0cmFuc2xhdGUoJ2NwLmluc3RydWN0aW9ucycpfS4uLmBcXFwiLz4gPGZpZWxkc2V0LWZpZWxkcyB2LXJlZjpmaWVsZHMgOmZpZWxkcy5zeW5jPXNldC5maWVsZHMgOnNlY3Rpb249c2VjdGlvbiA6cGFyZW50LWtleT1zZXRLZXkgOmZpZWxkdHlwZXM9ZmllbGR0eXBlcyA6aXMtYWRkaW5nPWlzQWRkaW5nRmllbGQgY2xhc3Nlcz1cXFwiZmllbGQtZmllbGRzIHNldC1maWVsZHNcXFwiIEBzZWxlY3Rvci1jbG9zZWQ9ZmllbGRTZWxlY3RvckNsb3NlZD48L2ZpZWxkc2V0LWZpZWxkcz4gPGRpdiBjbGFzcz1cXFwiZmxleCBpdGVtcy1jZW50ZXIgbXQtMlxcXCI+IDxhIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtYWxsXFxcIiBAY2xpY2s9XFxcImlzQWRkaW5nRmllbGQgPSB0cnVlXFxcIj57eyB0cmFuc2xhdGUoJ2NwLmFkZF9maWVsZCcpIH19PC9hPiA8YSBjbGFzcz1cXFwib3BhY2l0eS01MCB0ZXh0LXh4cyBob3ZlcjpvcGFjaXR5LTEwMCBtbC0xXFxcIiBAY2xpY2s9XFxcIiRlbWl0KCdkZWxldGVkJywgc2V0SW5kZXgpXFxcIj57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZV9zZXQnKSB9fTwvYT4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvU2V0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1cXFwiZmllbGQtbmVzdGVkIGZpZWxkLXNldHNcXFwiIHYtZWw6c2V0cz4gPHJlcGxpY2F0b3Itc2V0IHYtZm9yPVxcXCIoaSwgc2V0KSBpbiBzZXRzXFxcIiB2LXJlZjpzZXRzIDpzZXQ9c2V0IDpzZXQtaW5kZXg9aSA6c2VjdGlvbj1zZWN0aW9uIDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgOnBhcmVudC1rZXk9cGFyZW50S2V5IEBkZWxldGVkPXJlbW92ZT48L3JlcGxpY2F0b3Itc2V0PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL1NldHMudnVlXG4vLyBtb2R1bGUgaWQgPSA1MTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IDpjbGFzcz1jbGFzc2VzPiA8ZGl2IGNsYXNzPXNlY3Rpb24tZmllbGQtaW5uZXI+IDxkaXYgY2xhc3M9c2VjdGlvbi1maWVsZC1tYWluPiA8ZGl2IDpjbGFzcz1cXFwiW1xcbiAgICAgICAgICAgICAgICAnZmllbGQtZHJhZy1oYW5kbGUnLFxcbiAgICAgICAgICAgICAgICBgZmllbGQtZHJhZy1oYW5kbGUtLSR7cGFyZW50S2V5fWAsXFxuICAgICAgICAgICAgICAgIHsgJ3Jvb3QtbGV2ZWwtZHJhZy1oYW5kbGUnOiBpc1Jvb3RMZXZlbCB9XFxuICAgICAgICAgICAgXVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9c2VjdGlvbi1maWVsZC1tYWluLWlubmVyPiA8ZGl2IGNsYXNzPWZpZWxkLWluZm8+IDxkaXYgY2xhc3M9XFxcImZsZXggaXRlbXMtY2VudGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiaC00IHctNFxcXCI+IDxzdmctaWNvbiBjbGFzcz1cXFwiaC00IHctNCBvcGFjaXR5LTUwIHNlbGYtY2VudGVyXFxcIiA6bmFtZT1pY29uPjwvc3ZnLWljb24+IDwvZGl2PiA8ZGl2IGNsYXNzPW1sLTI+IDxzcGFuIGNsYXNzPWZpZWxkLWRpc3BsYXktc2l6ZXIgdi1lbDpmaWVsZC1kaXNwbGF5LXNpemVyIHYtdGV4dD1cXFwiZmllbGQuZGlzcGxheSB8fCBmaWVsZC5uYW1lXFxcIj48L3NwYW4+IDxzcGFuIGNsYXNzPWZpZWxkLW5hbWUtc2l6ZXIgdi1lbDpmaWVsZC1uYW1lLXNpemVyIHYtdGV4dD1maWVsZC5uYW1lPjwvc3Bhbj4gPGlucHV0IGNsYXNzPWZpZWxkLWRpc3BsYXkgdi1lbDpkaXNwbGF5IHR5cGU9dGV4dCB2LW1vZGVsPWZpZWxkLmRpc3BsYXkgOnBsYWNlaG9sZGVyPVxcXCJmaWVsZC5kaXNwbGF5IHx8IGZpZWxkLm5hbWVcXFwiIDpzdHlsZT1cXFwie3dpZHRoOiBkaXNwbGF5RmllbGRXaWR0aH1cXFwiLz4gPGlucHV0IGNsYXNzPWZpZWxkLW5hbWUgdi1lbDpuYW1lIHR5cGU9dGV4dCB2LW1vZGVsPWZpZWxkLm5hbWUgOnN0eWxlPVxcXCJ7d2lkdGg6IG5hbWVGaWVsZFdpZHRofVxcXCIgQGlucHV0PVxcXCJoYW5kbGVNb2RpZmllZCA9IHRydWVcXFwiIDpkaXNhYmxlZD1maWVsZC5pc01ldGEgLz4gPGRpdiBjbGFzcz1maWVsZC10eXBlPnt7IGZpZWxkdHlwZUxhYmVsIH19PC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9ZmllbGQtY29udHJvbHM+IDx3aWR0aC1zZWxlY3RvciA6dmFsdWUuc3luYz1maWVsZC53aWR0aCB2LXRpcCA6dGlwLXRleHQ9XFxcInRyYW5zbGF0ZSgnY3Aud2lkdGgnKVxcXCI+PC93aWR0aC1zZWxlY3Rvcj4gPHRlbXBsYXRlIHYtaWY9Y2FuQmVMb2NhbGl6ZWQ+IDxhIEBjbGljaz1cXFwiZmllbGQubG9jYWxpemFibGUgPSAhZmllbGQubG9jYWxpemFibGVcXFwiIHYtdGlwIDp0aXAtdGV4dD1cXFwidHJhbnNsYXRlKCdjcC5sb2NhbGl6YWJsZScpXFxcIj48c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWdsb2JlIGZpZWxkLWxvY2FsaXphYmxlXFxcIiA6Y2xhc3M9XFxcInsgJ2lzLWxvY2FsaXphYmxlJzogZmllbGQubG9jYWxpemFibGUgfVxcXCI+PC9zcGFuPjwvYT4gPC90ZW1wbGF0ZT4gPGEgQGNsaWNrPWVkaXQgdi10aXAgOnRpcC10ZXh0PVxcXCJ0cmFuc2xhdGUoJ2NwLmVkaXQnKVxcXCI+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1wZW5jaWwgZmllbGQtZWRpdFxcXCI+PC9zcGFuPjwvYT4gPGEgQGNsaWNrPVxcXCIkZW1pdCgncmVtb3ZlZCcpXFxcIiB2LXRpcCA6dGlwLXRleHQ9XFxcInRyYW5zbGF0ZSgnY3AuZGVsZXRlJylcXFwiPjxzcGFuIGNsYXNzPVxcXCJmaWVsZC1kZWxldGUgaWNvbiBpY29uLWNyb3NzIGRlbGV0ZVxcXCI+PC9zcGFuPjwvYT4gPHRlbXBsYXRlIHYtaWY9aXNHcmlkRmllbGQ+IDxhIEBjbGljaz1hZGRGaWVsZCB2LXRpcCA6dGlwLXRleHQ9XFxcInRyYW5zbGF0ZSgnY3AuYWRkX2ZpZWxkJylcXFwiPjxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tcGx1cyBmaWVsZC1hZGQtZ3JpZC1maWVsZFxcXCI+PC9zcGFuPjwvYT4gPGEgQGNsaWNrPVxcXCJpc1Nob3dpbmdHcmlkRmllbGRzID0gIWlzU2hvd2luZ0dyaWRGaWVsZHNcXFwiIHYtdGlwIDp0aXAtdGV4dD1cXFwidHJhbnNsYXRlKCdjcC50b2dnbGVfZmllbGRzJylcXFwiIHYtc2hvdz1maWVsZC5maWVsZHMubGVuZ3RoIGNsYXNzPWFsd2F5cy12aXNpYmxlPjxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2hldnJvbi17eyBpc1Nob3dpbmdHcmlkRmllbGRzID8gJ3VwJyA6ICdkb3duJyB9fSBmaWVsZC1leHBhbmRcXFwiPjwvc3Bhbj48L2E+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWlmPWlzUmVwbGljYXRvckZpZWxkPiA8YSBAY2xpY2s9YWRkUmVwbGljYXRvclNldCB2LXRpcCA6dGlwLXRleHQ9XFxcInRyYW5zbGF0ZSgnY3AuYWRkX3NldCcpXFxcIj48c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLXBsdXMgZmllbGQtYWRkLXNldFxcXCI+PC9zcGFuPjwvYT4gPGEgQGNsaWNrPVxcXCJpc1Nob3dpbmdTZXRzID0gIWlzU2hvd2luZ1NldHNcXFwiIHYtdGlwIDp0aXAtdGV4dD1cXFwidHJhbnNsYXRlKCdjcC50b2dnbGVfc2V0cycpXFxcIiB2LXNob3c9ZmllbGQuc2V0cy5sZW5ndGggY2xhc3M9YWx3YXlzLXZpc2libGU+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaGV2cm9uLXt7IGlzU2hvd2luZ1NldHMgPyAndXAnIDogJ2Rvd24nIH19IGZpZWxkLWV4cGFuZFxcXCI+PC9zcGFuPjwvYT4gPC90ZW1wbGF0ZT4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZmllbGQtbmVzdGVkIGZpZWxkLWZpZWxkc1xcXCIgdi1pZj1pc0dyaWRGaWVsZCB2LXNob3c9aXNTaG93aW5nR3JpZEZpZWxkcz4gPGZpZWxkc2V0LWZpZWxkcyB2LXJlZjpmaWVsZHMgOmZpZWxkcy5zeW5jPWZpZWxkLmZpZWxkcyA6c2VjdGlvbj1zZWN0aW9uIDpwYXJlbnQta2V5PWZpZWxkS2V5IDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgOmlzLWFkZGluZz1pc0FkZGluZ0dyaWRGaWVsZCBAc2VsZWN0b3ItY2xvc2VkPWZpZWxkU2VsZWN0b3JDbG9zZWQ+PC9maWVsZHNldC1maWVsZHM+IDxhIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtYWxsIG10LTE2XFxcIiBAY2xpY2s9YWRkRmllbGQ+e3sgdHJhbnNsYXRlKCdjcC5hZGRfZmllbGQnKSB9fTwvYT4gPC9kaXY+IDxyZXBsaWNhdG9yLXNldHMgdi1pZj1pc1JlcGxpY2F0b3JGaWVsZCB2LXNob3c9aXNTaG93aW5nU2V0cyB2LXJlZjpzZXRzIDpzZXRzLnN5bmM9ZmllbGQuc2V0cyA6c2VjdGlvbj1zZWN0aW9uIDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgOnBhcmVudC1rZXk9ZmllbGRLZXk+PC9yZXBsaWNhdG9yLXNldHM+IDwvZGl2PiA8bW9kYWwgOnNob3cuc3luYz1pc0VkaXRpbmcgY2xhc3M9bW9kYWwtd2lkZT4gPHRlbXBsYXRlIHNsb3Q9aGVhZGVyPiA8ZGl2IGNsYXNzPVxcXCJmbGV4IGl0ZW1zLWNlbnRlclxcXCI+IDxzdmctaWNvbiBjbGFzcz1cXFwiaC02IHctNiBtci0yIGlubGluZS1ibG9jayBvcGFjaXR5LTUwXFxcIiA6bmFtZT1pY29uPjwvc3ZnLWljb24+IDxzcGFuPnt7IGZpZWxkLmRpc3BsYXkgfHwgZmllbGQubmFtZSB9fTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInRleHQteHMgbWwtMiBmb250LWJvbGQgdXBwZXJjYXNlIG9wYWNpdHktMjUgcHQtc21cXFwiPnt7IGZpZWxkdHlwZUxhYmVsIH19PC9zcGFuPiA8L2Rpdj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9Ym9keT4gPGZpZWxkLXNldHRpbmdzIHYtcmVmOnNldHRpbmdzIDpmaWVsZC5zeW5jPWZpZWxkIDpmaWVsZHR5cGUtY29uZmlnPWZpZWxkdHlwZUNvbmZpZyA6ZmllbGR0eXBlcz1maWVsZHR5cGVzIDpyb290PWlzUm9vdExldmVsPiA8L2ZpZWxkLXNldHRpbmdzPiA8L3RlbXBsYXRlPiA8L21vZGFsPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL1NlY3Rpb25zL0ZpZWxkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiA6Y2xhc3M9XFxcIltcXG4gICAgJ3NlY3Rpb24tZmllbGRzJyxcXG4gICAgY2xhc3Nlc1xcbl1cXFwiPiA8ZmllbGRzZXQtZmllbGQgdi1mb3I9XFxcIihpLCBmKSBpbiBmaWVsZHNcXFwiIHYtcmVmOmZpZWxkcyA6ZmllbGQuc3luYz1mIDpmaWVsZHR5cGVzPWZpZWxkdHlwZXMgOnNlY3Rpb249c2VjdGlvbiA6aXMtZmlyc3QtZmllbGQ9XFxcImkgPT09IDBcXFwiIDppcy1sYXN0LWZpZWxkPVxcXCJpID09PSBmaWVsZHMubGVuZ3RoLTFcXFwiIDpwYXJlbnQta2V5PXBhcmVudEtleSBAcmVtb3ZlZD1yZW1vdmUoaSk+PC9maWVsZHNldC1maWVsZD4gPGZpZWxkdHlwZS1zZWxlY3RvciA6ZmllbGR0eXBlcz1maWVsZHR5cGVzIDpzaG93PWlzQWRkaW5nIDphbGxvdy10aXRsZT1hbGxvd0FkZGluZ1RpdGxlRmllbGQgOmFsbG93LXNsdWc9YWxsb3dBZGRpbmdTbHVnRmllbGQgOmFsbG93LWRhdGU9YWxsb3dBZGRpbmdEYXRlRmllbGQgQHNlbGVjdGVkPWFkZCBAY2xvc2VkPVxcXCJ0aGlzLiRlbWl0KCdzZWxlY3Rvci1jbG9zZWQnKVxcXCI+PC9maWVsZHR5cGUtc2VsZWN0b3I+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkc2V0LWJ1aWxkZXIvU2VjdGlvbnMvRmllbGRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZpZWxkdHlwZVNlbGVjdG9yLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vRmllbGR0eXBlU2VsZWN0b3IudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL0ZpZWxkdHlwZVNlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8bW9kYWwgOnNob3c9XCJzaG93XCIgQGNsb3NlZD1cImNsb3NlXCIgY2xhc3M9XCJtb2RhbC13aWRlXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImhlYWRlclwiPnt7IHRyYW5zbGF0ZSgnY3Auc2VsZWN0X2ZpZWxkdHlwZScpfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJib2R5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpbHRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8YSBAY2xpY2s9XCJmaWx0ZXJCeSA9ICdhbGwnXCIgOmNsYXNzPVwieydhY3RpdmUnOiBmaWx0ZXJCeSA9PSAnYWxsJ31cIj57eyB0cmFuc2xhdGUoJ2NwLmFsbCcpIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8YSBAY2xpY2s9XCJmaWx0ZXJCeSA9IGZpbHRlclwiIHYtZm9yPVwiZmlsdGVyIGluIGZpbHRlcmVkRmlsdGVyc1wiIDpjbGFzcz1cInsnYWN0aXZlJzogZmlsdGVyQnkgPT0gZmlsdGVyfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKGBjcC5maWVsZHR5cGVfY2F0ZWdvcnlfJHtmaWx0ZXIudG9Mb3dlckNhc2UoKX1gKSB9fVxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDxhIEBjbGljay5wcmV2ZW50PVwib3BlblNlYXJjaFwiIDpjbGFzcz1cIlsnbm8tZG90JywgeydhY3RpdmUnOiBzZWFyY2h9XVwiPjxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLW1hZ25pZnlpbmctZ2xhc3NcIj48L3NwYW4+PC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZHR5cGUtc2VsZWN0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJbJ3NlYXJjaCcsIHsgJ2lzLXNlYXJjaGluZyc6IGlzU2VhcmNoaW5nIH1dXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwic2VhcmNoXCIgdi1lbDpzZWFyY2ggQGtleWRvd24uZXNjPVwiY2FuY2VsU2VhcmNoXCIgOnBsYWNlaG9sZGVyPVwiYCR7dHJhbnNsYXRlKCdjcC5zZWFyY2gnKX0uLi5gXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtd3JhcCAtbXgtMSBmaWVsZHR5cGUtbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMS8yIHNtOnctMS8zIG1kOnctMS80IHAtMVwiIHYtZm9yPVwib3B0aW9uIGluIGZpZWxkdHlwZU9wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImJvcmRlciBmbGV4IGl0ZW1zLWNlbnRlciBncm91cCB3LWZ1bGwgcm91bmRlZCBzaGFkb3ctc20gcHktMSBweC0yXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwic2VsZWN0KG9wdGlvbilcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2Zy1pY29uIGNsYXNzPVwiaC00IHctNCBvcGFjaXR5LTUwIGdyb3VwLWhvdmVyOm9wYWNpdHktMTAwXCIgOm5hbWU9XCJvcHRpb24uaWNvblwiPjwvc3ZnLWljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGwtMiB0ZXh0LWdyZXktZGFyayBncm91cC1ob3Zlcjp0ZXh0LWdyZXktZGFya2VzdFwiPnt7IG9wdGlvbi50ZXh0IH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvbW9kYWw+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgZmllbGR0eXBlczoge30sXG4gICAgICAgIG9uU2VsZWN0OiB7fSxcbiAgICAgICAgc2hvdzoge30sXG4gICAgICAgIGFsbG93VGl0bGU6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGFsbG93U2x1Zzoge1xuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYWxsb3dEYXRlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIGZpbHRlckJ5OiAnYWxsJyxcbiAgICAgICAgICAgIGZpbHRlcnM6IFsnVGV4dCcsICdNZWRpYScsICdQaWNrYWJsZScsICdTdHJ1Y3R1cmVkJywgJ1JlbGF0aW9uc2hpcCcsICdTcGVjaWFsJywgJ1N5c3RlbSddLFxuICAgICAgICAgICAgc2VhcmNoOiAnJyxcbiAgICAgICAgICAgIGlzU2VhcmNoT3BlbjogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIGZpZWxkdHlwZVNlbGVjdGlvblRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZmluZFdoZXJlKHRoaXMuZmllbGR0eXBlc1NlbGVjdE9wdGlvbnMsIHsgdmFsdWU6IHRoaXMuZmllbGR0eXBlU2VsZWN0aW9uIH0pLnRleHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWxsRmllbGR0eXBlcygpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5maWVsZHR5cGVzLm1hcChmaWVsZHR5cGUgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7dGV4dDogZmllbGR0eXBlLmxhYmVsLCB2YWx1ZTogZmllbGR0eXBlLm5hbWUsIGNhdGVnb3JpZXM6IGZpZWxkdHlwZS5jYXRlZ29yaWVzLCBpY29uOiBmaWVsZHR5cGUuaWNvbn07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3dEYXRlKSBvcHRpb25zLnVuc2hpZnQoe3RleHQ6IHRyYW5zbGF0ZSgnY3AucHVibGlzaF9kYXRlJyksIHZhbHVlOiAnZGF0ZScsIGNhdGVnb3JpZXM6IFsnc3lzdGVtJ10sIGlzTWV0YTogdHJ1ZSwgaWNvbjogJ2RhdGUnfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd1NsdWcpIG9wdGlvbnMudW5zaGlmdCh7dGV4dDogdHJhbnNsYXRlKCdjcC5zbHVnJyksIHZhbHVlOiAnc2x1ZycsIGNhdGVnb3JpZXM6IFsnc3lzdGVtJ10sIGlzTWV0YTogdHJ1ZSwgaWNvbjogJ3NsdWcnfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd1RpdGxlKSBvcHRpb25zLnVuc2hpZnQoe3RleHQ6IHRyYW5zbGF0ZSgnY3AudGl0bGUnKSwgdmFsdWU6ICd0aXRsZScsIGNhdGVnb3JpZXM6IFsnc3lzdGVtJ10sIGlzTWV0YTogdHJ1ZSwgaWNvbjogJ3RpdGxlJ30pO1xuXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgfSxcblxuICAgICAgICBzZWFyY2hGaWx0ZXJlZEZpZWxkdHlwZXMoKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuYWxsRmllbGR0eXBlcztcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMuZmlsdGVyKGZpZWxkdHlwZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZHR5cGUudGV4dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRoaXMuc2VhcmNoLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpZWxkdHlwZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5zZWFyY2hGaWx0ZXJlZEZpZWxkdHlwZXM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlckJ5ID09PSAnYWxsJ1xuICAgICAgICAgICAgICAgID8gb3B0aW9uc1xuICAgICAgICAgICAgICAgIDogb3B0aW9ucy5maWx0ZXIoZmllbGR0eXBlID0+IGZpZWxkdHlwZS5jYXRlZ29yaWVzLmluY2x1ZGVzKHRoaXMuZmlsdGVyQnkudG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpbHRlcmVkRmlsdGVycygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZWFyY2ggJiYgdGhpcy5hbGxvd01ldGEpIHJldHVybiB0aGlzLmZpbHRlcnM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMuZmlsdGVyKGZpbHRlciA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRmlsdGVyZWRGaWVsZHR5cGVzLmZpbHRlcihmaWVsZHR5cGUgPT4gZmllbGR0eXBlLmNhdGVnb3JpZXMuaW5jbHVkZXMoZmlsdGVyLnRvTG93ZXJDYXNlKCkpKS5sZW5ndGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxvd01ldGEoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxvd1RpdGxlIHx8IHRoaXMuYWxsb3dTbHVnIHx8IHRoaXMuYWxsb3dEYXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzU2VhcmNoaW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoIHx8IHRoaXMuaXNTZWFyY2hPcGVuO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgc2hvdyh2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwpIHRoaXMuJGVscy5zZWFyY2guZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzZWxlY3Qoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uLmlzTWV0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdE1ldGEoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmNyZWF0ZUZpZWxkKHNlbGVjdGlvbi52YWx1ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGVkJywgZmllbGQpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdE1ldGEoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgZmllbGR0eXBlID0gc2VsZWN0aW9uLnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoWyd0aXRsZScsICdzbHVnJ10uaW5jbHVkZXMoZmllbGR0eXBlKSkge1xuICAgICAgICAgICAgICAgIGZpZWxkdHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZpZWxkID0gdGhpcy5jcmVhdGVGaWVsZChmaWVsZHR5cGUpO1xuXG4gICAgICAgICAgICBmaWVsZCA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRyYW5zbGF0ZShgY3AuJHtzZWxlY3Rpb24udmFsdWV9YCksXG4gICAgICAgICAgICAgICAgbmFtZTogc2VsZWN0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIHR5cGU6IGZpZWxkdHlwZSxcbiAgICAgICAgICAgICAgICBpc01ldGE6IHRydWVcbiAgICAgICAgICAgIH0sIGZpZWxkKTtcblxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0ZWQnLCBmaWVsZCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlRmllbGQobmFtZSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGR0eXBlID0gXy5maW5kV2hlcmUodGhpcy5maWVsZHR5cGVzLCB7IG5hbWUgfSk7XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBpbml0aWFsIGVtcHR5IGZpZWxkLiBUaGUgZXZlbnQgbGlzdGVuZXIgd2lsbCBhc3NpZ24gZGlzcGxheSwgbmFtZSxcbiAgICAgICAgICAgIC8vIGFuZCBpZCBrZXlzLiBUaGlzIHdpbGwgYmUgJ2ZpZWxkX24nIGV0Yywgd2hlcmUgbiB3b3VsZCBiZSB0aGUgdG90YWwgcm9vdFxuICAgICAgICAgICAgLy8gbGV2ZWwsIGdyaWQsIG9yIHNldCBmaWVsZHMgZGVwZW5kaW5nIG9uIHRoZSBldmVudCBsaXN0ZW5lciBsb2NhdGlvbi5cbiAgICAgICAgICAgIGxldCBmaWVsZCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBmaWVsZHR5cGUubmFtZSxcbiAgICAgICAgICAgICAgICBpbnN0cnVjdGlvbnM6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9jYWxpemFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgICAgaXNOZXc6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFZ1ZSdzIHJlYWN0aXZpdHkgd29ya3MgYmVzdCB3aGVuIGFuIG9iamVjdCBhbHJlYWR5IGhhcyB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzLlxuICAgICAgICAgICAgLy8gV2UnbGwgc2V0IHVwIHRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgZWFjaCBjb25maWcgb3B0aW9uLiBFYWNoIG9wdGlvbiBtaWdodFxuICAgICAgICAgICAgLy8gaGF2ZSBhIGRlZmF1bHQgdmFsdWUgZGVmaW5lZCwgb3RoZXJ3aXNlIHdpbGwganVzdCBzZXQgaXQgdG8gbnVsbC5cbiAgICAgICAgICAgIGxldCBkZWZhdWx0cyA9IHt9O1xuICAgICAgICAgICAgXy5lYWNoKGZpZWxkdHlwZS5jb25maWcsIGNvbmZpZ0ZpZWxkID0+IHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0c1tjb25maWdGaWVsZC5uYW1lXSA9IGNvbmZpZ0ZpZWxkLmRlZmF1bHQgfHwgbnVsbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBTbW9vc2ggdGhlIGZpZWxkIHRvZ2V0aGVyIHdpdGggdGhlIGRlZmF1bHRzLlxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIGZpZWxkKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgICAgICAgICB0aGlzLmZpbHRlckJ5ID0gJ2FsbCc7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvcGVuU2VhcmNoKCkge1xuICAgICAgICAgICAgdGhpcy5pc1NlYXJjaE9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy4kZWxzLnNlYXJjaC5mb2N1cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbmNlbFNlYXJjaCgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTZWFyY2hPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEZpZWxkdHlwZVNlbGVjdG9yLnZ1ZT8yZWY1MDU5NiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdj4gPG1vZGFsIDpzaG93PXNob3cgQGNsb3NlZD1jbG9zZSBjbGFzcz1tb2RhbC13aWRlPiA8dGVtcGxhdGUgc2xvdD1oZWFkZXI+e3sgdHJhbnNsYXRlKCdjcC5zZWxlY3RfZmllbGR0eXBlJyl9fTwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSBzbG90PWJvZHk+IDxkaXYgY2xhc3M9ZmlsdGVyPiA8YSBAY2xpY2s9XFxcImZpbHRlckJ5ID0gJ2FsbCdcXFwiIDpjbGFzcz1cXFwieydhY3RpdmUnOiBmaWx0ZXJCeSA9PSAnYWxsJ31cXFwiPnt7IHRyYW5zbGF0ZSgnY3AuYWxsJykgfX08L2E+IDxhIEBjbGljaz1cXFwiZmlsdGVyQnkgPSBmaWx0ZXJcXFwiIHYtZm9yPVxcXCJmaWx0ZXIgaW4gZmlsdGVyZWRGaWx0ZXJzXFxcIiA6Y2xhc3M9XFxcInsnYWN0aXZlJzogZmlsdGVyQnkgPT0gZmlsdGVyfVxcXCI+IHt7IHRyYW5zbGF0ZShgY3AuZmllbGR0eXBlX2NhdGVnb3J5XyR7ZmlsdGVyLnRvTG93ZXJDYXNlKCl9YCkgfX0gPC9hPiA8YSBAY2xpY2sucHJldmVudD1vcGVuU2VhcmNoIDpjbGFzcz1cXFwiWyduby1kb3QnLCB7J2FjdGl2ZSc6IHNlYXJjaH1dXFxcIj48c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLW1hZ25pZnlpbmctZ2xhc3NcXFwiPjwvc3Bhbj48L2E+IDwvZGl2PiA8ZGl2IGNsYXNzPWZpZWxkdHlwZS1zZWxlY3Rvcj4gPGRpdiA6Y2xhc3M9XFxcIlsnc2VhcmNoJywgeyAnaXMtc2VhcmNoaW5nJzogaXNTZWFyY2hpbmcgfV1cXFwiPiA8aW5wdXQgdHlwZT10ZXh0IHYtbW9kZWw9c2VhcmNoIHYtZWw6c2VhcmNoIEBrZXlkb3duLmVzYz1jYW5jZWxTZWFyY2ggOnBsYWNlaG9sZGVyPVxcXCJgJHt0cmFuc2xhdGUoJ2NwLnNlYXJjaCcpfS4uLmBcXFwiLz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZsZXggZmxleC13cmFwIC1teC0xIGZpZWxkdHlwZS1saXN0XFxcIj4gPGRpdiBjbGFzcz1cXFwidy0xLzIgc206dy0xLzMgbWQ6dy0xLzQgcC0xXFxcIiB2LWZvcj1cXFwib3B0aW9uIGluIGZpZWxkdHlwZU9wdGlvbnNcXFwiPiA8YSBjbGFzcz1cXFwiYm9yZGVyIGZsZXggaXRlbXMtY2VudGVyIGdyb3VwIHctZnVsbCByb3VuZGVkIHNoYWRvdy1zbSBweS0xIHB4LTJcXFwiIEBjbGljaz1zZWxlY3Qob3B0aW9uKT4gPHN2Zy1pY29uIGNsYXNzPVxcXCJoLTQgdy00IG9wYWNpdHktNTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0xMDBcXFwiIDpuYW1lPW9wdGlvbi5pY29uPjwvc3ZnLWljb24+IDxzcGFuIGNsYXNzPVxcXCJwbC0yIHRleHQtZ3JleS1kYXJrIGdyb3VwLWhvdmVyOnRleHQtZ3JleS1kYXJrZXN0XFxcIj57eyBvcHRpb24udGV4dCB9fTwvc3Bhbj4gPC9hPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L3RlbXBsYXRlPiA8L21vZGFsPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHNldC1idWlsZGVyL0ZpZWxkdHlwZVNlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL01vZGFsLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTW9kYWwudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Nb2RhbC52dWVcbi8vIG1vZHVsZSBpZCA9IDUxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsXCIgOmNsYXNzPVwiY2xhc3Nlc1wiIHJvbGU9XCJkaWFsb2dcIiB0YWJpbmRleD1cIi0xXCIgdi1pZj1cInNob3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnQgYW5pbWF0ZWRcIiA6Y2xhc3M9XCJ7J3NoYWtlJzogc2hha2V9XCIgdi1vbi1jbGlja2F3YXk9XCJjbG9zZUlmRGlzbWlzc2libGVcIj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzYXZpbmdcIiB2LWlmPVwic2F2aW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbm5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L2k+IHt7IHRyYW5zbGF0ZSgnY3Auc2F2aW5nJykgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjbG9zZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzPVwiY2xvc2VcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIiBAY2xpY2s9XCJjbG9zZVwiPjxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgPGgxPjxzbG90IG5hbWU9XCJoZWFkZXJcIj48L3Nsb3Q+PC9oMT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCIhIGxvYWRpbmdcIiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImJvZHlcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCIhIGxvYWRpbmdcIiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0blwiIEBjbGljaz1cImNsb3NlXCI+e3sgdHJhbnNsYXRlKCdjcC5jbG9zZScpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmltcG9ydCB7IG1peGluIGFzIGNsaWNrYXdheSB9IGZyb20gJ3Z1ZS1jbGlja2F3YXknO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFsgY2xpY2thd2F5IF0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBmdWxsOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGlzbWlzc2libGU6IHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBsb2FkaW5nOiBCb29sZWFuLFxuICAgICAgICBzYXZpbmc6IEJvb2xlYW4sXG4gICAgICAgIHNoYWtlOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBjbGFzc2VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICAnbW9kYWwtZnVsbCc6IHRoaXMuZnVsbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSB7fTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jbGFzcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBfLmVhY2godGhpcy5jbGFzcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXNbY10gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0gdGhpcy5jbGFzcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgY2xhc3Nlcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBjbG9zZUlmRGlzbWlzc2libGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzbWlzc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICB3YXRjaDoge1xuICAgICAgICAvLyBFbWl0IGFuIGV2ZW50IHNvIHdlIGNhbiB1c2Ugb25lLXdheS1kb3duIHByb3BzIHRvIHByZXBhcmUgZm9yIHZ1ZTJcbiAgICAgICAgc2hvdyh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQodmFsID09PSB0cnVlID8gJ29wZW5lZCcgOiAnY2xvc2VkJyk7XG4gICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCh2YWwgPT09IHRydWUgPyAnbW9kYWwub3BlbicgOiAnbW9kYWwuY2xvc2UnKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIE1vdXNldHJhcC5iaW5kKCdlc2MnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSwgJ2tleXVwJyk7XG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnY2xvc2UtbW9kYWwnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBNb2RhbC52dWU/ZmFmMGY1YjIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9bW9kYWwgOmNsYXNzPWNsYXNzZXMgcm9sZT1kaWFsb2cgdGFiaW5kZXg9LTEgdi1pZj1zaG93PiA8ZGl2IGNsYXNzPW1vZGFsLWRpYWxvZz4gPGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGVudCBhbmltYXRlZFxcXCIgOmNsYXNzPVxcXCJ7J3NoYWtlJzogc2hha2V9XFxcIiB2LW9uLWNsaWNrYXdheT1jbG9zZUlmRGlzbWlzc2libGU+IDxkaXYgY2xhc3M9c2F2aW5nIHYtaWY9c2F2aW5nPiA8ZGl2IGNsYXNzPWlubmVyPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L2k+IHt7IHRyYW5zbGF0ZSgnY3Auc2F2aW5nJykgfX0gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPW1vZGFsLWhlYWRlcj4gPHNsb3QgbmFtZT1jbG9zZT4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiB0YWJpbmRleD0tMSBjbGFzcz1jbG9zZSBhcmlhLWxhYmVsPUNsb3NlIEBjbGljaz1jbG9zZT48c3BhbiBhcmlhLWhpZGRlbj10cnVlPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+IDwvc2xvdD4gPGgxPjxzbG90IG5hbWU9aGVhZGVyPjwvc2xvdD48L2gxPiA8L2Rpdj4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9bG9hZGluZz4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fSA8L2Rpdj4gPGRpdiB2LWlmPVxcXCIhIGxvYWRpbmdcXFwiIGNsYXNzPW1vZGFsLWJvZHk+IDxzbG90IG5hbWU9Ym9keT48L3Nsb3Q+IDwvZGl2PiA8ZGl2IHYtaWY9XFxcIiEgbG9hZGluZ1xcXCIgY2xhc3M9bW9kYWwtZm9vdGVyPiA8c2xvdCBuYW1lPWZvb3Rlcj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1idG4gQGNsaWNrPWNsb3NlPnt7IHRyYW5zbGF0ZSgnY3AuY2xvc2UnKSB9fTwvYnV0dG9uPiA8L3Nsb3Q+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL01vZGFsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1BhZ2luYXRpb24udnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9QYWdpbmF0aW9uLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9QYWdpbmF0aW9uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDx1bCBjbGFzcz1cInBhZ2luYXRpb25cIj5cbiAgICAgICAgPGxpIHYtaWY9XCJoYXNQcmV2aW91c1wiPlxuICAgICAgICAgICAgPGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwic2VsZWN0UHJldmlvdXNQYWdlXCI+PHNwYW4+JmxhcXVvOzwvc3Bhbj48L2E+XG4gICAgICAgIDwvbGk+XG5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJzZWdtZW50ZWRcIj5cbiAgICAgICAgICAgIDxsaSBpcz1cInBhZ2VcIlxuICAgICAgICAgICAgICAgIHYtZm9yPVwiaXRlbSBpbiBzZWdtZW50cy5maXJzdFwiXG4gICAgICAgICAgICAgICAgOm51bWJlcj1cIml0ZW0ucGFnZVwiPjwvbGk+XG5cbiAgICAgICAgICAgIDxsaSB2LWlmPVwic2hvd0ZpcnN0RWxsaXBzaXNcIiBjbGFzcz1cImRpc2FibGVkXCI+PHNwYW4+Li4uPC9zcGFuPjwvbGk+XG5cbiAgICAgICAgICAgIDxsaSBpcz1cInBhZ2VcIlxuICAgICAgICAgICAgICAgIHYtZm9yPVwiaXRlbSBpbiBzZWdtZW50cy5zbGlkZXJcIlxuICAgICAgICAgICAgICAgIDpudW1iZXI9XCJpdGVtLnBhZ2VcIj48L2xpPlxuXG4gICAgICAgICAgICA8bGkgdi1pZj1cInNob3dMYXN0RWxsaXBzaXNcIiBjbGFzcz1cImRpc2FibGVkXCI+PHNwYW4+Li4uPC9zcGFuPjwvbGk+XG5cbiAgICAgICAgICAgIDxsaSBpcz1cInBhZ2VcIlxuICAgICAgICAgICAgICAgIHYtZm9yPVwiaXRlbSBpbiBzZWdtZW50cy5sYXN0XCJcbiAgICAgICAgICAgICAgICA6bnVtYmVyPVwiaXRlbS5wYWdlXCI+PC9saT5cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICA8bGkgaXM9XCJwYWdlXCIgdi1pZj1cIiFzZWdtZW50ZWRcIiB2LWZvcj1cIm4gaW4gdG90YWxcIiA6bnVtYmVyPVwibisxXCI+PC9saT5cblxuICAgICAgICA8bGkgdi1pZj1cImhhc05leHRcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cInNlbGVjdE5leHRQYWdlXCI+PHNwYW4+JnJhcXVvOzwvc3Bhbj48L2E+XG4gICAgICAgIDwvbGk+XG4gICAgPC91bD5cblxuPC90ZW1wbGF0ZT5cblxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBwYWdlOiByZXF1aXJlKCcuL1BhZ2UudnVlJylcbiAgICB9LFxuXG5cbiAgICBwcm9wczogWyd0b3RhbCcsICdjdXJyZW50JywgJ3NlZ21lbnRzJ10sXG5cblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaGFzUHJldmlvdXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50ID4gMTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNOZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCA8IHRoaXMudG90YWw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2VnbWVudGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VnbWVudHMgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNTbGlkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnNlZ21lbnRzLnNsaWRlci5sZW5ndGgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dGaXJzdEVsbGlwc2lzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzU2xpZGVyO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dMYXN0RWxsaXBzaXMoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNTbGlkZXIpIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnNlZ21lbnRzLmxhc3QubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIHNlbGVjdChwYWdlKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3RlZCcsIHBhZ2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdFByZXZpb3VzUGFnZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0KHRoaXMuY3VycmVudCAtIDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdE5leHRQYWdlKCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QodGhpcy5jdXJyZW50ICsgMSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gUGFnaW5hdGlvbi52dWU/MmYwNzYxY2UiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9QYWdlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vUGFnZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDUyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8bGkgOmNsYXNzPVwieyAnYWN0aXZlJzogaXNDdXJyZW50IH1cIj5cbiAgICAgICAgPGEgaHJlZj1cIlwiIEBjbGljay5wcmV2ZW50PVwic2VsZWN0XCI+XG4gICAgICAgICAgICB7eyBudW1iZXIgfX1cbiAgICAgICAgPC9hPlxuICAgIDwvbGk+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ251bWJlciddLFxuXG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmUgaWYgdGhpcyBwYWdlIGlzIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBcImN1cnJlbnRcIiBwcm9wZXJ0eSBzaG91bGQgYmUgYSBwcm9wLCBidXQgaGV5LCB0aGlzIGlzIGEgbGl0dGxlIGNsZWFuZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpc0N1cnJlbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW1iZXIgPT09IHRoaXMuJHBhcmVudC5jdXJyZW50O1xuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlbGVjdCB0aGlzIHBhZ2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgc2hvdWxkIHByb2JhYmx5IGVtaXQgYW4gZXZlbnQgYW5kIGhhdmUgdGhlIFBhZ2luYXRpb24gY29tcG9uZW50XG4gICAgICAgICAqIGxpc3RlbiBmb3IgaXQsIGJ1dCBhZ2FpbiwgdGhpcyBpcyBjbGVhbmVyIGFuZCBzdGlsbCB3b3JrcyBpbiBWdWUgMS5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudC5zZWxlY3QodGhpcy5udW1iZXIpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFBhZ2UudnVlPzZmZjhkZmU4IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8bGkgOmNsYXNzPVxcXCJ7ICdhY3RpdmUnOiBpc0N1cnJlbnQgfVxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9c2VsZWN0PiB7eyBudW1iZXIgfX0gPC9hPiA8L2xpPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3BhZ2luYXRpb24vUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDUyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDx1bCBjbGFzcz1wYWdpbmF0aW9uPiA8bGkgdi1pZj1oYXNQcmV2aW91cz4gPGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1zZWxlY3RQcmV2aW91c1BhZ2U+PHNwYW4+JmxhcXVvOzwvc3Bhbj48L2E+IDwvbGk+IDx0ZW1wbGF0ZSB2LWlmPXNlZ21lbnRlZD4gPGxpIGlzPXBhZ2Ugdi1mb3I9XFxcIml0ZW0gaW4gc2VnbWVudHMuZmlyc3RcXFwiIDpudW1iZXI9aXRlbS5wYWdlPjwvbGk+IDxsaSB2LWlmPXNob3dGaXJzdEVsbGlwc2lzIGNsYXNzPWRpc2FibGVkPjxzcGFuPi4uLjwvc3Bhbj48L2xpPiA8bGkgaXM9cGFnZSB2LWZvcj1cXFwiaXRlbSBpbiBzZWdtZW50cy5zbGlkZXJcXFwiIDpudW1iZXI9aXRlbS5wYWdlPjwvbGk+IDxsaSB2LWlmPXNob3dMYXN0RWxsaXBzaXMgY2xhc3M9ZGlzYWJsZWQ+PHNwYW4+Li4uPC9zcGFuPjwvbGk+IDxsaSBpcz1wYWdlIHYtZm9yPVxcXCJpdGVtIGluIHNlZ21lbnRzLmxhc3RcXFwiIDpudW1iZXI9aXRlbS5wYWdlPjwvbGk+IDwvdGVtcGxhdGU+IDxsaSBpcz1wYWdlIHYtaWY9IXNlZ21lbnRlZCB2LWZvcj1cXFwibiBpbiB0b3RhbFxcXCIgOm51bWJlcj1uKzE+PC9saT4gPGxpIHYtaWY9aGFzTmV4dD4gPGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1zZWxlY3ROZXh0UGFnZT48c3Bhbj4mcmFxdW87PC9zcGFuPjwvYT4gPC9saT4gPC91bD4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9wYWdpbmF0aW9uL1BhZ2luYXRpb24udnVlXG4vLyBtb2R1bGUgaWQgPSA1MjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vRG9zc2llclNlYXJjaC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Rvc3NpZXJTZWFyY2gudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9kb3NzaWVyL0Rvc3NpZXJTZWFyY2gudnVlXG4vLyBtb2R1bGUgaWQgPSA1MjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwic2VhcmNoXCJcbiAgICAgICAgOnBsYWNlaG9sZGVyPVwidHJhbnNsYXRlKCdjcC5zZWFyY2gnKVwiXG4gICAgICAgIEBrZXlkb3duLmVzYy5wcmV2ZW50PVwicmVzZXRcIlxuICAgICAgICB2LW1vZGVsPVwia2V5d29yZFwiXG4gICAgICAgIGNsYXNzPVwiZmlsdGVyLWNvbnRyb2wgc2VhcmNoXCJcbiAgICAgICAgZGVib3VuY2U9XCI1MDBcIlxuICAgIC8+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiBbJ2tleXdvcmQnXSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMua2V5d29yZCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIERvc3NpZXJTZWFyY2gudnVlPzE3NmRlNDA3IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8aW5wdXQgdHlwZT1zZWFyY2ggOnBsYWNlaG9sZGVyPVxcXCJ0cmFuc2xhdGUoJ2NwLnNlYXJjaCcpXFxcIiBAa2V5ZG93bi5lc2MucHJldmVudD1yZXNldCB2LW1vZGVsPWtleXdvcmQgY2xhc3M9XFxcImZpbHRlci1jb250cm9sIHNlYXJjaFxcXCIgZGVib3VuY2U9NTAwIC8+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZG9zc2llci9Eb3NzaWVyU2VhcmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NvcnRTZWxlY3Rvci52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NvcnRTZWxlY3Rvci52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Rvc3NpZXIvU29ydFNlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJkb3NzaWVyLXNvcnQtb3B0aW9uc1wiPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tbGlzdFwiPjwvc3Bhbj5cbiAgICAgICAgICAgIHt7IHNvcnRMYWJlbCB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPlxuICAgICAgICAgICAgPGxpIHYtZm9yPVwiY29sdW1uIGluICRwYXJlbnQuY29sdW1uc1wiPlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cImNoYW5nZVNvcnRDb2x1bW4oY29sdW1uLmZpZWxkKVwiPlxuICAgICAgICAgICAgICAgICAgICB7eyBjb2x1bW4uaGVhZGVyIH19XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNoZWNrIHB1bGwtcmlnaHQgbXItMFwiIHYtaWY9XCJzb3J0ID09PSBjb2x1bW4uZmllbGRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cImRpdmlkZXJcIj48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cImNoYW5nZVNvcnRPcmRlcignYXNjJylcIj5cbiAgICAgICAgICAgICAgICBBc2NlbmRpbmdcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jaGVjayBwdWxsLXJpZ2h0IG1yLTBcIiB2LWlmPVwic29ydE9yZGVyID09PSAnYXNjJ1wiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cImNoYW5nZVNvcnRPcmRlcignZGVzYycpXCI+XG4gICAgICAgICAgICAgICAgRGVzY2VuZGluZ1xuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNoZWNrIHB1bGwtcmlnaHQgbXItMFwiIHYtaWY9XCJzb3J0T3JkZXIgPT09ICdkZXNjJ1wiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYT48L2xpPlxuICAgICAgICA8L3VsPlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBjb21wdXRlZDoge1xuXG4gICAgICAgIHNvcnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcGFyZW50LnNvcnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc29ydE9yZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC5zb3J0T3JkZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc29ydExhYmVsKCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLiRwYXJlbnQuY29sdW1ucywgeyBmaWVsZDogdGhpcy5zb3J0IH0pLmhlYWRlcjtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBjaGFuZ2VTb3J0Q29sdW1uKHNvcnQpIHtcbiAgICAgICAgICAgIHRoaXMuJHBhcmVudC5zb3J0Qnkoc29ydCwgdGhpcy5zb3J0T3JkZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoYW5nZVNvcnRPcmRlcihvcmRlcikge1xuICAgICAgICAgICAgdGhpcy4kcGFyZW50LnNvcnRCeSh0aGlzLnNvcnQsIG9yZGVyKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU29ydFNlbGVjdG9yLnZ1ZT84MGI1OWJlNiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1kb3NzaWVyLXNvcnQtb3B0aW9ucz4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBkYXRhLXRvZ2dsZT1kcm9wZG93bj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1saXN0XFxcIj48L3NwYW4+IHt7IHNvcnRMYWJlbCB9fSA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnU+IDxsaSB2LWZvcj1cXFwiY29sdW1uIGluICRwYXJlbnQuY29sdW1uc1xcXCI+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9Y2hhbmdlU29ydENvbHVtbihjb2x1bW4uZmllbGQpPiB7eyBjb2x1bW4uaGVhZGVyIH19IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2hlY2sgcHVsbC1yaWdodCBtci0wXFxcIiB2LWlmPVxcXCJzb3J0ID09PSBjb2x1bW4uZmllbGRcXFwiPjwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgY2xhc3M9ZGl2aWRlcj48L2xpPiA8bGk+PGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1cXFwiY2hhbmdlU29ydE9yZGVyKCdhc2MnKVxcXCI+IEFzY2VuZGluZyA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNoZWNrIHB1bGwtcmlnaHQgbXItMFxcXCIgdi1pZj1cXFwic29ydE9yZGVyID09PSAnYXNjJ1xcXCI+PC9zcGFuPiA8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcImNoYW5nZVNvcnRPcmRlcignZGVzYycpXFxcIj4gRGVzY2VuZGluZyA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNoZWNrIHB1bGwtcmlnaHQgbXItMFxcXCIgdi1pZj1cXFwic29ydE9yZGVyID09PSAnZGVzYydcXFwiPjwvc3Bhbj4gPC9hPjwvbGk+IDwvdWw+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Rvc3NpZXIvU29ydFNlbGVjdG9yLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEZpZWxkdHlwZXNcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IEFycmF5RmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BcnJheUZpZWxkdHlwZS52dWUnXG5pbXBvcnQgQXNzZXRzRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9hc3NldHMvQXNzZXRzRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBBc3NldHNGb2xkZXJGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0Fzc2V0c0ZvbGRlckZpZWxkdHlwZS52dWUnXG5pbXBvcnQgQXNzZXRDb250YWluZXJGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0Fzc2V0Q29udGFpbmVyRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBCYXJkRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IENoZWNrYm94ZXNGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0NoZWNrYm94ZXNGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IENvbGxlY3Rpb25GaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0NvbGxlY3Rpb25GaWVsZHR5cGUudnVlJ1xuaW1wb3J0IENvbGxlY3Rpb25zRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Db2xsZWN0aW9uc0ZpZWxkdHlwZS52dWUnXG5pbXBvcnQgRGF0ZUZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRGF0ZUZpZWxkdHlwZS52dWUnXG5pbXBvcnQgR3JpZEZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvR3JpZEZpZWxkdHlwZS52dWUnXG5pbXBvcnQgRmllbGRzZXRGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0ZpZWxkc2V0RmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBGb3JtRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Gb3JtRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBIaWRkZW5GaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0hpZGRlbkZpZWxkdHlwZS52dWUnXG5pbXBvcnQgSW50ZWdlckZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvSW50ZWdlckZpZWxkdHlwZS52dWUnXG5pbXBvcnQgTGlzdEZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvTGlzdEZpZWxkdHlwZS52dWUnXG5pbXBvcnQgTG9jYWxlU2V0dGluZ3NGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL0xvY2FsZVNldHRpbmdzRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBNYXJrZG93bkZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvTWFya2Rvd25GaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFBhZ2VzRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9QYWdlc0ZpZWxkdHlwZS52dWUnXG5pbXBvcnQgUmFkaW9GaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1JhZGlvRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBSZWRhY3RvckZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVkYWN0b3IvUmVkYWN0b3JGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFJlZGFjdG9yU2V0dGluZ3NGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL3JlZGFjdG9yL1JlZGFjdG9yU2V0dGluZ3NGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFJlbGF0ZUZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVsYXRlL1JlbGF0ZUZpZWxkdHlwZS52dWUnXG5pbXBvcnQgUmVwbGljYXRvckZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBSZXZlYWxlckZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUmV2ZWFsZXJGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFJvdXRlc0ZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUm91dGVzRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBTZWN0aW9uRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TZWN0aW9uRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBTZWxlY3RGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1NlbGVjdEZpZWxkdHlwZS52dWUnXG5pbXBvcnQgU3RhdHVzRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TdGF0dXNGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFN1Z2dlc3RGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1N1Z2dlc3RGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFRhYmxlRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UYWJsZUZpZWxkdHlwZS52dWUnXG5pbXBvcnQgVGFnc0ZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGFnc0ZpZWxkdHlwZS52dWUnXG5pbXBvcnQgVGF4b25vbXlGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1RheG9ub215RmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBUZW1wbGF0ZUZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGVtcGxhdGVGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFRleHRGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1RleHRGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFRleHRhcmVhRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UZXh0YXJlYUZpZWxkdHlwZS52dWUnXG5pbXBvcnQgVGhlbWVGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1RoZW1lRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBUaW1lRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UaW1lRmllbGR0eXBlLnZ1ZSdcbmltcG9ydCBUb2dnbGVGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1RvZ2dsZUZpZWxkdHlwZS52dWUnXG5pbXBvcnQgWWFtbEZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvWWFtbEZpZWxkdHlwZS52dWUnXG5pbXBvcnQgVXNlckdyb3Vwc0ZpZWxkdHlwZSBmcm9tICcuLi9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlckdyb3Vwc0ZpZWxkdHlwZS52dWUnXG5pbXBvcnQgVXNlclJvbGVzRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Vc2VyUm9sZXNGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IFZpZGVvRmllbGR0eXBlIGZyb20gJy4uL2NvbXBvbmVudHMvZmllbGR0eXBlcy9WaWRlb0ZpZWxkdHlwZS52dWUnXG5pbXBvcnQgVXNlcnNGaWVsZHR5cGUgZnJvbSAnLi4vY29tcG9uZW50cy9maWVsZHR5cGVzL1VzZXJzRmllbGR0eXBlLnZ1ZSdcblxuVnVlLmNvbXBvbmVudCgnYXJyYXktZmllbGR0eXBlJywgQXJyYXlGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnYXNzZXRzLWZpZWxkdHlwZScsIEFzc2V0c0ZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdhc3NldF9jb250YWluZXItZmllbGR0eXBlJywgQXNzZXRDb250YWluZXJGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnYXNzZXRfZm9sZGVyLWZpZWxkdHlwZScsIEFzc2V0c0ZvbGRlckZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdiYXJkLWZpZWxkdHlwZScsIEJhcmRGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnY2hlY2tib3hlcy1maWVsZHR5cGUnLCBDaGVja2JveGVzRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ2NvbGxlY3Rpb24tZmllbGR0eXBlJywgQ29sbGVjdGlvbkZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdjb2xsZWN0aW9ucy1maWVsZHR5cGUnLCBDb2xsZWN0aW9uc0ZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdkYXRlLWZpZWxkdHlwZScsIERhdGVGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnZmllbGRzZXQtZmllbGR0eXBlJywgRmllbGRzZXRGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnZm9ybS1maWVsZHR5cGUnLCBGb3JtRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ2dyaWQtZmllbGR0eXBlJywgR3JpZEZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdoaWRkZW4tZmllbGR0eXBlJywgSGlkZGVuRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ2ludGVnZXItZmllbGR0eXBlJywgSW50ZWdlckZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdsaXN0LWZpZWxkdHlwZScsIExpc3RGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnbG9jYWxlX3NldHRpbmdzLWZpZWxkdHlwZScsIExvY2FsZVNldHRpbmdzRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ21hcmtkb3duLWZpZWxkdHlwZScsIE1hcmtkb3duRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3BhZ2VzLWZpZWxkdHlwZScsIFBhZ2VzRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3JhZGlvLWZpZWxkdHlwZScsIFJhZGlvRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3JlZGFjdG9yLWZpZWxkdHlwZScsIFJlZGFjdG9yRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3JlZGFjdG9yX3NldHRpbmdzLWZpZWxkdHlwZScsIFJlZGFjdG9yU2V0dGluZ3NGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgncmVsYXRlLWZpZWxkdHlwZScsIFJlbGF0ZUZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdyZXBsaWNhdG9yLWZpZWxkdHlwZScsIFJlcGxpY2F0b3JGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgncmV2ZWFsZXItZmllbGR0eXBlJywgUmV2ZWFsZXJGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgncm91dGVzLWZpZWxkdHlwZScsIFJvdXRlc0ZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdzZWN0aW9uLWZpZWxkdHlwZScsIFNlY3Rpb25GaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgnc2VsZWN0LWZpZWxkdHlwZScsIFNlbGVjdEZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCdzdGF0dXMtZmllbGR0eXBlJywgU3RhdHVzRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3N1Z2dlc3QtZmllbGR0eXBlJywgU3VnZ2VzdEZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCd0YWJsZS1maWVsZHR5cGUnLCBUYWJsZUZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCd0YWdzLWZpZWxkdHlwZScsIFRhZ3NGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgndGF4b25vbXktZmllbGR0eXBlJywgVGF4b25vbXlGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgndGVtcGxhdGUtZmllbGR0eXBlJywgVGVtcGxhdGVGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgndGV4dC1maWVsZHR5cGUnLCBUZXh0RmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3RleHRhcmVhLWZpZWxkdHlwZScsIFRleHRhcmVhRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3RoZW1lLWZpZWxkdHlwZScsIFRoZW1lRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3RpbWUtZmllbGR0eXBlJywgVGltZUZpZWxkdHlwZSk7XG5WdWUuY29tcG9uZW50KCd0b2dnbGUtZmllbGR0eXBlJywgVG9nZ2xlRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3VzZXJzLWZpZWxkdHlwZScsIFVzZXJzRmllbGR0eXBlKTtcblZ1ZS5jb21wb25lbnQoJ3VzZXJfZ3JvdXBzLWZpZWxkdHlwZScsIFVzZXJHcm91cHNGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgndXNlcl9yb2xlcy1maWVsZHR5cGUnLCBVc2VyUm9sZXNGaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgndmlkZW8tZmllbGR0eXBlJywgVmlkZW9GaWVsZHR5cGUpO1xuVnVlLmNvbXBvbmVudCgneWFtbC1maWVsZHR5cGUnLCBZYW1sRmllbGR0eXBlKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvYm9vdHN0cmFwL2ZpZWxkdHlwZXMuanMiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BcnJheUZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0FycmF5RmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BcnJheUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDUzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImFycmF5LWZpZWxkdHlwZS1jb250YWluZXJcIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPSdncmlkLWZpZWxkIGFycmF5LWtleWVkJyB2LWlmPVwiY29tcG9uZW50VHlwZSA9PT0gJ2tleWVkJ1wiPlxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZ3JpZC10YWJsZSBncmlkLW1vZGUtdGFibGUgaGVhZGxlc3NcIj5cbiAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDx0ciB2LWlmPVwiZGF0YVwiIHYtZm9yPVwia2V5IGluIGNvbmZpZy5rZXlzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGg+e3sga2V5LnRleHQgfX08L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImRhdGFba2V5LnZhbHVlXVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImNvbXBvbmVudFR5cGUgPT09ICdkeW5hbWljJ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyaWQtZmllbGQgYXJyYXktZHluYW1pY1wiPlxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cImdyaWQtdGFibGUgZ3JpZC1tb2RlLXRhYmxlXCIgdi1pZj1cImhhc1Jvd3NcIj5cbiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD57eyB2YWx1ZUhlYWRlciB9fTwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPnt7IHRleHRIZWFkZXIgfX08L3RoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cInJvdy1jb250cm9sc1wiPjwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgICAgICAgICA8dGJvZHkgdi1lbDp0Ym9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj1cIihyb3dJbmRleCwgcm93KSBpbiBkYXRhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJyb3cudmFsdWVcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJyb3cudGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJyb3ctY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tbWVudSBtb3ZlIGRyYWctaGFuZGxlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jcm9zcyBkZWxldGVcIiB2LW9uOmNsaWNrPVwiZGVsZXRlUm93KHJvd0luZGV4KVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBAY2xpY2s9XCJhZGRSb3dcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgYWRkUm93QnV0dG9uIH19IDxpIGNsYXNzPVwiaWNvbiBpY29uLXBsdXNcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhIHx8IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFR5cGUgPT09ICdrZXllZCcpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9ICh0aGlzLmRhdGEubGVuZ3RoID09PSAwKSA/IHt9IDogdGhpcy5kYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50VHlwZSA9PT0gJ2R5bmFtaWMnKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRTb3J0YWJsZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGNvbXBvbmVudFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmNvbmZpZy5rZXlzKSA/ICdrZXllZCcgOiAnZHluYW1pYyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzUm93czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGggPiAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFJvd0J1dHRvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuYWRkX3JvdyB8fCB0cmFuc2xhdGVfY2hvaWNlKCdjcC5hZGRfcm93JywgMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFsdWVIZWFkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnZhbHVlX2hlYWRlciB8fCAnVmFsdWUnO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRleHRIZWFkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnRleHRfaGVhZGVyIHx8ICdUZXh0JztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGFkZFJvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEucHVzaCh7IHZhbHVlOiAnJywgdGV4dDogJycgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlUm93OiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFNvcnRhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciBzdGFydCA9ICcnO1xuXG4gICAgICAgICAgICAkKHRoaXMuJGVscy50Ym9keSkuc29ydGFibGUoe1xuICAgICAgICAgICAgICAgIGF4aXM6IFwieVwiLFxuICAgICAgICAgICAgICAgIHJldmVydDogMTc1LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogJy5kcmFnLWhhbmRsZScsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICd0YWJsZS1yb3ctcGxhY2Vob2xkZXInLFxuICAgICAgICAgICAgICAgIGZvcmNlUGxhY2Vob2xkZXJTaXplOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdWkuaXRlbS5pbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICB1aS5wbGFjZWhvbGRlci5oZWlnaHQodWkuaXRlbS5oZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCAgPSB1aS5pdGVtLmluZGV4KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2FwID0gc2VsZi5kYXRhLnNwbGljZShzdGFydCwgMSlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhLnNwbGljZShlbmQsIDAsIHN3YXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuXG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBcnJheUZpZWxkdHlwZS52dWU/MmIyYzQzNzYiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9YXJyYXktZmllbGR0eXBlLWNvbnRhaW5lcj4gPGRpdiBjbGFzcz1cXFwiZ3JpZC1maWVsZCBhcnJheS1rZXllZFxcXCIgdi1pZj1cXFwiY29tcG9uZW50VHlwZSA9PT0gJ2tleWVkJ1xcXCI+IDx0YWJsZSBjbGFzcz1cXFwiZ3JpZC10YWJsZSBncmlkLW1vZGUtdGFibGUgaGVhZGxlc3NcXFwiPiA8dGJvZHk+IDx0ciB2LWlmPWRhdGEgdi1mb3I9XFxcImtleSBpbiBjb25maWcua2V5c1xcXCI+IDx0aD57eyBrZXkudGV4dCB9fTwvdGg+IDx0ZD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1kYXRhW2tleS52YWx1ZV0gLz4gPC90ZD4gPC90cj4gPC90Ym9keT4gPC90YWJsZT4gPC9kaXY+IDx0ZW1wbGF0ZSB2LWlmPVxcXCJjb21wb25lbnRUeXBlID09PSAnZHluYW1pYydcXFwiPiA8ZGl2IGNsYXNzPVxcXCJncmlkLWZpZWxkIGFycmF5LWR5bmFtaWNcXFwiPiA8dGFibGUgY2xhc3M9XFxcImdyaWQtdGFibGUgZ3JpZC1tb2RlLXRhYmxlXFxcIiB2LWlmPWhhc1Jvd3M+IDx0aGVhZD4gPHRyPiA8dGg+e3sgdmFsdWVIZWFkZXIgfX08L3RoPiA8dGg+e3sgdGV4dEhlYWRlciB9fTwvdGg+IDx0aCBjbGFzcz1yb3ctY29udHJvbHM+PC90aD4gPC90cj4gPC90aGVhZD4gPHRib2R5IHYtZWw6dGJvZHk+IDx0ciB2LWZvcj1cXFwiKHJvd0luZGV4LCByb3cpIGluIGRhdGFcXFwiPiA8dGQ+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9cm93LnZhbHVlIC8+IDwvdGQ+IDx0ZD4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgdi1tb2RlbD1yb3cudGV4dCAvPiA8L3RkPiA8dGQgY2xhc3M9cm93LWNvbnRyb2xzPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLW1lbnUgbW92ZSBkcmFnLWhhbmRsZVxcXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNyb3NzIGRlbGV0ZVxcXCIgdi1vbjpjbGljaz1kZWxldGVSb3cocm93SW5kZXgpPjwvc3Bhbj4gPC90ZD4gPC90cj4gPC90Ym9keT4gPC90YWJsZT4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBAY2xpY2s9YWRkUm93PiB7eyBhZGRSb3dCdXR0b24gfX0gPGkgY2xhc3M9XFxcImljb24gaWNvbi1wbHVzXFxcIj48L2k+IDwvYnV0dG9uPiA8L2Rpdj4gPC90ZW1wbGF0ZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BcnJheUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDUzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5yZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwiaWRcXFwiOjEsXFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcyFzYXNzLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZSZpbmRleD0wIS4vQXNzZXRzRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXNzZXRzRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXNzZXRzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9hc3NldHMvQXNzZXRzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwiYXNzZXRzLWZpZWxkdHlwZVwiXG4gICAgICAgIDpjbGFzcz1cIntcbiAgICAgICAgICAgICdtYXgtZmlsZXMtcmVhY2hlZCc6IG1heEZpbGVzUmVhY2hlZCxcbiAgICAgICAgICAgICdlbXB0eSc6ICEgYXNzZXRzLmxlbmd0aCxcbiAgICAgICAgICAgICdzb2xvJzogc29sb0Fzc2V0LFxuICAgICAgICB9XCJcbiAgICAgICAgQGRyYWdvdmVyPVwiZHJhZ092ZXJcIlxuICAgICAgICBAZHJhZ2xlYXZlPVwiZHJhZ1N0b3BcIlxuICAgICAgICBAZHJvcD1cImRyYWdTdG9wXCI+XG5cbiAgICAgICAgPGRpdiB2LWlmPVwibG9hZGluZ1wiIGNsYXNzPVwibG9hZGluZyBsb2FkaW5nLWJhc2ljXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5sb2FkaW5nJykgfX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRyYWctbm90aWZpY2F0aW9uXCIgdi1pZj1cImNvbnRhaW5lclNwZWNpZmllZCAmJiBkcmFnZ2luZ0ZpbGUgJiYgIXNob3dTZWxlY3RvclwiPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tZG93bmxvYWRcIj48L2k+XG4gICAgICAgICAgICA8aDM+e3sgdHJhbnNsYXRlKCdjcC5kcm9wX3RvX3VwbG9hZCcpIH19PC9oMz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCIhbG9hZGluZ1wiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFuYWdlLWFzc2V0c1wiIHYtaWY9XCIhbWF4RmlsZXNSZWFjaGVkXCIgOmNsYXNzPVwieydiYXJkLWRyYWctaGFuZGxlJzogaXNJbkJhcmRGaWVsZH1cIj5cblxuICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cIiFjb250YWluZXJTcGVjaWZpZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24td2FybmluZ1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5ub19hc3NldF9jb250YWluZXJfc3BlY2lmaWVkJykgfX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXdpdGgtaWNvbiBtci04XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cIm9wZW5TZWxlY3RvclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAa2V5dXAuc3BhY2UuZW50ZXI9XCJvcGVuU2VsZWN0b3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1mb2xkZXItaW1hZ2VzXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5icm93c2VfYXNzZXRzJykgfX1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4td2l0aC1pY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwidXBsb2FkRmlsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tdXBsb2FkLXRvLWNsb3VkXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC51cGxvYWQnKSB9fVxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICA8cD57eyB0cmFuc2xhdGUoJ2NwLm9yX2RyYWdfYW5kX2Ryb3BfZmlsZXMnKSB9fTwvcD5cblxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZGVsZXRlLWJhcmQtc2V0IGJ0biBidG4taWNvbiBwdWxsLXJpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9XCJpc0luQmFyZEZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50PVwiJGRpc3BhdGNoKCdhc3NldC1maWVsZC5kZWxldGUtYmFyZC1zZXQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tdHJhc2hcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8dXBsb2FkZXJcbiAgICAgICAgICAgICAgICB2LXJlZjp1cGxvYWRlclxuICAgICAgICAgICAgICAgIHYtaWY9XCJjb250YWluZXJTcGVjaWZpZWQgJiYgIXNob3dTZWxlY3RvclwiXG4gICAgICAgICAgICAgICAgOmRvbS1lbGVtZW50PVwidXBsb2FkRWxlbWVudFwiXG4gICAgICAgICAgICAgICAgOmNvbnRhaW5lcj1cImNvbnRhaW5lclwiXG4gICAgICAgICAgICAgICAgOnBhdGg9XCJmb2xkZXJcIlxuICAgICAgICAgICAgICAgIEB1cGRhdGVkPVwidXBsb2Fkc1VwZGF0ZWRcIlxuICAgICAgICAgICAgICAgIEB1cGxvYWQtY29tcGxldGU9XCJ1cGxvYWRDb21wbGV0ZVwiPlxuICAgICAgICAgICAgPC91cGxvYWRlcj5cblxuICAgICAgICAgICAgPHVwbG9hZHNcbiAgICAgICAgICAgICAgICB2LWlmPVwidXBsb2Fkcy5sZW5ndGhcIlxuICAgICAgICAgICAgICAgIDp1cGxvYWRzPVwidXBsb2Fkc1wiPlxuICAgICAgICAgICAgPC91cGxvYWRzPlxuXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImV4cGFuZGVkICYmICEgc29sb0Fzc2V0XCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtZ3JpZC1saXN0aW5nXCIgdi1pZj1cImRpc3BsYXlNb2RlID09PSAnZ3JpZCdcIiB2LWVsOmFzc2V0cz5cblxuICAgICAgICAgICAgICAgICAgICA8YXNzZXQtdGlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9XCJhc3NldCBpbiBhc3NldHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmFzc2V0PVwiYXNzZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQHJlbW92ZWQ9XCJhc3NldFJlbW92ZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9hc3NldC10aWxlPlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtdGFibGUtbGlzdGluZ1wiIHYtaWY9XCJkaXNwbGF5TW9kZSA9PT0gJ2xpc3QnXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IHYtZWw6YXNzZXRzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBpcz1cImFzc2V0Um93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9XCJhc3NldCBpbiBhc3NldHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YXNzZXQ9XCJhc3NldFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEByZW1vdmVkPVwiYXNzZXRSZW1vdmVkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LXNvbG8tY29udGFpbmVyXCIgdi1pZj1cImV4cGFuZGVkICYmIHNvbG9Bc3NldFwiIHYtZWw6YXNzZXRzPlxuICAgICAgICAgICAgICAgIDxhc3NldC10aWxlXG4gICAgICAgICAgICAgICAgICAgIHYtZm9yPVwiYXNzZXQgaW4gYXNzZXRzXCJcbiAgICAgICAgICAgICAgICAgICAgOmFzc2V0PVwiYXNzZXRcIlxuICAgICAgICAgICAgICAgICAgICBAcmVtb3ZlZD1cImFzc2V0UmVtb3ZlZFwiPlxuICAgICAgICAgICAgICAgIDwvYXNzZXQtdGlsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDxzZWxlY3RvclxuICAgICAgICAgICAgdi1pZj1cInNob3dTZWxlY3RvclwiXG4gICAgICAgICAgICA6Y29udGFpbmVyPVwiY29udGFpbmVyXCJcbiAgICAgICAgICAgIDpmb2xkZXI9XCJmb2xkZXJcIlxuICAgICAgICAgICAgOnJlc3RyaWN0LW5hdmlnYXRpb249XCJyZXN0cmljdE5hdmlnYXRpb25cIlxuICAgICAgICAgICAgOnNlbGVjdGVkPVwic2VsZWN0ZWRBc3NldHNcIlxuICAgICAgICAgICAgOnZpZXctbW9kZT1cInNlbGVjdG9yVmlld01vZGVcIlxuICAgICAgICAgICAgOm1heC1maWxlcz1cIm1heEZpbGVzXCJcbiAgICAgICAgICAgIEBzZWxlY3RlZD1cImFzc2V0c1NlbGVjdGVkXCJcbiAgICAgICAgICAgIEBjbG9zZWQ9XCJjbG9zZVNlbGVjdG9yXCI+XG4gICAgICAgIDwvc2VsZWN0b3I+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuXG4gICAgLmFzc2V0LWxpc3RpbmctdXBsb2FkcyB7XG4gICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCAjY2NjO1xuICAgICAgICBib3JkZXItdG9wOiAwO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcblxuICAgICAgICB0YWJsZSB7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGVhZCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdHI6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgYm9yZGVyLXRvcDogMDtcbiAgICAgICAgfVxuICAgIH1cblxuPC9zdHlsZT5cblxuXG48c2NyaXB0PlxuaW1wb3J0IERldGVjdHNGaWxlRHJhZ2dpbmcgZnJvbSAnLi4vLi4vRGV0ZWN0c0ZpbGVEcmFnZ2luZyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgYXNzZXRUaWxlOiByZXF1aXJlKCcuL0Fzc2V0VGlsZS52dWUnKSxcbiAgICAgICAgYXNzZXRSb3c6IHJlcXVpcmUoJy4vQXNzZXRSb3cudnVlJyksXG4gICAgICAgIHNlbGVjdG9yOiByZXF1aXJlKCcuLi8uLi9hc3NldHMvU2VsZWN0b3IudnVlJyksXG4gICAgICAgIHVwbG9hZGVyOiByZXF1aXJlKCcuLi8uLi9hc3NldHMvVXBsb2FkZXIudnVlJyksXG4gICAgICAgIHVwbG9hZHM6IHJlcXVpcmUoJy4uLy4uL2Fzc2V0cy9VcGxvYWRzLnZ1ZScpXG4gICAgfSxcblxuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlLCBEZXRlY3RzRmlsZURyYWdnaW5nXSxcblxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFzc2V0czogW10sXG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgc2hvd1NlbGVjdG9yOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdG9yVmlld01vZGU6IG51bGwsXG4gICAgICAgICAgICBkcmFnZ2luZ0ZpbGU6IGZhbHNlLFxuICAgICAgICAgICAgdXBsb2FkczogW10sXG4gICAgICAgICAgICBpbm5lckRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9CaW5kQ2hhbmdlV2F0Y2hlcjogZmFsc2UsXG4gICAgICAgICAgICBkaXNwbGF5TW9kZTogJ2dyaWQnXG4gICAgICAgIH07XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciBhbnkgYXNzZXRzIGhhdmUgYmVlbiBzZWxlY3RlZC5cbiAgICAgICAgICovXG4gICAgICAgIGhhc0Fzc2V0cygpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuYXNzZXRzLmxlbmd0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbml0aWFsIGNvbnRhaW5lciB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHNlbGVjdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgY29udGFpbmVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmNvbnRhaW5lcjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGluaXRpYWwgZm9sZGVyIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgc2VsZWN0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBmb2xkZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZm9sZGVyIHx8ICcvJztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYW4gYXNzZXQgY29udGFpbmVyIGhhcyBiZWVuIHNwZWNpZmllZCBpbiB0aGUgY29uZmlnLlxuICAgICAgICAgKi9cbiAgICAgICAgY29udGFpbmVyU3BlY2lmaWVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmNvbnRhaW5lciAhPSBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGFzc2V0cyBzaG91bGQgYmUgcmVzdHJpY3RlZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRhaW5lclxuICAgICAgICAgKiBhbmQgZm9sZGVyLiBUaGlzIHdpbGwgcHJldmVudCBuYXZpZ2F0aW9uIHRvIG90aGVyIHBsYWNlcy5cbiAgICAgICAgICovXG4gICAgICAgIHJlc3RyaWN0TmF2aWdhdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5yZXN0cmljdCB8fCBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGZpbGVzIGFsbG93ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBtYXhGaWxlcygpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuY29uZmlnLm1heF9maWxlcykgcmV0dXJuIDA7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmNvbmZpZy5tYXhfZmlsZXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmaWxlcyBoYXZlIGJlZW4gc2VsZWN0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBtYXhGaWxlc1JlYWNoZWQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXhGaWxlcyA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hc3NldHMubGVuZ3RoID49IHRoaXMubWF4RmlsZXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRydWUgaWYgYSBzaW5nbGUgYXNzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBzb2xvQXNzZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXhGaWxlcyA9PT0gMTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNlbGVjdGVkIGFzc2V0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIGFzc2V0IGJyb3dzZXIgZXhwZWN0cyBhbiBhcnJheSBvZiBhc3NldCBJRHMgdG8gYmUgcGFzc2VkIGluIGFzIGEgcHJvcC5cbiAgICAgICAgICovXG4gICAgICAgIHNlbGVjdGVkQXNzZXRzKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGhhcyBhbiA6OiBpdCdzIGFscmVhZHkgYW4gSUQgYW5kIHdlIGNhbiByZXR1cm4gYXMtaXMuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlIG5lZWQgdG8gZmluZCB0aGUgSUQgZnJvbSB0aGUgY29ycmVzcG9uZGluZyBhc3NldC5cbiAgICAgICAgICAgIHJldHVybiBfKHRoaXMuZGF0YSkubWFwKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUuaW5jbHVkZXMoJzo6JykpID8gdmFsdWUgOiBfKHRoaXMuYXNzZXRzKS5maW5kV2hlcmUoeyB1cmw6IHZhbHVlIH0pLmlkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIGZpZWxkdHlwZSBpcyBpbiB0aGUgZXhwYW5kZWQgVUkgc3RhdGUuXG4gICAgICAgICAqL1xuICAgICAgICBleHBhbmRlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzc2V0cy5sZW5ndGggPiAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgRE9NIGVsZW1lbnQgdGhlIHVwbG9hZGVyIGNvbXBvbmVudCB3aWxsIGJpbmQgdG8uXG4gICAgICAgICAqL1xuICAgICAgICB1cGxvYWRFbGVtZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzSW5CYXJkRmllbGQoKSB7XG4gICAgICAgICAgICBsZXQgdm0gPSB0aGlzO1xuXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSB2bS4kcGFyZW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKCEgcGFyZW50KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdCYXJkRmllbGR0eXBlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2bSA9IHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIGV2ZW50czoge1xuICAgICAgICAnY2xvc2Utc2VsZWN0b3InICgpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VTZWxlY3RvcigpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGFzc2V0IGRhdGEgZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAqXG4gICAgICAgICAqIEFjY2VwdHMgYW4gYXJyYXkgb2YgYXNzZXQgVVJMcyBhbmQvb3IgSURzLlxuICAgICAgICAgKi9cbiAgICAgICAgbG9hZEFzc2V0cyhkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAoISBkYXRhIHx8ICEgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnYXNzZXRzL2dldCcpLCB7IGFzc2V0czogZGF0YSB9LCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0cyA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBKdWdnbGUgdGhlIGRhdGEgdG8gbWFrZSBwYXJlbnQgY29tcG9uZW50cyBub3RpY2Ugc29tZXRoaW5nIGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgbmVzdGVkIHJlcGxpY2F0b3JzIGdlbmVyYXRlIG5ldyBwcmV2aWV3IHRleHQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydGFibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gYSB1c2VyIGhhcyBmaW5pc2hlZCBzZWxlY3RpbmcgaXRlbXMgaW4gdGhlIGJyb3dzZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIFdlIHNob3VsZCB1cGRhdGUgdGhlIGZpZWxkdHlwZSB3aXRoIGFueSBzZWxlY3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgYXNzZXRzU2VsZWN0ZWQoc2VsZWN0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5sb2FkQXNzZXRzKHNlbGVjdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcGVuIHRoZSBhc3NldCBzZWxlY3RvciBtb2RhbFxuICAgICAgICAgKi9cbiAgICAgICAgb3BlblNlbGVjdG9yKCkge1xuICAgICAgICAgICAgdGhpcy5zaG93U2VsZWN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy4kcm9vdC5oaWRlT3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbG9zZSB0aGUgYXNzZXQgc2VsZWN0b3IgbW9kYWxcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlU2VsZWN0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy4kcm9vdC5oaWRlT3ZlcmZsb3cgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBhbiBhc3NldCByZW1vdmUgYnV0dG9uIHdhcyBjbGlja2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgYXNzZXRSZW1vdmVkKGFzc2V0KSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IF8odGhpcy5hc3NldHMpLmZpbmRJbmRleCh7IGlkOiBhc3NldC5pZCB9KTtcbiAgICAgICAgICAgIHRoaXMuYXNzZXRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdGhlIHVwbG9hZGVyIGNvbXBvbmVudCBoYXMgZmluaXNoZWQgdXBsb2FkaW5nIGEgZmlsZS5cbiAgICAgICAgICovXG4gICAgICAgIHVwbG9hZENvbXBsZXRlKGFzc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmFzc2V0cy5wdXNoKGFzc2V0KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiB0aGUgdXBsb2FkZXIgY29tcG9uZW50IGhhcyBtb2RpZmllZCB0aGUgdXBsb2FkcyBhcnJheVxuICAgICAgICAgKi9cbiAgICAgICAgdXBsb2Fkc1VwZGF0ZWQodXBsb2Fkcykge1xuICAgICAgICAgICAgdGhpcy4kc2V0KCd1cGxvYWRzJywgdXBsb2Fkcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNob3cgdGhlIGZpbGUgdXBsb2FkIGZpbmRlciB3aW5kb3cuXG4gICAgICAgICAqL1xuICAgICAgICB1cGxvYWRGaWxlKCkge1xuICAgICAgICAgICAgdGhpcy4kcmVmcy51cGxvYWRlci5icm93c2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzb3J0YWJsZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heEZpbGVzID09PSAxKSByZXR1cm47XG5cbiAgICAgICAgICAgICQodGhpcy4kZWxzLmFzc2V0cykuc29ydGFibGUoe1xuICAgICAgICAgICAgICAgIGl0ZW1zOiAnPiA6bm90KC5naG9zdCknLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiAoZSwgdWkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdWkuaXRlbS5kYXRhKCdzdGFydCcsIHVpLml0ZW0uaW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IChlLCB1aSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IHVpLml0ZW0uZGF0YSgnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gdWkuaXRlbS5pbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzLnNwbGljZShlbmQsIDAsIHRoaXMuYXNzZXRzLnNwbGljZShzdGFydCwgMSlbMF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudChjdXJyZW50SXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoXCI8ZGl2IGNsYXNzPSd1aS1zb3J0YWJsZS1wbGFjZWhvbGRlciBhc3NldC10aWxlJz48ZGl2IGNsYXNzPSdmYXV4LXRodW1ibmFpbCc+PC9kaXY+PC9kaXY+XCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoY29udGFpbmVyLCBwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZXBsaWNhdG9yUHJldmlld1RleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAodGhpcy5hc3NldHMsIChhc3NldCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBhc3NldC5pc19pbWFnZSA/XG4gICAgICAgICAgICAgICAgICAgIGA8aW1nIHNyYz1cIiR7YXNzZXQudGh1bWJuYWlsfVwiIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIHRpdGxlPVwiJHthc3NldC5iYXNlbmFtZX1cIiAvPmBcbiAgICAgICAgICAgICAgICAgICAgOiBhc3NldC5iYXNlbmFtZTtcbiAgICAgICAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb21wb25lbnRzIGRlYWwgd2l0aCBwYXNzaW5nIGFyb3VuZCBhc3NldCBvYmplY3RzLCBob3dldmVyIG91ciBmaWVsZHR5cGUgaXNcbiAgICAgICAgICogb25seSBjb25jZXJuZWQgd2l0aCB0aGVpciByZXNwZWN0aXZlIFVSTHMuIE5vdGUgdGhhdCBpZiB0aGUgYXNzZXQgYmVsb25ncyB0b1xuICAgICAgICAgKiBhIG5vbi1wdWJsaWMgY29udGFpbmVyLCB0aGUgdXJsIHByb3BlcnR5IHdpbGwganVzdCBiZSB0aGUgSUQsIHNvIHdlJ3JlIG9rLlxuICAgICAgICAgKi9cbiAgICAgICAgYXNzZXRzKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gXy5wbHVjayh0aGlzLmFzc2V0cywgJ3VybCcpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5TW9kZSA9IHRoaXMuaXNJbnNpZGVHcmlkRmllbGRcbiAgICAgICAgICAgID8gJ2xpc3QnXG4gICAgICAgICAgICA6IHRoaXMuY29uZmlnLm1vZGUgfHwgJ2dyaWQnO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0b3JWaWV3TW9kZSA9IENvb2tpZXMuZ2V0KCdzdGF0YW1pYy5hc3NldHMubGlzdGluZ192aWV3X21vZGUnKSB8fCAnZ3JpZCc7XG5cbiAgICAgICAgLy8gV2Ugb25seSBoYXZlIFVSTHMgaW4gdGhlIGZpZWxkIGRhdGEsIHNvIHdlJ2xsIG5lZWQgdG8gcmVxdWVzdCB0aGUgYXNzZXQgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICAgIHRoaXMubG9hZEFzc2V0cyh0aGlzLmRhdGEpO1xuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQXNzZXRzRmllbGR0eXBlLnZ1ZT85NzhhNjVkZSIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Fzc2V0VGlsZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Fzc2V0VGlsZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYXNzZXRzL0Fzc2V0VGlsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDUzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtdGlsZVwiXG4gICAgICAgICA6Y2xhc3M9XCJ7ICdpcy1pbWFnZSc6IGlzSW1hZ2UgJiYgIWNhblNob3dTdmcsICdpcy1zdmcnOiBjYW5TaG93U3ZnLCAnaXMtZmlsZSc6ICFpc0ltYWdlICYmICFjYW5TaG93U3ZnIH1cIlxuICAgICAgICAgOnRpdGxlPVwiYXNzZXQuZmlsZW5hbWVcIlxuICAgID5cblxuICAgICAgICA8YXNzZXQtZWRpdG9yXG4gICAgICAgICAgICB2LWlmPVwiZWRpdGluZ1wiXG4gICAgICAgICAgICA6aWQ9XCJhc3NldC5pZFwiXG4gICAgICAgICAgICA6YWxsb3ctZGVsZXRpbmc9XCJmYWxzZVwiXG4gICAgICAgICAgICBAY2xvc2VkPVwiY2xvc2VFZGl0b3JcIlxuICAgICAgICAgICAgQHNhdmVkPVwiYXNzZXRTYXZlZFwiPlxuICAgICAgICA8L2Fzc2V0LWVkaXRvcj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYXNzZXQtdGh1bWItY29udGFpbmVyXCI+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC10aHVtYlwiPlxuXG4gICAgICAgICAgICAgICAgPCEtLSBTb2xvIEJhcmQgLS0+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc0ltYWdlICYmIGlzSW5CYXJkRmllbGQgJiYgIWlzSW5Bc3NldEJyb3dzZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPVwiYXNzZXQudXJsXCIgPlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICAgICAgICA8YSA6aHJlZj1cInRvZW5haWxcIiBjbGFzcz1cInpvb21cIiB2LWlmPVwiaXNJbWFnZVwiIDp0aXRsZT1cImxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9XCJ0aHVtYm5haWxcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L2E+XG5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImNhblNob3dTdmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInN2Zy1pbWdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCInYmFja2dyb3VuZC1pbWFnZTp1cmwoJythc3NldC51cmwrJyknXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxmaWxlLWljb24gdi1lbHNlIHR5cGU9XCJkaXZcIiA6ZXh0ZW5zaW9uPVwiYXNzZXQuZXh0ZW5zaW9uXCI+PC9maWxlLWljb24+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImVkaXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWljb24gaWNvbiBpY29uLXBlbmNpbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6YWx0PVwidHJhbnNsYXRlKCdjcC5lZGl0JylcIj48L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJyZW1vdmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWljb24gaWNvbiBpY29uLXRyYXNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDphbHQ9XCJ0cmFuc2xhdGUoJ2NwLnJlbW92ZScpXCI+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFzc2V0LW1ldGFcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1maWxlbmFtZVwiIDp0aXRsZT1cImxhYmVsXCI+e3sgbGFiZWwgfX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1maWxlc2l6ZVwiIHYtaWY9XCIhIGlzSW5CYXJkRmllbGRcIj57eyBhc3NldC5zaXplIH19PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG5cbjxzY3JpcHQ+XG5pbXBvcnQgQXNzZXQgZnJvbSAnLi9Bc3NldCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0Fzc2V0XSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaXNJbkFzc2V0QnJvd3NlcigpIHtcbiAgICAgICAgICAgIGxldCB2bSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudCA9IHZtLiRwYXJlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoISBwYXJlbnQpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuY29uc3RydWN0b3IubmFtZSA9PT0gJ0Fzc2V0QnJvd3NlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdm0gPSBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNJbkJhcmRGaWVsZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQuaXNJbkJhcmRGaWVsZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEFzc2V0VGlsZS52dWU/YTU2NWIzZTYiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9YXNzZXQtdGlsZSA6Y2xhc3M9XFxcInsgJ2lzLWltYWdlJzogaXNJbWFnZSAmJiAhY2FuU2hvd1N2ZywgJ2lzLXN2Zyc6IGNhblNob3dTdmcsICdpcy1maWxlJzogIWlzSW1hZ2UgJiYgIWNhblNob3dTdmcgfVxcXCIgOnRpdGxlPWFzc2V0LmZpbGVuYW1lPiA8YXNzZXQtZWRpdG9yIHYtaWY9ZWRpdGluZyA6aWQ9YXNzZXQuaWQgOmFsbG93LWRlbGV0aW5nPWZhbHNlIEBjbG9zZWQ9Y2xvc2VFZGl0b3IgQHNhdmVkPWFzc2V0U2F2ZWQ+IDwvYXNzZXQtZWRpdG9yPiA8ZGl2IGNsYXNzPWFzc2V0LXRodW1iLWNvbnRhaW5lcj4gPGRpdiBjbGFzcz1hc3NldC10aHVtYj4gPHRlbXBsYXRlIHYtaWY9XFxcImlzSW1hZ2UgJiYgaXNJbkJhcmRGaWVsZCAmJiAhaXNJbkFzc2V0QnJvd3NlclxcXCI+IDxpbWcgOnNyYz1hc3NldC51cmw+IDwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWVsc2U+IDxhIDpocmVmPXRvZW5haWwgY2xhc3M9em9vbSB2LWlmPWlzSW1hZ2UgOnRpdGxlPWxhYmVsPiA8aW1nIDpzcmM9dGh1bWJuYWlsIC8+IDwvYT4gPHRlbXBsYXRlIHYtZWxzZT4gPGRpdiB2LWlmPWNhblNob3dTdmcgY2xhc3M9c3ZnLWltZyA6c3R5bGU9XFxcIidiYWNrZ3JvdW5kLWltYWdlOnVybCgnK2Fzc2V0LnVybCsnKSdcXFwiPiA8L2Rpdj4gPGZpbGUtaWNvbiB2LWVsc2UgdHlwZT1kaXYgOmV4dGVuc2lvbj1hc3NldC5leHRlbnNpb24+PC9maWxlLWljb24+IDwvdGVtcGxhdGU+IDwvdGVtcGxhdGU+IDxkaXYgY2xhc3M9YXNzZXQtY29udHJvbHM+IDxidXR0b24gQGNsaWNrPWVkaXQgY2xhc3M9XFxcImJ0biBidG4taWNvbiBpY29uIGljb24tcGVuY2lsXFxcIiA6YWx0PVxcXCJ0cmFuc2xhdGUoJ2NwLmVkaXQnKVxcXCI+PC9idXR0b24+IDxidXR0b24gQGNsaWNrPXJlbW92ZSBjbGFzcz1cXFwiYnRuIGJ0bi1pY29uIGljb24gaWNvbi10cmFzaFxcXCIgOmFsdD1cXFwidHJhbnNsYXRlKCdjcC5yZW1vdmUnKVxcXCI+PC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9YXNzZXQtbWV0YT4gPGRpdiBjbGFzcz1hc3NldC1maWxlbmFtZSA6dGl0bGU9bGFiZWw+e3sgbGFiZWwgfX08L2Rpdj4gPGRpdiBjbGFzcz1hc3NldC1maWxlc2l6ZSB2LWlmPVxcXCIhIGlzSW5CYXJkRmllbGRcXFwiPnt7IGFzc2V0LnNpemUgfX08L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYXNzZXRzL0Fzc2V0VGlsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Bc3NldFJvdy52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Fzc2V0Um93LnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9hc3NldHMvQXNzZXRSb3cudnVlXG4vLyBtb2R1bGUgaWQgPSA1NDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8ZGl2IHYtaWY9XCJjYW5TaG93U3ZnXCJcbiAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbWcgc3ZnLWltZ1wiXG4gICAgICAgICAgICAgICAgIDpzdHlsZT1cIidiYWNrZ3JvdW5kLWltYWdlOnVybCgnK2Fzc2V0LnVybCsnKSdcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICAgICAgICA8YSA6aHJlZj1cInRvZW5haWxcIiBjbGFzcz1cInpvb21cIiB2LWlmPVwiaXNJbWFnZVwiIDp0aXRsZT1cImxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz1cInRodW1ibmFpbFwiIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbWdcIiB2LWVsc2U+PGZpbGUtaWNvbiB0eXBlPVwiZGl2XCIgOmV4dGVuc2lvbj1cImFzc2V0LmV4dGVuc2lvblwiPjwvZmlsZS1pY29uPjwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgICAgPHNwYW4gQGRibGNsaWNrPVwiZWRpdFwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJhc3NldC50aXRsZSAhPT0gYXNzZXQuZmlsZW5hbWVcIiA6dGl0bGU9XCJhc3NldC5iYXNlbmFtZVwiPnt7IGFzc2V0LnRpdGxlIHx8IGFzc2V0LmZpbGVuYW1lIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT57eyBhc3NldC5iYXNlbmFtZSB9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzPVwicHItOFwiIHN0eWxlPVwid2lkdGg6IDMycHg7XCI+XG5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVtb3ZlLWFzc2V0IHRleHQtcmlnaHRcIiBAY2xpY2s9XCJyZW1vdmVcIj48L3NwYW4+XG5cbiAgICAgICAgICAgIDxhc3NldC1lZGl0b3JcbiAgICAgICAgICAgICAgICB2LWlmPVwiZWRpdGluZ1wiXG4gICAgICAgICAgICAgICAgOmlkPVwiYXNzZXQuaWRcIlxuICAgICAgICAgICAgICAgIDphbGxvdy1kZWxldGluZz1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICBAY2xvc2VkPVwiY2xvc2VFZGl0b3JcIlxuICAgICAgICAgICAgICAgIEBzYXZlZD1cImFzc2V0U2F2ZWRcIj5cbiAgICAgICAgICAgIDwvYXNzZXQtZWRpdG9yPlxuICAgICAgICA8L3RkPlxuICAgIDwvdHI+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQXNzZXQgZnJvbSAnLi9Bc3NldCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0Fzc2V0XVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBc3NldFJvdy52dWU/NGZlZTU4NzgiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDx0cj4gPHRkPiA8ZGl2IHYtaWY9Y2FuU2hvd1N2ZyBjbGFzcz1cXFwiaW1nIHN2Zy1pbWdcXFwiIDpzdHlsZT1cXFwiJ2JhY2tncm91bmQtaW1hZ2U6dXJsKCcrYXNzZXQudXJsKycpJ1xcXCI+IDwvZGl2PiA8dGVtcGxhdGUgdi1lbHNlPiA8YSA6aHJlZj10b2VuYWlsIGNsYXNzPXpvb20gdi1pZj1pc0ltYWdlIDp0aXRsZT1sYWJlbD4gPGltZyA6c3JjPXRodW1ibmFpbCAvPiA8L2E+IDxkaXYgY2xhc3M9aW1nIHYtZWxzZT48ZmlsZS1pY29uIHR5cGU9ZGl2IDpleHRlbnNpb249YXNzZXQuZXh0ZW5zaW9uPjwvZmlsZS1pY29uPjwvZGl2PiA8L3RlbXBsYXRlPiA8L3RkPiA8dGQ+IDxzcGFuIEBkYmxjbGljaz1lZGl0PiA8c3BhbiB2LWlmPVxcXCJhc3NldC50aXRsZSAhPT0gYXNzZXQuZmlsZW5hbWVcXFwiIDp0aXRsZT1hc3NldC5iYXNlbmFtZT57eyBhc3NldC50aXRsZSB8fCBhc3NldC5maWxlbmFtZSB9fTwvc3Bhbj4gPHNwYW4gdi1lbHNlPnt7IGFzc2V0LmJhc2VuYW1lIH19PC9zcGFuPiA8L3NwYW4+IDwvdGQ+IDx0ZCBjbGFzcz1wci04IHN0eWxlPVxcXCJ3aWR0aDogMzJweFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJyZW1vdmUtYXNzZXQgdGV4dC1yaWdodFxcXCIgQGNsaWNrPXJlbW92ZT48L3NwYW4+IDxhc3NldC1lZGl0b3Igdi1pZj1lZGl0aW5nIDppZD1hc3NldC5pZCA6YWxsb3ctZGVsZXRpbmc9ZmFsc2UgQGNsb3NlZD1jbG9zZUVkaXRvciBAc2F2ZWQ9YXNzZXRTYXZlZD4gPC9hc3NldC1lZGl0b3I+IDwvdGQ+IDwvdHI+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9hc3NldHMvQXNzZXRSb3cudnVlXG4vLyBtb2R1bGUgaWQgPSA1NDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC1zZWxlY3Rvci1tb2RhbFwiPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhc3NldC1zZWxlY3RvclwiPlxuXG4gICAgICAgICAgICA8YXNzZXQtYnJvd3NlclxuICAgICAgICAgICAgICAgIDpzZWxlY3RlZC1jb250YWluZXI9XCJjb250YWluZXJcIlxuICAgICAgICAgICAgICAgIDpzZWxlY3RlZC1wYXRoPVwiZm9sZGVyXCJcbiAgICAgICAgICAgICAgICA6c2VsZWN0ZWQtYXNzZXRzPVwiYnJvd3NlclNlbGVjdGlvbnNcIlxuICAgICAgICAgICAgICAgIDpyZXN0cmljdC1uYXZpZ2F0aW9uPVwicmVzdHJpY3ROYXZpZ2F0aW9uXCJcbiAgICAgICAgICAgICAgICA6bWF4LWZpbGVzPVwibWF4RmlsZXNcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rpb25zLXVwZGF0ZWQ9XCJzZWxlY3Rpb25zVXBkYXRlZFwiXG4gICAgICAgICAgICAgICAgQGFzc2V0LWRvdWJsZWNsaWNrZWQ9XCJzZWxlY3RcIj5cblxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiY29udGV4dHVhbC1hY3Rpb25zXCIgdi1pZj1cImJyb3dzZXJTZWxlY3Rpb25zLmxlbmd0aFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGFjdGlvbiBtYi0zXCIgQGNsaWNrPVwiYnJvd3NlclNlbGVjdGlvbnMgPSBbXVwiPnt7IHRyYW5zbGF0ZSgnY3AudW5jaGVja19hbGwnKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICAgIDwvYXNzZXQtYnJvd3Nlcj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0XCIgdi1pZj1cImJyb3dzZXJTZWxlY3Rpb25zLmxlbmd0aFwiPlxuICAgICAgICAgICAgICAgICAgICB7eyBicm93c2VyU2VsZWN0aW9ucy5sZW5ndGggfX08c3BhbiB2LWlmPVwibWF4RmlsZXNcIj4ve3sgbWF4RmlsZXMgfX08L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3Auc2VsZWN0ZWQnKSB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuXCJcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiY2xvc2VcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzZWxlY3RcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgdHJhbnNsYXRlKCdjcC5zZWxlY3QnKSB9fVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgY29udGFpbmVyOiBTdHJpbmcsXG4gICAgICAgIGZvbGRlcjogU3RyaW5nLFxuICAgICAgICBzZWxlY3RlZDogQXJyYXksXG4gICAgICAgIG1heEZpbGVzOiBOdW1iZXIsXG4gICAgICAgIHJlc3RyaWN0TmF2aWdhdGlvbjoge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIFdlIHdpbGwgaW5pdGlhbGl6ZSB0aGUgYnJvd3NlciBjb21wb25lbnQgd2l0aCB0aGUgc2VsZWN0aW9ucywgYnV0IG5vdCBwYXNzIGluIHRoZSBzZWxlY3Rpb25zIGRpcmVjdGx5LlxuICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHNlbGVjdGlvbiBjaGFuZ2VzIHRvIGJlIHJlZmxlY3RlZCBpbiB0aGUgZmllbGR0eXBlIG9uY2UgdGhlIHVzZXIgaXMgcmVhZHkgdG8gY29tbWl0XG4gICAgICAgICAgICAvLyB0aGVtLiBUaGV5IHNob3VsZCBiZSBhYmxlIHRvIGNhbmNlbCBhdCBhbnkgdGltZSBhbmQgaGF2ZSB0aGVpciB1cGRhdGVkIHNlbGVjdGlvbnMgZGlzY2FyZGVkLlxuICAgICAgICAgICAgYnJvd3NlclNlbGVjdGlvbnM6IHRoaXMuc2VsZWN0ZWRcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uZmlybSB0aGUgdXBkYXRlZCBzZWxlY3Rpb25zXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0ZWQnLCB0aGlzLmJyb3dzZXJTZWxlY3Rpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xvc2UgdGhpcyBzZWxlY3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY2xvc2UoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdtb2RhbC5jbG9zZScpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWxlY3Rpb25zIGhhdmUgYmVlbiB1cGRhdGVkIHdpdGhpbiB0aGUgYnJvd3NlciBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3Rpb25zVXBkYXRlZChzZWxlY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmJyb3dzZXJTZWxlY3Rpb25zID0gc2VsZWN0aW9ucztcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5KCkge1xuICAgICAgICB0aGlzLiRkaXNwYXRjaCgnbW9kYWwub3BlbicpO1xuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFNlbGVjdG9yLnZ1ZT8zZWEwZjM3ZiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC1zZWxlY3Rvci1tb2RhbD4gPGRpdiBjbGFzcz1hc3NldC1zZWxlY3Rvcj4gPGFzc2V0LWJyb3dzZXIgOnNlbGVjdGVkLWNvbnRhaW5lcj1jb250YWluZXIgOnNlbGVjdGVkLXBhdGg9Zm9sZGVyIDpzZWxlY3RlZC1hc3NldHM9YnJvd3NlclNlbGVjdGlvbnMgOnJlc3RyaWN0LW5hdmlnYXRpb249cmVzdHJpY3ROYXZpZ2F0aW9uIDptYXgtZmlsZXM9bWF4RmlsZXMgQHNlbGVjdGlvbnMtdXBkYXRlZD1zZWxlY3Rpb25zVXBkYXRlZCBAYXNzZXQtZG91YmxlY2xpY2tlZD1zZWxlY3Q+IDx0ZW1wbGF0ZSBzbG90PWNvbnRleHR1YWwtYWN0aW9ucyB2LWlmPWJyb3dzZXJTZWxlY3Rpb25zLmxlbmd0aD4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGFjdGlvbiBtYi0zXFxcIiBAY2xpY2s9XFxcImJyb3dzZXJTZWxlY3Rpb25zID0gW11cXFwiPnt7IHRyYW5zbGF0ZSgnY3AudW5jaGVja19hbGwnKSB9fTwvYnV0dG9uPiA8L3RlbXBsYXRlPiA8L2Fzc2V0LWJyb3dzZXI+IDxkaXYgY2xhc3M9bW9kYWwtZm9vdGVyPiA8ZGl2IGNsYXNzPWxlZnQgdi1pZj1icm93c2VyU2VsZWN0aW9ucy5sZW5ndGg+IHt7IGJyb3dzZXJTZWxlY3Rpb25zLmxlbmd0aCB9fTxzcGFuIHYtaWY9bWF4RmlsZXM+L3t7IG1heEZpbGVzIH19PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLnNlbGVjdGVkJykgfX0gPC9kaXY+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9YnRuIEBjbGljaz1jbG9zZT4ge3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fSA8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBAY2xpY2s9c2VsZWN0PiB7eyB0cmFuc2xhdGUoJ2NwLnNlbGVjdCcpIH19IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2Fzc2V0cy9TZWxlY3Rvci52dWVcbi8vIG1vZHVsZSBpZCA9IDU0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9YXNzZXRzLWZpZWxkdHlwZSA6Y2xhc3M9XFxcIntcXG4gICAgICAgICdtYXgtZmlsZXMtcmVhY2hlZCc6IG1heEZpbGVzUmVhY2hlZCxcXG4gICAgICAgICdlbXB0eSc6ICEgYXNzZXRzLmxlbmd0aCxcXG4gICAgICAgICdzb2xvJzogc29sb0Fzc2V0LFxcbiAgICB9XFxcIiBAZHJhZ292ZXI9ZHJhZ092ZXIgQGRyYWdsZWF2ZT1kcmFnU3RvcCBAZHJvcD1kcmFnU3RvcD4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9XFxcImxvYWRpbmcgbG9hZGluZy1iYXNpY1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cXFwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5sb2FkaW5nJykgfX0gPC9kaXY+IDxkaXYgY2xhc3M9ZHJhZy1ub3RpZmljYXRpb24gdi1pZj1cXFwiY29udGFpbmVyU3BlY2lmaWVkICYmIGRyYWdnaW5nRmlsZSAmJiAhc2hvd1NlbGVjdG9yXFxcIj4gPGkgY2xhc3M9XFxcImljb24gaWNvbi1kb3dubG9hZFxcXCI+PC9pPiA8aDM+e3sgdHJhbnNsYXRlKCdjcC5kcm9wX3RvX3VwbG9hZCcpIH19PC9oMz4gPC9kaXY+IDx0ZW1wbGF0ZSB2LWlmPSFsb2FkaW5nPiA8ZGl2IGNsYXNzPW1hbmFnZS1hc3NldHMgdi1pZj0hbWF4RmlsZXNSZWFjaGVkIDpjbGFzcz1cXFwieydiYXJkLWRyYWctaGFuZGxlJzogaXNJbkJhcmRGaWVsZH1cXFwiPiA8ZGl2IHYtaWY9IWNvbnRhaW5lclNwZWNpZmllZD4gPGkgY2xhc3M9XFxcImljb24gaWNvbi13YXJuaW5nXFxcIj48L2k+IHt7IHRyYW5zbGF0ZSgnY3Aubm9fYXNzZXRfY29udGFpbmVyX3NwZWNpZmllZCcpIH19IDwvZGl2PiA8dGVtcGxhdGUgdi1lbHNlPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXdpdGgtaWNvbiBtci04XFxcIiBAY2xpY2s9b3BlblNlbGVjdG9yIEBrZXl1cC5zcGFjZS5lbnRlcj1vcGVuU2VsZWN0b3IgdGFiaW5kZXg9MD4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1mb2xkZXItaW1hZ2VzXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AuYnJvd3NlX2Fzc2V0cycpIH19IDwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXdpdGgtaWNvblxcXCIgQGNsaWNrLnByZXZlbnQ9dXBsb2FkRmlsZT4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi11cGxvYWQtdG8tY2xvdWRcXFwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC51cGxvYWQnKSB9fSA8L2J1dHRvbj4gPHA+e3sgdHJhbnNsYXRlKCdjcC5vcl9kcmFnX2FuZF9kcm9wX2ZpbGVzJykgfX08L3A+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImRlbGV0ZS1iYXJkLXNldCBidG4gYnRuLWljb24gcHVsbC1yaWdodFxcXCIgdi1pZj1pc0luQmFyZEZpZWxkIEBjbGljay5wcmV2ZW50PVxcXCIkZGlzcGF0Y2goJ2Fzc2V0LWZpZWxkLmRlbGV0ZS1iYXJkLXNldCcpXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi10cmFzaFxcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPC90ZW1wbGF0ZT4gPC9kaXY+IDx1cGxvYWRlciB2LXJlZjp1cGxvYWRlciB2LWlmPVxcXCJjb250YWluZXJTcGVjaWZpZWQgJiYgIXNob3dTZWxlY3RvclxcXCIgOmRvbS1lbGVtZW50PXVwbG9hZEVsZW1lbnQgOmNvbnRhaW5lcj1jb250YWluZXIgOnBhdGg9Zm9sZGVyIEB1cGRhdGVkPXVwbG9hZHNVcGRhdGVkIEB1cGxvYWQtY29tcGxldGU9dXBsb2FkQ29tcGxldGU+IDwvdXBsb2FkZXI+IDx1cGxvYWRzIHYtaWY9dXBsb2Fkcy5sZW5ndGggOnVwbG9hZHM9dXBsb2Fkcz4gPC91cGxvYWRzPiA8dGVtcGxhdGUgdi1pZj1cXFwiZXhwYW5kZWQgJiYgISBzb2xvQXNzZXRcXFwiPiA8ZGl2IGNsYXNzPWFzc2V0LWdyaWQtbGlzdGluZyB2LWlmPVxcXCJkaXNwbGF5TW9kZSA9PT0gJ2dyaWQnXFxcIiB2LWVsOmFzc2V0cz4gPGFzc2V0LXRpbGUgdi1mb3I9XFxcImFzc2V0IGluIGFzc2V0c1xcXCIgOmFzc2V0PWFzc2V0IEByZW1vdmVkPWFzc2V0UmVtb3ZlZD4gPC9hc3NldC10aWxlPiA8L2Rpdj4gPGRpdiBjbGFzcz1hc3NldC10YWJsZS1saXN0aW5nIHYtaWY9XFxcImRpc3BsYXlNb2RlID09PSAnbGlzdCdcXFwiPiA8dGFibGU+IDx0Ym9keSB2LWVsOmFzc2V0cz4gPHRyIGlzPWFzc2V0Um93IHYtZm9yPVxcXCJhc3NldCBpbiBhc3NldHNcXFwiIDphc3NldD1hc3NldCBAcmVtb3ZlZD1hc3NldFJlbW92ZWQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDwvZGl2PiA8L3RlbXBsYXRlPiA8ZGl2IGNsYXNzPWFzc2V0LXNvbG8tY29udGFpbmVyIHYtaWY9XFxcImV4cGFuZGVkICYmIHNvbG9Bc3NldFxcXCIgdi1lbDphc3NldHM+IDxhc3NldC10aWxlIHYtZm9yPVxcXCJhc3NldCBpbiBhc3NldHNcXFwiIDphc3NldD1hc3NldCBAcmVtb3ZlZD1hc3NldFJlbW92ZWQ+IDwvYXNzZXQtdGlsZT4gPC9kaXY+IDwvdGVtcGxhdGU+IDxzZWxlY3RvciB2LWlmPXNob3dTZWxlY3RvciA6Y29udGFpbmVyPWNvbnRhaW5lciA6Zm9sZGVyPWZvbGRlciA6cmVzdHJpY3QtbmF2aWdhdGlvbj1yZXN0cmljdE5hdmlnYXRpb24gOnNlbGVjdGVkPXNlbGVjdGVkQXNzZXRzIDp2aWV3LW1vZGU9c2VsZWN0b3JWaWV3TW9kZSA6bWF4LWZpbGVzPW1heEZpbGVzIEBzZWxlY3RlZD1hc3NldHNTZWxlY3RlZCBAY2xvc2VkPWNsb3NlU2VsZWN0b3I+IDwvc2VsZWN0b3I+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYXNzZXRzL0Fzc2V0c0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Bc3NldHNGb2xkZXJGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Bc3NldHNGb2xkZXJGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0Fzc2V0c0ZvbGRlckZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImFzc2V0LWZvbGRlci1maWVsZHR5cGUtd3JhcHBlclwiPlxuICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCIgdi1pZj1cIiFjb250YWluZXJcIj57eyB0cmFuc2xhdGUoJ2NwLnNlbGVjdF9hc3NldF9jb250YWluZXInKSB9fTwvc21hbGw+XG4gICAgICAgIDxkaXYgdi1pZj1cImNvbnRhaW5lciAmJiBsb2FkaW5nXCIgY2xhc3M9XCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNlbGVjdC1maWVsZHR5cGUgdi1pZj1cImNvbnRhaW5lciAmJiAhbG9hZGluZ1wiIDpuYW1lPVwibmFtZVwiIDpkYXRhLnN5bmM9XCJkYXRhXCIgOmNvbmZpZz1cInNlbGVjdENvbmZpZ1wiPjwvc2VsZWN0LWZpZWxkdHlwZT5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtGaWVsZHR5cGVdLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICAgICAgICBhdXRvQmluZENoYW5nZVdhdGNoZXI6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgc2VsZWN0Q29uZmlnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGFsbG93Qmxhbms6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmaWVsZHR5cGUgY2FuIGJlIHVzZWQgYXMgYSBzaWJsaW5nIHRvIGEgY29udGFpbmVyIGZpZWxkLlxuICAgICAgICAgKiBJdCB3aWxsIHJlZnJlc2ggaXRzZWxmIHdoZW4gdGhlIGNvbnRhaW5lciBmaWVsZCB2YWx1ZSBjaGFuZ2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgYm9vdHN0cmFwRm9yQ29udGFpbmVyRmllbGQoKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIGFzc2V0IGNvbnRhaW5lciBpcyBtb2RpZmllZCwgd2Ugd2FudCB0byBlaXRoZXIgZ2V0IHRoZSBhcHByb3ByaWF0ZSBmb2xkZXJzIG9yIHJlc2V0IHRoZSBmb2xkZXJzLlxuICAgICAgICAgICAgdGhpcy4kcGFyZW50LiR3YXRjaCgnZmllbGQnLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICAvLyBPdGhlciBjaGFuZ2VzIGluIHRoZSBmaWVsZCB3aWxsIHRyaWdnZXIgdGhpcy4gV2Ugd2FudCB0b1xuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBldmVyeXRoaW5nIGV4Y2VwdCBhIG1vZGlmaWVyIGFzc2V0IGNvbnRhaW5lciB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5jb250YWluZXIgPT09IHNlbGYuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZmllbGQuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29udGFpbmVyID0gZmllbGQuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmdldEZvbGRlcnMoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgeyBkZWVwOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy4kcGFyZW50LmZpZWxkLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy4kcGFyZW50LmZpZWxkLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICB0aGlzLmdldEZvbGRlcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRGb2xkZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGh0dHAuZ2V0KGNwX3VybCgnYXNzZXRzL2NvbnRhaW5lcnMvJyArIHRoaXMuY29udGFpbmVyICsgJy9mb2xkZXJzJyksIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9ICh0aGlzLmFsbG93QmxhbmspID8gW3sgdmFsdWU6IG51bGwsIHRleHQ6ICcnLCB9XSA6IFtdO1xuXG4gICAgICAgICAgICAgICAgXy5lYWNoKGRhdGEsIGZ1bmN0aW9uIChmb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IChmb2xkZXIucGF0aCA9PT0gZm9sZGVyLnRpdGxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBmb2xkZXIucGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBmb2xkZXIucGF0aCArICcgKCcgKyBmb2xkZXIudGl0bGUgKyAnKSc7XG5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmb2xkZXIucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gb3B0aW9uc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRDaGFuZ2VXYXRjaGVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIElmIGEgY29udGFpbmVyIHByb3AgaGFzIGJlZW4gcHJvdmlkZWQsIHdlIHNpbXBseSBuZWVkIHRvIGdldCB0aGUgZm9sZGVycy5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBib290c3RyYXAgdGhpcyBmaWVsZCBzbyBpdCB3aWxsIHdvcmsgd2l0aCBhIHNpYmxpbmcgY29udGFpbmVyIGZpZWxkLlxuICAgICAgICBpZiAodGhpcy5jb25maWcuY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuY29uZmlnLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIHRoaXMuZ2V0Rm9sZGVycygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ib290c3RyYXBGb3JDb250YWluZXJGaWVsZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQXNzZXRzRm9sZGVyRmllbGR0eXBlLnZ1ZT81N2E3MDJhYyIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1hc3NldC1mb2xkZXItZmllbGR0eXBlLXdyYXBwZXI+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrIHYtaWY9IWNvbnRhaW5lcj57eyB0cmFuc2xhdGUoJ2NwLnNlbGVjdF9hc3NldF9jb250YWluZXInKSB9fTwvc21hbGw+IDxkaXYgdi1pZj1cXFwiY29udGFpbmVyICYmIGxvYWRpbmdcXFwiIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19IDwvZGl2PiA8c2VsZWN0LWZpZWxkdHlwZSB2LWlmPVxcXCJjb250YWluZXIgJiYgIWxvYWRpbmdcXFwiIDpuYW1lPW5hbWUgOmRhdGEuc3luYz1kYXRhIDpjb25maWc9c2VsZWN0Q29uZmlnPjwvc2VsZWN0LWZpZWxkdHlwZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Bc3NldHNGb2xkZXJGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1NTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXNzZXRDb250YWluZXJGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Bc3NldENvbnRhaW5lckZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvQXNzZXRDb250YWluZXJGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1NTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJhc3NldC1jb250YWluZXItZmllbGR0eXBlLXdyYXBwZXJcIj5cbiAgICAgICAgPGRpdiB2LWlmPVwibG9hZGluZ1wiIGNsYXNzPVwibG9hZGluZyBsb2FkaW5nLWJhc2ljXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5sb2FkaW5nJykgfX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHNlbGVjdC1maWVsZHR5cGUgdi1pZj1cIiFsb2FkaW5nXCIgOm5hbWU9XCJuYW1lXCIgOmRhdGEuc3luYz1cImRhdGFcIiA6Y29uZmlnPVwic2VsZWN0Q29uZmlnXCI+PC9zZWxlY3QtZmllbGR0eXBlPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBvcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGF1dG9CaW5kQ2hhbmdlV2F0Y2hlcjogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBzZWxlY3RDb25maWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWxsb3dCbGFuazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcgJiYgdGhpcy5jb25maWcuYWxsb3dfYmxhbms7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLiRodHRwLmdldChjcF91cmwoJ2Fzc2V0cy9jb250YWluZXJzL2dldCcpLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9ICh0aGlzLmFsbG93QmxhbmspID8gW3sgdmFsdWU6IG51bGwsIHRleHQ6ICcnLCB9XSA6IFtdO1xuXG4gICAgICAgICAgICBfLmVhY2goZGF0YS5pdGVtcywgZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNvbnRhaW5lci5pZCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogY29udGFpbmVyLnRpdGxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBvcHRpb25zWzBdLnZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmJpbmRDaGFuZ2VXYXRjaGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufTtcblxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQXNzZXRDb250YWluZXJGaWVsZHR5cGUudnVlPzY3ODllNDVkIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPWFzc2V0LWNvbnRhaW5lci1maWVsZHR5cGUtd3JhcHBlcj4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9XFxcImxvYWRpbmcgbG9hZGluZy1iYXNpY1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cXFwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5sb2FkaW5nJykgfX0gPC9kaXY+IDxzZWxlY3QtZmllbGR0eXBlIHYtaWY9IWxvYWRpbmcgOm5hbWU9bmFtZSA6ZGF0YS5zeW5jPWRhdGEgOmNvbmZpZz1zZWxlY3RDb25maWc+PC9zZWxlY3QtZmllbGR0eXBlPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0Fzc2V0Q29udGFpbmVyRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0JhcmRGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9CYXJkRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1NTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJiYXJkLWZpZWxkdHlwZS13cmFwcGVyIHJlcGxpY2F0b3JcIiA6Y2xhc3M9XCJ7J2JhcmQtZnVsbHNjcmVlbic6IGZ1bGxTY3JlZW5Nb2RlLCAnbm8tc2V0cyc6ICFoYXNTZXRzIH1cIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmFyZC1ibG9ja3NcIiB2LWlmPVwiaXNSZWFkeVwiIHYtZWw6YmxvY2tzPlxuICAgICAgICAgICAgPGNvbXBvbmVudFxuICAgICAgICAgICAgICAgIDppcz1cImJsb2NrLnR5cGUgPT09ICd0ZXh0JyA/ICdCYXJkVGV4dCcgOiAnQmFyZFNldCdcIlxuICAgICAgICAgICAgICAgIHYtZm9yPVwiKGluZGV4LCBibG9jaykgaW4gZGF0YVwiXG4gICAgICAgICAgICAgICAgdi1yZWY6c2V0XG4gICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnZGl2aWRlci1hdC1zdGFydCc6IGNhblNob3dEaXZpZGVyQXRTdGFydChpbmRleCksICdkaXZpZGVyLWF0LWVuZCc6IGNhblNob3dEaXZpZGVyQXRFbmQoaW5kZXgpIH1cIlxuICAgICAgICAgICAgICAgIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgICAgICAgOmRhdGE9XCJibG9ja1wiXG4gICAgICAgICAgICAgICAgOmluZGV4PVwiaW5kZXhcIlxuICAgICAgICAgICAgICAgIDpwYXJlbnQtbmFtZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgIDpjb25maWc9XCJzZXRDb25maWcoYmxvY2sudHlwZSlcIlxuICAgICAgICAgICAgICAgIDpzaG93LXNvdXJjZT1cInNob3dTb3VyY2VcIlxuICAgICAgICAgICAgICAgIEBzZXQtaW5zZXJ0ZWQ9XCJzZXRJbnNlcnRlZFwiXG4gICAgICAgICAgICAgICAgQGRlbGV0ZWQ9XCJkZWxldGVTZXRcIlxuICAgICAgICAgICAgICAgIEBzb3VyY2UtdG9nZ2xlZD1cInRvZ2dsZVNvdXJjZVwiXG4gICAgICAgICAgICAgICAgQGFycm93LXVwLWF0LXN0YXJ0PVwiZ29Ub1ByZXZpb3VzVGV4dEZpZWxkXCJcbiAgICAgICAgICAgICAgICBAYXJyb3ctZG93bi1hdC1lbmQ9XCJnb1RvTmV4dFRleHRGaWVsZFwiXG4gICAgICAgICAgICAgICAgQHRleHQtdXBkYXRlZD1cInVwZGF0ZVRleHRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiZGl2aWRlci1zdGFydFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtc2hvdz1cImNhblNob3dEaXZpZGVyQXRTdGFydChpbmRleClcIiBjbGFzcz1cImJhcmQtZGl2aWRlciBiYXJkLWRpdmlkZXItc3RhcnRcIiBAY2xpY2s9XCJhZGRUZXh0QmxvY2soaW5kZXgtMSlcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwiZGl2aWRlci1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9XCJjYW5TaG93RGl2aWRlckF0RW5kKGluZGV4KVwiIGNsYXNzPVwiYmFyZC1kaXZpZGVyIGJhcmQtZGl2aWRlci1lbmRcIiBAY2xpY2s9XCJhZGRUZXh0QmxvY2soaW5kZXgpXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImV4cGFuZC1jb2xsYXBzZVwiPlxuICAgICAgICAgICAgICAgICAgICA8bGk+PGEgQGNsaWNrPVwiY29sbGFwc2VBbGxcIj57eyB0cmFuc2xhdGUoJ2NwLmNvbGxhcHNlX2FsbCcpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT48YSBAY2xpY2s9XCJleHBhbmRBbGxcIj57eyB0cmFuc2xhdGUoJ2NwLmV4cGFuZF9hbGwnKSB9fTwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2NvbXBvbmVudD5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJhcmQtZmllbGQtdGl0bGVcIiB2LXRleHQ9XCJjb25maWcuZGlzcGxheVwiPjwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYXJkLWZpZWxkLW9wdGlvbnMgbm8tc2VsZWN0XCI+XG4gICAgICAgICAgICA8YSBAY2xpY2s9XCJ0b2dnbGVTb3VyY2VcIiA6Y2xhc3M9XCJ7IGFjdGl2ZTogc2hvd1NvdXJjZSB9XCIgdi1pZj1cImFsbG93U291cmNlXCI+PGkgY2xhc3M9XCJpY29uIGljb24tY29kZVwiPjwvaT48L2E+XG4gICAgICAgICAgICA8YSBAY2xpY2s9XCJ0b2dnbGVGdWxsc2NyZWVuXCI+PGkgY2xhc3M9XCJpY29uXCIgOmNsYXNzPVwieyAnaWNvbi1yZXNpemUtZnVsbC1zY3JlZW4nIDogISBmdWxsU2NyZWVuTW9kZSwgJ2ljb24tcmVzaXplLTEwMCcgOiBmdWxsU2NyZWVuTW9kZSB9XCI+PC9pPjwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFJlcGxpY2F0b3IgZnJvbSAnLi4vcmVwbGljYXRvci9SZXBsaWNhdG9yJztcbmltcG9ydCB7IERyYWdnYWJsZSB9IGZyb20gJ0BzaG9waWZ5L2RyYWdnYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW1JlcGxpY2F0b3IsIEZpZWxkdHlwZV0sXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEJhcmRTZXQ6IHJlcXVpcmUoJy4vQmFyZFNldC52dWUnKSxcbiAgICAgICAgQmFyZFRleHQ6IHJlcXVpcmUoJy4vQmFyZFRleHQudnVlJylcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICB0ZXh0QmxvY2tzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHJlZnMuc2V0LmZpbHRlcihzZXQgPT4gc2V0LmRhdGEudHlwZSA9PT0gJ3RleHQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxvd1NvdXJjZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5tYXJrZG93bikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuYWxsb3dfc291cmNlID09PSB1bmRlZmluZWQgPyB0cnVlIDogdGhpcy5jb25maWcuYWxsb3dfc291cmNlXG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzUmVhZHk6IGZhbHNlLFxuICAgICAgICAgICAgc2V0QmVpbmdEcmFnZ2VkOiBudWxsLFxuICAgICAgICAgICAgbGFzdERyYWdnZWRPdmVyRWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgIGhhc1NldHM6IHRoaXMuY29uZmlnLnNldHMgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNob3dTb3VyY2U6IGZhbHNlLFxuICAgICAgICAgICAgZnVsbFNjcmVlbk1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b0JpbmRDaGFuZ2VXYXRjaGVyOiBmYWxzZSxcbiAgICAgICAgICAgIGNoYW5nZVdhdGNoZXJXYXRjaERlZXA6IGZhbHNlLFxuICAgICAgICAgICAgcHJldmlvdXNTY3JvbGxQb3NpdGlvbjogbnVsbFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICByZWFkeSgpIHtcbiAgICAgICAgaWYgKCEgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBbe3R5cGU6ICd0ZXh0JywgdGV4dDogJzxwPjxicj48L3A+J31dO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb21iaW5lQ29uc2VjdXRpdmVUZXh0QmxvY2tzKCk7XG5cbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRyYWdnYWJsZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWNjb3JkaW9uTW9kZSkgdGhpcy5jb2xsYXBzZUFsbCgpO1xuICAgICAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgd2F0Y2g6IHtcblxuICAgICAgICBkYXRhKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IFt7dHlwZTogJ3RleHQnLCB0ZXh0OiAnPHA+PGJyPjwvcD4nfV07XG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy5nZXRCbG9jaygwKS5mb2N1cygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBhZGRUZXh0QmxvY2soaW5kZXgsIHRleHQpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0IHx8ICc8cD48YnI+PC9wPic7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDAsIHsgdHlwZTogJ3RleHQnLCB0ZXh0IH0pO1xuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9jayhpbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZm9jdXNBdCgwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBibG9jay5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZEJsb2NrOiBmdW5jdGlvbih0eXBlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIG5ld1NldCA9IHsgdHlwZTogdHlwZSB9O1xuXG4gICAgICAgICAgICAvLyBHZXQgbnVsbHMgZm9yIGFsbCB0aGUgc2V0J3MgZmllbGRzIHNvIFZ1ZSBjYW4gdHJhY2sgdGhlbSBtb3JlIHJlbGlhYmx5LlxuICAgICAgICAgICAgdmFyIHNldCA9IHRoaXMuc2V0Q29uZmlnKHR5cGUpO1xuICAgICAgICAgICAgXy5lYWNoKHNldC5maWVsZHMsIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgbmV3U2V0W2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdCB8fCBTdGF0YW1pYy5maWVsZHR5cGVEZWZhdWx0c1tmaWVsZC50eXBlXSB8fCBudWxsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAwLCBuZXdTZXQpO1xuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLmdldEJsb2NrKGluZGV4KS5mb2N1cygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRTZWxlY3RlZCh0eXBlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIG5ld1NldCA9IHsgdHlwZTogdHlwZSB9O1xuXG4gICAgICAgICAgICAvLyBHZXQgbnVsbHMgZm9yIGFsbCB0aGUgc2V0J3MgZmllbGRzIHNvIFZ1ZSBjYW4gdHJhY2sgdGhlbSBtb3JlIHJlbGlhYmx5LlxuICAgICAgICAgICAgdmFyIHNldCA9IHRoaXMuc2V0Q29uZmlnKHR5cGUpO1xuICAgICAgICAgICAgXy5lYWNoKHNldC5maWVsZHMsIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgbmV3U2V0W2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdCB8fCBTdGF0YW1pYy5maWVsZHR5cGVEZWZhdWx0c1tmaWVsZC50eXBlXSB8fCBudWxsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEsIG5ld1NldCk7XG5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHRoaXMuZ2V0QmxvY2soaW5kZXgpLmZvY3VzKCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldEluc2VydGVkKHR5cGUsIGluZGV4LCBiZWZvcmUsIGFmdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdTZXQgPSB0aGlzLmdldEJsYW5rU2V0KHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgYmVmb3JlU2V0ID0geyB0eXBlOiAndGV4dCcsIHRleHQ6IGJlZm9yZSB9O1xuICAgICAgICAgICAgY29uc3QgYWZ0ZXJTZXQgPSB7IHR5cGU6ICd0ZXh0JywgdGV4dDogYWZ0ZXIgfTtcblxuICAgICAgICAgICAgbGV0IG5ld0l0ZW1zID0gW2JlZm9yZVNldCwgbmV3U2V0LCBhZnRlclNldF0uZmlsdGVyKHNldCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNldC50eXBlICE9PSAndGV4dCcpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXQudGV4dCAhPT0gJyc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5kYXRhLnNwbGljZShpbmRleCwgMSwgLi4ubmV3SXRlbXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEJsYW5rU2V0KHR5cGUpIHtcbiAgICAgICAgICAgIGxldCBuZXdTZXQgPSB7IHR5cGU6IHR5cGUgfTtcblxuICAgICAgICAgICAgLy8gR2V0IG51bGxzIGZvciBhbGwgdGhlIHNldCdzIGZpZWxkcyBzbyBWdWUgY2FuIHRyYWNrIHRoZW0gbW9yZSByZWxpYWJseS5cbiAgICAgICAgICAgIHZhciBzZXQgPSB0aGlzLnNldENvbmZpZyh0eXBlKTtcbiAgICAgICAgICAgIF8uZWFjaChzZXQuZmllbGRzLCBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgICAgICAgIG5ld1NldFtmaWVsZC5uYW1lXSA9IGZpZWxkLmRlZmF1bHQgfHwgU3RhdGFtaWMuZmllbGR0eXBlRGVmYXVsdHNbZmllbGQudHlwZV0gfHwgbnVsbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3U2V0O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEJsb2NrKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcmVmcy5zZXRbaW5kZXhdO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGEgZGl2aWRlciAvIGluc2VydGlvbiBwb2ludCBjYW4gYmUgZGlzcGxheWVkIGJlZm9yZSBhIGdpdmVuIGJsb2NrLlxuICAgICAgICAgKiBXZSBkb24ndCB3YW50IHRoZSBVSSB0byBnZXQgY2xvZ2dlZCB3aXRoIG11bHRpcGxlIGVtcHR5IGJsb2Nrcy5cbiAgICAgICAgICovXG4gICAgICAgIGNhblNob3dEaXZpZGVyQXRTdGFydChpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGEgZGl2aWRlciAvIGluc2VydGlvbiBwb2ludCBjYW4gYmUgZGlzcGxheWVkIGFmdGVyIGEgZ2l2ZW4gYmxvY2suXG4gICAgICAgICAqIFdlIGRvbid0IHdhbnQgdGhlIFVJIHRvIGdldCBjbG9nZ2VkIHdpdGggbXVsdGlwbGUgZW1wdHkgYmxvY2tzLlxuICAgICAgICAgKi9cbiAgICAgICAgY2FuU2hvd0RpdmlkZXJBdEVuZChpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmRhdGEubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRCbG9jayhpbmRleCArIDEpLmRhdGEudHlwZSAhPT0gJ3RleHQnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRyYWdnYWJsZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYWdnYWJsZSA9IG5ldyBEcmFnZ2FibGUodGhpcy4kZWxzLmJsb2Nrcywge1xuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogJy5iYXJkLWJsb2NrJyxcbiAgICAgICAgICAgICAgICBoYW5kbGU6ICcuYmFyZC1kcmFnLWhhbmRsZScsXG4gICAgICAgICAgICAgICAgbWlycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgIHhBeGlzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWluRGltZW5zaW9uczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVsYXk6IDIwMFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRyYWdnYWJsZS5vbignZHJhZzpzdGFydCcsIChlLCBhKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzU2Nyb2xsUG9zaXRpb24gPSAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvYy5zY3JvbGxUb3ApICAtIChkb2MuY2xpZW50VG9wIHx8IDApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRCZWluZ0RyYWdnZWQgPSBlLm9yaWdpbmFsU291cmNlLl9fdnVlX18uaW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0QmxvY2tzLmZvckVhY2goYmxvY2sgPT4gYmxvY2suYWRkRHJvcEFyZWFzKCkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRyYWdnYWJsZS5vbignZHJhZzptb3ZlJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWUub3JpZ2luYWxFdmVudCkgcmV0dXJuOyAvLyBTb21ldGltZXMgdGhpcyBpcyB1bmRlZmluZWQgZm9yIHdoYXRldmVyIHJlYXNvbi5cblxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUub3JpZ2luYWxFdmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmFyZC1kcm9wLWFyZWEtaW5uZXInKSB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdiYXJkLWRpdmlkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3REcmFnZ2VkT3ZlckVsZW1lbnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRyYWdnYWJsZS5vbignZHJhZzpzdG9wJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkaXYgZnJvbSBhY3R1YWxseSBiZWluZyBtb3ZlZC4gVnVlIHdpbGwgZG8gdGhhdCBmb3IgdXMuXG4gICAgICAgICAgICAgICAgZS5jYW5jZWwoKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhc3REcmFnZ2VkT3ZlckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlU2V0VG9OZXdMb2NhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRHJvcEFyZWFzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgdGhpcy5wcmV2aW91c1Njcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c1Njcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVTZXRUb05ld0xvY2F0aW9uKCkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBibG9jayB0aGlzIHdhcyBkcmFnZ2VkIG92ZXIuXG4gICAgICAgICAgICAvLyBUaGVyZSdzIG9idmlvdXNseSBhIGJldHRlciB3YXkgdG8gZG8gdGhpcy4gT3IgaXMgdGhlcmU/XG4gICAgICAgICAgICBsZXQgYmxvY2s7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0RHJhZ2dlZE92ZXJFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnYmFyZC1kaXZpZGVyJykpIHtcbiAgICAgICAgICAgICAgICBibG9jayA9IHRoaXMubGFzdERyYWdnZWRPdmVyRWxlbWVudC5wYXJlbnROb2RlLl9fdnVlX187XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJsb2NrID0gdGhpcy5sYXN0RHJhZ2dlZE92ZXJFbGVtZW50IC8vIC5iYXJkLWRyb3AtYXJlYS1pbm5lclxuICAgICAgICAgICAgICAgICAgICAucGFyZW50Tm9kZSAvLyAuYmFyZC1kcm9wLWFyZWFcbiAgICAgICAgICAgICAgICAgICAgLnBhcmVudE5vZGUgLy8gLmJhcmQtZWRpdG9yXG4gICAgICAgICAgICAgICAgICAgIC5wYXJlbnROb2RlIC8vIC5iYXJkLWJsb2NrXG4gICAgICAgICAgICAgICAgICAgIC5fX3Z1ZV9fO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZURyb3BBcmVhcygpO1xuXG4gICAgICAgICAgICBpZiAoISBibG9jaykgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLm1vdmVTZXQoYmxvY2spO1xuXG4gICAgICAgICAgICB0aGlzLmxhc3REcmFnZ2VkT3ZlckVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVTZXQoYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChibG9jay5kYXRhLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vdmVTZXRJbnRvVGV4dChibG9jayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zZXRCZWluZ0RyYWdnZWQ7XG4gICAgICAgICAgICBsZXQgZW5kID0gYmxvY2suaW5kZXggKyAoc3RhcnQgPiBibG9jay5pbmRleCA/IDEgOiAwKTtcblxuICAgICAgICAgICAgLy8gVGhlIG9ubHkgcGxhY2UgYSBzdGFydCBkaXZpZGVyIGV4aXN0cyBpcyByaWdodCBhdCB0aGUgYmVnaW5uaW5nLiBJbiB0aGlzIGNhc2UsIHdlXG4gICAgICAgICAgICAvLyB3YW50IHRvIG1vdmUgdGhlIHNldCB0byB0aGUgYmVnaW5uaW5nIG9mIGV2ZXJ5dGhpbmcsIGluc3RlYWQgb2YgKmFmdGVyKiBzb21lIG90aGVyIHNldC5cbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3REcmFnZ2VkT3ZlckVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdiYXJkLWRpdmlkZXItc3RhcnQnKSkge1xuICAgICAgICAgICAgICAgIGVuZCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoZW5kLCAwLCB0aGlzLmRhdGEuc3BsaWNlKHN0YXJ0LCAxKVswXSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29tYmluZUNvbnNlY3V0aXZlVGV4dEJsb2NrcygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVTZXRJbnRvVGV4dChibG9jaykge1xuICAgICAgICAgICAgYmxvY2suaW5zZXJ0UGFyYWdyYXBoKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IFtiZWZvcmUsIGFmdGVyXSA9IGJsb2NrLmdldEJlZm9yZUFuZEFmdGVySHRtbCgpO1xuICAgICAgICAgICAgY29uc3QgYmVmb3JlU2V0ID0geyB0eXBlOiAndGV4dCcsIHRleHQ6IGJlZm9yZSB9O1xuICAgICAgICAgICAgY29uc3QgYWZ0ZXJTZXQgPSB7IHR5cGU6ICd0ZXh0JywgdGV4dDogYWZ0ZXIgfTtcbiAgICAgICAgICAgIGNvbnN0IHNldCA9IHRoaXMuZGF0YVt0aGlzLnNldEJlaW5nRHJhZ2dlZF07XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UodGhpcy5zZXRCZWluZ0RyYWdnZWQsIDEpO1xuXG4gICAgICAgICAgICBsZXQgbmV3SXRlbXMgPSBbYmVmb3JlU2V0LCBzZXQsIGFmdGVyU2V0XS5maWx0ZXIoc2V0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2V0LnR5cGUgIT09ICd0ZXh0JykgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldC50ZXh0ICE9PSAnJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0SW5zZXJ0SW5kZXgodGhpcy5zZXRCZWluZ0RyYWdnZWQsIGJsb2NrLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEsIC4uLm5ld0l0ZW1zKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRCZWluZ0RyYWdnZWQgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLmNvbWJpbmVDb25zZWN1dGl2ZVRleHRCbG9ja3MoKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVEcm9wQXJlYXMoKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRCbG9ja3MuZm9yRWFjaChibG9jayA9PiBibG9jay5yZW1vdmVEcm9wQXJlYXMoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0SW5zZXJ0SW5kZXgoZnJvbSwgdG8pIHtcbiAgICAgICAgICAgIGlmIChmcm9tID09PSAwKSByZXR1cm4gMDtcblxuICAgICAgICAgICAgaWYgKGZyb20gPCB0bykgcmV0dXJuIHRvIC0gMTtcblxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbWJpbmVDb25zZWN1dGl2ZVRleHRCbG9ja3MoKSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IFtdO1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzQmxvY2tXYXNUZXh0ID0gZmFsc2VcblxuICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goYmxvY2spXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQmxvY2tXYXNUZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoISBwcmV2aW91c0Jsb2NrV2FzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0Jsb2NrV2FzVGV4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXRhW2RhdGEubGVuZ3RoLTFdLnRleHQgKz0gYmxvY2sudGV4dDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRvZ2dsZVNvdXJjZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1NvdXJjZSA9ICF0aGlzLnNob3dTb3VyY2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbFNjcmVlbk1vZGUgPSAhdGhpcy5mdWxsU2NyZWVuTW9kZTtcbiAgICAgICAgICAgIHRoaXMuJHJvb3QuaGlkZU92ZXJmbG93ID0gISB0aGlzLiRyb290LmhpZGVPdmVyZmxvdztcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVTZXQoaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9jayhpbmRleCAtIDEpO1xuICAgICAgICAgICAgY29uc3QgZm9jdXMgPSAoYmxvY2sgJiYgYmxvY2suZGF0YS50eXBlID09PSAndGV4dCcpID8gYmxvY2sucGxhaW5UZXh0KCkubGVuZ3RoIDogbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5kYXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB0aGlzLmNvbWJpbmVDb25zZWN1dGl2ZVRleHRCbG9ja3MoKTtcblxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy5nZXRCbG9jayhpbmRleCAtIDEpLmZvY3VzQXQoZm9jdXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnb1RvUHJldmlvdXNUZXh0RmllbGQoaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZ2V0QmxvY2soaW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmIChibG9jay5kYXRhLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgYmxvY2suZm9jdXNBdCgnZW5kJykgfSwgMTApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdvVG9OZXh0VGV4dEZpZWxkKGluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbEJsb2NrcyA9IHRoaXMuJHJlZnMuc2V0Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdG90YWxCbG9ja3MpIHJldHVybjtcblxuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgdG90YWxCbG9ja3MpIHtcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5nZXRCbG9jayhpbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLmRhdGEudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBibG9jay5mb2N1c0F0KCdzdGFydCcpIH0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVUZXh0KGksIHRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtpXS50ZXh0ID0gdGV4dDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZXBsaWNhdG9yUHJldmlld1RleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAodGhpcy4kcmVmcy5zZXQsIChzZXQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNldC5kYXRhLnR5cGUgPT09ICd0ZXh0JykgPyBzZXQucGxhaW5UZXh0KCkgOiBzZXQuZ2V0Q29sbGFwc2VkUHJldmlldygpO1xuICAgICAgICAgICAgfSkuam9pbignLCAnKTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQmFyZEZpZWxkdHlwZS52dWU/NzhkZmQxMTQiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9CYXJkU2V0LnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQmFyZFNldC52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYmFyZC9CYXJkU2V0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJiYXJkLWJsb2NrIGJhcmQtc2V0XCIgOmNsYXNzPVwieydiYXJkLXNldC1zb2xvJzogZ29pbmdTb2xvfVwiPlxuXG4gICAgICAgIDxzbG90IG5hbWU9XCJkaXZpZGVyLXN0YXJ0XCI+PC9zbG90PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaXN0LWdyb3VwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIGdyb3VwLWhlYWRlciBwbC0zIGJhcmQtZHJhZy1oYW5kbGVcIiA6Y2xhc3M9XCJ7J2NvbGxhcHNlZCc6IGlzSGlkZGVufVwiIEBkYmxjbGljaz1cInRvZ2dsZVwiIHYtaWY9XCIhIGdvaW5nU29sb1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4eVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXh5IGJhc2VsaW5lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIEBjbGljaz1cInRvZ2dsZVwiIGNsYXNzPVwiY3Vyc29yLXBvaW50ZXIgbS0wXCI+e3sgZGlzcGxheSB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiaXNIaWRkZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwicmVwbGljYXRvci1zZXQtc3VtbWFyeSBmaWxsXCIgdi1odG1sPVwiY29sbGFwc2VkUHJldmlld1wiPjwvc21hbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIiB2LWlmPVwiaW5zdHJ1Y3Rpb25zICYmICFpc0hpZGRlblwiIHYtaHRtbD1cImluc3RydWN0aW9ucyB8IG1hcmtkb3duXCI+PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgaWNvbi1ncm91cCBhY3Rpb24tbW9yZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tbW9yZSBkcm9wZG93bi10b2dnbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1kb3RzLXRocmVlLXZlcnRpY2FsXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImV4cGFuZC1jb2xsYXBzZVwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+PGEgQGNsaWNrPVwiZGVsZXRlXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGVfc2V0JykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgdi1zaG93PVwiIWlzSGlkZGVuIHx8IGdvaW5nU29sb1wiIDpjbGFzcz1cInsnbGlzdC1ncm91cC1pdGVtIHAtMCc6ICEgZ29pbmdTb2xvfVwiIHYtaWY9XCJjb25maWcuZmllbGRzLmxlbmd0aFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdWJsaXNoLWZpZWxkc1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtZm9yPVwiZmllbGQgaW4gY29uZmlnLmZpZWxkc1wiIDpjbGFzcz1cImZpZWxkQ2xhc3NlcyhmaWVsZClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwieydiYXJkLWRyYWctaGFuZGxlJzogZ29pbmdTb2xvfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCB2LWlmPVwiaGFzTXVsdGlwbGVGaWVsZHNcIiBjbGFzcz1cImJsb2NrXCIgOmNsYXNzPVwieydib2xkJzogZmllbGQuYm9sZH1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJmaWVsZC5kaXNwbGF5XCI+e3sgZmllbGQuZGlzcGxheSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiIWZpZWxkLmRpc3BsYXlcIj57eyBmaWVsZC5uYW1lIHwgY2FwaXRhbGl6ZSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwicmVxdWlyZWRcIiB2LWlmPVwiZmllbGQucmVxdWlyZWRcIj4qPC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9XCJoZWxwLWJsb2NrXCIgdi1pZj1cImZpZWxkLmluc3RydWN0aW9uc1wiIHYtaHRtbD1cImZpZWxkLmluc3RydWN0aW9ucyB8IG1hcmtkb3duXCI+PC9zbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cImNvbXBvbmVudE5hbWUoZmllbGQudHlwZSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bmFtZT1cInBhcmVudE5hbWUgKyAnLicgKyBpbmRleCArICcuJyArIGZpZWxkLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS5zeW5jPVwiZGF0YVtmaWVsZC5uYW1lXVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjb25maWc9XCJmaWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxzbG90IG5hbWU9XCJkaXZpZGVyLWVuZFwiPjwvc2xvdD5cblxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFJlcGxpY2F0b3JTZXQgZnJvbSAnLi4vcmVwbGljYXRvci9SZXBsaWNhdG9yU2V0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbUmVwbGljYXRvclNldF0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGZvY3VzQXQocG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBnb2luZ1NvbG8oKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdEZpZWxkdHlwZSA9IF8uZmlyc3QodGhpcy5jb25maWcuZmllbGRzKS50eXBlO1xuICAgICAgICAgICAgY29uc3Qgc3VwcG9ydGVkRmllbGR0eXBlcyA9IFsnYXNzZXRzJ107XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5maWVsZHMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICAgICAgJiYgXy5jb250YWlucyhzdXBwb3J0ZWRGaWVsZHR5cGVzLCBmaXJzdEZpZWxkdHlwZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZXZlbnRzOiB7XG4gICAgICAgICdhc3NldC1maWVsZC5kZWxldGUtYmFyZC1zZXQnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdkZWxldGVkJywgdGhpcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEJhcmRTZXQudnVlP2U0NGJjNWQ0IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPVxcXCJiYXJkLWJsb2NrIGJhcmQtc2V0XFxcIiA6Y2xhc3M9XFxcInsnYmFyZC1zZXQtc29sbyc6IGdvaW5nU29sb31cXFwiPiA8c2xvdCBuYW1lPWRpdmlkZXItc3RhcnQ+PC9zbG90PiA8ZGl2IGNsYXNzPWxpc3QtZ3JvdXA+IDxkaXYgY2xhc3M9XFxcImxpc3QtZ3JvdXAtaXRlbSBncm91cC1oZWFkZXIgcGwtMyBiYXJkLWRyYWctaGFuZGxlXFxcIiA6Y2xhc3M9XFxcInsnY29sbGFwc2VkJzogaXNIaWRkZW59XFxcIiBAZGJsY2xpY2s9dG9nZ2xlIHYtaWY9XFxcIiEgZ29pbmdTb2xvXFxcIj4gPGRpdiBjbGFzcz1mbGV4eT4gPGRpdiBjbGFzcz1maWxsPiA8ZGl2IGNsYXNzPVxcXCJmbGV4eSBiYXNlbGluZVxcXCI+IDxsYWJlbCBAY2xpY2s9dG9nZ2xlIGNsYXNzPVxcXCJjdXJzb3ItcG9pbnRlciBtLTBcXFwiPnt7IGRpc3BsYXkgfX08L2xhYmVsPiA8ZGl2IHYtaWY9aXNIaWRkZW4+IDxzbWFsbCBjbGFzcz1cXFwicmVwbGljYXRvci1zZXQtc3VtbWFyeSBmaWxsXFxcIiB2LWh0bWw9Y29sbGFwc2VkUHJldmlldz48L3NtYWxsPiA8L2Rpdj4gPC9kaXY+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrIHYtaWY9XFxcImluc3RydWN0aW9ucyAmJiAhaXNIaWRkZW5cXFwiIHYtaHRtbD1cXFwiaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cXFwiPjwvc21hbGw+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgaWNvbi1ncm91cCBhY3Rpb24tbW9yZVxcXCI+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1oYXNwb3B1cD10cnVlIGFyaWEtZXhwYW5kZWQ9ZmFsc2U+IDxpIGNsYXNzPVxcXCJpY29uIGljb24tZG90cy10aHJlZS12ZXJ0aWNhbFxcXCI+PC9pPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnU+IDxzbG90IG5hbWU9ZXhwYW5kLWNvbGxhcHNlPjwvc2xvdD4gPGxpIGNsYXNzPXdhcm5pbmc+PGEgQGNsaWNrPWRlbGV0ZT57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZV9zZXQnKSB9fTwvYT48L2xpPiA8L3VsPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IHYtc2hvdz1cXFwiIWlzSGlkZGVuIHx8IGdvaW5nU29sb1xcXCIgOmNsYXNzPVxcXCJ7J2xpc3QtZ3JvdXAtaXRlbSBwLTAnOiAhIGdvaW5nU29sb31cXFwiIHYtaWY9Y29uZmlnLmZpZWxkcy5sZW5ndGg+IDxkaXYgY2xhc3M9cHVibGlzaC1maWVsZHM+IDxkaXYgdi1mb3I9XFxcImZpZWxkIGluIGNvbmZpZy5maWVsZHNcXFwiIDpjbGFzcz1maWVsZENsYXNzZXMoZmllbGQpPiA8ZGl2IDpjbGFzcz1cXFwieydiYXJkLWRyYWctaGFuZGxlJzogZ29pbmdTb2xvfVxcXCI+IDxsYWJlbCB2LWlmPWhhc011bHRpcGxlRmllbGRzIGNsYXNzPWJsb2NrIDpjbGFzcz1cXFwieydib2xkJzogZmllbGQuYm9sZH1cXFwiPiA8dGVtcGxhdGUgdi1pZj1maWVsZC5kaXNwbGF5Pnt7IGZpZWxkLmRpc3BsYXkgfX08L3RlbXBsYXRlPiA8dGVtcGxhdGUgdi1pZj0hZmllbGQuZGlzcGxheT57eyBmaWVsZC5uYW1lIHwgY2FwaXRhbGl6ZSB9fTwvdGVtcGxhdGU+IDxpIGNsYXNzPXJlcXVpcmVkIHYtaWY9ZmllbGQucmVxdWlyZWQ+KjwvaT4gPC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2sgdi1pZj1maWVsZC5pbnN0cnVjdGlvbnMgdi1odG1sPVxcXCJmaWVsZC5pbnN0cnVjdGlvbnMgfCBtYXJrZG93blxcXCI+PC9zbWFsbD4gPC9kaXY+IDxjb21wb25lbnQgOmlzPWNvbXBvbmVudE5hbWUoZmllbGQudHlwZSkgOm5hbWU9XFxcInBhcmVudE5hbWUgKyAnLicgKyBpbmRleCArICcuJyArIGZpZWxkLm5hbWVcXFwiIDpkYXRhLnN5bmM9ZGF0YVtmaWVsZC5uYW1lXSA6Y29uZmlnPWZpZWxkPiA8L2NvbXBvbmVudD4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxzbG90IG5hbWU9ZGl2aWRlci1lbmQ+PC9zbG90PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2JhcmQvQmFyZFNldC52dWVcbi8vIG1vZHVsZSBpZCA9IDU1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9CYXJkVGV4dC52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0JhcmRUZXh0LnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRUZXh0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJiYXJkLWJsb2NrIGJhcmQtdGV4dFwiPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJiYXJkLXNldC1zZWxlY3RvclwiIHYtc2hvdz1cImhhc1NldHMgJiYgaXNTaG93aW5nT3B0aW9uc1wiIDpzdHlsZT1cIm9wdGlvblN0eWxlc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJsZXJwXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXJvdW5kIGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1wbHVzXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwic2V0IGluICRwYXJlbnQuY29uZmlnLnNldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIEBjbGljay5wcmV2ZW50PVwiaW5zZXJ0U2V0KHNldC5uYW1lKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWFkZC10by1saXN0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHNldC5kaXNwbGF5IHx8IHNldC5uYW1lIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaSB2LWlmPVwiaXNCbGFua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgQGNsaWNrLnByZXZlbnQ9XCIkZW1pdCgnZGVsZXRlZCcsIGluZGV4KVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLXRyYXNoXCI+PC9pPiB7eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgIGNsYXNzPVwiYmFyZC1zb3VyY2VcIlxuICAgICAgICAgICAgdi1tb2RlbD1cInRleHRcIlxuICAgICAgICAgICAgdi1zaG93PVwic2hvd1NvdXJjZVwiXG4gICAgICAgICAgICB2LWVsOnNvdXJjZVxuICAgICAgICAgICAgcm93cz1cIjFcIlxuICAgICAgICA+PC90ZXh0YXJlYT5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cImJhcmQtZWRpdG9yXCJcbiAgICAgICAgICAgIHYtc2hvdz1cIiFzaG93U291cmNlXCJcbiAgICAgICAgICAgIHYtZWw6aW5wdXRcbiAgICAgICAgPjwvZGl2PlxuXG4gICAgICAgIDxzZWxlY3RvciB2LWlmPVwic2hvd0Fzc2V0U2VsZWN0b3JcIlxuICAgICAgICAgICAgICAgICAgOmNvbnRhaW5lcj1cImNvbnRhaW5lclwiXG4gICAgICAgICAgICAgICAgICA6Zm9sZGVyPVwiZm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgIDpzZWxlY3RlZD1cInNlbGVjdGVkQXNzZXRzXCJcbiAgICAgICAgICAgICAgICAgIDpyZXN0cmljdC1uYXZpZ2F0aW9uPVwicmVzdHJpY3RBc3NldE5hdmlnYXRpb25cIlxuICAgICAgICAgICAgICAgICAgOm1heC1maWxlcz1cIjFcIlxuICAgICAgICAgICAgICAgICAgQHNlbGVjdGVkPVwiYXNzZXRzU2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgQGNsb3NlZD1cImNsb3NlQXNzZXRTZWxlY3RvclwiXG4gICAgICAgID48L3NlbGVjdG9yPlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cblxuPHNjcmlwdD5cblxuICAgIGltcG9ydCBhdXRvc2l6ZSBmcm9tICdhdXRvc2l6ZSc7XG4gICAgaW1wb3J0IEF1dG9MaXN0IGZyb20gJy4vQXV0b0xpc3QnO1xuICAgIGltcG9ydCBBdXRvSFIgZnJvbSAnbWVkaXVtLWVkaXRvci1hdXRvaHInO1xuICAgIGltcG9ydCBJbnNlcnRzQXNzZXRzIGZyb20gJy4uL0luc2VydHNBc3NldHMnO1xuXG4gICAgZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgICAgIG5hbWU6ICdCYXJkVGV4dCcsXG5cbiAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgc2VsZWN0b3I6IHJlcXVpcmUoJy4uLy4uL2Fzc2V0cy9TZWxlY3Rvci52dWUnKVxuICAgICAgICB9LFxuXG4gICAgICAgIG1peGluczogW0luc2VydHNBc3NldHNdLFxuXG4gICAgICAgIHByb3BzOiBbJ2RhdGEnLCAnaW5kZXgnLCAnc2hvd1NvdXJjZSddLFxuXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVkaXRvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmdPcHRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zVG9wUG9zaXRpb246IDAsXG4gICAgICAgICAgICAgICAgZm9jdXNlZEVsZW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgZHJvcHBlZDogeyBzaWJsaW5nOiBudWxsLCBwb3NpdGlvbjogbnVsbCB9LFxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuZGF0YS50ZXh0IHx8ICcnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgICAgIGZpZWxkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbHMuaW5wdXRcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNvdXJjZUZpZWxkKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbHMuc291cmNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaXNCbGFuaygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0ID09PSAnJyB8fCB0aGlzLnRleHQgPT09ICc8cD48YnI+PC9wPic7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBvcHRpb25TdHlsZXMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0aGlzLm9wdGlvbnNUb3BQb3NpdGlvbiArICdweCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoYXNTZXRzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQuaGFzU2V0cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHdhdGNoOiB7XG5cbiAgICAgICAgICAgIHNob3dTb3VyY2Uoc2hvdykge1xuICAgICAgICAgICAgICAgIGlmIChzaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsgYXV0b3NpemUudXBkYXRlKHRoaXMuc291cmNlRmllbGQpIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRWRpdG9ySHRtbCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHRleHQodGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3RleHQtdXBkYXRlZCcsIHRoaXMuaW5kZXgsIHRleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjaGFuZ2VzTWFkZScsIHRydWUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgJ2RhdGEudGV4dCc6IGZ1bmN0aW9uICh0ZXh0LCBvbGRUZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBhbiB1cGRhdGUgd2hlbiB0eXBpbmcgZGlyZWN0bHkgaW4gdGhlIGZpZWxkLlxuICAgICAgICAgICAgICAgIGlmICh0ZXh0ID09PSB0aGlzLnRleHQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy51cGRhdGVFZGl0b3JIdG1sKHRleHQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWR5KCkge1xuICAgICAgICAgICAgYXV0b3NpemUodGhpcy5zb3VyY2VGaWVsZCk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdE1lZGl1bSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2VkIGJ5IHRoZSBJbnNlcnRzQXNzZXRzIG1peGluIHRvIGdldCB0aGUgY29uZmlnLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRGaWVsZHR5cGVDb25maWcoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC5jb25maWc7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwbGFpblRleHQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmVsZW1lbnRzWzBdLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYWRkRHJvcEFyZWFzKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZWRpdG9yLmVsZW1lbnRzWzBdO1xuXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0QWRkZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oZWRpdG9yLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmNsYXNzTGlzdC5jb250YWlucygnYmFyZC1kcm9wLWFyZWEnKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghIGZpcnN0QWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRHJvcEFyZWFCZWZvcmUoY2hpbGQsIGVkaXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEFkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRHJvcEFyZWFBZnRlcihjaGlsZCwgZWRpdG9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFkZERyb3BBcmVhQmVmb3JlKGNoaWxkLCBlZGl0b3IpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUuY2xhc3NOYW1lICs9ICdiYXJkLWRyb3AtYXJlYS1pbm5lcic7XG4gICAgICAgICAgICAgICAgY2hpbGROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wcGVkLnNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wcGVkLnBvc2l0aW9uID0gJ3ByZXZpb3VzJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBuZXdOb2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5jbGFzc05hbWUgKz0gJ2JhcmQtZHJvcC1hcmVhIGJhcmQtZHJvcC1hcmVhLWJlZm9yZSc7XG4gICAgICAgICAgICAgICAgZWRpdG9yLmluc2VydEJlZm9yZShuZXdOb2RlLCBjaGlsZCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhZGREcm9wQXJlYUFmdGVyKGNoaWxkLCBlZGl0b3IpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUuY2xhc3NOYW1lICs9ICdiYXJkLWRyb3AtYXJlYS1pbm5lcic7XG4gICAgICAgICAgICAgICAgY2hpbGROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wcGVkLnNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wcGVkLnBvc2l0aW9uID0gJ25leHQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5hcHBlbmRDaGlsZChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgICAgIG5ld05vZGUuY2xhc3NOYW1lICs9ICdiYXJkLWRyb3AtYXJlYSBiYXJkLWRyb3AtYXJlYS1hZnRlcic7XG4gICAgICAgICAgICAgICAgZWRpdG9yLmluc2VydEJlZm9yZShuZXdOb2RlLCBjaGlsZC5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmVEcm9wQXJlYXMoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxzID0gdGhpcy5lZGl0b3IuZWxlbWVudHNbMF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYmFyZC1kcm9wLWFyZWEnKTtcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGVscykuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5lZGl0b3IuZ2V0Q29udGVudCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbG9jYWxpemVCdXR0b25zKGJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbG9jYWxpemF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2JvbGQnOiAgICdib2xkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2l0YWxpYyc6ICdpdGFsaWMnLFxuICAgICAgICAgICAgICAgICAgICAnYW5jaG9yJzogJ2xpbmsnLFxuICAgICAgICAgICAgICAgICAgICAnaDInOiAgICAgJ2gyJyxcbiAgICAgICAgICAgICAgICAgICAgJ2gzJzogICAgICdoMycsXG4gICAgICAgICAgICAgICAgICAgICdxdW90ZSc6ICAnYmxvY2txdW90ZScsXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbnMubWFwKChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgbG9jYWxpemF0aW9ucy5oYXNPd25Qcm9wZXJ0eShidXR0b24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWE6IHRyYW5zbGF0ZSgnY3AuJyArIGxvY2FsaXphdGlvbnNbYnV0dG9uXSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluaXRNZWRpdW0oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJ1dHRvbnMgPSB0aGlzLmxvY2FsaXplQnV0dG9ucyh0aGlzLiRwYXJlbnQuY29uZmlnLmJ1dHRvbnMgfHwgWydib2xkJywgJ2l0YWxpYycsICdhbmNob3InLCAndW5vcmRlcmVkbGlzdCcsICdvcmRlcmVkbGlzdCcsICdoMicsICdoMycsICdxdW90ZSddKTtcblxuICAgICAgICAgICAgICAgIGxldCBleHRlbnNpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlRHJhZ2dpbmc6IHt9LFxuICAgICAgICAgICAgICAgICAgICBhdXRvbGlzdDogbmV3IEF1dG9MaXN0LFxuICAgICAgICAgICAgICAgICAgICBhdXRvaHI6IG5ldyBBdXRvSFJcbiAgICAgICAgICAgICAgICB9LCBfLm1hcChTdGF0YW1pYy5NZWRpdW1FZGl0b3JFeHRlbnNpb25zLCBleHQgPT4gbmV3IGV4dCkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJHBhcmVudC5jb25maWcuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuYXNzZXRzID0gdGhpcy5hc3NldEJ1dHRvbkV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISBidXR0b25zLmluY2x1ZGVzKCdhc3NldHMnKSkgYnV0dG9ucy5wdXNoKCdhc3NldHMnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgb3B0cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbGJhcjogICAgICAgIHsgYnV0dG9ucyB9LFxuICAgICAgICAgICAgICAgICAgICBidXR0b25MYWJlbHM6ICAgJ2ZvbnRhd2Vzb21lJyxcbiAgICAgICAgICAgICAgICAgICAgYXV0b0xpbms6ICAgICAgIHRoaXMuJHBhcmVudC5jb25maWcuYXV0b2xpbmsgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzdGU6ICAgICAgICAgIHsgZm9yY2VQbGFpblRleHQ6IHRoaXMuJHBhcmVudC5jb25maWcuZm9yY2VfcGxhaW5fdGV4dCwgY2xlYW5QYXN0ZWRIVE1MOiB0aGlzLiRwYXJlbnQuY29uZmlnLmNsZWFuX3Bhc3RlZF9odG1sIH0sXG4gICAgICAgICAgICAgICAgICAgIHNwZWxsY2hlY2s6ICAgICB0aGlzLiRwYXJlbnQuY29uZmlnLnNwZWxsY2hlY2sgfHwgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Qmxhbms6ICAgIHRoaXMuJHBhcmVudC5jb25maWcudGFyZ2V0X2JsYW5rIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBsaW5rVmFsaWRhdGlvbjogdGhpcy4kcGFyZW50LmNvbmZpZy5saW5rX3ZhbGlkYXRpb24gfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJUZXh0OiB0cmFuc2xhdGUoJ2NwLnBhc3RlX29yX3R5cGVfbGluaycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYTogdHJhbnNsYXRlKCdjcC5saW5rJyksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuJHBhcmVudC5jb25maWcubWFya2Rvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy50b29sYmFyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMua2V5Ym9hcmRDb21tYW5kcyA9IHsgY29tbWFuZHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY29tbWFuZDogZmFsc2UsIGtleTogJ0InLCBtZXRhOiB0cnVlLCBzaGlmdDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY29tbWFuZDogZmFsc2UsIGtleTogJ0knLCBtZXRhOiB0cnVlLCBzaGlmdDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY29tbWFuZDogZmFsc2UsIGtleTogJ1UnLCBtZXRhOiB0cnVlLCBzaGlmdDogZmFsc2UgfVxuICAgICAgICAgICAgICAgICAgICBdfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvciA9IG5ldyBNZWRpdW1FZGl0b3IodGhpcy5maWVsZCwgb3B0cyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVkaXRvckh0bWwodGhpcy50ZXh0KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLnN1YnNjcmliZSgnZWRpdGFibGVJbnB1dCcsIGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lZGl0b3IuZ2V0Rm9jdXNlZEVsZW1lbnQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQodGhpcy5lZGl0b3IuZ2V0U2VsZWN0ZWRQYXJlbnRFbGVtZW50KCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgYW55IGFubm95aW5nIHNwYW4gdGFncyB0aGF0IHdlcmUgYWRkZWQgYnkgY29udGVudGVkaXRhYmxlLlxuICAgICAgICAgICAgICAgICAgICAkKHRoaXMuZmllbGQpLmZpbmQoJ3NwYW5bc3R5bGVdJykuY29udGVudHMoKS51bndyYXAoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSB0aGlzLmVkaXRvci5nZXRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5zdWJzY3JpYmUoJ2VkaXRhYmxlQ2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQoZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iuc3Vic2NyaWJlKCdlZGl0YWJsZUtleXVwJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtZW50KHRoaXMuZWRpdG9yLmdldFNlbGVjdGVkUGFyZW50RWxlbWVudCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLnN1YnNjcmliZSgnZWRpdGFibGVLZXlkb3duRGVsZXRlJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQmxhbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2RlbGV0ZWQnLCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iuc3Vic2NyaWJlKCdlZGl0YWJsZUtleWRvd24nLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNVcCA9IGUua2V5ID09PSAnQXJyb3dVcCcgfHwgZS5rZXkgPT09ICdBcnJvd0xlZnQnO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0Rvd24gPSBlLmtleSA9PT0gJ0Fycm93RG93bicgfHwgZS5rZXkgPT09ICdBcnJvd1JpZ2h0JztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVXAgJiYgIWlzRG93bikgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZWRpdG9yLmV4cG9ydFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0luRmlyc3RFbGVtZW50ID0gIXRoaXMuZWRpdG9yLmdldFNlbGVjdGVkUGFyZW50RWxlbWVudCgpLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNJbkxhc3RFbGVtZW50ID0gIXRoaXMuZWRpdG9yLmdldFNlbGVjdGVkUGFyZW50RWxlbWVudCgpLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1VwICYmIHBvcy5zdGFydCA9PT0gMCAmJiBwb3MuZW5kID09PSAwICYmIGlzSW5GaXJzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Fycm93LXVwLWF0LXN0YXJ0JywgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEb3duICYmIHBvcy5zdGFydCA9PT0gdGhpcy5wbGFpblRleHQoKS5sZW5ndGggJiYgcG9zLmVuZCA9PT0gdGhpcy5wbGFpblRleHQoKS5sZW5ndGggJiYgaXNJbkxhc3RFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdhcnJvdy1kb3duLWF0LWVuZCcsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhc3NldEJ1dHRvbkV4dGVuc2lvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2bSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gTWVkaXVtRWRpdG9yLmV4dGVuc2lvbnMuYnV0dG9uLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhc3NldHMnLFxuICAgICAgICAgICAgICAgICAgICB0YWdOYW1lczogWydhJ10sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnREZWZhdWx0OiAnPHNwYW4gY2xhc3M9XCJpY29uIGljb24taW1hZ2VzXCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgIGFyaWE6IHRyYW5zbGF0ZSgnY3AubmF2X2Fzc2V0cycpLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvb2xiYXIgPSB0aGlzLmJhc2UuZ2V0RXh0ZW5zaW9uQnlOYW1lKCd0b29sYmFyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9vbGJhcikgdG9vbGJhci5oaWRlVG9vbGJhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlLnNhdmVTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmFkZEFzc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGV4dGVuc2lvbjtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG1vdmVPcHRpb25zVG9FbGVtZW50KGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Nob3dpbmdPcHRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNUb3BQb3NpdGlvbiA9IGVsLm9mZnNldFRvcCAtIDI7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBoaWRlT3B0aW9ucygpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2hvd2luZ09wdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGVsZW1lbnRJc0VtcHR5KGVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IGVsLmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbCA9PT0gJycgfHwgaHRtbCA9PT0gJzxicj4nO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZm9jdXNFbGVtZW50KGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2VkRWxlbWVudCA9IGVsO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBhbGxvdyBwIHRhZ3MgdG8gaGF2ZSB0aGUgKyBzaG93biBpbnNpZGUgdGhlbS5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgYW4gaXNzdWUgd2hlcmUgaWYgdGhlIGVudGlyZSBwYXJhZ3JhcGggaXMgYm9sZCwgaGl0dGluZyBlbnRlclxuICAgICAgICAgICAgICAgIC8vIHRvIHN0YXJ0IGEgbmV3IHBhcmFncmFwaCB3b3VsZCBwbGFjZSB5b3UgaW5zaWRlIGEgYiB0YWcsIHRoZW4gd2hlbiBpbnNlcnRpbmcgYSBzZXRcbiAgICAgICAgICAgICAgICAvLyBpdCB3b3VsZCBkZWxldGUgdGhlIHByZXZpb3VzIHBhcmFncmFwaC4gQ29tcGxpY2F0ZWQgdG8gZXhwbGFpbi4gTW9yZSBzbyB0byBmaXguXG4gICAgICAgICAgICAgICAgaWYgKGVsLm5vZGVOYW1lICE9PSAnUCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGlkZU9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50SXNFbXB0eShlbCkgPyB0aGlzLm1vdmVPcHRpb25zVG9FbGVtZW50KGVsKSA6IHRoaXMuaGlkZU9wdGlvbnMoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldE5leHRTaWJsaW5ncyhlbCkge1xuICAgICAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9IFtdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChlbCA9IGVsLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzLnB1c2goZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc2libGluZ3M7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXRQcmV2aW91c1NpYmxpbmdzKGVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpYmxpbmdzID0gW107XG4gICAgICAgICAgICAgICAgd2hpbGUgKGVsID0gZWwucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzLnB1c2goZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc2libGluZ3M7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzQXQoJ3N0YXJ0Jyk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb2N1c0F0KHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnZW5kJykge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMucGxhaW5UZXh0KCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2FyZXQocG9zaXRpb24pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0Q2FyZXQocG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5pbXBvcnRTZWxlY3Rpb24oeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpbnNlcnRTZXQodHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtiZWZvcmUsIGFmdGVyXSA9IHRoaXMuZ2V0QmVmb3JlQW5kQWZ0ZXJIdG1sKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdzZXQtaW5zZXJ0ZWQnLCB0eXBlLCB0aGlzLmluZGV4LCBiZWZvcmUsIGFmdGVyKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldEJlZm9yZUFuZEFmdGVySHRtbCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiZWZvcmUgPSB0aGlzLmdldEh0bWxGcm9tRWxlbWVudHModGhpcy5nZXRQcmV2aW91c1NpYmxpbmdzKHRoaXMuZm9jdXNlZEVsZW1lbnQpLnJldmVyc2UoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSB0aGlzLmdldEh0bWxGcm9tRWxlbWVudHModGhpcy5nZXROZXh0U2libGluZ3ModGhpcy5mb2N1c2VkRWxlbWVudCkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtiZWZvcmUsIGFmdGVyXTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldEh0bWxGcm9tRWxlbWVudHMoZWxzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8ucmVkdWNlKGVscywgKGNhcnJ5LCBlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBodG1sID0gZWwub3V0ZXJIVE1MIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FycnkgKyBodG1sO1xuICAgICAgICAgICAgICAgIH0sICcnKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluc2VydFBhcmFncmFwaCgpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dE5vZGUgPSB0aGlzLmRyb3BwZWQuc2libGluZztcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyb3BwZWQucG9zaXRpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFBsYWNlIGEgbmV3IHBhcmFncmFwaCBiZWZvcmUgdGhlIFwibmV4dFwiIG9uZS5cbiAgICAgICAgICAgICAgICBsZXQgbmV3Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLmluc2VydEJlZm9yZShuZXdOb2RlLCBuZXh0Tm9kZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGNhcmV0IHRvIHRoZSBuZXcgcGFyYWdyYXBoIHBvc2l0aW9uLiBXZSdsbCBmaW5kIHRoZSBwb3NpdGlvbiBieSBpbnNlcnRpbmdcbiAgICAgICAgICAgICAgICAvLyBhIHN0cmluZyB0aGF0IHNob3VsZG4ndCBhbHJlYWR5IGV4aXN0IGFuZCB3ZSBjYW4gZWFzaWx5IGdyYWIgZnJvbSB0aGUgdGV4dC5cbiAgICAgICAgICAgICAgICAvLyBXZSdsbCBhbHNvIGdldCByaWQgb2YgdGhlIHBsYWNlaG9sZGVyIHN0cmluZyBhZnRlciB3ZSdyZSBkb25lLlxuICAgICAgICAgICAgICAgIGNvbnN0IGNhcmV0UGxhY2Vob2xkZXIgPSAnJSUlQ0FSRVQlJSUnO1xuICAgICAgICAgICAgICAgIG5ld05vZGUuaW5uZXJIVE1MID0gY2FyZXRQbGFjZWhvbGRlcjtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENhcmV0KHRoaXMucGxhaW5UZXh0KCkuaW5kZXhPZihjYXJldFBsYWNlaG9sZGVyKSk7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5pbm5lckhUTUwgPSAnPGJyPic7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSB0aGlzLmVkaXRvci5nZXRDb250ZW50KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBCcmluZyB0aGUgKyBvcHRpb25zIHRvIHRoZSBuZXcgcGFyYWdyYXBoLlxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtZW50KG5ld05vZGUpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlRWRpdG9ySHRtbCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5zZXRDb250ZW50KHRoaXMudGV4dCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhc3NldHNTZWxlY3RlZChhc3NldHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5yZXN0b3JlU2VsZWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBMb29wIG92ZXIgcmV0dXJuZWQgYXNzZXRzLCBldmVuIHRob3VnaCB0aGVyZSB3aWxsIG9ubHkgYmUgb25lLlxuICAgICAgICAgICAgICAgIHRoaXMuJGh0dHAucG9zdChjcF91cmwoJ2Fzc2V0cy9nZXQnKSwgeyBhc3NldHMgfSwgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIF8ocmVzcG9uc2UpLmVhY2goYXNzZXQgPT4gdGhpcy5lZGl0b3IuY3JlYXRlTGluayh7IHZhbHVlOiBhc3NldC51cmwgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQmFyZFRleHQudnVlPzIzNjgzOTg0IiwiLyoqXG4gKiBBZGFwdGVkIGZyb20gbWVkaXVtLWVkaXRvci1hdXRvbGlzdFxuICogaHR0cHM6Ly9naXRodWIuY29tL3ZhcnVuLXJhai9tZWRpdW0tZWRpdG9yLWF1dG9saXN0L2Jsb2IvbWFzdGVyL2Rpc3QvYXV0b2xpc3QuanNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgTWVkaXVtRWRpdG9yLkV4dGVuc2lvbi5leHRlbmQoe1xuICAgIG5hbWU6ICdhdXRvbGlzdCcsXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZSgnZWRpdGFibGVJbnB1dCcsIHRoaXMub25JbnB1dC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoJ2VkaXRhYmxlUGFzdGUnLCB0aGlzLm9uUGFzdGUuYmluZCh0aGlzKSk7XG4gICAgfSxcbiAgICBvbklucHV0OiBmdW5jdGlvbiAoa2V5UHJlc3NFdmVudCkge1xuICAgICAgICBpZiAoISB0aGlzLmJhc2UuZ2V0Rm9jdXNlZEVsZW1lbnQoKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBsaXN0X3N0YXJ0ID0gdGhpcy5iYXNlLmdldFNlbGVjdGVkUGFyZW50RWxlbWVudCgpLnRleHRDb250ZW50O1xuICAgICAgICBpZiAoL14xXFwuXFxzJC8udGVzdChsaXN0X3N0YXJ0KSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlLmV4ZWNBY3Rpb24oJ2RlbGV0ZScpO1xuICAgICAgICAgICAgdGhpcy5iYXNlLmV4ZWNBY3Rpb24oJ2RlbGV0ZScpO1xuICAgICAgICAgICAgdGhpcy5iYXNlLmV4ZWNBY3Rpb24oJ2RlbGV0ZScpO1xuICAgICAgICAgICAgdGhpcy5iYXNlLmV4ZWNBY3Rpb24oJ2luc2VydG9yZGVyZWRsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoL15bXFwqXFwtXVxccyQvLnRlc3QobGlzdF9zdGFydCkpIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZS5leGVjQWN0aW9uKCdkZWxldGUnKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZS5leGVjQWN0aW9uKCdkZWxldGUnKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZS5leGVjQWN0aW9uKCdpbnNlcnR1bm9yZGVyZWRsaXN0Jyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG9uUGFzdGU6IGZ1bmN0aW9uIChwYXN0ZUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gcGFzdGVFdmVudC50YXJnZXRcbiAgICAgICAgQXJyYXkuZnJvbShmaWVsZC5jaGlsZHJlbikuZm9yRWFjaChlbCA9PiByZXBsYWNlTGlzdEl0ZW0oZWwpKTtcbiAgICAgICAgbGV0IGVscyA9IGZsYXR0ZW5Hcm91cHMod3JhcExpc3RJdGVtcyhncm91cEVsZW1lbnRzKEFycmF5LmZyb20oZmllbGQuY2hpbGRyZW4pKSkpO1xuICAgICAgICBlbHMuZm9yRWFjaChlbCA9PiBmaWVsZC5hcHBlbmRDaGlsZChlbCkpO1xuICAgICAgICB0aGlzLmJhc2UuY2hlY2tDb250ZW50Q2hhbmdlZCgpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEdyb3VwIGxpc3QgYW5kIG5vbi1saXN0IGl0ZW1zIHRvZ2V0aGVyLlxuICpcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIERPTSBlbGVtZW50cywgd2hlbiBhIGxpc3QgaXRlbSBpcyBlbmNvdW50ZXJlZCBhZnRlciBhIG5vbiBsaXN0LWl0ZW0sIHN0YXJ0IGEgbmV3IGdyb3VwLlxuICogVmlzYS12ZXJzZSwgd2hlbiBhIG5vbi1saXN0IGl0ZW0gaXMgZW5jb3VudGVyZWQgYWZ0ZXIgYSBsaXN0IGl0ZW0sIHN0YXJ0IGEgbmV3IGdyb3VwLlxuICpcbiAqIGVnLiBbW3AsIHBdLCBbbGksIGxpLCBsaV0sIFtwXSwgW2xpXV1cbiAqL1xuZnVuY3Rpb24gZ3JvdXBFbGVtZW50cyhlbHMpIHtcbiAgICBsZXQgZ3JvdXBzID0gW1tdXTtcbiAgICBsZXQgY3VycmVudEdyb3VwID0gMDtcbiAgICBsZXQgcHJldldhc0xpc3RJdGVtID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBlbCA9IGVsc1tpXTtcbiAgICAgICAgY29uc3QgY3VycmVudElzTGlzdEl0ZW0gPSBlbC5ub2RlTmFtZSA9PT0gJ0xJJztcbiAgICAgICAgY29uc3QgaGFzQ2hhbmdlZCA9IChwcmV2V2FzTGlzdEl0ZW0gJiYgIWN1cnJlbnRJc0xpc3RJdGVtKSB8fCAoIXByZXZXYXNMaXN0SXRlbSAmJiBjdXJyZW50SXNMaXN0SXRlbSk7XG5cbiAgICAgICAgaWYgKGhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cCsrO1xuICAgICAgICAgICAgZ3JvdXBzW2N1cnJlbnRHcm91cF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZXYXNMaXN0SXRlbSA9IGN1cnJlbnRJc0xpc3RJdGVtO1xuICAgICAgICBncm91cHNbY3VycmVudEdyb3VwXS5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JvdXBzLmZpbHRlcihncm91cCA9PiBncm91cC5sZW5ndGgpO1xufVxuXG4vKipcbiAqIEdpdmVuIGFuIGFycmF5IG9mIGVsZW1lbnQgZ3JvdXBzLCB3cmFwIGFueSBsaXN0LWl0ZW0gZ3JvdXBzIGluIGVpdGhlciBhIHVsIG9yIG9sXG4gKi9cbmZ1bmN0aW9uIHdyYXBMaXN0SXRlbXMoZ3JvdXBzKSB7XG4gICAgcmV0dXJuIGdyb3Vwcy5tYXAoZ3JvdXAgPT4ge1xuICAgICAgICBsZXQgZmlyc3RFbCA9IGdyb3VwWzBdO1xuXG4gICAgICAgIC8vIElmIGl0J3Mgbm90IGEgbGlzdCBpdGVtLCBpdCdzIGZpbmUgYXMgaXQgaXMuXG4gICAgICAgIGlmIChmaXJzdEVsLm5vZGVOYW1lICE9PSAnTEknKSByZXR1cm4gZ3JvdXA7XG5cbiAgICAgICAgbGV0IHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGZpcnN0RWwuZGF0YXNldC5saVR5cGUpO1xuICAgICAgICBncm91cC5mb3JFYWNoKGxpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBsaS5kYXRhc2V0LmxpVHlwZTsgLy8gUmVtb3ZlIHRoZSB0ZW1wb3JhcnkgdGhpbmcuXG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFt3cmFwcGVyXTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkdyb3Vwcyhncm91cHMpIHtcbiAgICBsZXQgZWxzID0gW107XG4gICAgZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xuICAgICAgICBncm91cC5mb3JFYWNoKGVsID0+IGVscy5wdXNoKGVsKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVscztcbn1cblxuLyoqXG4gKiBSZXBsYWNlIGEgRE9NIGVsZW1lbnQgdGhhdCBoYXMgYSBsaXN0LWl0ZW0gdGV4dCBwcmVmaXggd2l0aCBhbiBhY3R1YWwgPGxpPiBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZXBsYWNlTGlzdEl0ZW0oZWwpIHtcbiAgICBjb25zdCB0eXBlID0gbGlzdEl0ZW1UeXBlKGVsKTtcbiAgICBpZiAoISB0eXBlKSByZXR1cm47IC8vIElmIGl0J3Mgbm90IGEgbGlzdCBpdGVtLCB3ZSBkb24ndCB3YW50IHRvIHJlcGxhY2UgaXQuXG5cbiAgICBsZXQgbmV3RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuXG4gICAgLy8gU2V0IHdoZXRoZXIgaXQgYmVsb25ncyBpbiBhIHVsIG9yIG9sIGRlcGVuZGluZyBvbiB0aGUgcHJlZml4LCBhbmQgc3RvcmUgaXQgaW4gdGhlIERPTSdzIGRhdGFsaXN0IGZvciBsYXRlci5cbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAodHlwZSA9PT0gJ3VsJyA/IC9eKFtcXCpcXC1dXFxzKS8gOiAvXihcXGQrXFwuXFxzKS8pO1xuICAgIG5ld0VsLnRleHRDb250ZW50ID0gZWwudGV4dENvbnRlbnQucmVwbGFjZShyZWdleCwgJycpO1xuICAgIG5ld0VsLmRhdGFzZXQubGlUeXBlID0gdHlwZTtcblxuICAgIHJlcGxhY2VJbkRvbShlbCwgbmV3RWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIGEgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYmUgaW4gYSB1bCBvciBvbFxuICovXG5mdW5jdGlvbiBsaXN0SXRlbVR5cGUoZWwpIHtcbiAgICBpZiAoL15bXFwqXFwtXVxccy8udGVzdChlbC50ZXh0Q29udGVudCkpIHtcbiAgICAgICAgcmV0dXJuICd1bCc7XG4gICAgfSBlbHNlIGlmICgvXlxcZCtcXC5cXHMvLnRlc3QoZWwudGV4dENvbnRlbnQpKSB7XG4gICAgICAgIHJldHVybiAnb2wnO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXBsYWNlIGFuIGVsZW1lbnQgaW4gdGhlIERPTSB3aXRoIGFub3RoZXIuXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VJbkRvbShvbGRFbCwgbmV3RWwpIHtcbiAgICBvbGRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgb2xkRWwubmV4dFNpYmxpbmcpO1xuICAgIG9sZEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkRWwpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvYmFyZC9BdXRvTGlzdC5qcyIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1cXFwiYmFyZC1ibG9jayBiYXJkLXRleHRcXFwiPiA8ZGl2IGNsYXNzPWJhcmQtc2V0LXNlbGVjdG9yIHYtc2hvdz1cXFwiaGFzU2V0cyAmJiBpc1Nob3dpbmdPcHRpb25zXFxcIiA6c3R5bGU9b3B0aW9uU3R5bGVzPiA8ZGl2IGNsYXNzPWJsZXJwPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXJvdW5kIGRyb3Bkb3duLXRvZ2dsZVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1oYXNwb3B1cD10cnVlIGFyaWEtZXhwYW5kZWQ9ZmFsc2U+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tcGx1c1xcXCI+PC9zcGFuPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnU+IDxsaSB2LWZvcj1cXFwic2V0IGluICRwYXJlbnQuY29uZmlnLnNldHNcXFwiPiA8YSBAY2xpY2sucHJldmVudD1pbnNlcnRTZXQoc2V0Lm5hbWUpPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWFkZC10by1saXN0XFxcIj48L2k+IHt7IHNldC5kaXNwbGF5IHx8IHNldC5uYW1lIH19IDwvYT4gPC9saT4gPGxpIHYtaWY9aXNCbGFuaz4gPGEgQGNsaWNrLnByZXZlbnQ9XFxcIiRlbWl0KCdkZWxldGVkJywgaW5kZXgpXFxcIj4gPGkgY2xhc3M9XFxcImljb24gaWNvbi10cmFzaFxcXCI+PC9pPiB7eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZScpIH19IDwvYT4gPC9saT4gPC91bD4gPC9kaXY+IDwvZGl2PiA8dGV4dGFyZWEgY2xhc3M9YmFyZC1zb3VyY2Ugdi1tb2RlbD10ZXh0IHYtc2hvdz1zaG93U291cmNlIHYtZWw6c291cmNlIHJvd3M9MT48L3RleHRhcmVhPiA8ZGl2IGNsYXNzPWJhcmQtZWRpdG9yIHYtc2hvdz0hc2hvd1NvdXJjZSB2LWVsOmlucHV0PjwvZGl2PiA8c2VsZWN0b3Igdi1pZj1zaG93QXNzZXRTZWxlY3RvciA6Y29udGFpbmVyPWNvbnRhaW5lciA6Zm9sZGVyPWZvbGRlciA6c2VsZWN0ZWQ9c2VsZWN0ZWRBc3NldHMgOnJlc3RyaWN0LW5hdmlnYXRpb249cmVzdHJpY3RBc3NldE5hdmlnYXRpb24gOm1heC1maWxlcz0xIEBzZWxlY3RlZD1hc3NldHNTZWxlY3RlZCBAY2xvc2VkPWNsb3NlQXNzZXRTZWxlY3Rvcj48L3NlbGVjdG9yPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL2JhcmQvQmFyZFRleHQudnVlXG4vLyBtb2R1bGUgaWQgPSA1NjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPVxcXCJiYXJkLWZpZWxkdHlwZS13cmFwcGVyIHJlcGxpY2F0b3JcXFwiIDpjbGFzcz1cXFwieydiYXJkLWZ1bGxzY3JlZW4nOiBmdWxsU2NyZWVuTW9kZSwgJ25vLXNldHMnOiAhaGFzU2V0cyB9XFxcIj4gPGRpdiBjbGFzcz1iYXJkLWJsb2NrcyB2LWlmPWlzUmVhZHkgdi1lbDpibG9ja3M+IDxjb21wb25lbnQgOmlzPVxcXCJibG9jay50eXBlID09PSAndGV4dCcgPyAnQmFyZFRleHQnIDogJ0JhcmRTZXQnXFxcIiB2LWZvcj1cXFwiKGluZGV4LCBibG9jaykgaW4gZGF0YVxcXCIgdi1yZWY6c2V0IDpjbGFzcz1cXFwieyAnZGl2aWRlci1hdC1zdGFydCc6IGNhblNob3dEaXZpZGVyQXRTdGFydChpbmRleCksICdkaXZpZGVyLWF0LWVuZCc6IGNhblNob3dEaXZpZGVyQXRFbmQoaW5kZXgpIH1cXFwiIDprZXk9aW5kZXggOmRhdGE9YmxvY2sgOmluZGV4PWluZGV4IDpwYXJlbnQtbmFtZT1uYW1lIDpjb25maWc9c2V0Q29uZmlnKGJsb2NrLnR5cGUpIDpzaG93LXNvdXJjZT1zaG93U291cmNlIEBzZXQtaW5zZXJ0ZWQ9c2V0SW5zZXJ0ZWQgQGRlbGV0ZWQ9ZGVsZXRlU2V0IEBzb3VyY2UtdG9nZ2xlZD10b2dnbGVTb3VyY2UgQGFycm93LXVwLWF0LXN0YXJ0PWdvVG9QcmV2aW91c1RleHRGaWVsZCBAYXJyb3ctZG93bi1hdC1lbmQ9Z29Ub05leHRUZXh0RmllbGQgQHRleHQtdXBkYXRlZD11cGRhdGVUZXh0PiA8dGVtcGxhdGUgc2xvdD1kaXZpZGVyLXN0YXJ0PiA8ZGl2IHYtc2hvdz1jYW5TaG93RGl2aWRlckF0U3RhcnQoaW5kZXgpIGNsYXNzPVxcXCJiYXJkLWRpdmlkZXIgYmFyZC1kaXZpZGVyLXN0YXJ0XFxcIiBAY2xpY2s9YWRkVGV4dEJsb2NrKGluZGV4LTEpPjwvZGl2PiA8L3RlbXBsYXRlPiA8dGVtcGxhdGUgc2xvdD1kaXZpZGVyLWVuZD4gPGRpdiB2LXNob3c9Y2FuU2hvd0RpdmlkZXJBdEVuZChpbmRleCkgY2xhc3M9XFxcImJhcmQtZGl2aWRlciBiYXJkLWRpdmlkZXItZW5kXFxcIiBAY2xpY2s9YWRkVGV4dEJsb2NrKGluZGV4KT48L2Rpdj4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9ZXhwYW5kLWNvbGxhcHNlPiA8bGk+PGEgQGNsaWNrPWNvbGxhcHNlQWxsPnt7IHRyYW5zbGF0ZSgnY3AuY29sbGFwc2VfYWxsJykgfX08L2E+PC9saT4gPGxpPjxhIEBjbGljaz1leHBhbmRBbGw+e3sgdHJhbnNsYXRlKCdjcC5leHBhbmRfYWxsJykgfX08L2E+PC9saT4gPC90ZW1wbGF0ZT4gPC9jb21wb25lbnQ+IDwvZGl2PiA8ZGl2IGNsYXNzPWJhcmQtZmllbGQtdGl0bGUgdi10ZXh0PWNvbmZpZy5kaXNwbGF5PjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJiYXJkLWZpZWxkLW9wdGlvbnMgbm8tc2VsZWN0XFxcIj4gPGEgQGNsaWNrPXRvZ2dsZVNvdXJjZSA6Y2xhc3M9XFxcInsgYWN0aXZlOiBzaG93U291cmNlIH1cXFwiIHYtaWY9YWxsb3dTb3VyY2U+PGkgY2xhc3M9XFxcImljb24gaWNvbi1jb2RlXFxcIj48L2k+PC9hPiA8YSBAY2xpY2s9dG9nZ2xlRnVsbHNjcmVlbj48aSBjbGFzcz1pY29uIDpjbGFzcz1cXFwieyAnaWNvbi1yZXNpemUtZnVsbC1zY3JlZW4nIDogISBmdWxsU2NyZWVuTW9kZSwgJ2ljb24tcmVzaXplLTEwMCcgOiBmdWxsU2NyZWVuTW9kZSB9XFxcIj48L2k+PC9hPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9iYXJkL0JhcmRGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1NjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ2hlY2tib3hlc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0NoZWNrYm94ZXNGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0NoZWNrYm94ZXNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1NjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDx1bCBjbGFzcz1cImxpc3QtdW5zdHlsZWRcIj5cbiAgICAgICAgPGxpIHYtZm9yPVwib3B0aW9uIGluIGNvbmZpZy5vcHRpb25zXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICBuYW1lPVwie3sgbmFtZSB9fVtdXCJcbiAgICAgICAgICAgICAgICAgICA6aWQ9XCJuYW1lICsgJy0nICsgJGluZGV4XCJcbiAgICAgICAgICAgICAgICAgICA6dmFsdWU9XCJvcHRpb24udmFsdWVcIlxuICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJkYXRhXCJcbiAgICBcdFx0Lz5cbiAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVwibmFtZSArICctJyArICRpbmRleFwiPnt7IG9wdGlvbi50ZXh0IH19PC9sYWJlbD5cbiAgICAgICAgPC9saT5cbiAgICA8L3VsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXV0b0JpbmRDaGFuZ2VXYXRjaGVyOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IEpTT04ucGFyc2UodGhpcy5jb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJpbmRDaGFuZ2VXYXRjaGVyKCk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3RoaXMubmFtZX0tMGApLmZvY3VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IF8uZmluZFdoZXJlKHRoaXMuY29uZmlnLm9wdGlvbnMsIHt2YWx1ZTogaXRlbX0pO1xuICAgICAgICAgICAgICAgIHJldHVybiAob3B0aW9uKSA/IG9wdGlvbi50ZXh0IDogaXRlbTtcbiAgICAgICAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgICAgIH0sXG5cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gQ2hlY2tib3hlc0ZpZWxkdHlwZS52dWU/NmQ1NmFmMDgiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDx1bCBjbGFzcz1saXN0LXVuc3R5bGVkPiA8bGkgdi1mb3I9XFxcIm9wdGlvbiBpbiBjb25maWcub3B0aW9uc1xcXCI+IDxpbnB1dCB0eXBlPWNoZWNrYm94IG5hbWU9XFxcInt7IG5hbWUgfX1bXVxcXCIgOmlkPVxcXCJuYW1lICsgJy0nICsgJGluZGV4XFxcIiA6dmFsdWU9b3B0aW9uLnZhbHVlIHYtbW9kZWw9ZGF0YSAvPiA8bGFiZWwgOmZvcj1cXFwibmFtZSArICctJyArICRpbmRleFxcXCI+e3sgb3B0aW9uLnRleHQgfX08L2xhYmVsPiA8L2xpPiA8L3VsPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvQ2hlY2tib3hlc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Db2xsZWN0aW9uRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Db2xsZWN0aW9uRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjxzY3JpcHQ+XG5pbXBvcnQgQWRhcHRzUmVsYXRlRmllbGR0eXBlIGZyb20gJy4vQWRhcHRzUmVsYXRlRmllbGR0eXBlLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0FkYXB0c1JlbGF0ZUZpZWxkdHlwZV1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIENvbGxlY3Rpb25GaWVsZHR5cGUudnVlP2JmMmFmYjg0IiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdj5cbiAgICAgICAgPHJlbGF0ZS1maWVsZHR5cGVcbiAgICAgICAgICAgIHYtcmVmOnJlbGF0ZVxuICAgICAgICAgICAgOmRhdGEuc3luYz1cImRhdGFcIlxuICAgICAgICAgICAgOm5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgIDpjb25maWc9XCJjb25maWdcIj5cbiAgICAgICAgPC9yZWxhdGUtZmllbGR0eXBlPlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnZGF0YScsICdjb25maWcnLCAnbmFtZSddLFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGdldFJlcGxpY2F0b3JQcmV2aWV3VGV4dCgpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuZGF0YSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoISB0aGlzLiRyZWZzLnJlbGF0ZSkgcmV0dXJuIHRoaXMuZGF0YS5qb2luKCcsICcpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcmVmcy5yZWxhdGUuZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLiRyZWZzLnJlbGF0ZS5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBBZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlPzU1NGVmYzNjIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2PiA8cmVsYXRlLWZpZWxkdHlwZSB2LXJlZjpyZWxhdGUgOmRhdGEuc3luYz1kYXRhIDpuYW1lPW5hbWUgOmNvbmZpZz1jb25maWc+IDwvcmVsYXRlLWZpZWxkdHlwZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9BZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1NzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ29sbGVjdGlvbnNGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0NvbGxlY3Rpb25zRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjxzY3JpcHQ+XG5pbXBvcnQgQWRhcHRzUmVsYXRlRmllbGR0eXBlIGZyb20gJy4vQWRhcHRzUmVsYXRlRmllbGR0eXBlLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0FkYXB0c1JlbGF0ZUZpZWxkdHlwZV1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIENvbGxlY3Rpb25zRmllbGR0eXBlLnZ1ZT8xMjNiMTQ0OSIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0RhdGVGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9EYXRlRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9EYXRlRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiZGF0ZXRpbWUgY2xlYXJmaXhcIj5cblxuICAgIFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYWRkLWRhdGVcIiB2LWlmPVwiIWhhc0RhdGVcIiBAY2xpY2s9XCJhZGREYXRlXCIgdGFiaW5kZXg9XCIwXCI+XG4gICAgXHRcdHt7IHRyYW5zbGF0ZSgnY3AuYWRkX2RhdGUnKSB9fVxuICAgIFx0PC9idXR0b24+XG5cbiAgICBcdDxkaXYgdi1pZj1cImhhc0RhdGVcIiBjbGFzcz1cImRhdGUtdGltZS1jb250YWluZXJcIj5cblxuICAgIFx0XHQ8ZGl2IGNsYXNzPVwiY29sLWRhdGVcIj5cbiAgICBcdFx0XHQ8ZGl2IGNsYXNzPVwiZGF0ZXJhbmdlIGRhdGVyYW5nZS0tc2luZ2xlIGZsZXhcIiA6ZGF0YS1kYXRldGltZT1cImRhdGVcIiB2LWVsOmRhdGU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBoLThcIiB2LWlmPVwiYmxhbmtBbGxvd2VkXCI+XG4gICAgICAgIFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJpY29uIGljb24tcmVtb3ZlXCIgQGNsaWNrPVwicmVtb3ZlRGF0ZVwiID4mdGltZXM7PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICBcdFx0XHQ8L2Rpdj5cbiAgICBcdFx0PC9kaXY+XG5cbiAgICBcdFx0PGRpdiBjbGFzcz1cImNvbC10aW1lXCIgdi1pZj1cInRpbWVBbGxvd2VkXCI+XG4gICAgXHRcdFx0PGRpdiBjbGFzcz1cInRpbWUtZmllbGR0eXBlXCI+XG4gICAgXHRcdFx0XHQ8dGltZS1maWVsZHR5cGUgdi1yZWY6dGltZSB2LXNob3c9XCJoYXNUaW1lXCIgOmRhdGEuc3luYz1cInRpbWVcIiA6cmVxdWlyZWQ9XCJ0aW1lUmVxdWlyZWRcIj48L3RpbWUtZmllbGR0eXBlPlxuICAgIFx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLWljb24gYWRkLXRpbWVcIiB2LXNob3c9XCIhaGFzVGltZVwiIEBjbGljaz1cImFkZFRpbWVcIiB0YWJpbmRleD1cIjBcIj5cbiAgICBcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2xvY2tcIj48L3NwYW4+XG4gICAgXHRcdFx0XHQ8L2J1dHRvbj5cbiAgICBcdFx0XHQ8L2Rpdj5cbiAgICBcdFx0PC9kaXY+XG5cbiAgICBcdDwvZGl2PlxuXG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgQ2FsZW5kYXIgZnJvbSAnYmFyZW1ldHJpY3MtY2FsZW5kYXInO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtGaWVsZHR5cGVdLFxuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgbmFtZTogU3RyaW5nLFxuICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgY29uZmlnOiB7IGRlZmF1bHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4ge307IH0gfSxcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYWxlbmRhcjogbnVsbCxcbiAgICAgICAgICAgIHRpbWU6IG51bGwsXG4gICAgICAgICAgICBhdXRvQmluZENoYW5nZVdhdGNoZXI6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgaGFzRGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ibGFua0FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhICE9PSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBoYXNUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCA+IDEwO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRpbWVBbGxvd2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWVSZXF1aXJlZCB8fCB0aGlzLmFsbG93VGltZTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxvd1RpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFsbG93X3RpbWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5hbGxvd190aW1lICE9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRpbWVSZXF1aXJlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnJlcXVpcmVfdGltZTtcbiAgICAgICAgfSxcblxuICAgICAgICBibGFua0FsbG93ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmFsbG93X2JsYW5rID09PSB0cnVlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIHRoZSBkYXRlIHN0cmluZy5cbiAgICAgICAgICogYHRoaXMuZGF0YWAgaXMgdGhlIGZ1bGwgZGF0ZXRpbWUgc3RyaW5nLiBUaGlzIHdpbGwgZ2V0IGp1c3QgdGhlIGRhdGUuXG4gICAgICAgICAqL1xuICAgICAgICBkYXRlU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCA+PSAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEuc3Vic3RyKDAsIDEwKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgZGF0ZSBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZURhdGVTdHJpbmc6IGZ1bmN0aW9uKGRhdGVTdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciB0aW1lU3RyaW5nID0gKHRoaXMuaGFzVGltZSkgPyAnICcgKyB0aGlzLnRpbWUgOiAnJztcblxuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0ZVN0cmluZyArIHRpbWVTdHJpbmc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIHdhdGNoZXIgZm9yIHRoZSBgdGhpcy50aW1lYCB2YXJpYWJsZS5cbiAgICAgICAgICogV2hlbmV2ZXIgdGhlIHRpbWUgdmFsdWUgaXMgdXBkYXRlZCB3ZSB3YW50IHRvIHRhY2sgaXQgb250byB0aGUgZW5kXG4gICAgICAgICAqIG9mIHRoZSBkYXRlIHN0cmluZy4gT3IganVzdCByZW1vdmUgdGhlIHRpbWUgaWYgaXQncyBudWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgd2F0Y2hUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy4kd2F0Y2goJ3RpbWUnLCBmdW5jdGlvbihuZXdUaW1lLCBvbGRUaW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1RpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gc2VsZi5kYXRlU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gc2VsZi5kYXRlU3RyaW5nKCkgKyAnICcgKyBuZXdUaW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50aW1lID0gbW9tZW50KCkuZm9ybWF0KCdISDptbScpO1xuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJHJlZnMudGltZS4kZWxzLmhvdXIpLmZvY3VzKCkuc2VsZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMudGltZSA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkRGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBtb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZENhbGVuZGFyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVEYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYmluZENhbGVuZGFyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgLy8gVXNlIHRoZSBkYXRlIGlmIHRoZXJlIGlzIG9uZSwgb3RoZXJ3aXNlIHVzZSB0b2RheSdzIGRhdGUuXG4gICAgICAgICAgICB2YXIgZGF0ZSA9ICh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgPyBtb21lbnQoc2VsZi5kYXRlU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgOiBtb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcblxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhciA9IG5ldyBDYWxlbmRhcih7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogJChzZWxmLiRlbCkuZmluZCgnLmRhdGVyYW5nZScpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRfZGF0ZTogbW9tZW50KGRhdGUpLFxuICAgICAgICAgICAgICAgIGVhcmxpZXN0X2RhdGU6IHRoaXMuY29uZmlnLmVhcmxpZXN0X2RhdGUgfHwgXCJKYW51YXJ5IDEsIDE5MDBcIixcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHRoaXMuY29uZmlnLmlucHV0X2Zvcm1hdCB8fCBTdGF0YW1pYy5kYXRlRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICBqdW1wX21vbnRoOiAnTU1NTScsXG4gICAgICAgICAgICAgICAgICAgIGp1bXBfeWVhcjogJ1lZWVknXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdEYXRlID0gbW9tZW50KHRoaXMuY3VycmVudF9kYXRlKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVEYXRlU3RyaW5nKG5ld0RhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiAkKHRoaXMuJGVscy5kYXRlKS5maW5kKCcuZHItaW5wdXQgLmRyLWRhdGUnKS5jbGljaygpLCAyMDApO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCB0aW1lRm9ybWF0ID0gJ0hIOm1tJztcbiAgICAgICAgY29uc3QgZGF0ZUZvcm1hdCA9ICdZWVlZLU1NLUREJztcblxuICAgICAgICBpZiAoIXRoaXMuZGF0YSAmJiAhdGhpcy5ibGFua0FsbG93ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9ICh0aGlzLnRpbWVSZXF1aXJlZCB8fCB0aGlzLmNvbmZpZy5zaG93X3RpbWUpXG4gICAgICAgICAgICAgICAgPyBkYXRlRm9ybWF0ICsgJyAnICsgdGltZUZvcm1hdFxuICAgICAgICAgICAgICAgIDogZGF0ZUZvcm1hdDtcblxuICAgICAgICAgICAgdGhpcy5kYXRhID0gbW9tZW50KCkuZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEgJiYgdGhpcy50aW1lUmVxdWlyZWQgJiYgIXRoaXMuaGFzVGltZSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhICs9ICcgJyArIG1vbWVudCgpLmZvcm1hdCh0aW1lRm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMudGltZSA9IHRoaXMuZGF0YS5zdWJzdHIoMTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53YXRjaFRpbWUoKTtcbiAgICAgICAgdGhpcy5iaW5kQ2FsZW5kYXIoKTtcbiAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBEYXRlRmllbGR0eXBlLnZ1ZT80ZGZhYTg2NiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1cXFwiZGF0ZXRpbWUgY2xlYXJmaXhcXFwiPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYWRkLWRhdGVcXFwiIHYtaWY9IWhhc0RhdGUgQGNsaWNrPWFkZERhdGUgdGFiaW5kZXg9MD4ge3sgdHJhbnNsYXRlKCdjcC5hZGRfZGF0ZScpIH19IDwvYnV0dG9uPiA8ZGl2IHYtaWY9aGFzRGF0ZSBjbGFzcz1kYXRlLXRpbWUtY29udGFpbmVyPiA8ZGl2IGNsYXNzPWNvbC1kYXRlPiA8ZGl2IGNsYXNzPVxcXCJkYXRlcmFuZ2UgZGF0ZXJhbmdlLS1zaW5nbGUgZmxleFxcXCIgOmRhdGEtZGF0ZXRpbWU9ZGF0ZSB2LWVsOmRhdGU+IDxkaXYgY2xhc3M9XFxcImZsZXggaXRlbXMtY2VudGVyIGgtOFxcXCIgdi1pZj1ibGFua0FsbG93ZWQ+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tcmVtb3ZlXFxcIiBAY2xpY2s9cmVtb3ZlRGF0ZT4mdGltZXM7PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPWNvbC10aW1lIHYtaWY9dGltZUFsbG93ZWQ+IDxkaXYgY2xhc3M9dGltZS1maWVsZHR5cGU+IDx0aW1lLWZpZWxkdHlwZSB2LXJlZjp0aW1lIHYtc2hvdz1oYXNUaW1lIDpkYXRhLnN5bmM9dGltZSA6cmVxdWlyZWQ9dGltZVJlcXVpcmVkPjwvdGltZS1maWVsZHR5cGU+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4taWNvbiBhZGQtdGltZVxcXCIgdi1zaG93PSFoYXNUaW1lIEBjbGljaz1hZGRUaW1lIHRhYmluZGV4PTA+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2xvY2tcXFwiPjwvc3Bhbj4gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvRGF0ZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9HcmlkRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vR3JpZEZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvR3JpZEZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwiZ3JpZC1maWVsZCBncmlkLW1vZGUte3sgKHN0YWNrZWQpID8gJ3N0YWNrZWQnIDogJ3RhYmxlJyB9fVwiPlxuXHQ8dGFibGUgdi1pZj1cImhhc0RhdGEgJiYgIXN0YWNrZWRcIiBjbGFzcz1cImdyaWQtdGFibGUgYm9yZGVyZWQtdGFibGVcIj5cblx0XHQ8dGhlYWQ+XG5cdFx0XHQ8dHI+XG5cdFx0XHRcdDx0aCB2LWZvcj1cImZpZWxkIGluIGNvbmZpZy5maWVsZHNcIiA6c3R5bGU9XCJ7IHdpZHRoOiBncmlkQ29sV2lkdGgoZmllbGQud2lkdGgpIH1cIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZmxleHlcIj5cblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImJsb2NrIGZpbGxcIj5cblx0XHRcdFx0XHRcdFx0PHRlbXBsYXRlIHYtaWY9XCJmaWVsZC5kaXNwbGF5XCI+e3sgZmllbGQuZGlzcGxheSB9fTwvdGVtcGxhdGU+XG5cdFx0XHRcdFx0XHRcdDx0ZW1wbGF0ZSB2LWlmPVwiIWZpZWxkLmRpc3BsYXlcIj57eyBmaWVsZC5uYW1lIHwgY2FwaXRhbGl6ZSB9fTwvdGVtcGxhdGU+XG5cdFx0XHRcdFx0XHRcdDxpIGNsYXNzPVwicmVxdWlyZWRcIiB2LWlmPVwiZmllbGQucmVxdWlyZWRcIj4qPC9pPlxuXHRcdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0XHRcdDxpIGNsYXNzPVwiaWNvbiBpY29uLWhlbHAtd2l0aC1jaXJjbGUgbzUgZnMtMTJcIiB2LWlmPVwiZmllbGQuaW5zdHJ1Y3Rpb25zXCIgdi10aXAgOnRpcC10ZXh0PVwiZmllbGQuaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cIj48L2k+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvdGg+XG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwicm93LWNvbnRyb2xzXCI+PC90aD5cblx0XHRcdDwvdHI+XG5cdFx0PC90aGVhZD5cblx0XHQ8dGJvZHk+XG5cdFx0XHQ8dHIgdi1mb3I9XCIocm93SW5kZXgsIHJvdykgaW4gZGF0YVwiIDpjbGFzcz1cIntleGNlc3M6IGlzRXhjZXNzaXZlKHJvd0luZGV4KX1cIj5cblx0XHRcdFx0PHRkIHYtZm9yPVwiZmllbGQgaW4gY29uZmlnLmZpZWxkc1wiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ7eyBmaWVsZC50eXBlIH19LWZpZWxkdHlwZVwiPlxuXHRcdFx0XHRcdFx0PGNvbXBvbmVudCA6aXM9XCJjb21wb25lbnROYW1lKGZpZWxkLnR5cGUpXCJcblx0XHRcdFx0XHRcdCAgICAgICAgICAgOm5hbWU9XCJuYW1lICsgJy4nICsgcm93SW5kZXggKyAnLicgKyBmaWVsZC5uYW1lXCJcblx0XHRcdFx0XHRcdCAgICAgICAgICAgOmRhdGEuc3luYz1cInJvd1tmaWVsZC5uYW1lXVwiXG5cdFx0XHRcdFx0XHQgICAgICAgICAgIDpjb25maWc9XCJmaWVsZFwiPlxuXHRcdFx0XHRcdFx0PC9jb21wb25lbnQ+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwicm93LWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLW1lbnUgbW92ZSBkcmFnLWhhbmRsZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tY3Jvc3MgZGVsZXRlXCIgdi1vbjpjbGljaz1cImRlbGV0ZVJvdyhyb3dJbmRleClcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC90ZD5cblx0XHRcdDwvdHI+XG5cdFx0PC90Ym9keT5cblx0PC90YWJsZT5cblxuXHQ8ZGl2IHYtaWY9XCJoYXNEYXRhICYmIHN0YWNrZWRcIiBjbGFzcz1cImdyaWQtc3RhY2tlZFwiPlxuXHRcdDxkaXYgY2xhc3M9XCJsaXN0LWdyb3VwXCIgdi1mb3I9XCIocm93SW5kZXgsIHJvdykgaW4gZGF0YVwiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBncm91cC1oZWFkZXIgcGwtMyBkcmFnLWhhbmRsZVwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZmxleHlcIj5cblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJmaWxsXCI+e3sgcm93SW5kZXggKyAxIH19PC9sYWJlbD5cblx0XHRcdFx0XHQ8aSBjbGFzcz1cImljb24gaWNvbi1jcm9zc1wiIHYtb246Y2xpY2s9XCJkZWxldGVSb3cocm93SW5kZXgpXCI+PC9pPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBwLTBcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cInB1Ymxpc2gtZmllbGRzXCI+XG5cdFx0XHRcdFx0PGRpdiB2LWZvcj1cImZpZWxkIGluIGNvbmZpZy5maWVsZHNcIiA6Y2xhc3M9XCJzdGFja2VkRmllbGRDbGFzc2VzKGZpZWxkKVwiPlxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJibG9ja1wiPlxuXHRcdFx0XHRcdFx0XHRcdDx0ZW1wbGF0ZSB2LWlmPVwiZmllbGQuZGlzcGxheVwiPnt7IGZpZWxkLmRpc3BsYXkgfX08L3RlbXBsYXRlPlxuXHRcdFx0XHRcdFx0XHRcdDx0ZW1wbGF0ZSB2LWlmPVwiIWZpZWxkLmRpc3BsYXlcIj57eyBmaWVsZC5uYW1lIHwgY2FwaXRhbGl6ZSB9fTwvdGVtcGxhdGU+XG5cdFx0XHRcdFx0XHRcdFx0PGkgY2xhc3M9XCJyZXF1aXJlZFwiIHYtaWY9XCJmaWVsZC5yZXF1aXJlZFwiPio8L2k+XG5cdFx0XHRcdFx0XHRcdDwvbGFiZWw+XG5cblx0XHRcdFx0XHRcdFx0PHNtYWxsIGNsYXNzPVwiaGVscC1ibG9ja1wiIHYtaWY9XCJmaWVsZC5pbnN0cnVjdGlvbnNcIiB2LWh0bWw9XCJmaWVsZC5pbnN0cnVjdGlvbnMgfCBtYXJrZG93blwiPjwvc21hbGw+XG5cblx0XHRcdFx0XHRcdFx0PGNvbXBvbmVudCA6aXM9XCJjb21wb25lbnROYW1lKGZpZWxkLnR5cGUpXCJcblx0XHRcdFx0XHRcdFx0ICAgICAgICAgICA6bmFtZT1cIm5hbWUgKyAnLicgKyByb3dJbmRleCArICcuJyArIGZpZWxkLm5hbWVcIlxuXHRcdFx0XHRcdFx0XHQgICAgICAgICAgIDpkYXRhLnN5bmM9XCJyb3dbZmllbGQubmFtZV1cIlxuXHRcdFx0XHRcdFx0XHQgICAgICAgICAgIDpjb25maWc9XCJmaWVsZFwiPlxuXHRcdFx0XHRcdFx0XHQ8L2NvbXBvbmVudD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0PC9kaXY+XG5cblx0PHRlbXBsYXRlIHYtaWY9XCJjYW5BZGRSb3dzXCI+XG5cdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYWRkLXJvd1wiIEBjbGljaz1cImFkZFJvd1wiIHYtZWw6YWRkLXJvdy1idXR0b24+XG5cdFx0XHR7eyBhZGRSb3dCdXR0b24gfX0gPGkgY2xhc3M9XCJpY29uIGljb24tcGx1cyBpY29uLXJpZ2h0XCI+PC9pPlxuXHRcdDwvYnV0dG9uPlxuXHQ8L3RlbXBsYXRlPlxuPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG52YXIgVnVlID0gcmVxdWlyZSgndnVlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJsYW5rOiB7fSxcbiAgICAgICAgICAgIHNvcnRhYmxlT3B0aW9uczoge30sXG4gICAgICAgICAgICBtaW5fcm93czogdGhpcy5jb25maWcubWluX3Jvd3MgfHwgMCxcbiAgICAgICAgICAgIG1heF9yb3dzOiB0aGlzLmNvbmZpZy5tYXhfcm93cyB8fCBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9CaW5kQ2hhbmdlV2F0Y2hlcjogZmFsc2UsXG4gICAgICAgICAgICBjaGFuZ2VXYXRjaGVyV2F0Y2hEZWVwOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoOiBudWxsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHN0YWNrZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyV2lkdGggPCA2MDApIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLm1vZGUgPT09ICdzdGFja2VkJztcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc05lc3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC4kb3B0aW9ucy5uYW1lID09PSAnZ3JpZC1maWVsZHR5cGUnO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhbkFkZFJvd3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubWF4X3Jvd3MgJiYgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRhdGEubGVuZ3RoIDwgdGhpcy5tYXhfcm93cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFJvd0J1dHRvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuYWRkX3JvdyB8fCB0cmFuc2xhdGVfY2hvaWNlKCdjcC5yb3dzJywgMSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBJbml0aWFsaXplIHdpdGggYW4gZW1wdHkgYXJyYXkgaWYgdGhlcmUncyBubyBkYXRhLlxuICAgICAgICBpZiAoISB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgYmxhbmsgcm93XG4gICAgICAgIHRoaXMucHJlcGFyZUJsYW5rUm93KCk7XG5cbiAgICAgICAgLy8gQWRkIG1pbnVtdW0gbnVtYmVyIG9mIHJvd3NcbiAgICAgICAgaWYgKHRoaXMubWluX3Jvd3MpIHtcbiAgICAgICAgICAgIHZhciByb3dzX3RvX2FkZCA9IHRoaXMubWluX3Jvd3MgLSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gcm93c190b19hZGQ7IGkrKykgdGhpcy5hZGRSb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhY2tDb250YWluZXJXaWR0aCgpO1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLmluaXRTb3J0YWJsZSgpKTtcbiAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuXG4gICAgICAgIC8vIFJlLWluaXRpYWxpemUgc29ydGFibGUgd2hlbiB0aGUgc3RhY2tpbmcgbW9kZSBjaGFuZ2VzXG4gICAgICAgIC8vIEZvciBpbnN0YW5jZSwgd2hlbiB0b2dnbGluZyBzbmVhayBwZWVrLlxuICAgICAgICB0aGlzLiR3YXRjaCgnc3RhY2tlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5pbml0U29ydGFibGUoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgcHJlcGFyZUJsYW5rUm93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBibGFuayA9IHt9O1xuICAgICAgICAgICAgdmFyIGZpZWxkcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jb25maWcuZmllbGRzKSk7XG5cbiAgICAgICAgICAgIF8uZWFjaChmaWVsZHMsIGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgYmxhbmtbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0IHx8IFN0YXRhbWljLmZpZWxkdHlwZURlZmF1bHRzW2ZpZWxkLnR5cGVdIHx8IG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5ibGFuayA9IGJsYW5rO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZFJvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNsb25lIGlzIHNvIHdlIGRvbid0IGVuZCB1cCBtb2RpZnlpbmcgYnkgcmVmZXJlbmNlLlxuICAgICAgICAgICAgdmFyIGJsYW5rID0gXy5jbG9uZSh0aGlzLmJsYW5rKTtcblxuICAgICAgICAgICAgdGhpcy5kYXRhLnB1c2goYmxhbmspO1xuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFNvcnRhYmxlKCkuc29ydGFibGUodGhpcy5nZXRTb3J0YWJsZU9wdGlvbnMoKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb2N1cyB0aGUgZmlyc3QgZmllbGQgaW4gdGhlIGxhc3Qgcm93LlxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy4kY2hpbGRyZW4ubGVuZ3RoIC0gdGhpcy4kY2hpbGRyZW4ubGVuZ3RoIC8gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLiRjaGlsZHJlbltjaGlsZF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZVJvdzogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgc3dhbCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0cmFuc2xhdGUoJ2NwLmFyZV95b3Vfc3VyZScpLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0cmFuc2xhdGUoJ2NwLnllc19pbV9zdXJlJyksXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRhdGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzRXhjZXNzaXZlOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubWF4X3Jvd3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGluZGV4ICsgMSkgPiB0aGlzLm1heF9yb3dzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFNvcnRhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0U29ydGFibGUoKS5zb3J0YWJsZSh0aGlzLmdldFNvcnRhYmxlT3B0aW9ucygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTb3J0YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhY2tlZClcbiAgICAgICAgICAgICAgICA/ICQodGhpcy4kZWwpLmZpbmQoJy5ncmlkLXN0YWNrZWQnKVxuICAgICAgICAgICAgICAgIDogJCh0aGlzLiRlbCkuZmluZCgndGJvZHknKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTb3J0YWJsZU9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gJyc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSAnc3RhY2tlZC1wbGFjZWhvbGRlcic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9ICd0YWJsZS1yb3ctcGxhY2Vob2xkZXInO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGF4aXM6IFwieVwiLFxuICAgICAgICAgICAgICAgIHJldmVydDogMTc1LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogJy5kcmFnLWhhbmRsZScsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIGZvcmNlUGxhY2Vob2xkZXJTaXplOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdWkuaXRlbS5pbmRleCgpO1xuICAgICAgICAgICAgICAgICAgICB1aS5wbGFjZWhvbGRlci5oZWlnaHQodWkuaXRlbS5oZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCAgPSB1aS5pdGVtLmluZGV4KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2FwID0gc2VsZi5kYXRhLnNwbGljZShzdGFydCwgMSlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhLnNwbGljZShlbmQsIDAsIHN3YXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzdGFja2VkRmllbGRDbGFzc2VzOiBmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBgZm9ybS1ncm91cCBwLTIgbS0wICR7ZmllbGQudHlwZX0tZmllbGR0eXBlYCxcbiAgICAgICAgICAgICAgICB0YWlsd2luZF93aWR0aF9jbGFzcyhmaWVsZC53aWR0aCksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdyaWRDb2xXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiAod2lkdGggPT09IDEwMCkgPyAnJyA6ICB3aWR0aCArICclJztcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZXBsaWNhdG9yUHJldmlld1RleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAodGhpcy4kY2hpbGRyZW4sIChmaWVsZHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGR0eXBlLmNvbmZpZy5yZXBsaWNhdG9yX3ByZXZpZXcgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBmaWVsZHR5cGUuZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0ICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgPyBmaWVsZHR5cGUuZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KClcbiAgICAgICAgICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShmaWVsZHR5cGUuZGF0YSk7XG4gICAgICAgICAgICB9KS5qb2luKCcsICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzRGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNoaWxkcmVuWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJGVscy5hZGRSb3dCdXR0b24uZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0cmFja0NvbnRhaW5lcldpZHRoKCkge1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gKCkgPT4geyB0aGlzLmNvbnRhaW5lcldpZHRoID0gdGhpcy4kZWwucGFyZW50RWxlbWVudC5jbGllbnRXaWR0aCB9O1xuICAgICAgICAgICAgY29uc3QgdGhyb3R0bGVkID0gXy50aHJvdHRsZSh1cGRhdGUsIDEwMCk7XG4gICAgICAgICAgICB1cGRhdGUoKTtcblxuICAgICAgICAgICAgdGhpcy4kcm9vdC4kb24oJ2xpdmVwcmV2aWV3Lm9wZW5lZCcsIHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLiRyb290LiRvbignbGl2ZXByZXZpZXcuY2xvc2VkJywgdGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMuJHJvb3QuJG9uKCdsaXZlcHJldmlldy5yZXNpemluZycsIHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLiRyb290LiRvbigncHVibGlzaC5zZWN0aW9uLmNoYW5nZWQnLCB0aHJvdHRsZWQpO1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhyb3R0bGVkKTtcblxuICAgICAgICAgICAgdGhpcy4kb25jZSgnaG9vazpiZWZvcmVEZXN0cm95JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aHJvdHRsZWQpXG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kb2ZmKCdsaXZlcHJldmlldy5vcGVuZWQnLCB0aHJvdHRsZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJG9mZignbGl2ZXByZXZpZXcuY2xvc2VkJywgdGhyb3R0bGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRvZmYoJ2xpdmVwcmV2aWV3LnJlc2l6aW5nJywgdGhyb3R0bGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRvZmYoJ3B1Ymxpc2guc2VjdGlvbi5jaGFuZ2VkJywgdGhyb3R0bGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbXBvbmVudE5hbWUodHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUucmVwbGFjZSgnLicsICctJykgKyAnLWZpZWxkdHlwZSc7XG4gICAgICAgIH1cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gR3JpZEZpZWxkdHlwZS52dWU/NjJkMDc4MzAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9XFxcImdyaWQtZmllbGQgZ3JpZC1tb2RlLXt7IChzdGFja2VkKSA/ICdzdGFja2VkJyA6ICd0YWJsZScgfX1cXFwiPiA8dGFibGUgdi1pZj1cXFwiaGFzRGF0YSAmJiAhc3RhY2tlZFxcXCIgY2xhc3M9XFxcImdyaWQtdGFibGUgYm9yZGVyZWQtdGFibGVcXFwiPiA8dGhlYWQ+IDx0cj4gPHRoIHYtZm9yPVxcXCJmaWVsZCBpbiBjb25maWcuZmllbGRzXFxcIiA6c3R5bGU9XFxcInsgd2lkdGg6IGdyaWRDb2xXaWR0aChmaWVsZC53aWR0aCkgfVxcXCI+IDxkaXYgY2xhc3M9ZmxleHk+IDxsYWJlbCBjbGFzcz1cXFwiYmxvY2sgZmlsbFxcXCI+IDx0ZW1wbGF0ZSB2LWlmPWZpZWxkLmRpc3BsYXk+e3sgZmllbGQuZGlzcGxheSB9fTwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSB2LWlmPSFmaWVsZC5kaXNwbGF5Pnt7IGZpZWxkLm5hbWUgfCBjYXBpdGFsaXplIH19PC90ZW1wbGF0ZT4gPGkgY2xhc3M9cmVxdWlyZWQgdi1pZj1maWVsZC5yZXF1aXJlZD4qPC9pPiA8L2xhYmVsPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWhlbHAtd2l0aC1jaXJjbGUgbzUgZnMtMTJcXFwiIHYtaWY9ZmllbGQuaW5zdHJ1Y3Rpb25zIHYtdGlwIDp0aXAtdGV4dD1cXFwiZmllbGQuaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cXFwiPjwvaT4gPC9kaXY+IDwvdGg+IDx0aCBjbGFzcz1yb3ctY29udHJvbHM+PC90aD4gPC90cj4gPC90aGVhZD4gPHRib2R5PiA8dHIgdi1mb3I9XFxcIihyb3dJbmRleCwgcm93KSBpbiBkYXRhXFxcIiA6Y2xhc3M9XFxcIntleGNlc3M6IGlzRXhjZXNzaXZlKHJvd0luZGV4KX1cXFwiPiA8dGQgdi1mb3I9XFxcImZpZWxkIGluIGNvbmZpZy5maWVsZHNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ7eyBmaWVsZC50eXBlIH19LWZpZWxkdHlwZVxcXCI+IDxjb21wb25lbnQgOmlzPWNvbXBvbmVudE5hbWUoZmllbGQudHlwZSkgOm5hbWU9XFxcIm5hbWUgKyAnLicgKyByb3dJbmRleCArICcuJyArIGZpZWxkLm5hbWVcXFwiIDpkYXRhLnN5bmM9cm93W2ZpZWxkLm5hbWVdIDpjb25maWc9ZmllbGQ+IDwvY29tcG9uZW50PiA8L2Rpdj4gPC90ZD4gPHRkIGNsYXNzPXJvdy1jb250cm9scz4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1tZW51IG1vdmUgZHJhZy1oYW5kbGVcXFwiPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jcm9zcyBkZWxldGVcXFwiIHYtb246Y2xpY2s9ZGVsZXRlUm93KHJvd0luZGV4KT48L3NwYW4+IDwvdGQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDxkaXYgdi1pZj1cXFwiaGFzRGF0YSAmJiBzdGFja2VkXFxcIiBjbGFzcz1ncmlkLXN0YWNrZWQ+IDxkaXYgY2xhc3M9bGlzdC1ncm91cCB2LWZvcj1cXFwiKHJvd0luZGV4LCByb3cpIGluIGRhdGFcXFwiPiA8ZGl2IGNsYXNzPVxcXCJsaXN0LWdyb3VwLWl0ZW0gZ3JvdXAtaGVhZGVyIHBsLTMgZHJhZy1oYW5kbGVcXFwiPiA8ZGl2IGNsYXNzPWZsZXh5PiA8bGFiZWwgY2xhc3M9ZmlsbD57eyByb3dJbmRleCArIDEgfX08L2xhYmVsPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWNyb3NzXFxcIiB2LW9uOmNsaWNrPWRlbGV0ZVJvdyhyb3dJbmRleCk+PC9pPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImxpc3QtZ3JvdXAtaXRlbSBwLTBcXFwiPiA8ZGl2IGNsYXNzPXB1Ymxpc2gtZmllbGRzPiA8ZGl2IHYtZm9yPVxcXCJmaWVsZCBpbiBjb25maWcuZmllbGRzXFxcIiA6Y2xhc3M9c3RhY2tlZEZpZWxkQ2xhc3NlcyhmaWVsZCk+IDxsYWJlbCBjbGFzcz1ibG9jaz4gPHRlbXBsYXRlIHYtaWY9ZmllbGQuZGlzcGxheT57eyBmaWVsZC5kaXNwbGF5IH19PC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHYtaWY9IWZpZWxkLmRpc3BsYXk+e3sgZmllbGQubmFtZSB8IGNhcGl0YWxpemUgfX08L3RlbXBsYXRlPiA8aSBjbGFzcz1yZXF1aXJlZCB2LWlmPWZpZWxkLnJlcXVpcmVkPio8L2k+IDwvbGFiZWw+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrIHYtaWY9ZmllbGQuaW5zdHJ1Y3Rpb25zIHYtaHRtbD1cXFwiZmllbGQuaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cXFwiPjwvc21hbGw+IDxjb21wb25lbnQgOmlzPWNvbXBvbmVudE5hbWUoZmllbGQudHlwZSkgOm5hbWU9XFxcIm5hbWUgKyAnLicgKyByb3dJbmRleCArICcuJyArIGZpZWxkLm5hbWVcXFwiIDpkYXRhLnN5bmM9cm93W2ZpZWxkLm5hbWVdIDpjb25maWc9ZmllbGQ+IDwvY29tcG9uZW50PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDx0ZW1wbGF0ZSB2LWlmPWNhbkFkZFJvd3M+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBhZGQtcm93XFxcIiBAY2xpY2s9YWRkUm93IHYtZWw6YWRkLXJvdy1idXR0b24+IHt7IGFkZFJvd0J1dHRvbiB9fSA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLXBsdXMgaWNvbi1yaWdodFxcXCI+PC9pPiA8L2J1dHRvbj4gPC90ZW1wbGF0ZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9HcmlkRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0ZpZWxkc2V0RmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vRmllbGRzZXRGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0ZpZWxkc2V0RmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwidGVtcGxhdGUtZmllbGR0eXBlLXdyYXBwZXJcIj5cblxuICAgICAgICA8ZGl2IHYtaWY9XCJsb2FkaW5nXCIgY2xhc3M9XCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IHYtaWY9XCIhbG9hZGluZ1wiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIiB2LXNob3c9XCJjcmVhdGluZ1wiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgIHYtZWw6Y3JlYXRlLWZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cIm5ld0ZpZWxkc2V0TmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgIEBrZXlkb3duLmVudGVyLnByZXZlbnQ9XCJjcmVhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICBAa2V5ZG93bi5lc2M9XCJjYW5jZWxBZGRcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWJ0blwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgQGNsaWNrLnByZXZlbnQ9XCJjcmVhdGVcIiA6ZGlzYWJsZWQ9XCJzdG9yZVBlbmRpbmdcIj57eyB0cmFuc2xhdGUoJ2NwLmNyZWF0ZScpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBAY2xpY2sucHJldmVudD1cImNhbmNlbEFkZFwiPnt7IHRyYW5zbGF0ZSgnY3AuY2FuY2VsJykgfX08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIiB2LWVsc2U+XG4gICAgICAgICAgICAgICAgPHNlbGVjdC1maWVsZHR5cGUgOm5hbWU9XCJuYW1lXCIgOmRhdGEuc3luYz1cImRhdGFcIiA6Y29uZmlnPVwic2VsZWN0Q29uZmlnXCI+PC9zZWxlY3QtZmllbGR0eXBlPlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC1idG5cIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiIEBjbGljay5wcmV2ZW50PVwiYWRkXCIgdi1pZj1cImNhbkFkZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tcGx1c1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiBAY2xpY2sucHJldmVudD1cInJlZnJlc2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWN5Y2xlXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHJlcXVpcmVkOiBCb29sZWFuLFxuICAgICAgICB1cmw6IFN0cmluZyxcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgY3JlYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgc3RvcmVQZW5kaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIG5ld0ZpZWxkc2V0TmFtZTogJycsXG4gICAgICAgICAgICBvcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGF1dG9CaW5kQ2hhbmdlV2F0Y2hlcjogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBzZWxlY3RDb25maWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuQWRkKCkge1xuICAgICAgICAgICAgcmV0dXJuIFZ1ZS5jYW4oJ3N1cGVyJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmdldEZpZWxkc2V0cygpO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgYWRkKCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLiRlbHMuY3JlYXRlRmllbGQuZm9jdXMoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuY2VsQWRkKCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5uZXdGaWVsZHNldE5hbWUgPSAnJztcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGUoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZVBlbmRpbmcpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5zdG9yZVBlbmRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdmaWVsZHNldHMvcXVpY2snKSwgeyBuYW1lOiB0aGlzLm5ld0ZpZWxkc2V0TmFtZSB9KS5zdWNjZXNzKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMubmV3RmllbGRzZXROYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVQZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxBZGQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlZnJlc2goKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5nZXRGaWVsZHNldHMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRGaWVsZHNldHMoKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gY3BfdXJsKCdmaWVsZHNldHMtanNvbicpO1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAodGhpcy51cmwpIHtcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIFVSTCBpZiB3ZSB3YW50IHRvIGdldCBhdmFpbGFibGUgZmllbGRzZXRzIGZvciBhIHBhcnRpY3VsYXIgcGFnZS5cbiAgICAgICAgICAgICAgICBwYXJhbXMudXJsID0gdGhpcy51cmw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZyAmJiAhIHRoaXMuY29uZmlnLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQgd2UgZG9uJ3QgZ2V0IGhpZGRlbiBmaWVsZHNldHMuXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBzcGVjaWZ5IGhpZGRlbjogdHJ1ZSB0byBnZXQgdGhlbS5cbiAgICAgICAgICAgICAgICBwYXJhbXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVybCArPSAnPycgKyAkLnBhcmFtKHBhcmFtcyk7XG5cbiAgICAgICAgICAgIHRoaXMuJGh0dHAuZ2V0KHVybCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIElmIGEgdmFsdWUgaXMgcmVxdWlyZWQsIGRvbid0IGFkZCBhIGJsYW5rIHJvdy5cbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9ICh0aGlzLnJlcXVpcmVkKSA/IFtdIDogW3sgdmFsdWU6IG51bGwsIHRleHQ6ICcnIH1dO1xuXG4gICAgICAgICAgICAgICAgXy5lYWNoKGRhdGEuaXRlbXMsIGZ1bmN0aW9uKGZpZWxkc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmllbGRzZXQudXVpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGZpZWxkc2V0LnRpdGxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhIHZhbHVlIGlzIHJlcXVpcmVkIGFuZCB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgYSB2YWx1ZSwgc2VsZWN0IHRoZSBmaXJzdCBvbmUuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQgJiYgIXRoaXMuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLm9wdGlvbnNbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBGaWVsZHNldEZpZWxkdHlwZS52dWU/MGNhNDk0MGIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9dGVtcGxhdGUtZmllbGR0eXBlLXdyYXBwZXI+IDxkaXYgdi1pZj1sb2FkaW5nIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19IDwvZGl2PiA8ZGl2IHYtaWY9IWxvYWRpbmc+IDxkaXYgY2xhc3M9aW5wdXQtZ3JvdXAgdi1zaG93PWNyZWF0aW5nPiA8aW5wdXQgdHlwZT10ZXh0IHYtZWw6Y3JlYXRlLWZpZWxkIGNsYXNzPWZvcm0tY29udHJvbCB2LW1vZGVsPW5ld0ZpZWxkc2V0TmFtZSBAa2V5ZG93bi5lbnRlci5wcmV2ZW50PWNyZWF0ZSBAa2V5ZG93bi5lc2M9Y2FuY2VsQWRkIC8+IDxkaXYgY2xhc3M9aW5wdXQtZ3JvdXAtYnRuPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIEBjbGljay5wcmV2ZW50PWNyZWF0ZSA6ZGlzYWJsZWQ9c3RvcmVQZW5kaW5nPnt7IHRyYW5zbGF0ZSgnY3AuY3JlYXRlJykgfX08L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBAY2xpY2sucHJldmVudD1jYW5jZWxBZGQ+e3sgdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSB9fTwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9aW5wdXQtZ3JvdXAgdi1lbHNlPiA8c2VsZWN0LWZpZWxkdHlwZSA6bmFtZT1uYW1lIDpkYXRhLnN5bmM9ZGF0YSA6Y29uZmlnPXNlbGVjdENvbmZpZz48L3NlbGVjdC1maWVsZHR5cGU+IDxzcGFuIGNsYXNzPWlucHV0LWdyb3VwLWJ0bj4gPGJ1dHRvbiBjbGFzcz1idG4gQGNsaWNrLnByZXZlbnQ9YWRkIHYtaWY9Y2FuQWRkPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLXBsdXNcXFwiPjwvc3Bhbj4gPC9idXR0b24+IDxidXR0b24gY2xhc3M9YnRuIEBjbGljay5wcmV2ZW50PXJlZnJlc2g+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY3ljbGVcXFwiPjwvc3Bhbj4gPC9idXR0b24+IDwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0ZpZWxkc2V0RmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Zvcm1GaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0Zvcm1GaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1ODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHNjcmlwdD5cbmltcG9ydCBBZGFwdHNSZWxhdGVGaWVsZHR5cGUgZnJvbSAnLi9BZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQWRhcHRzUmVsYXRlRmllbGR0eXBlXVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gRm9ybUZpZWxkdHlwZS52dWU/NGEyZjU4MzgiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9IaWRkZW5GaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9IaWRkZW5GaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0hpZGRlbkZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiA6bmFtZT1cIm5hbWVcIiB2LW1vZGVsPVwiZGF0YVwiIC8+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG1peGluczogW0ZpZWxkdHlwZV1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBIaWRkZW5GaWVsZHR5cGUudnVlPzM0ZTFhMjI4IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8aW5wdXQgdHlwZT1oaWRkZW4gOm5hbWU9bmFtZSB2LW1vZGVsPWRhdGEgLz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0hpZGRlbkZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9JbnRlZ2VyRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vSW50ZWdlckZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvSW50ZWdlckZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiA6Y2xhc3M9XCJjbGFzc2VzXCIgdi1tb2RlbD1cImRhdGFcIiB0YWJpbmRleD1cIjBcIiA6YXV0b2ZvY3VzPVwiYXV0b2ZvY3VzXCIgLz5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBwcm9wczogWydhdXRvZm9jdXMnXSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGNsYXNzZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdmb3JtLWNvbnRyb2wnO1xuICAgICAgICB9XG4gICAgfSxcblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEludGVnZXJGaWVsZHR5cGUudnVlP2MyM2JhZWU0IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8aW5wdXQgdHlwZT1udW1iZXIgOmNsYXNzPWNsYXNzZXMgdi1tb2RlbD1kYXRhIHRhYmluZGV4PTAgOmF1dG9mb2N1cz1hdXRvZm9jdXMgLz4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0ludGVnZXJGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1ODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vTGlzdEZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0xpc3RGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL0xpc3RGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA1OTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuPHVsPlxuXHQ8bGkgdi1mb3I9XCJpdGVtIGluIGRhdGFcIiB0cmFjay1ieT1cIiRpbmRleFwiIDpjbGFzcz1cInsgZWRpdGluZzogKGVkaXRpbmcgPT0gJGluZGV4KSB9XCI+XG5cdFx0PHNwYW4gdi1pZj1cImVkaXRpbmcgPT0gJGluZGV4XCI+XG5cdFx0XHQ8aW5wdXRcblx0XHRcdFx0dHlwZT1cInRleHRcIlxuXHRcdFx0XHR2LW1vZGVsPVwiaXRlbVwiXG5cdFx0XHRcdGNsYXNzPVwiZm9ybS1jb250cm9sXCJcblx0XHRcdFx0QGtleWRvd24uZW50ZXI9XCJ1cGRhdGVJdGVtKGl0ZW0sICRpbmRleCwgJGV2ZW50KVwiXG5cdFx0XHRcdEBrZXl1cC51cD1cImdvVXBcIlxuXHRcdFx0XHRAa2V5dXAuZG93bj1cImdvRG93blwiXG5cdFx0XHQvPlxuXHRcdDwvc3Bhbj5cblx0XHQ8c3BhbiB2LWlmPVwiZWRpdGluZyAhPSAkaW5kZXhcIiBAZGJsY2xpY2s9XCJlZGl0SXRlbSgkaW5kZXgsICRldmVudClcIj5cblx0XHQgICAge3sgaXRlbSB9fVxuXHRcdFx0PGkgY2xhc3M9XCJkZWxldGVcIiBAY2xpY2s9XCJkZWxldGVJdGVtKGl0ZW0pXCI+PC9pPlxuXHRcdDwvc3Bhbj5cblx0PC9saT5cblx0PGxpPlxuXHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sIG5ldy1pdGVtXCIgdi1tb2RlbD1cIm5ld0l0ZW1cIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyB0cmFuc2xhdGUoJ2NwLmFkZF9hbm90aGVyX2l0ZW0nKX19Li4uXCJcbiAgICAgICAgICAgIEBrZXlkb3duLmVudGVyLnByZXZlbnQ9XCJhZGRJdGVtXCJcbiAgICAgICAgICAgIEBibHVyPVwiYWRkSXRlbVwiXG4gICAgICAgICAgICBAa2V5dXAudXA9XCJnb1VwXCJcblx0XHQvPlxuXHQ8L2xpPlxuPC91bD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtGaWVsZHR5cGVdLFxuXG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmV3SXRlbTogJycsXG4gICAgICAgICAgICBlZGl0aW5nOiBudWxsLFxuICAgICAgICAgICAgYXV0b0JpbmRDaGFuZ2VXYXRjaGVyOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkSXRlbTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBCbGFuayBpdGVtcyBhcmUgbG9zZXJzLlxuICAgICAgICAgICAgaWYgKHRoaXMubmV3SXRlbSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEucHVzaCh0aGlzLm5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgIHRoaXMubmV3SXRlbSA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdGluZyA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBlZGl0SXRlbTogZnVuY3Rpb24oaW5kZXgsIGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSBpbmRleDtcblxuICAgICAgICAgICAgLy8gQXN5bmMgaXMgZ29vZCB0aW1lcy5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJGVsKS5maW5kKCcuZWRpdGluZyBpbnB1dCcpLmZvY3VzKCkuc2VsZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBnb1VwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVkaXRpbmcgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nID0gdGhpcy5lZGl0aW5nIC0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcy4kZWwpLmZpbmQoJy5lZGl0aW5nIGlucHV0JykuZm9jdXMoKS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnb0Rvd246IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBhdCB0aGUgbGFzdCBvbmVcbiAgICAgICAgICAgIGlmICh0aGlzLmVkaXRpbmcgPT09IHRoaXMuZGF0YS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0aW5nID0gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAkKHRoaXMuJGVsKS5maW5kKCcubmV3LWl0ZW0nKS5mb2N1cygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSB0aGlzLmVkaXRpbmcgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLiRlbCkuZmluZCgnLmVkaXRpbmcgaW5wdXQnKS5mb2N1cygpLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZUl0ZW06IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIExldCdzIHJlbW92ZSBibGFuayBpdGVtc1xuICAgICAgICAgICAgaWYgKHZhbHVlID09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLiRyZW1vdmUoaW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZWRpdGluZyA9IHRoaXMuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIEJhY2sgdG8gYWRkaW5nIG5ldyBpdGVtcy5cbiAgICAgICAgICAgICQodGhpcy4kZWwpLmZpbmQoJy5uZXctaXRlbScpLmZvY3VzKCk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVJdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuJHJlbW92ZShpdGVtKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZXBsaWNhdG9yUHJldmlld1RleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmpvaW4oJywgJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBzdGFydCA9ICcnO1xuXG4gICAgICAgIGlmICggISB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuXG4gICAgICAgICQodGhpcy4kZWwpLnNvcnRhYmxlKHtcbiAgICAgICAgICAgIGF4aXM6IFwieVwiLFxuICAgICAgICAgICAgcmV2ZXJ0OiAxNzUsXG4gICAgICAgICAgICBpdGVtczogJz4gbGk6bm90KDpsYXN0LWNoaWxkKScsXG5cbiAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gdWkuaXRlbS5pbmRleCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgICAgICAgICAgIHZhciBlbmQgID0gdWkuaXRlbS5pbmRleCgpLFxuICAgICAgICAgICAgICAgICAgICBzd2FwID0gc2VsZi5kYXRhLnNwbGljZShzdGFydCwgMSlbMF07XG5cbiAgICAgICAgICAgICAgICBzZWxmLmRhdGEuc3BsaWNlKGVuZCwgMCwgc3dhcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBMaXN0RmllbGR0eXBlLnZ1ZT8wMTZlZmMyNiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPHVsPiA8bGkgdi1mb3I9XFxcIml0ZW0gaW4gZGF0YVxcXCIgdHJhY2stYnk9JGluZGV4IDpjbGFzcz1cXFwieyBlZGl0aW5nOiAoZWRpdGluZyA9PSAkaW5kZXgpIH1cXFwiPiA8c3BhbiB2LWlmPVxcXCJlZGl0aW5nID09ICRpbmRleFxcXCI+IDxpbnB1dCB0eXBlPXRleHQgdi1tb2RlbD1pdGVtIGNsYXNzPWZvcm0tY29udHJvbCBAa2V5ZG93bi5lbnRlcj1cXFwidXBkYXRlSXRlbShpdGVtLCAkaW5kZXgsICRldmVudClcXFwiIEBrZXl1cC51cD1nb1VwIEBrZXl1cC5kb3duPWdvRG93biAvPiA8L3NwYW4+IDxzcGFuIHYtaWY9XFxcImVkaXRpbmcgIT0gJGluZGV4XFxcIiBAZGJsY2xpY2s9XFxcImVkaXRJdGVtKCRpbmRleCwgJGV2ZW50KVxcXCI+IHt7IGl0ZW0gfX0gPGkgY2xhc3M9ZGVsZXRlIEBjbGljaz1kZWxldGVJdGVtKGl0ZW0pPjwvaT4gPC9zcGFuPiA8L2xpPiA8bGk+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9XFxcImZvcm0tY29udHJvbCBuZXctaXRlbVxcXCIgdi1tb2RlbD1uZXdJdGVtIHBsYWNlaG9sZGVyPVxcXCJ7eyB0cmFuc2xhdGUoJ2NwLmFkZF9hbm90aGVyX2l0ZW0nKX19Li4uXFxcIiBAa2V5ZG93bi5lbnRlci5wcmV2ZW50PWFkZEl0ZW0gQGJsdXI9YWRkSXRlbSBAa2V5dXAudXA9Z29VcCAvPiA8L2xpPiA8L3VsPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvTGlzdEZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Mb2NhbGVTZXR0aW5nc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0xvY2FsZVNldHRpbmdzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Mb2NhbGVTZXR0aW5nc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImxvY2FsZS1zZXR0aW5ncy1maWVsZHR5cGUtd3JhcHBlclwiPlxuICAgICAgICA8Z3JpZC1maWVsZHR5cGUgOmRhdGE9XCJkYXRhXCIgOmNvbmZpZz1cImdyaWRDb25maWdcIj48L2dyaWQtZmllbGR0eXBlPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIG10LTE2XCIgdi1pZj1cInNob3VsZFNob3dJbmRleFBocFdhcm5pbmdcIj5cbiAgICAgICAgICAgIDxzbWFsbCB2LWh0bWw9XCJ0cmFuc2xhdGUoJ2NwLnNldHRpbmdzX2xvY2FsZXNfaW5kZXhfcGhwX3dhcm5pbmcnLCB7IGxvY2FsZTogZmlyc3RMb2NhbGUgfSlcIj48L3NtYWxsPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWydkYXRhJywgJ2NvbmZpZycsICduYW1lJywgJ2luZGV4UGhwV2FybmluZyddLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBzaG91bGRTaG93SW5kZXhQaHBXYXJuaW5nKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhQaHBXYXJuaW5nICYmIHRoaXMuZmlyc3RMb2NhbGUgIT09ICdlbic7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmlyc3RMb2NhbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aCA/IHRoaXMuZGF0YVswXS5sb2NhbGUgOiAnZW4nO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBncmlkQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgYWRkX3JvdzogdHJhbnNsYXRlKCdjcC5hZGRfbG9jYWxlJyksXG4gICAgICAgICAgICAgICAgZmllbGRzOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ2xvY2FsZScsIHR5cGU6ICd0ZXh0JywgZGlzcGxheTogdHJhbnNsYXRlKCdjcC5zaG9ydGhhbmQnKSwgaW5zdHJ1Y3Rpb25zOiB0cmFuc2xhdGUoJ2NwLnNob3J0aGFuZF9pbnN0cnVjdGlvbnMnKSwgd2lkdGg6ICcyMCUnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ2Z1bGwnLCB0eXBlOiAndGV4dCcsIGRpc3BsYXk6IHRyYW5zbGF0ZSgnY3AuZnVsbF9sb2NhbGUnKSwgaW5zdHJ1Y3Rpb25zOiB0cmFuc2xhdGUoJ2NwLmZ1bGxfbG9jYWxlX2luc3RydWN0aW9ucycpLCB3aWR0aDogJzIwJScgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiAnbmFtZScsIHR5cGU6ICd0ZXh0JywgZGlzcGxheTogdHJhbnNsYXRlKCdjcC5uYW1lJyksIGluc3RydWN0aW9uczogdHJhbnNsYXRlKCdjcC5sb2NhbGVfbmFtZV9pbnN0cnVjdGlvbnMnKSwgd2lkdGg6ICcyMCUnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ3VybCcsIHR5cGU6ICd0ZXh0JywgZGlzcGxheTogdHJhbnNsYXRlKCdjcC51cmwnKSwgaW5zdHJ1Y3Rpb25zOiB0cmFuc2xhdGUoJ2NwLmxvY2FsZV91cmxfaW5zdHJ1Y3Rpb25zJykgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIExvY2FsZVNldHRpbmdzRmllbGR0eXBlLnZ1ZT8xZGE4YjJlZSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1sb2NhbGUtc2V0dGluZ3MtZmllbGR0eXBlLXdyYXBwZXI+IDxncmlkLWZpZWxkdHlwZSA6ZGF0YT1kYXRhIDpjb25maWc9Z3JpZENvbmZpZz48L2dyaWQtZmllbGR0eXBlPiA8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC1kYW5nZXIgbXQtMTZcXFwiIHYtaWY9c2hvdWxkU2hvd0luZGV4UGhwV2FybmluZz4gPHNtYWxsIHYtaHRtbD1cXFwidHJhbnNsYXRlKCdjcC5zZXR0aW5nc19sb2NhbGVzX2luZGV4X3BocF93YXJuaW5nJywgeyBsb2NhbGU6IGZpcnN0TG9jYWxlIH0pXFxcIj48L3NtYWxsPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Mb2NhbGVTZXR0aW5nc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9NYXJrZG93bkZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL01hcmtkb3duRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9NYXJrZG93bkZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDU5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cIm1hcmtkb3duLWZpZWxkdHlwZS13cmFwcGVyXCIgOmNsYXNzPVwieydtYXJrZG93bi1mdWxsc2NyZWVuJzogZnVsbFNjcmVlbk1vZGV9XCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1hcmtkb3duLXRvb2xiYXIgY2xlYXJmaXhcIj5cbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIm1hcmtkb3duLW1vZGVzXCI+XG4gICAgICAgICAgICAgICAgPGxpIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IG1vZGUgPT0gJ3dyaXRlJyB9XCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cIm1vZGUgPSAnd3JpdGUnXCIgdGFiaW5kZXg9XCItMVwiPnt7IHRyYW5zbGF0ZSgnY3Aud3JpdGUnKSB9fTwvYT5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaSA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBtb2RlID09ICdwcmV2aWV3JyB9XCI+XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cIm1vZGUgPSAncHJldmlldydcIiB0YWJpbmRleD1cIi0xXCI+e3sgdHJhbnNsYXRlKCdjcC5wcmV2aWV3JykgfX08L2E+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICAgIDx1bCBjbGFzcz1cIm1hcmtkb3duLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICA8bGk+PGEgQGNsaWNrPVwiYm9sZFwiIHRhYmluZGV4PVwiLTFcIj48Yj5CPC9iPjwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDxsaT48YSBAY2xpY2s9XCJpdGFsaWNcIiB0YWJpbmRleD1cIi0xXCI+PGk+aTwvaT48L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGk+PGEgQGNsaWNrPVwiaW5zZXJ0TGluaygnJylcIiB0YWJpbmRleD1cIi0xXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWxpbmtcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPjxhIEBjbGljaz1cImluc2VydEltYWdlKCcnKVwiIHRhYmluZGV4PVwiLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24taW1hZ2VcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPjxhIEBjbGljaz1cInRvZ2dsZUZ1bGxTY3JlZW5cIiB0YWJpbmRleD1cIi0xXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvblwiIDpjbGFzcz1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgICdpY29uLXJlc2l6ZS1mdWxsLXNjcmVlbicgOiAhIGZ1bGxTY3JlZW5Nb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ljb24tcmVzaXplLTEwMCcgOiBmdWxsU2NyZWVuTW9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2E+PC9saT5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RlLXdyYXAgbW9kZS17eyBtb2RlIH19XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFya2Rvd24td3JpdGVyXCJcbiAgICAgICAgICAgICAgICAgdi1lbDp3cml0ZXJcbiAgICAgICAgICAgICAgICAgdi1zaG93PVwibW9kZSA9PSAnd3JpdGUnXCJcbiAgICAgICAgICAgICAgICAgQGRyYWdvdmVyPVwiZHJhZ2dpbmdGaWxlID0gdHJ1ZVwiXG4gICAgICAgICAgICAgICAgIEBkcmFnbGVhdmU9XCJkcmFnZ2luZ0ZpbGUgPSBmYWxzZVwiXG4gICAgICAgICAgICAgICAgIEBkcm9wPVwiZHJhZ2dpbmdGaWxlID0gZmFsc2VcIlxuICAgICAgICAgICAgICAgICBAa2V5ZG93bj1cInNob3J0Y3V0XCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdG9yXCIgdi1lbDpjb2RlbWlycm9yPjwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlbHBlcnNcIiB2LWlmPVwiY2hlYXRzaGVldCB8fCBhc3NldHNFbmFibGVkXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYXJrZG93bi1jaGVhdHNoZWV0LWhlbHBlclwiIHYtaWY9XCJjaGVhdHNoZWV0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgQGNsaWNrLnByZXZlbnQ9XCJzaG93Q2hlYXRzaGVldCA9IHRydWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjIwOFwiIGhlaWdodD1cIjEyOFwiIHZpZXdCb3g9XCIwIDAgMjA4IDEyOFwiPjxtYXNrIGlkPVwiYVwiPjxyZWN0IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBmaWxsPVwiI2ZmZlwiLz48cGF0aCBkPVwiTTMwIDk4di02OGgyMGwyMCAyNSAyMC0yNWgyMHY2OGgtMjB2LTM5bC0yMCAyNS0yMC0yNXYzOXpNMTU1IDk4bC0zMC0zM2gyMHYtMzVoMjB2MzVoMjB6XCIvPjwvbWFzaz48cmVjdCB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgcnk9XCIxNVwiIG1hc2s9XCJ1cmwoI2EpXCIvPjwvc3ZnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHRyYW5zbGF0ZSgnY3AubWFya2Rvd25fY2hlYXRzaGVldCcpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFya2Rvd24tYXNzZXQtaGVscGVyXCIgdi1pZj1cImFzc2V0c0VuYWJsZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBAY2xpY2sucHJldmVudD1cImFkZEFzc2V0XCI+PHNwYW4gY2xhc3M9XCJpY29uIGljb24taW1hZ2VcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AuYWRkX2Fzc2V0JykgfX08L2E+IChvciBkcmFnICZhbXA7IGRyb3ApXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRyYWctbm90aWZpY2F0aW9uXCIgdi1pZj1cImFzc2V0c0VuYWJsZWQgJiYgZHJhZ2dpbmdGaWxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbiBpY29uLWRvd25sb2FkXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8aDM+e3sgdHJhbnNsYXRlKCdjcC5kcm9wX3RvX3VwbG9hZCcpIH19PC9oMz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IHYtc2hvdz1cIm1vZGUgPT0gJ3ByZXZpZXcnXCIgdi1odG1sPVwiZGF0YSB8fCAnJyB8IG1hcmtkb3duXCIgY2xhc3M9XCJtYXJrZG93bi1wcmV2aWV3XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxzZWxlY3RvciB2LWlmPVwic2hvd0Fzc2V0U2VsZWN0b3JcIlxuICAgICAgICAgICAgICAgICAgOmNvbnRhaW5lcj1cImNvbnRhaW5lclwiXG4gICAgICAgICAgICAgICAgICA6Zm9sZGVyPVwiZm9sZGVyXCJcbiAgICAgICAgICAgICAgICAgIDpzZWxlY3RlZD1cInNlbGVjdGVkQXNzZXRzXCJcbiAgICAgICAgICAgICAgICAgIDpyZXN0cmljdC1uYXZpZ2F0aW9uPVwicmVzdHJpY3RBc3NldE5hdmlnYXRpb25cIlxuICAgICAgICAgICAgICAgICAgQHNlbGVjdGVkPVwiYXNzZXRzU2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgQGNsb3NlZD1cImNsb3NlQXNzZXRTZWxlY3RvclwiXG4gICAgICAgID48L3NlbGVjdG9yPlxuXG4gICAgICAgIDx1cGxvYWRlclxuICAgICAgICAgICAgdi1yZWY6dXBsb2FkZXJcbiAgICAgICAgICAgIHYtaWY9XCIhIHNob3dBc3NldFNlbGVjdG9yXCJcbiAgICAgICAgICAgIDpkb20tZWxlbWVudD1cInVwbG9hZEVsZW1lbnRcIlxuICAgICAgICAgICAgOmNvbnRhaW5lcj1cImNvbnRhaW5lclwiXG4gICAgICAgICAgICA6cGF0aD1cImZvbGRlclwiXG4gICAgICAgICAgICBAdXBsb2FkLWNvbXBsZXRlPVwidXBsb2FkQ29tcGxldGVcIj5cbiAgICAgICAgPC91cGxvYWRlcj5cblxuICAgICAgICA8bW9kYWwgOnNob3cuc3luYz1cInNob3dDaGVhdHNoZWV0XCIgY2xhc3M9XCJtYXJrZG93bi1tb2RhbFwiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9XCJoZWFkZXJcIj57eyB0cmFuc2xhdGUoJ2NwLm1hcmtkb3duX2NoZWF0c2hlZXQnKSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImJvZHlcIj5cbiAgICAgICAgICAgICAgICB7e3sgdHJhbnNsYXRlKCdtYXJrZG93bi5jaGVhdHNoZWV0JykgfX19XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L21vZGFsPlxuXG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxudmFyIENvZGVNaXJyb3IgPSByZXF1aXJlKCdjb2RlbWlycm9yJyk7XG52YXIgbWFya2VkID0gcmVxdWlyZSgnbWFya2VkJyk7XG52YXIgUGxhaW5UZXh0UmVuZGVyZXIgPSByZXF1aXJlKCdtYXJrZWQtcGxhaW50ZXh0Jyk7XG5cbnJlcXVpcmUoJ2NvZGVtaXJyb3IvYWRkb24vZWRpdC9jbG9zZWJyYWNrZXRzJyk7XG5yZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL2VkaXQvbWF0Y2hicmFja2V0cycpO1xucmVxdWlyZSgnY29kZW1pcnJvci9hZGRvbi9kaXNwbGF5L2F1dG9yZWZyZXNoJyk7XG5yZXF1aXJlKCdjb2RlbWlycm9yL21vZGUvaHRtbG1peGVkL2h0bWxtaXhlZCcpO1xucmVxdWlyZSgnY29kZW1pcnJvci9tb2RlL3htbC94bWwnKTtcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS9tYXJrZG93bi9tYXJrZG93bicpO1xucmVxdWlyZSgnY29kZW1pcnJvci9tb2RlL2dmbS9nZm0nKTtcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS9qYXZhc2NyaXB0L2phdmFzY3JpcHQnKTtcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS9jc3MvY3NzJyk7XG5yZXF1aXJlKCdjb2RlbWlycm9yL21vZGUvY2xpa2UvY2xpa2UnKTtcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS9waHAvcGhwJyk7XG5yZXF1aXJlKCdjb2RlbWlycm9yL21vZGUveWFtbC95YW1sJyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIHNlbGVjdG9yOiByZXF1aXJlKCcuLi9hc3NldHMvU2VsZWN0b3IudnVlJyksXG4gICAgICAgIFVwbG9hZGVyOiByZXF1aXJlKCcuLi9hc3NldHMvVXBsb2FkZXIudnVlJylcbiAgICB9LFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtb2RlOiAnd3JpdGUnLFxuICAgICAgICAgICAgc2VsZWN0aW9uczogbnVsbCwgICAgICAvLyBDb2RlTWlycm9yIHRleHQgc2VsZWN0aW9uc1xuICAgICAgICAgICAgc2hvd0Fzc2V0U2VsZWN0b3I6IGZhbHNlLCAgLy8gSXMgdGhlIGFzc2V0IHNlbGVjdG9yIG9wZW5lZD9cbiAgICAgICAgICAgIHNlbGVjdGVkQXNzZXRzOiBbXSwgICAgLy8gQXNzZXRzIHNlbGVjdGVkIGluIHRoZSBzZWxlY3RvclxuICAgICAgICAgICAgc2VsZWN0b3JWaWV3TW9kZTogbnVsbCxcbiAgICAgICAgICAgIGRyYWdnaW5nRmlsZTogZmFsc2UsXG4gICAgICAgICAgICBzaG93Q2hlYXRzaGVldDogZmFsc2UsXG4gICAgICAgICAgICBmdWxsU2NyZWVuTW9kZTogZmFsc2UsXG4gICAgICAgICAgICBjb2RlbWlycm9yOiBudWxsICAgICAgIC8vIFRoZSBDb2RlTWlycm9yIGluc3RhbmNlXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICB0b2dnbGVGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbFNjcmVlbk1vZGUgPSAhIHRoaXMuZnVsbFNjcmVlbk1vZGU7XG4gICAgICAgICAgICB0aGlzLiRyb290LmhpZGVPdmVyZmxvdyA9ICEgdGhpcy4kcm9vdC5oaWRlT3ZlcmZsb3c7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgdGV4dCBmb3IgYSBzZWxlY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICBSYW5nZSBzZWxlY3Rpb24gIEEgQ29kZU1pcnJvciBSYW5nZVxuICAgICAgICAgKiBAcmV0dXJuIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VGV4dDogZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgaSA9IF8uaW5kZXhPZih0aGlzLnNlbGVjdGlvbnMsIHNlbGVjdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvZGVtaXJyb3IuZ2V0U2VsZWN0aW9ucygpW2ldO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnRzIGFuIGltYWdlIGF0IHRoZSBzZWxlY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICBTdHJpbmcgdXJsICBVUkwgb2YgdGhlIGltYWdlXG4gICAgICAgICAqIEBwYXJhbSAgU3RyaW5nIGFsdCAgQWx0IHRleHRcbiAgICAgICAgICovXG4gICAgICAgIGluc2VydEltYWdlOiBmdW5jdGlvbih1cmwsIGFsdCkge1xuICAgICAgICAgICAgdmFyIGNtID0gdGhpcy5jb2RlbWlycm9yLmRvY1xuXG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gJyc7XG4gICAgICAgICAgICBpZiAoY20uc29tZXRoaW5nU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGNtLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbHQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBhbHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB1cmwgPSB1cmwgfHwgJyc7XG5cbiAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIHN0cmluZ1xuICAgICAgICAgICAgdmFyIHN0ciA9ICchWycgKyBzZWxlY3Rpb24gKyAnXSgnKyB1cmwgKycpJztcbiAgICAgICAgICAgIGNtLnJlcGxhY2VTZWxlY3Rpb24oc3RyLCAnc3RhcnQnKTtcblxuICAgICAgICAgICAgLy8gU2VsZWN0IHRoZSB0ZXh0XG4gICAgICAgICAgICB2YXIgbGluZSA9IGNtLmdldEN1cnNvcigpLmxpbmU7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBjbS5nZXRDdXJzb3IoKS5jaCArIDI7IC8vIG1vdmUgcGFzdCB0aGUgIVtcbiAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIHNlbGVjdGlvbi5sZW5ndGg7XG4gICAgICAgICAgICBjbS5zZXRTZWxlY3Rpb24oe2xpbmU6bGluZSxjaDpzdGFydH0sIHtsaW5lOmxpbmUsY2g6ZW5kfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29kZW1pcnJvci5mb2N1cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBlbmRzIGFuIGltYWdlIHRvIHRoZSBlbmQgb2YgdGhlIGRhdGFcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICBTdHJpbmcgdXJsICBVUkwgb2YgdGhlIGltYWdlXG4gICAgICAgICAqIEBwYXJhbSAgU3RyaW5nIGFsdCAgQWx0IHRleHRcbiAgICAgICAgICovXG4gICAgICAgIGFwcGVuZEltYWdlOiBmdW5jdGlvbih1cmwsIGFsdCkge1xuICAgICAgICAgICAgYWx0ID0gYWx0IHx8ICcnO1xuICAgICAgICAgICAgdGhpcy5kYXRhICs9ICdcXG5cXG4hWycrYWx0KyddKCcrdXJsKycpJztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5zZXJ0cyBhIGxpbmsgYXQgdGhlIHNlbGVjdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gIFN0cmluZyB1cmwgICBVUkwgb2YgdGhlIGxpbmtcbiAgICAgICAgICogQHBhcmFtICBTdHJpbmcgdGV4dCAgTGluayB0ZXh0XG4gICAgICAgICAqL1xuICAgICAgICBpbnNlcnRMaW5rOiBmdW5jdGlvbih1cmwsIHRleHQpIHtcbiAgICAgICAgICAgIHZhciBjbSA9IHRoaXMuY29kZW1pcnJvci5kb2NcblxuICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9ICcnO1xuICAgICAgICAgICAgaWYgKGNtLnNvbWV0aGluZ1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBjbS5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGV4dCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IHRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghIHVybCkge1xuICAgICAgICAgICAgICAgIHVybCA9IHByb21wdCgnRW50ZXIgVVJMJywgJ2h0dHA6Ly8nKTtcbiAgICAgICAgICAgICAgICBpZiAoISB1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBzdHJpbmdcbiAgICAgICAgICAgIHZhciBzdHIgPSAnWycgKyBzZWxlY3Rpb24gKyAnXSgnKyB1cmwgKycpJztcbiAgICAgICAgICAgIGNtLnJlcGxhY2VTZWxlY3Rpb24oc3RyLCAnc3RhcnQnKTtcblxuICAgICAgICAgICAgLy8gU2VsZWN0IHRoZSB0ZXh0XG4gICAgICAgICAgICB2YXIgbGluZSA9IGNtLmdldEN1cnNvcigpLmxpbmU7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBjbS5nZXRDdXJzb3IoKS5jaCArIDE7IC8vIG1vdmUgcGFzdCB0aGUgZmlyc3QgW1xuICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgc2VsZWN0aW9uLmxlbmd0aDtcbiAgICAgICAgICAgIGNtLnNldFNlbGVjdGlvbih7bGluZTpsaW5lLGNoOnN0YXJ0fSwge2xpbmU6bGluZSxjaDplbmR9KTtcblxuICAgICAgICAgICAgdGhpcy5jb2RlbWlycm9yLmZvY3VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc2VydHMgYSBsaW5rIGF0IHRoZSBlbmQgb2YgdGhlIGRhdGFcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICBTdHJpbmcgdXJsICAgVVJMIG9mIHRoZSBsaW5rXG4gICAgICAgICAqIEBwYXJhbSAgU3RyaW5nIHRleHQgIExpbmsgdGV4dFxuICAgICAgICAgKi9cbiAgICAgICAgYXBwZW5kTGluazogZnVuY3Rpb24odXJsLCB0ZXh0KSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dCB8fCAnJztcbiAgICAgICAgICAgIHRoaXMuZGF0YSArPSAnXFxuXFxuWycrdGV4dCsnXSgnK3VybCsnKSc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRvZ2dsZSB0aGUgYm9sZG5lc3Mgb24gdGhlIGN1cnJlbnQgc2VsZWN0aW9uKHMpXG4gICAgICAgICAqL1xuICAgICAgICBib2xkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciByZXBsYWNlbWVudHMgPSBbXTtcblxuICAgICAgICAgICAgXy5lYWNoKHNlbGYuc2VsZWN0aW9ucywgZnVuY3Rpb24gKHNlbGVjdGlvbiwgaSkge1xuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IChzZWxmLmlzQm9sZChzZWxlY3Rpb24pKVxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYucmVtb3ZlQm9sZChzZWxlY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5tYWtlQm9sZChzZWxlY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnRzLnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29kZW1pcnJvci5yZXBsYWNlU2VsZWN0aW9ucyhyZXBsYWNlbWVudHMsICdhcm91bmQnKTtcblxuICAgICAgICAgICAgdGhpcy5jb2RlbWlycm9yLmZvY3VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIGJvbGRcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICBSYW5nZSAgc2VsZWN0aW9uICBDb2RlTWlycm9yIHNlbGVjdGlvblxuICAgICAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgICAgICovXG4gICAgICAgIGlzQm9sZDogZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGV4dChzZWxlY3Rpb24pLm1hdGNoKC9eXFwqezJ9KC4qKVxcKnsyfSQvKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFrZSBhIHN0cmluZyBib2xkXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgUmFuZ2UgIHNlbGVjdGlvbiAgQ29kZU1pcnJvciBzZWxlY3Rpb25cbiAgICAgICAgICogQHJldHVybiBTdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIG1ha2VCb2xkOiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gJyoqJyArIHRoaXMuZ2V0VGV4dChzZWxlY3Rpb24pICsgJyoqJztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHRoZSBib2xkbmVzcyBmcm9tIGEgc3RyaW5nXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgUmFuZ2UgIHNlbGVjdGlvbiAgQ29kZU1pcnJvciBzZWxlY3Rpb25cbiAgICAgICAgICogQHJldHVybiBTdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUJvbGQ6IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy5nZXRUZXh0KHNlbGVjdGlvbik7XG5cbiAgICAgICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZygyLCB0ZXh0Lmxlbmd0aC0yKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVG9nZ2xlIHRoZSBpdGFsaWNzIG9uIHRoZSBjdXJyZW50IHNlbGVjdGlvbihzKVxuICAgICAgICAgKi9cbiAgICAgICAgaXRhbGljOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciByZXBsYWNlbWVudHMgPSBbXTtcblxuICAgICAgICAgICAgXy5lYWNoKHNlbGYuc2VsZWN0aW9ucywgZnVuY3Rpb24gKHNlbGVjdGlvbiwgaSkge1xuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IChzZWxmLmlzSXRhbGljKHNlbGVjdGlvbikpXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZi5yZW1vdmVJdGFsaWMoc2VsZWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYubWFrZUl0YWxpYyhzZWxlY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnRzLnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY29kZW1pcnJvci5yZXBsYWNlU2VsZWN0aW9ucyhyZXBsYWNlbWVudHMsICdhcm91bmQnKTtcblxuICAgICAgICAgICAgdGhpcy5jb2RlbWlycm9yLmZvY3VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIGl0YWxpY1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gIFJhbmdlICBzZWxlY3Rpb24gIENvZGVNaXJyb3Igc2VsZWN0aW9uXG4gICAgICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAgICAgKi9cbiAgICAgICAgaXNJdGFsaWM6IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRleHQoc2VsZWN0aW9uKS5tYXRjaCgvXlxcXyguKilcXF8kLyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1ha2UgYSBzdHJpbmcgaXRhbGljXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgUmFuZ2UgIHNlbGVjdGlvbiAgQ29kZU1pcnJvciBzZWxlY3Rpb25cbiAgICAgICAgICogQHJldHVybiBTdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIG1ha2VJdGFsaWM6IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAnXycgKyB0aGlzLmdldFRleHQoc2VsZWN0aW9uKSArICdfJztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHRoZSBpdGFsaWNzIGZyb20gYSBzdHJpbmdcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtICBSYW5nZSAgc2VsZWN0aW9uICBDb2RlTWlycm9yIHNlbGVjdGlvblxuICAgICAgICAgKiBAcmV0dXJuIFN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlSXRhbGljOiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuZ2V0VGV4dChzZWxlY3Rpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcoMSwgdGV4dC5sZW5ndGgtMSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wZW4gdGhlIGFzc2V0IHNlbGVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBhZGRBc3NldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBc3NldFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXhlY3V0ZSBhIGtleWJvYXJkIHNob3J0Y3V0LCB3aGVuIGFwcGxpY2FibGVcbiAgICAgICAgICovXG4gICAgICAgIHNob3J0Y3V0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZS5rZXlDb2RlO1xuICAgICAgICAgICAgdmFyIG1ldGEgPSBlLm1ldGFLZXkgPT09IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChtZXRhICYmIGtleSA9PT0gNjYpIHsgLy8gY21kK2JcbiAgICAgICAgICAgICAgICB0aGlzLmJvbGQoKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXRhICYmIGtleSA9PT0gNzMpIHsgLy8gY21kK2lcbiAgICAgICAgICAgICAgICB0aGlzLml0YWxpYygpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldGEgJiYga2V5ID09PSA3NSkgeyAvLyBjbWQra1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0TGluaygpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBhc3NldHMgYXJlIHNlbGVjdGVkIGZyb20gdGhlIG1vZGFsLCB0aGlzIGV2ZW50IGdldHMgZmlyZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAgQXJyYXkgYXNzZXRzICBBbGwgdGhlIGFzc2V0cyB0aGF0IHdlcmUgc2VsZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGFzc2V0c1NlbGVjdGVkOiBmdW5jdGlvbiAoYXNzZXRzKSB7XG4gICAgICAgICAgICAvLyBJZiBvbmUgYXNzZXQgaXMgY2hvc2VuLCBpdCdzIHNhZmUgdG8gcmVwbGFjZSB0aGUgc2VsZWN0aW9uLlxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlJ2xsIGp1c3QgdGFjayBvbiB0aGUgYXNzZXRzIHRvIHRoZSBlbmQgb2YgdGhlIHRleHQuXG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gKGFzc2V0cy5sZW5ndGggPT09IDEpID8gJ2luc2VydCcgOiAnYXBwZW5kJztcblxuICAgICAgICAgICAgdGhpcy5jbG9zZUFzc2V0U2VsZWN0b3IoKTtcblxuICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBtYWludGFpbiB0aGUgYXNzZXQgc2VsZWN0aW9uc1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFzc2V0cyA9IFtdO1xuXG4gICAgICAgICAgICB0aGlzLiRodHRwLnBvc3QoY3BfdXJsKCdhc3NldHMvZ2V0JyksIHsgYXNzZXRzIH0sIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIF8ocmVzcG9uc2UpLmVhY2goKGFzc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHQgPSBhc3NldC5hbHQgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBlbmNvZGVVUkkoYXNzZXQudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0LmlzX2ltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW21ldGhvZCsnSW1hZ2UnXSh1cmwsIGFsdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW21ldGhvZCsnTGluayddKHVybCwgYWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvc2VBc3NldFNlbGVjdG9yKCkge1xuICAgICAgICAgICAgdGhpcy5zaG93QXNzZXRTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwbG9hZENvbXBsZXRlKHVwbG9hZCwgdXBsb2Fkcykge1xuICAgICAgICAgICAgaWYgKHVwbG9hZC5pc19pbWFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0SW1hZ2UodXBsb2FkLnVybCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0TGluayh1cGxvYWQudXJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgdXBsb2FkcyBpbiB0aGUgcXVldWUsIG1vdmUgdGhlIGN1cnNvciB0byB0aGVcbiAgICAgICAgICAgIC8vIGVuZCBvZiB0aGUgZG9jdW1lbnQgc28gdGhlIHNlbGVjdGlvbiBkb2Vzbid0IGdldCByZS1yZXBsYWNlZC5cbiAgICAgICAgICAgIGlmICh1cGxvYWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvZGVtaXJyb3Iuc2V0Q3Vyc29yKHRoaXMuY29kZW1pcnJvci5saW5lQ291bnQoKSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlZCh0aGlzLmRhdGEgfHwgJycsIHsgcmVuZGVyZXI6IG5ldyBQbGFpblRleHRSZW5kZXJlciB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88XFwvP1tePl0rKD58JCkvZywgXCJcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLmNvZGVtaXJyb3IuZm9jdXMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmFja0hlaWdodFVwZGF0ZXMoKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGUgPSAoKSA9PiB7IHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpIH07XG4gICAgICAgICAgICBjb25zdCB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHVwZGF0ZSwgMTAwKTtcblxuICAgICAgICAgICAgdGhpcy4kcm9vdC4kb24oJ2xpdmVwcmV2aWV3Lm9wZW5lZCcsIHRocm90dGxlZCk7XG4gICAgICAgICAgICB0aGlzLiRyb290LiRvbignbGl2ZXByZXZpZXcuY2xvc2VkJywgdGhyb3R0bGVkKTtcbiAgICAgICAgICAgIHRoaXMuJHJvb3QuJG9uKCdsaXZlcHJldmlldy5yZXNpemluZycsIHRocm90dGxlZCk7XG5cbiAgICAgICAgICAgIHRoaXMuJG9uY2UoJ2hvb2s6YmVmb3JlRGVzdHJveScsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRvZmYoJ2xpdmVwcmV2aWV3Lm9wZW5lZCcsIHRocm90dGxlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kb2ZmKCdsaXZlcHJldmlldy5jbG9zZWQnLCB0aHJvdHRsZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJG9mZignbGl2ZXByZXZpZXcucmVzaXppbmcnLCB0aHJvdHRsZWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBhc3NldHNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5jb250YWluZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29udGFpbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5jb250YWluZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZm9sZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5mb2xkZXIgfHwgJy8nO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWF0c2hlZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnICYmIHRoaXMuY29uZmlnLmNoZWF0c2hlZXQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBsb2FkRWxlbWVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbDtcbiAgICAgICAgfSxcblxuICAgICAgICByZXN0cmljdEFzc2V0TmF2aWdhdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5yZXN0cmljdF9hc3NldHMgfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VsZi5jb2RlbWlycm9yID0gQ29kZU1pcnJvcih0aGlzLiRlbHMuY29kZW1pcnJvciwge1xuICAgICAgICAgICAgdmFsdWU6IHNlbGYuZGF0YSB8fCAnJyxcbiAgICAgICAgICAgIG1vZGU6ICdnZm0nLFxuICAgICAgICAgICAgZHJhZ0Ryb3A6IGZhbHNlLFxuICAgICAgICAgICAgbGluZVdyYXBwaW5nOiB0cnVlLFxuICAgICAgICAgICAgdmlld3BvcnRNYXJnaW46IEluZmluaXR5LFxuICAgICAgICAgICAgdGFiaW5kZXg6IDAsXG4gICAgICAgICAgICBhdXRvUmVmcmVzaDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxmLmNvZGVtaXJyb3Iub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChjbSkge1xuICAgICAgICAgICAgc2VsZi5kYXRhID0gY20uZG9jLmdldFZhbHVlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEV4cG9zZSB0aGUgYXJyYXkgb2Ygc2VsZWN0aW9ucyB0byB0aGUgVnVlIGluc3RhbmNlXG4gICAgICAgIHNlbGYuY29kZW1pcnJvci5vbignYmVmb3JlU2VsZWN0aW9uQ2hhbmdlJywgZnVuY3Rpb24gKGNtLCBvYmopIHtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0aW9ucyA9IG9iai5yYW5nZXM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBDb2RlTWlycm9yIGlmIHdlIGNoYW5nZSB0aGUgdmFsdWUgaW5kZXBlbmRlbnQgb2YgQ29kZU1pcnJvclxuICAgICAgICB0aGlzLiR3YXRjaCgnZGF0YScsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbCAhPT0gc2VsZi5jb2RlbWlycm9yLmRvYy5nZXRWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jb2RlbWlycm9yLmRvYy5zZXRWYWx1ZSh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRyYWNrSGVpZ2h0VXBkYXRlcygpO1xuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIE1hcmtkb3duRmllbGR0eXBlLnZ1ZT80NGVhMzBlNiIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIHBhaXJzOiBcIigpW117fScnXFxcIlxcXCJcIixcbiAgICB0cmlwbGVzOiBcIlwiLFxuICAgIGV4cGxvZGU6IFwiW117fVwiXG4gIH07XG5cbiAgdmFyIFBvcyA9IENvZGVNaXJyb3IuUG9zO1xuXG4gIENvZGVNaXJyb3IuZGVmaW5lT3B0aW9uKFwiYXV0b0Nsb3NlQnJhY2tldHNcIiwgZmFsc2UsIGZ1bmN0aW9uKGNtLCB2YWwsIG9sZCkge1xuICAgIGlmIChvbGQgJiYgb2xkICE9IENvZGVNaXJyb3IuSW5pdCkge1xuICAgICAgY20ucmVtb3ZlS2V5TWFwKGtleU1hcCk7XG4gICAgICBjbS5zdGF0ZS5jbG9zZUJyYWNrZXRzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZhbCkge1xuICAgICAgZW5zdXJlQm91bmQoZ2V0T3B0aW9uKHZhbCwgXCJwYWlyc1wiKSlcbiAgICAgIGNtLnN0YXRlLmNsb3NlQnJhY2tldHMgPSB2YWw7XG4gICAgICBjbS5hZGRLZXlNYXAoa2V5TWFwKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbihjb25mLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgPT0gXCJwYWlyc1wiICYmIHR5cGVvZiBjb25mID09IFwic3RyaW5nXCIpIHJldHVybiBjb25mO1xuICAgIGlmICh0eXBlb2YgY29uZiA9PSBcIm9iamVjdFwiICYmIGNvbmZbbmFtZV0gIT0gbnVsbCkgcmV0dXJuIGNvbmZbbmFtZV07XG4gICAgcmV0dXJuIGRlZmF1bHRzW25hbWVdO1xuICB9XG5cbiAgdmFyIGtleU1hcCA9IHtCYWNrc3BhY2U6IGhhbmRsZUJhY2tzcGFjZSwgRW50ZXI6IGhhbmRsZUVudGVyfTtcbiAgZnVuY3Rpb24gZW5zdXJlQm91bmQoY2hhcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2ggPSBjaGFycy5jaGFyQXQoaSksIGtleSA9IFwiJ1wiICsgY2ggKyBcIidcIlxuICAgICAgaWYgKCFrZXlNYXBba2V5XSkga2V5TWFwW2tleV0gPSBoYW5kbGVyKGNoKVxuICAgIH1cbiAgfVxuICBlbnN1cmVCb3VuZChkZWZhdWx0cy5wYWlycyArIFwiYFwiKVxuXG4gIGZ1bmN0aW9uIGhhbmRsZXIoY2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY20pIHsgcmV0dXJuIGhhbmRsZUNoYXIoY20sIGNoKTsgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbmZpZyhjbSkge1xuICAgIHZhciBkZWZsdCA9IGNtLnN0YXRlLmNsb3NlQnJhY2tldHM7XG4gICAgaWYgKCFkZWZsdCB8fCBkZWZsdC5vdmVycmlkZSkgcmV0dXJuIGRlZmx0O1xuICAgIHZhciBtb2RlID0gY20uZ2V0TW9kZUF0KGNtLmdldEN1cnNvcigpKTtcbiAgICByZXR1cm4gbW9kZS5jbG9zZUJyYWNrZXRzIHx8IGRlZmx0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQmFja3NwYWNlKGNtKSB7XG4gICAgdmFyIGNvbmYgPSBnZXRDb25maWcoY20pO1xuICAgIGlmICghY29uZiB8fCBjbS5nZXRPcHRpb24oXCJkaXNhYmxlSW5wdXRcIikpIHJldHVybiBDb2RlTWlycm9yLlBhc3M7XG5cbiAgICB2YXIgcGFpcnMgPSBnZXRPcHRpb24oY29uZiwgXCJwYWlyc1wiKTtcbiAgICB2YXIgcmFuZ2VzID0gY20ubGlzdFNlbGVjdGlvbnMoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFyYW5nZXNbaV0uZW1wdHkoKSkgcmV0dXJuIENvZGVNaXJyb3IuUGFzcztcbiAgICAgIHZhciBhcm91bmQgPSBjaGFyc0Fyb3VuZChjbSwgcmFuZ2VzW2ldLmhlYWQpO1xuICAgICAgaWYgKCFhcm91bmQgfHwgcGFpcnMuaW5kZXhPZihhcm91bmQpICUgMiAhPSAwKSByZXR1cm4gQ29kZU1pcnJvci5QYXNzO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gcmFuZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY3VyID0gcmFuZ2VzW2ldLmhlYWQ7XG4gICAgICBjbS5yZXBsYWNlUmFuZ2UoXCJcIiwgUG9zKGN1ci5saW5lLCBjdXIuY2ggLSAxKSwgUG9zKGN1ci5saW5lLCBjdXIuY2ggKyAxKSwgXCIrZGVsZXRlXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUVudGVyKGNtKSB7XG4gICAgdmFyIGNvbmYgPSBnZXRDb25maWcoY20pO1xuICAgIHZhciBleHBsb2RlID0gY29uZiAmJiBnZXRPcHRpb24oY29uZiwgXCJleHBsb2RlXCIpO1xuICAgIGlmICghZXhwbG9kZSB8fCBjbS5nZXRPcHRpb24oXCJkaXNhYmxlSW5wdXRcIikpIHJldHVybiBDb2RlTWlycm9yLlBhc3M7XG5cbiAgICB2YXIgcmFuZ2VzID0gY20ubGlzdFNlbGVjdGlvbnMoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFyYW5nZXNbaV0uZW1wdHkoKSkgcmV0dXJuIENvZGVNaXJyb3IuUGFzcztcbiAgICAgIHZhciBhcm91bmQgPSBjaGFyc0Fyb3VuZChjbSwgcmFuZ2VzW2ldLmhlYWQpO1xuICAgICAgaWYgKCFhcm91bmQgfHwgZXhwbG9kZS5pbmRleE9mKGFyb3VuZCkgJSAyICE9IDApIHJldHVybiBDb2RlTWlycm9yLlBhc3M7XG4gICAgfVxuICAgIGNtLm9wZXJhdGlvbihmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lc2VwID0gY20ubGluZVNlcGFyYXRvcigpIHx8IFwiXFxuXCI7XG4gICAgICBjbS5yZXBsYWNlU2VsZWN0aW9uKGxpbmVzZXAgKyBsaW5lc2VwLCBudWxsKTtcbiAgICAgIGNtLmV4ZWNDb21tYW5kKFwiZ29DaGFyTGVmdFwiKTtcbiAgICAgIHJhbmdlcyA9IGNtLmxpc3RTZWxlY3Rpb25zKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbGluZSA9IHJhbmdlc1tpXS5oZWFkLmxpbmU7XG4gICAgICAgIGNtLmluZGVudExpbmUobGluZSwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgIGNtLmluZGVudExpbmUobGluZSArIDEsIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udHJhY3RTZWxlY3Rpb24oc2VsKSB7XG4gICAgdmFyIGludmVydGVkID0gQ29kZU1pcnJvci5jbXBQb3Moc2VsLmFuY2hvciwgc2VsLmhlYWQpID4gMDtcbiAgICByZXR1cm4ge2FuY2hvcjogbmV3IFBvcyhzZWwuYW5jaG9yLmxpbmUsIHNlbC5hbmNob3IuY2ggKyAoaW52ZXJ0ZWQgPyAtMSA6IDEpKSxcbiAgICAgICAgICAgIGhlYWQ6IG5ldyBQb3Moc2VsLmhlYWQubGluZSwgc2VsLmhlYWQuY2ggKyAoaW52ZXJ0ZWQgPyAxIDogLTEpKX07XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDaGFyKGNtLCBjaCkge1xuICAgIHZhciBjb25mID0gZ2V0Q29uZmlnKGNtKTtcbiAgICBpZiAoIWNvbmYgfHwgY20uZ2V0T3B0aW9uKFwiZGlzYWJsZUlucHV0XCIpKSByZXR1cm4gQ29kZU1pcnJvci5QYXNzO1xuXG4gICAgdmFyIHBhaXJzID0gZ2V0T3B0aW9uKGNvbmYsIFwicGFpcnNcIik7XG4gICAgdmFyIHBvcyA9IHBhaXJzLmluZGV4T2YoY2gpO1xuICAgIGlmIChwb3MgPT0gLTEpIHJldHVybiBDb2RlTWlycm9yLlBhc3M7XG4gICAgdmFyIHRyaXBsZXMgPSBnZXRPcHRpb24oY29uZiwgXCJ0cmlwbGVzXCIpO1xuXG4gICAgdmFyIGlkZW50aWNhbCA9IHBhaXJzLmNoYXJBdChwb3MgKyAxKSA9PSBjaDtcbiAgICB2YXIgcmFuZ2VzID0gY20ubGlzdFNlbGVjdGlvbnMoKTtcbiAgICB2YXIgb3BlbmluZyA9IHBvcyAlIDIgPT0gMDtcblxuICAgIHZhciB0eXBlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmFuZ2UgPSByYW5nZXNbaV0sIGN1ciA9IHJhbmdlLmhlYWQsIGN1clR5cGU7XG4gICAgICB2YXIgbmV4dCA9IGNtLmdldFJhbmdlKGN1ciwgUG9zKGN1ci5saW5lLCBjdXIuY2ggKyAxKSk7XG4gICAgICBpZiAob3BlbmluZyAmJiAhcmFuZ2UuZW1wdHkoKSkge1xuICAgICAgICBjdXJUeXBlID0gXCJzdXJyb3VuZFwiO1xuICAgICAgfSBlbHNlIGlmICgoaWRlbnRpY2FsIHx8ICFvcGVuaW5nKSAmJiBuZXh0ID09IGNoKSB7XG4gICAgICAgIGlmIChpZGVudGljYWwgJiYgc3RyaW5nU3RhcnRzQWZ0ZXIoY20sIGN1cikpXG4gICAgICAgICAgY3VyVHlwZSA9IFwiYm90aFwiO1xuICAgICAgICBlbHNlIGlmICh0cmlwbGVzLmluZGV4T2YoY2gpID49IDAgJiYgY20uZ2V0UmFuZ2UoY3VyLCBQb3MoY3VyLmxpbmUsIGN1ci5jaCArIDMpKSA9PSBjaCArIGNoICsgY2gpXG4gICAgICAgICAgY3VyVHlwZSA9IFwic2tpcFRocmVlXCI7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjdXJUeXBlID0gXCJza2lwXCI7XG4gICAgICB9IGVsc2UgaWYgKGlkZW50aWNhbCAmJiBjdXIuY2ggPiAxICYmIHRyaXBsZXMuaW5kZXhPZihjaCkgPj0gMCAmJlxuICAgICAgICAgICAgICAgICBjbS5nZXRSYW5nZShQb3MoY3VyLmxpbmUsIGN1ci5jaCAtIDIpLCBjdXIpID09IGNoICsgY2gpIHtcbiAgICAgICAgaWYgKGN1ci5jaCA+IDIgJiYgL1xcYnN0cmluZy8udGVzdChjbS5nZXRUb2tlblR5cGVBdChQb3MoY3VyLmxpbmUsIGN1ci5jaCAtIDIpKSkpIHJldHVybiBDb2RlTWlycm9yLlBhc3M7XG4gICAgICAgIGN1clR5cGUgPSBcImFkZEZvdXJcIjtcbiAgICAgIH0gZWxzZSBpZiAoaWRlbnRpY2FsKSB7XG4gICAgICAgIHZhciBwcmV2ID0gY3VyLmNoID09IDAgPyBcIiBcIiA6IGNtLmdldFJhbmdlKFBvcyhjdXIubGluZSwgY3VyLmNoIC0gMSksIGN1cilcbiAgICAgICAgaWYgKCFDb2RlTWlycm9yLmlzV29yZENoYXIobmV4dCkgJiYgcHJldiAhPSBjaCAmJiAhQ29kZU1pcnJvci5pc1dvcmRDaGFyKHByZXYpKSBjdXJUeXBlID0gXCJib3RoXCI7XG4gICAgICAgIGVsc2UgcmV0dXJuIENvZGVNaXJyb3IuUGFzcztcbiAgICAgIH0gZWxzZSBpZiAob3BlbmluZyAmJiAoY20uZ2V0TGluZShjdXIubGluZSkubGVuZ3RoID09IGN1ci5jaCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Nsb3NpbmdCcmFja2V0KG5leHQsIHBhaXJzKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXFxzLy50ZXN0KG5leHQpKSkge1xuICAgICAgICBjdXJUeXBlID0gXCJib3RoXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ29kZU1pcnJvci5QYXNzO1xuICAgICAgfVxuICAgICAgaWYgKCF0eXBlKSB0eXBlID0gY3VyVHlwZTtcbiAgICAgIGVsc2UgaWYgKHR5cGUgIT0gY3VyVHlwZSkgcmV0dXJuIENvZGVNaXJyb3IuUGFzcztcbiAgICB9XG5cbiAgICB2YXIgbGVmdCA9IHBvcyAlIDIgPyBwYWlycy5jaGFyQXQocG9zIC0gMSkgOiBjaDtcbiAgICB2YXIgcmlnaHQgPSBwb3MgJSAyID8gY2ggOiBwYWlycy5jaGFyQXQocG9zICsgMSk7XG4gICAgY20ub3BlcmF0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHR5cGUgPT0gXCJza2lwXCIpIHtcbiAgICAgICAgY20uZXhlY0NvbW1hbmQoXCJnb0NoYXJSaWdodFwiKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcInNraXBUaHJlZVwiKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKVxuICAgICAgICAgIGNtLmV4ZWNDb21tYW5kKFwiZ29DaGFyUmlnaHRcIik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJzdXJyb3VuZFwiKSB7XG4gICAgICAgIHZhciBzZWxzID0gY20uZ2V0U2VsZWN0aW9ucygpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgc2Vsc1tpXSA9IGxlZnQgKyBzZWxzW2ldICsgcmlnaHQ7XG4gICAgICAgIGNtLnJlcGxhY2VTZWxlY3Rpb25zKHNlbHMsIFwiYXJvdW5kXCIpO1xuICAgICAgICBzZWxzID0gY20ubGlzdFNlbGVjdGlvbnMoKS5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgc2Vsc1tpXSA9IGNvbnRyYWN0U2VsZWN0aW9uKHNlbHNbaV0pO1xuICAgICAgICBjbS5zZXRTZWxlY3Rpb25zKHNlbHMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IFwiYm90aFwiKSB7XG4gICAgICAgIGNtLnJlcGxhY2VTZWxlY3Rpb24obGVmdCArIHJpZ2h0LCBudWxsKTtcbiAgICAgICAgY20udHJpZ2dlckVsZWN0cmljKGxlZnQgKyByaWdodCk7XG4gICAgICAgIGNtLmV4ZWNDb21tYW5kKFwiZ29DaGFyTGVmdFwiKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImFkZEZvdXJcIikge1xuICAgICAgICBjbS5yZXBsYWNlU2VsZWN0aW9uKGxlZnQgKyBsZWZ0ICsgbGVmdCArIGxlZnQsIFwiYmVmb3JlXCIpO1xuICAgICAgICBjbS5leGVjQ29tbWFuZChcImdvQ2hhclJpZ2h0XCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNDbG9zaW5nQnJhY2tldChjaCwgcGFpcnMpIHtcbiAgICB2YXIgcG9zID0gcGFpcnMubGFzdEluZGV4T2YoY2gpO1xuICAgIHJldHVybiBwb3MgPiAtMSAmJiBwb3MgJSAyID09IDE7XG4gIH1cblxuICBmdW5jdGlvbiBjaGFyc0Fyb3VuZChjbSwgcG9zKSB7XG4gICAgdmFyIHN0ciA9IGNtLmdldFJhbmdlKFBvcyhwb3MubGluZSwgcG9zLmNoIC0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFBvcyhwb3MubGluZSwgcG9zLmNoICsgMSkpO1xuICAgIHJldHVybiBzdHIubGVuZ3RoID09IDIgPyBzdHIgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5nU3RhcnRzQWZ0ZXIoY20sIHBvcykge1xuICAgIHZhciB0b2tlbiA9IGNtLmdldFRva2VuQXQoUG9zKHBvcy5saW5lLCBwb3MuY2ggKyAxKSlcbiAgICByZXR1cm4gL1xcYnN0cmluZy8udGVzdCh0b2tlbi50eXBlKSAmJiB0b2tlbi5zdGFydCA9PSBwb3MuY2ggJiZcbiAgICAgIChwb3MuY2ggPT0gMCB8fCAhL1xcYnN0cmluZy8udGVzdChjbS5nZXRUb2tlblR5cGVBdChwb3MpKSlcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2FkZG9uL2VkaXQvY2xvc2VicmFja2V0cy5qc1xuLy8gbW9kdWxlIGlkID0gNTk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcbiAgdmFyIGllX2x0OCA9IC9NU0lFIFxcZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJlxuICAgIChkb2N1bWVudC5kb2N1bWVudE1vZGUgPT0gbnVsbCB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCA4KTtcblxuICB2YXIgUG9zID0gQ29kZU1pcnJvci5Qb3M7XG5cbiAgdmFyIG1hdGNoaW5nID0ge1wiKFwiOiBcIik+XCIsIFwiKVwiOiBcIig8XCIsIFwiW1wiOiBcIl0+XCIsIFwiXVwiOiBcIls8XCIsIFwie1wiOiBcIn0+XCIsIFwifVwiOiBcIns8XCJ9O1xuXG4gIGZ1bmN0aW9uIGZpbmRNYXRjaGluZ0JyYWNrZXQoY20sIHdoZXJlLCBjb25maWcpIHtcbiAgICB2YXIgbGluZSA9IGNtLmdldExpbmVIYW5kbGUod2hlcmUubGluZSksIHBvcyA9IHdoZXJlLmNoIC0gMTtcbiAgICB2YXIgYWZ0ZXJDdXJzb3IgPSBjb25maWcgJiYgY29uZmlnLmFmdGVyQ3Vyc29yXG4gICAgaWYgKGFmdGVyQ3Vyc29yID09IG51bGwpXG4gICAgICBhZnRlckN1cnNvciA9IC8oXnwgKWNtLWZhdC1jdXJzb3IoJHwgKS8udGVzdChjbS5nZXRXcmFwcGVyRWxlbWVudCgpLmNsYXNzTmFtZSlcblxuICAgIC8vIEEgY3Vyc29yIGlzIGRlZmluZWQgYXMgYmV0d2VlbiB0d28gY2hhcmFjdGVycywgYnV0IGluIGluIHZpbSBjb21tYW5kIG1vZGVcbiAgICAvLyAoaS5lLiBub3QgaW5zZXJ0IG1vZGUpLCB0aGUgY3Vyc29yIGlzIHZpc3VhbGx5IHJlcHJlc2VudGVkIGFzIGFcbiAgICAvLyBoaWdobGlnaHRlZCBib3ggb24gdG9wIG9mIHRoZSAybmQgY2hhcmFjdGVyLiBPdGhlcndpc2UsIHdlIGFsbG93IG1hdGNoZXNcbiAgICAvLyBmcm9tIGJlZm9yZSBvciBhZnRlciB0aGUgY3Vyc29yLlxuICAgIHZhciBtYXRjaCA9ICghYWZ0ZXJDdXJzb3IgJiYgcG9zID49IDAgJiYgbWF0Y2hpbmdbbGluZS50ZXh0LmNoYXJBdChwb3MpXSkgfHxcbiAgICAgICAgbWF0Y2hpbmdbbGluZS50ZXh0LmNoYXJBdCgrK3BvcyldO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciBkaXIgPSBtYXRjaC5jaGFyQXQoMSkgPT0gXCI+XCIgPyAxIDogLTE7XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuc3RyaWN0ICYmIChkaXIgPiAwKSAhPSAocG9zID09IHdoZXJlLmNoKSkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHN0eWxlID0gY20uZ2V0VG9rZW5UeXBlQXQoUG9zKHdoZXJlLmxpbmUsIHBvcyArIDEpKTtcblxuICAgIHZhciBmb3VuZCA9IHNjYW5Gb3JCcmFja2V0KGNtLCBQb3Mod2hlcmUubGluZSwgcG9zICsgKGRpciA+IDAgPyAxIDogMCkpLCBkaXIsIHN0eWxlIHx8IG51bGwsIGNvbmZpZyk7XG4gICAgaWYgKGZvdW5kID09IG51bGwpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7ZnJvbTogUG9zKHdoZXJlLmxpbmUsIHBvcyksIHRvOiBmb3VuZCAmJiBmb3VuZC5wb3MsXG4gICAgICAgICAgICBtYXRjaDogZm91bmQgJiYgZm91bmQuY2ggPT0gbWF0Y2guY2hhckF0KDApLCBmb3J3YXJkOiBkaXIgPiAwfTtcbiAgfVxuXG4gIC8vIGJyYWNrZXRSZWdleCBpcyB1c2VkIHRvIHNwZWNpZnkgd2hpY2ggdHlwZSBvZiBicmFja2V0IHRvIHNjYW5cbiAgLy8gc2hvdWxkIGJlIGEgcmVnZXhwLCBlLmcuIC9bW1xcXV0vXG4gIC8vXG4gIC8vIE5vdGU6IElmIFwid2hlcmVcIiBpcyBvbiBhbiBvcGVuIGJyYWNrZXQsIHRoZW4gdGhpcyBicmFja2V0IGlzIGlnbm9yZWQuXG4gIC8vXG4gIC8vIFJldHVybnMgZmFsc2Ugd2hlbiBubyBicmFja2V0IHdhcyBmb3VuZCwgbnVsbCB3aGVuIGl0IHJlYWNoZWRcbiAgLy8gbWF4U2NhbkxpbmVzIGFuZCBnYXZlIHVwXG4gIGZ1bmN0aW9uIHNjYW5Gb3JCcmFja2V0KGNtLCB3aGVyZSwgZGlyLCBzdHlsZSwgY29uZmlnKSB7XG4gICAgdmFyIG1heFNjYW5MZW4gPSAoY29uZmlnICYmIGNvbmZpZy5tYXhTY2FuTGluZUxlbmd0aCkgfHwgMTAwMDA7XG4gICAgdmFyIG1heFNjYW5MaW5lcyA9IChjb25maWcgJiYgY29uZmlnLm1heFNjYW5MaW5lcykgfHwgMTAwMDtcblxuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIHZhciByZSA9IGNvbmZpZyAmJiBjb25maWcuYnJhY2tldFJlZ2V4ID8gY29uZmlnLmJyYWNrZXRSZWdleCA6IC9bKCl7fVtcXF1dLztcbiAgICB2YXIgbGluZUVuZCA9IGRpciA+IDAgPyBNYXRoLm1pbih3aGVyZS5saW5lICsgbWF4U2NhbkxpbmVzLCBjbS5sYXN0TGluZSgpICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1heChjbS5maXJzdExpbmUoKSAtIDEsIHdoZXJlLmxpbmUgLSBtYXhTY2FuTGluZXMpO1xuICAgIGZvciAodmFyIGxpbmVObyA9IHdoZXJlLmxpbmU7IGxpbmVObyAhPSBsaW5lRW5kOyBsaW5lTm8gKz0gZGlyKSB7XG4gICAgICB2YXIgbGluZSA9IGNtLmdldExpbmUobGluZU5vKTtcbiAgICAgIGlmICghbGluZSkgY29udGludWU7XG4gICAgICB2YXIgcG9zID0gZGlyID4gMCA/IDAgOiBsaW5lLmxlbmd0aCAtIDEsIGVuZCA9IGRpciA+IDAgPyBsaW5lLmxlbmd0aCA6IC0xO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gbWF4U2NhbkxlbikgY29udGludWU7XG4gICAgICBpZiAobGluZU5vID09IHdoZXJlLmxpbmUpIHBvcyA9IHdoZXJlLmNoIC0gKGRpciA8IDAgPyAxIDogMCk7XG4gICAgICBmb3IgKDsgcG9zICE9IGVuZDsgcG9zICs9IGRpcikge1xuICAgICAgICB2YXIgY2ggPSBsaW5lLmNoYXJBdChwb3MpO1xuICAgICAgICBpZiAocmUudGVzdChjaCkgJiYgKHN0eWxlID09PSB1bmRlZmluZWQgfHwgY20uZ2V0VG9rZW5UeXBlQXQoUG9zKGxpbmVObywgcG9zICsgMSkpID09IHN0eWxlKSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IG1hdGNoaW5nW2NoXTtcbiAgICAgICAgICBpZiAoKG1hdGNoLmNoYXJBdCgxKSA9PSBcIj5cIikgPT0gKGRpciA+IDApKSBzdGFjay5wdXNoKGNoKTtcbiAgICAgICAgICBlbHNlIGlmICghc3RhY2subGVuZ3RoKSByZXR1cm4ge3BvczogUG9zKGxpbmVObywgcG9zKSwgY2g6IGNofTtcbiAgICAgICAgICBlbHNlIHN0YWNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lTm8gLSBkaXIgPT0gKGRpciA+IDAgPyBjbS5sYXN0TGluZSgpIDogY20uZmlyc3RMaW5lKCkpID8gZmFsc2UgOiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2hCcmFja2V0cyhjbSwgYXV0b2NsZWFyLCBjb25maWcpIHtcbiAgICAvLyBEaXNhYmxlIGJyYWNlIG1hdGNoaW5nIGluIGxvbmcgbGluZXMsIHNpbmNlIGl0J2xsIGNhdXNlIGh1Z2VseSBzbG93IHVwZGF0ZXNcbiAgICB2YXIgbWF4SGlnaGxpZ2h0TGVuID0gY20uc3RhdGUubWF0Y2hCcmFja2V0cy5tYXhIaWdobGlnaHRMaW5lTGVuZ3RoIHx8IDEwMDA7XG4gICAgdmFyIG1hcmtzID0gW10sIHJhbmdlcyA9IGNtLmxpc3RTZWxlY3Rpb25zKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtYXRjaCA9IHJhbmdlc1tpXS5lbXB0eSgpICYmIGZpbmRNYXRjaGluZ0JyYWNrZXQoY20sIHJhbmdlc1tpXS5oZWFkLCBjb25maWcpO1xuICAgICAgaWYgKG1hdGNoICYmIGNtLmdldExpbmUobWF0Y2guZnJvbS5saW5lKS5sZW5ndGggPD0gbWF4SGlnaGxpZ2h0TGVuKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IG1hdGNoLm1hdGNoID8gXCJDb2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldFwiIDogXCJDb2RlTWlycm9yLW5vbm1hdGNoaW5nYnJhY2tldFwiO1xuICAgICAgICBtYXJrcy5wdXNoKGNtLm1hcmtUZXh0KG1hdGNoLmZyb20sIFBvcyhtYXRjaC5mcm9tLmxpbmUsIG1hdGNoLmZyb20uY2ggKyAxKSwge2NsYXNzTmFtZTogc3R5bGV9KSk7XG4gICAgICAgIGlmIChtYXRjaC50byAmJiBjbS5nZXRMaW5lKG1hdGNoLnRvLmxpbmUpLmxlbmd0aCA8PSBtYXhIaWdobGlnaHRMZW4pXG4gICAgICAgICAgbWFya3MucHVzaChjbS5tYXJrVGV4dChtYXRjaC50bywgUG9zKG1hdGNoLnRvLmxpbmUsIG1hdGNoLnRvLmNoICsgMSksIHtjbGFzc05hbWU6IHN0eWxlfSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXJrcy5sZW5ndGgpIHtcbiAgICAgIC8vIEtsdWRnZSB0byB3b3JrIGFyb3VuZCB0aGUgSUUgYnVnIGZyb20gaXNzdWUgIzExOTMsIHdoZXJlIHRleHRcbiAgICAgIC8vIGlucHV0IHN0b3BzIGdvaW5nIHRvIHRoZSB0ZXh0YXJlIHdoZXZlciB0aGlzIGZpcmVzLlxuICAgICAgaWYgKGllX2x0OCAmJiBjbS5zdGF0ZS5mb2N1c2VkKSBjbS5mb2N1cygpO1xuXG4gICAgICB2YXIgY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY20ub3BlcmF0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIG1hcmtzW2ldLmNsZWFyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIGlmIChhdXRvY2xlYXIpIHNldFRpbWVvdXQoY2xlYXIsIDgwMCk7XG4gICAgICBlbHNlIHJldHVybiBjbGVhcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkb01hdGNoQnJhY2tldHMoY20pIHtcbiAgICBjbS5vcGVyYXRpb24oZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY20uc3RhdGUubWF0Y2hCcmFja2V0cy5jdXJyZW50bHlIaWdobGlnaHRlZCkge1xuICAgICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzLmN1cnJlbnRseUhpZ2hsaWdodGVkKCk7XG4gICAgICAgIGNtLnN0YXRlLm1hdGNoQnJhY2tldHMuY3VycmVudGx5SGlnaGxpZ2h0ZWQgPSBudWxsO1xuICAgICAgfVxuICAgICAgY20uc3RhdGUubWF0Y2hCcmFja2V0cy5jdXJyZW50bHlIaWdobGlnaHRlZCA9IG1hdGNoQnJhY2tldHMoY20sIGZhbHNlLCBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIENvZGVNaXJyb3IuZGVmaW5lT3B0aW9uKFwibWF0Y2hCcmFja2V0c1wiLCBmYWxzZSwgZnVuY3Rpb24oY20sIHZhbCwgb2xkKSB7XG4gICAgaWYgKG9sZCAmJiBvbGQgIT0gQ29kZU1pcnJvci5Jbml0KSB7XG4gICAgICBjbS5vZmYoXCJjdXJzb3JBY3Rpdml0eVwiLCBkb01hdGNoQnJhY2tldHMpO1xuICAgICAgaWYgKGNtLnN0YXRlLm1hdGNoQnJhY2tldHMgJiYgY20uc3RhdGUubWF0Y2hCcmFja2V0cy5jdXJyZW50bHlIaWdobGlnaHRlZCkge1xuICAgICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzLmN1cnJlbnRseUhpZ2hsaWdodGVkKCk7XG4gICAgICAgIGNtLnN0YXRlLm1hdGNoQnJhY2tldHMuY3VycmVudGx5SGlnaGxpZ2h0ZWQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFsKSB7XG4gICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzID0gdHlwZW9mIHZhbCA9PSBcIm9iamVjdFwiID8gdmFsIDoge307XG4gICAgICBjbS5vbihcImN1cnNvckFjdGl2aXR5XCIsIGRvTWF0Y2hCcmFja2V0cyk7XG4gICAgfVxuICB9KTtcblxuICBDb2RlTWlycm9yLmRlZmluZUV4dGVuc2lvbihcIm1hdGNoQnJhY2tldHNcIiwgZnVuY3Rpb24oKSB7bWF0Y2hCcmFja2V0cyh0aGlzLCB0cnVlKTt9KTtcbiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oXCJmaW5kTWF0Y2hpbmdCcmFja2V0XCIsIGZ1bmN0aW9uKHBvcywgY29uZmlnLCBvbGRDb25maWcpe1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGtsdWRnZVxuICAgIGlmIChvbGRDb25maWcgfHwgdHlwZW9mIGNvbmZpZyA9PSBcImJvb2xlYW5cIikge1xuICAgICAgaWYgKCFvbGRDb25maWcpIHtcbiAgICAgICAgY29uZmlnID0gY29uZmlnID8ge3N0cmljdDogdHJ1ZX0gOiBudWxsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbGRDb25maWcuc3RyaWN0ID0gY29uZmlnXG4gICAgICAgIGNvbmZpZyA9IG9sZENvbmZpZ1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmluZE1hdGNoaW5nQnJhY2tldCh0aGlzLCBwb3MsIGNvbmZpZylcbiAgfSk7XG4gIENvZGVNaXJyb3IuZGVmaW5lRXh0ZW5zaW9uKFwic2NhbkZvckJyYWNrZXRcIiwgZnVuY3Rpb24ocG9zLCBkaXIsIHN0eWxlLCBjb25maWcpe1xuICAgIHJldHVybiBzY2FuRm9yQnJhY2tldCh0aGlzLCBwb3MsIGRpciwgc3R5bGUsIGNvbmZpZyk7XG4gIH0pO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2FkZG9uL2VkaXQvbWF0Y2hicmFja2V0cy5qc1xuLy8gbW9kdWxlIGlkID0gNTk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSlcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCJdLCBtb2QpXG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcilcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcbiAgXCJ1c2Ugc3RyaWN0XCJcblxuICBDb2RlTWlycm9yLmRlZmluZU9wdGlvbihcImF1dG9SZWZyZXNoXCIsIGZhbHNlLCBmdW5jdGlvbihjbSwgdmFsKSB7XG4gICAgaWYgKGNtLnN0YXRlLmF1dG9SZWZyZXNoKSB7XG4gICAgICBzdG9wTGlzdGVuaW5nKGNtLCBjbS5zdGF0ZS5hdXRvUmVmcmVzaClcbiAgICAgIGNtLnN0YXRlLmF1dG9SZWZyZXNoID0gbnVsbFxuICAgIH1cbiAgICBpZiAodmFsICYmIGNtLmRpc3BsYXkud3JhcHBlci5vZmZzZXRIZWlnaHQgPT0gMClcbiAgICAgIHN0YXJ0TGlzdGVuaW5nKGNtLCBjbS5zdGF0ZS5hdXRvUmVmcmVzaCA9IHtkZWxheTogdmFsLmRlbGF5IHx8IDI1MH0pXG4gIH0pXG5cbiAgZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmcoY20sIHN0YXRlKSB7XG4gICAgZnVuY3Rpb24gY2hlY2soKSB7XG4gICAgICBpZiAoY20uZGlzcGxheS53cmFwcGVyLm9mZnNldEhlaWdodCkge1xuICAgICAgICBzdG9wTGlzdGVuaW5nKGNtLCBzdGF0ZSlcbiAgICAgICAgaWYgKGNtLmRpc3BsYXkubGFzdFdyYXBIZWlnaHQgIT0gY20uZGlzcGxheS53cmFwcGVyLmNsaWVudEhlaWdodClcbiAgICAgICAgICBjbS5yZWZyZXNoKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGNoZWNrLCBzdGF0ZS5kZWxheSlcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUudGltZW91dCA9IHNldFRpbWVvdXQoY2hlY2ssIHN0YXRlLmRlbGF5KVxuICAgIHN0YXRlLmh1cnJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhdGUudGltZW91dClcbiAgICAgIHN0YXRlLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGNoZWNrLCA1MClcbiAgICB9XG4gICAgQ29kZU1pcnJvci5vbih3aW5kb3csIFwibW91c2V1cFwiLCBzdGF0ZS5odXJyeSlcbiAgICBDb2RlTWlycm9yLm9uKHdpbmRvdywgXCJrZXl1cFwiLCBzdGF0ZS5odXJyeSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmcoX2NtLCBzdGF0ZSkge1xuICAgIGNsZWFyVGltZW91dChzdGF0ZS50aW1lb3V0KVxuICAgIENvZGVNaXJyb3Iub2ZmKHdpbmRvdywgXCJtb3VzZXVwXCIsIHN0YXRlLmh1cnJ5KVxuICAgIENvZGVNaXJyb3Iub2ZmKHdpbmRvdywgXCJrZXl1cFwiLCBzdGF0ZS5odXJyeSlcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2FkZG9uL2Rpc3BsYXkvYXV0b3JlZnJlc2guanNcbi8vIG1vZHVsZSBpZCA9IDYwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb2RlTWlycm9yLCBjb3B5cmlnaHQgKGMpIGJ5IE1hcmlqbiBIYXZlcmJla2UgYW5kIG90aGVyc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHA6Ly9jb2RlbWlycm9yLm5ldC9MSUNFTlNFXG5cbihmdW5jdGlvbihtb2QpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PSBcIm9iamVjdFwiKSAvLyBDb21tb25KU1xuICAgIG1vZChyZXF1aXJlKFwiLi4vbGliL2NvZGVtaXJyb3JcIikpO1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSAvLyBBTURcbiAgICBkZWZpbmUoW1wiLi4vbGliL2NvZGVtaXJyb3JcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIENvZGVNaXJyb3IubW9kZUluZm8gPSBbXG4gICAge25hbWU6IFwiQVBMXCIsIG1pbWU6IFwidGV4dC9hcGxcIiwgbW9kZTogXCJhcGxcIiwgZXh0OiBbXCJkeWFsb2dcIiwgXCJhcGxcIl19LFxuICAgIHtuYW1lOiBcIlBHUFwiLCBtaW1lczogW1wiYXBwbGljYXRpb24vcGdwXCIsIFwiYXBwbGljYXRpb24vcGdwLWVuY3J5cHRlZFwiLCBcImFwcGxpY2F0aW9uL3BncC1rZXlzXCIsIFwiYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZVwiXSwgbW9kZTogXCJhc2NpaWFybW9yXCIsIGV4dDogW1wiYXNjXCIsIFwicGdwXCIsIFwic2lnXCJdfSxcbiAgICB7bmFtZTogXCJBU04uMVwiLCBtaW1lOiBcInRleHQveC10dGNuLWFzblwiLCBtb2RlOiBcImFzbi4xXCIsIGV4dDogW1wiYXNuXCIsIFwiYXNuMVwiXX0sXG4gICAge25hbWU6IFwiQXN0ZXJpc2tcIiwgbWltZTogXCJ0ZXh0L3gtYXN0ZXJpc2tcIiwgbW9kZTogXCJhc3Rlcmlza1wiLCBmaWxlOiAvXmV4dGVuc2lvbnNcXC5jb25mJC9pfSxcbiAgICB7bmFtZTogXCJCcmFpbmZ1Y2tcIiwgbWltZTogXCJ0ZXh0L3gtYnJhaW5mdWNrXCIsIG1vZGU6IFwiYnJhaW5mdWNrXCIsIGV4dDogW1wiYlwiLCBcImJmXCJdfSxcbiAgICB7bmFtZTogXCJDXCIsIG1pbWU6IFwidGV4dC94LWNzcmNcIiwgbW9kZTogXCJjbGlrZVwiLCBleHQ6IFtcImNcIiwgXCJoXCIsIFwiaW5vXCJdfSxcbiAgICB7bmFtZTogXCJDKytcIiwgbWltZTogXCJ0ZXh0L3gtYysrc3JjXCIsIG1vZGU6IFwiY2xpa2VcIiwgZXh0OiBbXCJjcHBcIiwgXCJjKytcIiwgXCJjY1wiLCBcImN4eFwiLCBcImhwcFwiLCBcImgrK1wiLCBcImhoXCIsIFwiaHh4XCJdLCBhbGlhczogW1wiY3BwXCJdfSxcbiAgICB7bmFtZTogXCJDb2JvbFwiLCBtaW1lOiBcInRleHQveC1jb2JvbFwiLCBtb2RlOiBcImNvYm9sXCIsIGV4dDogW1wiY29iXCIsIFwiY3B5XCJdfSxcbiAgICB7bmFtZTogXCJDI1wiLCBtaW1lOiBcInRleHQveC1jc2hhcnBcIiwgbW9kZTogXCJjbGlrZVwiLCBleHQ6IFtcImNzXCJdLCBhbGlhczogW1wiY3NoYXJwXCJdfSxcbiAgICB7bmFtZTogXCJDbG9qdXJlXCIsIG1pbWU6IFwidGV4dC94LWNsb2p1cmVcIiwgbW9kZTogXCJjbG9qdXJlXCIsIGV4dDogW1wiY2xqXCIsIFwiY2xqY1wiLCBcImNsanhcIl19LFxuICAgIHtuYW1lOiBcIkNsb2p1cmVTY3JpcHRcIiwgbWltZTogXCJ0ZXh0L3gtY2xvanVyZXNjcmlwdFwiLCBtb2RlOiBcImNsb2p1cmVcIiwgZXh0OiBbXCJjbGpzXCJdfSxcbiAgICB7bmFtZTogXCJDbG9zdXJlIFN0eWxlc2hlZXRzIChHU1MpXCIsIG1pbWU6IFwidGV4dC94LWdzc1wiLCBtb2RlOiBcImNzc1wiLCBleHQ6IFtcImdzc1wiXX0sXG4gICAge25hbWU6IFwiQ01ha2VcIiwgbWltZTogXCJ0ZXh0L3gtY21ha2VcIiwgbW9kZTogXCJjbWFrZVwiLCBleHQ6IFtcImNtYWtlXCIsIFwiY21ha2UuaW5cIl0sIGZpbGU6IC9eQ01ha2VMaXN0cy50eHQkL30sXG4gICAge25hbWU6IFwiQ29mZmVlU2NyaXB0XCIsIG1pbWVzOiBbXCJhcHBsaWNhdGlvbi92bmQuY29mZmVlc2NyaXB0XCIsIFwidGV4dC9jb2ZmZWVzY3JpcHRcIiwgXCJ0ZXh0L3gtY29mZmVlc2NyaXB0XCJdLCBtb2RlOiBcImNvZmZlZXNjcmlwdFwiLCBleHQ6IFtcImNvZmZlZVwiXSwgYWxpYXM6IFtcImNvZmZlZVwiLCBcImNvZmZlZS1zY3JpcHRcIl19LFxuICAgIHtuYW1lOiBcIkNvbW1vbiBMaXNwXCIsIG1pbWU6IFwidGV4dC94LWNvbW1vbi1saXNwXCIsIG1vZGU6IFwiY29tbW9ubGlzcFwiLCBleHQ6IFtcImNsXCIsIFwibGlzcFwiLCBcImVsXCJdLCBhbGlhczogW1wibGlzcFwiXX0sXG4gICAge25hbWU6IFwiQ3lwaGVyXCIsIG1pbWU6IFwiYXBwbGljYXRpb24veC1jeXBoZXItcXVlcnlcIiwgbW9kZTogXCJjeXBoZXJcIiwgZXh0OiBbXCJjeXBcIiwgXCJjeXBoZXJcIl19LFxuICAgIHtuYW1lOiBcIkN5dGhvblwiLCBtaW1lOiBcInRleHQveC1jeXRob25cIiwgbW9kZTogXCJweXRob25cIiwgZXh0OiBbXCJweXhcIiwgXCJweGRcIiwgXCJweGlcIl19LFxuICAgIHtuYW1lOiBcIkNyeXN0YWxcIiwgbWltZTogXCJ0ZXh0L3gtY3J5c3RhbFwiLCBtb2RlOiBcImNyeXN0YWxcIiwgZXh0OiBbXCJjclwiXX0sXG4gICAge25hbWU6IFwiQ1NTXCIsIG1pbWU6IFwidGV4dC9jc3NcIiwgbW9kZTogXCJjc3NcIiwgZXh0OiBbXCJjc3NcIl19LFxuICAgIHtuYW1lOiBcIkNRTFwiLCBtaW1lOiBcInRleHQveC1jYXNzYW5kcmFcIiwgbW9kZTogXCJzcWxcIiwgZXh0OiBbXCJjcWxcIl19LFxuICAgIHtuYW1lOiBcIkRcIiwgbWltZTogXCJ0ZXh0L3gtZFwiLCBtb2RlOiBcImRcIiwgZXh0OiBbXCJkXCJdfSxcbiAgICB7bmFtZTogXCJEYXJ0XCIsIG1pbWVzOiBbXCJhcHBsaWNhdGlvbi9kYXJ0XCIsIFwidGV4dC94LWRhcnRcIl0sIG1vZGU6IFwiZGFydFwiLCBleHQ6IFtcImRhcnRcIl19LFxuICAgIHtuYW1lOiBcImRpZmZcIiwgbWltZTogXCJ0ZXh0L3gtZGlmZlwiLCBtb2RlOiBcImRpZmZcIiwgZXh0OiBbXCJkaWZmXCIsIFwicGF0Y2hcIl19LFxuICAgIHtuYW1lOiBcIkRqYW5nb1wiLCBtaW1lOiBcInRleHQveC1kamFuZ29cIiwgbW9kZTogXCJkamFuZ29cIn0sXG4gICAge25hbWU6IFwiRG9ja2VyZmlsZVwiLCBtaW1lOiBcInRleHQveC1kb2NrZXJmaWxlXCIsIG1vZGU6IFwiZG9ja2VyZmlsZVwiLCBmaWxlOiAvXkRvY2tlcmZpbGUkL30sXG4gICAge25hbWU6IFwiRFREXCIsIG1pbWU6IFwiYXBwbGljYXRpb24veG1sLWR0ZFwiLCBtb2RlOiBcImR0ZFwiLCBleHQ6IFtcImR0ZFwiXX0sXG4gICAge25hbWU6IFwiRHlsYW5cIiwgbWltZTogXCJ0ZXh0L3gtZHlsYW5cIiwgbW9kZTogXCJkeWxhblwiLCBleHQ6IFtcImR5bGFuXCIsIFwiZHlsXCIsIFwiaW50clwiXX0sXG4gICAge25hbWU6IFwiRUJORlwiLCBtaW1lOiBcInRleHQveC1lYm5mXCIsIG1vZGU6IFwiZWJuZlwifSxcbiAgICB7bmFtZTogXCJFQ0xcIiwgbWltZTogXCJ0ZXh0L3gtZWNsXCIsIG1vZGU6IFwiZWNsXCIsIGV4dDogW1wiZWNsXCJdfSxcbiAgICB7bmFtZTogXCJlZG5cIiwgbWltZTogXCJhcHBsaWNhdGlvbi9lZG5cIiwgbW9kZTogXCJjbG9qdXJlXCIsIGV4dDogW1wiZWRuXCJdfSxcbiAgICB7bmFtZTogXCJFaWZmZWxcIiwgbWltZTogXCJ0ZXh0L3gtZWlmZmVsXCIsIG1vZGU6IFwiZWlmZmVsXCIsIGV4dDogW1wiZVwiXX0sXG4gICAge25hbWU6IFwiRWxtXCIsIG1pbWU6IFwidGV4dC94LWVsbVwiLCBtb2RlOiBcImVsbVwiLCBleHQ6IFtcImVsbVwiXX0sXG4gICAge25hbWU6IFwiRW1iZWRkZWQgSmF2YXNjcmlwdFwiLCBtaW1lOiBcImFwcGxpY2F0aW9uL3gtZWpzXCIsIG1vZGU6IFwiaHRtbGVtYmVkZGVkXCIsIGV4dDogW1wiZWpzXCJdfSxcbiAgICB7bmFtZTogXCJFbWJlZGRlZCBSdWJ5XCIsIG1pbWU6IFwiYXBwbGljYXRpb24veC1lcmJcIiwgbW9kZTogXCJodG1sZW1iZWRkZWRcIiwgZXh0OiBbXCJlcmJcIl19LFxuICAgIHtuYW1lOiBcIkVybGFuZ1wiLCBtaW1lOiBcInRleHQveC1lcmxhbmdcIiwgbW9kZTogXCJlcmxhbmdcIiwgZXh0OiBbXCJlcmxcIl19LFxuICAgIHtuYW1lOiBcIkVzcGVyXCIsIG1pbWU6IFwidGV4dC94LWVzcGVyXCIsIG1vZGU6IFwic3FsXCJ9LFxuICAgIHtuYW1lOiBcIkZhY3RvclwiLCBtaW1lOiBcInRleHQveC1mYWN0b3JcIiwgbW9kZTogXCJmYWN0b3JcIiwgZXh0OiBbXCJmYWN0b3JcIl19LFxuICAgIHtuYW1lOiBcIkZDTFwiLCBtaW1lOiBcInRleHQveC1mY2xcIiwgbW9kZTogXCJmY2xcIn0sXG4gICAge25hbWU6IFwiRm9ydGhcIiwgbWltZTogXCJ0ZXh0L3gtZm9ydGhcIiwgbW9kZTogXCJmb3J0aFwiLCBleHQ6IFtcImZvcnRoXCIsIFwiZnRoXCIsIFwiNHRoXCJdfSxcbiAgICB7bmFtZTogXCJGb3J0cmFuXCIsIG1pbWU6IFwidGV4dC94LWZvcnRyYW5cIiwgbW9kZTogXCJmb3J0cmFuXCIsIGV4dDogW1wiZlwiLCBcImZvclwiLCBcImY3N1wiLCBcImY5MFwiXX0sXG4gICAge25hbWU6IFwiRiNcIiwgbWltZTogXCJ0ZXh0L3gtZnNoYXJwXCIsIG1vZGU6IFwibWxsaWtlXCIsIGV4dDogW1wiZnNcIl0sIGFsaWFzOiBbXCJmc2hhcnBcIl19LFxuICAgIHtuYW1lOiBcIkdhc1wiLCBtaW1lOiBcInRleHQveC1nYXNcIiwgbW9kZTogXCJnYXNcIiwgZXh0OiBbXCJzXCJdfSxcbiAgICB7bmFtZTogXCJHaGVya2luXCIsIG1pbWU6IFwidGV4dC94LWZlYXR1cmVcIiwgbW9kZTogXCJnaGVya2luXCIsIGV4dDogW1wiZmVhdHVyZVwiXX0sXG4gICAge25hbWU6IFwiR2l0SHViIEZsYXZvcmVkIE1hcmtkb3duXCIsIG1pbWU6IFwidGV4dC94LWdmbVwiLCBtb2RlOiBcImdmbVwiLCBmaWxlOiAvXihyZWFkbWV8Y29udHJpYnV0aW5nfGhpc3RvcnkpLm1kJC9pfSxcbiAgICB7bmFtZTogXCJHb1wiLCBtaW1lOiBcInRleHQveC1nb1wiLCBtb2RlOiBcImdvXCIsIGV4dDogW1wiZ29cIl19LFxuICAgIHtuYW1lOiBcIkdyb292eVwiLCBtaW1lOiBcInRleHQveC1ncm9vdnlcIiwgbW9kZTogXCJncm9vdnlcIiwgZXh0OiBbXCJncm9vdnlcIiwgXCJncmFkbGVcIl0sIGZpbGU6IC9eSmVua2luc2ZpbGUkL30sXG4gICAge25hbWU6IFwiSEFNTFwiLCBtaW1lOiBcInRleHQveC1oYW1sXCIsIG1vZGU6IFwiaGFtbFwiLCBleHQ6IFtcImhhbWxcIl19LFxuICAgIHtuYW1lOiBcIkhhc2tlbGxcIiwgbWltZTogXCJ0ZXh0L3gtaGFza2VsbFwiLCBtb2RlOiBcImhhc2tlbGxcIiwgZXh0OiBbXCJoc1wiXX0sXG4gICAge25hbWU6IFwiSGFza2VsbCAoTGl0ZXJhdGUpXCIsIG1pbWU6IFwidGV4dC94LWxpdGVyYXRlLWhhc2tlbGxcIiwgbW9kZTogXCJoYXNrZWxsLWxpdGVyYXRlXCIsIGV4dDogW1wibGhzXCJdfSxcbiAgICB7bmFtZTogXCJIYXhlXCIsIG1pbWU6IFwidGV4dC94LWhheGVcIiwgbW9kZTogXCJoYXhlXCIsIGV4dDogW1wiaHhcIl19LFxuICAgIHtuYW1lOiBcIkhYTUxcIiwgbWltZTogXCJ0ZXh0L3gtaHhtbFwiLCBtb2RlOiBcImhheGVcIiwgZXh0OiBbXCJoeG1sXCJdfSxcbiAgICB7bmFtZTogXCJBU1AuTkVUXCIsIG1pbWU6IFwiYXBwbGljYXRpb24veC1hc3B4XCIsIG1vZGU6IFwiaHRtbGVtYmVkZGVkXCIsIGV4dDogW1wiYXNweFwiXSwgYWxpYXM6IFtcImFzcFwiLCBcImFzcHhcIl19LFxuICAgIHtuYW1lOiBcIkhUTUxcIiwgbWltZTogXCJ0ZXh0L2h0bWxcIiwgbW9kZTogXCJodG1sbWl4ZWRcIiwgZXh0OiBbXCJodG1sXCIsIFwiaHRtXCIsIFwiaGFuZGxlYmFyc1wiLCBcImhic1wiXSwgYWxpYXM6IFtcInhodG1sXCJdfSxcbiAgICB7bmFtZTogXCJIVFRQXCIsIG1pbWU6IFwibWVzc2FnZS9odHRwXCIsIG1vZGU6IFwiaHR0cFwifSxcbiAgICB7bmFtZTogXCJJRExcIiwgbWltZTogXCJ0ZXh0L3gtaWRsXCIsIG1vZGU6IFwiaWRsXCIsIGV4dDogW1wicHJvXCJdfSxcbiAgICB7bmFtZTogXCJQdWdcIiwgbWltZTogXCJ0ZXh0L3gtcHVnXCIsIG1vZGU6IFwicHVnXCIsIGV4dDogW1wiamFkZVwiLCBcInB1Z1wiXSwgYWxpYXM6IFtcImphZGVcIl19LFxuICAgIHtuYW1lOiBcIkphdmFcIiwgbWltZTogXCJ0ZXh0L3gtamF2YVwiLCBtb2RlOiBcImNsaWtlXCIsIGV4dDogW1wiamF2YVwiXX0sXG4gICAge25hbWU6IFwiSmF2YSBTZXJ2ZXIgUGFnZXNcIiwgbWltZTogXCJhcHBsaWNhdGlvbi94LWpzcFwiLCBtb2RlOiBcImh0bWxlbWJlZGRlZFwiLCBleHQ6IFtcImpzcFwiXSwgYWxpYXM6IFtcImpzcFwiXX0sXG4gICAge25hbWU6IFwiSmF2YVNjcmlwdFwiLCBtaW1lczogW1widGV4dC9qYXZhc2NyaXB0XCIsIFwidGV4dC9lY21hc2NyaXB0XCIsIFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiLCBcImFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdFwiLCBcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIl0sXG4gICAgIG1vZGU6IFwiamF2YXNjcmlwdFwiLCBleHQ6IFtcImpzXCJdLCBhbGlhczogW1wiZWNtYXNjcmlwdFwiLCBcImpzXCIsIFwibm9kZVwiXX0sXG4gICAge25hbWU6IFwiSlNPTlwiLCBtaW1lczogW1wiYXBwbGljYXRpb24vanNvblwiLCBcImFwcGxpY2F0aW9uL3gtanNvblwiXSwgbW9kZTogXCJqYXZhc2NyaXB0XCIsIGV4dDogW1wianNvblwiLCBcIm1hcFwiXSwgYWxpYXM6IFtcImpzb241XCJdfSxcbiAgICB7bmFtZTogXCJKU09OLUxEXCIsIG1pbWU6IFwiYXBwbGljYXRpb24vbGQranNvblwiLCBtb2RlOiBcImphdmFzY3JpcHRcIiwgZXh0OiBbXCJqc29ubGRcIl0sIGFsaWFzOiBbXCJqc29ubGRcIl19LFxuICAgIHtuYW1lOiBcIkpTWFwiLCBtaW1lOiBcInRleHQvanN4XCIsIG1vZGU6IFwianN4XCIsIGV4dDogW1wianN4XCJdfSxcbiAgICB7bmFtZTogXCJKaW5qYTJcIiwgbWltZTogXCJudWxsXCIsIG1vZGU6IFwiamluamEyXCJ9LFxuICAgIHtuYW1lOiBcIkp1bGlhXCIsIG1pbWU6IFwidGV4dC94LWp1bGlhXCIsIG1vZGU6IFwianVsaWFcIiwgZXh0OiBbXCJqbFwiXX0sXG4gICAge25hbWU6IFwiS290bGluXCIsIG1pbWU6IFwidGV4dC94LWtvdGxpblwiLCBtb2RlOiBcImNsaWtlXCIsIGV4dDogW1wia3RcIl19LFxuICAgIHtuYW1lOiBcIkxFU1NcIiwgbWltZTogXCJ0ZXh0L3gtbGVzc1wiLCBtb2RlOiBcImNzc1wiLCBleHQ6IFtcImxlc3NcIl19LFxuICAgIHtuYW1lOiBcIkxpdmVTY3JpcHRcIiwgbWltZTogXCJ0ZXh0L3gtbGl2ZXNjcmlwdFwiLCBtb2RlOiBcImxpdmVzY3JpcHRcIiwgZXh0OiBbXCJsc1wiXSwgYWxpYXM6IFtcImxzXCJdfSxcbiAgICB7bmFtZTogXCJMdWFcIiwgbWltZTogXCJ0ZXh0L3gtbHVhXCIsIG1vZGU6IFwibHVhXCIsIGV4dDogW1wibHVhXCJdfSxcbiAgICB7bmFtZTogXCJNYXJrZG93blwiLCBtaW1lOiBcInRleHQveC1tYXJrZG93blwiLCBtb2RlOiBcIm1hcmtkb3duXCIsIGV4dDogW1wibWFya2Rvd25cIiwgXCJtZFwiLCBcIm1rZFwiXX0sXG4gICAge25hbWU6IFwibUlSQ1wiLCBtaW1lOiBcInRleHQvbWlyY1wiLCBtb2RlOiBcIm1pcmNcIn0sXG4gICAge25hbWU6IFwiTWFyaWFEQiBTUUxcIiwgbWltZTogXCJ0ZXh0L3gtbWFyaWFkYlwiLCBtb2RlOiBcInNxbFwifSxcbiAgICB7bmFtZTogXCJNYXRoZW1hdGljYVwiLCBtaW1lOiBcInRleHQveC1tYXRoZW1hdGljYVwiLCBtb2RlOiBcIm1hdGhlbWF0aWNhXCIsIGV4dDogW1wibVwiLCBcIm5iXCJdfSxcbiAgICB7bmFtZTogXCJNb2RlbGljYVwiLCBtaW1lOiBcInRleHQveC1tb2RlbGljYVwiLCBtb2RlOiBcIm1vZGVsaWNhXCIsIGV4dDogW1wibW9cIl19LFxuICAgIHtuYW1lOiBcIk1VTVBTXCIsIG1pbWU6IFwidGV4dC94LW11bXBzXCIsIG1vZGU6IFwibXVtcHNcIiwgZXh0OiBbXCJtcHNcIl19LFxuICAgIHtuYW1lOiBcIk1TIFNRTFwiLCBtaW1lOiBcInRleHQveC1tc3NxbFwiLCBtb2RlOiBcInNxbFwifSxcbiAgICB7bmFtZTogXCJtYm94XCIsIG1pbWU6IFwiYXBwbGljYXRpb24vbWJveFwiLCBtb2RlOiBcIm1ib3hcIiwgZXh0OiBbXCJtYm94XCJdfSxcbiAgICB7bmFtZTogXCJNeVNRTFwiLCBtaW1lOiBcInRleHQveC1teXNxbFwiLCBtb2RlOiBcInNxbFwifSxcbiAgICB7bmFtZTogXCJOZ2lueFwiLCBtaW1lOiBcInRleHQveC1uZ2lueC1jb25mXCIsIG1vZGU6IFwibmdpbnhcIiwgZmlsZTogL25naW54LipcXC5jb25mJC9pfSxcbiAgICB7bmFtZTogXCJOU0lTXCIsIG1pbWU6IFwidGV4dC94LW5zaXNcIiwgbW9kZTogXCJuc2lzXCIsIGV4dDogW1wibnNoXCIsIFwibnNpXCJdfSxcbiAgICB7bmFtZTogXCJOVHJpcGxlc1wiLCBtaW1lczogW1wiYXBwbGljYXRpb24vbi10cmlwbGVzXCIsIFwiYXBwbGljYXRpb24vbi1xdWFkc1wiLCBcInRleHQvbi10cmlwbGVzXCJdLFxuICAgICBtb2RlOiBcIm50cmlwbGVzXCIsIGV4dDogW1wibnRcIiwgXCJucVwiXX0sXG4gICAge25hbWU6IFwiT2JqZWN0aXZlLUNcIiwgbWltZTogXCJ0ZXh0L3gtb2JqZWN0aXZlY1wiLCBtb2RlOiBcImNsaWtlXCIsIGV4dDogW1wibVwiLCBcIm1tXCJdLCBhbGlhczogW1wib2JqZWN0aXZlLWNcIiwgXCJvYmpjXCJdfSxcbiAgICB7bmFtZTogXCJPQ2FtbFwiLCBtaW1lOiBcInRleHQveC1vY2FtbFwiLCBtb2RlOiBcIm1sbGlrZVwiLCBleHQ6IFtcIm1sXCIsIFwibWxpXCIsIFwibWxsXCIsIFwibWx5XCJdfSxcbiAgICB7bmFtZTogXCJPY3RhdmVcIiwgbWltZTogXCJ0ZXh0L3gtb2N0YXZlXCIsIG1vZGU6IFwib2N0YXZlXCIsIGV4dDogW1wibVwiXX0sXG4gICAge25hbWU6IFwiT3pcIiwgbWltZTogXCJ0ZXh0L3gtb3pcIiwgbW9kZTogXCJvelwiLCBleHQ6IFtcIm96XCJdfSxcbiAgICB7bmFtZTogXCJQYXNjYWxcIiwgbWltZTogXCJ0ZXh0L3gtcGFzY2FsXCIsIG1vZGU6IFwicGFzY2FsXCIsIGV4dDogW1wicFwiLCBcInBhc1wiXX0sXG4gICAge25hbWU6IFwiUEVHLmpzXCIsIG1pbWU6IFwibnVsbFwiLCBtb2RlOiBcInBlZ2pzXCIsIGV4dDogW1wianNvbmxkXCJdfSxcbiAgICB7bmFtZTogXCJQZXJsXCIsIG1pbWU6IFwidGV4dC94LXBlcmxcIiwgbW9kZTogXCJwZXJsXCIsIGV4dDogW1wicGxcIiwgXCJwbVwiXX0sXG4gICAge25hbWU6IFwiUEhQXCIsIG1pbWVzOiBbXCJ0ZXh0L3gtcGhwXCIsIFwiYXBwbGljYXRpb24veC1odHRwZC1waHBcIiwgXCJhcHBsaWNhdGlvbi94LWh0dHBkLXBocC1vcGVuXCJdLCBtb2RlOiBcInBocFwiLCBleHQ6IFtcInBocFwiLCBcInBocDNcIiwgXCJwaHA0XCIsIFwicGhwNVwiLCBcInBocDdcIiwgXCJwaHRtbFwiXX0sXG4gICAge25hbWU6IFwiUGlnXCIsIG1pbWU6IFwidGV4dC94LXBpZ1wiLCBtb2RlOiBcInBpZ1wiLCBleHQ6IFtcInBpZ1wiXX0sXG4gICAge25hbWU6IFwiUGxhaW4gVGV4dFwiLCBtaW1lOiBcInRleHQvcGxhaW5cIiwgbW9kZTogXCJudWxsXCIsIGV4dDogW1widHh0XCIsIFwidGV4dFwiLCBcImNvbmZcIiwgXCJkZWZcIiwgXCJsaXN0XCIsIFwibG9nXCJdfSxcbiAgICB7bmFtZTogXCJQTFNRTFwiLCBtaW1lOiBcInRleHQveC1wbHNxbFwiLCBtb2RlOiBcInNxbFwiLCBleHQ6IFtcInBsc1wiXX0sXG4gICAge25hbWU6IFwiUG93ZXJTaGVsbFwiLCBtaW1lOiBcImFwcGxpY2F0aW9uL3gtcG93ZXJzaGVsbFwiLCBtb2RlOiBcInBvd2Vyc2hlbGxcIiwgZXh0OiBbXCJwczFcIiwgXCJwc2QxXCIsIFwicHNtMVwiXX0sXG4gICAge25hbWU6IFwiUHJvcGVydGllcyBmaWxlc1wiLCBtaW1lOiBcInRleHQveC1wcm9wZXJ0aWVzXCIsIG1vZGU6IFwicHJvcGVydGllc1wiLCBleHQ6IFtcInByb3BlcnRpZXNcIiwgXCJpbmlcIiwgXCJpblwiXSwgYWxpYXM6IFtcImluaVwiLCBcInByb3BlcnRpZXNcIl19LFxuICAgIHtuYW1lOiBcIlByb3RvQnVmXCIsIG1pbWU6IFwidGV4dC94LXByb3RvYnVmXCIsIG1vZGU6IFwicHJvdG9idWZcIiwgZXh0OiBbXCJwcm90b1wiXX0sXG4gICAge25hbWU6IFwiUHl0aG9uXCIsIG1pbWU6IFwidGV4dC94LXB5dGhvblwiLCBtb2RlOiBcInB5dGhvblwiLCBleHQ6IFtcIkJVSUxEXCIsIFwiYnpsXCIsIFwicHlcIiwgXCJweXdcIl0sIGZpbGU6IC9eKEJVQ0t8QlVJTEQpJC99LFxuICAgIHtuYW1lOiBcIlB1cHBldFwiLCBtaW1lOiBcInRleHQveC1wdXBwZXRcIiwgbW9kZTogXCJwdXBwZXRcIiwgZXh0OiBbXCJwcFwiXX0sXG4gICAge25hbWU6IFwiUVwiLCBtaW1lOiBcInRleHQveC1xXCIsIG1vZGU6IFwicVwiLCBleHQ6IFtcInFcIl19LFxuICAgIHtuYW1lOiBcIlJcIiwgbWltZTogXCJ0ZXh0L3gtcnNyY1wiLCBtb2RlOiBcInJcIiwgZXh0OiBbXCJyXCIsIFwiUlwiXSwgYWxpYXM6IFtcInJzY3JpcHRcIl19LFxuICAgIHtuYW1lOiBcInJlU3RydWN0dXJlZFRleHRcIiwgbWltZTogXCJ0ZXh0L3gtcnN0XCIsIG1vZGU6IFwicnN0XCIsIGV4dDogW1wicnN0XCJdLCBhbGlhczogW1wicnN0XCJdfSxcbiAgICB7bmFtZTogXCJSUE0gQ2hhbmdlc1wiLCBtaW1lOiBcInRleHQveC1ycG0tY2hhbmdlc1wiLCBtb2RlOiBcInJwbVwifSxcbiAgICB7bmFtZTogXCJSUE0gU3BlY1wiLCBtaW1lOiBcInRleHQveC1ycG0tc3BlY1wiLCBtb2RlOiBcInJwbVwiLCBleHQ6IFtcInNwZWNcIl19LFxuICAgIHtuYW1lOiBcIlJ1YnlcIiwgbWltZTogXCJ0ZXh0L3gtcnVieVwiLCBtb2RlOiBcInJ1YnlcIiwgZXh0OiBbXCJyYlwiXSwgYWxpYXM6IFtcImpydWJ5XCIsIFwibWFjcnVieVwiLCBcInJha2VcIiwgXCJyYlwiLCBcInJieFwiXX0sXG4gICAge25hbWU6IFwiUnVzdFwiLCBtaW1lOiBcInRleHQveC1ydXN0c3JjXCIsIG1vZGU6IFwicnVzdFwiLCBleHQ6IFtcInJzXCJdfSxcbiAgICB7bmFtZTogXCJTQVNcIiwgbWltZTogXCJ0ZXh0L3gtc2FzXCIsIG1vZGU6IFwic2FzXCIsIGV4dDogW1wic2FzXCJdfSxcbiAgICB7bmFtZTogXCJTYXNzXCIsIG1pbWU6IFwidGV4dC94LXNhc3NcIiwgbW9kZTogXCJzYXNzXCIsIGV4dDogW1wic2Fzc1wiXX0sXG4gICAge25hbWU6IFwiU2NhbGFcIiwgbWltZTogXCJ0ZXh0L3gtc2NhbGFcIiwgbW9kZTogXCJjbGlrZVwiLCBleHQ6IFtcInNjYWxhXCJdfSxcbiAgICB7bmFtZTogXCJTY2hlbWVcIiwgbWltZTogXCJ0ZXh0L3gtc2NoZW1lXCIsIG1vZGU6IFwic2NoZW1lXCIsIGV4dDogW1wic2NtXCIsIFwic3NcIl19LFxuICAgIHtuYW1lOiBcIlNDU1NcIiwgbWltZTogXCJ0ZXh0L3gtc2Nzc1wiLCBtb2RlOiBcImNzc1wiLCBleHQ6IFtcInNjc3NcIl19LFxuICAgIHtuYW1lOiBcIlNoZWxsXCIsIG1pbWVzOiBbXCJ0ZXh0L3gtc2hcIiwgXCJhcHBsaWNhdGlvbi94LXNoXCJdLCBtb2RlOiBcInNoZWxsXCIsIGV4dDogW1wic2hcIiwgXCJrc2hcIiwgXCJiYXNoXCJdLCBhbGlhczogW1wiYmFzaFwiLCBcInNoXCIsIFwienNoXCJdLCBmaWxlOiAvXlBLR0JVSUxEJC99LFxuICAgIHtuYW1lOiBcIlNpZXZlXCIsIG1pbWU6IFwiYXBwbGljYXRpb24vc2lldmVcIiwgbW9kZTogXCJzaWV2ZVwiLCBleHQ6IFtcInNpdlwiLCBcInNpZXZlXCJdfSxcbiAgICB7bmFtZTogXCJTbGltXCIsIG1pbWVzOiBbXCJ0ZXh0L3gtc2xpbVwiLCBcImFwcGxpY2F0aW9uL3gtc2xpbVwiXSwgbW9kZTogXCJzbGltXCIsIGV4dDogW1wic2xpbVwiXX0sXG4gICAge25hbWU6IFwiU21hbGx0YWxrXCIsIG1pbWU6IFwidGV4dC94LXN0c3JjXCIsIG1vZGU6IFwic21hbGx0YWxrXCIsIGV4dDogW1wic3RcIl19LFxuICAgIHtuYW1lOiBcIlNtYXJ0eVwiLCBtaW1lOiBcInRleHQveC1zbWFydHlcIiwgbW9kZTogXCJzbWFydHlcIiwgZXh0OiBbXCJ0cGxcIl19LFxuICAgIHtuYW1lOiBcIlNvbHJcIiwgbWltZTogXCJ0ZXh0L3gtc29sclwiLCBtb2RlOiBcInNvbHJcIn0sXG4gICAge25hbWU6IFwiU01MXCIsIG1pbWU6IFwidGV4dC94LXNtbFwiLCBtb2RlOiBcIm1sbGlrZVwiLCBleHQ6IFtcInNtbFwiLCBcInNpZ1wiLCBcImZ1blwiLCBcInNtYWNrc3BlY1wiXX0sXG4gICAge25hbWU6IFwiU295XCIsIG1pbWU6IFwidGV4dC94LXNveVwiLCBtb2RlOiBcInNveVwiLCBleHQ6IFtcInNveVwiXSwgYWxpYXM6IFtcImNsb3N1cmUgdGVtcGxhdGVcIl19LFxuICAgIHtuYW1lOiBcIlNQQVJRTFwiLCBtaW1lOiBcImFwcGxpY2F0aW9uL3NwYXJxbC1xdWVyeVwiLCBtb2RlOiBcInNwYXJxbFwiLCBleHQ6IFtcInJxXCIsIFwic3BhcnFsXCJdLCBhbGlhczogW1wic3BhcnVsXCJdfSxcbiAgICB7bmFtZTogXCJTcHJlYWRzaGVldFwiLCBtaW1lOiBcInRleHQveC1zcHJlYWRzaGVldFwiLCBtb2RlOiBcInNwcmVhZHNoZWV0XCIsIGFsaWFzOiBbXCJleGNlbFwiLCBcImZvcm11bGFcIl19LFxuICAgIHtuYW1lOiBcIlNRTFwiLCBtaW1lOiBcInRleHQveC1zcWxcIiwgbW9kZTogXCJzcWxcIiwgZXh0OiBbXCJzcWxcIl19LFxuICAgIHtuYW1lOiBcIlNRTGl0ZVwiLCBtaW1lOiBcInRleHQveC1zcWxpdGVcIiwgbW9kZTogXCJzcWxcIn0sXG4gICAge25hbWU6IFwiU3F1aXJyZWxcIiwgbWltZTogXCJ0ZXh0L3gtc3F1aXJyZWxcIiwgbW9kZTogXCJjbGlrZVwiLCBleHQ6IFtcIm51dFwiXX0sXG4gICAge25hbWU6IFwiU3R5bHVzXCIsIG1pbWU6IFwidGV4dC94LXN0eWxcIiwgbW9kZTogXCJzdHlsdXNcIiwgZXh0OiBbXCJzdHlsXCJdfSxcbiAgICB7bmFtZTogXCJTd2lmdFwiLCBtaW1lOiBcInRleHQveC1zd2lmdFwiLCBtb2RlOiBcInN3aWZ0XCIsIGV4dDogW1wic3dpZnRcIl19LFxuICAgIHtuYW1lOiBcInNUZVhcIiwgbWltZTogXCJ0ZXh0L3gtc3RleFwiLCBtb2RlOiBcInN0ZXhcIn0sXG4gICAge25hbWU6IFwiTGFUZVhcIiwgbWltZTogXCJ0ZXh0L3gtbGF0ZXhcIiwgbW9kZTogXCJzdGV4XCIsIGV4dDogW1widGV4dFwiLCBcImx0eFwiLCBcInRleFwiXSwgYWxpYXM6IFtcInRleFwiXX0sXG4gICAge25hbWU6IFwiU3lzdGVtVmVyaWxvZ1wiLCBtaW1lOiBcInRleHQveC1zeXN0ZW12ZXJpbG9nXCIsIG1vZGU6IFwidmVyaWxvZ1wiLCBleHQ6IFtcInZcIiwgXCJzdlwiLCBcInN2aFwiXX0sXG4gICAge25hbWU6IFwiVGNsXCIsIG1pbWU6IFwidGV4dC94LXRjbFwiLCBtb2RlOiBcInRjbFwiLCBleHQ6IFtcInRjbFwiXX0sXG4gICAge25hbWU6IFwiVGV4dGlsZVwiLCBtaW1lOiBcInRleHQveC10ZXh0aWxlXCIsIG1vZGU6IFwidGV4dGlsZVwiLCBleHQ6IFtcInRleHRpbGVcIl19LFxuICAgIHtuYW1lOiBcIlRpZGRseVdpa2kgXCIsIG1pbWU6IFwidGV4dC94LXRpZGRseXdpa2lcIiwgbW9kZTogXCJ0aWRkbHl3aWtpXCJ9LFxuICAgIHtuYW1lOiBcIlRpa2kgd2lraVwiLCBtaW1lOiBcInRleHQvdGlraVwiLCBtb2RlOiBcInRpa2lcIn0sXG4gICAge25hbWU6IFwiVE9NTFwiLCBtaW1lOiBcInRleHQveC10b21sXCIsIG1vZGU6IFwidG9tbFwiLCBleHQ6IFtcInRvbWxcIl19LFxuICAgIHtuYW1lOiBcIlRvcm5hZG9cIiwgbWltZTogXCJ0ZXh0L3gtdG9ybmFkb1wiLCBtb2RlOiBcInRvcm5hZG9cIn0sXG4gICAge25hbWU6IFwidHJvZmZcIiwgbWltZTogXCJ0ZXh0L3Ryb2ZmXCIsIG1vZGU6IFwidHJvZmZcIiwgZXh0OiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIl19LFxuICAgIHtuYW1lOiBcIlRUQ05cIiwgbWltZTogXCJ0ZXh0L3gtdHRjblwiLCBtb2RlOiBcInR0Y25cIiwgZXh0OiBbXCJ0dGNuXCIsIFwidHRjbjNcIiwgXCJ0dGNucHBcIl19LFxuICAgIHtuYW1lOiBcIlRUQ05fQ0ZHXCIsIG1pbWU6IFwidGV4dC94LXR0Y24tY2ZnXCIsIG1vZGU6IFwidHRjbi1jZmdcIiwgZXh0OiBbXCJjZmdcIl19LFxuICAgIHtuYW1lOiBcIlR1cnRsZVwiLCBtaW1lOiBcInRleHQvdHVydGxlXCIsIG1vZGU6IFwidHVydGxlXCIsIGV4dDogW1widHRsXCJdfSxcbiAgICB7bmFtZTogXCJUeXBlU2NyaXB0XCIsIG1pbWU6IFwiYXBwbGljYXRpb24vdHlwZXNjcmlwdFwiLCBtb2RlOiBcImphdmFzY3JpcHRcIiwgZXh0OiBbXCJ0c1wiXSwgYWxpYXM6IFtcInRzXCJdfSxcbiAgICB7bmFtZTogXCJUeXBlU2NyaXB0LUpTWFwiLCBtaW1lOiBcInRleHQvdHlwZXNjcmlwdC1qc3hcIiwgbW9kZTogXCJqc3hcIiwgZXh0OiBbXCJ0c3hcIl0sIGFsaWFzOiBbXCJ0c3hcIl19LFxuICAgIHtuYW1lOiBcIlR3aWdcIiwgbWltZTogXCJ0ZXh0L3gtdHdpZ1wiLCBtb2RlOiBcInR3aWdcIn0sXG4gICAge25hbWU6IFwiV2ViIElETFwiLCBtaW1lOiBcInRleHQveC13ZWJpZGxcIiwgbW9kZTogXCJ3ZWJpZGxcIiwgZXh0OiBbXCJ3ZWJpZGxcIl19LFxuICAgIHtuYW1lOiBcIlZCLk5FVFwiLCBtaW1lOiBcInRleHQveC12YlwiLCBtb2RlOiBcInZiXCIsIGV4dDogW1widmJcIl19LFxuICAgIHtuYW1lOiBcIlZCU2NyaXB0XCIsIG1pbWU6IFwidGV4dC92YnNjcmlwdFwiLCBtb2RlOiBcInZic2NyaXB0XCIsIGV4dDogW1widmJzXCJdfSxcbiAgICB7bmFtZTogXCJWZWxvY2l0eVwiLCBtaW1lOiBcInRleHQvdmVsb2NpdHlcIiwgbW9kZTogXCJ2ZWxvY2l0eVwiLCBleHQ6IFtcInZ0bFwiXX0sXG4gICAge25hbWU6IFwiVmVyaWxvZ1wiLCBtaW1lOiBcInRleHQveC12ZXJpbG9nXCIsIG1vZGU6IFwidmVyaWxvZ1wiLCBleHQ6IFtcInZcIl19LFxuICAgIHtuYW1lOiBcIlZIRExcIiwgbWltZTogXCJ0ZXh0L3gtdmhkbFwiLCBtb2RlOiBcInZoZGxcIiwgZXh0OiBbXCJ2aGRcIiwgXCJ2aGRsXCJdfSxcbiAgICB7bmFtZTogXCJWdWUuanMgQ29tcG9uZW50XCIsIG1pbWVzOiBbXCJzY3JpcHQveC12dWVcIiwgXCJ0ZXh0L3gtdnVlXCJdLCBtb2RlOiBcInZ1ZVwiLCBleHQ6IFtcInZ1ZVwiXX0sXG4gICAge25hbWU6IFwiWE1MXCIsIG1pbWVzOiBbXCJhcHBsaWNhdGlvbi94bWxcIiwgXCJ0ZXh0L3htbFwiXSwgbW9kZTogXCJ4bWxcIiwgZXh0OiBbXCJ4bWxcIiwgXCJ4c2xcIiwgXCJ4c2RcIiwgXCJzdmdcIl0sIGFsaWFzOiBbXCJyc3NcIiwgXCJ3c2RsXCIsIFwieHNkXCJdfSxcbiAgICB7bmFtZTogXCJYUXVlcnlcIiwgbWltZTogXCJhcHBsaWNhdGlvbi94cXVlcnlcIiwgbW9kZTogXCJ4cXVlcnlcIiwgZXh0OiBbXCJ4eVwiLCBcInhxdWVyeVwiXX0sXG4gICAge25hbWU6IFwiWWFjYXNcIiwgbWltZTogXCJ0ZXh0L3gteWFjYXNcIiwgbW9kZTogXCJ5YWNhc1wiLCBleHQ6IFtcInlzXCJdfSxcbiAgICB7bmFtZTogXCJZQU1MXCIsIG1pbWVzOiBbXCJ0ZXh0L3gteWFtbFwiLCBcInRleHQveWFtbFwiXSwgbW9kZTogXCJ5YW1sXCIsIGV4dDogW1wieWFtbFwiLCBcInltbFwiXSwgYWxpYXM6IFtcInltbFwiXX0sXG4gICAge25hbWU6IFwiWjgwXCIsIG1pbWU6IFwidGV4dC94LXo4MFwiLCBtb2RlOiBcIno4MFwiLCBleHQ6IFtcIno4MFwiXX0sXG4gICAge25hbWU6IFwibXNjZ2VuXCIsIG1pbWU6IFwidGV4dC94LW1zY2dlblwiLCBtb2RlOiBcIm1zY2dlblwiLCBleHQ6IFtcIm1zY2dlblwiLCBcIm1zY2luXCIsIFwibXNjXCJdfSxcbiAgICB7bmFtZTogXCJ4dVwiLCBtaW1lOiBcInRleHQveC14dVwiLCBtb2RlOiBcIm1zY2dlblwiLCBleHQ6IFtcInh1XCJdfSxcbiAgICB7bmFtZTogXCJtc2dlbm55XCIsIG1pbWU6IFwidGV4dC94LW1zZ2VubnlcIiwgbW9kZTogXCJtc2NnZW5cIiwgZXh0OiBbXCJtc2dlbm55XCJdfVxuICBdO1xuICAvLyBFbnN1cmUgYWxsIG1vZGVzIGhhdmUgYSBtaW1lIHByb3BlcnR5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICBmb3IgKHZhciBpID0gMDsgaSA8IENvZGVNaXJyb3IubW9kZUluZm8ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5mbyA9IENvZGVNaXJyb3IubW9kZUluZm9baV07XG4gICAgaWYgKGluZm8ubWltZXMpIGluZm8ubWltZSA9IGluZm8ubWltZXNbMF07XG4gIH1cblxuICBDb2RlTWlycm9yLmZpbmRNb2RlQnlNSU1FID0gZnVuY3Rpb24obWltZSkge1xuICAgIG1pbWUgPSBtaW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBDb2RlTWlycm9yLm1vZGVJbmZvLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaW5mbyA9IENvZGVNaXJyb3IubW9kZUluZm9baV07XG4gICAgICBpZiAoaW5mby5taW1lID09IG1pbWUpIHJldHVybiBpbmZvO1xuICAgICAgaWYgKGluZm8ubWltZXMpIGZvciAodmFyIGogPSAwOyBqIDwgaW5mby5taW1lcy5sZW5ndGg7IGorKylcbiAgICAgICAgaWYgKGluZm8ubWltZXNbal0gPT0gbWltZSkgcmV0dXJuIGluZm87XG4gICAgfVxuICAgIGlmICgvXFwreG1sJC8udGVzdChtaW1lKSkgcmV0dXJuIENvZGVNaXJyb3IuZmluZE1vZGVCeU1JTUUoXCJhcHBsaWNhdGlvbi94bWxcIilcbiAgICBpZiAoL1xcK2pzb24kLy50ZXN0KG1pbWUpKSByZXR1cm4gQ29kZU1pcnJvci5maW5kTW9kZUJ5TUlNRShcImFwcGxpY2F0aW9uL2pzb25cIilcbiAgfTtcblxuICBDb2RlTWlycm9yLmZpbmRNb2RlQnlFeHRlbnNpb24gPSBmdW5jdGlvbihleHQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IENvZGVNaXJyb3IubW9kZUluZm8ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpbmZvID0gQ29kZU1pcnJvci5tb2RlSW5mb1tpXTtcbiAgICAgIGlmIChpbmZvLmV4dCkgZm9yICh2YXIgaiA9IDA7IGogPCBpbmZvLmV4dC5sZW5ndGg7IGorKylcbiAgICAgICAgaWYgKGluZm8uZXh0W2pdID09IGV4dCkgcmV0dXJuIGluZm87XG4gICAgfVxuICB9O1xuXG4gIENvZGVNaXJyb3IuZmluZE1vZGVCeUZpbGVOYW1lID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IENvZGVNaXJyb3IubW9kZUluZm8ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpbmZvID0gQ29kZU1pcnJvci5tb2RlSW5mb1tpXTtcbiAgICAgIGlmIChpbmZvLmZpbGUgJiYgaW5mby5maWxlLnRlc3QoZmlsZW5hbWUpKSByZXR1cm4gaW5mbztcbiAgICB9XG4gICAgdmFyIGRvdCA9IGZpbGVuYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtcbiAgICB2YXIgZXh0ID0gZG90ID4gLTEgJiYgZmlsZW5hbWUuc3Vic3RyaW5nKGRvdCArIDEsIGZpbGVuYW1lLmxlbmd0aCk7XG4gICAgaWYgKGV4dCkgcmV0dXJuIENvZGVNaXJyb3IuZmluZE1vZGVCeUV4dGVuc2lvbihleHQpO1xuICB9O1xuXG4gIENvZGVNaXJyb3IuZmluZE1vZGVCeU5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IENvZGVNaXJyb3IubW9kZUluZm8ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpbmZvID0gQ29kZU1pcnJvci5tb2RlSW5mb1tpXTtcbiAgICAgIGlmIChpbmZvLm5hbWUudG9Mb3dlckNhc2UoKSA9PSBuYW1lKSByZXR1cm4gaW5mbztcbiAgICAgIGlmIChpbmZvLmFsaWFzKSBmb3IgKHZhciBqID0gMDsgaiA8IGluZm8uYWxpYXMubGVuZ3RoOyBqKyspXG4gICAgICAgIGlmIChpbmZvLmFsaWFzW2pdLnRvTG93ZXJDYXNlKCkgPT0gbmFtZSkgcmV0dXJuIGluZm87XG4gICAgfVxuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL21vZGUvbWV0YS5qc1xuLy8gbW9kdWxlIGlkID0gNjAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSwgcmVxdWlyZShcIi4uL21hcmtkb3duL21hcmtkb3duXCIpLCByZXF1aXJlKFwiLi4vLi4vYWRkb24vbW9kZS9vdmVybGF5XCIpKTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIsIFwiLi4vbWFya2Rvd24vbWFya2Rvd25cIiwgXCIuLi8uLi9hZGRvbi9tb2RlL292ZXJsYXlcIl0sIG1vZCk7XG4gIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnZcbiAgICBtb2QoQ29kZU1pcnJvcik7XG59KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHVybFJFID0gL14oKD86KD86YWFhcz98YWJvdXR8YWNhcHxhZGl1bXh0cmF8YWZbcHNdfGFpbXxhcHR8YXR0YWNobWVudHxhd3xiZXNoYXJlfGJpdGNvaW58Ym9sb3xjYWxsdG98Y2FwfGNocm9tZSg/Oi1leHRlbnNpb24pP3xjaWR8Y29hcHxjb20tZXZlbnRicml0ZS1hdHRlbmRlZXxjb250ZW50fGNyaWR8Y3ZzfGRhdGF8ZGF2fGRpY3R8ZGxuYS0oPzpwbGF5Y29udGFpbmVyfHBsYXlzaW5nbGUpfGRuc3xkb2l8ZHRufGR2YnxlZDJrfGZhY2V0aW1lfGZlZWR8ZmlsZXxmaW5nZXJ8ZmlzaHxmdHB8Z2VvfGdnfGdpdHxnaXptb3Byb2plY3R8Z298Z29waGVyfGd0YWxrfGgzMjN8aGNwfGh0dHBzP3xpYXh8aWNhcHxpY29ufGltfGltYXB8aW5mb3xpcG58aXBwfGlyY1s2c10/fGlyaXMoPzpcXC5iZWVwfFxcLmx3enxcXC54cGN8XFwueHBjcyk/fGl0bXN8amFyfGphdmFzY3JpcHR8am1zfGtleXBhcmN8bGFzdGZtfGxkYXBzP3xtYWduZXR8bWFpbHRvfG1hcHN8bWFya2V0fG1lc3NhZ2V8bWlkfG1tc3xtcy1oZWxwfG1zbmltfG1zcnBzP3xtdHFwfG11bWJsZXxtdXBkYXRlfG12bnxuZXdzfG5mc3xuaWg/fG5udHB8bm90ZXN8b2lkfG9wYXF1ZWxvY2t0b2tlbnxwYWxtfHBhcGFyYXp6aXxwbGF0Zm9ybXxwb3B8cHJlc3xwcm94eXxwc3ljfHF1ZXJ5fHJlcyg/Om91cmNlKT98cm1pfHJzeW5jfHJ0bXB8cnRzcHxzZWNvbmRsaWZlfHNlcnZpY2V8c2Vzc2lvbnxzZnRwfHNnbnxzaHR0cHxzaWV2ZXxzaXBzP3xza3lwZXxzbVtic118c25tcHxzb2FwXFwuYmVlcHM/fHNvbGRhdHxzcG90aWZ5fHNzaHxzdGVhbXxzdm58dGFnfHRlYW1zcGVha3x0ZWwoPzpuZXQpP3x0ZnRwfHRoaW5nc3x0aGlzbWVzc2FnZXx0aXB8dG4zMjcwfHR2fHVkcHx1bnJlYWx8dXJufHV0MjAwNHx2ZW1taXx2ZW50cmlsb3x2aWV3LXNvdXJjZXx3ZWJjYWx8d3NzP3x3dGFpfHd5Y2l3eWd8eGNvbig/Oi11c2VyaWQpP3x4ZmlyZXx4bWxycGNcXC5iZWVwcz98eG1wcHx4cml8eW1zZ3J8ejM5XFwuNTBbcnNdPyk6KD86XFwvezEsM318W2EtejAtOSVdKXx3d3dcXGR7MCwzfVsuXXxbYS16MC05LlxcLV0rWy5dW2Etel17Miw0fVxcLykoPzpbXlxccygpPD5dfFxcKFteXFxzKCk8Pl0qXFwpKSsoPzpcXChbXlxccygpPD5dKlxcKXxbXlxcc2AqISgpXFxbXFxde307OidcIi4sPD4/wqvCu+KAnOKAneKAmOKAmV0pKS9pXG5cbkNvZGVNaXJyb3IuZGVmaW5lTW9kZShcImdmbVwiLCBmdW5jdGlvbihjb25maWcsIG1vZGVDb25maWcpIHtcbiAgdmFyIGNvZGVEZXB0aCA9IDA7XG4gIGZ1bmN0aW9uIGJsYW5rTGluZShzdGF0ZSkge1xuICAgIHN0YXRlLmNvZGUgPSBmYWxzZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZ2ZtT3ZlcmxheSA9IHtcbiAgICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvZGU6IGZhbHNlLFxuICAgICAgICBjb2RlQmxvY2s6IGZhbHNlLFxuICAgICAgICBhdGVTcGFjZTogZmFsc2VcbiAgICAgIH07XG4gICAgfSxcbiAgICBjb3B5U3RhdGU6IGZ1bmN0aW9uKHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvZGU6IHMuY29kZSxcbiAgICAgICAgY29kZUJsb2NrOiBzLmNvZGVCbG9jayxcbiAgICAgICAgYXRlU3BhY2U6IHMuYXRlU3BhY2VcbiAgICAgIH07XG4gICAgfSxcbiAgICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgc3RhdGUuY29tYmluZVRva2VucyA9IG51bGw7XG5cbiAgICAgIC8vIEhhY2sgdG8gcHJldmVudCBmb3JtYXR0aW5nIG92ZXJyaWRlIGluc2lkZSBjb2RlIGJsb2NrcyAoYmxvY2sgYW5kIGlubGluZSlcbiAgICAgIGlmIChzdGF0ZS5jb2RlQmxvY2spIHtcbiAgICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXmBgYCsvKSkge1xuICAgICAgICAgIHN0YXRlLmNvZGVCbG9jayA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgICAgIHN0YXRlLmNvZGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0uc29sKCkgJiYgc3RyZWFtLm1hdGNoKC9eYGBgKy8pKSB7XG4gICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgICAgc3RhdGUuY29kZUJsb2NrID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGlzIGJsb2NrIGlzIGNoYW5nZWQsIGl0IG1heSBuZWVkIHRvIGJlIHVwZGF0ZWQgaW4gTWFya2Rvd24gbW9kZVxuICAgICAgaWYgKHN0cmVhbS5wZWVrKCkgPT09ICdgJykge1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICB2YXIgYmVmb3JlID0gc3RyZWFtLnBvcztcbiAgICAgICAgc3RyZWFtLmVhdFdoaWxlKCdgJyk7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gMSArIHN0cmVhbS5wb3MgLSBiZWZvcmU7XG4gICAgICAgIGlmICghc3RhdGUuY29kZSkge1xuICAgICAgICAgIGNvZGVEZXB0aCA9IGRpZmZlcmVuY2U7XG4gICAgICAgICAgc3RhdGUuY29kZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGRpZmZlcmVuY2UgPT09IGNvZGVEZXB0aCkgeyAvLyBNdXN0IGJlIGV4YWN0XG4gICAgICAgICAgICBzdGF0ZS5jb2RlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5jb2RlKSB7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgaWYgc3BhY2UuIElmIHNvLCBsaW5rcyBjYW4gYmUgZm9ybWF0dGVkIGxhdGVyIG9uXG4gICAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHtcbiAgICAgICAgc3RhdGUuYXRlU3BhY2UgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0uc29sKCkgfHwgc3RhdGUuYXRlU3BhY2UpIHtcbiAgICAgICAgc3RhdGUuYXRlU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgaWYgKG1vZGVDb25maWcuZ2l0SHViU3BpY2UgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYoc3RyZWFtLm1hdGNoKC9eKD86W2EtekEtWjAtOVxcLV9dK1xcLyk/KD86W2EtekEtWjAtOVxcLV9dK0ApPyg/PS57MCw2fVxcZCkoPzpbYS1mMC05XXs3LDQwfVxcYikvKSkge1xuICAgICAgICAgICAgLy8gVXNlci9Qcm9qZWN0QFNIQVxuICAgICAgICAgICAgLy8gVXNlckBTSEFcbiAgICAgICAgICAgIC8vIFNIQVxuICAgICAgICAgICAgc3RhdGUuY29tYmluZVRva2VucyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gXCJsaW5rXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL14oPzpbYS16QS1aMC05XFwtX10rXFwvKT8oPzpbYS16QS1aMC05XFwtX10rKT8jWzAtOV0rXFxiLykpIHtcbiAgICAgICAgICAgIC8vIFVzZXIvUHJvamVjdCNOdW1cbiAgICAgICAgICAgIC8vIFVzZXIjTnVtXG4gICAgICAgICAgICAvLyAjTnVtXG4gICAgICAgICAgICBzdGF0ZS5jb21iaW5lVG9rZW5zID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBcImxpbmtcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0ubWF0Y2godXJsUkUpICYmXG4gICAgICAgICAgc3RyZWFtLnN0cmluZy5zbGljZShzdHJlYW0uc3RhcnQgLSAyLCBzdHJlYW0uc3RhcnQpICE9IFwiXShcIiAmJlxuICAgICAgICAgIChzdHJlYW0uc3RhcnQgPT0gMCB8fCAvXFxXLy50ZXN0KHN0cmVhbS5zdHJpbmcuY2hhckF0KHN0cmVhbS5zdGFydCAtIDEpKSkpIHtcbiAgICAgICAgLy8gVVJMc1xuICAgICAgICAvLyBUYWtlbiBmcm9tIGh0dHA6Ly9kYXJpbmdmaXJlYmFsbC5uZXQvMjAxMC8wNy9pbXByb3ZlZF9yZWdleF9mb3JfbWF0Y2hpbmdfdXJsc1xuICAgICAgICAvLyBBbmQgdGhlbiAoaXNzdWUgIzExNjApIHNpbXBsaWZpZWQgdG8gbWFrZSBpdCBub3QgY3Jhc2ggdGhlIENocm9tZSBSZWdleHAgZW5naW5lXG4gICAgICAgIC8vIEFuZCB0aGVuIGxpbWl0ZWQgdXJsIHNjaGVtZXMgdG8gdGhlIENvbW1vbk1hcmsgbGlzdCwgc28gZm9vOmJhciBpc24ndCBtYXRjaGVkIGFzIGEgVVJMXG4gICAgICAgIHN0YXRlLmNvbWJpbmVUb2tlbnMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gXCJsaW5rXCI7XG4gICAgICB9XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBibGFua0xpbmU6IGJsYW5rTGluZVxuICB9O1xuXG4gIHZhciBtYXJrZG93bkNvbmZpZyA9IHtcbiAgICB0YXNrTGlzdHM6IHRydWUsXG4gICAgc3RyaWtldGhyb3VnaDogdHJ1ZSxcbiAgICBlbW9qaTogdHJ1ZVxuICB9O1xuICBmb3IgKHZhciBhdHRyIGluIG1vZGVDb25maWcpIHtcbiAgICBtYXJrZG93bkNvbmZpZ1thdHRyXSA9IG1vZGVDb25maWdbYXR0cl07XG4gIH1cbiAgbWFya2Rvd25Db25maWcubmFtZSA9IFwibWFya2Rvd25cIjtcbiAgcmV0dXJuIENvZGVNaXJyb3Iub3ZlcmxheU1vZGUoQ29kZU1pcnJvci5nZXRNb2RlKGNvbmZpZywgbWFya2Rvd25Db25maWcpLCBnZm1PdmVybGF5KTtcblxufSwgXCJtYXJrZG93blwiKTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1JTUUoXCJ0ZXh0L3gtZ2ZtXCIsIFwiZ2ZtXCIpO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL21vZGUvZ2ZtL2dmbS5qc1xuLy8gbW9kdWxlIGlkID0gNjAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuLy8gVXRpbGl0eSBmdW5jdGlvbiB0aGF0IGFsbG93cyBtb2RlcyB0byBiZSBjb21iaW5lZC4gVGhlIG1vZGUgZ2l2ZW5cbi8vIGFzIHRoZSBiYXNlIGFyZ3VtZW50IHRha2VzIGNhcmUgb2YgbW9zdCBvZiB0aGUgbm9ybWFsIG1vZGVcbi8vIGZ1bmN0aW9uYWxpdHksIGJ1dCBhIHNlY29uZCAodHlwaWNhbGx5IHNpbXBsZSkgbW9kZSBpcyB1c2VkLCB3aGljaFxuLy8gY2FuIG92ZXJyaWRlIHRoZSBzdHlsZSBvZiB0ZXh0LiBCb3RoIG1vZGVzIGdldCB0byBwYXJzZSBhbGwgb2YgdGhlXG4vLyB0ZXh0LCBidXQgd2hlbiBib3RoIGFzc2lnbiBhIG5vbi1udWxsIHN0eWxlIHRvIGEgcGllY2Ugb2YgY29kZSwgdGhlXG4vLyBvdmVybGF5IHdpbnMsIHVubGVzcyB0aGUgY29tYmluZSBhcmd1bWVudCB3YXMgdHJ1ZSBhbmQgbm90IG92ZXJyaWRkZW4sXG4vLyBvciBzdGF0ZS5vdmVybGF5LmNvbWJpbmVUb2tlbnMgd2FzIHRydWUsIGluIHdoaWNoIGNhc2UgdGhlIHN0eWxlcyBhcmVcbi8vIGNvbWJpbmVkLlxuXG4oZnVuY3Rpb24obW9kKSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT0gXCJvYmplY3RcIikgLy8gQ29tbW9uSlNcbiAgICBtb2QocmVxdWlyZShcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCIpKTtcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgLy8gQU1EXG4gICAgZGVmaW5lKFtcIi4uLy4uL2xpYi9jb2RlbWlycm9yXCJdLCBtb2QpO1xuICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52XG4gICAgbW9kKENvZGVNaXJyb3IpO1xufSkoZnVuY3Rpb24oQ29kZU1pcnJvcikge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbkNvZGVNaXJyb3Iub3ZlcmxheU1vZGUgPSBmdW5jdGlvbihiYXNlLCBvdmVybGF5LCBjb21iaW5lKSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlOiBDb2RlTWlycm9yLnN0YXJ0U3RhdGUoYmFzZSksXG4gICAgICAgIG92ZXJsYXk6IENvZGVNaXJyb3Iuc3RhcnRTdGF0ZShvdmVybGF5KSxcbiAgICAgICAgYmFzZVBvczogMCwgYmFzZUN1cjogbnVsbCxcbiAgICAgICAgb3ZlcmxheVBvczogMCwgb3ZlcmxheUN1cjogbnVsbCxcbiAgICAgICAgc3RyZWFtU2VlbjogbnVsbFxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvcHlTdGF0ZTogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2U6IENvZGVNaXJyb3IuY29weVN0YXRlKGJhc2UsIHN0YXRlLmJhc2UpLFxuICAgICAgICBvdmVybGF5OiBDb2RlTWlycm9yLmNvcHlTdGF0ZShvdmVybGF5LCBzdGF0ZS5vdmVybGF5KSxcbiAgICAgICAgYmFzZVBvczogc3RhdGUuYmFzZVBvcywgYmFzZUN1cjogbnVsbCxcbiAgICAgICAgb3ZlcmxheVBvczogc3RhdGUub3ZlcmxheVBvcywgb3ZlcmxheUN1cjogbnVsbFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIGlmIChzdHJlYW0gIT0gc3RhdGUuc3RyZWFtU2VlbiB8fFxuICAgICAgICAgIE1hdGgubWluKHN0YXRlLmJhc2VQb3MsIHN0YXRlLm92ZXJsYXlQb3MpIDwgc3RyZWFtLnN0YXJ0KSB7XG4gICAgICAgIHN0YXRlLnN0cmVhbVNlZW4gPSBzdHJlYW07XG4gICAgICAgIHN0YXRlLmJhc2VQb3MgPSBzdGF0ZS5vdmVybGF5UG9zID0gc3RyZWFtLnN0YXJ0O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RyZWFtLnN0YXJ0ID09IHN0YXRlLmJhc2VQb3MpIHtcbiAgICAgICAgc3RhdGUuYmFzZUN1ciA9IGJhc2UudG9rZW4oc3RyZWFtLCBzdGF0ZS5iYXNlKTtcbiAgICAgICAgc3RhdGUuYmFzZVBvcyA9IHN0cmVhbS5wb3M7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtLnN0YXJ0ID09IHN0YXRlLm92ZXJsYXlQb3MpIHtcbiAgICAgICAgc3RyZWFtLnBvcyA9IHN0cmVhbS5zdGFydDtcbiAgICAgICAgc3RhdGUub3ZlcmxheUN1ciA9IG92ZXJsYXkudG9rZW4oc3RyZWFtLCBzdGF0ZS5vdmVybGF5KTtcbiAgICAgICAgc3RhdGUub3ZlcmxheVBvcyA9IHN0cmVhbS5wb3M7XG4gICAgICB9XG4gICAgICBzdHJlYW0ucG9zID0gTWF0aC5taW4oc3RhdGUuYmFzZVBvcywgc3RhdGUub3ZlcmxheVBvcyk7XG5cbiAgICAgIC8vIHN0YXRlLm92ZXJsYXkuY29tYmluZVRva2VucyBhbHdheXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGNvbWJpbmUsXG4gICAgICAvLyB1bmxlc3Mgc2V0IHRvIG51bGxcbiAgICAgIGlmIChzdGF0ZS5vdmVybGF5Q3VyID09IG51bGwpIHJldHVybiBzdGF0ZS5iYXNlQ3VyO1xuICAgICAgZWxzZSBpZiAoc3RhdGUuYmFzZUN1ciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICBzdGF0ZS5vdmVybGF5LmNvbWJpbmVUb2tlbnMgfHxcbiAgICAgICAgICAgICAgIGNvbWJpbmUgJiYgc3RhdGUub3ZlcmxheS5jb21iaW5lVG9rZW5zID09IG51bGwpXG4gICAgICAgIHJldHVybiBzdGF0ZS5iYXNlQ3VyICsgXCIgXCIgKyBzdGF0ZS5vdmVybGF5Q3VyO1xuICAgICAgZWxzZSByZXR1cm4gc3RhdGUub3ZlcmxheUN1cjtcbiAgICB9LFxuXG4gICAgaW5kZW50OiBiYXNlLmluZGVudCAmJiBmdW5jdGlvbihzdGF0ZSwgdGV4dEFmdGVyKSB7XG4gICAgICByZXR1cm4gYmFzZS5pbmRlbnQoc3RhdGUuYmFzZSwgdGV4dEFmdGVyKTtcbiAgICB9LFxuICAgIGVsZWN0cmljQ2hhcnM6IGJhc2UuZWxlY3RyaWNDaGFycyxcblxuICAgIGlubmVyTW9kZTogZnVuY3Rpb24oc3RhdGUpIHsgcmV0dXJuIHtzdGF0ZTogc3RhdGUuYmFzZSwgbW9kZTogYmFzZX07IH0sXG5cbiAgICBibGFua0xpbmU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgYmFzZVRva2VuLCBvdmVybGF5VG9rZW47XG4gICAgICBpZiAoYmFzZS5ibGFua0xpbmUpIGJhc2VUb2tlbiA9IGJhc2UuYmxhbmtMaW5lKHN0YXRlLmJhc2UpO1xuICAgICAgaWYgKG92ZXJsYXkuYmxhbmtMaW5lKSBvdmVybGF5VG9rZW4gPSBvdmVybGF5LmJsYW5rTGluZShzdGF0ZS5vdmVybGF5KTtcblxuICAgICAgcmV0dXJuIG92ZXJsYXlUb2tlbiA9PSBudWxsID9cbiAgICAgICAgYmFzZVRva2VuIDpcbiAgICAgICAgKGNvbWJpbmUgJiYgYmFzZVRva2VuICE9IG51bGwgPyBiYXNlVG9rZW4gKyBcIiBcIiArIG92ZXJsYXlUb2tlbiA6IG92ZXJsYXlUb2tlbik7XG4gICAgfVxuICB9O1xufTtcblxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb2RlbWlycm9yL2FkZG9uL21vZGUvb3ZlcmxheS5qc1xuLy8gbW9kdWxlIGlkID0gNjAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvZGVNaXJyb3IsIGNvcHlyaWdodCAoYykgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzXG4vLyBEaXN0cmlidXRlZCB1bmRlciBhbiBNSVQgbGljZW5zZTogaHR0cDovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0VcblxuKGZ1bmN0aW9uKG1vZCkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09IFwib2JqZWN0XCIpIC8vIENvbW1vbkpTXG4gICAgbW9kKHJlcXVpcmUoXCIuLi8uLi9saWIvY29kZW1pcnJvclwiKSwgcmVxdWlyZShcIi4uL2h0bWxtaXhlZC9odG1sbWl4ZWRcIiksIHJlcXVpcmUoXCIuLi9jbGlrZS9jbGlrZVwiKSk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIC8vIEFNRFxuICAgIGRlZmluZShbXCIuLi8uLi9saWIvY29kZW1pcnJvclwiLCBcIi4uL2h0bWxtaXhlZC9odG1sbWl4ZWRcIiwgXCIuLi9jbGlrZS9jbGlrZVwiXSwgbW9kKTtcbiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudlxuICAgIG1vZChDb2RlTWlycm9yKTtcbn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZnVuY3Rpb24ga2V5d29yZHMoc3RyKSB7XG4gICAgdmFyIG9iaiA9IHt9LCB3b3JkcyA9IHN0ci5zcGxpdChcIiBcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7ICsraSkgb2JqW3dvcmRzW2ldXSA9IHRydWU7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8vIEhlbHBlciBmb3IgcGhwU3RyaW5nXG4gIGZ1bmN0aW9uIG1hdGNoU2VxdWVuY2UobGlzdCwgZW5kLCBlc2NhcGVzKSB7XG4gICAgaWYgKGxpc3QubGVuZ3RoID09IDApIHJldHVybiBwaHBTdHJpbmcoZW5kKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBwYXR0ZXJucyA9IGxpc3RbMF07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdHRlcm5zLmxlbmd0aDsgaSsrKSBpZiAoc3RyZWFtLm1hdGNoKHBhdHRlcm5zW2ldWzBdKSkge1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IG1hdGNoU2VxdWVuY2UobGlzdC5zbGljZSgxKSwgZW5kKTtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm5zW2ldWzFdO1xuICAgICAgfVxuICAgICAgc3RhdGUudG9rZW5pemUgPSBwaHBTdHJpbmcoZW5kLCBlc2NhcGVzKTtcbiAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gcGhwU3RyaW5nKGNsb3NpbmcsIGVzY2FwZXMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkgeyByZXR1cm4gcGhwU3RyaW5nXyhzdHJlYW0sIHN0YXRlLCBjbG9zaW5nLCBlc2NhcGVzKTsgfTtcbiAgfVxuICBmdW5jdGlvbiBwaHBTdHJpbmdfKHN0cmVhbSwgc3RhdGUsIGNsb3NpbmcsIGVzY2FwZXMpIHtcbiAgICAvLyBcIkNvbXBsZXhcIiBzeW50YXhcbiAgICBpZiAoZXNjYXBlcyAhPT0gZmFsc2UgJiYgc3RyZWFtLm1hdGNoKFwiJHtcIiwgZmFsc2UpIHx8IHN0cmVhbS5tYXRjaChcInskXCIsIGZhbHNlKSkge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSBudWxsO1xuICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgfVxuXG4gICAgLy8gU2ltcGxlIHN5bnRheFxuICAgIGlmIChlc2NhcGVzICE9PSBmYWxzZSAmJiBzdHJlYW0ubWF0Y2goL15cXCRbYS16QS1aX11bYS16QS1aMC05X10qLykpIHtcbiAgICAgIC8vIEFmdGVyIHRoZSB2YXJpYWJsZSBuYW1lIHRoZXJlIG1heSBhcHBlYXIgYXJyYXkgb3Igb2JqZWN0IG9wZXJhdG9yLlxuICAgICAgaWYgKHN0cmVhbS5tYXRjaChcIltcIiwgZmFsc2UpKSB7XG4gICAgICAgIC8vIE1hdGNoIGFycmF5IG9wZXJhdG9yXG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gbWF0Y2hTZXF1ZW5jZShbXG4gICAgICAgICAgW1tcIltcIiwgbnVsbF1dLFxuICAgICAgICAgIFtbL1xcZFtcXHdcXC5dKi8sIFwibnVtYmVyXCJdLFxuICAgICAgICAgICBbL1xcJFthLXpBLVpfXVthLXpBLVowLTlfXSovLCBcInZhcmlhYmxlLTJcIl0sXG4gICAgICAgICAgIFsvW1xcd1xcJF0rLywgXCJ2YXJpYWJsZVwiXV0sXG4gICAgICAgICAgW1tcIl1cIiwgbnVsbF1dXG4gICAgICAgIF0sIGNsb3NpbmcsIGVzY2FwZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXFwtXFw+XFx3LywgZmFsc2UpKSB7XG4gICAgICAgIC8vIE1hdGNoIG9iamVjdCBvcGVyYXRvclxuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IG1hdGNoU2VxdWVuY2UoW1xuICAgICAgICAgIFtbXCItPlwiLCBudWxsXV0sXG4gICAgICAgICAgW1svW1xcd10rLywgXCJ2YXJpYWJsZVwiXV1cbiAgICAgICAgXSwgY2xvc2luZywgZXNjYXBlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJ2YXJpYWJsZS0yXCI7XG4gICAgfVxuXG4gICAgdmFyIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAvLyBOb3JtYWwgc3RyaW5nXG4gICAgd2hpbGUgKCFzdHJlYW0uZW9sKCkgJiZcbiAgICAgICAgICAgKGVzY2FwZWQgfHwgZXNjYXBlcyA9PT0gZmFsc2UgfHxcbiAgICAgICAgICAgICghc3RyZWFtLm1hdGNoKFwieyRcIiwgZmFsc2UpICYmXG4gICAgICAgICAgICAgIXN0cmVhbS5tYXRjaCgvXihcXCRbYS16QS1aX11bYS16QS1aMC05X10qfFxcJFxceykvLCBmYWxzZSkpKSkge1xuICAgICAgaWYgKCFlc2NhcGVkICYmIHN0cmVhbS5tYXRjaChjbG9zaW5nKSkge1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IG51bGw7XG4gICAgICAgIHN0YXRlLnRva1N0YWNrLnBvcCgpOyBzdGF0ZS50b2tTdGFjay5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBlc2NhcGVkID0gc3RyZWFtLm5leHQoKSA9PSBcIlxcXFxcIiAmJiAhZXNjYXBlZDtcbiAgICB9XG4gICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gIH1cblxuICB2YXIgcGhwS2V5d29yZHMgPSBcImFic3RyYWN0IGFuZCBhcnJheSBhcyBicmVhayBjYXNlIGNhdGNoIGNsYXNzIGNsb25lIGNvbnN0IGNvbnRpbnVlIGRlY2xhcmUgZGVmYXVsdCBcIiArXG4gICAgXCJkbyBlbHNlIGVsc2VpZiBlbmRkZWNsYXJlIGVuZGZvciBlbmRmb3JlYWNoIGVuZGlmIGVuZHN3aXRjaCBlbmR3aGlsZSBleHRlbmRzIGZpbmFsIFwiICtcbiAgICBcImZvciBmb3JlYWNoIGZ1bmN0aW9uIGdsb2JhbCBnb3RvIGlmIGltcGxlbWVudHMgaW50ZXJmYWNlIGluc3RhbmNlb2YgbmFtZXNwYWNlIFwiICtcbiAgICBcIm5ldyBvciBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc3RhdGljIHN3aXRjaCB0aHJvdyB0cmFpdCB0cnkgdXNlIHZhciB3aGlsZSB4b3IgXCIgK1xuICAgIFwiZGllIGVjaG8gZW1wdHkgZXhpdCBldmFsIGluY2x1ZGUgaW5jbHVkZV9vbmNlIGlzc2V0IGxpc3QgcmVxdWlyZSByZXF1aXJlX29uY2UgcmV0dXJuIFwiICtcbiAgICBcInByaW50IHVuc2V0IF9faGFsdF9jb21waWxlciBzZWxmIHN0YXRpYyBwYXJlbnQgeWllbGQgaW5zdGVhZG9mIGZpbmFsbHlcIjtcbiAgdmFyIHBocEF0b21zID0gXCJ0cnVlIGZhbHNlIG51bGwgVFJVRSBGQUxTRSBOVUxMIF9fQ0xBU1NfXyBfX0RJUl9fIF9fRklMRV9fIF9fTElORV9fIF9fTUVUSE9EX18gX19GVU5DVElPTl9fIF9fTkFNRVNQQUNFX18gX19UUkFJVF9fXCI7XG4gIHZhciBwaHBCdWlsdGluID0gXCJmdW5jX251bV9hcmdzIGZ1bmNfZ2V0X2FyZyBmdW5jX2dldF9hcmdzIHN0cmxlbiBzdHJjbXAgc3RybmNtcCBzdHJjYXNlY21wIHN0cm5jYXNlY21wIGVhY2ggZXJyb3JfcmVwb3J0aW5nIGRlZmluZSBkZWZpbmVkIHRyaWdnZXJfZXJyb3IgdXNlcl9lcnJvciBzZXRfZXJyb3JfaGFuZGxlciByZXN0b3JlX2Vycm9yX2hhbmRsZXIgZ2V0X2RlY2xhcmVkX2NsYXNzZXMgZ2V0X2xvYWRlZF9leHRlbnNpb25zIGV4dGVuc2lvbl9sb2FkZWQgZ2V0X2V4dGVuc2lvbl9mdW5jcyBkZWJ1Z19iYWNrdHJhY2UgY29uc3RhbnQgYmluMmhleCBoZXgyYmluIHNsZWVwIHVzbGVlcCB0aW1lIG1rdGltZSBnbW1rdGltZSBzdHJmdGltZSBnbXN0cmZ0aW1lIHN0cnRvdGltZSBkYXRlIGdtZGF0ZSBnZXRkYXRlIGxvY2FsdGltZSBjaGVja2RhdGUgZmx1c2ggd29yZHdyYXAgaHRtbHNwZWNpYWxjaGFycyBodG1sZW50aXRpZXMgaHRtbF9lbnRpdHlfZGVjb2RlIG1kNSBtZDVfZmlsZSBjcmMzMiBnZXRpbWFnZXNpemUgaW1hZ2VfdHlwZV90b19taW1lX3R5cGUgcGhwaW5mbyBwaHB2ZXJzaW9uIHBocGNyZWRpdHMgc3RybmF0Y21wIHN0cm5hdGNhc2VjbXAgc3Vic3RyX2NvdW50IHN0cnNwbiBzdHJjc3BuIHN0cnRvayBzdHJ0b3VwcGVyIHN0cnRvbG93ZXIgc3RycG9zIHN0cnJwb3Mgc3RycmV2IGhlYnJldiBoZWJyZXZjIG5sMmJyIGJhc2VuYW1lIGRpcm5hbWUgcGF0aGluZm8gc3RyaXBzbGFzaGVzIHN0cmlwY3NsYXNoZXMgc3Ryc3RyIHN0cmlzdHIgc3RycmNociBzdHJfc2h1ZmZsZSBzdHJfd29yZF9jb3VudCBzdHJjb2xsIHN1YnN0ciBzdWJzdHJfcmVwbGFjZSBxdW90ZW1ldGEgdWNmaXJzdCB1Y3dvcmRzIHN0cnRyIGFkZHNsYXNoZXMgYWRkY3NsYXNoZXMgcnRyaW0gc3RyX3JlcGxhY2Ugc3RyX3JlcGVhdCBjb3VudF9jaGFycyBjaHVua19zcGxpdCB0cmltIGx0cmltIHN0cmlwX3RhZ3Mgc2ltaWxhcl90ZXh0IGV4cGxvZGUgaW1wbG9kZSBzZXRsb2NhbGUgbG9jYWxlY29udiBwYXJzZV9zdHIgc3RyX3BhZCBjaG9wIHN0cmNociBzcHJpbnRmIHByaW50ZiB2cHJpbnRmIHZzcHJpbnRmIHNzY2FuZiBmc2NhbmYgcGFyc2VfdXJsIHVybGVuY29kZSB1cmxkZWNvZGUgcmF3dXJsZW5jb2RlIHJhd3VybGRlY29kZSByZWFkbGluayBsaW5raW5mbyBsaW5rIHVubGluayBleGVjIHN5c3RlbSBlc2NhcGVzaGVsbGNtZCBlc2NhcGVzaGVsbGFyZyBwYXNzdGhydSBzaGVsbF9leGVjIHByb2Nfb3BlbiBwcm9jX2Nsb3NlIHJhbmQgc3JhbmQgZ2V0cmFuZG1heCBtdF9yYW5kIG10X3NyYW5kIG10X2dldHJhbmRtYXggYmFzZTY0X2RlY29kZSBiYXNlNjRfZW5jb2RlIGFicyBjZWlsIGZsb29yIHJvdW5kIGlzX2Zpbml0ZSBpc19uYW4gaXNfaW5maW5pdGUgYmluZGVjIGhleGRlYyBvY3RkZWMgZGVjYmluIGRlY29jdCBkZWNoZXggYmFzZV9jb252ZXJ0IG51bWJlcl9mb3JtYXQgZm1vZCBpcDJsb25nIGxvbmcyaXAgZ2V0ZW52IHB1dGVudiBnZXRvcHQgbWljcm90aW1lIGdldHRpbWVvZmRheSBnZXRydXNhZ2UgdW5pcWlkIHF1b3RlZF9wcmludGFibGVfZGVjb2RlIHNldF90aW1lX2xpbWl0IGdldF9jZmdfdmFyIG1hZ2ljX3F1b3Rlc19ydW50aW1lIHNldF9tYWdpY19xdW90ZXNfcnVudGltZSBnZXRfbWFnaWNfcXVvdGVzX2dwYyBnZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUgaW1wb3J0X3JlcXVlc3RfdmFyaWFibGVzIGVycm9yX2xvZyBzZXJpYWxpemUgdW5zZXJpYWxpemUgbWVtb3J5X2dldF91c2FnZSB2YXJfZHVtcCB2YXJfZXhwb3J0IGRlYnVnX3p2YWxfZHVtcCBwcmludF9yIGhpZ2hsaWdodF9maWxlIHNob3dfc291cmNlIGhpZ2hsaWdodF9zdHJpbmcgaW5pX2dldCBpbmlfZ2V0X2FsbCBpbmlfc2V0IGluaV9hbHRlciBpbmlfcmVzdG9yZSBnZXRfaW5jbHVkZV9wYXRoIHNldF9pbmNsdWRlX3BhdGggcmVzdG9yZV9pbmNsdWRlX3BhdGggc2V0Y29va2llIGhlYWRlciBoZWFkZXJzX3NlbnQgY29ubmVjdGlvbl9hYm9ydGVkIGNvbm5lY3Rpb25fc3RhdHVzIGlnbm9yZV91c2VyX2Fib3J0IHBhcnNlX2luaV9maWxlIGlzX3VwbG9hZGVkX2ZpbGUgbW92ZV91cGxvYWRlZF9maWxlIGludHZhbCBmbG9hdHZhbCBkb3VibGV2YWwgc3RydmFsIGdldHR5cGUgc2V0dHlwZSBpc19udWxsIGlzX3Jlc291cmNlIGlzX2Jvb2wgaXNfbG9uZyBpc19mbG9hdCBpc19pbnQgaXNfaW50ZWdlciBpc19kb3VibGUgaXNfcmVhbCBpc19udW1lcmljIGlzX3N0cmluZyBpc19hcnJheSBpc19vYmplY3QgaXNfc2NhbGFyIGVyZWcgZXJlZ19yZXBsYWNlIGVyZWdpIGVyZWdpX3JlcGxhY2Ugc3BsaXQgc3BsaXRpIGpvaW4gc3FsX3JlZ2Nhc2UgZGwgcGNsb3NlIHBvcGVuIHJlYWRmaWxlIHJld2luZCBybWRpciB1bWFzayBmY2xvc2UgZmVvZiBmZ2V0YyBmZ2V0cyBmZ2V0c3MgZnJlYWQgZm9wZW4gZnBhc3N0aHJ1IGZ0cnVuY2F0ZSBmc3RhdCBmc2VlayBmdGVsbCBmZmx1c2ggZndyaXRlIGZwdXRzIG1rZGlyIHJlbmFtZSBjb3B5IHRlbXBuYW0gdG1wZmlsZSBmaWxlIGZpbGVfZ2V0X2NvbnRlbnRzIGZpbGVfcHV0X2NvbnRlbnRzIHN0cmVhbV9zZWxlY3Qgc3RyZWFtX2NvbnRleHRfY3JlYXRlIHN0cmVhbV9jb250ZXh0X3NldF9wYXJhbXMgc3RyZWFtX2NvbnRleHRfc2V0X29wdGlvbiBzdHJlYW1fY29udGV4dF9nZXRfb3B0aW9ucyBzdHJlYW1fZmlsdGVyX3ByZXBlbmQgc3RyZWFtX2ZpbHRlcl9hcHBlbmQgZmdldGNzdiBmbG9jayBnZXRfbWV0YV90YWdzIHN0cmVhbV9zZXRfd3JpdGVfYnVmZmVyIHNldF9maWxlX2J1ZmZlciBzZXRfc29ja2V0X2Jsb2NraW5nIHN0cmVhbV9zZXRfYmxvY2tpbmcgc29ja2V0X3NldF9ibG9ja2luZyBzdHJlYW1fZ2V0X21ldGFfZGF0YSBzdHJlYW1fcmVnaXN0ZXJfd3JhcHBlciBzdHJlYW1fd3JhcHBlcl9yZWdpc3RlciBzdHJlYW1fc2V0X3RpbWVvdXQgc29ja2V0X3NldF90aW1lb3V0IHNvY2tldF9nZXRfc3RhdHVzIHJlYWxwYXRoIGZubWF0Y2ggZnNvY2tvcGVuIHBmc29ja29wZW4gcGFjayB1bnBhY2sgZ2V0X2Jyb3dzZXIgY3J5cHQgb3BlbmRpciBjbG9zZWRpciBjaGRpciBnZXRjd2QgcmV3aW5kZGlyIHJlYWRkaXIgZGlyIGdsb2IgZmlsZWF0aW1lIGZpbGVjdGltZSBmaWxlZ3JvdXAgZmlsZWlub2RlIGZpbGVtdGltZSBmaWxlb3duZXIgZmlsZXBlcm1zIGZpbGVzaXplIGZpbGV0eXBlIGZpbGVfZXhpc3RzIGlzX3dyaXRhYmxlIGlzX3dyaXRlYWJsZSBpc19yZWFkYWJsZSBpc19leGVjdXRhYmxlIGlzX2ZpbGUgaXNfZGlyIGlzX2xpbmsgc3RhdCBsc3RhdCBjaG93biB0b3VjaCBjbGVhcnN0YXRjYWNoZSBtYWlsIG9iX3N0YXJ0IG9iX2ZsdXNoIG9iX2NsZWFuIG9iX2VuZF9mbHVzaCBvYl9lbmRfY2xlYW4gb2JfZ2V0X2ZsdXNoIG9iX2dldF9jbGVhbiBvYl9nZXRfbGVuZ3RoIG9iX2dldF9sZXZlbCBvYl9nZXRfc3RhdHVzIG9iX2dldF9jb250ZW50cyBvYl9pbXBsaWNpdF9mbHVzaCBvYl9saXN0X2hhbmRsZXJzIGtzb3J0IGtyc29ydCBuYXRzb3J0IG5hdGNhc2Vzb3J0IGFzb3J0IGFyc29ydCBzb3J0IHJzb3J0IHVzb3J0IHVhc29ydCB1a3NvcnQgc2h1ZmZsZSBhcnJheV93YWxrIGNvdW50IGVuZCBwcmV2IG5leHQgcmVzZXQgY3VycmVudCBrZXkgbWluIG1heCBpbl9hcnJheSBhcnJheV9zZWFyY2ggZXh0cmFjdCBjb21wYWN0IGFycmF5X2ZpbGwgcmFuZ2UgYXJyYXlfbXVsdGlzb3J0IGFycmF5X3B1c2ggYXJyYXlfcG9wIGFycmF5X3NoaWZ0IGFycmF5X3Vuc2hpZnQgYXJyYXlfc3BsaWNlIGFycmF5X3NsaWNlIGFycmF5X21lcmdlIGFycmF5X21lcmdlX3JlY3Vyc2l2ZSBhcnJheV9rZXlzIGFycmF5X3ZhbHVlcyBhcnJheV9jb3VudF92YWx1ZXMgYXJyYXlfcmV2ZXJzZSBhcnJheV9yZWR1Y2UgYXJyYXlfcGFkIGFycmF5X2ZsaXAgYXJyYXlfY2hhbmdlX2tleV9jYXNlIGFycmF5X3JhbmQgYXJyYXlfdW5pcXVlIGFycmF5X2ludGVyc2VjdCBhcnJheV9pbnRlcnNlY3RfYXNzb2MgYXJyYXlfZGlmZiBhcnJheV9kaWZmX2Fzc29jIGFycmF5X3N1bSBhcnJheV9maWx0ZXIgYXJyYXlfbWFwIGFycmF5X2NodW5rIGFycmF5X2tleV9leGlzdHMgYXJyYXlfaW50ZXJzZWN0X2tleSBhcnJheV9jb21iaW5lIGFycmF5X2NvbHVtbiBwb3Mgc2l6ZW9mIGtleV9leGlzdHMgYXNzZXJ0IGFzc2VydF9vcHRpb25zIHZlcnNpb25fY29tcGFyZSBmdG9rIHN0cl9yb3QxMyBhZ2dyZWdhdGUgc2Vzc2lvbl9uYW1lIHNlc3Npb25fbW9kdWxlX25hbWUgc2Vzc2lvbl9zYXZlX3BhdGggc2Vzc2lvbl9pZCBzZXNzaW9uX3JlZ2VuZXJhdGVfaWQgc2Vzc2lvbl9kZWNvZGUgc2Vzc2lvbl9yZWdpc3RlciBzZXNzaW9uX3VucmVnaXN0ZXIgc2Vzc2lvbl9pc19yZWdpc3RlcmVkIHNlc3Npb25fZW5jb2RlIHNlc3Npb25fc3RhcnQgc2Vzc2lvbl9kZXN0cm95IHNlc3Npb25fdW5zZXQgc2Vzc2lvbl9zZXRfc2F2ZV9oYW5kbGVyIHNlc3Npb25fY2FjaGVfbGltaXRlciBzZXNzaW9uX2NhY2hlX2V4cGlyZSBzZXNzaW9uX3NldF9jb29raWVfcGFyYW1zIHNlc3Npb25fZ2V0X2Nvb2tpZV9wYXJhbXMgc2Vzc2lvbl93cml0ZV9jbG9zZSBwcmVnX21hdGNoIHByZWdfbWF0Y2hfYWxsIHByZWdfcmVwbGFjZSBwcmVnX3JlcGxhY2VfY2FsbGJhY2sgcHJlZ19zcGxpdCBwcmVnX3F1b3RlIHByZWdfZ3JlcCBvdmVybG9hZCBjdHlwZV9hbG51bSBjdHlwZV9hbHBoYSBjdHlwZV9jbnRybCBjdHlwZV9kaWdpdCBjdHlwZV9sb3dlciBjdHlwZV9ncmFwaCBjdHlwZV9wcmludCBjdHlwZV9wdW5jdCBjdHlwZV9zcGFjZSBjdHlwZV91cHBlciBjdHlwZV94ZGlnaXQgdmlydHVhbCBhcGFjaGVfcmVxdWVzdF9oZWFkZXJzIGFwYWNoZV9ub3RlIGFwYWNoZV9sb29rdXBfdXJpIGFwYWNoZV9jaGlsZF90ZXJtaW5hdGUgYXBhY2hlX3NldGVudiBhcGFjaGVfcmVzcG9uc2VfaGVhZGVycyBhcGFjaGVfZ2V0X3ZlcnNpb24gZ2V0YWxsaGVhZGVycyBteXNxbF9jb25uZWN0IG15c3FsX3Bjb25uZWN0IG15c3FsX2Nsb3NlIG15c3FsX3NlbGVjdF9kYiBteXNxbF9jcmVhdGVfZGIgbXlzcWxfZHJvcF9kYiBteXNxbF9xdWVyeSBteXNxbF91bmJ1ZmZlcmVkX3F1ZXJ5IG15c3FsX2RiX3F1ZXJ5IG15c3FsX2xpc3RfZGJzIG15c3FsX2xpc3RfdGFibGVzIG15c3FsX2xpc3RfZmllbGRzIG15c3FsX2xpc3RfcHJvY2Vzc2VzIG15c3FsX2Vycm9yIG15c3FsX2Vycm5vIG15c3FsX2FmZmVjdGVkX3Jvd3MgbXlzcWxfaW5zZXJ0X2lkIG15c3FsX3Jlc3VsdCBteXNxbF9udW1fcm93cyBteXNxbF9udW1fZmllbGRzIG15c3FsX2ZldGNoX3JvdyBteXNxbF9mZXRjaF9hcnJheSBteXNxbF9mZXRjaF9hc3NvYyBteXNxbF9mZXRjaF9vYmplY3QgbXlzcWxfZGF0YV9zZWVrIG15c3FsX2ZldGNoX2xlbmd0aHMgbXlzcWxfZmV0Y2hfZmllbGQgbXlzcWxfZmllbGRfc2VlayBteXNxbF9mcmVlX3Jlc3VsdCBteXNxbF9maWVsZF9uYW1lIG15c3FsX2ZpZWxkX3RhYmxlIG15c3FsX2ZpZWxkX2xlbiBteXNxbF9maWVsZF90eXBlIG15c3FsX2ZpZWxkX2ZsYWdzIG15c3FsX2VzY2FwZV9zdHJpbmcgbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nIG15c3FsX3N0YXQgbXlzcWxfdGhyZWFkX2lkIG15c3FsX2NsaWVudF9lbmNvZGluZyBteXNxbF9nZXRfY2xpZW50X2luZm8gbXlzcWxfZ2V0X2hvc3RfaW5mbyBteXNxbF9nZXRfcHJvdG9faW5mbyBteXNxbF9nZXRfc2VydmVyX2luZm8gbXlzcWxfaW5mbyBteXNxbCBteXNxbF9maWVsZG5hbWUgbXlzcWxfZmllbGR0YWJsZSBteXNxbF9maWVsZGxlbiBteXNxbF9maWVsZHR5cGUgbXlzcWxfZmllbGRmbGFncyBteXNxbF9zZWxlY3RkYiBteXNxbF9jcmVhdGVkYiBteXNxbF9kcm9wZGIgbXlzcWxfZnJlZXJlc3VsdCBteXNxbF9udW1maWVsZHMgbXlzcWxfbnVtcm93cyBteXNxbF9saXN0ZGJzIG15c3FsX2xpc3R0YWJsZXMgbXlzcWxfbGlzdGZpZWxkcyBteXNxbF9kYl9uYW1lIG15c3FsX2RibmFtZSBteXNxbF90YWJsZW5hbWUgbXlzcWxfdGFibGVfbmFtZSBwZ19jb25uZWN0IHBnX3Bjb25uZWN0IHBnX2Nsb3NlIHBnX2Nvbm5lY3Rpb25fc3RhdHVzIHBnX2Nvbm5lY3Rpb25fYnVzeSBwZ19jb25uZWN0aW9uX3Jlc2V0IHBnX2hvc3QgcGdfZGJuYW1lIHBnX3BvcnQgcGdfdHR5IHBnX29wdGlvbnMgcGdfcGluZyBwZ19xdWVyeSBwZ19zZW5kX3F1ZXJ5IHBnX2NhbmNlbF9xdWVyeSBwZ19mZXRjaF9yZXN1bHQgcGdfZmV0Y2hfcm93IHBnX2ZldGNoX2Fzc29jIHBnX2ZldGNoX2FycmF5IHBnX2ZldGNoX29iamVjdCBwZ19mZXRjaF9hbGwgcGdfYWZmZWN0ZWRfcm93cyBwZ19nZXRfcmVzdWx0IHBnX3Jlc3VsdF9zZWVrIHBnX3Jlc3VsdF9zdGF0dXMgcGdfZnJlZV9yZXN1bHQgcGdfbGFzdF9vaWQgcGdfbnVtX3Jvd3MgcGdfbnVtX2ZpZWxkcyBwZ19maWVsZF9uYW1lIHBnX2ZpZWxkX251bSBwZ19maWVsZF9zaXplIHBnX2ZpZWxkX3R5cGUgcGdfZmllbGRfcHJ0bGVuIHBnX2ZpZWxkX2lzX251bGwgcGdfZ2V0X25vdGlmeSBwZ19nZXRfcGlkIHBnX3Jlc3VsdF9lcnJvciBwZ19sYXN0X2Vycm9yIHBnX2xhc3Rfbm90aWNlIHBnX3B1dF9saW5lIHBnX2VuZF9jb3B5IHBnX2NvcHlfdG8gcGdfY29weV9mcm9tIHBnX3RyYWNlIHBnX3VudHJhY2UgcGdfbG9fY3JlYXRlIHBnX2xvX3VubGluayBwZ19sb19vcGVuIHBnX2xvX2Nsb3NlIHBnX2xvX3JlYWQgcGdfbG9fd3JpdGUgcGdfbG9fcmVhZF9hbGwgcGdfbG9faW1wb3J0IHBnX2xvX2V4cG9ydCBwZ19sb19zZWVrIHBnX2xvX3RlbGwgcGdfZXNjYXBlX3N0cmluZyBwZ19lc2NhcGVfYnl0ZWEgcGdfdW5lc2NhcGVfYnl0ZWEgcGdfY2xpZW50X2VuY29kaW5nIHBnX3NldF9jbGllbnRfZW5jb2RpbmcgcGdfbWV0YV9kYXRhIHBnX2NvbnZlcnQgcGdfaW5zZXJ0IHBnX3VwZGF0ZSBwZ19kZWxldGUgcGdfc2VsZWN0IHBnX2V4ZWMgcGdfZ2V0bGFzdG9pZCBwZ19jbWR0dXBsZXMgcGdfZXJyb3JtZXNzYWdlIHBnX251bXJvd3MgcGdfbnVtZmllbGRzIHBnX2ZpZWxkbmFtZSBwZ19maWVsZHNpemUgcGdfZmllbGR0eXBlIHBnX2ZpZWxkbnVtIHBnX2ZpZWxkcHJ0bGVuIHBnX2ZpZWxkaXNudWxsIHBnX2ZyZWVyZXN1bHQgcGdfcmVzdWx0IHBnX2xvcmVhZGFsbCBwZ19sb2NyZWF0ZSBwZ19sb3VubGluayBwZ19sb29wZW4gcGdfbG9jbG9zZSBwZ19sb3JlYWQgcGdfbG93cml0ZSBwZ19sb2ltcG9ydCBwZ19sb2V4cG9ydCBodHRwX3Jlc3BvbnNlX2NvZGUgZ2V0X2RlY2xhcmVkX3RyYWl0cyBnZXRpbWFnZXNpemVmcm9tc3RyaW5nIHNvY2tldF9pbXBvcnRfc3RyZWFtIHN0cmVhbV9zZXRfY2h1bmtfc2l6ZSB0cmFpdF9leGlzdHMgaGVhZGVyX3JlZ2lzdGVyX2NhbGxiYWNrIGNsYXNzX3VzZXMgc2Vzc2lvbl9zdGF0dXMgc2Vzc2lvbl9yZWdpc3Rlcl9zaHV0ZG93biBlY2hvIHByaW50IGdsb2JhbCBzdGF0aWMgZXhpdCBhcnJheSBlbXB0eSBldmFsIGlzc2V0IHVuc2V0IGRpZSBpbmNsdWRlIHJlcXVpcmUgaW5jbHVkZV9vbmNlIHJlcXVpcmVfb25jZSBqc29uX2RlY29kZSBqc29uX2VuY29kZSBqc29uX2xhc3RfZXJyb3IganNvbl9sYXN0X2Vycm9yX21zZyBjdXJsX2Nsb3NlIGN1cmxfY29weV9oYW5kbGUgY3VybF9lcnJubyBjdXJsX2Vycm9yIGN1cmxfZXNjYXBlIGN1cmxfZXhlYyBjdXJsX2ZpbGVfY3JlYXRlIGN1cmxfZ2V0aW5mbyBjdXJsX2luaXQgY3VybF9tdWx0aV9hZGRfaGFuZGxlIGN1cmxfbXVsdGlfY2xvc2UgY3VybF9tdWx0aV9leGVjIGN1cmxfbXVsdGlfZ2V0Y29udGVudCBjdXJsX211bHRpX2luZm9fcmVhZCBjdXJsX211bHRpX2luaXQgY3VybF9tdWx0aV9yZW1vdmVfaGFuZGxlIGN1cmxfbXVsdGlfc2VsZWN0IGN1cmxfbXVsdGlfc2V0b3B0IGN1cmxfbXVsdGlfc3RyZXJyb3IgY3VybF9wYXVzZSBjdXJsX3Jlc2V0IGN1cmxfc2V0b3B0X2FycmF5IGN1cmxfc2V0b3B0IGN1cmxfc2hhcmVfY2xvc2UgY3VybF9zaGFyZV9pbml0IGN1cmxfc2hhcmVfc2V0b3B0IGN1cmxfc3RyZXJyb3IgY3VybF91bmVzY2FwZSBjdXJsX3ZlcnNpb24gbXlzcWxpX2FmZmVjdGVkX3Jvd3MgbXlzcWxpX2F1dG9jb21taXQgbXlzcWxpX2NoYW5nZV91c2VyIG15c3FsaV9jaGFyYWN0ZXJfc2V0X25hbWUgbXlzcWxpX2Nsb3NlIG15c3FsaV9jb21taXQgbXlzcWxpX2Nvbm5lY3RfZXJybm8gbXlzcWxpX2Nvbm5lY3RfZXJyb3IgbXlzcWxpX2Nvbm5lY3QgbXlzcWxpX2RhdGFfc2VlayBteXNxbGlfZGVidWcgbXlzcWxpX2R1bXBfZGVidWdfaW5mbyBteXNxbGlfZXJybm8gbXlzcWxpX2Vycm9yX2xpc3QgbXlzcWxpX2Vycm9yIG15c3FsaV9mZXRjaF9hbGwgbXlzcWxpX2ZldGNoX2FycmF5IG15c3FsaV9mZXRjaF9hc3NvYyBteXNxbGlfZmV0Y2hfZmllbGRfZGlyZWN0IG15c3FsaV9mZXRjaF9maWVsZCBteXNxbGlfZmV0Y2hfZmllbGRzIG15c3FsaV9mZXRjaF9sZW5ndGhzIG15c3FsaV9mZXRjaF9vYmplY3QgbXlzcWxpX2ZldGNoX3JvdyBteXNxbGlfZmllbGRfY291bnQgbXlzcWxpX2ZpZWxkX3NlZWsgbXlzcWxpX2ZpZWxkX3RlbGwgbXlzcWxpX2ZyZWVfcmVzdWx0IG15c3FsaV9nZXRfY2hhcnNldCBteXNxbGlfZ2V0X2NsaWVudF9pbmZvIG15c3FsaV9nZXRfY2xpZW50X3N0YXRzIG15c3FsaV9nZXRfY2xpZW50X3ZlcnNpb24gbXlzcWxpX2dldF9jb25uZWN0aW9uX3N0YXRzIG15c3FsaV9nZXRfaG9zdF9pbmZvIG15c3FsaV9nZXRfcHJvdG9faW5mbyBteXNxbGlfZ2V0X3NlcnZlcl9pbmZvIG15c3FsaV9nZXRfc2VydmVyX3ZlcnNpb24gbXlzcWxpX2luZm8gbXlzcWxpX2luaXQgbXlzcWxpX2luc2VydF9pZCBteXNxbGlfa2lsbCBteXNxbGlfbW9yZV9yZXN1bHRzIG15c3FsaV9tdWx0aV9xdWVyeSBteXNxbGlfbmV4dF9yZXN1bHQgbXlzcWxpX251bV9maWVsZHMgbXlzcWxpX251bV9yb3dzIG15c3FsaV9vcHRpb25zIG15c3FsaV9waW5nIG15c3FsaV9wcmVwYXJlIG15c3FsaV9xdWVyeSBteXNxbGlfcmVhbF9jb25uZWN0IG15c3FsaV9yZWFsX2VzY2FwZV9zdHJpbmcgbXlzcWxpX3JlYWxfcXVlcnkgbXlzcWxpX3JlYXBfYXN5bmNfcXVlcnkgbXlzcWxpX3JlZnJlc2ggbXlzcWxpX3JvbGxiYWNrIG15c3FsaV9zZWxlY3RfZGIgbXlzcWxpX3NldF9jaGFyc2V0IG15c3FsaV9zZXRfbG9jYWxfaW5maWxlX2RlZmF1bHQgbXlzcWxpX3NldF9sb2NhbF9pbmZpbGVfaGFuZGxlciBteXNxbGlfc3Fsc3RhdGUgbXlzcWxpX3NzbF9zZXQgbXlzcWxpX3N0YXQgbXlzcWxpX3N0bXRfaW5pdCBteXNxbGlfc3RvcmVfcmVzdWx0IG15c3FsaV90aHJlYWRfaWQgbXlzcWxpX3RocmVhZF9zYWZlIG15c3FsaV91c2VfcmVzdWx0IG15c3FsaV93YXJuaW5nX2NvdW50XCI7XG4gIENvZGVNaXJyb3IucmVnaXN0ZXJIZWxwZXIoXCJoaW50V29yZHNcIiwgXCJwaHBcIiwgW3BocEtleXdvcmRzLCBwaHBBdG9tcywgcGhwQnVpbHRpbl0uam9pbihcIiBcIikuc3BsaXQoXCIgXCIpKTtcbiAgQ29kZU1pcnJvci5yZWdpc3RlckhlbHBlcihcIndvcmRDaGFyc1wiLCBcInBocFwiLCAvW1xcdyRdLyk7XG5cbiAgdmFyIHBocENvbmZpZyA9IHtcbiAgICBuYW1lOiBcImNsaWtlXCIsXG4gICAgaGVscGVyVHlwZTogXCJwaHBcIixcbiAgICBrZXl3b3Jkczoga2V5d29yZHMocGhwS2V5d29yZHMpLFxuICAgIGJsb2NrS2V5d29yZHM6IGtleXdvcmRzKFwiY2F0Y2ggZG8gZWxzZSBlbHNlaWYgZm9yIGZvcmVhY2ggaWYgc3dpdGNoIHRyeSB3aGlsZSBmaW5hbGx5XCIpLFxuICAgIGRlZktleXdvcmRzOiBrZXl3b3JkcyhcImNsYXNzIGZ1bmN0aW9uIGludGVyZmFjZSBuYW1lc3BhY2UgdHJhaXRcIiksXG4gICAgYXRvbXM6IGtleXdvcmRzKHBocEF0b21zKSxcbiAgICBidWlsdGluOiBrZXl3b3JkcyhwaHBCdWlsdGluKSxcbiAgICBtdWx0aUxpbmVTdHJpbmdzOiB0cnVlLFxuICAgIGhvb2tzOiB7XG4gICAgICBcIiRcIjogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcJF9dLyk7XG4gICAgICAgIHJldHVybiBcInZhcmlhYmxlLTJcIjtcbiAgICAgIH0sXG4gICAgICBcIjxcIjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICB2YXIgYmVmb3JlO1xuICAgICAgICBpZiAoYmVmb3JlID0gc3RyZWFtLm1hdGNoKC88PFxccyovKSkge1xuICAgICAgICAgIHZhciBxdW90ZWQgPSBzdHJlYW0uZWF0KC9bJ1wiXS8pO1xuICAgICAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcLl0vKTtcbiAgICAgICAgICB2YXIgZGVsaW0gPSBzdHJlYW0uY3VycmVudCgpLnNsaWNlKGJlZm9yZVswXS5sZW5ndGggKyAocXVvdGVkID8gMiA6IDEpKTtcbiAgICAgICAgICBpZiAocXVvdGVkKSBzdHJlYW0uZWF0KHF1b3RlZCk7XG4gICAgICAgICAgaWYgKGRlbGltKSB7XG4gICAgICAgICAgICAoc3RhdGUudG9rU3RhY2sgfHwgKHN0YXRlLnRva1N0YWNrID0gW10pKS5wdXNoKGRlbGltLCAwKTtcbiAgICAgICAgICAgIHN0YXRlLnRva2VuaXplID0gcGhwU3RyaW5nKGRlbGltLCBxdW90ZWQgIT0gXCInXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBcIiNcIjogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIHdoaWxlICghc3RyZWFtLmVvbCgpICYmICFzdHJlYW0ubWF0Y2goXCI/PlwiLCBmYWxzZSkpIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH0sXG4gICAgICBcIi9cIjogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICAgIGlmIChzdHJlYW0uZWF0KFwiL1wiKSkge1xuICAgICAgICAgIHdoaWxlICghc3RyZWFtLmVvbCgpICYmICFzdHJlYW0ubWF0Y2goXCI/PlwiLCBmYWxzZSkpIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICAnXCInOiBmdW5jdGlvbihfc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICAoc3RhdGUudG9rU3RhY2sgfHwgKHN0YXRlLnRva1N0YWNrID0gW10pKS5wdXNoKCdcIicsIDApO1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHBocFN0cmluZygnXCInKTtcbiAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICB9LFxuICAgICAgXCJ7XCI6IGZ1bmN0aW9uKF9zdHJlYW0sIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZS50b2tTdGFjayAmJiBzdGF0ZS50b2tTdGFjay5sZW5ndGgpXG4gICAgICAgICAgc3RhdGUudG9rU3RhY2tbc3RhdGUudG9rU3RhY2subGVuZ3RoIC0gMV0rKztcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIFwifVwiOiBmdW5jdGlvbihfc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUudG9rU3RhY2sgJiYgc3RhdGUudG9rU3RhY2subGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgIS0tc3RhdGUudG9rU3RhY2tbc3RhdGUudG9rU3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHBocFN0cmluZyhzdGF0ZS50b2tTdGFja1tzdGF0ZS50b2tTdGFjay5sZW5ndGggLSAyXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1vZGUoXCJwaHBcIiwgZnVuY3Rpb24oY29uZmlnLCBwYXJzZXJDb25maWcpIHtcbiAgICB2YXIgaHRtbE1vZGUgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCAocGFyc2VyQ29uZmlnICYmIHBhcnNlckNvbmZpZy5odG1sTW9kZSkgfHwgXCJ0ZXh0L2h0bWxcIik7XG4gICAgdmFyIHBocE1vZGUgPSBDb2RlTWlycm9yLmdldE1vZGUoY29uZmlnLCBwaHBDb25maWcpO1xuXG4gICAgZnVuY3Rpb24gZGlzcGF0Y2goc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIGlzUEhQID0gc3RhdGUuY3VyTW9kZSA9PSBwaHBNb2RlO1xuICAgICAgaWYgKHN0cmVhbS5zb2woKSAmJiBzdGF0ZS5wZW5kaW5nICYmIHN0YXRlLnBlbmRpbmcgIT0gJ1wiJyAmJiBzdGF0ZS5wZW5kaW5nICE9IFwiJ1wiKSBzdGF0ZS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIGlmICghaXNQSFApIHtcbiAgICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXjxcXD9cXHcqLykpIHtcbiAgICAgICAgICBzdGF0ZS5jdXJNb2RlID0gcGhwTW9kZTtcbiAgICAgICAgICBpZiAoIXN0YXRlLnBocCkgc3RhdGUucGhwID0gQ29kZU1pcnJvci5zdGFydFN0YXRlKHBocE1vZGUsIGh0bWxNb2RlLmluZGVudChzdGF0ZS5odG1sLCBcIlwiKSlcbiAgICAgICAgICBzdGF0ZS5jdXJTdGF0ZSA9IHN0YXRlLnBocDtcbiAgICAgICAgICByZXR1cm4gXCJtZXRhXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLnBlbmRpbmcgPT0gJ1wiJyB8fCBzdGF0ZS5wZW5kaW5nID09IFwiJ1wiKSB7XG4gICAgICAgICAgd2hpbGUgKCFzdHJlYW0uZW9sKCkgJiYgc3RyZWFtLm5leHQoKSAhPSBzdGF0ZS5wZW5kaW5nKSB7fVxuICAgICAgICAgIHZhciBzdHlsZSA9IFwic3RyaW5nXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUucGVuZGluZyAmJiBzdHJlYW0ucG9zIDwgc3RhdGUucGVuZGluZy5lbmQpIHtcbiAgICAgICAgICBzdHJlYW0ucG9zID0gc3RhdGUucGVuZGluZy5lbmQ7XG4gICAgICAgICAgdmFyIHN0eWxlID0gc3RhdGUucGVuZGluZy5zdHlsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3R5bGUgPSBodG1sTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmN1clN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUucGVuZGluZykgc3RhdGUucGVuZGluZyA9IG51bGw7XG4gICAgICAgIHZhciBjdXIgPSBzdHJlYW0uY3VycmVudCgpLCBvcGVuUEhQID0gY3VyLnNlYXJjaCgvPFxcPy8pLCBtO1xuICAgICAgICBpZiAob3BlblBIUCAhPSAtMSkge1xuICAgICAgICAgIGlmIChzdHlsZSA9PSBcInN0cmluZ1wiICYmIChtID0gY3VyLm1hdGNoKC9bXFwnXFxcIl0kLykpICYmICEvXFw/Pi8udGVzdChjdXIpKSBzdGF0ZS5wZW5kaW5nID0gbVswXTtcbiAgICAgICAgICBlbHNlIHN0YXRlLnBlbmRpbmcgPSB7ZW5kOiBzdHJlYW0ucG9zLCBzdHlsZTogc3R5bGV9O1xuICAgICAgICAgIHN0cmVhbS5iYWNrVXAoY3VyLmxlbmd0aCAtIG9wZW5QSFApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQSFAgJiYgc3RhdGUucGhwLnRva2VuaXplID09IG51bGwgJiYgc3RyZWFtLm1hdGNoKFwiPz5cIikpIHtcbiAgICAgICAgc3RhdGUuY3VyTW9kZSA9IGh0bWxNb2RlO1xuICAgICAgICBzdGF0ZS5jdXJTdGF0ZSA9IHN0YXRlLmh0bWw7XG4gICAgICAgIGlmICghc3RhdGUucGhwLmNvbnRleHQucHJldikgc3RhdGUucGhwID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBocE1vZGUudG9rZW4oc3RyZWFtLCBzdGF0ZS5jdXJTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IENvZGVNaXJyb3Iuc3RhcnRTdGF0ZShodG1sTW9kZSlcbiAgICAgICAgdmFyIHBocCA9IHBhcnNlckNvbmZpZy5zdGFydE9wZW4gPyBDb2RlTWlycm9yLnN0YXJ0U3RhdGUocGhwTW9kZSkgOiBudWxsXG4gICAgICAgIHJldHVybiB7aHRtbDogaHRtbCxcbiAgICAgICAgICAgICAgICBwaHA6IHBocCxcbiAgICAgICAgICAgICAgICBjdXJNb2RlOiBwYXJzZXJDb25maWcuc3RhcnRPcGVuID8gcGhwTW9kZSA6IGh0bWxNb2RlLFxuICAgICAgICAgICAgICAgIGN1clN0YXRlOiBwYXJzZXJDb25maWcuc3RhcnRPcGVuID8gcGhwIDogaHRtbCxcbiAgICAgICAgICAgICAgICBwZW5kaW5nOiBudWxsfTtcbiAgICAgIH0sXG5cbiAgICAgIGNvcHlTdGF0ZTogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBzdGF0ZS5odG1sLCBodG1sTmV3ID0gQ29kZU1pcnJvci5jb3B5U3RhdGUoaHRtbE1vZGUsIGh0bWwpLFxuICAgICAgICAgICAgcGhwID0gc3RhdGUucGhwLCBwaHBOZXcgPSBwaHAgJiYgQ29kZU1pcnJvci5jb3B5U3RhdGUocGhwTW9kZSwgcGhwKSwgY3VyO1xuICAgICAgICBpZiAoc3RhdGUuY3VyTW9kZSA9PSBodG1sTW9kZSkgY3VyID0gaHRtbE5ldztcbiAgICAgICAgZWxzZSBjdXIgPSBwaHBOZXc7XG4gICAgICAgIHJldHVybiB7aHRtbDogaHRtbE5ldywgcGhwOiBwaHBOZXcsIGN1ck1vZGU6IHN0YXRlLmN1ck1vZGUsIGN1clN0YXRlOiBjdXIsXG4gICAgICAgICAgICAgICAgcGVuZGluZzogc3RhdGUucGVuZGluZ307XG4gICAgICB9LFxuXG4gICAgICB0b2tlbjogZGlzcGF0Y2gsXG5cbiAgICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikge1xuICAgICAgICBpZiAoKHN0YXRlLmN1ck1vZGUgIT0gcGhwTW9kZSAmJiAvXlxccyo8XFwvLy50ZXN0KHRleHRBZnRlcikpIHx8XG4gICAgICAgICAgICAoc3RhdGUuY3VyTW9kZSA9PSBwaHBNb2RlICYmIC9eXFw/Pi8udGVzdCh0ZXh0QWZ0ZXIpKSlcbiAgICAgICAgICByZXR1cm4gaHRtbE1vZGUuaW5kZW50KHN0YXRlLmh0bWwsIHRleHRBZnRlcik7XG4gICAgICAgIHJldHVybiBzdGF0ZS5jdXJNb2RlLmluZGVudChzdGF0ZS5jdXJTdGF0ZSwgdGV4dEFmdGVyKTtcbiAgICAgIH0sXG5cbiAgICAgIGJsb2NrQ29tbWVudFN0YXJ0OiBcIi8qXCIsXG4gICAgICBibG9ja0NvbW1lbnRFbmQ6IFwiKi9cIixcbiAgICAgIGxpbmVDb21tZW50OiBcIi8vXCIsXG5cbiAgICAgIGlubmVyTW9kZTogZnVuY3Rpb24oc3RhdGUpIHsgcmV0dXJuIHtzdGF0ZTogc3RhdGUuY3VyU3RhdGUsIG1vZGU6IHN0YXRlLmN1ck1vZGV9OyB9XG4gICAgfTtcbiAgfSwgXCJodG1sbWl4ZWRcIiwgXCJjbGlrZVwiKTtcblxuICBDb2RlTWlycm9yLmRlZmluZU1JTUUoXCJhcHBsaWNhdGlvbi94LWh0dHBkLXBocFwiLCBcInBocFwiKTtcbiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FKFwiYXBwbGljYXRpb24veC1odHRwZC1waHAtb3BlblwiLCB7bmFtZTogXCJwaHBcIiwgc3RhcnRPcGVuOiB0cnVlfSk7XG4gIENvZGVNaXJyb3IuZGVmaW5lTUlNRShcInRleHQveC1waHBcIiwgcGhwQ29uZmlnKTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29kZW1pcnJvci9tb2RlL3BocC9waHAuanNcbi8vIG1vZHVsZSBpZCA9IDYwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9bWFya2Rvd24tZmllbGR0eXBlLXdyYXBwZXIgOmNsYXNzPVxcXCJ7J21hcmtkb3duLWZ1bGxzY3JlZW4nOiBmdWxsU2NyZWVuTW9kZX1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJtYXJrZG93bi10b29sYmFyIGNsZWFyZml4XFxcIj4gPHVsIGNsYXNzPW1hcmtkb3duLW1vZGVzPiA8bGkgOmNsYXNzPVxcXCJ7ICdhY3RpdmUnOiBtb2RlID09ICd3cml0ZScgfVxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9XFxcIm1vZGUgPSAnd3JpdGUnXFxcIiB0YWJpbmRleD0tMT57eyB0cmFuc2xhdGUoJ2NwLndyaXRlJykgfX08L2E+IDwvbGk+IDxsaSA6Y2xhc3M9XFxcInsgJ2FjdGl2ZSc6IG1vZGUgPT0gJ3ByZXZpZXcnIH1cXFwiPiA8YSBocmVmPVxcXCJcXFwiIEBjbGljay5wcmV2ZW50PVxcXCJtb2RlID0gJ3ByZXZpZXcnXFxcIiB0YWJpbmRleD0tMT57eyB0cmFuc2xhdGUoJ2NwLnByZXZpZXcnKSB9fTwvYT4gPC9saT4gPC91bD4gPHVsIGNsYXNzPW1hcmtkb3duLWJ1dHRvbnM+IDxsaT48YSBAY2xpY2s9Ym9sZCB0YWJpbmRleD0tMT48Yj5CPC9iPjwvYT48L2xpPiA8bGk+PGEgQGNsaWNrPWl0YWxpYyB0YWJpbmRleD0tMT48aT5pPC9pPjwvYT48L2xpPiA8bGk+PGEgQGNsaWNrPVxcXCJpbnNlcnRMaW5rKCcnKVxcXCIgdGFiaW5kZXg9LTE+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tbGlua1xcXCI+PC9zcGFuPiA8L2E+PC9saT4gPGxpPjxhIEBjbGljaz1cXFwiaW5zZXJ0SW1hZ2UoJycpXFxcIiB0YWJpbmRleD0tMT4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1pbWFnZVxcXCI+PC9zcGFuPiA8L2E+PC9saT4gPGxpPjxhIEBjbGljaz10b2dnbGVGdWxsU2NyZWVuIHRhYmluZGV4PS0xPiA8c3BhbiBjbGFzcz1pY29uIDpjbGFzcz1cXFwie1xcbiAgICAgICAgICAgICAgICAgICAgJ2ljb24tcmVzaXplLWZ1bGwtc2NyZWVuJyA6ICEgZnVsbFNjcmVlbk1vZGUsXFxuICAgICAgICAgICAgICAgICAgICAnaWNvbi1yZXNpemUtMTAwJyA6IGZ1bGxTY3JlZW5Nb2RlXFxuICAgICAgICAgICAgICAgICAgICB9XFxcIj48L3NwYW4+IDwvYT48L2xpPiA8L3VsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibW9kZS13cmFwIG1vZGUte3sgbW9kZSB9fVxcXCI+IDxkaXYgY2xhc3M9bWFya2Rvd24td3JpdGVyIHYtZWw6d3JpdGVyIHYtc2hvdz1cXFwibW9kZSA9PSAnd3JpdGUnXFxcIiBAZHJhZ292ZXI9XFxcImRyYWdnaW5nRmlsZSA9IHRydWVcXFwiIEBkcmFnbGVhdmU9XFxcImRyYWdnaW5nRmlsZSA9IGZhbHNlXFxcIiBAZHJvcD1cXFwiZHJhZ2dpbmdGaWxlID0gZmFsc2VcXFwiIEBrZXlkb3duPXNob3J0Y3V0PiA8ZGl2IGNsYXNzPWVkaXRvciB2LWVsOmNvZGVtaXJyb3I+PC9kaXY+IDxkaXYgY2xhc3M9aGVscGVycyB2LWlmPVxcXCJjaGVhdHNoZWV0IHx8IGFzc2V0c0VuYWJsZWRcXFwiPiA8ZGl2IGNsYXNzPW1hcmtkb3duLWNoZWF0c2hlZXQtaGVscGVyIHYtaWY9Y2hlYXRzaGVldD4gPGEgaHJlZj1cXFwiXFxcIiBAY2xpY2sucHJldmVudD1cXFwic2hvd0NoZWF0c2hlZXQgPSB0cnVlXFxcIj4gPHN2ZyB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyB3aWR0aD0yMDggaGVpZ2h0PTEyOCB2aWV3Qm94PVxcXCIwIDAgMjA4IDEyOFxcXCI+PG1hc2sgaWQ9YT48cmVjdCB3aWR0aD0xMDAlIGhlaWdodD0xMDAlIGZpbGw9I2ZmZiAvPjxwYXRoIGQ9XFxcIk0zMCA5OHYtNjhoMjBsMjAgMjUgMjAtMjVoMjB2NjhoLTIwdi0zOWwtMjAgMjUtMjAtMjV2Mzl6TTE1NSA5OGwtMzAtMzNoMjB2LTM1aDIwdjM1aDIwelxcXCIvPjwvbWFzaz48cmVjdCB3aWR0aD0xMDAlIGhlaWdodD0xMDAlIHJ5PTE1IG1hc2s9dXJsKCNhKSAvPjwvc3ZnPiB7eyB0cmFuc2xhdGUoJ2NwLm1hcmtkb3duX2NoZWF0c2hlZXQnKSB9fSA8L2E+IDwvZGl2PiA8ZGl2IGNsYXNzPW1hcmtkb3duLWFzc2V0LWhlbHBlciB2LWlmPWFzc2V0c0VuYWJsZWQ+IDxhIGhyZWY9XFxcIlxcXCIgQGNsaWNrLnByZXZlbnQ9YWRkQXNzZXQ+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1pbWFnZVxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmFkZF9hc3NldCcpIH19PC9hPiAob3IgZHJhZyAmYW1wOyBkcm9wKSA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9ZHJhZy1ub3RpZmljYXRpb24gdi1pZj1cXFwiYXNzZXRzRW5hYmxlZCAmJiBkcmFnZ2luZ0ZpbGVcXFwiPiA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLWRvd25sb2FkXFxcIj48L2k+IDxoMz57eyB0cmFuc2xhdGUoJ2NwLmRyb3BfdG9fdXBsb2FkJykgfX08L2gzPiA8L2Rpdj4gPC9kaXY+IDxkaXYgdi1zaG93PVxcXCJtb2RlID09ICdwcmV2aWV3J1xcXCIgdi1odG1sPVxcXCJkYXRhIHx8ICcnIHwgbWFya2Rvd25cXFwiIGNsYXNzPW1hcmtkb3duLXByZXZpZXc+PC9kaXY+IDwvZGl2PiA8c2VsZWN0b3Igdi1pZj1zaG93QXNzZXRTZWxlY3RvciA6Y29udGFpbmVyPWNvbnRhaW5lciA6Zm9sZGVyPWZvbGRlciA6c2VsZWN0ZWQ9c2VsZWN0ZWRBc3NldHMgOnJlc3RyaWN0LW5hdmlnYXRpb249cmVzdHJpY3RBc3NldE5hdmlnYXRpb24gQHNlbGVjdGVkPWFzc2V0c1NlbGVjdGVkIEBjbG9zZWQ9Y2xvc2VBc3NldFNlbGVjdG9yPjwvc2VsZWN0b3I+IDx1cGxvYWRlciB2LXJlZjp1cGxvYWRlciB2LWlmPVxcXCIhIHNob3dBc3NldFNlbGVjdG9yXFxcIiA6ZG9tLWVsZW1lbnQ9dXBsb2FkRWxlbWVudCA6Y29udGFpbmVyPWNvbnRhaW5lciA6cGF0aD1mb2xkZXIgQHVwbG9hZC1jb21wbGV0ZT11cGxvYWRDb21wbGV0ZT4gPC91cGxvYWRlcj4gPG1vZGFsIDpzaG93LnN5bmM9c2hvd0NoZWF0c2hlZXQgY2xhc3M9bWFya2Rvd24tbW9kYWw+IDx0ZW1wbGF0ZSBzbG90PWhlYWRlcj57eyB0cmFuc2xhdGUoJ2NwLm1hcmtkb3duX2NoZWF0c2hlZXQnKSB9fTwvdGVtcGxhdGU+IDx0ZW1wbGF0ZSBzbG90PWJvZHk+IHt7eyB0cmFuc2xhdGUoJ21hcmtkb3duLmNoZWF0c2hlZXQnKSB9fX0gPC90ZW1wbGF0ZT4gPC9tb2RhbD4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9NYXJrZG93bkZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9QYWdlc0ZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUGFnZXNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2MDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHNjcmlwdD5cbmltcG9ydCBBZGFwdHNSZWxhdGVGaWVsZHR5cGUgZnJvbSAnLi9BZGFwdHNSZWxhdGVGaWVsZHR5cGUudnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbQWRhcHRzUmVsYXRlRmllbGR0eXBlXVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gUGFnZXNGaWVsZHR5cGUudnVlPzdiMzVlZDEwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vUmFkaW9GaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9SYWRpb0ZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUmFkaW9GaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2MDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJyYWRpby1maWVsZHR5cGUtd3JhcHBlclwiPlxuICAgICAgICA8dWwgOmNsYXNzPVwiW1xuICAgICAgICAgICAgJ2xpc3QtdW5zdHlsZWQnLFxuICAgICAgICAgICAgY29uZmlnLmlubGluZSA/ICdsaXN0LWlubGluZSBtYi0wJyA6ICcnXG4gICAgICAgIF1cIj5cbiAgICAgICAgICAgIDxsaSB2LWZvcj1cIm9wdGlvbiBpbiBjb25maWcub3B0aW9uc1wiIDpjbGFzcz1cInsgJ21iLTAgbXItMic6IGNvbmZpZy5pbmxpbmUgfVwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiB2LW1vZGVsPVwiZGF0YVwiIDp2YWx1ZT1cIm9wdGlvbi52YWx1ZVwiIDppZD1cIm5hbWUgKyAnLScgKyAkaW5kZXhcIiAvPlxuICAgICAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVwibmFtZSArICctJyArICRpbmRleFwiPnt7IG9wdGlvbi50ZXh0IH19PC9sYWJlbD5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLm5hbWV9LTBgKS5mb2N1cygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFJlcGxpY2F0b3JQcmV2aWV3VGV4dCgpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBfLmZpbmRXaGVyZSh0aGlzLmNvbmZpZy5vcHRpb25zLCB7dmFsdWU6IHRoaXMuZGF0YX0pO1xuICAgICAgICAgICAgcmV0dXJuIChvcHRpb24pID8gb3B0aW9uLnRleHQgOiB0aGlzLmRhdGE7XG4gICAgICAgIH0sXG5cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gUmFkaW9GaWVsZHR5cGUudnVlPzgwZDI0YWFjIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXJhZGlvLWZpZWxkdHlwZS13cmFwcGVyPiA8dWwgOmNsYXNzPVxcXCJbXFxuICAgICAgICAnbGlzdC11bnN0eWxlZCcsXFxuICAgICAgICBjb25maWcuaW5saW5lID8gJ2xpc3QtaW5saW5lIG1iLTAnIDogJydcXG4gICAgXVxcXCI+IDxsaSB2LWZvcj1cXFwib3B0aW9uIGluIGNvbmZpZy5vcHRpb25zXFxcIiA6Y2xhc3M9XFxcInsgJ21iLTAgbXItMic6IGNvbmZpZy5pbmxpbmUgfVxcXCI+IDxpbnB1dCB0eXBlPXJhZGlvIHYtbW9kZWw9ZGF0YSA6dmFsdWU9b3B0aW9uLnZhbHVlIDppZD1cXFwibmFtZSArICctJyArICRpbmRleFxcXCIvPiA8bGFiZWwgOmZvcj1cXFwibmFtZSArICctJyArICRpbmRleFxcXCI+e3sgb3B0aW9uLnRleHQgfX08L2xhYmVsPiA8L2xpPiA8L3VsPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1JhZGlvRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JlZGFjdG9yRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vUmVkYWN0b3JGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlZGFjdG9yL1JlZGFjdG9yRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicmVkYWN0b3ItZmllbGR0eXBlLXdyYXBwZXJcIj5cbiAgICAgICAgPHRleHRhcmVhIHYtZWw6cmVkYWN0b3IgOm5hbWU9XCJuYW1lXCIgdi1tb2RlbD1cImRhdGFcIj48L3RleHRhcmVhPlxuICAgICAgICA8c2VsZWN0b3Igdi1pZj1cInNob3dBc3NldFNlbGVjdG9yXCJcbiAgICAgICAgICAgICAgICAgIDpjb250YWluZXI9XCJjb250YWluZXJcIlxuICAgICAgICAgICAgICAgICAgOmZvbGRlcj1cImZvbGRlclwiXG4gICAgICAgICAgICAgICAgICA6c2VsZWN0ZWQ9XCJzZWxlY3RlZEFzc2V0c1wiXG4gICAgICAgICAgICAgICAgICA6cmVzdHJpY3QtbmF2aWdhdGlvbj1cInJlc3RyaWN0QXNzZXROYXZpZ2F0aW9uXCJcbiAgICAgICAgICAgICAgICAgIEBzZWxlY3RlZD1cImFzc2V0c1NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgIEBjbG9zZWQ9XCJjbG9zZUFzc2V0U2VsZWN0b3JcIlxuICAgICAgICA+PC9zZWxlY3Rvcj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgSW5zZXJ0c0Fzc2V0cyBmcm9tICcuLi9JbnNlcnRzQXNzZXRzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBzZWxlY3RvcjogcmVxdWlyZSgnLi4vLi4vYXNzZXRzL1NlbGVjdG9yLnZ1ZScpXG4gICAgfSxcblxuICAgIG1peGluczogW0luc2VydHNBc3NldHMsIEZpZWxkdHlwZV0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGU6ICd3cml0ZSdcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gaHRtbDtcbiAgICAgICAgfSxcblxuICAgICAgICBpbnNlcnRMaW5rOiBmdW5jdGlvbih1cmwsIHRleHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9ICQodGhpcy4kZWxzLnJlZGFjdG9yKS5yZWRhY3Rvcignc2VsZWN0aW9uLmdldEh0bWwnKTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRleHQgPSBzZWxlY3Rpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQodGhpcy4kZWxzLnJlZGFjdG9yKS5yZWRhY3RvcihcbiAgICAgICAgICAgICAgICAnaW5zZXJ0Lmh0bWwnLFxuICAgICAgICAgICAgICAgICc8YSBocmVmPVwiJyArIHVybCArICdcIj4nICsgdGV4dCArICc8L2E+J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbnNlcnRJbWFnZTogZnVuY3Rpb24odXJsLCB0ZXh0KSB7XG4gICAgICAgICAgICAkKHRoaXMuJGVscy5yZWRhY3RvcikucmVkYWN0b3IoXG4gICAgICAgICAgICAgICAgJ2luc2VydC5odG1sJyxcbiAgICAgICAgICAgICAgICAnPGltZyBzcmM9XCInICsgdXJsICsgJ1wiIGFsdD1cIicgKyB0ZXh0ICsgJ1wiIC8+J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhcHBlbmRJbWFnZTogZnVuY3Rpb24odXJsLCB0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgJHIgPSAkKHRoaXMuJGVscy5yZWRhY3Rvcik7XG5cbiAgICAgICAgICAgIHZhciBjb2RlID0gJHIucmVkYWN0b3IoJ2NvZGUuZ2V0Jyk7XG5cbiAgICAgICAgICAgICRyLnJlZGFjdG9yKFxuICAgICAgICAgICAgICAgICdjb2RlLnNldCcsXG4gICAgICAgICAgICAgICAgY29kZSArICc8aW1nIHNyYz1cIicgKyB1cmwgKyAnXCIgYWx0PVwiJyArIHRleHQgKyAnXCIgLz4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGVuZExpbms6IGZ1bmN0aW9uKHVybCwgdGV4dCkge1xuICAgICAgICAgICAgdmFyICRyID0gJCh0aGlzLiRlbHMucmVkYWN0b3IpO1xuXG4gICAgICAgICAgICB2YXIgY29kZSA9ICRyLnJlZGFjdG9yKCdjb2RlLmdldCcpO1xuXG4gICAgICAgICAgICAkci5yZWRhY3RvcihcbiAgICAgICAgICAgICAgICAnY29kZS5zZXQnLFxuICAgICAgICAgICAgICAgIGNvZGUgKyAnPGEgaHJlZj1cIicgKyB1cmwgKyAnXCI+JyArIHRleHQgKyAnPC9hPidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXNzZXRzU2VsZWN0ZWQoYXNzZXRzKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgJHIgPSAkKHNlbGYuJGVscy5yZWRhY3Rvcik7XG4gICAgICAgICAgICAkci5yZWRhY3Rvcignc2VsZWN0aW9uLnJlc3RvcmUnKTtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSAkci5yZWRhY3Rvcignc2VsZWN0aW9uLmdldEh0bWwnKTtcbiAgICAgICAgICAgIHZhciBjb2RlID0gJHIucmVkYWN0b3IoJ2NvZGUuZ2V0Jyk7XG5cbiAgICAgICAgICAgIGlmIChhc3NldHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICRyLnJlZGFjdG9yKCdmb2N1cy5zZXRFbmQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnYXNzZXRzL2dldCcpLCB7IGFzc2V0cyB9LCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBfKHJlc3BvbnNlKS5lYWNoKChhc3NldCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYXNzZXQudXJsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWx0ID0gYXNzZXQuYWx0IHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBhc3NldC50aXRsZSA9PT0gYXNzZXQuZmlsZW5hbWUgPyBudWxsIDogYXNzZXQudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gdGl0bGUgfHwgYXNzZXQuYWx0IHx8IGFzc2V0LmJhc2VuYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3NldHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXQuaXNfaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluc2VydEltYWdlKHVybCwgYWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbnNlcnRMaW5rKHVybCwgc2VsZWN0aW9uIHx8IHRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0LmlzX2ltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSArPSAnPGltZyBzcmM9XCInICsgdXJsICsgJ1wiIGFsdD1cIicgKyBhbHQgKyAnXCIgLz4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICs9ICc8YSBocmVmPVwiJyArIHVybCArICdcIj4nICsgdGV4dCArICc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICRyLnJlZGFjdG9yKCdjb2RlLnNldCcsIGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5jbG9zZUFzc2V0U2VsZWN0b3IoKTtcblxuICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBtYWludGFpbiB0aGUgYXNzZXQgc2VsZWN0aW9uc1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFzc2V0cyA9IFtdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFJlcGxpY2F0b3JQcmV2aWV3VGV4dCgpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuZGF0YSkgcmV0dXJuICcnO1xuXG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzLiRlbHMucmVkYWN0b3IpXG4gICAgICAgICAgICAgICAgLnJlZGFjdG9yKCdjbGVhbi5nZXRUZXh0RnJvbUh0bWwnLCB0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgJCh0aGlzLiRlbHMucmVkYWN0b3IpLnJlZGFjdG9yKCdmb2N1cy5zZXRFbmQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlZCBieSB0aGUgSW5zZXJ0c0Fzc2V0cyBtaXhpbiB0byBnZXQgdGhlIGNvbmZpZy5cbiAgICAgICAgICovXG4gICAgICAgIGdldEZpZWxkdHlwZUNvbmZpZygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3b21wID0gdGhpcztcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBtaW5IZWlnaHQ6IDI1MCxcbiAgICAgICAgICAgIGNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgd29tcC51cGRhdGUodGhpcy5jb2RlLmdldCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuc2V0dGluZ3MgJiYgdHlwZW9mIHRoaXMuY29uZmlnLnNldHRpbmdzICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdSZWRhY3RvciBGaWVsZHR5cGU6IFlvdSBtdXN0IHJlZmVyZW5jZSB0aGUgc2V0dGluZ3MgbmFtZSBpbnN0ZWFkIG9mIGFkZGluZyB0aGVtIGlubGluZS4nKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBhcHByb3ByaWF0ZSBjb25maWd1cmF0aW9uLiBJZiB0aGUgb25lIHRoZXkndmUgcmVxdWVzdGVkXG4gICAgICAgIC8vIGRvZXNudCBleGlzdCwgd2UnbGwgdXNlIHRoZSBmaXJzdCBvbmUgZGVmaW5lZC5cbiAgICAgICAgaWYgKF8uaGFzKFN0YXRhbWljLnJlZGFjdG9yU2V0dGluZ3MsIHRoaXMuY29uZmlnLnNldHRpbmdzKSkge1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IFN0YXRhbWljLnJlZGFjdG9yU2V0dGluZ3NbdGhpcy5jb25maWcuc2V0dGluZ3NdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IFN0YXRhbWljLnJlZGFjdG9yU2V0dGluZ3NbXy5maXJzdChfLmtleXMoU3RhdGFtaWMucmVkYWN0b3JTZXR0aW5ncykpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IF8uZXh0ZW5kKGRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgICAgIHNldHRpbmdzLnBsdWdpbnMgPSBzZXR0aW5ncy5wbHVnaW5zIHx8IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLmFzc2V0c0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHNldHRpbmdzLnBsdWdpbnMucHVzaCgnYXNzZXRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuJGVscy5yZWRhY3RvcikucmVkYWN0b3Ioc2V0dGluZ3MpO1xuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZWRhY3RvckZpZWxkdHlwZS52dWU/ZjkwMmY5NTAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9cmVkYWN0b3ItZmllbGR0eXBlLXdyYXBwZXI+IDx0ZXh0YXJlYSB2LWVsOnJlZGFjdG9yIDpuYW1lPW5hbWUgdi1tb2RlbD1kYXRhPjwvdGV4dGFyZWE+IDxzZWxlY3RvciB2LWlmPXNob3dBc3NldFNlbGVjdG9yIDpjb250YWluZXI9Y29udGFpbmVyIDpmb2xkZXI9Zm9sZGVyIDpzZWxlY3RlZD1zZWxlY3RlZEFzc2V0cyA6cmVzdHJpY3QtbmF2aWdhdGlvbj1yZXN0cmljdEFzc2V0TmF2aWdhdGlvbiBAc2VsZWN0ZWQ9YXNzZXRzU2VsZWN0ZWQgQGNsb3NlZD1jbG9zZUFzc2V0U2VsZWN0b3I+PC9zZWxlY3Rvcj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZWRhY3Rvci9SZWRhY3RvckZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9SZWRhY3RvclNldHRpbmdzRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vUmVkYWN0b3JTZXR0aW5nc0ZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVkYWN0b3IvUmVkYWN0b3JTZXR0aW5nc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInJlZGFjdG9yLXNldHRpbmdzLXdyYXBwZXJcIj5cbiAgICAgICAgPHNlbGVjdC1maWVsZHR5cGUgOm5hbWU9XCJuYW1lXCIgOmRhdGEuc3luYz1cImRhdGFcIiA6Y29uZmlnPVwic2VsZWN0Q29uZmlnXCI+PC9zZWxlY3QtZmllbGR0eXBlPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2RhdGEnLCAnbmFtZScsICdjb25maWcnXSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIHNlbGVjdENvbmZpZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBbeyB2YWx1ZTogbnVsbCwgdGV4dDogJycgfV07XG5cbiAgICAgICAgICAgIF8uZWFjaChTdGF0YW1pYy5yZWRhY3RvclNldHRpbmdzLCBmdW5jdGlvbiAoY29uZmlnLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBrZXlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4geyBvcHRpb25zIH07XG4gICAgICAgIH1cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gUmVkYWN0b3JTZXR0aW5nc0ZpZWxkdHlwZS52dWU/MmRlZTllMDYiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9cmVkYWN0b3Itc2V0dGluZ3Mtd3JhcHBlcj4gPHNlbGVjdC1maWVsZHR5cGUgOm5hbWU9bmFtZSA6ZGF0YS5zeW5jPWRhdGEgOmNvbmZpZz1zZWxlY3RDb25maWc+PC9zZWxlY3QtZmllbGR0eXBlPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlZGFjdG9yL1JlZGFjdG9yU2V0dGluZ3NGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2MTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vUmVsYXRlRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vUmVsYXRlRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZWxhdGUvUmVsYXRlRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicmVsYXRlLWZpZWxkdHlwZVwiPlxuXG4gICAgICAgIDxkaXYgdi1pZj1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmcgbG9hZGluZy1iYXNpY1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxyZWxhdGUtdGFnc1xuICAgICAgICAgICAgdi1pZj1cIiFsb2FkaW5nICYmICh0YWdzIHx8IHNpbmdsZSlcIlxuICAgICAgICAgICAgdi1yZWY6dGFnc1xuICAgICAgICAgICAgOmRhdGEuc3luYz1cImRhdGFcIlxuICAgICAgICAgICAgOnN1Z2dlc3Rpb25zPVwic3VnZ2VzdGlvbnNcIlxuICAgICAgICAgICAgOm1heC1pdGVtcz1cIm1heEl0ZW1zXCJcbiAgICAgICAgICAgIDpjcmVhdGU9XCJjYW5DcmVhdGVcIlxuICAgICAgICAgICAgOm5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgIDpkaXNhYmxlZD1cImRpc2FibGVkXCI+XG4gICAgICAgIDwvcmVsYXRlLXRhZ3M+XG5cbiAgICAgICAgPHJlbGF0ZS1wYW5lc1xuICAgICAgICAgICAgdi1pZj1cIiFsb2FkaW5nICYmIHBhbmVzICYmICFzaW5nbGVcIlxuICAgICAgICAgICAgdi1yZWY6cGFuZXNcbiAgICAgICAgICAgIDpkYXRhLnN5bmM9XCJkYXRhXCJcbiAgICAgICAgICAgIDpzdWdnZXN0aW9ucz1cInN1Z2dlc3Rpb25zXCJcbiAgICAgICAgICAgIDptYXgtaXRlbXM9XCJtYXhJdGVtc1wiXG4gICAgICAgICAgICA6bmFtZT1cIm5hbWVcIj5cbiAgICAgICAgPC9yZWxhdGUtcGFuZXM+XG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgUmVsYXRlUGFuZXMgZnJvbSAnLi9SZWxhdGVQYW5lc0ZpZWxkdHlwZS52dWUnXG5pbXBvcnQgUmVsYXRlVGFncyBmcm9tICcuL1JlbGF0ZVRhZ3NGaWVsZHR5cGUudnVlJ1xuaW1wb3J0IEdldHNTdWdnZXN0S2V5IGZyb20gJy4uL0dldHNTdWdnZXN0S2V5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlLCBHZXRzU3VnZ2VzdEtleV0sXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdyZWxhdGUtcGFuZXMnOiBSZWxhdGVQYW5lcyxcbiAgICAgICAgJ3JlbGF0ZS10YWdzJzogUmVsYXRlVGFnc1xuICAgIH0sXG5cbiAgICBwcm9wczogW1xuICAgICAgICAnc3VnZ2VzdGlvbnNQcm9wJyxcbiAgICAgICAgJ2Rpc2FibGVkJ1xuICAgIF0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBzdWdnZXN0aW9uczogW10sXG4gICAgICAgICAgICBhdXRvQmluZENoYW5nZVdhdGNoZXI6IGZhbHNlLFxuICAgICAgICAgICAgc2hvdWxkRm9jdXNXaGVuTG9hZGVkOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgc2luZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXhJdGVtcyAmJiB0aGlzLm1heEl0ZW1zID09PSAxO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1heEl0ZW1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmNvbmZpZy5tYXhfaXRlbXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vZGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcubW9kZSB8fCAndGFncyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFuZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlID09PSAncGFuZXMnO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRhZ3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlID09PSAndGFncyc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuQ3JlYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmNyZWF0ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZ2V0U3VnZ2VzdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3VnZ2VzdGlvbnNQcm9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZVN1Z2dlc3Rpb25zKHRoaXMuc3VnZ2VzdGlvbnNQcm9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlZmV0Y2hlZCA9IGRhdGFfZ2V0KFN0YXRhbWljLCAnUHVibGlzaC5zdWdnZXN0aW9ucy4nICsgdGhpcy5zdWdnZXN0S2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocHJlZmV0Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlU3VnZ2VzdGlvbnMocHJlZmV0Y2hlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnYWRkb25zL3N1Z2dlc3Qvc3VnZ2VzdGlvbnMnKSwgdGhpcy5jb25maWcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVTdWdnZXN0aW9ucyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlU3VnZ2VzdGlvbnMoc3VnZ2VzdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlSW52YWxpZERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRm9jdXNXaGVuTG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gdGhpcy5mb2N1cygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGRhdGEgdGhhdCBkb2Vzbid0IGV4aXN0IGluIHRoZSBzdWdnZXN0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlc2UgbWF5IGJlIGVudHJpZXMgdGhhdCBoYXZlIGJlZW4gZGVsZXRlZCwgZm9yIGV4YW1wbGUuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVJbnZhbGlkRGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5zaW5nbGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoISBfLmZpbmRXaGVyZShzZWxmLnN1Z2dlc3Rpb25zLCB7IHZhbHVlOiBzZWxmLmRhdGFbMF0gfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuZGF0YSA9IF8uZmlsdGVyKHNlbGYuZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF8uZmluZFdoZXJlKHNlbGYuc3VnZ2VzdGlvbnMsIHsgdmFsdWU6IGl0ZW0gfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5kYXRhKSByZXR1cm47XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdWdnZXN0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWdnZXN0aW9uID0gXy5maW5kV2hlcmUodGhpcy5zdWdnZXN0aW9ucywgeyB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb24gPyBzdWdnZXN0aW9uLnRleHQgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5qb2luKCcsICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9hZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkRm9jdXNXaGVuTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJHJlZnNbdGhpcy5tb2RlXS5mb2N1cygpO1xuICAgICAgICAgICAgdGhpcy5zaG91bGRGb2N1c1doZW5Mb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0U3VnZ2VzdGlvbnMoKTtcblxuICAgICAgICB0aGlzLiR3YXRjaCgnc3VnZ2VzdGlvbnNQcm9wJywgZnVuY3Rpb24oc3VnZ2VzdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFJlbGF0ZUZpZWxkdHlwZS52dWU/ODBmZWM3NzQiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9SZWxhdGVQYW5lc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1JlbGF0ZVBhbmVzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZWxhdGUvUmVsYXRlUGFuZXNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2MTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cInJlbGF0ZS1wYW5lcyBjbGVhcmZpeFwiIDpjbGFzcz1cInsgJ21heC1zZWxlY3RlZCc6IG1heFNlbGVjdGVkIH1cIj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwicmVsYXRlLXBhbmUgcGFuZS1zdWdnZXN0aW9uc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhbmUtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2wgcmVsYXRlLXNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRmlsdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgdi1lbDpmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgIEBrZXlkb3duLmVudGVyPVwic2VsZWN0QWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgQGtleXVwLnVwPVwiZ29VcFwiXG4gICAgICAgICAgICAgICAgICAgICAgIEBrZXl1cC5kb3duPVwiZ29Eb3duXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZWxhdGUtaXRlbXNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgICB2LWZvcj1cIml0ZW0gaW4gYXZhaWxhYmxlU3VnZ2VzdGlvbnNcIlxuICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogJGluZGV4ID09PSBhY3RpdmUgfVwiXG4gICAgICAgICAgICAgICAgICAgICBAY2xpY2sucHJldmVudD1cInNlbGVjdChpdGVtKVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7e3sgaXRlbS50ZXh0IH19fVxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jaGV2cm9uLXJpZ2h0XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZWxhdGUtcGFuZSBwYW5lLXNlbGVjdGlvbnNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYW5lLWhlYWRlclwiPlNlbGVjdGVkPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVsYXRlLWl0ZW1zXCIgdi1lbDpzb3J0YWJsZT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiIHYtZm9yPVwiaXRlbSBpbiBzZWxlY3RlZFwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIml0ZW0tcmVtb3ZlXCIgQGNsaWNrLnByZXZlbnQ9XCJyZW1vdmUoaXRlbSlcIj4mdGltZXM7PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICB7e3sgaXRlbS50ZXh0IH19fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgOm5hbWU9XCJuYW1lXCIgOnZhbHVlPVwiZGF0YSB8IGpzb25cIiAvPlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFtcbiAgICAgICAgJ25hbWUnLFxuICAgICAgICAnZGF0YScsXG4gICAgICAgICdzdWdnZXN0aW9ucycsXG4gICAgICAgICdtYXhJdGVtcydcbiAgICBdLFxuXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VhcmNoOiBudWxsLFxuICAgICAgICAgICAgYWN0aXZlOiAtMVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBhdmFpbGFibGVTdWdnZXN0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBfLnJlamVjdChzZWxmLnN1Z2dlc3Rpb25zLCBmdW5jdGlvbihzdWdnZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0JlZW5TZWxlY3RlZCA9IF8uY29udGFpbnMoc2VsZi5kYXRhLCBzdWdnZXN0aW9uLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzU2VhcmNoVGVybSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXNTZWFyY2hUZXJtID0gc3VnZ2VzdGlvbi50ZXh0LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWxmLnNlYXJjaC50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc0JlZW5TZWxlY3RlZCB8fCAhbWF0Y2hlc1NlYXJjaFRlcm07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZWxlY3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBfLm1hcChzZWxmLmRhdGEsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kV2hlcmUoc2VsZi5zdWdnZXN0aW9ucywgeyB2YWx1ZTogaXRlbSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1heFNlbGVjdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heEl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGggPj0gdGhpcy5tYXhJdGVtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9LFxuXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgaW5pdFNvcnRhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgJCh0aGlzLiRlbHMuc29ydGFibGUpLnNvcnRhYmxlKHtcbiAgICAgICAgICAgICAgICBheGlzOiAneScsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdpdGVtLXBsYWNlaG9sZGVyJyxcbiAgICAgICAgICAgICAgICBmb3JjZVBsYWNlaG9sZGVyU2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXZlcnQ6IDE3NSxcbiAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdWkuaXRlbS5kYXRhKCdzdGFydCcsIHVpLml0ZW0uaW5kZXgoKSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdWkuaXRlbS5kYXRhKCdzdGFydCcpLFxuICAgICAgICAgICAgICAgICAgICBlbmQgICA9IHVpLml0ZW0uaW5kZXgoKTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGEuc3BsaWNlKGVuZCwgMCwgc2VsZi5kYXRhLnNwbGljZShzdGFydCwgMSlbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5tYXhTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5wdXNoKGl0ZW0udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gXy5pbmRleE9mKHRoaXMuZGF0YSwgaXRlbS52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnb1VwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlLS07XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ29Eb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlKys7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA+PSB0aGlzLmF2YWlsYWJsZVN1Z2dlc3Rpb25zLmxlbmd0aC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0aGlzLmF2YWlsYWJsZVN1Z2dlc3Rpb25zLmxlbmd0aC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdEFjdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuYXZhaWxhYmxlU3VnZ2VzdGlvbnNbdGhpcy5hY3RpdmVdO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3QoaXRlbSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZSA+PSB0aGlzLmF2YWlsYWJsZVN1Z2dlc3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gdGhpcy5hdmFpbGFibGVTdWdnZXN0aW9ucy5sZW5ndGgtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMuJGVscy5maWx0ZXIuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIHRoaXMuaW5pdFNvcnRhYmxlKCk7XG5cbiAgICAgICAgdGhpcy4kd2F0Y2goJ3NlYXJjaCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXZhaWxhYmxlU3VnZ2VzdGlvbnMubGVuZ3RoIDw9IHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0aGlzLmF2YWlsYWJsZVN1Z2dlc3Rpb25zLmxlbmd0aC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiR3YXRjaCgnZGF0YScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzLiRlbHMuc29ydGFibGUpLnNvcnRhYmxlKCdyZWZyZXNoJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICB9XG5cbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZWxhdGVQYW5lc0ZpZWxkdHlwZS52dWU/MmEwZTM4MWUiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9XFxcInJlbGF0ZS1wYW5lcyBjbGVhcmZpeFxcXCIgOmNsYXNzPVxcXCJ7ICdtYXgtc2VsZWN0ZWQnOiBtYXhTZWxlY3RlZCB9XFxcIj4gPGRpdiBjbGFzcz1cXFwicmVsYXRlLXBhbmUgcGFuZS1zdWdnZXN0aW9uc1xcXCI+IDxkaXYgY2xhc3M9cGFuZS1oZWFkZXI+IDxpbnB1dCB0eXBlPXRleHQgY2xhc3M9XFxcImZvcm0tY29udHJvbCByZWxhdGUtc2VhcmNoXFxcIiBwbGFjZWhvbGRlcj1GaWx0ZXIgdi1lbDpmaWx0ZXIgdi1tb2RlbD1zZWFyY2ggQGtleWRvd24uZW50ZXI9c2VsZWN0QWN0aXZlIEBrZXl1cC51cD1nb1VwIEBrZXl1cC5kb3duPWdvRG93biAvPiA8L2Rpdj4gPGRpdiBjbGFzcz1yZWxhdGUtaXRlbXM+IDxkaXYgY2xhc3M9aXRlbSB2LWZvcj1cXFwiaXRlbSBpbiBhdmFpbGFibGVTdWdnZXN0aW9uc1xcXCIgOmNsYXNzPVxcXCJ7ICdhY3RpdmUnOiAkaW5kZXggPT09IGFjdGl2ZSB9XFxcIiBAY2xpY2sucHJldmVudD1zZWxlY3QoaXRlbSk+IHt7eyBpdGVtLnRleHQgfX19IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2hldnJvbi1yaWdodFxcXCI+PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyZWxhdGUtcGFuZSBwYW5lLXNlbGVjdGlvbnNcXFwiPiA8ZGl2IGNsYXNzPXBhbmUtaGVhZGVyPlNlbGVjdGVkPC9kaXY+IDxkaXYgY2xhc3M9cmVsYXRlLWl0ZW1zIHYtZWw6c29ydGFibGU+IDxkaXYgY2xhc3M9aXRlbSB2LWZvcj1cXFwiaXRlbSBpbiBzZWxlY3RlZFxcXCI+IDxzcGFuIGNsYXNzPWl0ZW0tcmVtb3ZlIEBjbGljay5wcmV2ZW50PXJlbW92ZShpdGVtKT4mdGltZXM7PC9zcGFuPiB7e3sgaXRlbS50ZXh0IH19fSA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8aW5wdXQgdHlwZT1oaWRkZW4gOm5hbWU9bmFtZSA6dmFsdWU9XFxcImRhdGEgfCBqc29uXFxcIi8+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVsYXRlL1JlbGF0ZVBhbmVzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JlbGF0ZVRhZ3NGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9SZWxhdGVUYWdzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZWxhdGUvUmVsYXRlVGFnc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8c2VsZWN0IHYtZWw6dGFncyBtdWx0aXBsZSB0YWJpbmRleD1cIjBcIiA+PC9zZWxlY3Q+XG5cbiAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIDpuYW1lPVwibmFtZVwiIDp2YWx1ZT1cImRhdGF8anNvblwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgLz5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbXG4gICAgICAgICdkYXRhJyxcbiAgICAgICAgJ3N1Z2dlc3Rpb25zJyxcbiAgICAgICAgJ21heEl0ZW1zJyxcbiAgICAgICAgJ2NyZWF0ZScsXG4gICAgICAgICduYW1lJyxcbiAgICAgICAgJ2Rpc2FibGVkJ1xuICAgIF0sXG5cbiAgICByZWFkeSgpIHtcblxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgYW4gYXJyYXlcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBbdGhpcy5kYXRhXTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy4kZWxzLnRhZ3MpLnNlbGVjdGl6ZSh7XG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLnN1Z2dlc3Rpb25zLFxuICAgICAgICAgICAgaXRlbXM6IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLm1heEl0ZW1zLFxuICAgICAgICAgICAgcGx1Z2luczogWydkcmFnX2Ryb3AnLCAncmVtb3ZlX2J1dHRvbiddLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3JlYXRlOiB0aGlzLmNyZWF0ZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy4kZWxzLnRhZ3Muc2VsZWN0aXplLmRpc2FibGUoKTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIGZvY3VzKCkge1xuICAgICAgICAgICAgdGhpcy4kZWxzLnRhZ3Muc2VsZWN0aXplLmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gUmVsYXRlVGFnc0ZpZWxkdHlwZS52dWU/NGNkY2Q5YTIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxzZWxlY3Qgdi1lbDp0YWdzIG11bHRpcGxlPW11bHRpcGxlIHRhYmluZGV4PTA+PC9zZWxlY3Q+IDxpbnB1dCB0eXBlPWhpZGRlbiA6bmFtZT1uYW1lIDp2YWx1ZT1kYXRhfGpzb24gY2xhc3M9Zm9ybS1jb250cm9sIC8+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZWxhdGUvUmVsYXRlVGFnc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9cmVsYXRlLWZpZWxkdHlwZT4gPGRpdiB2LWlmPWxvYWRpbmcgY2xhc3M9XFxcImxvYWRpbmcgbG9hZGluZy1iYXNpY1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cXFwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5sb2FkaW5nJykgfX0gPC9kaXY+IDxyZWxhdGUtdGFncyB2LWlmPVxcXCIhbG9hZGluZyAmJiAodGFncyB8fCBzaW5nbGUpXFxcIiB2LXJlZjp0YWdzIDpkYXRhLnN5bmM9ZGF0YSA6c3VnZ2VzdGlvbnM9c3VnZ2VzdGlvbnMgOm1heC1pdGVtcz1tYXhJdGVtcyA6Y3JlYXRlPWNhbkNyZWF0ZSA6bmFtZT1uYW1lIDpkaXNhYmxlZD1kaXNhYmxlZD4gPC9yZWxhdGUtdGFncz4gPHJlbGF0ZS1wYW5lcyB2LWlmPVxcXCIhbG9hZGluZyAmJiBwYW5lcyAmJiAhc2luZ2xlXFxcIiB2LXJlZjpwYW5lcyA6ZGF0YS5zeW5jPWRhdGEgOnN1Z2dlc3Rpb25zPXN1Z2dlc3Rpb25zIDptYXgtaXRlbXM9bWF4SXRlbXMgOm5hbWU9bmFtZT4gPC9yZWxhdGUtcGFuZXM+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVsYXRlL1JlbGF0ZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9SZXBsaWNhdG9yRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vUmVwbGljYXRvckZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvcmVwbGljYXRvci9SZXBsaWNhdG9yRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicmVwbGljYXRvciByZXBsaWNhdG9yLWZpZWxkdHlwZS13cmFwcGVyIHJlbGF0aXZlXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJlcGxpY2F0b3Itc2V0c1wiPlxuICAgICAgICAgICAgPHJlcGxpY2F0b3Itc2V0XG4gICAgICAgICAgICAgICAgdi1mb3I9XCIoaW5kZXgsIHNldCkgaW4gZGF0YVwiXG4gICAgICAgICAgICAgICAgdi1yZWY6c2V0XG4gICAgICAgICAgICAgICAgOnBhcmVudC1uYW1lPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgOmRhdGE9XCJzZXRcIlxuICAgICAgICAgICAgICAgIDppbmRleD1cImluZGV4XCJcbiAgICAgICAgICAgICAgICA6Y29uZmlnPVwic2V0Q29uZmlnKHNldC50eXBlKVwiXG4gICAgICAgICAgICAgICAgQGRlbGV0ZWQ9XCJkZWxldGVTZXRcIlxuICAgICAgICAgICAgICAgIEBleHBhbmRlZD1cInNldEV4cGFuZGVkXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImV4cGFuZC1jb2xsYXBzZVwiPlxuICAgICAgICAgICAgICAgICAgICA8bGk+PGEgQGNsaWNrPVwiY29sbGFwc2VBbGxcIj57eyB0cmFuc2xhdGUoJ2NwLmNvbGxhcHNlX2FsbCcpIH19PC9hPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT48YSBAY2xpY2s9XCJleHBhbmRBbGxcIj57eyB0cmFuc2xhdGUoJ2NwLmV4cGFuZF9hbGwnKSB9fTwvYT48L2xpPlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD1cImFkZC1zZXRzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cInNldENvbmZpZyBpbiBjb25maWcuc2V0c1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgQGNsaWNrLnByZXZlbnQ9XCJhZGRTZXQoc2V0Q29uZmlnLm5hbWUsIGluZGV4ICsgMSlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImljb24gaWNvbi1hZGQtdG8tbGlzdFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzZXRDb25maWcuZGlzcGxheSB8fCBzZXRDb25maWcubmFtZSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L3JlcGxpY2F0b3Itc2V0PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBtci04IG1iLThcIiB2LWZvcj1cInNldCBpbiBjb25maWcuc2V0c1wiIHYtb246Y2xpY2s9XCJhZGRTZXQoc2V0Lm5hbWUpXCIgdi10aXAgOnRpcC10ZXh0PVwic2V0Lmluc3RydWN0aW9uc1wiPlxuXHRcdFx0e3sgc2V0LmRpc3BsYXkgfHwgc2V0Lm5hbWUgfX08aSBjbGFzcz1cImljb24gaWNvbi1wbHVzIGljb24tcmlnaHRcIj48L2k+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBSZXBsaWNhdG9yIGZyb20gJy4vUmVwbGljYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW1JlcGxpY2F0b3IsIEZpZWxkdHlwZV0sXG5cbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIFJlcGxpY2F0b3JTZXQ6IHJlcXVpcmUoJy4vUmVwbGljYXRvclNldC52dWUnKVxuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJsYW5rOiB7fSxcbiAgICAgICAgICAgIHNvcnRhYmxlT3B0aW9uczoge30sXG4gICAgICAgICAgICBhdXRvQmluZENoYW5nZVdhdGNoZXI6IGZhbHNlLFxuICAgICAgICAgICAgY2hhbmdlV2F0Y2hlcldhdGNoRGVlcDogZmFsc2UsXG4gICAgICAgICAgICBhY2NvcmRpb25Nb2RlOiB0cnVlXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGhhc0RhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIGFuIGVtcHR5IGFycmF5IGlmIHRoZXJlJ3Mgbm8gZGF0YS5cbiAgICAgICAgaWYgKCEgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmluZENoYW5nZVdhdGNoZXIoKTtcbiAgICAgICAgdGhpcy5zb3J0YWJsZSgpO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgc29ydGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gJyc7XG5cbiAgICAgICAgICAgICQodGhpcy4kZWwpLmNoaWxkcmVuKCcucmVwbGljYXRvci1zZXRzJykuc29ydGFibGUoe1xuICAgICAgICAgICAgICAgIGF4aXM6IFwieVwiLFxuICAgICAgICAgICAgICAgIHJldmVydDogMTc1LFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnc3RhY2tlZC1wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiAnLmRyYWctaGFuZGxlJyxcbiAgICAgICAgICAgICAgICBmb3JjZVBsYWNlaG9sZGVyU2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB1aS5pdGVtLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIHVpLnBsYWNlaG9sZGVyLmhlaWdodCh1aS5pdGVtLmhlaWdodCgpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSwgdWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCAgPSB1aS5pdGVtLmluZGV4KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBhIGxvY2FsIGNvcHkgYW5kIHJlb3JkZXJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNlbGYuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnNwbGljZShlbmQsIDAsIGRhdGEuc3BsaWNlKHN0YXJ0LCAxKVswXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRTZXQ6IGZ1bmN0aW9uKHR5cGUsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgbmV3U2V0ID0geyB0eXBlOiB0eXBlIH07XG5cbiAgICAgICAgICAgIC8vIEdldCBudWxscyBmb3IgYWxsIHRoZSBzZXQncyBmaWVsZHMgc28gVnVlIGNhbiB0cmFjayB0aGVtIG1vcmUgcmVsaWFibHkuXG4gICAgICAgICAgICB2YXIgc2V0ID0gdGhpcy5zZXRDb25maWcodHlwZSk7XG4gICAgICAgICAgICBfLmVhY2goc2V0LmZpZWxkcywgZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgICAgICAgICAgICBuZXdTZXRbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0IHx8IFN0YXRhbWljLmZpZWxkdHlwZURlZmF1bHRzW2ZpZWxkLnR5cGVdIHx8IG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDAsIG5ld1NldCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjY29yZGlvbk1vZGUpIHRoaXMuY29sbGFwc2VBbGxFeGNlcHQoaW5kZXgpO1xuXG4gICAgICAgICAgICB0aGlzLnNvcnRhYmxlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHRoaXMuJHJlZnMuc2V0W2luZGV4XS5mb2N1cygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb2xsYXBzZUFsbEV4Y2VwdChleGNlcHQpIHtcbiAgICAgICAgICAgIF8ubWFwKHRoaXMuJHJlZnMuc2V0LCBzZXQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzZXQuaW5kZXggIT09IGV4Y2VwdCkgc2V0LmNvbGxhcHNlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRFeHBhbmRlZChzZXQsIGFsbCkge1xuICAgICAgICAgICAgLy8gRmllbGRzIHRoYXQgZGVwZW5kIG9uIHRoZWlyIGNvbnRhaW5lciBzaXplIGFyZVxuICAgICAgICAgICAgLy8gd2F0Y2hpbmcgZm9yIHRoZSBgcmVzaXplYCBldmVudC4gTGV0J3MgZ2l2ZSBpdCB0byB0aGVtLlxuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XG5cbiAgICAgICAgICAgIC8vIFRoZSAnYWxsJyB2YXJpYWJsZSB3aWxsIGJlIHRydWUgaWYgdGhlIHNldCB3YXMgZXhwYW5kZWQgZHVlIHRvIGEgZXhwYW5kQWxsKClcbiAgICAgICAgICAgIC8vIG1ldGhvZCBjYWxsLiBJbiB0aGF0IGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY29sbGFwc2UgdGhlIG90aGVyIHNldHMuXG4gICAgICAgICAgICBpZiAoYWxsKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmFjY29yZGlvbk1vZGUpIHRoaXMuY29sbGFwc2VBbGxFeGNlcHQoc2V0LmluZGV4KTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZXBsaWNhdG9yUHJldmlld1RleHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5tYXAodGhpcy4kcmVmcy5zZXQsIHNldCA9PiBzZXQuY29sbGFwc2VkUHJldmlldykuam9pbignLCAnKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZXBsaWNhdG9yRmllbGR0eXBlLnZ1ZT9mNWEyNWUwYSIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JlcGxpY2F0b3JTZXQudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9SZXBsaWNhdG9yU2V0LnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9yZXBsaWNhdG9yL1JlcGxpY2F0b3JTZXQudnVlXG4vLyBtb2R1bGUgaWQgPSA2Mjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuXG4gICAgPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBncm91cC1oZWFkZXIgcGwtMyBkcmFnLWhhbmRsZVwiIDpjbGFzcz1cInsnY29sbGFwc2VkJzogaXNIaWRkZW59XCIgdi1vbjpkYmxjbGljaz1cInRvZ2dsZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXh5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZpbGxcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXh5IGJhc2VsaW5lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgQGNsaWNrPVwidG9nZ2xlXCIgY2xhc3M9XCJjbGlja2FibGVcIj57eyBkaXNwbGF5IH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzSGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwicmVwbGljYXRvci1zZXQtc3VtbWFyeSBmaWxsXCIgdi1odG1sPVwiY29sbGFwc2VkUHJldmlld1wiPjwvc21hbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIiB2LWlmPVwiaW5zdHJ1Y3Rpb25zICYmICFpc0hpZGRlblwiIHYtaHRtbD1cImluc3RydWN0aW9ucyB8IG1hcmtkb3duXCI+PC9zbWFsbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGljb24tZ3JvdXAgYWN0aW9uLW1vcmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tbW9yZSBkcm9wZG93bi10b2dnbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uIGljb24tZG90cy10aHJlZS12ZXJ0aWNhbFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJleHBhbmQtY29sbGFwc2VcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ3YXJuaW5nXCI+PGEgQGNsaWNrPVwiZGVsZXRlXCI+e3sgdHJhbnNsYXRlKCdjcC5kZWxldGVfc2V0JykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImRpdmlkZXJcIj48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImFkZC1zZXRzXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGlzdC1ncm91cC1pdGVtIHAtMFwiIHYtc2hvdz1cIiFpc0hpZGRlblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1Ymxpc2gtZmllbGRzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cImZpZWxkIGluIGNvbmZpZy5maWVsZHNcIiA6Y2xhc3M9XCJmaWVsZENsYXNzZXMoZmllbGQpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9ja1wiIHYtaWY9XCJoYXNNdWx0aXBsZUZpZWxkc1wiIDpjbGFzcz1cInsnYm9sZCc6IGZpZWxkLmJvbGR9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJmaWVsZC5kaXNwbGF5XCI+e3sgZmllbGQuZGlzcGxheSB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCIhZmllbGQuZGlzcGxheVwiPnt7IGZpZWxkLm5hbWUgfCBjYXBpdGFsaXplIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInJlcXVpcmVkXCIgdi1pZj1cImZpZWxkLnJlcXVpcmVkXCI+KjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImhlbHAtYmxvY2tcIiB2LWlmPVwiZmllbGQuaW5zdHJ1Y3Rpb25zXCIgdi1odG1sPVwiZmllbGQuaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cIj48L3NtYWxsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50IDppcz1cImNvbXBvbmVudE5hbWUoZmllbGQudHlwZSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bmFtZT1cInBhcmVudE5hbWUgKyAnLicgKyBpbmRleCArICcuJyArIGZpZWxkLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS5zeW5jPVwiZGF0YVtmaWVsZC5uYW1lXVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjb25maWc9XCJmaWVsZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgUmVwbGljYXRvclNldCBmcm9tICcuL1JlcGxpY2F0b3JTZXQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtSZXBsaWNhdG9yU2V0XVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZXBsaWNhdG9yU2V0LnZ1ZT85NzczODhiYSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1saXN0LWdyb3VwPiA8ZGl2IGNsYXNzPVxcXCJsaXN0LWdyb3VwLWl0ZW0gZ3JvdXAtaGVhZGVyIHBsLTMgZHJhZy1oYW5kbGVcXFwiIDpjbGFzcz1cXFwieydjb2xsYXBzZWQnOiBpc0hpZGRlbn1cXFwiIHYtb246ZGJsY2xpY2s9dG9nZ2xlPiA8ZGl2IGNsYXNzPWZsZXh5PiA8ZGl2IGNsYXNzPWZpbGw+IDxkaXYgY2xhc3M9XFxcImZsZXh5IGJhc2VsaW5lXFxcIj4gPGxhYmVsIEBjbGljaz10b2dnbGUgY2xhc3M9Y2xpY2thYmxlPnt7IGRpc3BsYXkgfX08L2xhYmVsPiA8ZGl2IHYtaWY9aXNIaWRkZW4+IDxzbWFsbCBjbGFzcz1cXFwicmVwbGljYXRvci1zZXQtc3VtbWFyeSBmaWxsXFxcIiB2LWh0bWw9Y29sbGFwc2VkUHJldmlldz48L3NtYWxsPiA8L2Rpdj4gPC9kaXY+IDxzbWFsbCBjbGFzcz1oZWxwLWJsb2NrIHYtaWY9XFxcImluc3RydWN0aW9ucyAmJiAhaXNIaWRkZW5cXFwiIHYtaHRtbD1cXFwiaW5zdHJ1Y3Rpb25zIHwgbWFya2Rvd25cXFwiPjwvc21hbGw+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgaWNvbi1ncm91cCBhY3Rpb24tbW9yZVxcXCI+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0bi1tb3JlIGRyb3Bkb3duLXRvZ2dsZVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1oYXNwb3B1cD10cnVlIGFyaWEtZXhwYW5kZWQ9ZmFsc2U+IDxpIGNsYXNzPVxcXCJpY29uIGljb24tZG90cy10aHJlZS12ZXJ0aWNhbFxcXCI+PC9pPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnU+IDxzbG90IG5hbWU9ZXhwYW5kLWNvbGxhcHNlPjwvc2xvdD4gPGxpIGNsYXNzPXdhcm5pbmc+PGEgQGNsaWNrPWRlbGV0ZT57eyB0cmFuc2xhdGUoJ2NwLmRlbGV0ZV9zZXQnKSB9fTwvYT48L2xpPiA8bGkgY2xhc3M9ZGl2aWRlcj48L2xpPiA8c2xvdCBuYW1lPWFkZC1zZXRzPjwvc2xvdD4gPC91bD4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibGlzdC1ncm91cC1pdGVtIHAtMFxcXCIgdi1zaG93PSFpc0hpZGRlbj4gPGRpdiBjbGFzcz1wdWJsaXNoLWZpZWxkcz4gPGRpdiB2LWZvcj1cXFwiZmllbGQgaW4gY29uZmlnLmZpZWxkc1xcXCIgOmNsYXNzPWZpZWxkQ2xhc3NlcyhmaWVsZCk+IDxsYWJlbCBjbGFzcz1ibG9jayB2LWlmPWhhc011bHRpcGxlRmllbGRzIDpjbGFzcz1cXFwieydib2xkJzogZmllbGQuYm9sZH1cXFwiPiA8dGVtcGxhdGUgdi1pZj1maWVsZC5kaXNwbGF5Pnt7IGZpZWxkLmRpc3BsYXkgfX08L3RlbXBsYXRlPiA8dGVtcGxhdGUgdi1pZj0hZmllbGQuZGlzcGxheT57eyBmaWVsZC5uYW1lIHwgY2FwaXRhbGl6ZSB9fTwvdGVtcGxhdGU+IDxpIGNsYXNzPXJlcXVpcmVkIHYtaWY9ZmllbGQucmVxdWlyZWQ+KjwvaT4gPC9sYWJlbD4gPHNtYWxsIGNsYXNzPWhlbHAtYmxvY2sgdi1pZj1maWVsZC5pbnN0cnVjdGlvbnMgdi1odG1sPVxcXCJmaWVsZC5pbnN0cnVjdGlvbnMgfCBtYXJrZG93blxcXCI+PC9zbWFsbD4gPGNvbXBvbmVudCA6aXM9Y29tcG9uZW50TmFtZShmaWVsZC50eXBlKSA6bmFtZT1cXFwicGFyZW50TmFtZSArICcuJyArIGluZGV4ICsgJy4nICsgZmllbGQubmFtZVxcXCIgOmRhdGEuc3luYz1kYXRhW2ZpZWxkLm5hbWVdIDpjb25maWc9ZmllbGQ+IDwvY29tcG9uZW50PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlcGxpY2F0b3IvUmVwbGljYXRvclNldC52dWVcbi8vIG1vZHVsZSBpZCA9IDYzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9XFxcInJlcGxpY2F0b3IgcmVwbGljYXRvci1maWVsZHR5cGUtd3JhcHBlciByZWxhdGl2ZVxcXCI+IDxkaXYgY2xhc3M9cmVwbGljYXRvci1zZXRzPiA8cmVwbGljYXRvci1zZXQgdi1mb3I9XFxcIihpbmRleCwgc2V0KSBpbiBkYXRhXFxcIiB2LXJlZjpzZXQgOnBhcmVudC1uYW1lPW5hbWUgOmRhdGE9c2V0IDppbmRleD1pbmRleCA6Y29uZmlnPXNldENvbmZpZyhzZXQudHlwZSkgQGRlbGV0ZWQ9ZGVsZXRlU2V0IEBleHBhbmRlZD1zZXRFeHBhbmRlZD4gPHRlbXBsYXRlIHNsb3Q9ZXhwYW5kLWNvbGxhcHNlPiA8bGk+PGEgQGNsaWNrPWNvbGxhcHNlQWxsPnt7IHRyYW5zbGF0ZSgnY3AuY29sbGFwc2VfYWxsJykgfX08L2E+PC9saT4gPGxpPjxhIEBjbGljaz1leHBhbmRBbGw+e3sgdHJhbnNsYXRlKCdjcC5leHBhbmRfYWxsJykgfX08L2E+PC9saT4gPC90ZW1wbGF0ZT4gPHRlbXBsYXRlIHNsb3Q9YWRkLXNldHM+IDxsaSB2LWZvcj1cXFwic2V0Q29uZmlnIGluIGNvbmZpZy5zZXRzXFxcIj4gPGEgQGNsaWNrLnByZXZlbnQ9XFxcImFkZFNldChzZXRDb25maWcubmFtZSwgaW5kZXggKyAxKVxcXCI+IDxpIGNsYXNzPVxcXCJpY29uIGljb24tYWRkLXRvLWxpc3RcXFwiPjwvaT4ge3sgc2V0Q29uZmlnLmRpc3BsYXkgfHwgc2V0Q29uZmlnLm5hbWUgfX0gPC9hPiA8L2xpPiA8L3RlbXBsYXRlPiA8L3JlcGxpY2F0b3Itc2V0PiA8L2Rpdj4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IG1yLTggbWItOFxcXCIgdi1mb3I9XFxcInNldCBpbiBjb25maWcuc2V0c1xcXCIgdi1vbjpjbGljaz1hZGRTZXQoc2V0Lm5hbWUpIHYtdGlwIDp0aXAtdGV4dD1zZXQuaW5zdHJ1Y3Rpb25zPiB7eyBzZXQuZGlzcGxheSB8fCBzZXQubmFtZSB9fTxpIGNsYXNzPVxcXCJpY29uIGljb24tcGx1cyBpY29uLXJpZ2h0XFxcIj48L2k+IDwvYnV0dG9uPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL3JlcGxpY2F0b3IvUmVwbGljYXRvckZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9SZXZlYWxlckZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1JldmVhbGVyRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9SZXZlYWxlckZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG5cbiAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIHYtaWY9XCIhIGlzUmV2ZWFsZWRcIiBAY2xpY2s9XCJyZXZlYWxcIiBjbGFzcz1cImJ0blwiIHYtdGlwIDp0aXAtdGV4dD1cImNvbmZpZy5pbnN0cnVjdGlvbnNcIj57eyBjb25maWcuZGlzcGxheSB9fTwvYnV0dG9uPlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgaXNSZXZlYWxlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEgPT09IHRydWU7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgcmV2ZWFsKCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSZXZlYWxlckZpZWxkdHlwZS52dWU/YmJhZWIyMzYiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXY+IDxidXR0b24gdi1pZj1cXFwiISBpc1JldmVhbGVkXFxcIiBAY2xpY2s9cmV2ZWFsIGNsYXNzPWJ0biB2LXRpcCA6dGlwLXRleHQ9Y29uZmlnLmluc3RydWN0aW9ucz57eyBjb25maWcuZGlzcGxheSB9fTwvYnV0dG9uPiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1JldmVhbGVyRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1JvdXRlc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1JvdXRlc0ZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvUm91dGVzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwicm91dGVzLWZpZWxkdHlwZS13cmFwcGVyXCI+XG4gICAgICAgIDxncmlkLWZpZWxkdHlwZSA6ZGF0YT1cImRhdGFcIiA6Y29uZmlnPVwiZ3JpZENvbmZpZ1wiPjwvZ3JpZC1maWVsZHR5cGU+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgOm5hbWU9XCJuYW1lXCIgOnZhbHVlPVwiZGF0YSB8IGpzb25cIiAvPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2RhdGEnLCAnY29uZmlnJywgJ25hbWUnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ3JpZENvbmZpZzoge1xuICAgICAgICAgICAgICAgIGFkZF9yb3c6IHRyYW5zbGF0ZSgnY3AuYWRkX2xvY2FsZScpLFxuICAgICAgICAgICAgICAgIGZpZWxkczogW1xuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdsb2NhbGUnLCB0eXBlOiAndGV4dCcsIGRpc3BsYXk6IHRyYW5zbGF0ZSgnY3AubG9jYWxlJyksIHdpZHRoOiAnMjAnIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogJ3JvdXRlJywgdHlwZTogJ3RleHQnLCBkaXNwbGF5OiB0cmFuc2xhdGUoJ2NwLnJvdXRlJykgfSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBSb3V0ZXNGaWVsZHR5cGUudnVlPzc3OGMyZTY0IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXJvdXRlcy1maWVsZHR5cGUtd3JhcHBlcj4gPGdyaWQtZmllbGR0eXBlIDpkYXRhPWRhdGEgOmNvbmZpZz1ncmlkQ29uZmlnPjwvZ3JpZC1maWVsZHR5cGU+IDxpbnB1dCB0eXBlPWhpZGRlbiA6bmFtZT1uYW1lIDp2YWx1ZT1cXFwiZGF0YSB8IGpzb25cXFwiLz4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Sb3V0ZXNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2Mzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VjdGlvbkZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvU2VjdGlvbkZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDYzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiBbJ25hbWUnLCAnZGF0YScsICdjb25maWcnXVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFNlY3Rpb25GaWVsZHR5cGUudnVlP2UyMDJkNmEyIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VsZWN0RmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2VsZWN0RmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TZWxlY3RGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2NDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJzZWxlY3Qgc2VsZWN0LWZ1bGxcIiA6Y2xhc3M9XCJ7ICdzZWxlY3QtLWFjdGl2ZSc6IGlzQWN0aXZlIH1cIiA6ZGF0YS1jb250ZW50PVwibGFiZWxcIj5cbiAgICBcdDxzZWxlY3Qgdi1lbDpzZWxlY3QgOm5hbWU9XCJuYW1lXCIgdi1tb2RlbD1cImRhdGFcIiB0YWJpbmRleD1cIjBcIiBAZm9jdXM9XCJpc0FjdGl2ZSA9IHRydWVcIiBAYmx1cj1cImlzQWN0aXZlID0gZmFsc2VcIj5cbiAgICBcdFx0PG9wdGlvbiB2LWZvcj1cIm9wdGlvbiBpbiBzZWxlY3RPcHRpb25zXCIgOnZhbHVlPVwib3B0aW9uLnZhbHVlXCI+e3sgb3B0aW9uLnRleHQgfX08L29wdGlvbj5cbiAgICBcdDwvc2VsZWN0PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIHByb3BzOiBbJ29wdGlvbnMnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VsZWN0T3B0aW9uczogW10sXG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdE9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdE9wdGlvbnMgPSB0aGlzLmNvbmZpZy5vcHRpb25zO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIHR5cGUganVnZ2xlIHRvIG1ha2Ugc3VyZSBpbnRlZ2VycyBhcmUgdHJlYXRlZCBhcyB0aHVzLlxuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQodGhpcy5kYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGlzTmFOKHBhcnNlZCkgPyB0aGlzLmRhdGEgOiBwYXJzZWQ7XG5cbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBfLmZpbmRXaGVyZSh0aGlzLnNlbGVjdE9wdGlvbnMsIHt2YWx1ZTogdmFsfSk7XG5cbiAgICAgICAgICAgIHJldHVybiAob3B0aW9uKSA/IG9wdGlvbi50ZXh0IDogdGhpcy5kYXRhO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbHMuc2VsZWN0LmZvY3VzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFiZWw7XG4gICAgICAgIH0sXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFNlbGVjdEZpZWxkdHlwZS52dWU/YzA1YjhjMTgiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9XFxcInNlbGVjdCBzZWxlY3QtZnVsbFxcXCIgOmNsYXNzPVxcXCJ7ICdzZWxlY3QtLWFjdGl2ZSc6IGlzQWN0aXZlIH1cXFwiIDpkYXRhLWNvbnRlbnQ9bGFiZWw+IDxzZWxlY3Qgdi1lbDpzZWxlY3QgOm5hbWU9bmFtZSB2LW1vZGVsPWRhdGEgdGFiaW5kZXg9MCBAZm9jdXM9XFxcImlzQWN0aXZlID0gdHJ1ZVxcXCIgQGJsdXI9XFxcImlzQWN0aXZlID0gZmFsc2VcXFwiPiA8b3B0aW9uIHYtZm9yPVxcXCJvcHRpb24gaW4gc2VsZWN0T3B0aW9uc1xcXCIgOnZhbHVlPW9wdGlvbi52YWx1ZT57eyBvcHRpb24udGV4dCB9fTwvb3B0aW9uPiA8L3NlbGVjdD4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TZWxlY3RGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2NDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vU3RhdHVzRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU3RhdHVzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TdGF0dXNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2NDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInNlbGVjdCBzZWxlY3QtZnVsbFwiIGRhdGEtY29udGVudD1cInt7IHNlbGVjdGVkIHwgY2FwaXRhbGl6ZSB9fVwiPlxuXHQ8c3BhbiBjbGFzcz1cInN0YXR1cyBzdGF0dXMte3sgc2VsZWN0ZWQgfX1cIj48L3NwYW4+XG5cdDxzZWxlY3QgbmFtZT1cInN0YXR1c1wiIHYtbW9kZWw9XCJzZWxlY3RlZFwiIG9wdGlvbnM9XCJvcHRpb25zXCI+PC9zZWxlY3Q+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBwcm9wczogWydzZWxlY3RlZCcsICd0cmFuc2xhdGlvbnMnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7dGV4dDogJ0xpdmUnLCB2YWx1ZTogJ2xpdmUnfSxcbiAgICAgICAgICAgICAgICB7dGV4dDogJ0hpZGRlbicsIHZhbHVlOiAnaGlkZGVuJ30sXG4gICAgICAgICAgICAgICAge3RleHQ6ICdEcmFmdCcsIHZhbHVlOiAnZHJhZnQnfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gU3RhdHVzRmllbGR0eXBlLnZ1ZT82YjVkYzQ0YSIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz1cXFwic2VsZWN0IHNlbGVjdC1mdWxsXFxcIiBkYXRhLWNvbnRlbnQ9XFxcInt7IHNlbGVjdGVkIHwgY2FwaXRhbGl6ZSB9fVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzdGF0dXMgc3RhdHVzLXt7IHNlbGVjdGVkIH19XFxcIj48L3NwYW4+IDxzZWxlY3QgbmFtZT1zdGF0dXMgdi1tb2RlbD1zZWxlY3RlZCBvcHRpb25zPW9wdGlvbnM+PC9zZWxlY3Q+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvU3RhdHVzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1N1Z2dlc3RGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TdWdnZXN0RmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9TdWdnZXN0RmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwic3VnZ2VzdC1maWVsZHR5cGUtd3JhcHBlclwiPlxuICAgICAgICA8ZGl2IHYtaWY9XCJsb2FkaW5nXCIgY2xhc3M9XCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8c2VsZWN0IHYtaWY9XCIhbG9hZGluZ1wiXG4gICAgICAgICAgICAgICAgOm5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICA6cGxhY2Vob2xkZXI9XCJ0cmFuc2xhdGUoJ2NwLnBsZWFzZV9zZWxlY3QnKVwiXG4gICAgICAgICAgICAgICAgOm11bHRpcGxlPVwidHJ1ZVwiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgR2V0c1N1Z2dlc3RLZXkgZnJvbSAnLi9HZXRzU3VnZ2VzdEtleSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZSwgR2V0c1N1Z2dlc3RLZXldLFxuXG4gICAgcHJvcHM6IFsnc3VnZ2VzdGlvbnNQcm9wJ10sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBzdWdnZXN0aW9uczogW11cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZ2V0U3VnZ2VzdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3VnZ2VzdGlvbnNQcm9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1bGF0ZVN1Z2dlc3Rpb25zKHRoaXMuc3VnZ2VzdGlvbnNQcm9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlZmV0Y2hlZCA9IGRhdGFfZ2V0KFN0YXRhbWljLCAnUHVibGlzaC5zdWdnZXN0aW9ucy4nICsgdGhpcy5zdWdnZXN0S2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocHJlZmV0Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVsYXRlU3VnZ2VzdGlvbnMocHJlZmV0Y2hlZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kaHR0cC5wb3N0KGNwX3VybCgnYWRkb25zL3N1Z2dlc3Qvc3VnZ2VzdGlvbnMnKSwgdGhpcy5jb25maWcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVTdWdnZXN0aW9ucyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBvcHVsYXRlU3VnZ2VzdGlvbnMoc3VnZ2VzdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcblxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBfLmVhY2godGhpcy5kYXRhLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBsaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZC5wdXNoKHsndmFsdWUnOiB2YWx1ZSwgJ3RleHQnOiB2YWx1ZX0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBfLnVuaW9uKHN1Z2dlc3Rpb25zLCBmb3JtYXR0ZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0U2VsZWN0aXplKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0U2VsZWN0aXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgbGV0IG9wdHMgPSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5zdWdnZXN0aW9ucyxcbiAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5kYXRhLFxuICAgICAgICAgICAgICAgIGNyZWF0ZTogdGhpcy5jb25maWcuY3JlYXRlIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLmNvbmZpZy5tYXhfaXRlbXMsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMuY29uZmlnLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IFsnZHJhZ19kcm9wJywgJ3JlbW92ZV9idXR0b24nXSxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3Qgb3B0Z3JvdXBzID0gXy5jaGFpbih0aGlzLnN1Z2dlc3Rpb25zKS5wbHVjaygnb3B0Z3JvdXAnKS51bmlxdWUoKS5maWx0ZXIoKS5tYXAob3B0Z3JvdXAgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvcHRncm91cCwgbGFiZWw6IG9wdGdyb3VwIH07XG4gICAgICAgICAgICB9KS52YWx1ZSgpO1xuXG4gICAgICAgICAgICBpZiAob3B0Z3JvdXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9wdHMub3B0Z3JvdXBzID0gb3B0Z3JvdXBzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKHRoaXMuJGVsKS5maW5kKCdzZWxlY3QnKS5zZWxlY3RpemUob3B0cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVwbGljYXRvclByZXZpZXdUZXh0KCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5kYXRhKSByZXR1cm47XG5cbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zdWdnZXN0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWdnZXN0aW9uID0gXy5maW5kV2hlcmUodGhpcy5zdWdnZXN0aW9ucywgeyB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb24gPyBzdWdnZXN0aW9uLnRleHQgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5qb2luKCcsICcpO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmdldFN1Z2dlc3Rpb25zKCk7XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFN1Z2dlc3RGaWVsZHR5cGUudnVlPzdlOGI0ZjkyIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXN1Z2dlc3QtZmllbGR0eXBlLXdyYXBwZXI+IDxkaXYgdi1pZj1sb2FkaW5nIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19IDwvZGl2PiA8c2VsZWN0IHYtaWY9IWxvYWRpbmcgOm5hbWU9bmFtZSA6cGxhY2Vob2xkZXI9XFxcInRyYW5zbGF0ZSgnY3AucGxlYXNlX3NlbGVjdCcpXFxcIiA6bXVsdGlwbGU9dHJ1ZT4gPC9zZWxlY3Q+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvU3VnZ2VzdEZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UYWJsZUZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1RhYmxlRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UYWJsZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInRhYmxlLWZpZWxkXCI+XG4gICAgXHQ8dGFibGUgY2xhc3M9XCJib3JkZXJlZC10YWJsZVwiIHYtaWY9XCJyb3dDb3VudCB8fCBjb2x1bW5Db3VudFwiPlxuICAgIFx0XHQ8dGhlYWQ+XG4gICAgXHRcdFx0PHRyPlxuICAgIFx0XHRcdFx0PHRoIHYtZm9yPVwiY29sdW1uIGluIGNvbHVtbkNvdW50XCI+XG4gICAgXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiY29sdW1uLWNvdW50XCI+e3sgJGluZGV4ICsgMSB9fTwvc3Bhbj5cbiAgICBcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJpY29uIGljb24tY3Jvc3MgZGVsZXRlLWNvbHVtblwiIEBjbGljaz1cImRlbGV0ZUNvbHVtbigkaW5kZXgpXCI+PC9zcGFuPlxuICAgIFx0XHRcdFx0PC90aD5cbiAgICBcdFx0XHRcdDx0aCBjbGFzcz1cInJvdy1jb250cm9sc1wiPjwvdGg+XG4gICAgXHRcdFx0PC90cj5cbiAgICBcdFx0PC90aGVhZD5cbiAgICBcdFx0PHRib2R5PlxuICAgIFx0XHRcdDx0ciB2LWZvcj1cInJvdyBpbiBkYXRhXCI+XG4gICAgXHRcdFx0XHQ8dGQgdi1mb3I9XCJjZWxsIGluIHJvdy5jZWxsc1wiIHRyYWNrLWJ5PVwiJGluZGV4XCI+XG4gICAgXHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJjZWxsXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiAvPlxuICAgIFx0XHRcdFx0PC90ZD5cbiAgICBcdFx0XHRcdDx0ZCBjbGFzcz1cInJvdy1jb250cm9sc1wiPlxuICAgIFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImljb24gaWNvbi1tZW51IG1vdmUgZHJhZy1oYW5kbGVcIj48L3NwYW4+XG4gICAgXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNyb3NzIGRlbGV0ZVwiIHYtb246Y2xpY2s9XCJkZWxldGVSb3coJGluZGV4KVwiPjwvc3Bhbj5cbiAgICBcdFx0XHRcdDwvdGQ+XG4gICAgXHRcdFx0PC90cj5cbiAgICBcdFx0PC90Ym9keT5cbiAgICBcdDwvdGFibGU+XG5cbiAgICBcdDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj5cbiAgICBcdFx0PGEgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBAY2xpY2s9XCJhZGRSb3dcIiB2LWlmPVwiY2FuQWRkUm93c1wiPlxuICAgIFx0XHRcdHt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLnJvd3MnLCAxKSB9fSA8aSBjbGFzcz1cImljb24gaWNvbi1wbHVzIGljb24tcmlnaHRcIj48L2k+XG4gICAgXHRcdDwvYT5cbiAgICBcdFx0PGEgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBAY2xpY2s9XCJhZGRDb2x1bW5cIiB2LWlmPVwiY2FuQWRkQ29sdW1uc1wiPlxuICAgIFx0XHRcdHt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbHVtbnMnLCAxKSB9fSA8aSBjbGFzcz1cImljb24gaWNvbi1wbHVzIGljb24tcmlnaHRcIj48L2k+XG4gICAgXHRcdDwvYT5cbiAgICBcdDwvZGl2PlxuICAgIDwvZGl2PlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1heF9yb3dzOiB0aGlzLmNvbmZpZy5tYXhfcm93cyB8fCBudWxsLFxuICAgICAgICAgICAgbWF4X2NvbHVtbnM6IHRoaXMuY29uZmlnLm1heF9jb2x1bW5zIHx8IG51bGwsXG4gICAgICAgICAgICBhdXRvQmluZENoYW5nZVdhdGNoZXI6IGZhbHNlLFxuICAgICAgICAgICAgc29ydGFibGVJbml0aWFsaXplZDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgIFx0Y29sdW1uQ291bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFbMF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhWzBdLmNlbGxzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgXHR9LFxuXG4gICAgICAgIHJvd0NvdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5BZGRSb3dzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heF9yb3dzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm93Q291bnQgPCB0aGlzLm1heF9yb3dzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5BZGRDb2x1bW5zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvd0NvdW50IHx8IHRoaXMuY29sdW1uQ291bnQpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heF9jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbHVtbkNvdW50IDwgdGhpcy5tYXhfY29sdW1ucztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBzb3J0YWJsZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNvcnRhYmxlSW5pdGlhbGl6ZWQgfHwgdGhpcy5kYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhcnQgPSAnJztcblxuICAgICAgICAgICAgJCh0aGlzLiRlbCkuZmluZCgndGJvZHknKS5zb3J0YWJsZSh7XG4gICAgICAgICAgICAgICAgYXhpczogXCJ5XCIsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0OiAxNzUsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiAnLmRyYWctaGFuZGxlJyxcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ0YWJsZS1yb3ctcGxhY2Vob2xkZXJcIixcbiAgICAgICAgICAgICAgICBmb3JjZVBsYWNlaG9sZGVyU2l6ZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbihlLCB1aSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHVpLml0ZW0uaW5kZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgdWkucGxhY2Vob2xkZXIuaGVpZ2h0KHVpLml0ZW0uaGVpZ2h0KCkpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGUsIHVpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgID0gdWkuaXRlbS5pbmRleCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3dhcCA9IHNlbGYuZGF0YS5zcGxpY2Uoc3RhcnQsIDEpWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5zcGxpY2UoZW5kLCAwLCBzd2FwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zb3J0YWJsZUluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95U29ydGFibGUoKSB7XG4gICAgICAgICAgICAkKHRoaXMuJGVsKS5maW5kKCd0Ym9keScpLnNvcnRhYmxlKCdkZXN0cm95Jyk7XG4gICAgICAgICAgICB0aGlzLnNvcnRhYmxlSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgIFx0YWRkUm93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjb2x1bW5zLCB3ZSB3aWxsIGFkZCBvbmUgd2hlbiB3ZSBhZGQgYSByb3cuXG4gICAgICAgICAgICB2YXIgY291bnQgPSAodGhpcy5jb2x1bW5Db3VudCA9PT0gMCkgPyAxIDogdGhpcy5jb2x1bW5Db3VudDtcblxuICAgICAgICAgICAgdGhpcy5kYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgIGNlbGxzOiBuZXcgQXJyYXkoY291bnQpXG4gICAgICAgICAgICB9KTtcbiAgICBcdH0sXG5cbiAgICBcdGFkZENvbHVtbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcm93cyA9IHRoaXMuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhW2ldLmNlbGxzLnB1c2goJycpO1xuICAgICAgICAgICAgfVxuICAgIFx0fSxcblxuICAgICAgICBkZWxldGVSb3c6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogdHJhbnNsYXRlKCdjcC5hcmVfeW91X3N1cmUnKSxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC55ZXNfaW1fc3VyZScpLFxuICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IHRyYW5zbGF0ZSgnY3AuY2FuY2VsJyksXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5kYXRhLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVDb2x1bW46IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogdHJhbnNsYXRlKCdjcC5hcmVfeW91X3N1cmUnKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0cmFuc2xhdGVfY2hvaWNlKCdjcC5jb25maXJtX2RlbGV0ZV9pdGVtcycsIDEpLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0cmFuc2xhdGUoJ2NwLnllc19pbV9zdXJlJyksXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogdHJhbnNsYXRlKCdjcC5jYW5jZWwnKSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHNlbGYuZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRhdGFbaV0uY2VsbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZXBsaWNhdG9yUHJldmlld1RleHQoKSB7XG4gICAgICAgICAgICAvLyBKb2luIGFsbCB2YWx1ZXMgd2l0aCBjb21tYXMuIEV4Y2x1ZGUgYW55IGVtcHRpZXMuXG4gICAgICAgICAgICByZXR1cm4gXyh0aGlzLmRhdGEpXG4gICAgICAgICAgICAgICAgLm1hcChyb3cgPT4gcm93LmNlbGxzLmZpbHRlcihjZWxsID0+ICEhY2VsbCkuam9pbignLCAnKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHJvdyA9PiAhIXJvdykuam9pbignLCAnKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggISB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgICAgICB0aGlzLnNvcnRhYmxlKCk7XG4gICAgfSxcblxuICAgIHdhdGNoOiB7XG5cbiAgICAgICAgZGF0YShkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0YWJsZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveVNvcnRhYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFRhYmxlRmllbGR0eXBlLnZ1ZT8zNmUzMmZiMCIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGRpdiBjbGFzcz10YWJsZS1maWVsZD4gPHRhYmxlIGNsYXNzPWJvcmRlcmVkLXRhYmxlIHYtaWY9XFxcInJvd0NvdW50IHx8IGNvbHVtbkNvdW50XFxcIj4gPHRoZWFkPiA8dHI+IDx0aCB2LWZvcj1cXFwiY29sdW1uIGluIGNvbHVtbkNvdW50XFxcIj4gPHNwYW4gY2xhc3M9Y29sdW1uLWNvdW50Pnt7ICRpbmRleCArIDEgfX08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tY3Jvc3MgZGVsZXRlLWNvbHVtblxcXCIgQGNsaWNrPWRlbGV0ZUNvbHVtbigkaW5kZXgpPjwvc3Bhbj4gPC90aD4gPHRoIGNsYXNzPXJvdy1jb250cm9scz48L3RoPiA8L3RyPiA8L3RoZWFkPiA8dGJvZHk+IDx0ciB2LWZvcj1cXFwicm93IGluIGRhdGFcXFwiPiA8dGQgdi1mb3I9XFxcImNlbGwgaW4gcm93LmNlbGxzXFxcIiB0cmFjay1ieT0kaW5kZXg+IDxpbnB1dCB0eXBlPXRleHQgdi1tb2RlbD1jZWxsIGNsYXNzPWZvcm0tY29udHJvbCAvPiA8L3RkPiA8dGQgY2xhc3M9cm93LWNvbnRyb2xzPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLW1lbnUgbW92ZSBkcmFnLWhhbmRsZVxcXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNyb3NzIGRlbGV0ZVxcXCIgdi1vbjpjbGljaz1kZWxldGVSb3coJGluZGV4KT48L3NwYW4+IDwvdGQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDxkaXYgY2xhc3M9YnRuLWdyb3VwPiA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBAY2xpY2s9YWRkUm93IHYtaWY9Y2FuQWRkUm93cz4ge3sgdHJhbnNsYXRlX2Nob2ljZSgnY3Aucm93cycsIDEpIH19IDxpIGNsYXNzPVxcXCJpY29uIGljb24tcGx1cyBpY29uLXJpZ2h0XFxcIj48L2k+IDwvYT4gPGEgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgQGNsaWNrPWFkZENvbHVtbiB2LWlmPWNhbkFkZENvbHVtbnM+IHt7IHRyYW5zbGF0ZV9jaG9pY2UoJ2NwLmNvbHVtbnMnLCAxKSB9fSA8aSBjbGFzcz1cXFwiaWNvbiBpY29uLXBsdXMgaWNvbi1yaWdodFxcXCI+PC9pPiA8L2E+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RhYmxlRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RhZ3NGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9UYWdzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UYWdzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwidGFnLWZpZWxkdHlwZS13cmFwcGVyXCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHYtZWw6dGFncyA6dmFsdWU9XCJkYXRhXCIgLz5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtGaWVsZHR5cGVdLFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICQodGhpcy4kZWxzLnRhZ3MpLnNlbGVjdGl6ZSh7XG4gICAgICAgICAgICBkZWxpbWl0ZXI6ICcsJyxcbiAgICAgICAgICAgIHBlcnNpc3Q6IGZhbHNlLFxuICAgICAgICAgICAgcGx1Z2luczogWydkcmFnX2Ryb3AnLCAncmVtb3ZlX2J1dHRvbiddLFxuICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5wdXQsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGlucHV0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmRhdGEgPSB2YWx1ZS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uSXRlbVJlbW92ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9uc1t2YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbHMudGFncy5zZWxlY3RpemUuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgfVxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFRhZ3NGaWVsZHR5cGUudnVlPzM0ZDYyOTgyIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXRhZy1maWVsZHR5cGUtd3JhcHBlcj4gPGlucHV0IHR5cGU9dGV4dCB2LWVsOnRhZ3MgOnZhbHVlPWRhdGEgLz4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UYWdzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RheG9ub215RmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVGF4b25vbXlGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RheG9ub215RmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8cmVsYXRlLWZpZWxkdHlwZSA6ZGF0YS5zeW5jPVwiZGF0YVwiIDpuYW1lPVwibmFtZVwiIDpjb25maWc9XCJhZGp1c3RlZENvbmZpZ1wiIHYtcmVmOnJlbGF0ZT48L3JlbGF0ZS1maWVsZHR5cGU+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEFkYXB0c1JlbGF0ZUZpZWxkdHlwZSBmcm9tICcuL0FkYXB0c1JlbGF0ZUZpZWxkdHlwZS52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtBZGFwdHNSZWxhdGVGaWVsZHR5cGVdLFxuXG4gICAgY29tcHV0ZWQ6IHtcblxuICAgICAgICBhZGp1c3RlZENvbmZpZygpIHtcbiAgICAgICAgICAgIGxldCBjID0gdGhpcy5jb25maWc7XG5cbiAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIGNyZWF0ZSBtb2RlIHNob3VsZCBiZSB0cnVlLlxuICAgICAgICAgICAgaWYgKGMuY3JlYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjLmNyZWF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG11bHRpcGxlIHRheG9ub21pZXMgaGF2ZSBiZWVuIHNwZWNpZmllZCwgdGhlIGZpZWxkIGNhbid0IGtub3dcbiAgICAgICAgICAgIC8vIGluIHdoaWNoIHRheG9ub215IHRvIGNyZWF0ZSwgc28gdGhlIGZlYXR1cmUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcudGF4b25vbXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYy5jcmVhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgIH1cblxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUYXhvbm9teUZpZWxkdHlwZS52dWU/MGFjZjdiZWMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXY+IDxyZWxhdGUtZmllbGR0eXBlIDpkYXRhLnN5bmM9ZGF0YSA6bmFtZT1uYW1lIDpjb25maWc9YWRqdXN0ZWRDb25maWcgdi1yZWY6cmVsYXRlPjwvcmVsYXRlLWZpZWxkdHlwZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UYXhvbm9teUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UZW1wbGF0ZUZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1RlbXBsYXRlRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UZW1wbGF0ZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPGRpdiB2LWlmPVwibG9hZGluZ1wiIGNsYXNzPVwibG9hZGluZyBsb2FkaW5nLWJhc2ljXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblwiPjwvc3Bhbj4ge3sgdHJhbnNsYXRlKCdjcC5sb2FkaW5nJykgfX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHNlbGVjdC1maWVsZHR5cGUgdi1pZj1cIiFsb2FkaW5nXCIgOm5hbWU9XCJuYW1lXCIgOmRhdGEuc3luYz1cImRhdGFcIiA6Y29uZmlnPVwic2VsZWN0Q29uZmlnXCI+PC9zZWxlY3QtZmllbGR0eXBlPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOiBbJ2RhdGEnLCAnY29uZmlnJywgJ25hbWUnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHt9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgc2VsZWN0Q29uZmlnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy4kaHR0cC5nZXQoY3BfdXJsKCdzeXN0ZW0vdGVtcGxhdGVzL2dldCcpLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IFt7IHZhbHVlOiBudWxsLCB0ZXh0OiAnJyB9XTtcbiAgICAgICAgICAgIF8uZWFjaChkYXRhLCBmdW5jdGlvbih0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0ZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGVtcGxhdGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUZW1wbGF0ZUZpZWxkdHlwZS52dWU/NTVkN2Y5MGMiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXY+IDxkaXYgdi1pZj1sb2FkaW5nIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19IDwvZGl2PiA8c2VsZWN0LWZpZWxkdHlwZSB2LWlmPSFsb2FkaW5nIDpuYW1lPW5hbWUgOmRhdGEuc3luYz1kYXRhIDpjb25maWc9c2VsZWN0Q29uZmlnPjwvc2VsZWN0LWZpZWxkdHlwZT4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UZW1wbGF0ZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UZXh0RmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVGV4dEZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGV4dEZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGlucHV0IDp0eXBlPVwibW9kZVwiIDpjbGFzcz1cImNsYXNzZXNcIiB2LW1vZGVsPVwiZGF0YVwiIHRhYmluZGV4PVwiMFwiIDphdXRvZm9jdXM9XCJhdXRvZm9jdXNcIiA6cGxhY2Vob2xkZXI9XCJjb25maWcucGxhY2Vob2xkZXJcIiAvPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlLCBBdXRvU2x1Z10sXG5cbiAgICBwcm9wczogWydhdXRvZm9jdXMnXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIFx0cmV0dXJuIHtcbiAgICBcdFx0bW9kZTogdGhpcy5jb25maWcubW9kZSB8fCAndGV4dCdcbiAgICBcdH1cbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgY2xhc3NlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2Zvcm0tY29udHJvbCB0eXBlLScgKyB0aGlzLm1vZGU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hdXRvc2x1Zykge1xuICAgICAgICAgICAgdGhpcy5hdXRvU2x1Zyh0aGlzLmNvbmZpZy5hdXRvc2x1Zyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUZXh0RmllbGR0eXBlLnZ1ZT82NTc3NjJjZiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPGlucHV0IDp0eXBlPW1vZGUgOmNsYXNzPWNsYXNzZXMgdi1tb2RlbD1kYXRhIHRhYmluZGV4PTAgOmF1dG9mb2N1cz1hdXRvZm9jdXMgOnBsYWNlaG9sZGVyPWNvbmZpZy5wbGFjZWhvbGRlciAvPiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGV4dEZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UZXh0YXJlYUZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1RleHRhcmVhRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UZXh0YXJlYUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImRhdGFcIiB2LWVsOnRleHRhcmVhIHYtZWxhc3RpYyA6cGxhY2Vob2xkZXI9XCJjb25maWcucGxhY2Vob2xkZXJcIj48L3RleHRhcmVhPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBtaXhpbnM6IFtGaWVsZHR5cGVdXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gVGV4dGFyZWFGaWVsZHR5cGUudnVlPzQ2MzExZTY2IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8dGV4dGFyZWEgY2xhc3M9Zm9ybS1jb250cm9sIHYtbW9kZWw9ZGF0YSB2LWVsOnRleHRhcmVhIHYtZWxhc3RpYyA6cGxhY2Vob2xkZXI9Y29uZmlnLnBsYWNlaG9sZGVyPjwvdGV4dGFyZWE+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UZXh0YXJlYUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UaGVtZUZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1RoZW1lRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9UaGVtZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInRoZW1lLWZpZWxkdHlwZS13cmFwcGVyXCI+XG4gICAgICAgIDxkaXYgdi1pZj1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmcgbG9hZGluZy1iYXNpY1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c2VsZWN0LWZpZWxkdHlwZSB2LWlmPVwiIWxvYWRpbmdcIiA6bmFtZT1cIm5hbWVcIiA6ZGF0YS5zeW5jPVwiZGF0YVwiIDpjb25maWc9XCJzZWxlY3RDb25maWdcIj48L3NlbGVjdC1maWVsZHR5cGU+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IFsnZGF0YScsICdjb25maWcnLCAnbmFtZSddLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgb3B0aW9uczoge31cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBzZWxlY3RDb25maWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLiRodHRwLmdldChjcF91cmwoJ3N5c3RlbS90aGVtZXMvZ2V0JyksIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gW107XG4gICAgICAgICAgICBfLmVhY2goZGF0YSwgZnVuY3Rpb24odGhlbWUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhlbWUuZm9sZGVyLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGVtZS5uYW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gVGhlbWVGaWVsZHR5cGUudnVlPzEyZjJiNmM0IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXRoZW1lLWZpZWxkdHlwZS13cmFwcGVyPiA8ZGl2IHYtaWY9bG9hZGluZyBjbGFzcz1cXFwibG9hZGluZyBsb2FkaW5nLWJhc2ljXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1jaXJjdWxhci1ncmFwaCBhbmltYXRpb24tc3BpblxcXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fSA8L2Rpdj4gPHNlbGVjdC1maWVsZHR5cGUgdi1pZj0hbG9hZGluZyA6bmFtZT1uYW1lIDpkYXRhLnN5bmM9ZGF0YSA6Y29uZmlnPXNlbGVjdENvbmZpZz48L3NlbGVjdC1maWVsZHR5cGU+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGhlbWVGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2Njlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vVGltZUZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1RpbWVGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RpbWVGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2NzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJ0aW1lLXRlbXBsYXRlLXdyYXBwZXJcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwMFwiIG1heD1cIjIzXCIgdi1tb2RlbD1cImhvdXJcIiB2LWVsOmhvdXJcbiAgICAgICAgICAgIEBrZXlkb3duLnVwLnByZXZlbnQ9XCJpbmNyZW1lbnRIb3VyKDEpXCJcbiAgICAgICAgICAgIEBrZXlkb3duLmRvd24ucHJldmVudD1cImluY3JlbWVudEhvdXIoLTEpXCJcbiAgICAgICAgICAgIEBrZXlkb3duLmVzYz1cImNsZWFyXCJcbiAgICAgICAgICAgIEBrZXlkb3duLjE4Ni5wcmV2ZW50PVwiZm9jdXNNaW51dGVcIlxuICAgICAgICAgICAgQGtleWRvd24uMTkwLnByZXZlbnQ9XCJmb2N1c01pbnV0ZVwiXG4gICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAvPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImNvbG9uXCI+Ojwvc3Bhbj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwMFwiIG1heD1cIjU5XCIgdi1tb2RlbD1cIm1pbnV0ZVwiIHYtZWw6bWludXRlXG4gICAgICAgICAgICBAa2V5ZG93bi51cC5wcmV2ZW50PVwiaW5jcmVtZW50TWludXRlKDEpXCJcbiAgICAgICAgICAgIEBrZXlkb3duLmRvd24ucHJldmVudD1cImluY3JlbWVudE1pbnV0ZSgtMSlcIlxuICAgICAgICAgICAgQGtleWRvd24uZXNjPVwiY2xlYXJcIlxuICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLXJlbW92ZVwiIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAgICAgICB2LWlmPVwiIWlzUmVxdWlyZWQgJiYgaGFzVGltZVwiXG4gICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjbGVhclwiIEBrZXl1cC5lbnRlci5zcGFjZT1cImNsZWFyXCI+XG4gICAgICAgICAgICAgICAgICAmdGltZXM7XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHJlcXVpcmVkOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGhvdXI6IHtcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnN1cmVUaW1lKCk7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSB0aGlzLmRhdGEuc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICB2YXIgaG91ciA9IHBhcnNlSW50KHZhbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgeW91IGNhbnQgZ28gYmV5b25kIHRoZSByYW5nZVxuICAgICAgICAgICAgICAgIGhvdXIgPSAoaG91ciA+IDIzKSA/IDIzIDogaG91cjtcbiAgICAgICAgICAgICAgICBob3VyID0gKGhvdXIgPCAwKSA/IDAgOiBob3VyO1xuXG4gICAgICAgICAgICAgICAgdGltZVswXSA9IHRoaXMucGFkKGhvdXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRpbWUuam9pbignOicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmhhc1RpbWUpID8gdGhpcy5wYWQodGhpcy5kYXRhLnNwbGl0KCc6JylbMF0pIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWludXRlOiB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5zdXJlVGltZSgpO1xuICAgICAgICAgICAgICAgIHZhciB0aW1lID0gdGhpcy5kYXRhLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgdmFyIG1pbnV0ZSA9IHBhcnNlSW50KHZhbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBlbnN1cmUgeW91IGNhbnQgZ28gYmV5b25kIHRoZSByYW5nZVxuICAgICAgICAgICAgICAgIG1pbnV0ZSA9IChtaW51dGUgPiA1OSkgPyA1OSA6IG1pbnV0ZTtcbiAgICAgICAgICAgICAgICBtaW51dGUgPSAobWludXRlIDwgMCkgPyAwIDogbWludXRlO1xuXG4gICAgICAgICAgICAgICAgdGltZVsxXSA9IHRoaXMucGFkKG1pbnV0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGltZS5qb2luKCc6Jyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuaGFzVGltZSkgPyB0aGlzLnBhZCh0aGlzLmRhdGEuc3BsaXQoJzonKVsxXSkgOiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBoYXNUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVkIHx8IHRoaXMuZGF0YSAhPT0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc1JlcXVpcmVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVxdWlyZWQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgICBwYWQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuICgnMDAnICsgdmFsKS5zdWJzdHIoLTIsIDIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVuc3VyZVRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCEgdGhpcy5oYXNUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplVGltZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRpYWxpemVUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9ICcwMDowMCc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBpbmNyZW1lbnRIb3VyOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZW5zdXJlVGltZSgpO1xuXG4gICAgICAgICAgICB2YXIgaG91ciA9IHBhcnNlSW50KHRoaXMuaG91cikgKyB2YWw7XG5cbiAgICAgICAgICAgIC8vIGVuYWJsZSB3cmFwcGluZ1xuICAgICAgICAgICAgaG91ciA9IChob3VyID09PSAyNCkgPyAwIDogaG91cjtcbiAgICAgICAgICAgIGhvdXIgPSAoaG91ciA9PT0gLTEpID8gMjMgOiBob3VyO1xuXG4gICAgICAgICAgICB0aGlzLmhvdXIgPSBob3VyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluY3JlbWVudE1pbnV0ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVuc3VyZVRpbWUoKTtcblxuICAgICAgICAgICAgdmFyIG1pbnV0ZSA9IHBhcnNlSW50KHRoaXMubWludXRlKSArIHZhbDtcblxuICAgICAgICAgICAgLy8gZW5hYmxlIHdyYXBwaW5nXG4gICAgICAgICAgICBtaW51dGUgPSAobWludXRlID09PSA2MCkgPyAwIDogbWludXRlO1xuICAgICAgICAgICAgbWludXRlID0gKG1pbnV0ZSA9PT0gLTEpID8gNTkgOiBtaW51dGU7XG5cbiAgICAgICAgICAgIHRoaXMubWludXRlID0gbWludXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZvY3VzTWludXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcy4kZWxzLm1pbnV0ZSkuZm9jdXMoKS5zZWxlY3QoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMuJGVscy5ob3VyLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gVGltZUZpZWxkdHlwZS52dWU/MjQ1YTNhYjIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9dGltZS10ZW1wbGF0ZS13cmFwcGVyPiA8aW5wdXQgY2xhc3M9Zm9ybS1jb250cm9sIHR5cGU9bnVtYmVyIG1pbj0wMCBtYXg9MjMgdi1tb2RlbD1ob3VyIHYtZWw6aG91ciBAa2V5ZG93bi51cC5wcmV2ZW50PWluY3JlbWVudEhvdXIoMSkgQGtleWRvd24uZG93bi5wcmV2ZW50PWluY3JlbWVudEhvdXIoLTEpIEBrZXlkb3duLmVzYz1jbGVhciBAa2V5ZG93bi4xODYucHJldmVudD1mb2N1c01pbnV0ZSBAa2V5ZG93bi4xOTAucHJldmVudD1mb2N1c01pbnV0ZSB0YWJpbmRleD0wIC8+IDxzcGFuIGNsYXNzPWNvbG9uPjo8L3NwYW4+IDxpbnB1dCBjbGFzcz1mb3JtLWNvbnRyb2wgdHlwZT1udW1iZXIgbWluPTAwIG1heD01OSB2LW1vZGVsPW1pbnV0ZSB2LWVsOm1pbnV0ZSBAa2V5ZG93bi51cC5wcmV2ZW50PWluY3JlbWVudE1pbnV0ZSgxKSBAa2V5ZG93bi5kb3duLnByZXZlbnQ9aW5jcmVtZW50TWludXRlKC0xKSBAa2V5ZG93bi5lc2M9Y2xlYXIgdGFiaW5kZXg9MCAvPiA8ZGl2PiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLXJlbW92ZVxcXCIgdGFiaW5kZXg9MCB2LWlmPVxcXCIhaXNSZXF1aXJlZCAmJiBoYXNUaW1lXFxcIiBAY2xpY2s9Y2xlYXIgQGtleXVwLmVudGVyLnNwYWNlPWNsZWFyPiAmdGltZXM7IDwvc3Bhbj4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVGltZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Ub2dnbGVGaWVsZHR5cGUudnVlXCIpXG5fX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWh0bWwtbG9hZGVyIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ub2dnbGVGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RvZ2dsZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInRvZ2dsZS1maWVsZHR5cGUtd3JhcHBlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidG9nZ2xlLWNvbnRhaW5lclwiIDpjbGFzcz1cInsgJ29uJzogaXNPbiB9XCIgQGNsaWNrPVwidG9nZ2xlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9nZ2xlLXNsaWRlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b2dnbGUta25vYlwiIHRhYmluZGV4PVwiMFwiIEBrZXl1cC5wcmV2ZW50LnNwYWNlLmVudGVyPVwidG9nZ2xlXCIgdi1lbDprbm9iIHRhYmluZGV4PVwiMFwiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0ZpZWxkdHlwZV0sXG5cbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXV0b0JpbmRDaGFuZ2VXYXRjaGVyOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBpc09uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBBbGxvdyB0aGUgXCJvblwiIHN0YXRlIHRvIGJlIG9uIHdoZW4gaXQncyBmYWxzZXkuXG4gICAgICAgICAgICAvLyBVc2VmdWwgZm9yIGV4YW1wbGUgaWYgdGhlIHZhcmlhYmxlIGlzIFwiaGlkZGVuXCIgYnV0IHRoZSBsYWJlbCBpcyBcInZpc2libGVcIi5cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZyAmJiB0aGlzLmNvbmZpZy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA9PT0gbWF0Y2g7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSAhdGhpcy5kYXRhO1xuICAgICAgICB9LFxuICAgICAgICBmb2N1cygpIHtcbiAgICAgICAgICAgIHRoaXMuJGVscy5rbm9iLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlYWR5KCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmNvbmZpZy5kZWZhdWx0IHx8IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5iaW5kQ2hhbmdlV2F0Y2hlcigpO1xuICAgIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBUb2dnbGVGaWVsZHR5cGUudnVlPzA3YWUyNzJiIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXRvZ2dsZS1maWVsZHR5cGUtd3JhcHBlcj4gPGRpdiBjbGFzcz10b2dnbGUtY29udGFpbmVyIDpjbGFzcz1cXFwieyAnb24nOiBpc09uIH1cXFwiIEBjbGljaz10b2dnbGU+IDxkaXYgY2xhc3M9dG9nZ2xlLXNsaWRlcj4gPGRpdiBjbGFzcz10b2dnbGUta25vYiB0YWJpbmRleD0wIEBrZXl1cC5wcmV2ZW50LnNwYWNlLmVudGVyPXRvZ2dsZSB2LWVsOmtub2IgdGFiaW5kZXg9MD48L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1RvZ2dsZUZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9ZYW1sRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vWWFtbEZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvWWFtbEZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInlhbWwtZmllbGR0eXBlLXdyYXBwZXJcIj5cbiAgICAgICAgPHNwYW4+WUFNTDwvc3Bhbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImVkaXRvclwiIHYtZWw6Y29kZW1pcnJvcj48L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG52YXIgQ29kZU1pcnJvciA9IHJlcXVpcmUoJ2NvZGVtaXJyb3InKTtcbnJlcXVpcmUoJ2NvZGVtaXJyb3IvbW9kZS95YW1sL3lhbWwnKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbWl4aW5zOiBbRmllbGR0eXBlXSxcblxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlbWlycm9yOiBudWxsICAgICAgIC8vIFRoZSBDb2RlTWlycm9yIGluc3RhbmNlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmNvZGVtaXJyb3IgPSBDb2RlTWlycm9yKHRoaXMuJGVscy5jb2RlbWlycm9yLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5kYXRhIHx8IHRoaXMuY29uZmlnLmRlZmF1bHQgfHwgJycsXG4gICAgICAgICAgICBtb2RlOiAneWFtbCcsXG4gICAgICAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcbiAgICAgICAgICAgIHZpZXdwb3J0TWFyZ2luOiBJbmZpbml0eVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvZGVtaXJyb3Iub24oJ2NoYW5nZScsIChjbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gY20uZG9jLmdldFZhbHVlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgZm9jdXMoKSB7XG4gICAgICAgICAgICB0aGlzLmNvZGVtaXJyb3IuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gWWFtbEZpZWxkdHlwZS52dWU/NjY4YjFjMmUiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXYgY2xhc3M9eWFtbC1maWVsZHR5cGUtd3JhcHBlcj4gPHNwYW4+WUFNTDwvc3Bhbj4gPGRpdiBjbGFzcz1lZGl0b3Igdi1lbDpjb2RlbWlycm9yPjwvZGl2PiA8L2Rpdj4gXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWh0bWwtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1lhbWxGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2Nzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9fdnVlX3NjcmlwdF9fLCBfX3Z1ZV90ZW1wbGF0ZV9fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV19IS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vVXNlckdyb3Vwc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1VzZXJHcm91cHNGaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1VzZXJHcm91cHNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2Nzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxkaXYgdi1pZj1cImxvYWRpbmdcIiBjbGFzcz1cImxvYWRpbmcgbG9hZGluZy1iYXNpY1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGljb24tY2lyY3VsYXItZ3JhcGggYW5pbWF0aW9uLXNwaW5cIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgdi1pZj1cIiFsb2FkaW5nICYmICFjYW5FZGl0XCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJncm91cCBpbiBzZWxlY3RlZEdyb3VwTmFtZXNcIj5cbiAgICAgICAgICAgICAgICB7eyBncm91cCB9fTx0ZW1wbGF0ZSB2LWlmPVwiJGluZGV4ICE9PSBzZWxlY3RlZEdyb3VwTmFtZXMubGVuZ3RoLTFcIj4sPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ1c2VyX2dyb3Vwcy1maWVsZHR5cGVcIiB2LWlmPVwiIWxvYWRpbmcgJiYgY2FuRWRpdFwiPlxuICAgICAgICAgICAgPHJlbGF0ZS1maWVsZHR5cGUgOmRhdGEuc3luYz1cImRhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjb25maWc9XCJjb25maWdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnN1Z2dlc3Rpb25zLXByb3A9XCJncm91cHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1yZWY6cmVsYXRlPlxuICAgICAgICAgICAgPC9yZWxhdGUtZmllbGR0eXBlPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgQWRhcHRzUmVsYXRlRmllbGR0eXBlIGZyb20gJy4vQWRhcHRzUmVsYXRlRmllbGR0eXBlLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1peGluczogW0FkYXB0c1JlbGF0ZUZpZWxkdHlwZV0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICBncm91cHM6IHt9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgY2FuRWRpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gVnVlLmNhbignc3VwZXInKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZWxlY3RlZEdyb3VwTmFtZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHRoaXMuZGF0YSwgZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kV2hlcmUoc2VsZi5ncm91cHMsIHsgdmFsdWU6IGlkIH0pLnRleHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBnZXRHcm91cHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kaHR0cC5nZXQoY3BfdXJsKCd1c2Vycy9ncm91cHMvZ2V0JyksIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgXy5lYWNoKGRhdGEuaXRlbXMsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3Vwcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBncm91cC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdyb3VwLnRpdGxlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cHMgPSBncm91cHM7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5nZXRHcm91cHMoKTtcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gVXNlckdyb3Vwc0ZpZWxkdHlwZS52dWU/NzMyMzNhOTIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXY+IDxkaXYgdi1pZj1sb2FkaW5nIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19IDwvZGl2PiA8ZGl2IHYtaWY9XFxcIiFsb2FkaW5nICYmICFjYW5FZGl0XFxcIj4gPHRlbXBsYXRlIHYtZm9yPVxcXCJncm91cCBpbiBzZWxlY3RlZEdyb3VwTmFtZXNcXFwiPiB7eyBncm91cCB9fTx0ZW1wbGF0ZSB2LWlmPVxcXCIkaW5kZXggIT09IHNlbGVjdGVkR3JvdXBOYW1lcy5sZW5ndGgtMVxcXCI+LDwvdGVtcGxhdGU+IDwvdGVtcGxhdGU+IDwvZGl2PiA8ZGl2IGNsYXNzPXVzZXJfZ3JvdXBzLWZpZWxkdHlwZSB2LWlmPVxcXCIhbG9hZGluZyAmJiBjYW5FZGl0XFxcIj4gPHJlbGF0ZS1maWVsZHR5cGUgOmRhdGEuc3luYz1kYXRhIDpuYW1lPW5hbWUgOmNvbmZpZz1jb25maWcgOnN1Z2dlc3Rpb25zLXByb3A9Z3JvdXBzIHYtcmVmOnJlbGF0ZT4gPC9yZWxhdGUtZmllbGR0eXBlPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Vc2VyR3JvdXBzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1VzZXJSb2xlc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1VzZXJSb2xlc0ZpZWxkdHlwZS52dWVcIilcbm1vZHVsZS5leHBvcnRzID0gX192dWVfc2NyaXB0X18gfHwge31cbmlmIChtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlKSBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzLmRlZmF1bHRcbnZhciBfX3Z1ZV9vcHRpb25zX18gPSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwiZnVuY3Rpb25cIiA/IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zIHx8IChtb2R1bGUuZXhwb3J0cy5vcHRpb25zID0ge30pKSA6IG1vZHVsZS5leHBvcnRzXG5pZiAoX192dWVfdGVtcGxhdGVfXykge1xuX192dWVfb3B0aW9uc19fLnRlbXBsYXRlID0gX192dWVfdGVtcGxhdGVfX1xufVxuaWYgKCFfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQpIF9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCA9IHt9XG5PYmplY3Qua2V5cyhfX3Z1ZV9zdHlsZXNfXykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG52YXIgbW9kdWxlID0gX192dWVfc3R5bGVzX19ba2V5XVxuX192dWVfb3B0aW9uc19fLmNvbXB1dGVkW2tleV0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2R1bGUgfVxufSlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlclJvbGVzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8ZGl2IHYtaWY9XCJsb2FkaW5nXCIgY2xhc3M9XCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXCI+PC9zcGFuPiB7eyB0cmFuc2xhdGUoJ2NwLmxvYWRpbmcnKSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInVzZXJfcm9sZXMtZmllbGR0eXBlXCIgdi1pZj1cIiFsb2FkaW5nXCI+XG4gICAgICAgICAgICA8cmVsYXRlLWZpZWxkdHlwZSA6ZGF0YS5zeW5jPVwiZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bmFtZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNvbmZpZz1cImNvbmZpZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3VnZ2VzdGlvbnMtcHJvcD1cInJvbGVzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiFjYW5FZGl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtcmVmOnJlbGF0ZT5cbiAgICAgICAgICAgIDwvcmVsYXRlLWZpZWxkdHlwZT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEFkYXB0c1JlbGF0ZUZpZWxkdHlwZSBmcm9tICcuL0FkYXB0c1JlbGF0ZUZpZWxkdHlwZS52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtaXhpbnM6IFtBZGFwdHNSZWxhdGVGaWVsZHR5cGVdLFxuXG4gICAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgcm9sZXM6IHt9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG5cbiAgICAgICAgY2FuRWRpdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gVnVlLmNhbigndXNlcnM6ZWRpdC1yb2xlcycpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbGVjdGVkUm9sZU5hbWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfLm1hcCh0aGlzLmRhdGEsIGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZmluZFdoZXJlKHNlbGYucm9sZXMsIHsgdmFsdWU6IGlkIH0pLnRleHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICBnZXRSb2xlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLiRodHRwLmdldChjcF91cmwoJ3VzZXJzL3JvbGVzL2dldCcpLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvbGVzID0gW107XG4gICAgICAgICAgICAgICAgXy5lYWNoKGRhdGEuaXRlbXMsIGZ1bmN0aW9uKHJvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm9sZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHJvbGUudGl0bGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJvbGVzID0gcm9sZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5nZXRSb2xlcygpO1xuICAgIH1cblxufTtcbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIFVzZXJSb2xlc0ZpZWxkdHlwZS52dWU/NjExNWUxODYiLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxkaXY+IDxkaXYgdi1pZj1sb2FkaW5nIGNsYXNzPVxcXCJsb2FkaW5nIGxvYWRpbmctYmFzaWNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWNpcmN1bGFyLWdyYXBoIGFuaW1hdGlvbi1zcGluXFxcIj48L3NwYW4+IHt7IHRyYW5zbGF0ZSgnY3AubG9hZGluZycpIH19IDwvZGl2PiA8ZGl2IGNsYXNzPXVzZXJfcm9sZXMtZmllbGR0eXBlIHYtaWY9IWxvYWRpbmc+IDxyZWxhdGUtZmllbGR0eXBlIDpkYXRhLnN5bmM9ZGF0YSA6bmFtZT1uYW1lIDpjb25maWc9Y29uZmlnIDpzdWdnZXN0aW9ucy1wcm9wPXJvbGVzIDpkaXNhYmxlZD0hY2FuRWRpdCB2LXJlZjpyZWxhdGU+IDwvcmVsYXRlLWZpZWxkdHlwZT4gPC9kaXY+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlclJvbGVzRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfX3Z1ZV9zY3JpcHRfXywgX192dWVfdGVtcGxhdGVfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cbnJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJpZFxcXCI6MSxcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlJmluZGV4PTAhLi9WaWRlb0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dfSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1ZpZGVvRmllbGR0eXBlLnZ1ZVwiKVxuX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1odG1sLWxvYWRlciEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVmlkZW9GaWVsZHR5cGUudnVlXCIpXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX3NjcmlwdF9fIHx8IHt9XG5pZiAobW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSkgbW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0XG52YXIgX192dWVfb3B0aW9uc19fID0gdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcImZ1bmN0aW9uXCIgPyAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyB8fCAobW9kdWxlLmV4cG9ydHMub3B0aW9ucyA9IHt9KSkgOiBtb2R1bGUuZXhwb3J0c1xuaWYgKF9fdnVlX3RlbXBsYXRlX18pIHtcbl9fdnVlX29wdGlvbnNfXy50ZW1wbGF0ZSA9IF9fdnVlX3RlbXBsYXRlX19cbn1cbmlmICghX192dWVfb3B0aW9uc19fLmNvbXB1dGVkKSBfX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWQgPSB7fVxuT2JqZWN0LmtleXMoX192dWVfc3R5bGVzX18pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xudmFyIG1vZHVsZSA9IF9fdnVlX3N0eWxlc19fW2tleV1cbl9fdnVlX29wdGlvbnNfXy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbn0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9maWVsZHR5cGVzL1ZpZGVvRmllbGR0eXBlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIjx0ZW1wbGF0ZT5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiZGF0YVwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgLz5cblxuICAgIDxkaXYgY2xhc3M9XCJ2aWRlby1wcmV2aWV3LXdyYXBwZXJcIiB2LWlmPVwiaXNFbWJlZGRhYmxlIHx8IGlzVmlkZW9cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInZpZGVvLXByZXZpZXdcIj5cbiAgICAgICAgICAgIDxpZnJhbWUgdi1pZj1cImlzRW1iZWRkYWJsZVwiIHdpZHRoPVwiNTYwXCIgaGVpZ2h0PVwiMzE1XCIgc3JjPVwie3sgZW1iZWQgfX1cIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+XG4gICAgICAgICAgICA8dmlkZW8gY29udHJvbHMgdi1pZj1cImlzVmlkZW9cIiA6c3JjPVwiZW1iZWRcIiB3aWR0aD1cIjU2MFwiIGhlaWdodD1cIjMxNVwiPjwvdmlkZW8+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczogWydkYXRhJywgJ2NvbmZpZycsICduYW1lJ10sXG5cbiAgICBjb21wdXRlZDoge1xuICAgICAgICBlbWJlZCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaW5jbHVkZXMoJ3lvdXR1YmUnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEucmVwbGFjZSgnd2F0Y2g/dj0nLCAnZW1iZWQvJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaW5jbHVkZXMoJ3lvdXR1LmJlJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnJlcGxhY2UoJ3lvdXR1LmJlJywgJ3d3dy55b3V0dWJlLmNvbS9lbWJlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmluY2x1ZGVzKCd2aW1lbycpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5yZXBsYWNlKCcvdmltZW8uY29tJywgJy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNFbWJlZGRhYmxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5pbmNsdWRlcygneW91dHViZScpIHx8IHRoaXMuZGF0YS5pbmNsdWRlcygndmltZW8nKSB8fCB0aGlzLmRhdGEuaW5jbHVkZXMoJ3lvdXR1LmJlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNWaWRlbygpIHtcbiAgICAgICAgICAgIHJldHVybiAhIHRoaXMuaXNFbWJlZGRhYmxlICYmIChcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5jbHVkZXMoJy5tcDQnKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbmNsdWRlcygnLm9ndicpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmluY2x1ZGVzKCcubW92JykgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuaW5jbHVkZXMoJy53ZWJtJylcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAudmlkZW8tZmllbGR0eXBlIC52aWRlby1wcmV2aWV3LXdyYXBwZXIge1xuICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZjZmOWZjO1xuXHRcdGJvcmRlci10b3A6IDFweCBzb2xpZCAjZTBlMGUwO1xuXHRcdGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDNweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDNweDtcbiAgICB9XG4gICAgLnZpZGVvLWZpZWxkdHlwZSAudmlkZW8tcHJldmlldyB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgcGFkZGluZzogMjVweCAwIDU2LjI1JTtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgIH1cblxuICAgIC52aWRlby1maWVsZHR5cGUgLnZpZGVvLXByZXZpZXcgaWZyYW1lIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuXG4gICAgLnZpZGVvLWZpZWxkdHlwZSAudmlkZW8tcHJldmlldyB2aWRlbyB7XG4gICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgICAgIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xuICAgIH1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gVmlkZW9GaWVsZHR5cGUudnVlP2NiNzMwZjk2IiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8aW5wdXQgdHlwZT10ZXh0IHYtbW9kZWw9ZGF0YSBjbGFzcz1mb3JtLWNvbnRyb2wgLz4gPGRpdiBjbGFzcz12aWRlby1wcmV2aWV3LXdyYXBwZXIgdi1pZj1cXFwiaXNFbWJlZGRhYmxlIHx8IGlzVmlkZW9cXFwiPiA8ZGl2IGNsYXNzPXZpZGVvLXByZXZpZXc+IDxpZnJhbWUgdi1pZj1pc0VtYmVkZGFibGUgd2lkdGg9NTYwIGhlaWdodD0zMTUgc3JjPVxcXCJ7eyBlbWJlZCB9fVxcXCIgZnJhbWVib3JkZXI9MCBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+IDx2aWRlbyBjb250cm9scyB2LWlmPWlzVmlkZW8gOnNyYz1lbWJlZCB3aWR0aD01NjAgaGVpZ2h0PTMxNT48L3ZpZGVvPiA8L2Rpdj4gPC9kaXY+IFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1odG1sLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9WaWRlb0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX192dWVfc2NyaXB0X18sIF9fdnVlX3RlbXBsYXRlX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5fX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXX0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Vc2Vyc0ZpZWxkdHlwZS52dWVcIilcbl9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtaHRtbC1sb2FkZXIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1VzZXJzRmllbGR0eXBlLnZ1ZVwiKVxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9zY3JpcHRfXyB8fCB7fVxuaWYgKG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUpIG1vZHVsZS5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMuZGVmYXVsdFxudmFyIF9fdnVlX29wdGlvbnNfXyA9IHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJmdW5jdGlvblwiID8gKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgfHwgKG1vZHVsZS5leHBvcnRzLm9wdGlvbnMgPSB7fSkpIDogbW9kdWxlLmV4cG9ydHNcbmlmIChfX3Z1ZV90ZW1wbGF0ZV9fKSB7XG5fX3Z1ZV9vcHRpb25zX18udGVtcGxhdGUgPSBfX3Z1ZV90ZW1wbGF0ZV9fXG59XG5pZiAoIV9fdnVlX29wdGlvbnNfXy5jb21wdXRlZCkgX192dWVfb3B0aW9uc19fLmNvbXB1dGVkID0ge31cbk9iamVjdC5rZXlzKF9fdnVlX3N0eWxlc19fKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbnZhciBtb2R1bGUgPSBfX3Z1ZV9zdHlsZXNfX1trZXldXG5fX3Z1ZV9vcHRpb25zX18uY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG59KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RhdGFtaWMvcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvZmllbGR0eXBlcy9Vc2Vyc0ZpZWxkdHlwZS52dWVcbi8vIG1vZHVsZSBpZCA9IDY4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInVzZXJzLWZpZWxkdHlwZVwiPlxuICAgICAgICA8cmVsYXRlLWZpZWxkdHlwZSA6ZGF0YS5zeW5jPVwiZGF0YVwiIDpuYW1lPVwibmFtZVwiIDpjb25maWc9XCJjb25maWdcIiB2LWlmPVwiY29uZmlnLnR5cGVcIj48L3JlbGF0ZS1maWVsZHR5cGU+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6IHtcbiAgICAgICAgbmFtZTogU3RyaW5nLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7IHJldHVybiB7fTsgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgVnVlLnNldCh0aGlzLmNvbmZpZywgJ3R5cGUnLCAndXNlcnMnKTtcbiAgICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gVXNlcnNGaWVsZHR5cGUudnVlPzFmMmFhNzRhIiwibW9kdWxlLmV4cG9ydHMgPSBcIiA8ZGl2IGNsYXNzPXVzZXJzLWZpZWxkdHlwZT4gPHJlbGF0ZS1maWVsZHR5cGUgOmRhdGEuc3luYz1kYXRhIDpuYW1lPW5hbWUgOmNvbmZpZz1jb25maWcgdi1pZj1jb25maWcudHlwZT48L3JlbGF0ZS1maWVsZHR5cGU+IDwvZGl2PiBcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtaHRtbC1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL2ZpZWxkdHlwZXMvVXNlcnNGaWVsZHR5cGUudnVlXG4vLyBtb2R1bGUgaWQgPSA2OTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gRGlyZWN0aXZlc1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5pbXBvcnQgVGlwIGZyb20gJy4uL2RpcmVjdGl2ZXMvdGlwJztcbmltcG9ydCBFbGFzdGljIGZyb20gJy4uL2RpcmVjdGl2ZXMvZWxhc3RpYyc7XG5cblZ1ZS5kaXJlY3RpdmUoJ2VsYXN0aWMnLCBFbGFzdGljKTtcblZ1ZS5kaXJlY3RpdmUoJ3RpcCcsIFRpcCk7XG5cblZ1ZS5kaXJlY3RpdmUoJ2ZvY3VzJywgZnVuY3Rpb24gKGZvY3VzYWJsZSkge1xuICAgIGlmICghIGZvY3VzYWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCQoJ1thdXRvZm9jdXNdJykubGVuZ3RoID4gMCAmJiAhICQodGhpcy5lbCkud2l0aGluKCcuZm9ybS1ncm91cCcpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMudm0uJG5leHRUaWNrKCgpID0+IHRoaXMuZWwuZm9jdXMoKSk7XG59KVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9ib290c3RyYXAvZGlyZWN0aXZlcy5qcyIsImltcG9ydCB0aXBweSBmcm9tICd0aXBweS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHBhcmFtczogWyd0aXBUZXh0J10sXG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGlmICghIHRoaXMucGFyYW1zLnRpcFRleHQpIHJldHVybjtcblxuICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgndGl0bGUnLCB0aGlzLnBhcmFtcy50aXBUZXh0KTtcblxuICAgICAgICB0aXBweSh0aGlzLmVsLCB7XG4gICAgICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICAgICAgYW5pbWF0ZUZpbGw6IGZhbHNlLFxuICAgICAgICAgICAgdGhlbWU6ICdsaWdodCcsXG4gICAgICAgICAgICBwZXJmb3JtYW5jZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9zdGF0YW1pYy9yZXNvdXJjZXMvanMvZGlyZWN0aXZlcy90aXAuanMiLCJpbXBvcnQgYXV0b3NpemUgZnJvbSAnYXV0b3NpemUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgYmluZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhdXRvc2l6ZSh0aGlzLmVsKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpLCAxMCk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3N0YXRhbWljL3Jlc291cmNlcy9qcy9kaXJlY3RpdmVzL2VsYXN0aWMuanMiXSwic291cmNlUm9vdCI6IiJ9